; OM File Header - Saved 2020/07/29 22:40:58
; (6.16 :patc (om-make-point 874 10) (om-make-point -8 1) (om-make-point 1366 645) "" 183 0 "2018/06/09 10:22:43" "2020/07/29 22:40:47")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"C:../../../in-files/Vc-pont-A#4-mf-1c.sdif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Extracao-sdif para bpf-lib" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 636 258) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 226 172) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 225 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 102 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 265) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 168 271) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 728 378) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 801 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 203 26) (quote "<- Espectro alterado") "" (om-make-point 913 374) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 203 26) (quote "<- Todas as Frequências") "" (om-make-point 966 281) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 930 320) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 884 365) (om-make-point 20 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 896 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 891 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 950 104) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 869 143) (om-make-point 103 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 37 247) (om-make-point 507 326) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (append (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0E-4)) (quote (0.0 1.0E-4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (4618.8257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (4628.9146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (4598.325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (4596.9233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (4591.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (4580.867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (4620.3804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (4646.562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (4668.6733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (4667.0034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (4666.882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (4667.3535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (4667.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (4667.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (4667.888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (4669.3306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (4669.2393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (4666.451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (4662.938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (4661.6274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (4661.318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (4661.294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (4661.5654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (4662.788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (4664.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (4665.6694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (4664.6714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (4662.9575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (4662.9014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (4664.5444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (4666.1353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (4666.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (4666.1856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (4665.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (4664.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (4664.7046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (4668.1953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (4672.0186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (4671.8486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (4668.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (4665.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (4664.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (4665.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (4668.6865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (4671.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (4668.8804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (4662.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (4659.866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (4659.623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (4659.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (4660.5073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (4661.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (4661.0903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (4661.2427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (4661.9404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (4662.5537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (4662.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (4662.666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (4662.8154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (4662.691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (4662.467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (4662.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (4663.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (4663.4185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (4663.396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (4663.3423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (4663.343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (4663.5713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (4663.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (4663.4785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (4661.72)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (4659.3057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (4657.264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (4656.3496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (4657.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (4660.0796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (4662.2607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (4663.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (4663.463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (4662.704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (4661.919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (4661.7544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (4661.921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (4662.1577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (4662.6543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (4663.331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (4663.6416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (4663.1904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (4662.309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (4661.837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (4661.9927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (4662.225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (4662.2647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (4662.3203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (4662.3677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (4662.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (4661.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (4661.224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (4660.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (4659.2407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (4659.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (4660.6148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (4661.0396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (4660.6055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (4659.856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (4659.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (4660.658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (4662.3765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (4663.784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (4664.2427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (4664.152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (4664.1455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (4664.092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (4663.128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (4661.7407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (4661.267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (4661.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (4662.5254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (4662.3857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (4662.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (4662.39)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (4663.0015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (4663.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (4663.855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (4663.4956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (4662.6167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (4661.8325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (4661.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (4661.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (4661.3115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (4661.603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (4662.6475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (4663.757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (4664.0137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (4663.3154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (4662.39)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (4661.945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (4661.772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (4661.3897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (4660.858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (4660.825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (4661.4785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (4662.091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (4662.16)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (4662.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (4662.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (4663.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (4662.7246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (4662.0225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (4661.6797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (4661.8413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (4662.124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (4661.821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (4660.7813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (4659.829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (4659.923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (4660.9146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (4661.9834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (4662.606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (4662.9854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (4663.3076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (4663.497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (4663.525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (4663.536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (4663.5654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (4663.324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (4662.706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (4662.2905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (4662.603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (4663.1123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (4663.014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (4662.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (4662.0215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (4662.0923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (4662.1655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (4662.6607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (4663.959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (4664.7676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (4664.248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (4663.3403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (4663.552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (4664.1567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (4664.4043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (4664.073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (4663.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (4661.6533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (4660.384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (4660.7417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (4663.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (4665.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (4665.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (4664.7974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (4664.6274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (4664.751)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (4664.5923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (4664.417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (4666.1294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (4668.967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (4670.2783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (4671.429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (4673.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (4675.142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (4672.3237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (4666.108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (4661.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (4659.451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (4657.1206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (4655.526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (4656.3545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (4658.7925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (4659.85)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (4660.3877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (4661.8013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (4663.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (4663.797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (4663.1997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (4662.0513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (4661.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (4662.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (4663.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (4664.6543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (4665.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (4666.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (4666.7876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (4666.2773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (4665.9185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (4665.9624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (4665.988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (4665.826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (4665.2993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (4664.1836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (4662.7847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (4661.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (4661.9736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (4662.5537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (4663.0855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (4663.506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (4663.672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (4663.5566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (4663.7686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (4664.198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (4663.8613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (4662.8594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (4662.2188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (4662.161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (4662.411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (4663.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (4665.7964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (4673.527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (4654.4356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (4678.847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (4672.596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (4694.9277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (4654.2876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (4668.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (4667.7607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (4667.2715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (4665.946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (4664.042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (4662.564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (4661.489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (4660.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (4658.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (4657.802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (4659.684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (4662.8066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (4665.3145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (4665.9673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (4664.9844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (4663.0464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (4661.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (4660.2334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (4660.178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (4660.7656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (4661.892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (4663.2764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (4664.1665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (4664.0073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (4663.333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (4662.771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (4662.424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (4662.3525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (4662.414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (4662.1763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (4661.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (4660.176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (4659.1636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (4658.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (4659.109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (4660.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (4662.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (4664.7695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (4665.5835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (4664.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (4663.326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (4662.463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (4662.079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (4662.062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (4662.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (4663.341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (4664.387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (4664.2827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (4662.9976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (4662.004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (4662.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (4662.728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (4662.656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (4662.1797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (4661.8047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (4661.589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (4661.367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (4661.2085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (4661.1626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (4661.1987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (4661.4053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (4661.6665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (4661.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (4661.7524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (4662.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (4663.8037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (4664.835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (4665.4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (4665.6353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (4665.432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (4664.5576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (4663.72)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (4664.1333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (4664.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (4664.114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (4663.7754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (4664.3257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (4664.5225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (4662.5693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (4658.3247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (4646.785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (4642.6235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (4669.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (4663.4526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (4658.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (4655.4336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (4656.18)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (4645.926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (4647.358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (4669.068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (4666.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (4666.8643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (4666.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (4664.6963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (4663.341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (4662.8877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (4662.483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (4662.1675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (4661.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (4661.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (4661.527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (4661.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (4661.877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (4662.527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (4663.067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (4663.1113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (4662.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (4661.921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (4661.7544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (4662.442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (4663.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (4663.583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (4663.02)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (4661.976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (4661.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (4661.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (4662.395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (4663.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (4664.0703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (4664.0415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (4663.3)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (4662.1255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (4661.1514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (4660.4824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (4659.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (4659.2188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (4659.6294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (4660.6553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (4661.162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (4660.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (4660.47)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (4660.377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (4661.1377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (4662.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (4663.3955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (4663.6597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (4663.664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (4663.822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (4664.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (4664.33)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (4664.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (4664.3584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (4664.5845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (4664.822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (4665.0313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (4665.881)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (4668.0723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (4670.3897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (4670.7246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (4669.438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (4668.077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (4667.225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (4666.808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (4666.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (4665.97)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (4664.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (4663.702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (4663.7905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (4664.2554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (4663.284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (4675.814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (4675.814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (3693.1702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (3701.7447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (3717.3142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (3698.156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (3693.1502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (3691.3992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (3694.247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (3731.0552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (3731.7317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (3732.6736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (3733.777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (3734.6734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (3735.2442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (3735.9263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (3737.9407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (3739.0674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (3736.6326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (3731.4239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (3729.2683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (3728.6765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (3728.5506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (3728.5825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (3728.7786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (3729.4483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (3730.5564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (3731.2342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (3730.719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (3730.0694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (3730.7315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (3732.408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (3733.4886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (3733.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (3732.7566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (3731.5357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (3730.5159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (3730.046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (3729.926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (3729.7415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (3729.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (3728.6446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (3728.7102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (3729.2288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (3730.3655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (3731.7303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (3731.6206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (3729.288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (3727.6214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (3727.243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (3727.3235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (3727.6326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (3728.1414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (3728.5376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (3728.6504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (3728.8704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (3729.3484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (3729.672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (3729.7415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (3729.9234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (3730.2178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (3730.307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (3730.3206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (3730.5484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (3730.8238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (3730.8958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (3730.8452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (3730.782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (3730.7334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (3730.8863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (3731.1167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (3730.675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (3729.3018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (3727.6546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (3726.3902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (3725.9138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (3726.5345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (3727.7898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (3729.0362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (3730.0413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (3730.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (3730.2742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (3729.9673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (3729.8902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (3729.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (3729.9815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (3730.404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (3730.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (3731.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (3730.6917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (3729.9754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (3729.6494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (3729.7605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (3729.8684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (3729.8582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (3729.8606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (3729.853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (3729.8135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (3729.6946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (3729.2207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (3728.4976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (3728.1746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (3728.4617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (3728.8306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (3728.8496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (3728.528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (3728.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (3727.9514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (3728.5874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (3729.7525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (3730.8033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (3731.2285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (3731.1424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (3730.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (3730.5467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (3730.1016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (3729.8762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (3729.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (3730.173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (3730.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (3730.0196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (3729.7908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (3729.8)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (3730.0525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (3730.3958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (3730.6416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (3730.4986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (3730.0066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (3729.5877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (3729.411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (3729.2874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (3729.1768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (3729.3455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (3729.96)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (3730.6507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (3730.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (3730.4185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (3729.8826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (3729.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (3730.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (3729.8509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (3729.0027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (3728.6802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (3729.1145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (3729.4539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (3729.4246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (3729.6275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (3730.1597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (3730.3233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (3729.9588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (3729.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (3729.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (3729.4065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (3729.5667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (3729.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (3728.8238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (3728.2127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (3728.2305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (3728.87)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (3729.4969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (3729.7898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (3730.0828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (3730.552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (3730.9549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (3731.1394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (3731.2188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (3731.1116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (3730.5567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (3729.8792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (3729.8553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (3730.749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (3731.6238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (3731.2056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (3729.4353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (3727.2903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (3726.19)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (3727.0696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (3731.5237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (3734.6316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (3733.942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (3731.1834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (3729.5496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (3729.533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (3730.5889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (3731.6219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (3730.8565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (3728.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (3726.2747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (3727.3863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (3730.8914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (3732.6284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (3732.0699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (3730.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (3730.2652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (3731.268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (3732.5274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (3733.2805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (3732.3843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (3729.2718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (3723.7058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (3717.4973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (3715.076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (3714.1355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (3715.2752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (3720.5515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (3732.6966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (3730.4195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (3730.0125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (3729.7525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (3729.1687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (3728.8423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (3729.099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (3730.0928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (3733.0508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (3739.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (3741.5833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (3730.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (3726.3054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (3728.8186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (3731.8748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (3732.752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (3732.767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (3732.3792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (3731.333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (3730.2085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (3729.3152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (3728.5413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (3728.272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (3728.8924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (3730.1448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (3731.3267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (3732.0305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (3731.9798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (3731.2046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (3730.4993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (3730.3907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (3730.5528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (3730.7246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (3730.6629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (3730.1682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (3729.0366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (3727.361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (3726.1206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (3725.7283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (3725.563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (3724.3257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (3721.8863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (3721.2718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (3723.7273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (3727.0957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (3727.5218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (3726.0926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (3723.6472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (3721.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (3717.1355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (3713.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (3715.9478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (3723.8294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (3730.55)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (3732.2906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (3732.5428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (3731.7139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (3730.5366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (3730.2254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (3729.8684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (3728.6822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (3727.5266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (3728.3848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (3731.3518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (3733.7469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (3733.5032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (3729.8025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (3726.4666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (3726.1963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (3728.79)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (3731.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (3731.1795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (3729.7742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (3728.4763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (3728.3372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (3729.6297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (3731.3658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (3731.9095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (3732.8145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (3735.2835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (3735.563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (3732.4732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (3727.8872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (3726.3904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (3727.0564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (3728.179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (3728.525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (3728.4932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (3728.4964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (3728.3233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (3728.1887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (3728.518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (3729.0379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (3729.3658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (3729.8863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (3731.2342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (3731.9158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (3729.0699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (3725.5174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (3726.7923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (3731.8533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (3734.3762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (3735.0054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (3734.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (3733.035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (3732.8587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (3732.5308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (3731.279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (3730.0489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (3730.5852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (3732.9842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (3735.1114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (3734.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (3732.2837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (3731.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (3732.2469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (3731.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (3730.3997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (3729.09)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (3728.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (3728.2527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (3728.1775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (3727.7779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (3727.0137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (3726.3387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (3726.5408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (3728.2124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (3732.68)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (3737.8726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (3738.0237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (3730.9427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (3727.1336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (3726.6138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (3727.5554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (3729.6223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (3730.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (3730.1927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (3728.1673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (3727.1287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (3727.8355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (3731.1262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (3733.791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (3733.7683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (3732.5786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (3731.3824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (3730.2454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (3729.3545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (3729.118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (3729.194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (3729.0686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (3728.9236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (3728.8457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (3728.8028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (3729.0642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (3729.7627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (3730.5069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (3730.7388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (3730.3699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (3729.7334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (3729.4412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (3729.7952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (3730.4624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (3730.7395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (3730.2007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (3729.1848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (3728.609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (3728.9549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (3729.9195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (3730.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (3731.3753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (3731.204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (3730.2595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (3729.1678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (3728.5098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (3728.0813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (3727.6219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (3727.4698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (3727.826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (3728.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (3728.7884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (3728.8682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (3728.5576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (3728.5037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (3729.1746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (3730.071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (3730.481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (3730.5684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (3730.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (3731.1096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (3731.224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (3730.8609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (3730.3074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (3729.867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (3729.571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (3729.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (3729.361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (3729.2884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (3729.0025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (3728.9778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (3729.5144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (3729.861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (3729.6306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (3729.3872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (3729.4698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (3729.6807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (3729.7544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (3729.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (3729.4846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (3729.4532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (3729.2796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (3728.9136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (3728.7176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (3729.057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (3729.636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (3729.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (3729.3203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (3728.7488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (3728.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (3729.1829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (3729.6927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (3729.3213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (3728.7298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (3729.016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (3729.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (3730.0574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (3730.6763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (3731.5017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (3731.9248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (3732.0257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (3731.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (3730.5728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (3729.8797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (3729.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (3729.4336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (3728.9817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (3729.0264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (3729.5772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (3729.7666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (3729.2993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (3728.7852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (3728.7552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (3729.2945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (3730.016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (3730.5918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (3731.2603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (3731.7632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (3731.2478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (3729.9954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (3728.7034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (3728.059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (3728.3404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (3729.0623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (3729.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (3728.5952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (3727.6687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (3727.3374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (3727.8006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (3728.6555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (3729.1155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (3729.4497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (3729.9129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (3729.5703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (3729.2503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (3730.1048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (3731.725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (3732.9055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (3732.3907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (3731.3582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (3730.7322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (3730.0935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (3729.1795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (3728.559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (3728.6009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (3728.8555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (3729.0804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (3729.5005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (3729.943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (3729.8887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (3729.5376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (3729.5755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (3730.0452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (3730.4417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (3730.5923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (3730.435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (3729.6585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (3728.5293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (3727.7786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (3727.9197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (3728.6319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (3729.1966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (3729.373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (3729.4737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (3729.4422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (3728.8926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (3728.2088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (3728.185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (3728.889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (3729.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (3730.464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (3730.6643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (3730.4488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (3730.1275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (3729.935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (3729.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (3729.7805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (3729.5699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (3729.3958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (3729.464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (3729.6878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (3729.7727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (3729.6114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (3729.2166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (3728.7459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (3728.532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (3728.6206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (3728.7783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (3728.8223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (3728.5752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (3727.9483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (3727.5078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (3727.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (3729.0738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (3730.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (3731.2832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (3731.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (3732.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (3732.078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (3731.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (3728.5447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (3726.1753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (3727.0945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (3729.7442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (3728.1377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (3743.6287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (3727.253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (3728.2888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (3728.2888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (2821.9038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (2811.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (2846.5325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (2817.3535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (2831.029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (2835.2703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (2830.3596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (2792.6013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (2811.85)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (2809.981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (2782.7962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (2809.2432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (2806.7178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (2827.8164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (2796.6758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (2795.7508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (2795.0579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (2795.0498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (2795.2556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (2795.5867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (2796.0435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (2796.4903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (2797.0933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (2797.997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (2798.4756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (2797.9278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (2797.4683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (2798.3516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (2800.3338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (2801.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (2800.9353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (2798.9136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (2796.707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (2795.657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (2795.7056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (2796.4793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (2797.2285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (2797.4304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (2797.3487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (2797.5347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (2797.9285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (2798.5708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (2799.2002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (2798.5032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (2796.1663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (2794.5525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (2794.666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (2795.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (2795.2542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (2795.6719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (2796.121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (2796.2495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (2796.4058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (2796.878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (2797.155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (2797.0183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (2797.0637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (2797.5637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (2797.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (2797.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (2797.8423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (2798.058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (2797.982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (2797.7307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (2797.6892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (2797.724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (2797.8106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (2798.074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (2797.804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (2796.6739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (2795.3528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (2794.627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (2794.3304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (2794.5403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (2795.3054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (2796.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (2796.7886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (2797.4597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (2797.7835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (2797.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (2797.4932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (2797.1614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (2797.031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (2797.3225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (2797.831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (2798.2532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (2798.1316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (2797.2503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (2796.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (2796.2957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (2796.6558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (2796.7017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (2796.5396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (2796.5423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (2796.7083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (2796.9278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (2797.0428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (2796.9036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (2796.5735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (2796.2478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (2796.0784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (2796.1626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (2796.3948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (2796.3015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (2795.8482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (2795.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (2795.827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (2796.308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (2796.9449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (2797.4202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (2797.2715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (2797.1743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (2798.2149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (2799.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (2798.967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (2797.1353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (2796.1956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (2796.901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (2797.4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (2796.8875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (2796.2156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (2795.6309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (2795.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (2795.7903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (2797.7964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (2798.832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (2798.411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (2798.3462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (2798.6729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (2796.4505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (2790.7783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (2788.4429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (2791.6316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (2795.802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (2796.0127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (2822.1616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (2822.1616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (2762.8098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (2769.5589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (2741.583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (2739.254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (2735.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (2731.4163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (2729.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (2725.9617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (2722.8196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (2721.325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (2715.1829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (2706.1863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (2732.1668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (2732.0999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (2730.7679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (2729.8814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (2728.749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (2729.4617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (2733.1834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (2737.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (2739.1065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (2735.7085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (2735.337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (2750.5318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (2749.5027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (2753.915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (2756.9153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (2727.3255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (2719.3435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (2722.0493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (2742.2176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (2739.4126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (2742.9754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (2759.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (2763.4566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (2729.97)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (2707.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (2729.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (2712.0415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (2715.625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (2724.1997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (2748.5242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (2743.5835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (2743.7342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (2707.8606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (2706.1939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (2709.8709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (2746.8518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (2724.241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (2718.9683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (2713.1797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (2713.499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (2718.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (2722.8719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (2725.3535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (2726.1206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (2720.9788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (2716.3013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (2716.986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (2719.6712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (2713.765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (2708.028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (2702.408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (2702.3294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (2702.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (2707.1602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (2708.639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (2706.8025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (2705.3145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (2711.4436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (2733.4348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (2741.1448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (2718.8504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (2743.9134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (2733.2515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (2732.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (2735.6626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (2764.78)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (2759.1792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (2754.4397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (2754.056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (2731.7703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (2704.262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (2708.0088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (2712.413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (2739.3335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (2737.6573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (2737.2476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (2736.2337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (2704.4429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (2706.7686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (2705.1013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (2704.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (2707.9397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (2749.9336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (2769.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (2731.3694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (2701.2659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (2699.5454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (2693.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (2690.573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (2721.9634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (2725.216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (2729.1778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (2756.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (2755.8223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (2752.7798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (2746.928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (2714.1177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (2711.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (2710.2412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (2709.874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (2717.8516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (2725.0078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (2695.8887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (2701.4236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (2732.5742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (2733.7903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (2735.0176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (2757.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (2752.2288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (2750.8167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (2752.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (2753.214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (2752.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (2752.8347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (2757.6697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (2768.1573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (2767.3262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (2745.6326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (2773.4856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (2774.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (2788.8474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (2792.0762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (2796.8648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (2798.9082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (2797.9617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (2798.2176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (2799.7027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (2799.8455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (2798.1094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (2796.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (2796.1653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (2796.9175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (2797.459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (2796.6365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (2794.9036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (2794.372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (2795.6648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (2797.7166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (2798.7957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (2798.6516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (2798.3929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (2798.262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (2797.976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (2797.5767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (2797.4236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (2797.5335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (2797.298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (2796.5642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (2796.2696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (2796.9693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (2797.7495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (2797.4527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (2796.8662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (2797.9746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (2799.161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (2798.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (2798.3909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (2798.6924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (2799.29)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (2799.6516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (2799.114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (2797.797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (2796.8582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (2797.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (2797.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (2797.038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (2796.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (2796.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (2796.795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (2797.8528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (2798.8028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (2798.8694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (2798.3494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (2798.1309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (2797.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (2797.2495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (2796.8098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (2798.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (2799.536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (2795.2847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (2791.064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (2792.8684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (2795.3428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (2795.8648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (2794.6477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (2794.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (2795.2522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (2795.9905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (2796.1646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (2797.7373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (2798.79)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (2792.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (2814.0574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (2810.4353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (2797.9268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (2799.687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (2798.8753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (2797.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (2798.4104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (2798.9102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (2797.5999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (2795.5064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (2795.0093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (2795.8003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (2796.7498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (2797.049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (2796.9976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (2797.5032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (2798.5025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (2798.7356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (2798.0933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (2797.6814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (2797.6695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (2797.3196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (2796.7139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (2796.7334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (2797.2762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (2797.4805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (2796.7864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (2793.9685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (2786.376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (2782.969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (2785.6668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (2794.3574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (2799.31)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (2801.5828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (2800.5899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (2799.1555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (2799.2793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (2800.579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (2800.8408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (2799.8238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (2798.4947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (2797.532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (2796.2566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (2795.1114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (2795.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (2800.0547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (2805.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (2805.2703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (2801.0896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (2799.1546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (2801.6458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (2802.3819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (2799.9402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (2796.8355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (2797.19)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (2799.5115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (2802.4549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (2804.9495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (2808.2918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (2814.0852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (2812.893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (2786.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (2784.1834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (2780.2664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (2778.9993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (2787.7088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (2792.3284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (2793.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (2795.821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (2797.6822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (2797.9785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (2797.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (2796.6634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (2795.816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (2795.0928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (2794.7166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (2794.6929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (2794.9612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (2795.029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (2793.0469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (2790.876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (2791.5738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (2798.9744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (2804.2803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (2810.0218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (2810.9285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (2807.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (2800.573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (2797.79)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (2795.094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (2792.0435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (2790.3614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (2791.4126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (2794.06)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (2796.472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (2797.108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (2796.7866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (2796.5222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (2796.5442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (2796.7542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (2797.4449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (2798.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (2799.4036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (2799.0213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (2797.4248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (2798.1245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (2804.4136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (2801.8487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (2792.3616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (2794.856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (2797.037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (2798.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (2799.7334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (2799.3155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (2797.978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (2798.0127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (2799.2622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (2799.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (2799.3067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (2798.9549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (2798.6426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (2797.5938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (2796.7024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (2797.7488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (2798.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (2797.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (2794.3533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (2793.0208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (2795.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (2800.2432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (2801.8623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (2801.408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (2799.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (2798.0083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (2797.6558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (2798.5098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (2799.3438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (2798.582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (2796.969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (2795.8982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (2795.8618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (2796.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (2796.2583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (2796.224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (2796.3567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (2797.1436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (2798.3574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (2798.8916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (2798.2422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (2797.0633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (2796.1099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (2795.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (2796.7342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (2797.9998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (2798.5254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (2797.567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (2795.7876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (2795.0486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (2795.8655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (2797.4922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (2798.8257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (2799.2466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (2798.5452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (2796.7107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (2795.0288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (2794.5408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (2794.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (2795.1785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (2795.2757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (2795.5579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (2796.3802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (2797.341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (2797.4212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (2796.399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (2795.8347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (2796.7642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (2798.2598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (2798.8777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (2798.7556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (2798.6929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (2798.8374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (2798.5142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (2797.4124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (2796.1682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (2795.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (2795.64)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (2796.4217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (2796.9256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (2796.5623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (2795.9793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (2796.299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (2797.8509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (2798.5974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (2797.9644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (2796.9478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (2796.6946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (2796.7686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (2796.8548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (2796.9265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (2796.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (2796.3665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (2796.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (2796.9324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (2797.3123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (2797.5015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (2797.7234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (2797.464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (2796.437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (2795.5403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (2795.945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (2797.8289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (2799.1343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (2798.3225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (2796.982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (2797.4368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (2799.0838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (2799.4524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (2798.5899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (2797.9778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (2798.7652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (2799.399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (2798.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (2796.5804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (2795.9995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (2796.4234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (2796.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (2796.5076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (2796.7779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (2797.5308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (2797.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (2797.3919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (2796.7444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (2796.2688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (2796.427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (2797.5794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (2798.9495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (2799.7725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (2799.6292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (2798.2888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (2796.532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (2795.301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (2795.2986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (2796.1748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (2797.065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (2797.0452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (2796.0098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (2794.675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (2793.989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (2794.2124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (2795.4834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (2798.1438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (2800.0008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (2799.4627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (2796.7918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (2795.6453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (2797.0733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (2799.527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (2800.6026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (2799.427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (2797.8792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (2797.2036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (2796.5684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (2795.561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (2795.1536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (2795.8882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (2796.8304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (2797.2566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (2797.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (2797.5428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (2797.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (2796.7986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (2797.0652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (2797.821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (2798.223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (2798.1873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (2797.6673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (2796.3697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (2795.0567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (2794.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (2795.7552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (2797.1287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (2797.7403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (2797.4468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (2797.0735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (2796.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (2796.2324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (2795.7088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (2796.096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (2797.1529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (2798.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (2798.4285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (2798.3352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (2797.9268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (2797.5843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (2797.5159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (2797.4905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (2797.2847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (2797.0594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (2797.1314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (2797.4702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (2797.7615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (2797.7354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (2797.3474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (2796.5984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (2795.9986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (2796.1429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (2796.6822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (2796.762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (2796.2996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (2795.7613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (2795.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (2795.7027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (2796.5205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (2797.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (2799.5215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (2802.6214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (2808.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (2813.6834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (2819.9148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (2796.712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (2798.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (2808.3118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (2800.8474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (2795.6839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (2794.115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (2795.0169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (2795.3189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (2794.7178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (2794.5066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (2794.6558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (2794.7969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (2794.816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (2794.9588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.796916)) (quote (2795.337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.809411)) (quote (2795.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.821905)) (quote (2795.584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.834399)) (quote (2795.2932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.846893)) (quote (2795.076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.859388)) (quote (2795.093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.871882)) (quote (2795.4236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.884377)) (quote (2795.7044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.896871)) (quote (2795.28)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.909365)) (quote (2794.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.921859)) (quote (2794.0305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.934354)) (quote (2794.0984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.946848)) (quote (2794.2134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.959342)) (quote (2794.3184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.971837)) (quote (2794.7408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.984331)) (quote (2795.4239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.996825)) (quote (2796.1573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.00932)) (quote (2797.277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.021814)) (quote (2799.0205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.034308)) (quote (2799.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.046803)) (quote (2798.9912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.059297)) (quote (2797.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.071791)) (quote (2795.7647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.084286)) (quote (2794.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09678)) (quote (2793.8179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.109274)) (quote (2793.503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.121768)) (quote (2793.503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (2307.6616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (2308.4314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (2309.7412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (2310.9588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (2301.8123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (2298.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (2297.3885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (2300.0906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (2305.3726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (2305.0257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (2300.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (2287.2166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (2291.6453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (2308.5789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (2328.2976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (2320.753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (2320.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (2325.0457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (2329.883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (2331.6585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (2331.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (2330.723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (2329.302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (2328.6077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (2329.7703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (2333.5384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (2337.0064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (2336.9514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (2334.4153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (2330.3208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (2331.222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (2333.7346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (2334.0347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (2332.0872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (2331.0706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (2331.7888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (2332.5413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (2332.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (2331.3643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (2329.4915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (2328.7115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (2329.8904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (2330.6333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (2328.5335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (2326.8296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (2327.8548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (2328.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (2328.0154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (2328.5662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (2331.192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (2332.9007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (2334.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (2335.5923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (2335.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (2336.2664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (2337.9156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (2337.7957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (2334.1087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (2327.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (2323.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (2325.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (2329.5388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (2330.5293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (2329.9436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (2329.422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (2329.5874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (2328.9532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (2325.9705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (2320.365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (2317.8189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (2318.0415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (2318.6983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (2314.305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (2308.6734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (2304.9366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (2296.704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (2296.4412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (2297.5545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (2297.9969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (2297.4165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (2297.557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (2298.4969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (2298.4947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (2297.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (2300.5017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (2318.3054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (2306.8208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (2282.4178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (2282.3133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (2297.025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (2295.6358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (2296.3538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (2295.8135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (2295.8357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (2296.8599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (2298.912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (2307.096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (2283.9185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (2285.4695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (2296.0838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (2291.4488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (2291.9668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (2296.9927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (2304.2478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (2306.4895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (2309.1404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (2307.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (2307.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (1879.8167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (1875.7599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (1896.1327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (1894.1464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (1858.7622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (1901.1026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (1897.9437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (1927.0505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (1867.2254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (1863.7269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (1864.1753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (1865.3247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (1865.2239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (1864.2733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (1863.7312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (1864.5209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (1865.4387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (1865.5592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (1865.2815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (1865.066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (1865.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (1866.21)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (1867.5669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (1867.8497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (1865.8556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (1864.0496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (1864.2366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (1865.8486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (1866.8822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (1867.0249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (1866.7378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (1866.0975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (1865.512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (1865.3916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (1865.4691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (1865.3795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (1865.1165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (1864.8362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (1864.7225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (1864.9389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (1865.2101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (1864.8369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (1863.714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (1862.5214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (1862.4573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (1863.0599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (1863.5209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (1863.9819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (1864.606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (1864.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (1864.7008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (1864.8652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (1865.3316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (1865.4273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (1865.1991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (1865.2039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (1865.3267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (1865.2664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (1865.2184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (1865.3832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (1865.5492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (1865.5591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (1865.4888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (1865.3723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (1865.2632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (1865.4165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (1865.6719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (1865.3876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (1864.3615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (1863.2113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (1862.2988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (1862.0596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (1863.0631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (1864.5296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (1865.4861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (1865.8408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (1865.6342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (1864.9707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (1864.5347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (1864.5546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (1864.7228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (1864.9716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (1865.354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (1865.636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (1865.5263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (1865.0724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (1864.6828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (1864.7194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (1864.9774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (1865.0465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (1864.9303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (1864.8547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (1864.8406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (1864.8549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (1864.8145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (1864.4606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (1863.8851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (1863.7468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (1864.2155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (1864.682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (1864.5888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (1864.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (1863.6953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (1863.6769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (1864.2389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (1865.0617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (1865.6275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (1865.6513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (1865.3945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (1865.2296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (1865.1276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (1864.8639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (1864.5914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (1864.6273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (1864.9159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (1865.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (1864.8897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (1864.6653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (1864.7098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (1864.9214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (1865.1033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (1865.211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (1865.1365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (1864.8596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (1864.6233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (1864.5512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (1864.4921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (1864.3958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (1864.5393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (1865.0958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (1865.6729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (1865.778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (1865.4083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (1865.0044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (1864.811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (1864.6336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (1864.2872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (1863.973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (1864.0536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (1864.4619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (1864.7034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (1864.6736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (1864.927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (1865.4396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (1865.5001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (1865.0071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (1864.6194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (1864.667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (1864.9929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (1865.1405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (1864.7178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (1863.8673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (1863.3432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (1863.7052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (1864.4966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (1865.0508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (1865.3276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (1865.6184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (1865.7881)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (1865.6486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (1865.4031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (1865.2727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (1865.1189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (1864.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (1864.6264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (1864.8822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (1865.5071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (1865.7799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (1865.1321)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (1863.9142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (1862.9911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (1863.0455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (1864.2732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (1866.3264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (1867.3522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (1866.6735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (1865.2782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (1864.4995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (1864.5641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (1865.1715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (1865.4956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (1864.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (1863.4069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (1863.335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (1864.8279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (1866.2316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (1866.3588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (1865.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (1864.7877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (1865.0419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (1865.8832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (1866.7981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (1866.7393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (1865.0128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (1862.3417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (1860.9299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (1861.2792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (1863.6124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (1867.008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (1868.8253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (1867.8385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (1865.8158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (1864.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (1864.8186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (1864.8054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (1864.7703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (1864.9354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (1864.9896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (1864.8809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (1865.1571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (1865.7415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (1865.9462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (1865.6653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (1864.9762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (1863.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (1863.2274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (1864.4924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (1867.4196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (1869.4649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (1870.3318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (1870.4136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (1869.3613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (1867.2377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (1866.3262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (1866.8694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (1867.5261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (1867.533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (1866.7217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (1865.5087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (1864.4506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (1863.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (1864.0182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (1864.7738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (1865.2887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (1865.2626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (1865.0147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (1864.6846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (1863.9852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (1863.12)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (1863.5032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (1865.1188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (1866.3516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (1866.4539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (1865.9716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (1865.6895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (1865.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (1864.9528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (1864.9773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (1865.226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (1865.0426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (1866.0324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (1867.6884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (1865.8552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (1852.7272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (1855.5652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (1859.0272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (1864.2605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (1867.1719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (1866.5325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (1864.2155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (1863.0272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (1867.3792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (1849.4224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (1851.9608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (1867.8908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (1866.6137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (1867.6909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (1868.8699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (1867.9291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (1865.4373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (1863.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (1863.6282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (1864.4392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (1865.6062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (1866.7619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (1866.7689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (1865.9572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (1866.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (1866.7055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (1866.5647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (1865.5087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (1864.6278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (1864.1828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (1863.7031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (1863.2413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (1863.1229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (1863.1676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (1863.3267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (1863.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (1864.6211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (1865.2144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (1865.73)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (1865.871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (1865.1145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (1863.8563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (1864.4785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (1866.5755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (1867.5311)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (1866.9342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (1866.2813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (1866.1785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (1866.2094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (1866.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (1866.0717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (1865.243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (1863.7975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (1862.9227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (1863.1997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (1863.986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (1864.2821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (1864.2216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (1864.4219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (1864.9081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (1865.1536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (1864.8449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (1864.4205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (1864.5065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (1864.9566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (1865.0072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (1864.5709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (1864.2225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (1864.1685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (1864.1517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (1863.8754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (1863.4935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (1863.7565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (1864.9646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (1865.8776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (1865.8016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (1865.257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (1865.0186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (1865.4168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (1865.9959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (1865.9631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (1865.3952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (1865.2208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (1865.2805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (1864.9197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (1864.4186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (1864.5818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (1865.6248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (1866.7785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (1867.0623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (1866.6349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (1866.1824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (1865.8048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (1865.1815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (1864.5774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (1864.4818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (1864.754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (1864.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (1864.6593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (1864.3591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (1864.4078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (1865.0824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (1865.7709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (1865.8085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (1865.347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (1864.7382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (1864.2127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (1864.0902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (1864.5311)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (1865.2349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (1865.502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (1864.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (1864.0928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (1863.8181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (1864.4177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (1865.3743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (1865.9984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (1866.0521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (1865.6314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (1864.8482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (1864.1757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (1864.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (1864.0957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (1864.0499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (1864.0452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (1864.3576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (1864.8363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (1865.1378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (1865.0349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (1864.5422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (1864.3358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (1864.7824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (1865.2647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (1865.125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (1864.89)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (1865.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (1865.8864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (1866.059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (1865.3668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (1864.3078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (1863.634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (1863.7153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (1864.2251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (1864.5643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (1864.5187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (1864.6293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (1865.295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (1865.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (1864.6685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (1862.9862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (1862.6356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (1863.7487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (1864.9613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (1865.2599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (1864.6615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (1863.759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (1863.1909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (1863.3871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (1863.714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (1863.8208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (1864.3418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (1865.1514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (1864.8789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (1863.4906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (1862.7208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (1864.1388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (1866.941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (1867.8746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (1865.4065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (1863.0122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (1863.9827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (1866.3065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (1866.4164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (1865.1084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (1864.785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (1866.2578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (1867.131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (1865.9644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (1863.3705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (1862.5776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (1863.2455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (1863.8013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (1863.9467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (1864.8591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (1866.1804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (1865.8164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1864.1953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (1862.9238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (1862.7933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (1863.8883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (1866.2857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (1868.0411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (1868.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (1867.7996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (1864.8298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (1861.6483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (1860.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (1861.9979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (1864.3677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (1865.9152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (1865.1705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (1862.5292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (1860.6979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (1861.0686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (1863.3829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (1867.2034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (1869.4804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (1869.0847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (1865.6755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (1863.0169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (1863.3512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (1866.1303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (1868.6908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (1868.9876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (1867.0674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (1865.8229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (1865.5015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (1864.8921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (1863.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (1862.7606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (1864.2142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (1865.6088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (1865.6408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (1865.7369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (1866.062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (1865.4456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (1864.1829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (1864.1445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (1865.1095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (1865.6594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (1865.521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (1865.2472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (1864.407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (1863.1875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (1862.8264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (1863.794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (1865.0974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (1865.6782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (1865.4733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (1865.24)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (1864.9389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (1863.9177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (1863.0134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (1863.5173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (1864.9741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (1866.0188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (1866.1629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (1865.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (1865.2239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (1864.8363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (1864.7077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (1864.693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (1864.6437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (1864.4869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (1864.3936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (1864.6398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (1865.1152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (1865.3601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (1865.1998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (1864.6675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (1864.0131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (1863.7649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (1864.0239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (1864.3882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (1864.4215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (1864.0079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (1863.4537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (1863.4902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (1864.542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (1866.2125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (1867.7195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (1868.8878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (1869.354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (1867.9533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (1865.5844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (1864.6361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (1865.326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (1865.8915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (1865.1571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (1863.9505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (1863.3063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (1863.4578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (1863.799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (1863.9364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (1863.9236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (1863.6548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (1863.2028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (1863.2512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (1864.246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.796916)) (quote (1865.5973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.809411)) (quote (1866.2422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.821905)) (quote (1866.0957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.834399)) (quote (1865.4514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.846893)) (quote (1865.7238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.859388)) (quote (1871.4938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.871882)) (quote (1874.2644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.884377)) (quote (1868.1964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.896871)) (quote (1862.817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.909365)) (quote (1862.9854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.921859)) (quote (1864.0068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.934354)) (quote (1864.29)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.946848)) (quote (1863.7391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.959342)) (quote (1863.2887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.971837)) (quote (1863.4793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.984331)) (quote (1863.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.996825)) (quote (1863.8601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.00932)) (quote (1863.4628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.021814)) (quote (1863.0131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.034308)) (quote (1862.6828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.046803)) (quote (1862.5542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.059297)) (quote (1862.7958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.071791)) (quote (1863.3964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.084286)) (quote (1863.9154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09678)) (quote (1863.9404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.109274)) (quote (1863.6304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.121768)) (quote (1863.3193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.134263)) (quote (1863.027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.146758)) (quote (1862.8106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.159252)) (quote (1862.7269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.171746)) (quote (1862.7269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (1388.2838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (1390.5546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (1392.6727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (1394.348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (1395.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (1397.0534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (1398.3944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (1399.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (1400.0022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (1400.499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (1401.0778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (1401.5082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (1401.5225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (1401.0458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (1400.1814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (1399.105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (1398.224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (1397.9258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (1398.0724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (1398.2478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (1398.1659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (1397.7925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (1396.6896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (1391.6759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (1388.8706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (1391.1989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (1397.465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (1399.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (1401.8279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (1405.9219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (1406.9979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (1405.7007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (1403.8723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (1401.8734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (1399.9995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (1399.1542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (1399.1069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (1399.2828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (1399.246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (1398.9586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (1398.7571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (1398.8462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (1399.1043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (1399.2731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (1399.1275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (1398.5844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (1397.835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (1397.2135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (1397.0505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (1397.1992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (1397.4006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (1397.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (1397.559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (1395.8526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (1390.3115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (1389.188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (1392.1842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (1396.0156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (1397.2476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (1398.1411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (1398.8596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (1399.0615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (1399.0819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (1399.4996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (1400.9016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (1404.1638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (1403.9078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (1396.8965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (1391.5492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (1393.7037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (1394.8634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (1394.971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (1395.3967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (1396.2782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (1397.214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (1398.1124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (1398.7219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (1399.0349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (1399.1323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (1398.6939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (1397.7892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (1397.0591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (1395.9252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (1392.8903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (1390.0326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (1389.4004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (1392.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (1395.5446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (1396.8373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (1388.8534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (1384.5216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (1384.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (1386.9132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (1392.0127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (1397.9042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (1398.2894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (1398.2003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (1398.1957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (1398.2291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (1398.2173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (1398.1793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (1398.1985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (1398.2858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (1398.0231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (1397.3301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (1397.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (1397.6742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (1397.2151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (1397.4751)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (1398.5877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (1400.4597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (1400.7493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (1400.2384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (1399.589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (1399.1752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (1399.0303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (1398.9107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (1398.6828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (1398.4159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (1398.4976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (1398.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (1399.2819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (1399.0563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (1398.514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (1398.6233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (1399.7435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (1399.4518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (1398.0523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (1397.4724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (1397.8516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (1397.9116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (1397.9838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (1398.4751)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (1399.5126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (1400.4968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (1400.6515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (1399.7807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (1398.3933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (1397.6384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (1397.9356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (1398.6102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (1398.8931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (1398.8157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (1401.6691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (1404.0123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (1401.0703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (1393.8359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (1395.9374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (1396.6618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (1395.1458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (1395.0126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (1396.9024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (1397.8888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (1397.8088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (1398.389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (1401.056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (1405.6207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (1415.8817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (1418.0486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (1394.7348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (1398.5009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (1398.5419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (1398.2604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (1398.2813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (1398.4531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (1398.5829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (1398.6619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (1390.1526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (1408.7106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (1391.7131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (1394.9472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (1395.8374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (1396.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (1397.6945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (1398.9295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (1399.9235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (1400.6207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (1401.2583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (1401.2926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (1400.2064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (1398.6032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (1397.999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (1398.3473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (1398.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (1398.2185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (1397.9937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (1398.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (1399.1607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (1399.7329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (1399.4144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (1398.3289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (1397.5967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (1398.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (1400.0399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (1401.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (1400.5453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (1398.5352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (1396.8722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (1396.5092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (1397.0812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (1398.3692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (1400.0243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (1400.8391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (1400.3034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (1399.1865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (1398.6755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (1398.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (1398.433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (1398.2025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (1398.0299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (1398.0763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (1398.2992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (1398.5266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (1398.6221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (1398.6057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (1398.6372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (1398.8856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (1399.2854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (1399.513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (1399.3591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (1398.9453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (1398.5818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (1398.4215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (1398.3958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (1398.3899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (1398.4028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (1398.4971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (1398.6611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (1398.8284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (1398.9291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (1398.9172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (1398.8783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (1399.0037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (1399.246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (1399.3457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (1399.2199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (1399.0072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (1398.7969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (1398.5077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (1398.1315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (1397.9225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (1398.1417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (1398.6176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (1399.0004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (1399.3444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (1399.738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (1399.8363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (1399.449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (1398.8602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (1398.2312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (1397.683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (1397.833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (1399.5186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (1402.7754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (1405.0901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (1404.9844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (1403.2233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (1401.9276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (1401.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (1400.7849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (1400.6323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (1400.6674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (1400.3917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (1399.626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (1398.8377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (1398.5708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (1398.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (1398.8981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (1398.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (1398.4443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (1398.4371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (1398.6588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (1398.7278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (1398.4861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (1398.3132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (1398.585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (1399.1901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (1399.7736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (1400.0371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (1399.8068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (1399.3225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (1399.0121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (1398.9122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (1398.7831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (1398.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (1398.1304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (1397.7839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (1397.6127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (1397.6134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (1397.6974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (1397.8613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (1398.164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (1398.5623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (1398.9165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (1399.1079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (1399.0812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (1398.8889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (1398.8534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (1399.5272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (1400.5848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (1400.7359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (1399.7163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (1398.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (1398.5455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (1398.8645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (1399.1554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (1399.1492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (1398.849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (1398.5205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (1398.3861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (1398.4192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (1398.4983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (1398.5165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (1398.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (1398.36)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (1398.396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (1398.414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (1398.3643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (1398.4695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (1398.7775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (1398.9784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (1398.8666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (1398.5917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (1398.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (1398.0304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (1397.6843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (1397.2576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (1396.8538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (1396.799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (1397.3171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (1398.1049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (1398.6399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (1399.0307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (1399.7625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (1400.8092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (1401.4802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (1401.2885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (1400.3773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (1399.3003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (1398.5452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (1398.1091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (1397.8357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (1397.6832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (1397.8207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (1398.472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (1399.7069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (1400.8359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (1400.9279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (1400.0659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (1399.1343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (1399.0101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (1399.3756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (1399.483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (1398.7289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (1397.5891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (1397.1848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (1397.9237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (1398.8212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (1399.1774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (1399.042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (1398.6608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (1398.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (1398.1848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (1398.1687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (1398.3024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (1399.2708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (1403.6122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (1407.6583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (1406.3884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (1406.3884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (1224.0792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (1222.1592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (1222.0656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (1252.5941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (1225.6399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (1225.1511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (1223.9085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (1233.97)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (1237.1558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (1232.102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (1227.4303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (1225.7411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (1225.2322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (1226.4868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (1227.8309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (1226.9299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (1225.6148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (1226.3704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (1227.4406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (1227.0851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (1224.0369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (1221.548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (1222.7864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (1228.3392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (1231.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (1230.9815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (1221.2604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (1218.7206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (1220.9298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (1222.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (1223.9848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (1224.8062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (1225.052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (1225.5125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (1224.5932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (1219.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (1216.0061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (1216.0003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (1217.8721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (1220.1686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (1220.2671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (1217.1411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (1214.4537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (1213.4754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (1211.1483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (1211.5289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (1232.8324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (1229.2335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (1230.8783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (1233.2192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (1233.0453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (1231.6522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (1229.6167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (1227.31)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (1226.1924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (1228.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (1230.2507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (1230.9811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (1230.7383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (1228.687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (1225.1873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (1221.5418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (1220.8021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (1223.0614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (1226.1757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (1229.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (1233.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (1234.5082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (1234.067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (1233.6019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (1231.8405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (1229.6398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (1230.2178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (1234.0831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (1235.4334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (1232.1161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (1226.1907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (1225.0491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (1227.8973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (1234.3993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (1234.0595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (1229.2507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (1222.5491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (1221.4517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (1220.5851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (1218.4889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (1216.3201)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (1216.1787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (1216.8128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (1216.5744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (1215.9004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (1216.1017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (1217.9639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (1220.0387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (1221.5026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (1222.1995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (1221.641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (1221.6425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (1221.1548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (1217.6508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (1214.1183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (1217.2125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (1219.9943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (1222.4025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (1222.532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (1222.7056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (1225.4384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (1228.3212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (1228.4564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (1225.6978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (1226.7819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (1231.2057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (1232.4016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (1229.9262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (1226.032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (1226.3198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (1227.4807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (1228.6082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (1228.6052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (1227.9196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (1227.6735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (1227.951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (1228.8347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (1230.4363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (1239.3396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (1239.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (1237.2435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (1232.112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (1236.5587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (1237.6026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (1235.0144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (1225.0186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (1221.6288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (1219.0425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (1221.0065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (1222.9802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (1219.9712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (1216.4702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (1215.3489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (1214.4334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (1215.2792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (1218.4021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (1221.3417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (1220.6526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (1220.2407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (1222.2322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (1226.6229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (1228.4805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (1229.6932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (1231.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (1233.0532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (1234.0783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (1239.2567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (1241.6992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (1214.4725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (1208.7174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (1227.0213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (1223.8108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (1215.0363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (1219.1817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (1218.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (1210.8231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (1208.1377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (1211.0908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (1216.5065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (1221.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (1227.9092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (1229.7755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (1226.8783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (1218.4569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (1216.4356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (1217.7107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (1222.914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (1225.3912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (1223.3877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (1220.8748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (1220.8637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (1221.6644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (1221.5646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (1217.7713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (1213.9663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (1215.9868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (1223.3561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (1224.9758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (1231.6156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (1233.2328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (1231.1571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (1225.2278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (1224.1746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (1222.4545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (1214.6369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (1209.5151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (1207.8186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (1208.9668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (1214.6791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (1213.9646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (1210.1209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (1205.0559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (1203.0778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (1203.2163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (1208.5924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (1212.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (1210.0896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (1210.2897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (1215.3074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (1215.5003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (1214.117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (1216.0678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (1218.8411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (1216.7015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (1214.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (1216.7283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (1218.9297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (1218.5346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (1217.8214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (1220.1625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (1223.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (1224.3456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (1223.7709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (1222.2687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (1219.0342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (1215.7796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (1216.0606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (1224.2451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (1227.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (1226.8262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (1226.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (1226.5575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (1224.0086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (1220.813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (1219.4971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (1219.1543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (1218.455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (1216.2692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (1215.7233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (1220.5009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (1222.6602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (1200.7891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (1203.7377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (1205.0763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (1209.5977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (1217.5219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (1217.9336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (1216.3104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (1215.5473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (1216.5493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (1217.7588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (1219.179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (1224.811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (1230.4038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (1228.7178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (1225.153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (1221.4813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (1218.6702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (1216.6804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (1217.311)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (1218.6539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (1215.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (1209.5457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (1209.6467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (1209.8727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (1208.1433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (1206.5248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (1206.9705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (1214.0995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (1215.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (1214.7888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (1215.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (1218.4097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (1220.7833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (1221.3048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (1219.4218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (1216.7116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (1215.6931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (1216.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (1217.4766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (1216.5186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (1214.9509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (1215.2794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (1216.3958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (1213.5007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (1208.601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (1203.49)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (1201.8748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (1207.3292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (1211.3535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (1211.4268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (1212.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (1214.9548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (1216.4832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (1216.4677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (1217.1085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (1218.7699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (1218.9111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (1219.1873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (1222.6535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (1225.3816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (1224.0836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (1220.7632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (1218.4494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (1219.1597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (1220.2568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (1219.7638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (1215.7576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (1211.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (1211.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (1227.4823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (1227.5418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (1225.7116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (1222.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (1222.7284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (1229.0375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (1231.0176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (1229.5121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (1226.3084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (1227.2251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (1227.1821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (1226.4734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (1226.544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (1226.849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (1225.9596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (1223.0414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (1218.9229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (1215.6477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (1212.682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (1211.2162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (1213.1979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (1222.044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (1230.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (1230.6613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (1229.7665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (1226.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (1223.2109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (1220.0028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (1217.2189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (1217.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (1220.997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (1223.2715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (1219.0835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (1203.6737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (1202.9058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (1203.5878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (1205.4357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (1209.3617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (1213.3519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (1215.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (1218.0043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (1220.8746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (1223.4896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (1224.1062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (1224.0653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (1225.1951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (1224.2206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (1215.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (1215.4031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (1217.5774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (1218.9535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (1218.8348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (1219.6744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (1221.9608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (1223.619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (1224.8909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (1228.3201)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (1230.6829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (1227.099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (1221.4932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (1221.1314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (1220.9255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (1218.5446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (1215.8783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (1213.3307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (1209.232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (1206.4049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (1206.3859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (1207.5211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (1208.6306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (1220.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (1221.5178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (1222.7824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (1224.0298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (1225.4182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (1226.8897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (1230.9262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (1231.451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (1228.7703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (1207.9523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (1207.2565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (1205.5352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (1205.1615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (1209.1947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (1232.8543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (1226.7328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (1222.3551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (1220.7133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (1222.9026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (1226.7854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (1228.9757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (1230.7825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (1232.7605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (1232.512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (1230.2993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (1230.6062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (1232.586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (1232.4182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (1230.9518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (1234.1019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (1237.7025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (1234.4524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (1218.6669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (1224.0448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (1224.7891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (1219.9597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (1217.3899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (1219.0692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (1229.1886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (1231.2868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (1234.8319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (1239.9667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (1238.7846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (1223.9793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (1227.5549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (1227.0414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (1222.4692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (1236.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (1236.2999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (1222.7877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (1225.1275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (1222.6452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (1218.0482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (1215.381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (1215.6638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (1216.9824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (1218.6002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (1220.2368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (1219.4099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (1214.0673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (1208.9063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (1206.9132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (1205.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (1198.1466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1190.0032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (1190.1387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (1196.3536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (1200.8742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (1219.7725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (1225.8656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (1228.2437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (1229.5357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (1218.6141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (1211.5907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (1210.804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (1211.946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (1216.0839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (1226.1481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (1225.216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (1221.8866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (1220.2737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (1222.9866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (1224.5048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (1223.7643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (1221.8341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (1221.5067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (1223.9191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (1225.3825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (1223.6926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (1222.5709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (1223.8789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (1226.2482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (1229.6896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (1231.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (1230.5532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (1227.4755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (1227.2896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (1230.1443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (1230.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (1226.0127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (1221.8065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (1220.9699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (1219.7732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (1217.6771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (1217.1898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (1219.4642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (1222.9993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (1226.2615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (1227.4004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (1229.2859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (1230.195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (1229.0342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (1225.7426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (1223.3882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (1223.5029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (1225.7443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (1232.8742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (1237.2527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (1237.6887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (1228.1482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (1222.3464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (1222.225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (1223.8606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (1226.4902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (1228.3281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (1235.5503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (1236.0576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (1212.2959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (1219.4502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (1223.5082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (1226.4213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (1228.1017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (1228.1983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (1229.1475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (1229.5731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (1227.5394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (1224.6307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (1223.8323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (1222.8317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (1221.422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (1221.7109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (1225.9152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (1229.0505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (1229.2274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (1228.6101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (1231.3948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (1232.9641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (1234.2985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (1241.7836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (1243.2852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (1249.7145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (1252.1033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (1225.0307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (1224.0762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (1222.2742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (1222.0848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (1219.7677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (1238.4502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (1238.4502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (924.3055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (923.5032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (923.73145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (925.264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (927.77247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (930.1185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (931.681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (932.60517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (933.1463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (933.2816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (933.0893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (932.7623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (932.3403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (931.93525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (931.8793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (932.22925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (932.51905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (932.39624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (932.03064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (931.8361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (931.9028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (932.0119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (932.05115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (932.0595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (932.07386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (932.12415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (932.2216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (932.3087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (932.4182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (932.7657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (933.4671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (934.17395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (934.2993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (933.7334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (932.9472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (932.4984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (932.51966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (932.72596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (932.78516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (932.6293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (932.45484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (932.4461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (932.5758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (932.69275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (932.7063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (932.6132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (932.3963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (932.0738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (931.8116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (931.7339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (931.7637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (931.83265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (931.9444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (932.048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (932.1126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (932.21717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (932.3783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (932.47266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (932.4564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (932.4338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (932.45936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (932.50037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (932.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (932.6787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (932.72736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (932.6713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (932.59424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (932.57447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (932.5982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (932.6612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (932.71796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (932.5945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (932.2103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (931.763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (931.5027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (931.4939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (931.7068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (932.0138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (932.2569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (932.42176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (932.5402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (932.58027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (932.52356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (932.42634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (932.3727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (932.4418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (932.6219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (932.77717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (932.7674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (932.58704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (932.37757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (932.32605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (932.44086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (932.5285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (932.4758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (932.3785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (932.3553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (932.3827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (932.362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (932.2389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (932.098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (932.0925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (932.2119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (932.2662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (932.1607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (931.9926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (931.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (931.96674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (932.21155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (932.49915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (932.66816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (932.70295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (932.7011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (932.7152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (932.70917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (932.64557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (932.5431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (932.4477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (932.38025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (932.3316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (932.30414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (932.3296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (932.3979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (932.44367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (932.4447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (932.4419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (932.4431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (932.4223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (932.3786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (932.3329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (932.29236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (932.27314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (932.2868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (932.3154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (932.3042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (932.2341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (932.1771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (932.2633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (932.51966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (932.7752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (932.7969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (932.5604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (932.2894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (932.1883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (932.22236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (932.2838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (932.3304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (932.3287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (932.2577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (932.17725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (932.14576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (932.16517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (932.2261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (932.2961)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (932.3015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (932.2588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (932.28534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (932.4062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (932.4786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (932.40455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (932.2981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (932.3425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (932.5183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (932.6705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (932.7233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (932.6773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (932.51264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (932.23224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (931.9342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (931.76416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (931.78815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (931.97754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (932.3383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (932.95545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (933.8072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (934.3212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (933.83497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (932.6418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (931.77344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (931.75855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (932.2158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (932.6055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (932.5939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (932.2258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (931.92365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (932.08747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (932.5465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (932.7833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (932.6698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (932.56904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (932.71686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (932.856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (932.7916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (932.65027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (932.5421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (932.43897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (932.4833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (932.80396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (933.0379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (932.8089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (932.2902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (931.8832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (931.6051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (931.3462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (931.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (931.2669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (931.5308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (931.96204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (932.54114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (933.1119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (933.28925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (932.8804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (932.189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (931.61487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (931.20624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (930.8695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (930.64814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (930.7449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (931.5756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (932.7326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (932.9091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (931.89624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (930.97046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (931.1703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (931.82947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (932.07074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (931.7426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (931.2722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (931.05787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (931.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (931.77356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (932.376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (932.7192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (932.87165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (933.0399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (932.9759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (932.51355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (932.10236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (932.1298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (932.3793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (932.6298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (932.7458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (932.54627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (932.06745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (931.5771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (931.2007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (930.9306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (930.92676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (931.4509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (932.4361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (933.20667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (933.24305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (932.75336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (932.24195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (931.6869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (930.92267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (930.1844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (929.6959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (929.4064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (929.2476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (929.32947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (929.8405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (930.6618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (931.3509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (931.65467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (931.72254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (931.73456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (931.7395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (931.7963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (931.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (932.24024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (932.3879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (932.3079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (932.03687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (931.81214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (931.9059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (932.1842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (932.2527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (932.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (931.7034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (931.6178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (931.8408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (932.5213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (933.61255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (934.43067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (934.271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (933.3671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (932.6548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (932.5803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (932.7409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (932.6565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (932.3983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (932.2868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (932.28016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (932.18165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (932.1265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (932.3445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (932.57734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (932.3931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (931.777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (931.1609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (930.8958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (931.0218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (931.45514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (932.02784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (932.50977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (932.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (933.2841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (933.6985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (933.7997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (933.5161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (933.0972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (932.7509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (932.47687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (932.2343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (932.0633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (932.0297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (932.08826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (932.0935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (931.94764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (931.71515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (931.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (931.79395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (932.19245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (932.5443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (932.65686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (932.5845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (932.5991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (932.86725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (933.182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (933.2528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (933.1233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (933.02375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (932.96936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (932.7737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (932.3549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (931.84394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (931.49677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (931.5072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (931.94416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (932.635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (933.1952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (933.4135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (933.45136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (933.4904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (933.33265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (932.8229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (932.2838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (932.2043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (932.5807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (932.8883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (932.75434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (932.3262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (932.0073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (931.9478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (932.0605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (932.27515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (932.5166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (932.71735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (932.84534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (932.8646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (932.75116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (932.5628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (932.4187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (932.4026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (932.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (932.6282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (932.6638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (932.5551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (932.3744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (932.29517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (932.4051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (932.61207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (932.78736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (932.83967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (932.6949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (932.3815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (932.08875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (931.97406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (931.98255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (931.997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (932.0313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (932.1519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (932.3306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (932.42176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (932.30927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (932.098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (932.04566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (932.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (932.58515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (932.85315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (932.9957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (932.9905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (932.8223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (932.54505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (932.30347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (932.25184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (932.4015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (932.6047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (932.69745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (932.6289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (932.4887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (932.40577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (932.41297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (932.4292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (932.3973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (932.3725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (932.43287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (932.5408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (932.59125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (932.5367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (932.4157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (932.29865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (932.2441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (932.2688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (932.31794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (932.345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (932.36927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (932.38636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (932.3421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (932.27167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (932.31086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (932.4891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (932.6328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (932.56647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (932.36)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (932.2844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (932.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (932.6811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (932.7344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (932.66034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (932.6397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (932.72834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (932.7824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (932.6623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (932.4429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (932.3078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (932.3017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (932.35505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (932.44446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (932.5483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (932.5663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (932.4432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (932.2642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (932.1747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (932.2426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (932.4461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (932.6908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (932.8559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (932.86176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (932.6889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (932.3971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (932.1289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (932.01374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (932.0621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (932.17615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (932.2157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (932.0572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (931.7414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (931.5296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (931.6781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (932.16004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (932.65516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (932.8524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (932.6896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (932.39356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (932.25525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (932.4079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (932.7539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (933.04084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (933.0706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (932.88575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (932.65094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (932.4288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (932.2013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (932.0439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (932.07196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (932.2418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (932.3883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (932.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (932.42414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (932.3842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (932.34186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (932.35035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (932.44385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (932.5658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (932.62604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (932.57404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (932.3925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (932.14075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (931.9729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (932.0055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (932.18647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (932.3526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (932.37934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (932.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (932.1769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (932.1001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (932.06025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (932.09485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (932.2284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (932.4134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (932.57007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (932.6352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (932.5815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (932.45777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (932.3518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (932.29694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (932.26655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (932.2448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (932.253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (932.3152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (932.4052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (932.4624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (932.43244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (932.316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (932.18506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (932.13666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (932.17426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (932.1988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (932.1348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (932.02094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (931.9393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (931.91236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (931.8888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (931.80536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (931.6224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (931.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (931.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (930.80756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (930.8622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (931.3377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (932.238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (933.20887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (933.7009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (933.5328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (933.2114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (933.3529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (933.68805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (933.572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (932.9374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (932.286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (931.9764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (931.95856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.796916)) (quote (931.95844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.809411)) (quote (931.7444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.821905)) (quote (931.33216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.834399)) (quote (930.9277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.846893)) (quote (930.7391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.859388)) (quote (930.8473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.871882)) (quote (931.1155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.884377)) (quote (931.2794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.896871)) (quote (931.1833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.909365)) (quote (930.884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.921859)) (quote (930.53675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.934354)) (quote (930.30195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.946848)) (quote (930.272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.959342)) (quote (930.4235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.971837)) (quote (930.5807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.984331)) (quote (930.5441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.996825)) (quote (930.3017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.00932)) (quote (930.0892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.021814)) (quote (930.1132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.034308)) (quote (930.3438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.046803)) (quote (930.5807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.059297)) (quote (930.64295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.071791)) (quote (930.5091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.084286)) (quote (930.4914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09678)) (quote (931.3613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.109274)) (quote (931.3613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (6980.3877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (7009.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (7021.7695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (7021.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (6985.811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (6981.7407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (6979.3164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (6985.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (6999.387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (6999.6416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (7000.182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (7000.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (7002.8687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (7003.0415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (6981.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (6990.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (6990.057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (6990.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (6991.28)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (6992.057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (6992.5523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (6992.752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (7005.3574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (7008.9653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (7003.124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (6993.992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (6989.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (6985.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (7010.2105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (7001.719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (6998.292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (6995.2266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (6993.5386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (6993.175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (6993.7095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (6994.55)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (6994.7173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (6994.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (6994.1587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (6994.9277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (6996.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (6996.7236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (6995.0523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (6990.6924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (6988.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (6988.1294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (6988.8276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (6989.627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (6990.6646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (6991.667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (6991.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (6990.9087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (6984.149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (7005.5757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (6988.206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (6993.7705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (6994.1987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (6994.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (6994.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (6994.7725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (6995.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (6994.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (6990.436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (6985.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (6984.0606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (6982.2686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (6983.0327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (6985.93)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (6987.1255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (6986.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (6986.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (6987.1978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (6988.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (6991.01)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (6993.193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (6995.604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (6996.7505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (6995.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (6993.839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (6993.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (6995.7886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (7003.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (7004.424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (7003.0557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (6999.656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (7000.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (7004.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (7007.7705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (7007.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (6984.0796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (6961.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (6961.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (4210.294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (4211.1773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (4211.49)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (4186.2305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (4163.938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (4200.9165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (4199.6314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (4198.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (4197.7036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (4199.785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (4201.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (4201.13)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (4198.559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (4196.5244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (4195.1426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (4194.257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (4193.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (4193.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (4193.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (4193.7974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (4194.264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (4194.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (4194.3633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (4207.4614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (4186.9927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (4197.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (4196.63)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (4200.9526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (4207.3447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (4207.7036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (4203.9107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (4200.577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (4198.423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (4197.183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (4196.6387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (4196.728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (4197.078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (4197.002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (4196.4517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (4196.1343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (4196.488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (4197.2305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (4197.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (4196.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (4195.2334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (4193.86)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (4193.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (4193.435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (4193.0996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (4193.21)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (4193.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (4193.2847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (4191.676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (4187.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (4208.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (4192.472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (4196.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (4196.8184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (4196.9023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (4196.877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (4196.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (4197.3193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (4198.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (4201.233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (4207.989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (4211.0425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (4211.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (4209.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (4193.7334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (4195.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (4193.8755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (4191.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (4190.579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (4191.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (4193.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (4195.561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (4196.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (4197.1294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (4196.8726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (4196.4907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (4196.159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (4195.4097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (4191.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (4207.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (4208.0273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (4191.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (4195.4736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (4197.254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (4207.5606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (4208.886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (4208.6148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (4210.4985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (4208.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (4193.558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (4195.841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (4195.8296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (4195.5703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (4195.0264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (4194.4224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (4194.1377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (4194.1533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (4194.2534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (4194.4263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (4194.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (4213.6904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (4195.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (4199.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (4199.617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (4198.5103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (4197.6997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (4197.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (4198.2637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (4197.7)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (4197.0737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (4197.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (4197.4224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (4197.203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (4197.134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (4199.438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (4202.0576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (4200.607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (4195.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (4193.5244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (4195.903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (4197.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (4196.758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (4193.562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (4192.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (4192.996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (4194.83)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (4196.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (4197.0264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (4196.728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (4197.39)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (4198.078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (4197.202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (4195.3013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (4194.597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (4195.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (4195.955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (4194.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (4184.6216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (4180.8897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (4183.5566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (4187.7315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (4189.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (4188.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (4164.9087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (4160.978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (4162.8145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (4181.614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (4182.264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (4184.813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (4186.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (4186.0234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (4183.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (4182.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (4182.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (4182.3823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (4179.9053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (4176.297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (4172.0147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (4172.784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (4198.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (4199.7666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (4202.131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (4203.9898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (4202.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (4199.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (4195.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (4197.0923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (4198.7046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (4198.6123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (4197.7344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (4197.552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (4198.383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (4199.122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (4198.8023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (4197.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (4196.823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (4196.58)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (4196.1133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (4195.345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (4195.0674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (4195.5547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (4196.2686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (4196.726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (4197.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (4197.722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (4198.2334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (4198.069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (4197.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (4197.0903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (4196.8814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (4196.4956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (4196.251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (4195.889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (4194.7573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (4193.7134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (4194.303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (4195.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (4196.8203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (4196.0244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (4194.738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (4194.151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (4194.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (4196.103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (4197.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (4198.162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (4197.556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (4196.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (4195.7236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (4195.6655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (4195.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (4195.6987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (4195.2065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (4194.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (4194.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (4194.587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (4194.928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (4194.4736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (4193.1357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (4192.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (4192.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (4193.345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (4193.2734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (4192.8164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (4193.2183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (4194.475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (4195.5147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (4195.9644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (4195.967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (4195.5967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (4195.1856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (4195.1943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (4195.382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (4195.438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (4195.234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (4194.532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (4193.34)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (4192.485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (4193.2954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (4195.1978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (4196.4204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (4196.53)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (4196.2227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (4196.1)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (4196.188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (4196.505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (4196.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (4196.1226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (4195.096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (4194.6665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (4195.3696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (4195.869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (4195.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (4195.185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (4197.0107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (4198.206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (4197.492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (4195.7144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (4194.116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (4193.0884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (4193.5303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (4195.2603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (4196.9575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (4198.684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (4206.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (4207.213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (4185.572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (4192.6987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (4196.014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (4197.199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (4195.665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (4193.2026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (4194.3853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (4196.304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (4196.742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (4195.8667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (4194.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (4194.1553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (4187.1025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (4206.445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (4201.9614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (4192.908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (4193.0947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (4192.232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (4190.934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (4190.3994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (4191.4043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (4193.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (4194.058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (4194.193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (4194.1563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (4194.5415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (4195.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (4197.243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (4199.693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (4200.018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (4197.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (4194.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (4193.7817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (4194.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (4194.9644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (4194.7944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (4193.4614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (4191.1055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (4187.5864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (4186.2715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (4187.9595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (4190.469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (4191.1255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (4191.6636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (4192.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (4194.291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (4195.089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (4194.6157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (4193.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (4191.7144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (4191.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (4192.9443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (4194.061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (4195.0815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (4195.9287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (4196.2393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (4196.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (4197.054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (4197.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (4197.1636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (4197.089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (4197.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (4197.304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (4196.9336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (4197.5596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (4198.784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (4198.8086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (4197.3555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (4195.8223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (4195.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (4195.808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (4197.4204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (4198.8184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (4198.295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (4196.1567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (4195.426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (4197.955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (4200.1626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (4199.437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (4196.3203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (4194.5357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (4195.29)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (4197.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (4200.0166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (4201.447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (4203.2725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (4204.3916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (4203.783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (4202.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (4199.7354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (4196.801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (4194.05)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (4192.903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (4191.9717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (4184.1343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (4169.1777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (4164.5357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (4162.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (4164.772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (4168.432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (4170.2773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (4150.181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (4151.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (4150.4287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (4148.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (4142.711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (4145.772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (4130.743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (4153.9478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (4150.223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (4153.097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (4159.0996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (4159.8516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (4146.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (4146.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012494)) (quote (3265.6238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (3247.11)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (3254.5808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (3260.9588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (3265.9766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (3268.5574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (3269.0594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (3268.7085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (3267.9405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (3266.7635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (3265.7932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (3265.0442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (3264.0496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (3263.002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (3262.461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (3262.395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (3262.36)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (3262.1477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (3261.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (3261.757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (3261.682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (3261.6477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (3260.805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (3257.7044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (3254.33)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (3249.4637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (3232.987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (3253.3306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (3258.3936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (3270.7942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (3264.7364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (3263.5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (3263.5584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (3263.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (3263.9695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (3264.1719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (3264.136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (3263.9258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (3263.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (3264.069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (3264.3018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (3264.3233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (3263.9522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (3263.2137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (3262.4563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (3262.1934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (3262.3938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (3262.5017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (3262.4082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (3262.3606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (3262.265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (3261.8118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (3258.1763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (3274.3762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (3272.7666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (3260.8428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (3262.8794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (3263.676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (3264.024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (3263.9449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (3263.4539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (3262.4473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (3260.791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (3258.7845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (3255.1118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (3247.0586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (3249.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (3256.8086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (3259.917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (3260.5074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (3260.6944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (3260.3894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (3260.3919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (3261.0305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (3262.0713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (3263.0523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (3263.3094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (3262.8938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (3262.557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (3262.3916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (3261.1262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (3258.0376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (3255.549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (3255.0054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (3259.0269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (3261.7044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (3260.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (3251.2176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (3248.914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (3249.8538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (3276.3247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (3259.6592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (3262.87)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (3262.7908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (3262.582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (3262.2913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (3261.8553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (3261.6497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (3261.7852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (3261.8006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (3261.419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (3261.249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (3261.8018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (3262.4527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (3262.4773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (3262.6177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (3263.64)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (3264.6914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (3265.6714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (3265.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (3265.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (3264.1595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (3263.6043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (3263.3103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (3262.8943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (3262.1336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (3261.5696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (3262.0887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (3263.2097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (3264.2786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (3264.6995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (3264.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (3265.5352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (3265.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (3263.9339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (3262.1763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (3261.9153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (3262.1087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (3262.5032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (3262.9217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (3263.1009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (3263.2798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (3263.5005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (3263.4749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (3263.4012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (3263.7066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (3263.8826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (3263.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (3262.959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (3261.8863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (3260.1826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (3259.6643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (3260.4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (3263.9934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (3236.4798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (3215.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (3225.4986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (3229.0796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (3232.0144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (3236.1866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (3260.6106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (3261.855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (3262.8308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (3262.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (3259.6392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (3263.1868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (3265.8687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (3266.0852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (3264.6165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (3264.1455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (3263.7217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (3263.3892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (3263.0174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (3261.8189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (3258.229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (3253.71)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (3256.7703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (3260.242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (3258.4283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (3256.1026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (3257.7913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (3260.9095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (3263.8638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (3265.6402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (3266.5818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (3266.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (3266.0115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (3263.8118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (3262.3167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (3262.6592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (3263.6153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (3263.7908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (3263.1104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (3262.6172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (3263.0083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (3264.109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (3264.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (3264.7466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (3263.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (3262.8623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (3263.7735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (3265.7288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (3267.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (3266.7947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (3264.0152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (3261.3216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (3261.0442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (3261.7505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (3262.46)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (3263.2903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (3264.342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (3264.9947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (3264.9346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (3264.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (3263.9422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (3263.4483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (3263.168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (3263.0916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (3263.074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (3263.1448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (3263.4192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (3263.796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (3263.9688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (3263.8665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (3263.7595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (3263.6907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (3263.4522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (3263.1585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (3263.148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (3263.3858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (3264.6875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (3269.2666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (3270.9505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (3269.084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (3266.6463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (3266.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (3266.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (3266.0037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (3265.241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (3264.171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (3263.0825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (3262.5493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (3262.7315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (3263.1258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (3263.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (3263.5782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (3263.4346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (3262.7893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (3262.4287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (3264.383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (3266.4876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (3266.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (3263.2647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (3261.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (3261.2183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (3261.3252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (3261.7556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (3262.2823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (3262.2852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (3262.3963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (3265.6726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (3267.1214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (3264.7046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (3259.4942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (3257.9187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (3257.1514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (3256.8833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (3257.7896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (3259.0574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (3258.1033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (3253.3404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (3252.0882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (3251.0813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (3248.1792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (3225.5716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (3227.4773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (3226.2466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (3221.7837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (3220.6392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (3222.4773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (3224.2884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (3224.7945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (3225.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (3225.0095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (3224.0862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (3223.4239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (3222.304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (3220.1748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (3216.2962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (3207.9295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (3203.8987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (3207.1502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (3180.5655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (3180.618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (3152.0537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (3152.0537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (9333.118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (9353.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (9352.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (9382.05)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (9385.042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (9368.006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (9338.492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (9336.821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (9334.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (9333.194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (9338.383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (9317.869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (9318.217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (9320.145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (9321.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (9324.274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (9327.432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (9328.452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (9326.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (9324.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (9323.96)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (9325.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (9329.171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (9330.813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (9328.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (9325.356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (9326.042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (9330.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (9334.042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (9335.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (9339.205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (9338.92)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (9333.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (9324.903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (9326.361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (9327.122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (9326.65)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (9325.237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (9324.5625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (9325.495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (9327.286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (9328.386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (9327.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (9323.87)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (9322.56)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (9326.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (9303.064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (9322.55)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (9322.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (9322.702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (9322.18)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (9322.459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (9324.077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (9324.885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (9324.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (9324.395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (9325.855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (9326.337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (9325.568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (9325.783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (9327.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (9327.707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (9327.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (9326.93)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (9326.555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (9326.985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (9327.768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (9325.89)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (9321.049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (9316.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (9314.89)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (9315.368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (9317.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (9320.968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (9323.517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (9325.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (9326.882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (9325.841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (9324.603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (9324.236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (9324.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (9324.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (9326.187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (9328.021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (9328.612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (9327.111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (9324.699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (9323.644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (9324.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (9324.475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (9324.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (9324.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (9325.035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (9324.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (9323.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (9322.444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (9321.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (9320.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (9321.7295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (9322.533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (9322.608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (9321.776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (9320.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (9320.366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (9322.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (9326.517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (9329.508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (9330.165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (9329.573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (9330.347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (9315.922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (9312.771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (9339.571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (9335.417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (9335.131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (9318.249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (9323.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (9324.111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (9325.36)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (9326.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (9327.531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (9328.314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (9327.927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (9326.116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (9324.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (9323.602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (9323.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (9323.06)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (9323.503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (9326.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (9329.869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (9329.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (9325.837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (9323.467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (9323.478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (9323.844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (9323.052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (9321.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (9320.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (9321.45)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (9322.972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (9323.613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (9324.136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (9325.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (9325.606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (9324.672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (9323.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (9322.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (9322.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (9323.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (9323.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (9321.048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (9318.675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (9318.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (9320.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (9323.0205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (9324.597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (9325.347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (9326.068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (9326.86)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (9327.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (9327.879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (9327.785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (9326.726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (9325.042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (9324.24)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (9325.218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (9327.054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (9328.231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (9328.604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (9329.741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (9333.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (9334.064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (9333.45)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (9330.798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (9328.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (9327.164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (9326.046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (9325.541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (9326.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (9329.524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (9332.422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (9333.038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (9332.367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (9332.158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (9332.189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (9328.965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (9325.692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (9315.39)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (9310.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (9310.933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (9332.098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (9336.554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (9340.161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (9338.117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (9324.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (9322.273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (9322.413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (9323.581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (9325.817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (9326.069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (9349.774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (9323.51)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (9322.524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (9322.737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (9324.71)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (9326.162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (9322.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (9319.338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (9322.416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (9330.884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (9330.649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (9328.882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (9326.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (9322.932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (9321.164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (9319.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (9315.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (9314.233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (9314.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (9317.292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (9319.858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (9317.353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (9340.103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (9324.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (9330.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (9331.149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (9330.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (9328.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (9325.915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (9323.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (9324.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (9329.234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (9333.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (9331.511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (9322.034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (9318.992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (9318.442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (9319.656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (9320.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (9343.693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (9321.512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (9323.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (9324.358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (9325.392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (9326.126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (9325.823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (9324.437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (9325.972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (9306.018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (9308.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (9323.062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (9325.353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (9329.29)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (9333.691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (9335.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (9333.502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (9326.939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (9321.715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (9319.771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (9316.647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (9315.869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (9319.528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (9334.257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (9331.148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (9328.169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (9323.635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (9321.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (9322.226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (9324.627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (9326.753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (9328.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (9329.844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (9330.206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (9329.614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (9328.396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (9326.822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (9325.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (9326.629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (9327.941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (9327.755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (9324.883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (9321.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (9319.675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (9321.417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (9324.134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (9324.551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (9323.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (9323.082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (9323.866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (9326.424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (9328.986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (9328.771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (9326.218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (9322.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (9318.683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (9317.512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (9318.663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (9319.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (9317.914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (9317.226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (9319.383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (9324.269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (9326.27)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (9325.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (9324.549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (9324.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (9324.434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (9323.729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (9322.704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (9321.002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (9319.291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (9319.127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (9318.634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (9315.836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (9315.209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (9318.278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (9320.889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (9322.095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (9322.449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (9321.797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (9320.667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (9320.451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (9321.938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (9324.526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (9332.234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (9337.422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (9336.273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (9330.073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (9326.23)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (9327.727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (9333.571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (9335.384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (9331.152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (9325.875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (9324.602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (9324.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (9325.619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (9327.28)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (9330.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (9332.429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (9333.209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (9333.206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (9331.966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (9330.193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (9328.111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (9325.024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (9323.983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (9314.44)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (9335.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (9325.7295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (9325.573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (9328.126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (9331.406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (9333.335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (9334.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (9333.549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (9332.941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (9337.945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (9340.6455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (9336.872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (9329.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (9328.198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (9325.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (9323.476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (9323.185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (9324.545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (9326.811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (9328.725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (9329.412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (9328.581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (9326.158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (9324.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (9323.3545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (9321.407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (9319.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (9318.379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (9319.537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (9321.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (9349.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (9350.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (9350.309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (9346.531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (9330.388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (9328.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (9327.5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (9327.035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (9327.276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (9327.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (9328.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (9327.731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (9326.96)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (9332.117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (9314.343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (9317.248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (9323.353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (9322.987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (9323.793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (9326.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (9327.136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (9325.598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (9322.626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (9320.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (9318.676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (9318.056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (9318.155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (9318.82)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (9319.411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (9316.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (9344.568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (9349.132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (9354.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (9383.83)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (9379.937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (9352.146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (9327.99)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (9328.588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (9327.829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (9325.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (9323.27)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (9324.637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (9327.133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (9327.38)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (9326.346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (9326.307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (9327.214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (9325.878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (9321.973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (9321.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (9300.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (9275.874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (9277.232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (9274.953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (9273.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (9275.434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (9308.915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (9344.492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (9357.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (9360.105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (9356.17)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (9348.492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (9345.743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (9346.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (9322.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (9322.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (7424.217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (7425.3516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (7421.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (7417.6626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (7418.757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (7445.8853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (7445.517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (7460.967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (7482.418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (7479.211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (7449.7275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (7464.0317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (7460.7266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (7460.1733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (7462.259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (7465.113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (7464.1655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (7459.7217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (7457.744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (7457.9346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (7458.634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (7460.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (7463.713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (7465.2803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (7463.4893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (7460.6274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (7460.6987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (7463.855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (7466.5576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (7467.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (7467.872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (7468.4346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (7470.236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (7450.4473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (7463.73)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (7462.2656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (7461.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (7460.5244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (7459.905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (7460.4204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (7461.8594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (7463.3945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (7464.4497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (7464.025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (7463.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (7461.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (7457.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (7456.25)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (7456.68)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (7457.3364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (7457.4463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (7457.6035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (7458.5625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (7459.602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (7460.0044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (7460.2534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (7460.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (7460.632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (7459.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (7459.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (7459.02)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (7459.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (7459.3154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (7459.1065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (7458.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (7459.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (7459.8726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (7459.2124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (7456.632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (7453.519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (7451.1226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (7451.267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (7453.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (7457.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (7459.5366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (7461.2046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (7461.942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (7461.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (7459.9565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (7459.896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (7460.413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (7460.857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (7461.556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (7462.6177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (7463.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (7462.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (7460.745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (7459.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (7459.5415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (7459.6)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (7459.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (7460.205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (7460.576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (7460.4995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (7460.0703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (7459.223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (7457.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (7456.86)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (7456.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (7457.584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (7458.05)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (7457.5938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (7456.465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (7455.8926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (7457.145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (7459.9087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (7462.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (7463.406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (7463.013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (7462.1196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (7460.343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (7456.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (7480.3076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (7475.9575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (7462.565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (7460.695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (7460.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (7459.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (7459.377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (7460.0396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (7460.925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (7461.553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (7461.254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (7459.8545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (7458.1626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (7457.275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (7457.189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (7457.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (7457.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (7458.4805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (7460.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (7461.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (7461.15)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (7459.4487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (7458.622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (7458.6216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (7458.2573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (7457.2944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (7456.991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (7457.903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (7458.983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (7459.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (7459.993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (7461.0303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (7461.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (7460.534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (7459.491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (7459.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (7459.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (7459.7344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (7459.1533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (7457.617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (7456.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (7456.372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (7457.608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (7459.169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (7460.361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (7461.29)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (7462.0117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (7462.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (7462.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (7462.5615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (7462.444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (7461.6924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (7460.6157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (7460.284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (7461.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (7462.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (7462.1035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (7460.247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (7458.481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (7458.31)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (7473.037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (7476.1865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (7452.2954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (7459.7773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (7465.098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (7466.6856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (7439.7407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (7441.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (7475.323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (7474.816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (7451.1543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (7464.0737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (7461.734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (7461.294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (7462.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (7465.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (7468.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (7473.229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (7475.1274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (7470.967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (7493.8325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (7471.5806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (7471.241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (7464.9995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (7457.1587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (7456.6665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (7457.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (7460.308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (7461.713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (7460.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (7459.0234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (7457.6607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (7457.565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (7458.0293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (7459.0728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (7459.945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (7460.063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (7459.893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (7460.0176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (7460.4863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (7460.806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (7460.565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (7459.7725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (7459.2466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (7459.501)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (7460.505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (7460.724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (7458.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (7453.2275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (7450.49)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (7452.531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (7456.4697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (7460.5776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (7464.159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (7465.4575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (7465.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (7465.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (7465.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (7466.3975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (7467.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (7466.7554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (7463.913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (7462.379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (7461.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (7460.0264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (7459.8286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (7460.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (7460.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (7460.0576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (7460.1123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (7461.3076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (7462.1055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (7462.2764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (7462.157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (7461.969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (7461.3667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (7459.896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (7458.5684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (7459.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (7463.2026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (7467.098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (7469.0586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (7467.905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (7464.435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (7462.6323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (7466.9463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (7446.1694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (7424.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (7429.9785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (7435.5327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (7456.6314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (7458.6567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (7462.194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (7464.5693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (7464.818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (7461.231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (7457.9487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (7458.3154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (7458.3525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (7456.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (7448.9424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (7469.0923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (7467.9844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (7462.256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (7460.2915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (7460.2915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (6032.0147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (6038.929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (6043.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (6044.66)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (6067.1206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (6045.5444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (6065.7046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (6064.9785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (6065.8906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (6065.5576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (6060.8604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (6055.771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (6056.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (6057.1284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (6056.9146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (6056.957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (6057.4585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (6058.0225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (6058.455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (6058.5654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (6058.0195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (6055.5547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (6052.234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (6053.1143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (6056.797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (6058.3555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (6055.4907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (6053.0405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (6056.5215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (6034.9785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (6064.848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (6062.464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (6061.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (6060.861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (6061.357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (6062.191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (6062.514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (6062.0176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (6061.4536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (6061.61)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (6062.5864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (6063.346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (6062.3877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (6059.2466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (6055.9707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (6055.052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (6055.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (6056.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (6057.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (6059.0967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (6059.12)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (6057.705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (6053.1016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (6050.4155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (6051.824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (6057.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (6059.657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (6060.4624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (6061.116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (6061.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (6061.6367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (6060.9653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (6059.525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (6057.632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (6056.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (6057.123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (6061.266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (6067.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (6067.9185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (6059.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (6045.8057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (6046.3257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (6051.3145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (6058.1323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (6064.2964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (6064.165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (6062.5845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (6060.719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (6060.4043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (6060.831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (6060.783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (6054.022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (6072.8174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (6072.51)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (6063.1587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (6063.3037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (6066.095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (6044.7813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (6045.7544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (6047.2944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (6075.1865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (6054.7783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (6061.0947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (6061.2275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (6060.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (6060.031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (6058.908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (6058.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (6058.5684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (6059.0737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (6059.3735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (6059.363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (6058.5283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (6079.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (6059.412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (6062.08)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (6062.829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (6084.3945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (6096.101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (6117.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (6099.1245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (6098.4473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (6061.2744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (6061.1436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (6061.016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (6060.7256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (6060.6387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (6061.288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (6062.6577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (6063.686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (6063.87)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (6063.553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (6061.8066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (6060.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (6060.5996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (6060.2744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (6059.6035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (6059.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (6061.1675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (6062.856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (6063.985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (6063.6367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (6062.123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (6060.3228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (6059.52)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (6059.7466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (6060.0835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (6060.2207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (6059.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (6055.743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (6049.0723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (6047.452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (6048.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (6049.8267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (6055.54)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (6059.4854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (6059.923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (6059.8857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (6059.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (6058.0386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (6056.952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (6056.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (6052.032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (6046.6284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (6044.6294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (6045.745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (6075.4243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (6063.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (6062.325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (6061.814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (6061.7573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (6062.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (6063.203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (6067.8374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (6073.5596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (6074.4995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (6061.499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (6060.2905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (6060.1885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (6059.6597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (6059.0024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (6060.309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (6064.533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (6065.9185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (6064.503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (6062.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (6061.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (6061.759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (6061.883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (6061.6274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (6060.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (6059.4478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (6059.8457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (6061.3023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (6062.537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (6063.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (6063.263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (6063.4097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (6063.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (6063.6523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (6064.157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (6063.752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (6061.8814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (6060.395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (6060.225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (6060.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (6060.168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (6060.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (6061.4033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (6060.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (6059.217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (6058.718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (6058.916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (6058.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (6058.654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (6059.233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (6060.618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (6060.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (6057.2905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (6055.579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (6058.2153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (6062.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (6063.434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (6062.6377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (6061.6148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (6061.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (6061.409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (6061.486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (6061.7373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (6061.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (6056.3867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (6050.7935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (6049.942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (6053.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (6058.958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (6062.366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (6064.4507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (6064.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (6062.5386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (6059.3897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (6058.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (6059.7334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (6059.8687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (6058.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (6057.824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (6058.982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (6069.124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (6065.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (6048.047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (6051.762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (6055.2573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (6058.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (6060.2275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (6061.95)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (6064.027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (6064.1255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (6061.31)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (6056.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (6042.9316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (6065.7896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (6061.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (6055.301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (6056.8203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (6063.6187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (6045.95)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (6047.6465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (6061.1914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (6060.2026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (6059.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (6059.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (6061.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (6063.8203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (6065.145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (6065.25)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (6063.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (6060.1997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (6057.035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (6056.951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (6059.1304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (6061.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (6062.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (6062.6397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (6063.234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (6065.445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (6065.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (6062.1323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (6059.7256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (6060.5405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (6061.5186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (6061.2813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (6059.5166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (6057.2954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (6055.893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (6055.6045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (6055.742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (6054.8613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (6047.639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (6066.817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (6052.567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (6056.8496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (6058.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (6060.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (6060.235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (6058.2676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (6055.89)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (6055.304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (6054.5786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (6052.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (6051.5566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (6053.19)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (6056.047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (6059.8047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (6061.222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (6060.693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (6059.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (6060.0064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (6060.196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (6059.8633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (6058.776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (6057.1504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (6056.1206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (6056.6357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (6056.649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (6053.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (6051.2637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (6052.9146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (6055.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (6057.9863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (6059.3057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (6060.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (6060.9287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (6060.5405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (6059.731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (6059.7266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (6060.724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (6062.2266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (6063.78)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (6065.0396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (6066.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (6066.8315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (6066.82)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (6065.073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (6062.3594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (6060.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (6059.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (6059.5913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (6061.1714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (6062.75)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (6063.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (6063.337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (6064.45)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (6065.78)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (6065.5903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (6063.699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (6061.7017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (6060.257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (6059.598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (6059.666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (6059.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (6058.6304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (6056.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (6056.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (6058.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (6061.845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (6063.069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (6062.992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (6062.115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (6060.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (6060.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (6060.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (6061.2813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (6063.1484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (6065.8643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (6073.195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (6087.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (6090.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (6089.788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (6091.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (6102.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (6103.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (6102.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (6102.6914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (6106.5625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (6106.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (6102.822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (6100.5483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (6099.584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (6103.0015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (6110.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (6106.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (6130.171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (6132.223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (6131.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (6134.442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (6137.8355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (6164.071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (6178.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (6181.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (6182.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (6183.434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (6188.1924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (6192.284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (6166.649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (6166.051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (6169.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (6171.3213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (6175.152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (6176.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (6174.424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (6174.0566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (6176.5186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (6186.546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (6193.9204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (6198.0015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (6200.5215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (6190.958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (6188.725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (6164.3897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (6173.534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (6173.534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (5581.824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (5582.27)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (5586.5024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (5592.8047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (5598.608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (5602.4087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (5603.714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (5603.1685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (5601.1626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (5598.922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (5597.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (5597.1773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (5596.912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (5599.7695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (5579.619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (5581.2144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (5593.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (5592.3315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (5592.6733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (5593.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (5593.6875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (5595.166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (5597.4614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (5598.5015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (5597.0107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (5595.296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (5596.1123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (5598.8887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (5600.591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (5600.6148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (5599.253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (5597.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (5595.9316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (5585.95)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (5585.2144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (5600.945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (5595.875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (5595.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (5595.0054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (5595.818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (5597.0527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (5600.6353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (5606.002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (5581.1294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (5587.598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (5590.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (5591.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (5591.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (5593.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (5593.799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (5593.9204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (5594.299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (5595.2163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (5595.7236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (5595.7075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (5595.9863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (5596.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (5596.0225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (5595.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (5596.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (5596.5396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (5596.63)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (5596.541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (5596.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (5596.383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (5596.635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (5596.9775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (5596.0815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (5593.559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (5590.8623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (5589.1997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (5588.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (5590.297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (5592.561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (5594.5386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (5596.0503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (5596.5776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (5595.8394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (5594.959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (5594.722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (5594.8164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (5595.0986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (5595.8306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (5596.804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (5597.1465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (5596.3765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (5595.084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (5594.47)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (5594.618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (5594.763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (5594.774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (5594.9575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (5595.1484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (5595.0435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (5594.695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (5593.944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (5592.7295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (5592.016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (5592.389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (5593.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (5593.5523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (5593.1265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (5592.305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (5591.918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (5592.7676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (5594.748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (5596.752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (5597.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (5597.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (5597.1187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (5596.626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (5595.9243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (5595.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (5594.8403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (5595.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (5595.44)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (5595.331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (5594.8203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (5594.739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (5595.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (5596.26)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (5596.9346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (5597.018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (5596.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (5595.1753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (5594.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (5594.802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (5594.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (5594.4404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (5594.92)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (5596.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (5598.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (5599.3794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (5598.7773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (5598.555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (5597.9546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (5596.2427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (5594.8164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (5595.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (5596.2935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (5596.0557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (5595.451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (5595.932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (5596.8667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (5596.7036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (5595.6856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (5594.8545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (5594.6655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (5595.038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (5595.3545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (5594.8457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (5593.5747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (5592.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (5592.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (5594.032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (5595.545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (5596.5117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (5597.2398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (5597.8735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (5598.1294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (5597.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (5597.9087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (5598.099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (5597.7065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (5596.419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (5595.5303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (5596.022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (5597.1397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (5597.301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (5596.0884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (5594.767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (5595.139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (5597.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (5598.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (5598.248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (5597.204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (5595.576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (5594.802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (5595.506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (5596.6274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (5597.0425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (5596.69)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (5596.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (5598.3076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (5600.9497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (5593.3013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (5584.6265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (5590.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (5594.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (5598.035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (5599.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (5598.1455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (5596.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (5597.545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (5602.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (5601.6025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (5582.643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (5588.9346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (5588.2666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (5581.6523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (5597.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (5578.5283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (5585.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (5589.216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (5590.953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (5593.1074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (5595.3584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (5594.9473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (5593.6206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (5593.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (5595.5303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (5596.304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (5595.792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (5594.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (5593.262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (5593.175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (5594.3887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (5595.466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (5595.2764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (5593.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (5590.4365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (5586.446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (5584.271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (5605.82)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (5597.6997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (5598.905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (5598.867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (5598.0503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (5596.8525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (5595.828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (5595.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (5595.1143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (5595.135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (5595.3774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (5595.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (5595.5986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (5594.5557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (5592.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (5592.2437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (5593.759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (5596.0996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (5596.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (5595.18)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (5592.9756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (5592.4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (5597.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (5625.719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (5625.719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (5122.8066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (5127.22)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (5128.869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (5123.1016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (5118.222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (5120.642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (5134.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (5131.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (5131.2793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (5131.02)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (5129.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (5127.794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (5127.325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (5126.6533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (5125.8726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (5125.5527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (5125.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (5125.8057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (5126.086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (5126.3765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (5126.469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (5124.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (5139.6104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (5119.863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (5127.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (5128.5894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (5126.263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (5120.9824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (5122.681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (5135.745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (5131.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (5129.925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (5128.95)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (5128.8555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (5129.2573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (5129.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (5129.8555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (5129.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (5129.0117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (5129.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (5129.7993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (5130.298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (5129.685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (5127.778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (5125.657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (5124.5415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (5124.3076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (5124.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (5124.9107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (5125.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (5126.289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (5125.7847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (5120.596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (5140.495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (5134.5845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (5127.8384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (5128.5894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (5129.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (5129.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (5130.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (5129.9507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (5129.133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (5127.5674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (5124.9224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (5119.416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (5115.513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (5117.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (5121.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (5122.514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (5122.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (5123.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (5123.8247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (5124.5527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (5125.395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (5126.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (5127.0977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (5128.648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (5129.3916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (5129.125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (5128.363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (5127.0347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (5123.998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (5120.804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (5118.4478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (5118.1255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (5124.6035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (5125.2813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (5120.1943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (5115.848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (5116.0283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (5116.379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (5119.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (5124.8257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (5126.4736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (5126.7734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (5126.6724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (5125.9873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (5124.725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (5123.855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (5123.7437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (5123.729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (5124.1196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (5128.7217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (5108.7114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (5099.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (5107.39)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (5085.8555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (5085.8555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (2776.1482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (2782.064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (2785.762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (2788.1482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (2790.404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (2792.798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (2789.986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (2787.3142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (2780.7852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (2784.5857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (2796.271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (2796.271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.024989)) (quote (1359.324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (1359.695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (1340.2797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (1337.5088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (1349.6581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (1371.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (1356.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (1351.3334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (1341.413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (1337.0563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (1333.1517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (1333.0292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (1334.8041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (1337.087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (1337.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (1335.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (1338.4972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (1363.1159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (1362.4424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (1331.8665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (1357.9876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (1349.6409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (1343.0209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (1341.4129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (1346.0404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (1349.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (1349.292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (1334.3098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (1334.6875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (1338.3693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (1340.2323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (1338.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (1342.6913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (1356.937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (1357.9667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (1321.6399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (1354.0934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (1349.4603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (1351.1757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (1354.3137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (1354.5298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (1358.1047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (1330.8412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (1335.2908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (1319.7994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (1348.7564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (1371.44)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (1334.7241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (1334.6582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (1330.1967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (1327.5519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (1328.5745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (1331.731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (1335.3031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (1337.5947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (1338.2897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (1360.5092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (1359.9386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (1337.458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (1364.7882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (1352.6902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (1353.2432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (1325.0604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (1359.4855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (1362.0563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (1372.4663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (1362.8952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (1342.8099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (1366.5856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (1366.4935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (1347.5819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (1344.6902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (1343.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (1341.021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (1341.8154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (1323.1951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (1346.53)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (1346.018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (1367.1437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (1353.5436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (1349.0687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (1351.3755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (1357.9524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (1363.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (1362.6166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (1362.955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (1364.723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (1368.266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (1334.8253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (1330.9165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (1332.7122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (1362.6154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (1356.8187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (1358.555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (1362.4619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (1338.3971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (1338.2527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (1343.9326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (1352.5543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (1333.8483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (1349.7655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (1352.1671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (1353.9253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (1353.8601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (1333.1193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (1337.0171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (1317.1847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (1318.0138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (1344.5232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (1335.7448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (1334.6376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (1342.8678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (1348.4573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (1353.2969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (1370.5289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (1348.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (1347.6039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (1342.3251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (1341.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (1340.267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (1339.9717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (1338.3624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (1333.0502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (1332.2914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (1333.1415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (1333.6312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (1335.2153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (1339.7295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (1344.8903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (1344.8294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (1348.053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (1364.3645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (1361.8557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (1331.5227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (1333.937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (1339.9342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (1344.7161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (1344.4441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (1341.8776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (1330.2832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (1329.2442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (1353.4728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (1353.588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (1332.1381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (1348.2539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (1367.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (1346.1589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (1344.6012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (1342.8092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (1333.3805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (1331.2041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (1330.3362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (1329.4716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (1330.183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (1331.4143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (1333.4826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (1349.8425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (1354.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (1374.1608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (1356.569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (1357.1395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (1336.7904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (1334.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (1338.8008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (1315.0319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (1315.0319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (3722.33)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (3724.953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (3727.578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (3729.9202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (3729.9202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.037483)) (quote (1853.9706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (1863.3008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (1869.0112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (1874.6528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (1874.6528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977)) (quote (2326.077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (2331.5987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (2333.7168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (2333.001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (2331.9068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (2332.2195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (2333.3064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (2334.1062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (2334.5489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (2333.796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (2333.796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.062472)) (quote (6534.497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.074966)) (quote (6536.5015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (6537.3296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (6536.7046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (6536.2105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (6535.952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (6530.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (6529.4336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (6528.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (6529.3584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (6532.3003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (6533.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (6531.049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (6526.2485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (6524.7524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (6523.0366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (6520.5195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (6519.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (6523.711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (6527.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (6527.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (6525.5273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (6526.1245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (6529.1523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (6532.0503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (6532.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (6532.407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (6531.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (6533.5425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (6516.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (6518.9126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (6531.5117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (6529.876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (6528.9307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (6528.1724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (6528.209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (6529.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (6530.7857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (6533.553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (6534.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (6531.8125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (6526.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (6524.0386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (6523.945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (6524.605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (6525.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (6525.238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (6525.491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (6526.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (6527.3794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (6527.6216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (6527.8447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (6528.2725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (6528.28)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (6528.0215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (6528.3057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (6528.9536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (6529.3057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (6529.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (6529.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (6529.126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (6529.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (6529.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (6528.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (6526.562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (6523.5034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (6521.191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (6520.4526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (6521.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (6524.066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (6526.2695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (6527.9556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (6528.7544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (6528.3467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (6527.5903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (6527.3486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (6527.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (6527.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (6528.24)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (6529.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (6529.695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (6529.1143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (6527.86)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (6527.0747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (6527.082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (6527.1895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (6527.2354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (6527.4683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (6527.6475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (6527.4844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (6527.066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (6526.11)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (6524.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (6523.5703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (6523.86)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (6524.736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (6525.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (6524.6177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (6523.772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (6523.376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (6524.1357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (6525.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (6527.9585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (6529.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (6529.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (6528.9497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (6528.4204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (6527.06)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (6526.6333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (6527.664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (6528.935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (6528.3643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (6527.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (6526.811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (6526.9556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (6527.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (6528.2886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (6528.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (6528.772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (6528.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (6527.005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (6526.4204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (6526.192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (6526.0205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (6526.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (6527.1533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (6529.131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (6530.5005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (6530.1543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (6528.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (6527.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (6527.3374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (6526.7065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (6525.7197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (6525.567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (6526.6006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (6527.591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (6527.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (6527.9424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (6528.7446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (6528.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (6528.157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (6527.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (6526.558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (6526.541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (6526.8394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (6526.715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (6525.6978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (6524.419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (6524.234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (6525.3438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (6526.816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (6527.697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (6528.2026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (6528.7485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (6529.216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (6529.346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (6529.353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (6529.4243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (6529.0366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (6527.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (6527.1533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (6527.6777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (6528.748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (6528.7857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (6527.3184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (6525.5337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (6523.7813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (6520.856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (6517.681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (6515.744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (6514.3774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (6511.5737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (6505.994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (6508.466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (6528.7793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (6528.5576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (6533.2983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (6535.3013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (6534.27)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (6530.182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (6524.904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (6519.9663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (6520.492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (6524.273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (6527.46)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (6528.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (6527.8066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (6524.4697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (6513.267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (6508.9614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (6512.3677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (6517.8814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (6520.2773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (6520.908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (6520.689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (6520.2065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (6514.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (6495.783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (6480.993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (6472.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (6468.9175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (6464.4756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (6456.1265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (6452.913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (6451.967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (6472.3774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (6474.5938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (6502.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (6528.6123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (6525.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (6524.366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (6524.691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (6522.396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (6518.1773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (6536.75)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (6524.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (6525.0654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (6524.2505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (6523.905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (6524.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (6527.0386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (6529.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (6530.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (6530.6167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (6531.2417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (6532.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (6534.0347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (6534.4844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (6535.382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (6536.3237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (6534.758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (6529.9116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (6526.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (6524.7153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (6524.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (6525.65)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (6527.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (6527.83)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (6527.5254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (6527.491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (6528.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (6528.68)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (6529.5566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (6529.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (6527.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (6525.576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (6524.757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (6528.737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (6535.1797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (6513.7095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (6528.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (6523.9316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (6523.805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (6524.5156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (6524.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (6523.506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (6523.1177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (6523.1836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (6522.7593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (6521.4756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (6522.323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (6523.441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (6523.7207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (6524.855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (6526.4053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (6527.56)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (6527.541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (6526.5444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (6526.38)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (6528.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (6531.3223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (6530.7046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (6527.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (6526.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (6526.8433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (6527.389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (6526.5337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (6524.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (6522.287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (6520.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (6516.9326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (6510.4946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (6507.6807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (6534.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (6529.4243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (6525.1035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (6522.6675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (6522.7075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (6525.933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (6528.389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (6529.1196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (6530.0523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (6531.094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (6530.2207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (6528.113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (6526.8023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (6527.2153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (6528.7285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (6529.9937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (6529.5474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (6527.8228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (6526.5615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (6526.286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (6526.8237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (6527.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (6527.1563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (6526.472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (6526.347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (6526.699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (6526.6094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (6525.9487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (6525.7617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (6526.5347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (6527.486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (6528.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (6528.3897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (6528.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (6525.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (6522.069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (6520.026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (6520.51)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (6506.323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (6532.8857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (6531.7188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (6529.2427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (6528.6016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (6529.5767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (6532.5176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (6535.0654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (6534.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (6532.737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (6530.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (6529.5176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (6527.8984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (6527.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (6528.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (6529.356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (6528.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (6526.2065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (6521.602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (6514.4253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (6510.274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (6509.2393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (6512.2417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (6518.6016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (6527.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (6526.9307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (6526.4478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (6526.447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (6526.9976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (6527.7085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (6526.9087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (6512.584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (6487.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (6487.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (6477.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (6502.5064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (6502.985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (6502.985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746)) (quote (9809.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (9807.354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.124943)) (quote (9798.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (9797.337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (9794.484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (9794.759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (9797.284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (9797.659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (9794.16)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (9787.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (9786.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (9786.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (9787.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (9786.643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (9783.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (9780.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (9806.101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (9792.309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (9789.983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (9784.29)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (9783.368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (9808.738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (9801.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (9798.251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (9794.602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (9791.799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (9788.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (9782.52)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (9803.96)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (9788.776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (9791.156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (9791.072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (9792.017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (9793.79)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (9798.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (9803.123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (9775.838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (9778.536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (9781.973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (9783.308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (9784.494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (9786.094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (9787.817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (9787.755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (9785.34)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.674694)) (quote (9779.288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (9802.649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (9793.761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (9792.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (9792.345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (9792.17)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (9792.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (9792.508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (9793.004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (9793.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (9790.382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (9803.871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (9828.872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (9810.481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (9782.849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (9786.642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (9787.211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (9784.512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (9780.782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (9779.796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (9782.828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (9787.071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (9789.19)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (9791.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (9793.047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (9792.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (9790.771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (9790.117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (9789.307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (9785.067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (9781.132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (9780.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (9787.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (9792.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (9796.916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (9775.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (9775.356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (9776.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (9778.124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (9782.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (9789.546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (9790.093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (9789.934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (9788.927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (9787.227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (9786.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (9786.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (9787.525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (9788.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (9788.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (9786.266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (9785.152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (9786.277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (9792.536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (9794.253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (9794.436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (9794.619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (9794.789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (9794.163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (9792.659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (9791.379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (9790.856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (9790.921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (9791.203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (9791.058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (9790.609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (9790.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (9792.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (9793.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (9793.749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (9793.776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (9792.157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (9790.6045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (9789.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (9788.905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (9788.447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (9789.157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (9791.563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (9794.528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (9795.68)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (9794.386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (9791.7705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (9789.917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (9789.913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (9790.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (9788.983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (9787.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (9787.098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (9787.605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (9776.566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (9776.513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (9782.915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (9785.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (9787.878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (9789.918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (9790.387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (9789.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (9787.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (9787.09)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (9788.541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (9794.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (9798.912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (9807.717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (9809.351)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (9786.758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (9793.826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (9793.488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (9793.159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (9793.495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (9794.125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (9794.834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (9799.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (9774.123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (9770.565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (9770.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (9749.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (9747.729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (9776.791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (9757.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (9757.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955)) (quote (1848.046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (1837.1343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (1863.2443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (1821.8175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (1837.5715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (1837.5715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.112449)) (quote (5628.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.137438)) (quote (5633.4273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.149932)) (quote (5635.8623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.162426)) (quote (5636.6426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (5636.044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (5635.629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (5636.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (5647.8447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (5625.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (5624.286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (5622.5425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (5631.0166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (5631.9004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (5656.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (5655.205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (5649.736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (5646.584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (5645.2197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (5660.848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (5663.346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (5664.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (5666.362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (5662.9898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (5647.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (5650.4097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (5646.0947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (5640.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (5639.1875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (5637.8677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (5638.1245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (5638.9697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (5632.788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (5603.297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (5640.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (5643.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (5642.8687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (5635.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (5635.4526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (5659.3106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (5626.9023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (5621.2485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.699683)) (quote (5623.81)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (5623.3154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (5622.866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (5651.305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (5636.3687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (5635.643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (5630.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (5627.2105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.874603)) (quote (5649.7188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.887097)) (quote (5649.619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (5635.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.912086)) (quote (5638.7354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (5635.1997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (5653.6045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (5660.9224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (5665.0195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (5693.83)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (5690.1)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (5690.1333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (5690.7373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (5689.3286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (5687.835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.062018)) (quote (5689.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (5691.422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.087007)) (quote (5657.3374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (5655.9956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (5652.831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (5649.617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (5630.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (5626.1875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (5656.4683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (5635.172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (5624.6826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (5653.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (5653.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.174921)) (quote (2768.8408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.187415)) (quote (2771.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (2767.801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (2763.5576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (2765.5767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (2758.3)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (2758.3)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.199909)) (quote (2289.6204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (2289.388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (2302.3325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (2295.107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (2294.3062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (2295.0843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (2294.9978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (2294.882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.299864)) (quote (2297.1946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.312358)) (quote (2302.3225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (2303.1675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (2305.7979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (2312.8719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.362336)) (quote (2282.6533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (2285.8096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (2307.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.399819)) (quote (2304.7166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (2302.4832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (2299.2493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.437302)) (quote (2297.7158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (2298.1563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (2295.505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (2292.4744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (2292.84)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (2284.7725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (2282.0952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (2283.3626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (2286.2903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (2289.506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (2294.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (2298.9632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (2306.3264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.624717)) (quote (2304.1868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (2302.544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (2301.5012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (2304.5918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (2278.672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (2288.4824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.724671)) (quote (2293.294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (2273.0554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74966)) (quote (2272.4197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.762154)) (quote (2303.6033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (2295.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (2298.386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (2298.1372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (2298.8855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.849615)) (quote (2298.8855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.212404)) (quote (2838.1553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.224898)) (quote (2834.3445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.237392)) (quote (2826.9578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.249887)) (quote (2829.5364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.262381)) (quote (2827.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.274875)) (quote (2833.718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28737)) (quote (2835.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.324853)) (quote (2820.3838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (2821.7112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (2832.3765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.412313)) (quote (2836.0008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.424807)) (quote (2824.3535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (2830.497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (2830.8142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (2824.6333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.512268)) (quote (2861.8228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.524762)) (quote (2826.886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (2840.072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (2841.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.562245)) (quote (2869.5684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.574739)) (quote (2873.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (2825.3592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.612222)) (quote (2826.3616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (2824.6458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (2824.6458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.337347)) (quote (1887.557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.349841)) (quote (1884.5001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37483)) (quote (1899.4876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.387324)) (quote (1899.4876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796)) (quote (2760.2622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46229)) (quote (2758.8892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.474785)) (quote (2757.3706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.487279)) (quote (2754.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.499773)) (quote (2751.3997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.537256)) (quote (2774.5154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.549751)) (quote (2774.5833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.587234)) (quote (2767.4475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.599728)) (quote (2747.8845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.637211)) (quote (2768.9937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.649705)) (quote (2749.7866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6622)) (quote (2742.3186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.687188)) (quote (2769.0525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.712177)) (quote (2750.7327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.737166)) (quote (2770.6575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.774649)) (quote (2769.4527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.787143)) (quote (2755.1494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.799637)) (quote (2757.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.812132)) (quote (2733.4392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (2732.5235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83712)) (quote (2732.5235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.824626)) (quote (2769.4507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.862109)) (quote (2771.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.899592)) (quote (2765.463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (2744.2405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (2766.2818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (2769.9116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (2769.9116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.924581)) (quote (2334.4207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.937075)) (quote (2330.197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.949569)) (quote (2327.6543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.962063)) (quote (2329.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.974558)) (quote (2332.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.987052)) (quote (2332.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.999546)) (quote (2331.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.012041)) (quote (2331.0662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.024535)) (quote (2328.281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03703)) (quote (2322.349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.049524)) (quote (2321.0318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.074512)) (quote (2311.179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.099501)) (quote (2305.1922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.111995)) (quote (2305.7823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12449)) (quote (2311.6763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.136984)) (quote (2318.387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.149478)) (quote (2321.5132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.161973)) (quote (2326.4165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (2329.6917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (2329.8257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (2329.2837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (2329.16)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (2329.2173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (2329.2842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (2330.0667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (2336.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (2342.1492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (2343.8172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (2345.4348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (2348.1507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (2352.8098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (2354.3147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (2352.1834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (2340.3675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (2305.5503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (2332.6338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (2330.9702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (2330.3596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (2330.9622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (2330.5489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (2321.1507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (2350.502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (2356.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (2361.1028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (2324.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (2328.5159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (2335.2288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (2355.1966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (2352.0196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (2349.1734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (2340.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (2327.2054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (2330.3567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (2331.443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (2331.9358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (2333.1883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (2338.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (2311.0872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (2311.7068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (2313.0733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (2313.2625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (2313.8743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (2313.9739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (2312.057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (2311.6863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (2313.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (2320.599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (2326.4759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (2299.9436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (2301.445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (2299.93)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (2296.9634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (2297.4937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (2300.7788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (2305.9375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (2311.0298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (2313.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (2316.0613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (2322.2993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (2326.4969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (2323.0044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (2318.982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (2321.8057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (2331.521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (2331.3599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (2330.373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (2331.3308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (2334.269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (2339.167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (2341.54)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (2354.8223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (2359.2039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (2358.4104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (2348.468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (2339.5413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (2327.7158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (2331.0347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (2333.0718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (2333.532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (2333.287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (2333.072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (2332.4383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (2330.9412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (2329.4702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (2328.7996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (2330.278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (2333.0008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (2333.4124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (2331.9466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (2331.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (2332.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (2333.3645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (2332.6465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (2330.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (2330.2932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (2330.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (2330.225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (2330.5987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (2331.7388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (2331.9578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (2330.805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (2330.5083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (2331.67)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (2331.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (2329.796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (2327.9898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (2328.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (2330.6829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (2331.7832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (2332.8877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (2333.342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (2332.4197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (2331.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (2330.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (2330.9656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (2330.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (2330.1116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (2329.5325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (2329.526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (2330.269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (2331.479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (2332.1087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (2332.3013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (2331.8614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (2331.2207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (2330.6775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (2330.241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (2330.2918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (2330.9463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (2331.7644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (2332.3667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (2332.686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (2332.549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (2331.9178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (2331.132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (2330.6778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (2330.8626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (2331.3658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (2331.5887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (2331.3902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (2330.8482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (2330.2273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (2330.01)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (2330.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (2330.8716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (2331.1773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (2331.1839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (2331.2837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (2331.4468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (2331.2525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (2331.1128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (2331.6797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (2332.1494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (2332.0379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (2331.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (2331.8574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (2332.4287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (2332.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (2333.1883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (2333.1309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (2332.435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (2331.6277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (2331.1109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (2330.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (2329.3855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (2328.9842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (2329.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (2330.9527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (2332.06)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (2332.8018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (2332.6367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (2331.0213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (2329.6177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (2330.0154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (2331.083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (2331.2088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (2330.8535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (2330.7078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (2330.731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (2330.799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (2330.907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (2330.9185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (2330.8902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (2331.5103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (2333.059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (2333.6585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (2331.9344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (2329.9575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (2330.0374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (2331.0733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (2331.2095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (2330.9766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (2331.1739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (2331.181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (2330.7288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (2330.553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (2330.888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (2331.0835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (2330.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (2330.9043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (2330.991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (2330.8352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (2330.256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (2329.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (2330.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (2331.6992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (2332.4575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (2332.7285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (2332.6138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (2332.5689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (2332.86)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (2332.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (2331.9578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (2331.5479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (2331.6795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (2331.6282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (2331.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (2331.3242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (2331.263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (2330.5655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (2328.8013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (2326.5537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (2325.5247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (2326.2344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (2328.3929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (2330.7478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (2331.117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (2331.3892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (2333.3377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (2334.1949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (2333.6006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (2332.7459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (2332.3987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (2331.9483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (2331.5279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (2331.9253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (2332.7613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (2332.4546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (2331.079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (2330.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (2330.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (2332.083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (2333.077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (2333.3858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (2332.7473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (2331.6482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (2331.456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (2332.6829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (2333.1348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (2332.2334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (2330.9514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (2330.686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (2331.3562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (2331.9248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (2331.0657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (2328.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (2327.7447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (2330.3304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (2332.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (2332.984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (2332.6167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (2332.3887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (2332.1199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (2331.5542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (2330.7488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (2330.2744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (2331.4983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (2333.5896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (2333.6543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (2331.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (2331.0025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (2333.2688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (2336.6294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (2337.8252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (2336.6336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (2334.7683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (2332.7293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (2331.053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (2330.5694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (2329.67)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (2328.3045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (2329.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (2331.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (2332.3797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (2331.9344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (2331.3487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (2330.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (2331.108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (2333.3909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (2332.3948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (2313.373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (2322.203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (2295.247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (2315.6216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (2310.1345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (2318.0283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (2326.2935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (2331.1074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (2332.1377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (2332.476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (2332.0667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (2331.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (2332.0984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (2332.976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (2333.1856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (2332.5088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (2331.5742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (2331.1214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (2330.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (2330.8155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (2329.359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (2326.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (2328.3408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (2330.753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (2330.241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (2327.4326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (2328.0115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (2329.6826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (2331.1717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (2331.4698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (2330.7818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (2330.6397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (2331.6856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (2332.9182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (2332.8452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (2331.4068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (2330.3328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (2331.1118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (2332.17)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (2332.0535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (2331.3907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (2331.8003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (2333.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (2333.8252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (2332.111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (2329.984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (2328.6136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (2331.0396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (2331.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (2313.554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (2328.0198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (2329.5183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (2330.632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (2331.4683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (2331.8767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (2331.3484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (2330.691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (2330.7608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (2331.5586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (2332.6448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (2332.9317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (2331.5677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (2329.849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (2330.5286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (2331.9344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (2331.8006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (2330.8194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (2330.0235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (2329.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (2329.2388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (2329.2698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (2329.9322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (2331.2659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (2332.673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (2333.2532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (2332.6516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (2331.196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (2330.6177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (2332.8133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (2335.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (2334.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (2332.3604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (2331.1988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (2333.231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (2337.0562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (2337.505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (2335.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (2333.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (2335.1204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (2337.6512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (2338.5564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (2337.4527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (2335.1497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (2331.6514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (2329.744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (2329.4363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (2329.6939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (2331.2483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (2334.1497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (2335.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (2332.8418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (2331.7979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (2332.2356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (2333.2608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (2334.2666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (2335.874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (2337.5003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (2335.888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (2331.8406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (2328.6153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (2327.682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (2328.0117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (2329.0183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (2329.2527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (2329.4112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (2330.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (2330.9204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (2331.4463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (2331.9712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (2332.4959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (2333.629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (2336.7598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (2338.6182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (2338.8985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (2335.8352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (2333.3684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (2332.847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (2334.4512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (2338.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (2345.6512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (2353.113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (2351.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (2364.0762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (2367.2083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (2367.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (2367.2334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (2366.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (2366.4158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (2366.3094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (2365.8648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (2365.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (2367.904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (2372.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (2374.9283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (2373.3777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (2348.1939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (2344.537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (2337.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (2331.527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (2325.8838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (2323.6975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (2325.3299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (2328.6907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (2330.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (2330.2188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (2329.5489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.796916)) (quote (2327.7393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.809411)) (quote (2324.961)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.821905)) (quote (2323.7232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.834399)) (quote (2324.3706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.846893)) (quote (2325.5652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.859388)) (quote (2328.2263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.871882)) (quote (2331.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.884377)) (quote (2330.968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.896871)) (quote (2331.2112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.909365)) (quote (2337.0108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.921859)) (quote (2336.9383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.934354)) (quote (2333.9905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.946848)) (quote (2330.281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.959342)) (quote (2329.6087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.971837)) (quote (2330.1326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.984331)) (quote (2332.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.996825)) (quote (2332.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.174467)) (quote (6997.9175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.186961)) (quote (6995.5176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.199456)) (quote (6994.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21195)) (quote (6993.144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.224444)) (quote (6991.683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.236939)) (quote (6990.7305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.249433)) (quote (6990.8814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.261927)) (quote (6991.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.274422)) (quote (6992.829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.286916)) (quote (6993.4966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29941)) (quote (6990.3174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (6988.867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.324399)) (quote (7011.191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.336893)) (quote (6999.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (6995.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (6994.999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (6996.3184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (6997.569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (6996.6914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (6995.247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (6994.063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (6993.3003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (6992.9663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (6993.165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (6993.4663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (6992.692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (6991.9927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (6992.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (6994.687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (6995.484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (6996.657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (6995.9927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (6992.9727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (6992.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (6993.554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (6992.9775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (6991.727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (6992.2783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (6994.4165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (6995.922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (6995.2837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (6993.683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (6992.3467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (6991.7188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (6991.617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (6991.537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (6991.8716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (6993.5264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (6996.9556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (7000.4385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (7004.0523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (7007.9263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (6987.6816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (6994.6963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (6994.8906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (6993.622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (6992.622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (6992.418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (6992.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (6992.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (6993.2144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (6998.0903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (7004.4126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (7010.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (7011.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (7008.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (6999.2188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (6996.0703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (6995.321)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (6995.8213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (6996.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (6997.9907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (7002.2783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (7006.6763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (7008.5103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (7019.0464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (7017.3867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (6992.117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (6991.2183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (6992.1646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (6993.7417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (6996.4165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (6999.053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (6999.678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (6998.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (6996.1714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (6994.999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (6994.9185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (6994.8403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (6993.7305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (6992.1104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (6991.901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (6993.6006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (6995.831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (6996.984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (6997.044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (6996.605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (6996.3394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (6996.4043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (6996.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (6997.324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (6996.127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (6993.298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (6990.854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (6989.6377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (6989.9004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (6975.758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (6978.8115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (6993.4478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (6990.654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (6990.1123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (6990.467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (6991.6807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (6994.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (6997.2354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (6996.4395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (6992.331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (6986.1436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (6981.245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (6980.459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (6987.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (6994.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (6994.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (6993.232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (6996.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (6998.9634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (6999.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (6997.6397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (6997.7817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (6998.9165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (6998.66)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (6998.8687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (7000.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (7000.2534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (6999.551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (6998.167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (6996.2886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (6994.6943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (6994.2026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (6994.519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (6994.968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (6995.248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (6995.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (6994.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (6993.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (6992.5996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (6992.878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (6993.7705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (6993.8867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (6992.266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (6987.098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (7005.3794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (7027.0083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (6991.297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (6992.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (6993.3804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (6995.006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (6995.3325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (6992.8003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (6991.1065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (6994.0073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (6996.6475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (6998.7544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (7001.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (7002.7544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (7000.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (6993.853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (6985.574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (6979.472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (6976.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (7003.2085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (6977.7124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (6979.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (6963.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (6965.9087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (6993.7495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (6989.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (6989.2505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (6991.6987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (6994.182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (6995.0444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (6995.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (6994.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (6993.925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (6993.456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (6993.827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (6994.381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (6995.2827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (6998.4893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (7000.211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (6997.774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (6990.934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (6988.2407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (6987.8296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (6988.201)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (6988.6616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (6989.0444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (6990.233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (6993.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (6995.2886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (6994.683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (6992.96)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (6992.2964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (6992.4053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (6992.855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (6993.073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (6990.9224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (6989.611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (6991.58)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (6996.2803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (6998.228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (7000.0855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (7000.215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (6998.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (6997.5737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (6997.2217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (6995.884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (6993.808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (6993.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (6994.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (6996.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (6997.373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (6996.8555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (6996.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (6996.6123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (6996.5137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (6994.993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (6993.027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (6991.9404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (6991.6963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (6991.3774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (6990.3525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (6989.4487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (6990.4976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (6994.1514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (6997.297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (6998.3457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (6997.5933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (6995.591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (6993.7974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (6997.0293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (6977.9107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (6958.071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (6958.071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.311905)) (quote (6058.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388)) (quote (6041.3086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.361882)) (quote (6063.2383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.374376)) (quote (6064.169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.386871)) (quote (6064.396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365)) (quote (6063.5137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.411859)) (quote (6062.359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (6061.5806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (6061.5806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (5130.9443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (5130.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (5129.5606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (5129.6353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (5131.753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (5133.4434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (5129.717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (5125.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (5127.2134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (5130.0176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (5130.666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (5129.2324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (5124.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (5123.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (5125.645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (5128.2217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (5127.7114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.636757)) (quote (5126.3438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252)) (quote (5126.4385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.661746)) (quote (5128.9297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (5141.3276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (5147.4736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (5143.9507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (5128.3355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (5128.881)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (5128.5176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (5126.7437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (5122.8814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (5120.26)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (5153.6143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (5135.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (5115.3286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (5130.8545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (5165.2564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (5164.6475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (5163.7227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (5160.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (5158.82)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (5163.178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (5168.81)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (5179.6797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (5178.746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (5178.2275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (5180.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (5181.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (5175.7676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (5198.4365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (5163.489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (5160.726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (5165.22)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (5169.586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (5162.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (5151.389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (5128.321)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (5126.1157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (5128.0757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (5131.66)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (5133.711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (5132.6094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (5129.971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (5128.8984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (5128.8145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (5128.933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (5129.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (5128.831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (5127.8774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (5126.86)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (5127.226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (5128.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (5130.253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (5130.347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (5129.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (5129.7437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (5130.9946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (5131.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (5131.484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (5129.7007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (5128.005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (5126.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (5125.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (5125.1694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (5126.236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (5127.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (5128.257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (5127.3648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (5126.1743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (5126.15)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (5127.5845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (5129.1494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (5130.09)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (5130.3374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (5129.5835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (5128.3735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (5127.6367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (5128.2134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (5130.314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (5132.265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (5133.707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (5133.281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (5131.3477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (5132.247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (5135.4434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (5134.7275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (5130.2036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (5127.907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (5126.853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (5125.7334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (5125.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (5126.5815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (5129.101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (5131.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (5132.014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (5131.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (5130.0205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (5129.7075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (5130.2163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (5130.712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (5131.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (5130.9253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (5129.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (5127.241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (5139.703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (5140.2105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (5118.76)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (5122.6553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (5124.9053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (5127.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (5128.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (5128.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (5128.4063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (5128.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (5128.2095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (5128.367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (5129.2676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (5130.613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (5131.501)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (5130.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (5126.039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (5121.997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (5120.517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (5120.4443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (5121.3613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (5124.1353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (5128.5117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (5131.049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (5131.1235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (5127.793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (5117.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (5110.7236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (5108.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (5110.7114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (5118.0195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (5118.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (5116.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (5112.5845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (5109.433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (5108.1)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (5108.23)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (5109.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (5111.419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (5140.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (5132.934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (5130.892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (5132.175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (5140.1133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (5141.555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (5114.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (5122.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (5122.6367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (5122.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (5121.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (5122.623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (5121.629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (5120.587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (5121.046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (5123.99)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (5125.3506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (5124.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (5124.0195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (5125.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (5128.6416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (5131.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (5130.8648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (5129.1826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (5127.7993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (5127.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (5127.21)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (5123.6753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (5120.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (5124.557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (5130.667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (5129.744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (5128.6787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (5129.1113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (5129.7144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (5129.7783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (5129.423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (5128.8584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (5128.2134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (5127.7603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (5127.7847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (5128.0386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (5127.938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (5127.6216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (5127.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (5127.5083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (5127.0537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (5125.9883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (5125.116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (5125.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (5129.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (5133.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (5134.3384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (5132.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (5129.704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (5129.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (5131.029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (5131.5405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (5130.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (5128.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (5128.7524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (5129.214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (5128.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (5128.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (5129.628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (5132.008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (5132.9595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (5132.273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (5131.46)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (5131.178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (5130.185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (5128.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (5127.7554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (5127.898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (5127.9033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (5127.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (5126.14)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (5126.4053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (5128.0044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (5129.7227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (5130.31)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (5130.097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (5129.3193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (5128.303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (5127.6514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (5127.644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (5128.123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (5128.7744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (5128.938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (5127.86)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (5124.2583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (5121.4336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (5121.4844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (5127.099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (5130.1997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (5130.3027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (5128.7866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (5126.9507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (5126.2383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (5126.169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (5126.1123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (5126.278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (5127.1914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (5128.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (5129.074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (5128.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (5126.7905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (5125.154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (5125.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (5128.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (5130.856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (5131.191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (5129.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (5127.429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (5130.144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (5112.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (5132.4307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (5128.746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (5128.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (5129.1934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (5128.981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (5128.1353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (5127.94)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (5129.1353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (5130.647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (5130.428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (5128.222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (5125.566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (5124.655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (5125.9575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (5128.418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (5128.738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (5126.7446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (5125.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (5128.917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (5130.2085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (5125.1245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (5117.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (5116.1763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (5117.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (5120.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (5126.0674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (5129.466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (5128.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (5127.3145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (5127.0405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (5127.994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (5128.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (5129.545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (5129.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (5129.927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (5130.2534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (5130.6963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (5130.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (5130.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (5129.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (5129.142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (5128.7026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (5128.4453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (5127.822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (5127.2026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (5127.512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (5128.197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (5128.26)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (5127.7324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (5127.3086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (5127.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (5127.983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (5128.654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (5129.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (5130.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (5130.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (5129.6787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (5128.6426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (5127.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (5127.4565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (5127.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (5126.9414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (5126.1865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (5125.664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (5125.569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (5125.6397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (5126.1343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (5127.272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (5128.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (5128.2593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (5127.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (5127.8648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (5128.5776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (5129.5913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (5130.583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (5131.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (5131.3403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (5130.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (5129.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (5131.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (5136.0938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (5136.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (5131.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (5127.463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (5127.3076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (5127.6333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (5127.926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (5128.3228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (5128.8423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (5129.3315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (5129.554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (5129.4067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (5130.0654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (5138.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (5137.0147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (5123.0376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (5125.959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (5126.3843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (5126.702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (5127.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (5127.508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (5128.14)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (5128.362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (5127.7666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (5127.136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (5127.614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (5129.256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (5130.295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (5130.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (5129.199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (5128.573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (5128.508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (5128.7666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (5128.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (5128.5884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (5127.9815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (5127.1006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (5125.14)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (5120.0366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (5120.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (5123.4756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (5126.1685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (5125.0615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (5124.346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (5126.8315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (5128.79)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (5128.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (5125.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (5124.7236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (5124.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (5122.9043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (5121.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (5119.5728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (5118.938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (5119.0264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (5118.3433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (5135.861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (5143.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (5119.0264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (5119.7964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (5121.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (5123.727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (5124.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (5125.2803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (5125.2803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.424354)) (quote (2287.5994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.436848)) (quote (2288.5257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.449342)) (quote (2306.3968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.461837)) (quote (2285.0056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.474331)) (quote (2314.1358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.486825)) (quote (2310.874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49932)) (quote (2304.7107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.511814)) (quote (2301.2857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.524308)) (quote (2302.5764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.536803)) (quote (2305.6848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297)) (quote (2268.7222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.561791)) (quote (2272.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.574286)) (quote (2282.5716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58678)) (quote (2283.15)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.599274)) (quote (2296.561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.611769)) (quote (2290.9668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.624263)) (quote (2290.9668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67424)) (quote (7970.4575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.686735)) (quote (7976.6187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.699229)) (quote (7979.0615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.711723)) (quote (7981.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.724218)) (quote (7983.752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.736712)) (quote (7990.4316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.749206)) (quote (7967.2383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.761701)) (quote (7962.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.774195)) (quote (7959.5586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.786689)) (quote (7932.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.799184)) (quote (7924.4404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.811678)) (quote (7919.459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.824172)) (quote (7917.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.836667)) (quote (7921.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.849161)) (quote (7929.2437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.861655)) (quote (7928.0396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415)) (quote (7898.7725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.886644)) (quote (7921.0483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.899138)) (quote (7921.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.911633)) (quote (7924.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.924127)) (quote (7929.1314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.936621)) (quote (7931.578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.949116)) (quote (7933.2095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96161)) (quote (7941.426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.974104)) (quote (7916.6314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.986599)) (quote (7922.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.999093)) (quote (7929.4116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (7928.1743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.024082)) (quote (7927.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (7927.4775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (7928.239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (7929.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (7933.3794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (7937.2036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (7936.1187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (7928.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (7926.58)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (7925.0693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (7923.4775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (7923.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (7924.2583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (7925.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (7926.6646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (7927.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (7927.2813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (7926.582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (7925.999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (7925.9785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (7925.93)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (7924.985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (7923.8257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (7923.9697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (7925.5195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (7927.356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (7928.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (7929.704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (7929.9766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (7929.7573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (7929.4273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (7929.2188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (7928.922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (7928.029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (7926.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (7926.8447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (7932.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (7905.876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (7908.12)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (7919.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (7929.0005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (7925.7803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (7924.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (7924.9175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (7924.8926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (7923.7085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (7922.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (7921.314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (7919.8237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (7919.907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (7923.5147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (7928.09)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (7928.65)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (7927.23)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (7924.079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (7921.4316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (7921.411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (7922.105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (7919.7)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (7918.056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (7920.061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (7922.4063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (7922.33)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (7921.1235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (7920.4243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (7920.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (7923.139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (7926.939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (7928.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (7927.229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (7922.9253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (7921.514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (7923.9956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (7927.7134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (7929.1597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (7928.6494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (7926.5137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (7923.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (7921.88)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (7922.248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (7924.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (7927.432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (7930.2764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (7933.5913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (7934.892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (7931.9043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (7926.1148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (7924.063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (7921.941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (7917.9316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (7916.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (7916.3594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (7897.629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (7898.6856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (7899.9443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (7902.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (7906.3164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (7930.5884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (7926.603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (7924.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (7922.381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (7913.8)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (7911.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (7918.885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (7929.618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (7925.8286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (7922.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (7922.211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (7923.6377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (7926.097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (7928.1353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (7929.3516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (7929.5234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (7929.0166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (7928.6763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (7928.79)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (7928.8833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (7928.8457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (7928.725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (7928.167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (7927.1636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (7925.729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (7924.0054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (7924.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (7928.057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (7929.7827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (7929.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (7927.687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (7926.072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (7926.7925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (7929.0537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (7929.4956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (7928.1406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (7927.2583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (7927.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (7928.166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (7928.4014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (7927.512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (7926.6333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (7927.2524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (7928.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (7929.7637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (7928.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (7926.731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (7925.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (7925.3755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (7925.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (7924.551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (7923.619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (7923.014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (7923.5156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (7924.935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (7925.87)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (7924.0083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (7912.8247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (7911.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (7919.249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (7924.8315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (7926.074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (7926.736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (7926.7285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (7925.5195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (7924.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (7926.0947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (7930.5557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (7933.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (7933.284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (7931.157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (7927.5596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (7926.351)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (7929.898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (7933.287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (7932.8525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (7929.263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (7927.555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (7927.228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (7927.3648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (7928.1616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (7929.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (7930.9526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (7931.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (7931.613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (7932.3784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (7932.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (7929.5923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (7926.804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (7925.612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (7925.3516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (7924.6924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (7923.382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (7922.632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (7923.392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (7925.323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (7927.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (7928.706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (7928.667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (7927.616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (7925.9785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (7924.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (7925.0884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (7925.9004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (7926.9233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (7927.8794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (7929.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (7934.077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (7933.2407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (7930.239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (7930.004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (7929.996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (7928.7217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (7925.9775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (7923.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (7923.1387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (7922.952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (7922.3374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (7922.0117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (7923.165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (7925.0166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (7926.3535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (7926.1753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (7925.4395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (7926.142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (7928.9453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (7930.1074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (7929.1475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (7928.0435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (7928.191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (7928.565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (7953.3355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (7928.879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (7927.8027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (7926.612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (7925.8457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (7925.2485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (7924.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (7923.692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (7922.952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (7923.8403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (7926.538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (7927.078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (7925.023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (7923.663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (7924.169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (7925.1235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (7925.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (7925.105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (7924.666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (7924.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (7924.667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (7923.928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (7923.399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (7924.146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (7925.648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (7927.083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (7929.4575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (7931.668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (7931.7817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (7930.926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (7930.092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (7926.726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (7923.9985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (7924.8516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (7928.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (7929.132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (7928.69)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (7929.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (7930.8)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (7930.727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (7928.5635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (7925.882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (7924.9424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (7925.2983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (7925.304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (7924.531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (7924.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (7925.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (7927.0176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (7926.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (7925.175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (7923.8594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (7924.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (7926.586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (7928.5547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (7929.7026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (7930.3335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (7929.6143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (7926.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (7923.755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (7922.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (7922.9746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (7924.1187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (7924.976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (7924.533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (7922.913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (7921.5435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (7920.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (7917.029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (7913.161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (7913.409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (7917.8193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (7921.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (7926.2236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (7931.135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (7933.901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (7932.9937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (7930.0034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (7928.563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (7928.6567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (7932.484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (7914.4097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (7914.6484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (7923.831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (7924.401)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (7925.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (7926.1514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (7927.4004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (7927.8193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (7927.0664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (7926.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (7927.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (7928.5674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (7929.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (7915.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (7939.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (7916.6914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (7921.169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (7922.7866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (7924.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (7925.547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (7926.001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (7926.481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (7927.3115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (7926.799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (7924.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (7923.5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (7925.8345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (7928.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (7930.092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (7929.7886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (7928.3237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (7927.1523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (7926.858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (7927.0044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (7927.1455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (7927.0317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (7926.557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (7925.57)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (7918.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (7938.413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (7933.96)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (7924.533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (7924.5054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (7924.5005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (7925.6987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (7925.458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (7946.0986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (7921.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (7921.7246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (7921.572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (7921.1353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (7918.987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (7916.058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (7917.01)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (7934.5645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (7931.19)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (7930.3857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (7926.828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (7921.3726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (7919.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (7920.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (7921.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (7921.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.011587)) (quote (2281.7327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.036576)) (quote (2294.0052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04907)) (quote (2288.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.061565)) (quote (2291.1778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.074059)) (quote (2300.9329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.086553)) (quote (2315.3482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.099048)) (quote (2321.9475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (2293.0042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (2294.285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.136531)) (quote (2313.6199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (2319.6324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (2294.0865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (2295.2727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (2303.0437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (2303.192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (2304.235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.223991)) (quote (2303.7686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485)) (quote (2302.2293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (2298.758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474)) (quote (2299.8125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (2291.973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (2289.8692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.311451)) (quote (2309.022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (2288.4102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (2288.9912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (2307.5496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (2296.3523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (2292.3797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (2288.5528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (2287.2652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (2290.7495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (2297.7627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (2297.1934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (2299.4903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (2271.6009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (2276.4004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (2305.612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (2284.502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (2284.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (2302.2054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (2296.8645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (2293.837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (2295.3938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (2301.3123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (2292.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (2291.1587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (2292.4922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (2294.7879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (2294.5384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (2294.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (2297.4903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (2287.8848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (2288.6394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (2300.5977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (2297.7454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (2296.7512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (2295.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (2294.2647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (2294.7412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (2295.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (2285.2698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (2283.2454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (2287.9524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (2294.261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (2294.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (2294.051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (2293.9097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (2292.3528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (2291.8909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (2291.3719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (2292.2222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (2291.5608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (2291.7058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (2291.1184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (2290.5789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (2287.5398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (2287.8418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (2290.3199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (2294.5247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (2302.6118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (2283.3357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (2283.5535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (2288.4859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (2287.1758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (2286.7676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (2288.6382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (2291.5083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (2292.9986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (2292.452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (2292.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (2292.8592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (2295.8648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (2303.9449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (2284.6687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (2289.154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (2289.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (2290.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (2286.5703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (2284.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (2288.0882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (2297.526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (2304.0086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (2284.0667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (2285.6082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (2302.1614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (2296.9329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (2295.3714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (2294.3443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (2290.2207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (2287.878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (2290.647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (2291.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (2292.352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (2295.0508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (2278.4092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (2274.4156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (2308.0589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (2285.295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (2286.4993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (2285.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (2286.2344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (2291.982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (2290.8487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (2289.7578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (2288.8074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (2288.0796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (2289.26)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (2293.2417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (2293.3929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (2294.5579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (2294.7947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (2293.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (2289.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (2287.1345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (2286.2256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (2287.3894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (2291.5386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (2306.0196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (2276.2017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (2257.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (2296.791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (2291.967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (2289.3313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (2288.1253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (2289.959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (2292.1914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (2291.6365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (2290.8897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (2291.1558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (2285.376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (2282.8804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (2281.9427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (2282.7928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (2285.0774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (2302.0833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (2304.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (2284.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (2285.4492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (2305.6419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (2288.9217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (2287.7442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (2286.18)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (2286.2674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (2291.5435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (2277.6138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (2255.6704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (2253.7608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (2250.001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (2243.8294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (2237.3098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (2230.9522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (2231.3806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (2233.279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (2235.5662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (2238.6565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (2242.489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (2271.0232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (2272.88)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (2271.9226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (2272.451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (2274.159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (2274.6355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (2282.7403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (2281.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (2281.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.111542)) (quote (1838.4514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.124036)) (quote (1839.2234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.161519)) (quote (1830.8704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.174014)) (quote (1833.5386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (1842.8341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (1824.2941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (1829.329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.273968)) (quote (1819.5009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (1814.1679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (1825.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33644)) (quote (1842.8738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (1842.3306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (1813.1812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (1814.0746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (1813.1309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (1802.3908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (1838.7222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (1810.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (1807.7789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (1828.0659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (1844.2437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (1828.6253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (1811.1887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (1836.3694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (1832.9974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (1833.7689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (1839.5001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (1839.5001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.149025)) (quote (1359.2564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.186508)) (quote (1333.6965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.199002)) (quote (1334.8933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.211497)) (quote (1318.6171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898)) (quote (1312.5874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.286463)) (quote (1331.9745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.298957)) (quote (1352.4046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.323946)) (quote (1360.4275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.348934)) (quote (1374.1793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.361428)) (quote (1349.6019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.373923)) (quote (1329.4249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.386417)) (quote (1359.1336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.398911)) (quote (1333.2546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.411406)) (quote (1336.1608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4239)) (quote (1341.7546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.436394)) (quote (1331.9457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.448889)) (quote (1325.9473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.461383)) (quote (1323.3483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.473878)) (quote (1323.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.486372)) (quote (1327.2879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.498866)) (quote (1332.4885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.511361)) (quote (1321.8947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (1344.8444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.536349)) (quote (1336.3436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.548844)) (quote (1328.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (1326.6626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (1328.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821)) (quote (1366.2402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315)) (quote (1336.9028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (1319.4103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (1320.9275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (1325.5669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (1339.5569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (1343.2055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.686281)) (quote (1357.1359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.698776)) (quote (1348.3709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (1352.7553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (1322.6286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (1323.9784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (1326.7952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (1357.6452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (1351.6809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (1345.6921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (1348.4517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.811224)) (quote (1345.47)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (1344.6696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (1349.2195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (1350.3453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (1354.0245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.873696)) (quote (1355.7222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (1352.2748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (1352.6747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (1350.3665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (1371.4295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (1332.1476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (1332.9971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (1343.1565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (1340.7758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (1335.0806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (1334.3644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (1337.4573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (1342.0172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (1345.8156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (1351.9226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (1348.7958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (1353.0131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (1341.6602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (1340.8759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (1348.9609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (1351.915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (1328.242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (1336.2868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (1337.1629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (1320.6017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (1322.9198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (1320.3003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (1322.4067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (1340.2073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (1338.2855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (1331.0018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (1327.0728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (1326.8713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (1324.6633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (1325.1094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (1355.2467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (1323.6079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (1323.5038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (1328.2285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (1345.8468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (1341.0302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (1342.2844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (1344.64)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (1353.8529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (1347.6847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (1347.027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (1341.6151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (1342.1537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (1345.3399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (1319.4592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (1359.9387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (1365.1122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (1368.5195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (1353.8992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (1346.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (1353.8616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (1359.4589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (1351.0897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (1347.5708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (1345.5874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (1352.5603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (1332.3265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (1351.9414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (1354.3688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (1360.644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (1363.3092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (1334.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (1348.0101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (1347.1543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (1322.5471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (1337.9877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (1337.8258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (1312.7711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (1293.8981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (1323.4614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (1323.4508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (1339.0482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (1324.749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (1326.0724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (1332.3582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (1332.2307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (1331.455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (1340.0361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (1341.2338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (1338.3164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (1340.1618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (1339.8316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (1334.4672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (1334.8131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (1342.7619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (1346.6691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (1351.8611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (1350.6093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (1351.6895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (1352.4822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (1357.2243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (1335.4299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (1370.0164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (1332.9358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (1356.6925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (1354.3132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (1350.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (1345.8389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (1346.9743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (1355.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (1361.0621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (1364.1921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (1365.5109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (1360.0735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (1359.4014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (1375.5952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (1356.8158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (1354.8473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (1358.5093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (1359.2105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (1362.2892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (1372.3832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (1354.9784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (1337.4238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (1338.0908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (1344.4357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (1353.0757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (1361.086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (1358.5309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (1362.5929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (1326.5619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (1369.6897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (1348.1536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (1345.9649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (1342.6588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (1339.2792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (1338.0414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (1336.8601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (1335.9436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (1332.9179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (1331.2267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (1332.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (1335.9902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (1338.5768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (1341.9465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (1367.892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (1368.5476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (1356.3933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (1374.7241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (1327.6558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (1324.4181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (1323.0897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (1348.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (1323.4465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (1344.8252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (1348.7699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (1360.6808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (1360.2671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (1329.9598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (1333.7291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (1340.3794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (1342.5724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (1344.7896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (1343.3163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (1344.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (1345.9098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (1354.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (1354.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.523855)) (quote (1376.3031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.561338)) (quote (1369.092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.573832)) (quote (1350.4252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.586327)) (quote (1362.56)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62381)) (quote (1370.2819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.636304)) (quote (1370.4236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.648798)) (quote (1370.4236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.661293)) (quote (3715.3875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.673787)) (quote (3719.8618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71127)) (quote (3699.3189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764)) (quote (3705.7066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259)) (quote (3691.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753)) (quote (3690.5874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.761247)) (quote (3694.6433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.773741)) (quote (3691.9024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.786236)) (quote (3691.7078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873)) (quote (3696.5115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.823719)) (quote (3687.9453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.836213)) (quote (3675.979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.848707)) (quote (3678.3452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.861202)) (quote (3683.548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88619)) (quote (3655.0542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.898685)) (quote (3662.6155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179)) (quote (3664.132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.923673)) (quote (3661.3987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168)) (quote (3659.5266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662)) (quote (3659.845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.961156)) (quote (3692.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651)) (quote (3687.8787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.986145)) (quote (3686.4107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (3683.3645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (3670.7408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (3668.3477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (3671.9505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (3676.492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (3676.7364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (3679.002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (3682.3997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (3687.3977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (3693.0699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (3697.227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (3680.0752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (3684.877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (3679.968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (3679.9783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (3707.291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (3688.3653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (3703.354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (3681.3614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (3677.3113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (3668.819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (3694.4856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (3682.513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (3684.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (3688.8914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (3672.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (3654.8318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (3695.3462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (3671.1038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (3708.0044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (3682.6477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (3679.6355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (3661.1826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (3662.0515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (3684.0166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (3681.3843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (3686.9583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (3686.636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (3688.018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (3697.2896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (3697.2896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639)) (quote (3753.1553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134)) (quote (3764.5486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (3770.1778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (3760.6822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (3760.7818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (3760.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (3756.9575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (3779.1936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (3755.5418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (3762.7896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (3760.6223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (3738.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (3768.8262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (3771.0867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (3760.654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (3762.785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (3761.9854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (3767.704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (3758.2569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (3766.2779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (3777.8013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (3803.4695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (3815.4637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (3767.7473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (3748.3147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (3770.1096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (3772.0503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (3775.9385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (3777.9378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (3786.6802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (3756.4107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (3755.6577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (3756.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (3756.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.023628)) (quote (1844.1604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.036123)) (quote (1843.5587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617)) (quote (1833.2238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111)) (quote (1829.1748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.073606)) (quote (1827.2831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0861)) (quote (1829.4221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (1835.9948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (1839.3424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (1836.9085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (1842.8114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.061111 3.073606 3.0861 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964)) (quote (5621.3975 5625.097 5627.713 5598.1235 5621.574 5627.597 5633.3076 5631.083 1842.8114 5598.135 5576.843 5574.775 5547.873 5563.1143 5596.2417 5627.763 5636.846 5638.162 5634.6343 5628.3106 5622.5117 5622.3955 5625.9043 5626.2095 5624.1274 5621.909 5621.909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.098594)) (quote (5579.485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.111089)) (quote (5580.5366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.123583)) (quote (5588.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.136077)) (quote (5589.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.148571)) (quote (5592.9766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (5595.8433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.186054)) (quote (5600.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (5601.89)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (5601.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (5598.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (5594.765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (5593.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (5591.746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (5588.0537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (5585.5566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (5587.2437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (5591.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (5595.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (5594.9365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (5593.144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (5592.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (5593.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (5594.6016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (5595.45)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (5595.7656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (5596.663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (5597.325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (5596.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (5594.8945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (5593.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (5593.6533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (5595.296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (5599.953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (5601.8633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (5599.026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (5592.66)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (5590.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (5591.0576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (5591.4697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (5591.845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (5592.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (5594.2886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (5595.636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (5596.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (5597.8276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (5598.4263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (5597.8193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (5596.8145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (5596.415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (5596.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (5595.8145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (5594.3164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (5593.2065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (5593.9414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (5595.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (5597.419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (5598.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (5599.1245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (5599.6895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (5599.1924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (5596.573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (5594.185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (5593.28)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (5593.3823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (5593.8794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (5594.3906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (5594.5986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (5593.61)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (5590.875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (5589.3916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (5589.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (5589.5737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (5588.5396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (5588.5366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (5590.563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (5592.0357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (5592.0537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (5594.564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (5578.2896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (5580.065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (5598.953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (5597.3687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (5597.886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (5600.404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (5602.3784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (5601.92)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (5600.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (5599.861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (5597.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (5591.4136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (5584.826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (5579.876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (5572.794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (5569.1123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (5600.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (5595.9253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (5594.684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (5594.9155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (5596.041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (5595.419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (5593.577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (5592.5645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (5592.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (5592.878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (5593.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (5593.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (5594.5967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (5596.0073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (5597.2144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (5596.58)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (5594.746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (5593.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (5593.6826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (5595.1143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (5596.6084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (5597.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (5596.1177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (5594.392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (5593.412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (5593.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (5595.699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (5597.347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (5597.9976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (5597.6763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (5596.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (5594.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (5593.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (5592.875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (5592.097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (5591.4985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (5592.1094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (5593.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (5594.4443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (5594.16)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (5593.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (5593.9736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (5594.9917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (5596.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (5598.932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (5601.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (5602.8086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (5602.8814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (5600.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (5598.154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (5597.433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (5597.7647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (5599.5815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (5605.288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (5604.2944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (5597.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (5597.401)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (5598.722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (5598.6777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (5599.1807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (5602.7993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (5581.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (5599.7305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (5595.862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (5595.275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (5594.8535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (5594.537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (5594.3306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (5594.0083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (5593.618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (5593.3975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (5593.883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (5594.9326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (5595.606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (5595.651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (5596.778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (5584.077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (5583.2007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (5600.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (5595.7075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (5594.305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (5594.8174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (5596.397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (5597.832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (5597.628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (5594.4834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (5606.397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (5623.133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (5592.3457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (5594.9746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (5595.0903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (5595.38)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (5595.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (5594.1787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (5593.388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (5594.2134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (5595.686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (5595.6484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (5594.4946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (5593.9507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (5595.1587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (5597.9463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (5598.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (5597.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (5597.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (5597.4365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (5596.3916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (5594.9653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (5593.7207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (5593.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (5593.9346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (5594.2515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (5593.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (5592.5913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (5593.7417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (5601.396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (5605.1113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (5603.4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (5597.929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (5595.068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (5594.1157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (5594.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (5595.246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (5591.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (5589.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (5591.3726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (5595.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (5596.7817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (5595.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (5594.5024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (5593.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (5594.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (5594.517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (5594.2114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (5594.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (5595.869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (5595.7744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (5594.7637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (5594.5703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (5595.434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (5596.2647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (5596.598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (5596.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (5595.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (5594.385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (5593.5107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (5593.354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (5593.413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (5593.476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (5593.9126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (5594.7617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (5595.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (5594.5654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (5593.1177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (5592.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (5593.7363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (5595.3433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (5596.459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (5596.824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (5596.5064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (5595.977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (5595.608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (5595.3613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (5595.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (5594.813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (5594.5894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (5594.563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (5594.8623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (5595.349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (5595.606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (5595.2398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (5594.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (5593.886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (5594.091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (5594.45)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (5594.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (5594.068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (5593.417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (5593.0464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (5593.5923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (5594.8325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (5596.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (5597.3945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (5597.833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (5597.05)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (5595.6426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (5594.413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (5593.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (5592.204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (5591.6104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (5590.7476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (5589.7524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (5590.442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (5590.958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (5591.1655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (5591.637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (5592.6343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (5593.7236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (5594.023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (5594.0283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.796916)) (quote (5594.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.809411)) (quote (5594.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (3316.0533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (3316.5298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (3287.162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (3288.0633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (3276.0489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (3277.9202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (3283.3555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (3283.2957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (3281.0772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (3279.2366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (3277.459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (3277.8636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (3276.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (3254.628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (3260.1802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (3264.1905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (3266.2356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (3265.9124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (3263.0926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (3260.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (3260.606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (3261.5447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (3262.9815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (3263.9822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (3263.9612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (3263.049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (3261.7923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (3260.8357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (3260.463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (3260.8113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (3261.4656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (3262.2498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (3263.5276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (3265.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (3266.2683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (3266.3684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (3265.6638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (3264.5298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (3263.491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (3262.859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (3262.967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (3263.6826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (3263.9807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (3263.4187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (3262.7798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (3262.7952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (3263.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (3263.7962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (3263.903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (3263.5479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (3263.061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (3262.7359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (3262.634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (3262.6053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (3262.4573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (3262.282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (3262.3282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (3262.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (3262.4766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (3262.3765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (3262.5086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (3262.8462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (3263.0398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (3263.0642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (3263.1458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (3263.1826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (3262.859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (3262.1426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (3261.2884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (3260.8042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (3261.2556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (3262.5232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (3263.9837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (3265.5166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (3267.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (3267.7263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (3266.902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (3265.257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (3264.1533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (3264.093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (3264.3938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (3263.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (3262.7698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (3261.8933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (3262.029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (3263.1814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (3264.8792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (3266.0664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (3266.5945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (3266.5694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (3265.5179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (3263.6944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (3262.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (3262.7478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (3262.6643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (3262.333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (3262.3809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (3263.268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (3264.1978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (3264.602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (3264.5562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (3264.2544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (3263.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (3263.3938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (3263.2464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (3262.9793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (3262.4478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (3262.2979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (3263.242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (3264.951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (3267.7593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (3273.047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (3272.7976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (3267.1082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (3265.6233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (3264.6858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (3263.0989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (3262.4243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (3262.6067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (3262.524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (3262.0352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (3262.025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (3262.4942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (3262.7403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (3262.7364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (3262.509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (3261.8516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (3261.3289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (3262.2158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (3263.3753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (3263.4854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (3262.901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (3262.7903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (3263.8155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (3265.6895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (3266.2097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (3264.611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (3263.2715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (3263.21)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (3263.2752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (3263.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (3262.7754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (3262.9632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (3263.5252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (3263.8728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (3263.6848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (3263.1714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (3262.8094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (3262.8189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (3263.1175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (3263.3306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (3263.1162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (3263.0613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (3263.644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (3263.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (3262.8667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (3262.4424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (3263.0286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (3263.6753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (3263.49)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (3262.5476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (3261.9302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (3262.5823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (3263.824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (3264.3802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (3263.886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (3263.2525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (3263.5352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (3264.194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (3264.2962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (3263.8819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (3263.722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (3264.1277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (3264.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (3264.8228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (3264.1653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (3263.1602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (3263.0457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (3263.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (3264.114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (3263.2979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (3262.8098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (3263.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (3263.7425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (3263.9192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (3263.5816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (3263.2044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (3263.1724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (3263.5345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (3264.359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (3265.043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (3264.7576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (3263.5965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (3262.7644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (3262.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (3262.666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (3262.791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (3262.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (3262.054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (3261.5633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (3261.4859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (3261.8614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (3262.6375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (3263.4534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (3263.878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (3263.8035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (3263.4075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (3263.114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (3263.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (3264.467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (3265.2342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (3265.2307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (3264.7237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (3264.0713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (3263.3108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (3257.6595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (3273.5418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (3272.1175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (3263.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (3263.0059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (3263.1939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (3263.4722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (3263.4029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (3263.5327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (3264.3137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (3264.8677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (3264.324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (3263.0567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (3254.6187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (3273.4253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (3271.7888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (3260.0117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (3261.6717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (3262.4466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (3263.0808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (3263.1612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (3262.9163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (3263.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (3263.3416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (3263.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (3262.8787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (3263.6258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (3264.6826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (3264.8648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (3264.2183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (3263.6026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (3263.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (3263.5166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (3263.5476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (3263.4807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (3263.2586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (3262.7937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (3261.9329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (3259.883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (3255.0437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (3274.5889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (3237.6995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (3260.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (3260.5528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (3262.0386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (3263.1175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (3262.2827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (3260.0625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (3260.3355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (3261.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (3260.65)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (3258.2564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (3255.7925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (3254.759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (3255.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (3229.7896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (3227.3487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (3225.1502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (3224.6573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (3225.3304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (3254.5833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (3260.0872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (3259.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (3259.1568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (3262.4407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (3265.1426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (3260.837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (3259.1077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (3261.2332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (3264.8074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.796916)) (quote (3264.8074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.161066)) (quote (1364.6395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17356)) (quote (1382.1734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198549)) (quote (1350.9502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (1371.7467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.223537)) (quote (1371.7467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.211043)) (quote (6003.52)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (6019.7173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26102)) (quote (6019.037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (6021.0137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (5996.166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (5994.415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (5990.5454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (5987.168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (6024.833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (5999.544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (6018.6084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (6014.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (6012.58)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.423447)) (quote (6010.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (6008.634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (6005.898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093)) (quote (6003.449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424)) (quote (5988.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (5992.2007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (5998.7813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (5997.39)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (6034.8516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (6012.984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (6006.9595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (5992.028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (5979.662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (5975.53)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (5970.0947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (5962.6357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (5960.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (5961.4478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (5966.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (5991.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (6002.681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (6006.189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (6009.9214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (6016.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (6027.7456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (6028.9214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (5990.8296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (5964.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (5992.492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (5988.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (5985.026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (5983.4536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (5985.136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (5991.547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (6022.6406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (6027.8677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (6010.9053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (5988.414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (5995.2627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (6000.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (6001.2705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (5999.589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (5999.553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (6001.6367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (6028.945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (6004.2114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (6004.616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (6007.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (6011.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (6015.479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (6024.005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (6029.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (5992.2114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (6006.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (6002.8936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (5999.971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (5998.099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (5993.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (5991.4795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (5991.3164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (5991.6753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (5993.6367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (5995.224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (5992.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (5992.769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (6020.324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (5997.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (5998.0093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (5996.7407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (5994.18)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (5987.0137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (6015.4204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (6013.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (6015.312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (6018.837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (6023.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (6024.825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (6018.4697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (5983.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (5986.5894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (5987.9644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (5986.282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (5983.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (5979.4644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (5976.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (5975.7983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (6006.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (6029.981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (6027.685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (6050.7446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (6057.135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (6059.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (6059.999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (6061.503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (6061.919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (6060.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (6059.637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (6059.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (6058.4346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (6057.4346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (6057.175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (6058.636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (6060.139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (6060.6245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (6059.9956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (6058.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (6058.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (6059.423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (6061.8203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (6062.546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (6062.318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (6063.176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (6065.9336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (6065.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (6043.604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (6060.711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (6061.8555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (6062.71)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (6062.7813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (6062.4165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (6062.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (6062.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (6064.1616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (6063.9883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (6061.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (6060.4946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (6060.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (6061.5474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (6062.2974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (6062.2476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (6061.7124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (6061.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (6061.0156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (6060.3506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (6060.0024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (6060.3857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (6061.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (6061.5444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (6061.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (6059.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (6059.5195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (6060.4194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (6062.0825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (6062.9683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (6062.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (6061.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (6061.8076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (6062.72)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (6062.8223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (6062.5073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (6063.067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (6064.4766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (6065.043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (6063.9824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (6062.45)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (6061.6187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (6061.637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (6061.396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (6060.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (6060.1406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (6061.139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (6062.026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (6061.5776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (6060.2896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (6059.47)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (6060.112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (6061.4985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (6062.626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (6063.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (6064.299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (6063.9443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (6061.8706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (6059.7)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (6058.6626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (6058.751)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (6058.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (6058.6353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (6058.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (6057.8106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (6057.634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (6057.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (6058.4336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (6061.6475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (6063.9273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (6063.4326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (6060.7534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (6060.17)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (6062.5195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (6065.263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (6066.1074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (6064.7905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (6063.021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (6061.831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (6060.9033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (6071.115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (6070.6284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (6057.4756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (6059.476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (6059.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (6059.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (6060.1787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (6060.9824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (6062.3623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (6036.9424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (6036.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (6035.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (6036.833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (6040.9204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (6047.759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (6053.8374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (6058.4946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (6060.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (6062.366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (6063.275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (6063.008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (6062.4844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (6062.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (6061.01)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (6059.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (6059.246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (6060.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (6062.272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (6063.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (6062.99)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (6062.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (6061.7754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (6061.572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (6061.5166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (6061.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (6061.425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (6061.162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (6060.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (6053.7803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (6072.753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (6053.9146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (6059.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (6060.0083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (6060.4707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (6060.7075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (6059.532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (6058.944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (6059.302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (6059.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (6058.491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (6057.7847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (6056.418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (6053.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (6052.686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (6053.058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (6055.5547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (6056.9126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (6055.7105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (6052.8193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (6048.4844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (6043.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (6043.612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (6043.612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.236032)) (quote (2359.3926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.248526)) (quote (2358.4063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.273515)) (quote (2366.7908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.310998)) (quote (2390.617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (2363.5994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (2356.25)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (2356.25)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.286009)) (quote (1892.5353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (1872.0188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (1893.3237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (1894.5342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.373469)) (quote (1894.2134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (1913.7548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (1913.7548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.298503)) (quote (6985.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (7002.826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (7001.384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (6998.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.360975)) (quote (6998.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.323492)) (quote (7420.9443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.335986)) (quote (7438.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.348481)) (quote (7438.135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.385964)) (quote (7434.066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.398458)) (quote (7434.2124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.410952)) (quote (7424.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.435941)) (quote (7445.548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.448435)) (quote (7447.6963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.485918)) (quote (7457.465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.498413)) (quote (7453.5693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.510907)) (quote (7451.7813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.523401)) (quote (7451.992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.535896)) (quote (7452.239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54839)) (quote (7451.771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.560884)) (quote (7450.9434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.573379)) (quote (7447.9077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.585873)) (quote (7445.4824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.598367)) (quote (7474.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862)) (quote (7455.663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.623356)) (quote (7458.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (7460.7305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.648345)) (quote (7464.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.660839)) (quote (7465.0327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (7459.7676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (7455.0474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.698322)) (quote (7457.765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (7464.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.723311)) (quote (7468.7275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.735805)) (quote (7468.0024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (7463.8804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.760794)) (quote (7459.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.773288)) (quote (7457.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (7456.9815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (7457.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (7456.5737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (7455.4287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (7453.835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (7451.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (7450.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (7452.087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (7453.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.898231)) (quote (7454.5693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.910726)) (quote (7456.377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92322)) (quote (7458.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.935714)) (quote (7459.163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.948209)) (quote (7458.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.960703)) (quote (7457.821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.973197)) (quote (7455.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.985692)) (quote (7454.0713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.998186)) (quote (7453.9995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01068)) (quote (7455.05)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.023175)) (quote (7454.9214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.035669)) (quote (7451.3486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.048163)) (quote (7449.116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.060658)) (quote (7449.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.073152)) (quote (7450.1924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.085646)) (quote (7448.047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.098141)) (quote (7449.3355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.110635)) (quote (7469.994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.123129)) (quote (7465.0474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.135623)) (quote (7462.5933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.148118)) (quote (7460.299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.160612)) (quote (7460.5654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (7463.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (7465.23)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (7464.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (7462.0234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (7459.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (7459.4966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (7461.194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (7464.3315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (7465.61)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (7464.689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (7462.4536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (7458.8384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (7449.521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (7442.9536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (7441.0874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (7443.4946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (7446.7573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (7450.8955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (7461.1094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (7459.1187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (7458.3916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (7458.4263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (7460.356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (7466.9053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (7471.6445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (7474.549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (7450.1157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (7451.5933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (7455.017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (7460.6406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (7462.7036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (7463.2656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (7461.872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (7459.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (7458.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (7459.807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (7461.957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (7463.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (7463.9785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (7463.4316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (7461.385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (7458.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (7457.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (7456.5806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (7455.797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (7455.7197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (7456.8774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (7458.483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (7458.972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (7458.4614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (7457.153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (7457.2466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (7459.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (7461.6924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (7462.274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (7462.251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (7462.343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (7462.744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (7463.0327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (7462.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (7462.2857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (7465.4326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (7448.8394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (7450.5327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (7460.417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (7459.1226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (7459.5557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (7460.7456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (7461.558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (7461.2495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (7459.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (7458.4707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (7456.658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (7467.53)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (7467.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (7460.808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (7459.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (7458.6567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (7456.938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (7456.829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (7458.0283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (7460.1)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (7461.4365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (7462.0986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (7466.849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (7445.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (7450.8613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (7463.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (7462.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (7460.9004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (7459.183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (7459.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (7460.7744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (7461.8525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (7461.558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (7460.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (7460.3574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (7457.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (7452.1304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (7450.5234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (7458.0986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (7460.3066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (7458.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (7456.2764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (7454.821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (7453.9356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (7459.094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (7440.7144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (7456.7505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (7453.0317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (7450.17)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (7447.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (7446.281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (7447.0557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (7448.3887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (7453.8413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (7457.8276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (7457.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (7454.902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (7454.3994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (7454.651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (7455.1357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (7455.065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (7453.1816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (7447.359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (7445.6597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (7450.3975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (7459.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (7460.977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (7460.194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (7458.6465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (7458.0234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (7459.2725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (7462.5894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (7469.7236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (7473.3633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (7471.1177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (7465.497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (7461.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (7459.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (7457.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (7457.5493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (7458.0957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (7458.571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (7459.3013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (7460.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (7460.7495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (7460.0884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (7459.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (7460.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (7461.635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (7462.161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (7461.904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (7460.556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (7458.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (7455.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (7456.5415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (7481.0044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (7458.765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (7458.988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (7460.3364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (7460.61)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (7459.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (7457.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (7456.573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (7458.0493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (7460.6406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (7462.7603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (7463.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (7462.8413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (7461.996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (7461.744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (7461.9595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (7462.083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (7461.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (7461.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (7461.656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (7462.5967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (7462.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (7462.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (7461.369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (7460.5044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (7460.1597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (7459.7827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (7459.1924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (7458.8574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (7458.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (7457.0166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (7455.8945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (7456.9688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (7459.6865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (7462.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (7463.6577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (7464.1553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (7463.379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (7462.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (7462.6484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (7470.9736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (7487.3726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (7490.996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (7453.3477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (7453.984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (7456.769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (7456.66)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (7454.5034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (7453.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (7453.4233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (7453.4233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63585)) (quote (2768.7552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.673333)) (quote (2771.6748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.685828)) (quote (2770.6326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.710816)) (quote (2744.0335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299)) (quote (2719.8543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.785782)) (quote (2738.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.798277)) (quote (2765.5835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.810771)) (quote (2761.3699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.823265)) (quote (2762.729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83576)) (quote (2766.418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.848254)) (quote (2768.0093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.860748)) (quote (2767.5362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.873243)) (quote (2741.886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.885737)) (quote (2741.886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.173107)) (quote (7020.553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.185601)) (quote (7000.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.198095)) (quote (6983.4517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.210589)) (quote (6994.9233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.223084)) (quote (6994.2666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578)) (quote (6994.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.248073)) (quote (6993.6607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.260567)) (quote (6993.309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.273061)) (quote (6994.772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.285555)) (quote (6996.6694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29805)) (quote (6998.0967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544)) (quote (6999.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.323039)) (quote (7000.725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533)) (quote (6999.3975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.348027)) (quote (6995.973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.360521)) (quote (6994.072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.373016)) (quote (6993.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38551)) (quote (6994.197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.398005)) (quote (6994.1753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.410499)) (quote (6993.3276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.422993)) (quote (6992.279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.435488)) (quote (6992.2173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.447982)) (quote (6993.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.460476)) (quote (6995.197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47297)) (quote (6996.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (6996.5483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (6995.369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (6993.6397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (6992.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (6993.4414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (6994.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (6997.2524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (7002.7647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (7005.9565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (7001.277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (6995.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (6995.993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (6997.1074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (6996.7617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (6995.269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (6992.7637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (6991.002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (6990.488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (6989.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (6988.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (6989.3525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (6991.4976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (6993.177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (6993.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (6992.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (6990.8384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (6990.303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (6992.171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (6994.9614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (6995.9844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (6995.3955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (6994.822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (6996.731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (6997.33)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (6978.1914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (6993.2085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (6993.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (6994.3877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (6994.871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (6994.7637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (6994.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (6995.0337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (6996.0313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (6995.702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (6993.39)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (6991.115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (6990.902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (6992.435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (6993.7666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (6993.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (6993.2676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (6992.47)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (6992.1953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (6992.2925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (6992.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (6992.09)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (6992.6323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (6993.404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (6993.2065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (6992.0513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (6991.378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (6992.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (6994.702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (6996.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (6995.3633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (6992.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (6992.2393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (6994.3237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (6995.583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (6995.109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (6995.066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (6996.483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (6997.395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (6996.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (6994.603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (6993.518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (6993.548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (6993.597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (6992.9985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (6992.797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (6993.8643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (6994.7647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (6994.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (6993.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (6992.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (6992.654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (6994.1055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (6995.598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (6996.552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (6997.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (6996.6753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (6994.2783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (6991.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (6991.0454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (6991.369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (6992.1587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (6992.616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (6991.825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (6990.094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (6989.0195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (6989.524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (6992.6636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (6996.1113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (6996.126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (6993.869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (6991.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (6992.464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (6994.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (6997.729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (6999.1333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (6997.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (6996.1733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (6995.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (6997.4116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (7003.6113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (7003.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (6996.9126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (6992.373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (6992.5283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (6993.1675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (6993.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (6993.8955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (6994.6123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (6997.9273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (7001.4526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (6998.866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (6998.8174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (7005.299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (7005.544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (6998.801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (6992.6294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (6992.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (6994.2627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (6995.3545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (6995.6777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (6995.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (6995.524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (6994.4585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (6991.5767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (6989.982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (6991.768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (6995.168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (6996.546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (6996.362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (6995.4663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (6994.876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (6995.0347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (6995.561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (6995.9844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (6996.0967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (6995.7236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (6994.2656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (6988.5454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (6985.294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (6988.2515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (6992.0835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (6992.3716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (6990.9985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (6991.0586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (6992.9126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (6976.068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (6993.12)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (6991.3496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (6990.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (6989.806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (6986.1636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (6983.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (6985.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (6997.904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (7000.049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (7003.4194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (6980.932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (6971.5083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (6946.796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (6946.796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.485465)) (quote (6548.3023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.497959)) (quote (6544.9824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.510454)) (quote (6529.0503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (6526.9614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.535442)) (quote (6527.888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (6529.2515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (6529.8345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (6529.0225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (6527.3525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (6526.2676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (6526.7134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (6528.613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (6530.475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (6531.199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (6530.907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (6529.494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (6527.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (6525.8545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (6524.6563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (6523.6514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (6523.388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (6524.2046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (6525.3945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (6525.9063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (6525.7095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (6524.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (6525.3613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (6527.452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (6529.28)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (6529.5376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (6529.397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (6529.4478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (6529.689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (6529.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (6529.23)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (6528.415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (6527.642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (6522.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (6538.8594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (6536.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (6523.9175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (6526.1387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (6527.793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (6528.8643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (6529.2915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (6532.1807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (6512.155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (6517.2124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (6529.7124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (6527.8267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (6526.473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (6525.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (6526.3267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (6526.0967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (6525.206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (6524.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (6526.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (6527.8467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (6527.7656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (6526.095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (6519.286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (6515.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (6519.169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (6527.581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (6527.108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (6526.8955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (6527.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (6528.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (6529.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (6530.1294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (6530.429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (6536.1157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (6516.3)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (6518.411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (6527.488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (6527.4644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (6527.76)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (6527.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (6526.048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (6525.182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (6525.9194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (6527.456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (6527.837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (6526.761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (6525.013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (6524.13)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (6526.5215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (6529.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (6531.7803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (6532.8755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (6531.0835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (6528.3276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (6525.5225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (6524.387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (6524.7466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (6526.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (6527.333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (6526.5913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (6524.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (6518.7324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (6515.3486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (6539.126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (6535.438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (6533.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (6532.1856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (6529.467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (6527.2114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (6526.854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (6529.8013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (6541.7847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (6541.4785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (6534.5615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (6530.044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (6528.9297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (6527.123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (6525.4273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (6525.2827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (6526.7773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (6528.409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (6529.082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (6529.0283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (6528.3)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (6527.533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (6527.8247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (6529.1953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (6530.3994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (6530.6294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (6529.8228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (6527.8413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (6525.352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (6523.1514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (6523.6685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (6526.0874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (6527.7886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (6527.5874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (6527.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (6527.034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (6525.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (6523.9307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (6524.084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (6526.3037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (6529.4453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (6531.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (6531.483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (6529.5054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (6526.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (6523.792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (6523.3223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (6524.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (6527.1997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (6527.4775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (6526.6084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (6526.02)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (6525.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (6523.4976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (6520.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (6521.8984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (6526.243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (6527.558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (6527.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (6528.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (6528.5107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (6526.562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (6524.0703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (6523.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (6526.354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (6529.0606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (6530.342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (6530.741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (6530.2847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (6529.451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (6529.984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (6535.7124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (6508.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (6508.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.522948)) (quote (4216.76)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.547936)) (quote (4208.4834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.560431)) (quote (4212.2383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.572925)) (quote (4209.3276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58542)) (quote (4203.611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914)) (quote (4201.6807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408)) (quote (4199.837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.622902)) (quote (4194.4966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.635397)) (quote (4192.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (4194.6235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (4196.6235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (4196.939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (4196.737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (4195.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (4194.0986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (4192.8276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (4193.2173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (4194.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (4195.5435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (4196.801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (4196.8115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (4196.104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (4195.7485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (4195.6304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (4194.8296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (4194.4707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (4196.7036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (4200.175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (4201.2744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (4218.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (4245.834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (4226.702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (4226.702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.647891)) (quote (1401.5571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.660386)) (quote (1400.2196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67288)) (quote (1399.1051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.685374)) (quote (1398.2589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.697868)) (quote (1397.9254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.710363)) (quote (1397.8079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.722857)) (quote (1397.6997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.735352)) (quote (1397.871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.747846)) (quote (1398.5134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76034)) (quote (1399.269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.772834)) (quote (1399.5385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.785329)) (quote (1399.1134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.797823)) (quote (1398.4573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.810318)) (quote (1397.9016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.822812)) (quote (1397.8281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.835306)) (quote (1398.103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8478)) (quote (1398.0919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.860295)) (quote (1397.6508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.872789)) (quote (1396.8582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.885283)) (quote (1396.2742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (1398.0311)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (1400.6312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (1401.5139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (1400.0379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (1399.1972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (1398.9777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (1398.8289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (1398.654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (1398.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (1398.7704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (1398.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (1398.8085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (1398.5565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (1398.331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (1398.2921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (1398.4697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (1398.6055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (1398.4033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (1398.1719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (1398.4857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (1398.9244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (1398.8665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (1398.3594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (1397.9758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (1397.9639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (1398.2146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (1398.4025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (1398.4429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (1398.5996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (1398.9027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (1399.048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (1398.8534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (1398.5342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (1398.4988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (1398.7941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (1399.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (1399.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (1398.9328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (1399.0365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (1399.2155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (1399.1987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (1398.9276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (1398.4356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (1397.8667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (1397.8143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (1398.4421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (1399.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (1399.3114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (1399.0193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1398.8602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (1399.0336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (1399.1873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (1399.0158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (1398.7199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (1398.5436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (1398.6353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (1398.861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (1398.8915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (1398.5067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (1398.1973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (1398.3901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (1398.6865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (1398.6758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (1398.5678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (1398.4028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (1398.0739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (1397.7097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (1397.6182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (1397.8988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (1398.3395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (1398.6588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (1398.7601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (1398.7064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (1398.6539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (1398.8317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (1399.321)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (1399.7478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (1399.7593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (1399.5731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (1399.6859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (1401.1318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (1406.2666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (1407.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (1404.5762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (1399.7815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (1398.9804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (1398.9132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (1399.0014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (1398.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (1398.5806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (1399.2241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (1400.8059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (1400.9484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (1400.2091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (1403.9867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (1408.3497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (1406.239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (1400.2326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (1398.643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (1398.4635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (1398.4284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (1398.4075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (1398.4319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (1398.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (1398.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (1398.214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (1398.2771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (1398.8973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (1399.6912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (1399.999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (1399.7156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (1399.1117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (1398.6536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (1398.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (1398.5109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (1398.5502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (1398.5632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (1398.6583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (1399.2437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (1405.1936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (1385.833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (1390.1776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (1399.9592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (1399.2432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (1399.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (1398.8803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (1398.0828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (1397.5897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (1397.5734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (1398.0868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (1398.3753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (1398.3258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (1396.4581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (1391.7976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (1390.9834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (1396.2468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (1400.8242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (1400.388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (1399.233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (1399.3799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (1401.5431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (1403.5256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (1403.9594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (1404.2428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (1405.3582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (1404.7987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (1400.9194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (1398.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (1397.6206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (1397.6647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (1397.3601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (1397.0347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.796916)) (quote (1397.1879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.809411)) (quote (1397.1607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.821905)) (quote (1396.156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.834399)) (quote (1394.6869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.846893)) (quote (1393.908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.859388)) (quote (1395.7451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.871882)) (quote (1398.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.884377)) (quote (1400.6865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.896871)) (quote (1404.9179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.909365)) (quote (1406.49)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.921859)) (quote (1404.11)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.934354)) (quote (1396.9738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.946848)) (quote (1397.5781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.959342)) (quote (1399.1347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.971837)) (quote (1399.1347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.897778)) (quote (4197.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272)) (quote (4196.0474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766)) (quote (4196.731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.935261)) (quote (4197.261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.947755)) (quote (4197.0527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.960249)) (quote (4196.853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.972744)) (quote (4196.544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.985238)) (quote (4196.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.997733)) (quote (4196.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.010227)) (quote (4196.4316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.022721)) (quote (4196.5864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.035215)) (quote (4196.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04771)) (quote (4195.5596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.060204)) (quote (4195.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.072699)) (quote (4195.196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.085193)) (quote (4195.619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.097687)) (quote (4195.9463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.110181)) (quote (4195.9053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.122676)) (quote (4195.8027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13517)) (quote (4195.898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.147665)) (quote (4195.945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.160159)) (quote (4195.7417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.172653)) (quote (4195.4165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.185147)) (quote (4195.2647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (4195.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (4195.443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (4195.245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (4195.283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.247619)) (quote (4196.1065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (4197.2896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (4197.7466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (4196.9946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (4195.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (4195.7656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (4196.639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (4197.3486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (4197.3325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (4197.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (4197.851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (4198.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (4198.4565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (4197.45)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (4196.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (4195.946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (4196.0034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (4196.0137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (4196.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (4196.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (4197.0713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (4196.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (4196.2725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (4195.5444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (4195.3774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (4196.0513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (4197.0806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (4197.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (4198.6143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (4198.545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (4197.2393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (4195.473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (4194.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (4194.478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (4195.032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (4195.4087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (4194.99)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (4193.9966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (4193.466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (4193.9497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (4195.285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (4196.805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (4197.6357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (4197.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (4196.56)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (4195.793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (4196.114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (4197.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (4199.4907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (4199.8325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (4198.8276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (4197.2603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (4195.3545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (4186.5884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (4206.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (4201.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (4193.7744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (4194.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (4194.8804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (4195.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (4195.6563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (4198.8325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (4202.0073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (4168.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (4192.648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (4223.2783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (4225.062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (4190.8945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (4192.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (4194.5156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (4196.367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (4198.456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (4200.4614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (4199.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (4196.109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (4193.2983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (4194.084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (4197.469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (4200.6777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (4201.6084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (4199.459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (4195.8984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (4195.0464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (4196.367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (4199.0947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (4200.3833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (4200.5674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (4200.547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (4201.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (4203.3267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (4207.918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (4207.7095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (4201.213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (4197.503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (4198.9707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (4203.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (4210.206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (4211.819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (4210.326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (4205.639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (4198.2534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (4193.78)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (4191.972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (4187.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (4185.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (4187.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (4192.059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (4203.1816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (4205.2666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (4184.6914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (4191.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (4190.875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (4191.3325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (4193.9497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (4195.4053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (4194.3867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (4193.2363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (4193.37)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (4193.5913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (4193.194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (4189.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (4189.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.197642)) (quote (4661.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.210136)) (quote (4669.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.222631)) (quote (4668.7803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.235125)) (quote (4667.09)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.260113)) (quote (4664.1157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.272608)) (quote (4663.7437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.285102)) (quote (4663.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.297596)) (quote (4662.082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.310091)) (quote (4662.6016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.322585)) (quote (4693.47)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.335079)) (quote (4676.757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.347574)) (quote (4676.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.360068)) (quote (4671.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.372562)) (quote (4667.358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.385056)) (quote (4665.7705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.397551)) (quote (4664.509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.410045)) (quote (4663.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42254)) (quote (4662.5425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.435034)) (quote (4662.351)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.447528)) (quote (4661.8565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.460022)) (quote (4660.8213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.472517)) (quote (4660.8667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.485011)) (quote (4662.3086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.497506)) (quote (4663.087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (4661.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.522494)) (quote (4660.574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.534989)) (quote (4660.3145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.547483)) (quote (4661.6724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.559978)) (quote (4663.446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.572472)) (quote (4664.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.584966)) (quote (4664.443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59746)) (quote (4664.7647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955)) (quote (4663.5796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.622449)) (quote (4661.6484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943)) (quote (4659.7295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.647438)) (quote (4659.01)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.659932)) (quote (4659.7515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.672426)) (quote (4661.265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.684921)) (quote (4661.6304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.697415)) (quote (4660.343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.709909)) (quote (4658.5205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.722404)) (quote (4656.4526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.734898)) (quote (4652.4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.747392)) (quote (4651.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.759887)) (quote (4652.8814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.772381)) (quote (4672.7163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.784875)) (quote (4673.8555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.797369)) (quote (4675.11)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.809864)) (quote (4679.3247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.822358)) (quote (4685.281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.834853)) (quote (4683.8857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.847347)) (quote (4668.3003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.859841)) (quote (4666.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.872335)) (quote (4664.4297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88483)) (quote (4663.4785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.897324)) (quote (4662.449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.909819)) (quote (4661.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.922313)) (quote (4661.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.934807)) (quote (4662.417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.947301)) (quote (4661.8066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.959796)) (quote (4661.27)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97229)) (quote (4662.734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (4664.8887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (4665.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.009773)) (quote (4664.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.022267)) (quote (4662.7564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (4661.4517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (4660.626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (4660.2773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.072245)) (quote (4659.443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (4656.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.097234)) (quote (4653.4507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.109728)) (quote (4652.8735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (4661.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (4639.096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.147211)) (quote (4664.2554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (4663.2256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1722)) (quote (4663.4473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (4663.297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (4661.372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (4658.7876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (4658.049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (4659.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.247166)) (quote (4662.5728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25966)) (quote (4663.9404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.272154)) (quote (4663.6607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.284648)) (quote (4662.6553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.297143)) (quote (4662.149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.309637)) (quote (4662.3613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.322132)) (quote (4662.8023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.334626)) (quote (4663.039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34712)) (quote (4662.8696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.359614)) (quote (4662.56)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.372109)) (quote (4662.6016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.384603)) (quote (4662.838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.397098)) (quote (4662.714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.409592)) (quote (4662.1553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.422086)) (quote (4661.5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43458)) (quote (4661.1226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.447075)) (quote (4661.155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.459569)) (quote (4661.2363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.472064)) (quote (4661.2393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.484558)) (quote (4661.312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.497052)) (quote (4661.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.509546)) (quote (4660.515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.522041)) (quote (4660.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.534535)) (quote (4661.6997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.547029)) (quote (4663.587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.559524)) (quote (4664.9155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.572018)) (quote (4665.4956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.584512)) (quote (4665.301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.597007)) (quote (4664.571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.609501)) (quote (4664.329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.621995)) (quote (4665.5093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63449)) (quote (4668.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.646984)) (quote (4670.2676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.659479)) (quote (4669.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.671973)) (quote (4665.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.684467)) (quote (4662.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.696961)) (quote (4661.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.709456)) (quote (4660.0454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72195)) (quote (4658.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.734445)) (quote (4658.076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.746939)) (quote (4658.3804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.759433)) (quote (4658.8867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.771927)) (quote (4658.8696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.784422)) (quote (4658.8486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.796916)) (quote (4659.0855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.809411)) (quote (4659.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.821905)) (quote (4658.2827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.834399)) (quote (4657.552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.846893)) (quote (4657.3765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.859388)) (quote (4657.468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.871882)) (quote (4657.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.884377)) (quote (4657.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.984785)) (quote (1364.7742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.997279)) (quote (1361.9414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.034762)) (quote (1336.5138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.047256)) (quote (1334.3323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.059751)) (quote (1333.4456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.084739)) (quote (1383.9689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.122222)) (quote (1312.847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.134717)) (quote (1316.2091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.159705)) (quote (1329.9957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.184694)) (quote (1324.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.197188)) (quote (1322.7949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.209682)) (quote (1322.4343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.222177)) (quote (1357.9334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.234671)) (quote (1357.9334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -8 -8) (om-make-point 1366 725))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 453 523) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 227 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 325 549) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 505 332) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 193 362) (om-make-point 397 120) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 373 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 119 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 0 1 nil 0) (6 0 1 0 nil 0) (0 0 2 0 nil 0) (1 0 4 1 nil 0) (5 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0))) 6.16 nil "" (om-make-point -8 -8) (om-make-point 1366 605)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 299 115) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 518 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Extraindo Parciais de SDIF" (om-load-patch-abs1 "Extraindo Parciais de SDIF" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 262 499) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 103 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 407 510) nil nil "&" (list (let ((box (om-load-seqbox "SEQUENCE 2" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 874 379) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 767 55) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur 3" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 61.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2018/06/09 11:54:26" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 861 86) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 970 94) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT 2" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 875 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 542 211) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 494 377) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 444 96) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 169 275) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur 2" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 45.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2018/06/09 11:54:26" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 108 257) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-SLOT" (quote get-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil))) (om-make-point 158 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 164 404) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 264 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 348 173) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 21 462) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 0.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2018/06/09 11:54:26" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 8 160) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 114 198) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 19 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAAR" (quote caar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 73 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 242 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 393 604) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 293 604) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 7) (5 1 0 1 nil 6) (19 0 1 0 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (1 0 4 2 nil 0) (7 1 5 0 nil 0) (5 0 6 0 nil 4) (7 2 6 1 nil 3) (7 0 6 2 nil 2) (4 0 6 3 nil 5) (19 0 7 0 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (10 0 11 0 nil 0) (13 0 11 1 nil 0) (11 0 12 0 nil 0) (7 0 12 1 nil 1) (6 0 12 2 nil 0) (19 0 13 0 nil 0) (17 0 14 0 nil 0) (15 0 17 0 nil 0) (16 0 17 1 nil 0) (18 0 17 2 nil 0) (20 0 18 0 nil 0) (20 0 19 0 nil 0) (0 1 21 0 nil 8) (12 0 22 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "elegante map car" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 189 301) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 352 443) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 340 473) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 312 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 222 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 355 218) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 29 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 250 402) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 292 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 454 506) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 203 523) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 1 1 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 4 1 nil 0) (8 0 5 0 nil 0) (3 0 6 0 nil 0) (1 0 9 0 nil 0) (6 0 10 0 nil 0))) 1 "elegante map car" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 248 404) (om-make-point 106 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 312 370) (om-make-point 28 28) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 372 372) (om-make-point 40 28) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETSDIFDATA" (quote getsdifdata) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number (int)" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type (string)" "FRAMETYPE" "") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MATTYPE" "") (om-load-inputfun (quote input-funbox) "field number (int or list)" "CNUM" 0) (om-load-inputfun (quote input-funbox) "min row" "RMIN" nil) (om-load-inputfun (quote input-funbox) "max row" "RMAX" nil) (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 58 238) (om-make-point 346 54) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 124 204) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 204) (om-make-point 55 28) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 222 150) (om-make-point 55 28) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (7 0 3 0 nil 0) (7 1 3 1 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (1 0 7 0 nil 0) (8 0 7 1 nil 0) (9 0 7 2 nil 0) (9 0 7 3 nil 0) (10 0 7 4 nil 0))) 6.16 nil "" (om-make-point -8 0) (om-make-point 1366 681)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1517/3 1016/9) nil (list (append (list nil (list (list 0.0D0 4618.82568359375D0 9.099011367652565D-5 0.0D0)) (list (list 0.0D0 4628.91455078125D0 2.3091088223736733D-4 0.01249433122575283D0)) (list (list 0.0D0 4598.3251953125D0 1.4297442976385355D-4 0.02498866245150566D0)) (list (list 0.0D0 4596.92333984375D0 1.4317914610728622D-4 0.03748299181461334D0)) (list (list 0.0D0 4591.474609375D0 1.4479132369160652D-4 0.04997732490301132D0)) (list (list 0.0D0 4580.8671875D0 2.3612788936588913D-4 0.062471654266119D0)) (list (list 0.0D0 4620.38037109375D0 1.6160198720172048D-4 0.07496598362922669D0)) (list (list 0.0D0 4646.56201171875D0 9.039929718710482D-4 0.08746031671762467D0)) (list (list 0.0D0 4668.67333984375D0 0.0037433572579175234D0 0.09995464980602265D0)) (list (list 0.0D0 4667.00341796875D0 0.004630045033991337D0 0.11244898289442063D0)) (list (list 0.0D0 4666.8818359375D0 0.0052413009107112885D0 0.124943308532238D0)) (list (list 0.0D0 4667.353515625D0 0.005460197571665049D0 0.137437641620636D0)) (list (list 0.0D0 4667.54638671875D0 0.005367243196815252D0 0.14993196725845337D0)) (list (list 0.0D0 4667.36572265625D0 0.005037367809563875D0 0.16242630779743195D0)) (list (list 0.0D0 4667.88818359375D0 0.004510972648859024D0 0.17492063343524933D0)) (list (list 0.0D0 4669.33056640625D0 0.004072241485118866D0 0.1874149590730667D0)) (list (list 0.0D0 4669.2392578125D0 0.004036738071590662D0 0.1999092996120453D0)) (list (list 0.0D0 4666.451171875D0 0.004409642890095711D0 0.21240362524986267D0)) (list (list 0.0D0 4662.93798828125D0 0.005031904671341181D0 0.22489796578884125D0)) (list (list 0.0D0 4661.62744140625D0 0.005301397293806076D0 0.23739229142665863D0)) (list (list 0.0D0 4661.31787109375D0 0.005248268134891987D0 0.249886617064476D0)) (list (list 0.0D0 4661.2939453125D0 0.005240155383944511D0 0.2623809576034546D0)) (list (list 0.0D0 4661.5654296875D0 0.005485053639858961D0 0.274875283241272D0)) (list (list 0.0D0 4662.7880859375D0 0.005924703553318977D0 0.28736960887908936D0)) (list (list 0.0D0 4664.68359375D0 0.006432272959500551D0 0.29986393451690674D0)) (list (list 0.0D0 4665.66943359375D0 0.00671107554808259D0 0.3123582899570465D0)) (list (list 0.0D0 4664.67138671875D0 0.0064630527049303055D0 0.3248526155948639D0)) (list (list 0.0D0 4662.95751953125D0 0.0060782404616475105D0 0.3373469412326813D0)) (list (list 0.0D0 4662.9013671875D0 0.0059538353234529495D0 0.34984126687049866D0)) (list (list 0.0D0 4664.54443359375D0 0.006312744226306677D0 0.36233559250831604D0)) (list (list 0.0D0 4666.13525390625D0 0.007062222342938185D0 0.3748299181461334D0)) (list (list 0.0D0 4666.630859375D0 0.007636450231075287D0 0.3873242437839508D0)) (list (list 0.0D0 4666.185546875D0 0.007634663488715887D0 0.3998185992240906D0)) (list (list 0.0D0 4665.18408203125D0 0.0069839125499129296D0 0.41231292486190796D0)) (list (list 0.0D0 4664.333984375D0 0.005832191091030836D0 0.42480725049972534D0)) (list (list 0.0D0 4664.70458984375D0 0.004354799631983042D0 0.4373015761375427D0)) (list (list 0.0D0 4668.1953125D0 0.0029098005034029484D0 0.4497959315776825D0)) (list (list 0.0D0 4672.0185546875D0 0.002161039039492607D0 0.4622902572154999D0)) (list (list 0.0D0 4671.8486328125D0 0.0020095384679734707D0 0.47478458285331726D0)) (list (list 0.0D0 4668.39111328125D0 0.0022892800625413657D0 0.48727890849113465D0)) (list (list 0.0D0 4665.47998046875D0 0.0026670685037970543D0 0.499773234128952D0)) (list (list 0.0D0 4664.6328125D0 0.0028128712438046933D0 0.5122675895690918D0)) (list (list 0.0D0 4665.13671875D0 0.0027925188187509775D0 0.5247619152069092D0)) (list (list 0.0D0 4668.6865234375D0 0.002708764746785164D0 0.5372562408447266D0)) (list (list 0.0D0 4671.3271484375D0 0.0029491917230188847D0 0.549750566482544D0)) (list (list 0.0D0 4668.88037109375D0 0.003262438578531146D0 0.5622448921203613D0)) (list (list 0.0D0 4662.20703125D0 0.004323470871895552D0 0.5747392177581787D0)) (list (list 0.0D0 4659.8662109375D0 0.005821325350552797D0 0.5872335433959961D0)) (list (list 0.0D0 4659.623046875D0 0.006848393939435482D0 0.5997278690338135D0)) (list (list 0.0D0 4659.89501953125D0 0.007431714795529842D0 0.6122221946716309D0)) (list (list 0.0D0 4660.50732421875D0 0.00770579744130373D0 0.624716579914093D0)) (list (list 0.0D0 4661.025390625D0 0.007872593589127064D0 0.6372109055519104D0)) (list (list 0.0D0 4661.09033203125D0 0.008028415031731129D0 0.6497052311897278D0)) (list (list 0.0D0 4661.24267578125D0 0.008184472098946572D0 0.6621995568275452D0)) (list (list 0.0D0 4661.9404296875D0 0.008384994231164456D0 0.6746938824653626D0)) (list (list 0.0D0 4662.5537109375D0 0.008626063354313374D0 0.6871882081031799D0)) (list (list 0.0D0 4662.63818359375D0 0.00871873926371336D0 0.6996825337409973D0)) (list (list 0.0D0 4662.666015625D0 0.008607553318142891D0 0.7121768593788147D0)) (list (list 0.0D0 4662.8154296875D0 0.0084607545286417D0 0.7246711850166321D0)) (list (list 0.0D0 4662.69091796875D0 0.008430716581642628D0 0.7371655106544495D0)) (list (list 0.0D0 4662.46630859375D0 0.008511796593666077D0 0.7496598362922669D0)) (list (list 0.0D0 4662.701171875D0 0.008645273745059967D0 0.762154221534729D0)) (list (list 0.0D0 4663.1845703125D0 0.008851918391883374D0 0.7746485471725464D0)) (list (list 0.0D0 4663.41845703125D0 0.009111744351685048D0 0.7871428728103638D0)) (list (list 0.0D0 4663.39599609375D0 0.009332762099802494D0 0.7996371984481812D0)) (list (list 0.0D0 4663.34228515625D0 0.00944563839584589D0 0.8121315240859985D0)) (list (list 0.0D0 4663.3427734375D0 0.009435616433620453D0 0.8246258497238159D0)) (list (list 0.0D0 4663.5712890625D0 0.009341212920844555D0 0.8371201753616333D0)) (list (list 0.0D0 4663.8974609375D0 0.009223014116287232D0 0.8496145009994507D0)) (list (list 0.0D0 4663.478515625D0 0.008991001173853875D0 0.8621088266372681D0)) (list (list 0.0D0 4661.72021484375D0 0.008518264628946782D0 0.8746031522750855D0)) (list (list 0.0D0 4659.3056640625D0 0.007870898582041264D0 0.8870974779129028D0)) (list (list 0.0D0 4657.26416015625D0 0.00713278166949749D0 0.899591863155365D0)) (list (list 0.0D0 4656.349609375D0 0.006506412290036678D0 0.9120861887931824D0)) (list (list 0.0D0 4657.47998046875D0 0.006124061997979879D0 0.9245805144309998D0)) (list (list 0.0D0 4660.07958984375D0 0.006268021650612354D0 0.9370748400688171D0)) (list (list 0.0D0 4662.2607421875D0 0.0069234175607562065D0 0.9495691657066345D0)) (list (list 0.0D0 4663.3388671875D0 0.007734700106084347D0 0.9620634913444519D0)) (list (list 0.0D0 4663.462890625D0 0.008460107259452343D0 0.9745578169822693D0)) (list (list 0.0D0 4662.7041015625D0 0.008943273685872555D0 0.9870521426200867D0)) (list (list 0.0D0 4661.9189453125D0 0.009257043711841107D0 0.999546468257904D0)) (list (list 0.0D0 4661.75439453125D0 0.00950341485440731D0 1.0120408535003662D0)) (list (list 0.0D0 4661.9208984375D0 0.009735291823744774D0 1.0245351791381836D0)) (list (list 0.0D0 4662.15771484375D0 0.009966019541025162D0 1.037029504776001D0)) (list (list 0.0D0 4662.654296875D0 0.010259444825351239D0 1.0495238304138184D0)) (list (list 0.0D0 4663.33056640625D0 0.010706130415201188D0 1.0620181560516358D0)) (list (list 0.0D0 4663.6416015625D0 0.011225789785385132D0 1.0745124816894532D0)) (list (list 0.0D0 4663.1904296875D0 0.011557400226593018D0 1.0870068073272705D0)) (list (list 0.0D0 4662.30908203125D0 0.011581221595406533D0 1.099501132965088D0)) (list (list 0.0D0 4661.8369140625D0 0.011370268650352955D0 1.1119954586029053D0)) (list (list 0.0D0 4661.99267578125D0 0.011145276017487049D0 1.1244897842407227D0)) (list (list 0.0D0 4662.22509765625D0 0.011091754771769047D0 1.13698410987854D0)) (list (list 0.0D0 4662.2646484375D0 0.01111022662371397D0 1.1494784355163575D0)) (list (list 0.0D0 4662.3203125D0 0.011003486812114716D0 1.1619727611541748D0)) (list (list 0.0D0 4662.36767578125D0 0.01070089265704155D0 1.1744670867919922D0)) (list (list 0.0D0 4662.21923828125D0 0.010305249132215977D0 1.1869614124298096D0)) (list (list 0.0D0 4661.89892578125D0 0.009932559914886952D0 1.199455738067627D0)) (list (list 0.0D0 4661.22412109375D0 0.009527976624667645D0 1.2119500637054444D0)) (list (list 0.0D0 4660.02978515625D0 0.009081770665943623D0 1.2244443893432618D0)) (list (list 0.0D0 4659.2412109375D0 0.00883056502789259D0 1.236938714981079D0)) (list (list 0.0D0 4659.6240234375D0 0.008958770893514157D0 1.249433159828186D0)) (list (list 0.0D0 4660.61474609375D0 0.009467910043895245D0 1.2619274854660035D0)) (list (list 0.0D0 4661.03955078125D0 0.010026752017438412D0 1.2744218111038208D0)) (list (list 0.0D0 4660.60546875D0 0.010331455618143082D0 1.2869161367416382D0)) (list (list 0.0D0 4659.85595703125D0 0.010403643362224102D0 1.2994104623794556D0)) (list (list 0.0D0 4659.6689453125D0 0.010350178927183152D0 1.311904788017273D0)) (list (list 0.0D0 4660.658203125D0 0.01040494441986084D0 1.3243991136550904D0)) (list (list 0.0D0 4662.37646484375D0 0.01096757035702467D0 1.3368934392929078D0)) (list (list 0.0D0 4663.7841796875D0 0.01199854351580143D0 1.349387764930725D0)) (list (list 0.0D0 4664.24267578125D0 0.01289892103523016D0 1.3618820905685425D0)) (list (list 0.0D0 4664.15185546875D0 0.013151928782463074D0 1.3743764162063599D0)) (list (list 0.0D0 4664.1455078125D0 0.01252407394349575D0 1.3868707418441773D0)) (list (list 0.0D0 4664.091796875D0 0.011050217784941197D0 1.3993650674819947D0)) (list (list 0.0D0 4663.1279296875D0 0.009247515350580216D0 1.411859393119812D0)) (list (list 0.0D0 4661.74072265625D0 0.00816093385219574D0 1.4243537187576294D0)) (list (list 0.0D0 4661.26708984375D0 0.008276740089058876D0 1.4368480443954468D0)) (list (list 0.0D0 4661.94677734375D0 0.00917875487357378D0 1.4493423700332642D0)) (list (list 0.0D0 4662.525390625D0 0.010264165699481964D0 1.4618366956710816D0)) (list (list 0.0D0 4662.3857421875D0 0.011230061762034893D0 1.474331021308899D0)) (list (list 0.0D0 4662.14306640625D0 0.012098314240574837D0 1.4868253469467163D0)) (list (list 0.0D0 4662.39013671875D0 0.012774597853422165D0 1.4993196725845337D0)) (list (list 0.0D0 4663.00146484375D0 0.013163143768906594D0 1.5118141174316407D0)) (list (list 0.0D0 4663.591796875D0 0.013282372616231442D0 1.524308443069458D0)) (list (list 0.0D0 4663.85498046875D0 0.013175064697861672D0 1.5368027687072754D0)) (list (list 0.0D0 4663.49560546875D0 0.012857927940785885D0 1.5492970943450928D0)) (list (list 0.0D0 4662.61669921875D0 0.012431601993739605D0 1.5617914199829102D0)) (list (list 0.0D0 4661.83251953125D0 0.011983589269220829D0 1.5742857456207276D0)) (list (list 0.0D0 4661.5126953125D0 0.011517113074660302D0 1.586780071258545D0)) (list (list 0.0D0 4661.41015625D0 0.011111417785286904D0 1.5992743968963623D0)) (list (list 0.0D0 4661.3115234375D0 0.010857731103897095D0 1.6117687225341797D0)) (list (list 0.0D0 4661.60302734375D0 0.010688086971640587D0 1.624263048171997D0)) (list (list 0.0D0 4662.6474609375D0 0.010457200929522515D0 1.6367573738098145D0)) (list (list 0.0D0 4663.7568359375D0 0.010209398344159127D0 1.6492516994476319D0)) (list (list 0.0D0 4664.013671875D0 0.00995588582009077D0 1.6617460250854493D0)) (list (list 0.0D0 4663.3154296875D0 0.009664900600910187D0 1.6742403507232666D0)) (list (list 0.0D0 4662.39013671875D0 0.009382450953125954D0 1.686734676361084D0)) (list (list 0.0D0 4661.94482421875D0 0.009198806248605252D0 1.6992290019989014D0)) (list (list 0.0D0 4661.77197265625D0 0.0092445258051157D0 1.7117233276367188D0)) (list (list 0.0D0 4661.3896484375D0 0.00949021428823471D0 1.7242176532745362D0)) (list (list 0.0D0 4660.85791015625D0 0.009859197773039341D0 1.7367119789123536D0)) (list (list 0.0D0 4660.8251953125D0 0.010365808382630349D0 1.749206304550171D0)) (list (list 0.0D0 4661.478515625D0 0.01100185327231884D0 1.7617006301879883D0)) (list (list 0.0D0 4662.0908203125D0 0.011598734185099602D0 1.7741949558258057D0)) (list (list 0.0D0 4662.16015625D0 0.011893142946064473D0 1.7866894006729126D0)) (list (list 0.0D0 4662.35009765625D0 0.011904728598892689D0 1.79918372631073D0)) (list (list 0.0D0 4662.951171875D0 0.011807105503976345D0 1.8116780519485474D0)) (list (list 0.0D0 4663.20703125D0 0.01160284224897623D0 1.8241723775863648D0)) (list (list 0.0D0 4662.724609375D0 0.011185071431100369D0 1.8366667032241822D0)) (list (list 0.0D0 4662.0224609375D0 0.010645310394465924D0 1.8491610288619996D0)) (list (list 0.0D0 4661.6796875D0 0.01010221429169178D0 1.861655354499817D0)) (list (list 0.0D0 4661.84130859375D0 0.009625093080103398D0 1.8741496801376343D0)) (list (list 0.0D0 4662.1240234375D0 0.009252424351871014D0 1.8866440057754517D0)) (list (list 0.0D0 4661.82080078125D0 0.00896445196121931D0 1.899138331413269D0)) (list (list 0.0D0 4660.78125D0 0.008744918741285801D0 1.9116326570510865D0)) (list (list 0.0D0 4659.8291015625D0 0.008646487258374691D0 1.9241269826889038D0)) (list (list 0.0D0 4659.9228515625D0 0.008714642375707627D0 1.9366213083267212D0)) (list (list 0.0D0 4660.91455078125D0 0.009072898887097836D0 1.9491156339645386D0)) (list (list 0.0D0 4661.9833984375D0 0.0096373176202178D0 1.961609959602356D0)) (list (list 0.0D0 4662.60595703125D0 0.010041276924312115D0 1.9741042852401734D0)) (list (list 0.0D0 4662.9853515625D0 0.010139677673578263D0 1.9865986108779908D0)) (list (list 0.0D0 4663.3076171875D0 0.010081859305500985D0 1.999092936515808D0)) (list (list 0.0D0 4663.4970703125D0 0.010044141672551632D0 2.011587381362915D0)) (list (list 0.0D0 4663.52490234375D0 0.0100780064240098D0 2.0240817070007324D0)) (list (list 0.0D0 4663.5361328125D0 0.010144900530576706D0 2.03657603263855D0)) (list (list 0.0D0 4663.5654296875D0 0.010155996307730675D0 2.049070358276367D0)) (list (list 0.0D0 4663.32421875D0 0.010040420107543469D0 2.0615646839141846D0)) (list (list 0.0D0 4662.7060546875D0 0.009863150306046009D0 2.074059009552002D0)) (list (list 0.0D0 4662.29052734375D0 0.009785651229321957D0 2.0865533351898194D0)) (list (list 0.0D0 4662.603515625D0 0.009872171096503735D0 2.0990476608276367D0)) (list (list 0.0D0 4663.1123046875D0 0.009990477003157139D0 2.111541986465454D0)) (list (list 0.0D0 4663.01416015625D0 0.009753975085914135D0 2.1240363121032715D0)) (list (list 0.0D0 4662.3740234375D0 0.008980867452919484D0 2.136530637741089D0)) (list (list 0.0D0 4662.021484375D0 0.00797407515347004D0 2.1490249633789063D0)) (list (list 0.0D0 4662.09228515625D0 0.0072251888923347D0 2.1615192890167237D0)) (list (list 0.0D0 4662.16552734375D0 0.006871778052300215D0 2.174013614654541D0)) (list (list 0.0D0 4662.66064453125D0 0.006597400642931461D0 2.1865079402923584D0)) (list (list 0.0D0 4663.958984375D0 0.00628675939515233D0 2.199002265930176D0)) (list (list 0.0D0 4664.767578125D0 0.006081845611333847D0 2.211496591567993D0)) (list (list 0.0D0 4664.248046875D0 0.005820816848427057D0 2.2239909172058106D0)) (list (list 0.0D0 4663.34033203125D0 0.0054205781780183315D0 2.236485242843628D0)) (list (list 0.0D0 4663.5517578125D0 0.005167041439563036D0 2.2489795684814453D0)) (list (list 0.0D0 4664.15673828125D0 0.005441646091639996D0 2.2614738941192627D0)) (list (list 0.0D0 4664.404296875D0 0.005844320636242628D0 2.27396821975708D0)) (list (list 0.0D0 4664.0732421875D0 0.005507540423423052D0 2.2864625453948975D0)) (list (list 0.0D0 4663.2314453125D0 0.004263200797140598D0 2.298956871032715D0)) (list (list 0.0D0 4661.6533203125D0 0.002888328628614545D0 2.3114511966705323D0)) (list (list 0.0D0 4660.3837890625D0 0.0023065933492034674D0 2.3239455223083496D0)) (list (list 0.0D0 4660.74169921875D0 0.002600137609988451D0 2.336439847946167D0)) (list (list 0.0D0 4663.3359375D0 0.003226278116926551D0 2.3489341735839844D0)) (list (list 0.0D0 4665.12158203125D0 0.003712665755301714D0 2.3614284992218018D0)) (list (list 0.0D0 4665.2294921875D0 0.004027421120554209D0 2.373922824859619D0)) (list (list 0.0D0 4664.79736328125D0 0.004504298325628042D0 2.3864171504974366D0)) (list (list 0.0D0 4664.626953125D0 0.005129544530063868D0 2.398911476135254D0)) (list (list 0.0D0 4664.7509765625D0 0.005595288705080748D0 2.4114058017730713D0)) (list (list 0.0D0 4664.59228515625D0 0.005640464369207621D0 2.4239001274108887D0)) (list (list 0.0D0 4664.4169921875D0 0.0050210654735565186D0 2.436394453048706D0)) (list (list 0.0D0 4666.12939453125D0 0.0037192467134445906D0 2.4488887786865235D0)) (list (list 0.0D0 4668.966796875D0 0.0024371223989874125D0 2.461383104324341D0)) (list (list 0.0D0 4670.2783203125D0 0.001776866614818573D0 2.4738776683807373D0)) (list (list 0.0D0 4671.42919921875D0 0.0017466956051066518D0 2.4863719940185547D0)) (list (list 0.0D0 4673.97412109375D0 0.0019965716637670994D0 2.498866319656372D0)) (list (list 0.0D0 4675.14208984375D0 0.002174366032704711D0 2.5113606452941895D0)) (list (list 0.0D0 4672.32373046875D0 0.002078349469229579D0 2.523854970932007D0)) (list (list 0.0D0 4666.10791015625D0 0.002163153840228915D0 2.536349296569824D0)) (list (list 0.0D0 4661.333984375D0 0.002579608466476202D0 2.5488436222076416D0)) (list (list 0.0D0 4659.451171875D0 0.0027111477684229613D0 2.561337947845459D0)) (list (list 0.0D0 4657.12060546875D0 0.0025347250048071146D0 2.5738322734832764D0)) (list (list 0.0D0 4655.52587890625D0 0.0024234051816165448D0 2.5863265991210938D0)) (list (list 0.0D0 4656.3544921875D0 0.002610008930787444D0 2.598820924758911D0)) (list (list 0.0D0 4658.79248046875D0 0.0032254105899482966D0 2.6113152503967285D0)) (list (list 0.0D0 4659.85009765625D0 0.0040932949632406235D0 2.623809576034546D0)) (list (list 0.0D0 4660.3876953125D0 0.005096846260130405D0 2.6363039016723633D0)) (list (list 0.0D0 4661.80126953125D0 0.006339163053780794D0 2.6487982273101807D0)) (list (list 0.0D0 4663.3388671875D0 0.0076822093687951565D0 2.661292552947998D0)) (list (list 0.0D0 4663.796875D0 0.008640156127512455D0 2.6737868785858155D0)) (list (list 0.0D0 4663.19970703125D0 0.008943570777773857D0 2.686281204223633D0)) (list (list 0.0D0 4662.05126953125D0 0.008763566613197327D0 2.69877552986145D0)) (list (list 0.0D0 4661.41455078125D0 0.00844652485102415D0 2.7112698554992676D0)) (list (list 0.0D0 4662.0849609375D0 0.00823126919567585D0 2.723764181137085D0)) (list (list 0.0D0 4663.49609375D0 0.008172590285539627D0 2.7362585067749024D0)) (list (list 0.0D0 4664.654296875D0 0.007864957675337792D0 2.7487528324127198D0)) (list (list 0.0D0 4665.47119140625D0 0.006967824883759022D0 2.761247158050537D0)) (list (list 0.0D0 4666.375D0 0.005694009363651276D0 2.7737414836883545D0)) (list (list 0.0D0 4666.7880859375D0 0.004412034526467323D0 2.786235809326172D0)) (list (list 0.0D0 4666.27734375D0 0.0035053035244345665D0 2.7987301349639893D0)) (list (list 0.0D0 4665.91845703125D0 0.0033194010611623526D0 2.8112244606018067D0)) (list (list 0.0D0 4665.96240234375D0 0.0038981770630925894D0 2.823718786239624D0)) (list (list 0.0D0 4665.98779296875D0 0.004940279293805361D0 2.8362131118774414D0)) (list (list 0.0D0 4665.826171875D0 0.005976497661322355D0 2.848707437515259D0)) (list (list 0.0D0 4665.29931640625D0 0.00662516662850976D0 2.861201763153076D0)) (list (list 0.0D0 4664.18359375D0 0.006824017036706209D0 2.8736960887908936D0)) (list (list 0.0D0 4662.78466796875D0 0.006930578500032425D0 2.886190414428711D0)) (list (list 0.0D0 4661.9111328125D0 0.007316876202821732D0 2.8986847400665283D0)) (list (list 0.0D0 4661.9736328125D0 0.007937083020806313D0 2.9111790657043457D0)) (list (list 0.0D0 4662.5537109375D0 0.008496642112731934D0 2.923673391342163D0)) (list (list 0.0D0 4663.08544921875D0 0.008678504265844822D0 2.9361677169799805D0)) (list (list 0.0D0 4663.505859375D0 0.008355370722711087D0 2.948662042617798D0)) (list (list 0.0D0 4663.671875D0 0.007623384706676006D0 2.9611563682556153D0)) (list (list 0.0D0 4663.556640625D0 0.00670918682590127D0 2.9736506938934326D0)) (list (list 0.0D0 4663.7685546875D0 0.005949718412011862D0 2.98614501953125D0)) (list (list 0.0D0 4664.1982421875D0 0.005774352699518204D0 2.9986393451690674D0)) (list (list 0.0D0 4663.861328125D0 0.0063664293847978115D0 3.0111336708068848D0)) (list (list 0.0D0 4662.859375D0 0.007285319268703461D0 3.0236282348632813D0)) (list (list 0.0D0 4662.21875D0 0.0075942580588161946D0 3.0361225605010987D0)) (list (list 0.0D0 4662.16064453125D0 0.006701784674078226D0 3.048616886138916D0)) (list (list 0.0D0 4662.4111328125D0 0.004922329448163509D0 3.0611112117767334D0)) (list (list 0.0D0 4663.53515625D0 0.003019990399479866D0 3.073605537414551D0)) (list (list 0.0D0 4665.79638671875D0 0.0015814956277608872D0 3.086099863052368D0)) (list (list 0.0D0 4673.52685546875D0 7.632208289578557D-4 3.0985941886901856D0)) (list (list 0.0D0 4654.435546875D0 5.346439429558814D-4 3.111088514328003D0)) (list (list 0.0D0 4678.84716796875D0 7.939876522868872D-4 3.1235828399658203D0)) (list (list 0.0D0 4672.59619140625D0 8.577221306040883D-4 3.1360771656036377D0)) (list (list 0.0D0 4694.927734375D0 6.723449914716184D-4 3.148571491241455D0)) (list (list 0.0D0 4654.28759765625D0 0.0014720545150339604D0 3.1610658168792725D0)) (list (list 0.0D0 4668.52880859375D0 0.0033658714964985848D0 3.17356014251709D0)) (list (list 0.0D0 4667.7607421875D0 0.004841868299990892D0 3.1860544681549073D0)) (list (list 0.0D0 4667.271484375D0 0.005825722590088844D0 3.1985487937927246D0)) (list (list 0.0D0 4665.94580078125D0 0.006109375040978193D0 3.211043119430542D0)) (list (list 0.0D0 4664.0419921875D0 0.005931157153099775D0 3.2235374450683594D0)) (list (list 0.0D0 4662.56396484375D0 0.005766348447650671D0 3.2360317707061768D0)) (list (list 0.0D0 4661.48876953125D0 0.005866008810698986D0 3.248526096343994D0)) (list (list 0.0D0 4660.087890625D0 0.006178618874400854D0 3.2610204219818116D0)) (list (list 0.0D0 4658.29248046875D0 0.0066029103472828865D0 3.273514747619629D0)) (list (list 0.0D0 4657.8017578125D0 0.006929985713213682D0 3.2860090732574463D0)) (list (list 0.0D0 4659.68408203125D0 0.007057470269501209D0 3.2985033988952637D0)) (list (list 0.0D0 4662.806640625D0 0.007396205794066191D0 3.310997724533081D0)) (list (list 0.0D0 4665.314453125D0 0.007861719466745854D0 3.3234920501708985D0)) (list (list 0.0D0 4665.96728515625D0 0.007836856879293919D0 3.335986375808716D0)) (list (list 0.0D0 4664.984375D0 0.007297101896256208D0 3.348480701446533D0)) (list (list 0.0D0 4663.0458984375D0 0.006786109879612923D0 3.3609750270843506D0)) (list (list 0.0D0 4661.1845703125D0 0.006813704501837492D0 3.373469352722168D0)) (list (list 0.0D0 4660.2333984375D0 0.007370867300778627D0 3.3859636783599854D0)) (list (list 0.0D0 4660.17822265625D0 0.008001318201422692D0 3.3984580039978028D0)) (list (list 0.0D0 4660.765625D0 0.008173596113920212D0 3.41095232963562D0)) (list (list 0.0D0 4661.89208984375D0 0.007775374222546816D0 3.4234466552734375D0)) (list (list 0.0D0 4663.2763671875D0 0.007232993841171265D0 3.435940980911255D0)) (list (list 0.0D0 4664.16650390625D0 0.006903283763676882D0 3.4484353065490723D0)) (list (list 0.0D0 4664.00732421875D0 0.006788249127566814D0 3.4609296321868897D0)) (list (list 0.0D0 4663.3330078125D0 0.006929468363523483D0 3.473423957824707D0)) (list (list 0.0D0 4662.77099609375D0 0.007411017548292875D0 3.4859182834625244D0)) (list (list 0.0D0 4662.42431640625D0 0.008170438930392266D0 3.498412609100342D0)) (list (list 0.0D0 4662.3525390625D0 0.008969787508249283D0 3.510906934738159D0)) (list (list 0.0D0 4662.4140625D0 0.009530388750135899D0 3.5234012603759766D0)) (list (list 0.0D0 4662.17626953125D0 0.009700422175228596D0 3.535895586013794D0)) (list (list 0.0D0 4661.35009765625D0 0.009594611823558808D0 3.5483899116516114D0)) (list (list 0.0D0 4660.17578125D0 0.00949164666235447D0 3.5608842372894287D0)) (list (list 0.0D0 4659.16357421875D0 0.009461354464292527D0 3.573378801345825D0)) (list (list 0.0D0 4658.7763671875D0 0.009275952354073525D0 3.5858731269836426D0)) (list (list 0.0D0 4659.10888671875D0 0.008718333207070828D0 3.59836745262146D0)) (list (list 0.0D0 4660.18603515625D0 0.007725910749286413D0 3.6108617782592774D0)) (list (list 0.0D0 4662.28662109375D0 0.006456984207034111D0 3.6233561038970948D0)) (list (list 0.0D0 4664.76953125D0 0.005436810199171305D0 3.635850429534912D0)) (list (list 0.0D0 4665.58349609375D0 0.005091583356261253D0 3.6483447551727295D0)) (list (list 0.0D0 4664.68359375D0 0.005579741206020117D0 3.660839080810547D0)) (list (list 0.0D0 4663.326171875D0 0.006743056699633598D0 3.6733334064483643D0)) (list (list 0.0D0 4662.462890625D0 0.008011970669031144D0 3.6858277320861817D0)) (list (list 0.0D0 4662.0791015625D0 0.008912746794521809D0 3.698322057723999D0)) (list (list 0.0D0 4662.06201171875D0 0.009168360382318497D0 3.7108163833618164D0)) (list (list 0.0D0 4662.43115234375D0 0.008599490858614445D0 3.723310708999634D0)) (list (list 0.0D0 4663.3408203125D0 0.007293600123375654D0 3.735805034637451D0)) (list (list 0.0D0 4664.38720703125D0 0.005809925962239504D0 3.7482993602752686D0)) (list (list 0.0D0 4664.28271484375D0 0.004860828630626202D0 3.760793685913086D0)) (list (list 0.0D0 4662.99755859375D0 0.004935282748192549D0 3.7732880115509033D0)) (list (list 0.0D0 4662.00390625D0 0.006009467411786318D0 3.7857823371887207D0)) (list (list 0.0D0 4662.24462890625D0 0.007561437785625458D0 3.798276662826538D0)) (list (list 0.0D0 4662.72802734375D0 0.009113213047385216D0 3.8107709884643555D0)) (list (list 0.0D0 4662.65625D0 0.010296295396983624D0 3.823265314102173D0)) (list (list 0.0D0 4662.1796875D0 0.011002658866345883D0 3.8357596397399903D0)) (list (list 0.0D0 4661.8046875D0 0.01133462879806757D0 3.8482539653778076D0)) (list (list 0.0D0 4661.5888671875D0 0.01143588125705719D0 3.860748291015625D0)) (list (list 0.0D0 4661.3671875D0 0.011491775512695313D0 3.8732426166534424D0)) (list (list 0.0D0 4661.20849609375D0 0.01159262377768755D0 3.8857369422912598D0)) (list (list 0.0D0 4661.16259765625D0 0.011580202728509903D0 3.898231267929077D0)) (list (list 0.0D0 4661.19873046875D0 0.01122466940432787D0 3.9107255935668946D0)) (list (list 0.0D0 4661.4052734375D0 0.010567194782197476D0 3.923219919204712D0)) (list (list 0.0D0 4661.66650390625D0 0.009876307100057602D0 3.9357142448425293D0)) (list (list 0.0D0 4661.69384765625D0 0.00920779723674059D0 3.9482085704803467D0)) (list (list 0.0D0 4661.75244140625D0 0.008380877785384655D0 3.960702896118164D0)) (list (list 0.0D0 4662.54638671875D0 0.007416862063109875D0 3.9731972217559815D0)) (list (list 0.0D0 4663.8037109375D0 0.006677753757685423D0 3.985691547393799D0)) (list (list 0.0D0 4664.8349609375D0 0.0062850648537278176D0 3.998185873031616D0)) (list (list 0.0D0 4665.39990234375D0 0.005992421880364418D0 4.010680198669434D0)) (list (list 0.0D0 4665.63525390625D0 0.005611271597445011D0 4.02317476272583D0)) (list (list 0.0D0 4665.43212890625D0 0.005055156070739031D0 4.035668849945068D0)) (list (list 0.0D0 4664.5576171875D0 0.0042695640586316586D0 4.048163414001465D0)) (list (list 0.0D0 4663.72021484375D0 0.0033669841941446066D0 4.060657501220703D0)) (list (list 0.0D0 4664.13330078125D0 0.002788035199046135D0 4.0731520652771D0)) (list (list 0.0D0 4664.62548828125D0 0.003023372730240226D0 4.085646152496338D0)) (list (list 0.0D0 4664.11376953125D0 0.003961179871112108D0 4.098140716552734D0)) (list (list 0.0D0 4663.775390625D0 0.00497483741492033D0 4.110634803771973D0)) (list (list 0.0D0 4664.32568359375D0 0.005511357448995113D0 4.123129367828369D0)) (list (list 0.0D0 4664.5224609375D0 0.005341409705579281D0 4.135623455047607D0)) (list (list 0.0D0 4662.5693359375D0 0.00435095839202404D0 4.148118019104004D0)) (list (list 0.0D0 4658.32470703125D0 0.003047889331355691D0 4.160612106323242D0)) (list (list 0.0D0 4646.78515625D0 0.0017267288640141488D0 4.173106670379639D0)) (list (list 0.0D0 4642.62353515625D0 0.0011910084867849946D0 4.185600757598877D0)) (list (list 0.0D0 4669.7763671875D0 0.0015188608085736633D0 4.198095321655273D0)) (list (list 0.0D0 4663.45263671875D0 0.0015839795814827085D0 4.210589408874512D0)) (list (list 0.0D0 4658.4794921875D0 0.00162375473883003D0 4.223083972930908D0)) (list (list 0.0D0 4655.43359375D0 0.0016541513614356518D0 4.2355780601501465D0)) (list (list 0.0D0 4656.18017578125D0 0.00141919928137213D0 4.248072624206543D0)) (list (list 0.0D0 4645.92578125D0 0.0010312143713235856D0 4.260566711425781D0)) (list (list 0.0D0 4647.35791015625D0 0.0010228228056803346D0 4.273061275482178D0)) (list (list 0.0D0 4669.06787109375D0 0.0026581299025565386D0 4.285555362701416D0)) (list (list 0.0D0 4666.787109375D0 0.0030537971761077643D0 4.2980499267578125D0)) (list (list 0.0D0 4666.8642578125D0 0.003334363456815481D0 4.310544013977051D0)) (list (list 0.0D0 4666.55126953125D0 0.003723385278135538D0 4.323038578033447D0)) (list (list 0.0D0 4664.6962890625D0 0.0040683867409825325D0 4.3355326652526856D0)) (list (list 0.0D0 4663.34130859375D0 0.0041782669723033905D0 4.348027229309082D0)) (list (list 0.0D0 4662.88818359375D0 0.004292606841772795D0 4.36052131652832D0)) (list (list 0.0D0 4662.48291015625D0 0.0048174383118748665D0 4.373015880584717D0)) (list (list 0.0D0 4662.16748046875D0 0.005665888544172049D0 4.385509967803955D0)) (list (list 0.0D0 4661.9619140625D0 0.0065107946284115315D0 4.398004531860352D0)) (list (list 0.0D0 4661.73486328125D0 0.00721530057489872D0 4.410499095916748D0)) (list (list 0.0D0 4661.52685546875D0 0.007729735691100359D0 4.422993183135986D0)) (list (list 0.0D0 4661.50732421875D0 0.007912368513643742D0 4.435487747192383D0)) (list (list 0.0D0 4661.876953125D0 0.007627625018358231D0 4.447981834411621D0)) (list (list 0.0D0 4662.52685546875D0 0.006932923570275307D0 4.460476398468018D0)) (list (list 0.0D0 4663.06689453125D0 0.006075614597648382D0 4.472970485687256D0)) (list (list 0.0D0 4663.111328125D0 0.005392554681748152D0 4.485465049743652D0)) (list (list 0.0D0 4662.62255859375D0 0.005203630775213242D0 4.497959136962891D0)) (list (list 0.0D0 4661.9208984375D0 0.005630718544125557D0 4.510453701019287D0)) (list (list 0.0D0 4661.75439453125D0 0.006485381163656712D0 4.522947788238525D0)) (list (list 0.0D0 4662.44189453125D0 0.007441036403179169D0 4.535442352294922D0)) (list (list 0.0D0 4663.31689453125D0 0.00832603219896555D0 4.54793643951416D0)) (list (list 0.0D0 4663.5830078125D0 0.009075387381017208D0 4.560431003570557D0)) (list (list 0.0D0 4663.02001953125D0 0.009595852345228196D0 4.572925090789795D0)) (list (list 0.0D0 4661.97607421875D0 0.009827999398112297D0 4.585419654846191D0)) (list (list 0.0D0 4661.2373046875D0 0.009795104153454304D0 4.59791374206543D0)) (list (list 0.0D0 4661.39794921875D0 0.009612096473574639D0 4.610408306121826D0)) (list (list 0.0D0 4662.39501953125D0 0.009462258778512478D0 4.6229023933410645D0)) (list (list 0.0D0 4663.4873046875D0 0.009429835714399815D0 4.635396957397461D0)) (list (list 0.0D0 4664.0703125D0 0.009394332766532898D0 4.647891044616699D0)) (list (list 0.0D0 4664.04150390625D0 0.009171624667942524D0 4.660385608673096D0)) (list (list 0.0D0 4663.2998046875D0 0.00864631962031126D0 4.672879695892334D0)) (list (list 0.0D0 4662.12548828125D0 0.00793198961764574D0 4.6853742599487305D0)) (list (list 0.0D0 4661.1513671875D0 0.007211316376924515D0 4.697868347167969D0)) (list (list 0.0D0 4660.482421875D0 0.0065567512065172196D0 4.710362911224365D0)) (list (list 0.0D0 4659.740234375D0 0.006013922858983278D0 4.7228569984436035D0)) (list (list 0.0D0 4659.21875D0 0.005595060531049967D0 4.7353515625D0)) (list (list 0.0D0 4659.62939453125D0 0.005205958615988493D0 4.747845649719238D0)) (list (list 0.0D0 4660.6552734375D0 0.004829152952879667D0 4.760340213775635D0)) (list (list 0.0D0 4661.162109375D0 0.004555001854896545D0 4.772834300994873D0)) (list (list 0.0D0 4660.97412109375D0 0.004442168399691582D0 4.7853288650512695D0)) (list (list 0.0D0 4660.47021484375D0 0.004431771580129862D0 4.797822952270508D0)) (list (list 0.0D0 4660.376953125D0 0.004434007685631514D0 4.810317516326904D0)) (list (list 0.0D0 4661.1376953125D0 0.004484822507947683D0 4.822811603546143D0)) (list (list 0.0D0 4662.4560546875D0 0.004665716551244259D0 4.835306167602539D0)) (list (list 0.0D0 4663.3955078125D0 0.004912686534225941D0 4.847800254821777D0)) (list (list 0.0D0 4663.65966796875D0 0.0051062386482954025D0 4.860294818878174D0)) (list (list 0.0D0 4663.6640625D0 0.005234412848949432D0 4.872788906097412D0)) (list (list 0.0D0 4663.82177734375D0 0.005320920143276453D0 4.885283470153809D0)) (list (list 0.0D0 4664.14111328125D0 0.005340054631233215D0 4.897777557373047D0)) (list (list 0.0D0 4664.330078125D0 0.005208125337958336D0 4.910272121429443D0)) (list (list 0.0D0 4664.31689453125D0 0.004857815336436033D0 4.922766208648682D0)) (list (list 0.0D0 4664.3583984375D0 0.004299547988921404D0 4.935260772705078D0)) (list (list 0.0D0 4664.58447265625D0 0.003598836250603199D0 4.947755336761475D0)) (list (list 0.0D0 4664.82177734375D0 0.002829429227858782D0 4.960249423980713D0)) (list (list 0.0D0 4665.03125D0 0.0020669871009886265D0 4.972743988037109D0)) (list (list 0.0D0 4665.880859375D0 0.001403996255248785D0 4.985238075256348D0)) (list (list 0.0D0 4668.072265625D0 9.445547475479543D-4 4.997732639312744D0)) (list (list 0.0D0 4670.3896484375D0 7.484806701540947D-4 5.010226726531982D0)) (list (list 0.0D0 4670.724609375D0 7.278642151504755D-4 5.022721290588379D0)) (list (list 0.0D0 4669.43798828125D0 7.815781864337623D-4 5.035215377807617D0)) (list (list 0.0D0 4668.0771484375D0 8.311312412843108D-4 5.047709941864014D0)) (list (list 0.0D0 4667.22509765625D0 8.413857431150973D-4 5.060204029083252D0)) (list (list 0.0D0 4666.80810546875D0 8.376740734092891D-4 5.072698593139648D0)) (list (list 0.0D0 4666.54296875D0 8.412557072006166D-4 5.085192680358887D0)) (list (list 0.0D0 4665.97021484375D0 8.278985624201596D-4 5.097687244415283D0)) (list (list 0.0D0 4664.6201171875D0 7.810269598849118D-4 5.1101813316345215D0)) (list (list 0.0D0 4663.7021484375D0 7.577203796245158D-4 5.122675895690918D0)) (list (list 0.0D0 4663.79052734375D0 7.92698934674263D-4 5.135169982910156D0)) (list (list 0.0D0 4664.25537109375D0 7.994121988303959D-4 5.147664546966553D0)) (list (list 0.0D0 4663.2841796875D0 6.479023140855134D-4 5.160158634185791D0)) (list (list 0.0D0 4675.81396484375D0 3.266504209022969D-4 5.1726531982421875D0)) (list (list 0.0D0 4675.81396484375D0 0.0D0 5.185147285461426D0)) (list (list 1.0D0 3693.170166015625D0 2.4091757950372994D-4 0.0D0)) (list (list 1.0D0 3701.74462890625D0 6.043590256012976D-4 0.01249433122575283D0)) (list (list 1.0D0 3717.314208984375D0 0.0011784655507653952D0 0.02498866245150566D0)) (list (list 1.0D0 3698.156005859375D0 8.303547510877252D-4 0.03748299181461334D0)) (list (list 1.0D0 3693.150146484375D0 6.334063364192843D-4 0.04997732490301132D0)) (list (list 1.0D0 3691.399169921875D0 5.407263524830341D-4 0.062471654266119D0)) (list (list 1.0D0 3694.2470703125D0 4.5800290536135435D-4 0.07496598362922669D0)) (list (list 1.0D0 3731.05517578125D0 0.007810436189174652D0 0.08746031671762467D0)) (list (list 1.0D0 3731.731689453125D0 0.009563321247696877D0 0.09995464980602265D0)) (list (list 1.0D0 3732.673583984375D0 0.010713819414377213D0 0.11244898289442063D0)) (list (list 1.0D0 3733.777099609375D0 0.011124982498586178D0 0.124943308532238D0)) (list (list 1.0D0 3734.67333984375D0 0.010694672353565693D0 0.137437641620636D0)) (list (list 1.0D0 3735.244140625D0 0.009427943266928196D0 0.14993196725845337D0)) (list (list 1.0D0 3735.92626953125D0 0.007604633457958698D0 0.16242630779743195D0)) (list (list 1.0D0 3737.940673828125D0 0.006055718287825584D0 0.17492063343524933D0)) (list (list 1.0D0 3739.0673828125D0 0.005947304889559746D0 0.1874149590730667D0)) (list (list 1.0D0 3736.632568359375D0 0.007378934882581234D0 0.1999092996120453D0)) (list (list 1.0D0 3731.423828125D0 0.010587982833385468D0 0.21240362524986267D0)) (list (list 1.0D0 3729.268310546875D0 0.01406901329755783D0 0.22489796578884125D0)) (list (list 1.0D0 3728.676513671875D0 0.016332527622580528D0 0.23739229142665863D0)) (list (list 1.0D0 3728.550537109375D0 0.017551260069012642D0 0.249886617064476D0)) (list (list 1.0D0 3728.58251953125D0 0.01823197677731514D0 0.2623809576034546D0)) (list (list 1.0D0 3728.778564453125D0 0.01876085437834263D0 0.274875283241272D0)) (list (list 1.0D0 3729.4482421875D0 0.01911797747015953D0 0.28736960887908936D0)) (list (list 1.0D0 3730.556396484375D0 0.018962714821100235D0 0.29986393451690674D0)) (list (list 1.0D0 3731.234130859375D0 0.017929483205080033D0 0.3123582899570465D0)) (list (list 1.0D0 3730.718994140625D0 0.0161830373108387D0 0.3248526155948639D0)) (list (list 1.0D0 3730.0693359375D0 0.014793884940445423D0 0.3373469412326813D0)) (list (list 1.0D0 3730.7314453125D0 0.014320997521281243D0 0.34984126687049866D0)) (list (list 1.0D0 3732.407958984375D0 0.01477591972798109D0 0.36233559250831604D0)) (list (list 1.0D0 3733.488525390625D0 0.01562478020787239D0 0.3748299181461334D0)) (list (list 1.0D0 3733.54638671875D0 0.01630508154630661D0 0.3873242437839508D0)) (list (list 1.0D0 3732.756591796875D0 0.016674425452947617D0 0.3998185992240906D0)) (list (list 1.0D0 3731.53564453125D0 0.016682295128703118D0 0.41231292486190796D0)) (list (list 1.0D0 3730.515869140625D0 0.0161751676350832D0 0.42480725049972534D0)) (list (list 1.0D0 3730.0458984375D0 0.014843018725514412D0 0.4373015761375427D0)) (list (list 1.0D0 3729.926025390625D0 0.012641114182770253D0 0.4497959315776825D0)) (list (list 1.0D0 3729.741455078125D0 0.009884330444037915D0 0.4622902572154999D0)) (list (list 1.0D0 3729.199951171875D0 0.007149429991841316D0 0.47478458285331726D0)) (list (list 1.0D0 3728.64453125D0 0.00499605480581522D0 0.48727890849113465D0)) (list (list 1.0D0 3728.710205078125D0 0.003682105801999569D0 0.499773234128952D0)) (list (list 1.0D0 3729.228759765625D0 0.003114276798442006D0 0.5122675895690918D0)) (list (list 1.0D0 3730.365478515625D0 0.003163360757753253D0 0.5247619152069092D0)) (list (list 1.0D0 3731.730224609375D0 0.004220764152705669D0 0.5372562408447266D0)) (list (list 1.0D0 3731.62060546875D0 0.006615590304136276D0 0.549750566482544D0)) (list (list 1.0D0 3729.2880859375D0 0.009934582747519017D0 0.5622448921203613D0)) (list (list 1.0D0 3727.621337890625D0 0.013526469469070435D0 0.5747392177581787D0)) (list (list 1.0D0 3727.242919921875D0 0.016631627455353737D0 0.5872335433959961D0)) (list (list 1.0D0 3727.323486328125D0 0.01914713904261589D0 0.5997278690338135D0)) (list (list 1.0D0 3727.632568359375D0 0.021088238805532456D0 0.6122221946716309D0)) (list (list 1.0D0 3728.141357421875D0 0.022490667179226876D0 0.624716579914093D0)) (list (list 1.0D0 3728.53759765625D0 0.02355882339179516D0 0.6372109055519104D0)) (list (list 1.0D0 3728.650390625D0 0.024448158219456673D0 0.6497052311897278D0)) (list (list 1.0D0 3728.870361328125D0 0.02522563748061657D0 0.6621995568275452D0)) (list (list 1.0D0 3729.348388671875D0 0.025891348719596863D0 0.6746938824653626D0)) (list (list 1.0D0 3729.672119140625D0 0.026286184787750244D0 0.6871882081031799D0)) (list (list 1.0D0 3729.741455078125D0 0.026172274723649025D0 0.6996825337409973D0)) (list (list 1.0D0 3729.92333984375D0 0.025620730593800545D0 0.7121768593788147D0)) (list (list 1.0D0 3730.2177734375D0 0.025005314499139786D0 0.7246711850166321D0)) (list (list 1.0D0 3730.306884765625D0 0.024648860096931458D0 0.7371655106544495D0)) (list (list 1.0D0 3730.320556640625D0 0.024611573666334152D0 0.7496598362922669D0)) (list (list 1.0D0 3730.548095703125D0 0.024777216836810112D0 0.762154221534729D0)) (list (list 1.0D0 3730.82373046875D0 0.025032341480255127D0 0.7746485471725464D0)) (list (list 1.0D0 3730.89599609375D0 0.025276098400354386D0 0.7871428728103638D0)) (list (list 1.0D0 3730.84521484375D0 0.025433089584112168D0 0.7996371984481812D0)) (list (list 1.0D0 3730.781982421875D0 0.02547750622034073D0 0.8121315240859985D0)) (list (list 1.0D0 3730.7333984375D0 0.02540530078113079D0 0.8246258497238159D0)) (list (list 1.0D0 3730.88623046875D0 0.025190381333231926D0 0.8371201753616333D0)) (list (list 1.0D0 3731.11669921875D0 0.024877749383449555D0 0.8496145009994507D0)) (list (list 1.0D0 3730.675048828125D0 0.02456986904144287D0 0.8621088266372681D0)) (list (list 1.0D0 3729.3017578125D0 0.024531517177820206D0 0.8746031522750855D0)) (list (list 1.0D0 3727.654541015625D0 0.024938255548477173D0 0.8870974779129028D0)) (list (list 1.0D0 3726.389892578125D0 0.025448426604270935D0 0.899591863155365D0)) (list (list 1.0D0 3725.913818359375D0 0.025913268327713013D0 0.9120861887931824D0)) (list (list 1.0D0 3726.534423828125D0 0.026325924322009087D0 0.9245805144309998D0)) (list (list 1.0D0 3727.789794921875D0 0.02695656195282936D0 0.9370748400688171D0)) (list (list 1.0D0 3729.0361328125D0 0.027617940679192543D0 0.9495691657066345D0)) (list (list 1.0D0 3730.041259765625D0 0.02797076106071472D0 0.9620634913444519D0)) (list (list 1.0D0 3730.4873046875D0 0.028009379282593727D0 0.9745578169822693D0)) (list (list 1.0D0 3730.27392578125D0 0.02808411978185177D0 0.9870521426200867D0)) (list (list 1.0D0 3729.96728515625D0 0.028597861528396607D0 0.999546468257904D0)) (list (list 1.0D0 3729.89013671875D0 0.029413457959890366D0 1.0120408535003662D0)) (list (list 1.0D0 3729.87646484375D0 0.0301523394882679D0 1.0245351791381836D0)) (list (list 1.0D0 3729.9814453125D0 0.03063211590051651D0 1.037029504776001D0)) (list (list 1.0D0 3730.404052734375D0 0.030865471810102463D0 1.0495238304138184D0)) (list (list 1.0D0 3730.9619140625D0 0.0309299323707819D0 1.0620181560516358D0)) (list (list 1.0D0 3731.14697265625D0 0.030941594392061234D0 1.0745124816894532D0)) (list (list 1.0D0 3730.691650390625D0 0.031114038079977036D0 1.0870068073272705D0)) (list (list 1.0D0 3729.975341796875D0 0.03161091357469559D0 1.099501132965088D0)) (list (list 1.0D0 3729.6494140625D0 0.03209768235683441D0 1.1119954586029053D0)) (list (list 1.0D0 3729.760498046875D0 0.03227294981479645D0 1.1244897842407227D0)) (list (list 1.0D0 3729.868408203125D0 0.03220878541469574D0 1.13698410987854D0)) (list (list 1.0D0 3729.858154296875D0 0.031912531703710556D0 1.1494784355163575D0)) (list (list 1.0D0 3729.860595703125D0 0.03123975731432438D0 1.1619727611541748D0)) (list (list 1.0D0 3729.85302734375D0 0.030200984328985214D0 1.1744670867919922D0)) (list (list 1.0D0 3729.8134765625D0 0.029086798429489136D0 1.1869614124298096D0)) (list (list 1.0D0 3729.694580078125D0 0.02817547135055065D0 1.199455738067627D0)) (list (list 1.0D0 3729.220703125D0 0.02755233272910118D0 1.2119500637054444D0)) (list (list 1.0D0 3728.49755859375D0 0.027401067316532135D0 1.2244443893432618D0)) (list (list 1.0D0 3728.174560546875D0 0.02785271778702736D0 1.236938714981079D0)) (list (list 1.0D0 3728.461669921875D0 0.028690418228507042D0 1.249433159828186D0)) (list (list 1.0D0 3728.83056640625D0 0.029507186263799668D0 1.2619274854660035D0)) (list (list 1.0D0 3728.849609375D0 0.029986796900629997D0 1.2744218111038208D0)) (list (list 1.0D0 3728.528076171875D0 0.03026965633034706D0 1.2869161367416382D0)) (list (list 1.0D0 3728.068359375D0 0.030572829768061638D0 1.2994104623794556D0)) (list (list 1.0D0 3727.951416015625D0 0.030803600326180458D0 1.311904788017273D0)) (list (list 1.0D0 3728.58740234375D0 0.030769767239689827D0 1.3243991136550904D0)) (list (list 1.0D0 3729.752197265625D0 0.030555060133337975D0 1.3368934392929078D0)) (list (list 1.0D0 3730.80322265625D0 0.03012857586145401D0 1.349387764930725D0)) (list (list 1.0D0 3731.228515625D0 0.029260123148560524D0 1.3618820905685425D0)) (list (list 1.0D0 3731.142333984375D0 0.02795974537730217D0 1.3743764162063599D0)) (list (list 1.0D0 3730.89501953125D0 0.026203369721770287D0 1.3868707418441773D0)) (list (list 1.0D0 3730.546630859375D0 0.023993292823433876D0 1.3993650674819947D0)) (list (list 1.0D0 3730.1015625D0 0.02205275557935238D0 1.411859393119812D0)) (list (list 1.0D0 3729.876220703125D0 0.02144419588148594D0 1.4243537187576294D0)) (list (list 1.0D0 3729.97998046875D0 0.022319266572594643D0 1.4368480443954468D0)) (list (list 1.0D0 3730.173095703125D0 0.02377524971961975D0 1.4493423700332642D0)) (list (list 1.0D0 3730.20703125D0 0.024983538314700127D0 1.4618366956710816D0)) (list (list 1.0D0 3730.01953125D0 0.025939512997865677D0 1.474331021308899D0)) (list (list 1.0D0 3729.790771484375D0 0.02682678773999214D0 1.4868253469467163D0)) (list (list 1.0D0 3729.800048828125D0 0.027412038296461106D0 1.4993196725845337D0)) (list (list 1.0D0 3730.052734375D0 0.02737409435212612D0 1.5118141174316407D0)) (list (list 1.0D0 3730.395751953125D0 0.026646772399544716D0 1.524308443069458D0)) (list (list 1.0D0 3730.6416015625D0 0.025427313521504402D0 1.5368027687072754D0)) (list (list 1.0D0 3730.49853515625D0 0.02410789020359516D0 1.5492970943450928D0)) (list (list 1.0D0 3730.006591796875D0 0.023173866793513298D0 1.5617914199829102D0)) (list (list 1.0D0 3729.587646484375D0 0.02274533361196518D0 1.5742857456207276D0)) (list (list 1.0D0 3729.410888671875D0 0.02251044474542141D0 1.586780071258545D0)) (list (list 1.0D0 3729.287353515625D0 0.02226141095161438D0 1.5992743968963623D0)) (list (list 1.0D0 3729.1767578125D0 0.022044239565730095D0 1.6117687225341797D0)) (list (list 1.0D0 3729.345458984375D0 0.021766146644949913D0 1.624263048171997D0)) (list (list 1.0D0 3729.9599609375D0 0.02111494354903698D0 1.6367573738098145D0)) (list (list 1.0D0 3730.650634765625D0 0.020024344325065613D0 1.6492516994476319D0)) (list (list 1.0D0 3730.85205078125D0 0.01873033680021763D0 1.6617460250854493D0)) (list (list 1.0D0 3730.41845703125D0 0.01760277897119522D0 1.6742403507232666D0)) (list (list 1.0D0 3729.882568359375D0 0.016871368512511254D0 1.686734676361084D0)) (list (list 1.0D0 3729.8994140625D0 0.016494223847985268D0 1.6992290019989014D0)) (list (list 1.0D0 3730.18408203125D0 0.016433237120509148D0 1.7117233276367188D0)) (list (list 1.0D0 3729.850830078125D0 0.016735143959522248D0 1.7242176532745362D0)) (list (list 1.0D0 3729.002685546875D0 0.017587261274456978D0 1.7367119789123536D0)) (list (list 1.0D0 3728.68017578125D0 0.01890004612505436D0 1.749206304550171D0)) (list (list 1.0D0 3729.11474609375D0 0.020136702805757523D0 1.7617006301879883D0)) (list (list 1.0D0 3729.453857421875D0 0.020826568827033043D0 1.7741949558258057D0)) (list (list 1.0D0 3729.424560546875D0 0.020870191976428032D0 1.7866894006729126D0)) (list (list 1.0D0 3729.62744140625D0 0.02053467556834221D0 1.79918372631073D0)) (list (list 1.0D0 3730.15966796875D0 0.019961677491664887D0 1.8116780519485474D0)) (list (list 1.0D0 3730.3232421875D0 0.019068554043769837D0 1.8241723775863648D0)) (list (list 1.0D0 3729.958740234375D0 0.018003908917307854D0 1.8366667032241822D0)) (list (list 1.0D0 3729.53125D0 0.01715773344039917D0 1.8491610288619996D0)) (list (list 1.0D0 3729.333984375D0 0.016586771234869957D0 1.861655354499817D0)) (list (list 1.0D0 3729.406494140625D0 0.016040710732340813D0 1.8741496801376343D0)) (list (list 1.0D0 3729.566650390625D0 0.015347826294600964D0 1.8866440057754517D0)) (list (list 1.0D0 3729.41455078125D0 0.014609419740736485D0 1.899138331413269D0)) (list (list 1.0D0 3728.82373046875D0 0.014088070020079613D0 1.9116326570510865D0)) (list (list 1.0D0 3728.212646484375D0 0.014004654251039029D0 1.9241269826889038D0)) (list (list 1.0D0 3728.23046875D0 0.014375933445990086D0 1.9366213083267212D0)) (list (list 1.0D0 3728.8701171875D0 0.015029615722596646D0 1.9491156339645386D0)) (list (list 1.0D0 3729.496826171875D0 0.015582909807562828D0 1.961609959602356D0)) (list (list 1.0D0 3729.789794921875D0 0.015624305233359337D0 1.9741042852401734D0)) (list (list 1.0D0 3730.082763671875D0 0.015129861421883107D0 1.9865986108779908D0)) (list (list 1.0D0 3730.552001953125D0 0.014358820393681527D0 1.999092936515808D0)) (list (list 1.0D0 3730.954833984375D0 0.013561342842876912D0 2.011587381362915D0)) (list (list 1.0D0 3731.139404296875D0 0.012937618419528008D0 2.0240817070007324D0)) (list (list 1.0D0 3731.21875D0 0.01260343100875616D0 2.03657603263855D0)) (list (list 1.0D0 3731.111572265625D0 0.012423255480825901D0 2.049070358276367D0)) (list (list 1.0D0 3730.556640625D0 0.012187504209578038D0 2.0615646839141846D0)) (list (list 1.0D0 3729.879150390625D0 0.011962609365582466D0 2.074059009552002D0)) (list (list 1.0D0 3729.855224609375D0 0.011834594421088696D0 2.0865533351898194D0)) (list (list 1.0D0 3730.7490234375D0 0.011629065498709679D0 2.0990476608276367D0)) (list (list 1.0D0 3731.623779296875D0 0.011128896847367287D0 2.111541986465454D0)) (list (list 1.0D0 3731.20556640625D0 0.010239003226161003D0 2.1240363121032715D0)) (list (list 1.0D0 3729.435302734375D0 0.009332161396741867D0 2.136530637741089D0)) (list (list 1.0D0 3727.290283203125D0 0.008743001148104668D0 2.1490249633789063D0)) (list (list 1.0D0 3726.189697265625D0 0.008149884641170502D0 2.1615192890167237D0)) (list (list 1.0D0 3727.069580078125D0 0.007031508721411228D0 2.174013614654541D0)) (list (list 1.0D0 3731.523681640625D0 0.005637262016534805D0 2.1865079402923584D0)) (list (list 1.0D0 3734.631591796875D0 0.005097235552966595D0 2.199002265930176D0)) (list (list 1.0D0 3733.94189453125D0 0.005345245823264122D0 2.211496591567993D0)) (list (list 1.0D0 3731.183349609375D0 0.006535149645060301D0 2.2239909172058106D0)) (list (list 1.0D0 3729.549560546875D0 0.007845370098948479D0 2.236485242843628D0)) (list (list 1.0D0 3729.532958984375D0 0.008328333497047425D0 2.2489795684814453D0)) (list (list 1.0D0 3730.5888671875D0 0.008044418878853321D0 2.2614738941192627D0)) (list (list 1.0D0 3731.621826171875D0 0.007541560102254152D0 2.27396821975708D0)) (list (list 1.0D0 3730.8564453125D0 0.006976178847253323D0 2.2864625453948975D0)) (list (list 1.0D0 3728.14306640625D0 0.006548368837684393D0 2.298956871032715D0)) (list (list 1.0D0 3726.274658203125D0 0.006208445411175489D0 2.3114511966705323D0)) (list (list 1.0D0 3727.38623046875D0 0.005464992020279169D0 2.3239455223083496D0)) (list (list 1.0D0 3730.891357421875D0 0.004914422519505024D0 2.336439847946167D0)) (list (list 1.0D0 3732.62841796875D0 0.005213954485952854D0 2.3489341735839844D0)) (list (list 1.0D0 3732.06982421875D0 0.006008268799632788D0 2.3614284992218018D0)) (list (list 1.0D0 3730.49267578125D0 0.006617092061787844D0 2.373922824859619D0)) (list (list 1.0D0 3730.26513671875D0 0.0063609350472688675D0 2.3864171504974366D0)) (list (list 1.0D0 3731.26806640625D0 0.005514037329703569D0 2.398911476135254D0)) (list (list 1.0D0 3732.52734375D0 0.004986556246876717D0 2.4114058017730713D0)) (list (list 1.0D0 3733.280517578125D0 0.005157948471605778D0 2.4239001274108887D0)) (list (list 1.0D0 3732.38427734375D0 0.005457191728055477D0 2.436394453048706D0)) (list (list 1.0D0 3729.271728515625D0 0.005193343851715326D0 2.4488887786865235D0)) (list (list 1.0D0 3723.705810546875D0 0.004183829762041569D0 2.461383104324341D0)) (list (list 1.0D0 3717.497314453125D0 0.003267248859629035D0 2.4738776683807373D0)) (list (list 1.0D0 3715.075927734375D0 0.0025884394999593497D0 2.4863719940185547D0)) (list (list 1.0D0 3714.135498046875D0 0.00202346732839942D0 2.498866319656372D0)) (list (list 1.0D0 3715.275146484375D0 0.0016386654460802675D0 2.5113606452941895D0)) (list (list 1.0D0 3720.551513671875D0 0.0016675759106874466D0 2.523854970932007D0)) (list (list 1.0D0 3732.696533203125D0 0.00318119116127491D0 2.536349296569824D0)) (list (list 1.0D0 3730.41943359375D0 0.003827739506959915D0 2.5488436222076416D0)) (list (list 1.0D0 3730.012451171875D0 0.004046988673508167D0 2.561337947845459D0)) (list (list 1.0D0 3729.75244140625D0 0.003907086793333292D0 2.5738322734832764D0)) (list (list 1.0D0 3729.168701171875D0 0.0036582215689122677D0 2.5863265991210938D0)) (list (list 1.0D0 3728.84228515625D0 0.003807548899203539D0 2.598820924758911D0)) (list (list 1.0D0 3729.09912109375D0 0.004468944389373064D0 2.6113152503967285D0)) (list (list 1.0D0 3730.0927734375D0 0.004918563179671764D0 2.623809576034546D0)) (list (list 1.0D0 3733.05078125D0 0.004281694535166025D0 2.6363039016723633D0)) (list (list 1.0D0 3739.507080078125D0 0.0030610794201493264D0 2.6487982273101807D0)) (list (list 1.0D0 3741.583251953125D0 0.001890636165626347D0 2.661292552947998D0)) (list (list 1.0D0 3730.802978515625D0 0.0012543987249955535D0 2.6737868785858155D0)) (list (list 1.0D0 3726.305419921875D0 0.0019944964442402125D0 2.686281204223633D0)) (list (list 1.0D0 3728.818603515625D0 0.002688630949705839D0 2.69877552986145D0)) (list (list 1.0D0 3731.874755859375D0 0.003682210808619857D0 2.7112698554992676D0)) (list (list 1.0D0 3732.751953125D0 0.005108718294650316D0 2.723764181137085D0)) (list (list 1.0D0 3732.76708984375D0 0.007192554417997599D0 2.7362585067749024D0)) (list (list 1.0D0 3732.379150390625D0 0.009584956802427769D0 2.7487528324127198D0)) (list (list 1.0D0 3731.3330078125D0 0.011455250903964043D0 2.761247158050537D0)) (list (list 1.0D0 3730.20849609375D0 0.01274390984326601D0 2.7737414836883545D0)) (list (list 1.0D0 3729.315185546875D0 0.014217198826372624D0 2.786235809326172D0)) (list (list 1.0D0 3728.541259765625D0 0.016420910134911537D0 2.7987301349639893D0)) (list (list 1.0D0 3728.27197265625D0 0.018936824053525925D0 2.8112244606018067D0)) (list (list 1.0D0 3728.892333984375D0 0.02061806246638298D0 2.823718786239624D0)) (list (list 1.0D0 3730.144775390625D0 0.020709358155727387D0 2.8362131118774414D0)) (list (list 1.0D0 3731.32666015625D0 0.01957131177186966D0 2.848707437515259D0)) (list (list 1.0D0 3732.030517578125D0 0.018454531207680702D0 2.861201763153076D0)) (list (list 1.0D0 3731.979736328125D0 0.018124626949429512D0 2.8736960887908936D0)) (list (list 1.0D0 3731.20458984375D0 0.017993105575442314D0 2.886190414428711D0)) (list (list 1.0D0 3730.499267578125D0 0.017131619155406952D0 2.8986847400665283D0)) (list (list 1.0D0 3730.390625D0 0.015560751780867577D0 2.9111790657043457D0)) (list (list 1.0D0 3730.552734375D0 0.014281208626925946D0 2.923673391342163D0)) (list (list 1.0D0 3730.724609375D0 0.013865174725651741D0 2.9361677169799805D0)) (list (list 1.0D0 3730.662841796875D0 0.014019360765814782D0 2.948662042617798D0)) (list (list 1.0D0 3730.168212890625D0 0.014241068623960019D0 2.9611563682556153D0)) (list (list 1.0D0 3729.03662109375D0 0.014243493787944317D0 2.9736506938934326D0)) (list (list 1.0D0 3727.361083984375D0 0.014246332459151745D0 2.98614501953125D0)) (list (list 1.0D0 3726.12060546875D0 0.014733723364770413D0 2.9986393451690674D0)) (list (list 1.0D0 3725.728271484375D0 0.015347085893154145D0 3.0111336708068848D0)) (list (list 1.0D0 3725.56298828125D0 0.014819152653217316D0 3.0236282348632813D0)) (list (list 1.0D0 3724.32568359375D0 0.012343342415988446D0 3.0361225605010987D0)) (list (list 1.0D0 3721.88623046875D0 0.009134060703217984D0 3.048616886138916D0)) (list (list 1.0D0 3721.271728515625D0 0.007073644082993269D0 3.0611112117767334D0)) (list (list 1.0D0 3723.727294921875D0 0.0069969831965863705D0 3.073605537414551D0)) (list (list 1.0D0 3727.095703125D0 0.009132527746260167D0 3.086099863052368D0)) (list (list 1.0D0 3727.521728515625D0 0.011365042999386788D0 3.0985941886901856D0)) (list (list 1.0D0 3726.092529296875D0 0.012067992240190506D0 3.111088514328003D0)) (list (list 1.0D0 3723.647216796875D0 0.011096270754933358D0 3.1235828399658203D0)) (list (list 1.0D0 3721.010986328125D0 0.009437356144189835D0 3.1360771656036377D0)) (list (list 1.0D0 3717.1357421875D0 0.008091634139418602D0 3.148571491241455D0)) (list (list 1.0D0 3713.939208984375D0 0.008351308293640614D0 3.1610658168792725D0)) (list (list 1.0D0 3715.94775390625D0 0.009741157293319703D0 3.17356014251709D0)) (list (list 1.0D0 3723.829345703125D0 0.01346866600215435D0 3.1860544681549073D0)) (list (list 1.0D0 3730.550048828125D0 0.01877858117222786D0 3.1985487937927246D0)) (list (list 1.0D0 3732.29052734375D0 0.020081689581274987D0 3.211043119430542D0)) (list (list 1.0D0 3732.542724609375D0 0.01888659968972206D0 3.2235374450683594D0)) (list (list 1.0D0 3731.7138671875D0 0.018312040716409683D0 3.2360317707061768D0)) (list (list 1.0D0 3730.53662109375D0 0.018919315189123154D0 3.248526096343994D0)) (list (list 1.0D0 3730.225341796875D0 0.01910329982638359D0 3.2610204219818116D0)) (list (list 1.0D0 3729.868408203125D0 0.018602197989821434D0 3.273514747619629D0)) (list (list 1.0D0 3728.68212890625D0 0.018260987475514412D0 3.2860090732574463D0)) (list (list 1.0D0 3727.526611328125D0 0.018032047897577286D0 3.2985033988952637D0)) (list (list 1.0D0 3728.384765625D0 0.01673557423055172D0 3.310997724533081D0)) (list (list 1.0D0 3731.351806640625D0 0.015216177329421044D0 3.3234920501708985D0)) (list (list 1.0D0 3733.746826171875D0 0.015398820862174034D0 3.335986375808716D0)) (list (list 1.0D0 3733.503173828125D0 0.016406601294875145D0 3.348480701446533D0)) (list (list 1.0D0 3729.802490234375D0 0.017197923734784127D0 3.3609750270843506D0)) (list (list 1.0D0 3726.466552734375D0 0.018038524314761162D0 3.373469352722168D0)) (list (list 1.0D0 3726.1962890625D0 0.01727096363902092D0 3.3859636783599854D0)) (list (list 1.0D0 3728.7900390625D0 0.015471582300961018D0 3.3984580039978028D0)) (list (list 1.0D0 3731.0634765625D0 0.0146553386002779D0 3.41095232963562D0)) (list (list 1.0D0 3731.179443359375D0 0.014461861923336983D0 3.4234466552734375D0)) (list (list 1.0D0 3729.774169921875D0 0.014319567941129208D0 3.435940980911255D0)) (list (list 1.0D0 3728.476318359375D0 0.013540792278945446D0 3.4484353065490723D0)) (list (list 1.0D0 3728.337158203125D0 0.011846145614981652D0 3.4609296321868897D0)) (list (list 1.0D0 3729.629638671875D0 0.009767738170921803D0 3.473423957824707D0)) (list (list 1.0D0 3731.36572265625D0 0.008170835673809052D0 3.4859182834625244D0)) (list (list 1.0D0 3731.909423828125D0 0.007464728783816099D0 3.498412609100342D0)) (list (list 1.0D0 3732.814453125D0 0.007659878581762314D0 3.510906934738159D0)) (list (list 1.0D0 3735.283447265625D0 0.008516021072864533D0 3.5234012603759766D0)) (list (list 1.0D0 3735.56298828125D0 0.009390334598720074D0 3.535895586013794D0)) (list (list 1.0D0 3732.47314453125D0 0.00983856525272131D0 3.5483899116516114D0)) (list (list 1.0D0 3727.88720703125D0 0.01094814669340849D0 3.5608842372894287D0)) (list (list 1.0D0 3726.390380859375D0 0.01238232757896185D0 3.573378801345825D0)) (list (list 1.0D0 3727.056396484375D0 0.01378233078867197D0 3.5858731269836426D0)) (list (list 1.0D0 3728.178955078125D0 0.015317066572606564D0 3.59836745262146D0)) (list (list 1.0D0 3728.52490234375D0 0.01635066419839859D0 3.6108617782592774D0)) (list (list 1.0D0 3728.4931640625D0 0.01673501916229725D0 3.6233561038970948D0)) (list (list 1.0D0 3728.496337890625D0 0.016973096877336502D0 3.635850429534912D0)) (list (list 1.0D0 3728.3232421875D0 0.01735583133995533D0 3.6483447551727295D0)) (list (list 1.0D0 3728.188720703125D0 0.01780089922249317D0 3.660839080810547D0)) (list (list 1.0D0 3728.51806640625D0 0.017968157306313515D0 3.6733334064483643D0)) (list (list 1.0D0 3729.037841796875D0 0.017533157020807266D0 3.6858277320861817D0)) (list (list 1.0D0 3729.36572265625D0 0.016162265092134476D0 3.698322057723999D0)) (list (list 1.0D0 3729.88623046875D0 0.013602196238934994D0 3.7108163833618164D0)) (list (list 1.0D0 3731.234130859375D0 0.010150022804737091D0 3.723310708999634D0)) (list (list 1.0D0 3731.915771484375D0 0.006752649787813425D0 3.735805034637451D0)) (list (list 1.0D0 3729.06982421875D0 0.004354558419436216D0 3.7482993602752686D0)) (list (list 1.0D0 3725.517333984375D0 0.003842612961307168D0 3.760793685913086D0)) (list (list 1.0D0 3726.792236328125D0 0.0038908894639462233D0 3.7732880115509033D0)) (list (list 1.0D0 3731.853271484375D0 0.004212817642837763D0 3.7857823371887207D0)) (list (list 1.0D0 3734.376220703125D0 0.005014798603951931D0 3.798276662826538D0)) (list (list 1.0D0 3735.00537109375D0 0.006405912339687347D0 3.8107709884643555D0)) (list (list 1.0D0 3734.0634765625D0 0.008082622662186623D0 3.823265314102173D0)) (list (list 1.0D0 3733.034912109375D0 0.00931529887020588D0 3.8357596397399903D0)) (list (list 1.0D0 3732.858642578125D0 0.00968290213495493D0 3.8482539653778076D0)) (list (list 1.0D0 3732.53076171875D0 0.009529955685138703D0 3.860748291015625D0)) (list (list 1.0D0 3731.279052734375D0 0.009266448207199574D0 3.8732426166534424D0)) (list (list 1.0D0 3730.048828125D0 0.00881775002926588D0 3.8857369422912598D0)) (list (list 1.0D0 3730.5849609375D0 0.007734808139503002D0 3.898231267929077D0)) (list (list 1.0D0 3732.984130859375D0 0.006249160505831242D0 3.9107255935668946D0)) (list (list 1.0D0 3735.111328125D0 0.0049186889082193375D0 3.923219919204712D0)) (list (list 1.0D0 3734.41455078125D0 0.003911091946065426D0 3.9357142448425293D0)) (list (list 1.0D0 3732.28369140625D0 0.003789593931287527D0 3.9482085704803467D0)) (list (list 1.0D0 3731.696044921875D0 0.0047452314756810665D0 3.960702896118164D0)) (list (list 1.0D0 3732.246826171875D0 0.006395849399268627D0 3.9731972217559815D0)) (list (list 1.0D0 3731.873046875D0 0.008020898327231408D0 3.985691547393799D0)) (list (list 1.0D0 3730.399658203125D0 0.00917636789381504D0 3.998185873031616D0)) (list (list 1.0D0 3729.090087890625D0 0.010335967876017094D0 4.010680198669434D0)) (list (list 1.0D0 3728.41455078125D0 0.01211912278085947D0 4.02317476272583D0)) (list (list 1.0D0 3728.252685546875D0 0.01449318416416645D0 4.035668849945068D0)) (list (list 1.0D0 3728.177490234375D0 0.016710471361875534D0 4.048163414001465D0)) (list (list 1.0D0 3727.77783203125D0 0.017956987023353577D0 4.060657501220703D0)) (list (list 1.0D0 3727.013671875D0 0.017994625493884087D0 4.0731520652771D0)) (list (list 1.0D0 3726.338623046875D0 0.016628878191113472D0 4.085646152496338D0)) (list (list 1.0D0 3726.540771484375D0 0.013501516543328762D0 4.098140716552734D0)) (list (list 1.0D0 3728.21240234375D0 0.009145515970885754D0 4.110634803771973D0)) (list (list 1.0D0 3732.679931640625D0 0.00513086374849081D0 4.123129367828369D0)) (list (list 1.0D0 3737.87255859375D0 0.0032246208284050227D0 4.135623455047607D0)) (list (list 1.0D0 3738.023681640625D0 0.00283739878796041D0 4.148118019104004D0)) (list (list 1.0D0 3730.942626953125D0 0.003309645690023899D0 4.160612106323242D0)) (list (list 1.0D0 3727.133544921875D0 0.00452338857576251D0 4.173106670379639D0)) (list (list 1.0D0 3726.61376953125D0 0.005521751008927822D0 4.185600757598877D0)) (list (list 1.0D0 3727.555419921875D0 0.006111348979175091D0 4.198095321655273D0)) (list (list 1.0D0 3729.622314453125D0 0.0062703019939363D0 4.210589408874512D0)) (list (list 1.0D0 3730.930908203125D0 0.006497110240161419D0 4.223083972930908D0)) (list (list 1.0D0 3730.192626953125D0 0.007336571346968412D0 4.2355780601501465D0)) (list (list 1.0D0 3728.167236328125D0 0.009195823222398758D0 4.248072624206543D0)) (list (list 1.0D0 3727.128662109375D0 0.011172927916049958D0 4.260566711425781D0)) (list (list 1.0D0 3727.83544921875D0 0.011375563219189644D0 4.273061275482178D0)) (list (list 1.0D0 3731.126220703125D0 0.00933935958892107D0 4.285555362701416D0)) (list (list 1.0D0 3733.791015625D0 0.007203041110187769D0 4.2980499267578125D0)) (list (list 1.0D0 3733.768310546875D0 0.006859492976218462D0 4.310544013977051D0)) (list (list 1.0D0 3732.57861328125D0 0.00866963155567646D0 4.323038578033447D0)) (list (list 1.0D0 3731.38232421875D0 0.010803758166730404D0 4.3355326652526856D0)) (list (list 1.0D0 3730.245361328125D0 0.011843116022646428D0 4.348027229309082D0)) (list (list 1.0D0 3729.3544921875D0 0.01237991638481617D0 4.36052131652832D0)) (list (list 1.0D0 3729.117919921875D0 0.013334784656763077D0 4.373015880584717D0)) (list (list 1.0D0 3729.194091796875D0 0.014844391494989396D0 4.385509967803955D0)) (list (list 1.0D0 3729.068603515625D0 0.016389142721891403D0 4.398004531860352D0)) (list (list 1.0D0 3728.923583984375D0 0.01749211922287941D0 4.410499095916748D0)) (list (list 1.0D0 3728.845947265625D0 0.017951566725969315D0 4.422993183135986D0)) (list (list 1.0D0 3728.802734375D0 0.017709042876958847D0 4.435487747192383D0)) (list (list 1.0D0 3729.064208984375D0 0.01679905690252781D0 4.447981834411621D0)) (list (list 1.0D0 3729.762939453125D0 0.015400066040456295D0 4.460476398468018D0)) (list (list 1.0D0 3730.5068359375D0 0.013891702517867089D0 4.472970485687256D0)) (list (list 1.0D0 3730.73876953125D0 0.012808868661522866D0 4.485465049743652D0)) (list (list 1.0D0 3730.369873046875D0 0.012713136151432991D0 4.497959136962891D0)) (list (list 1.0D0 3729.7333984375D0 0.013747571036219597D0 4.510453701019287D0)) (list (list 1.0D0 3729.441162109375D0 0.015379291959106923D0 4.522947788238525D0)) (list (list 1.0D0 3729.795166015625D0 0.016790490597486496D0 4.535442352294922D0)) (list (list 1.0D0 3730.46240234375D0 0.01757093146443367D0 4.54793643951416D0)) (list (list 1.0D0 3730.739501953125D0 0.017862264066934586D0 4.560431003570557D0)) (list (list 1.0D0 3730.20068359375D0 0.01797068677842617D0 4.572925090789795D0)) (list (list 1.0D0 3729.184814453125D0 0.018184315413236618D0 4.585419654846191D0)) (list (list 1.0D0 3728.60888671875D0 0.018499840050935745D0 4.59791374206543D0)) (list (list 1.0D0 3728.954833984375D0 0.018644658848643303D0 4.610408306121826D0)) (list (list 1.0D0 3729.91943359375D0 0.018459796905517578D0 4.6229023933410645D0)) (list (list 1.0D0 3730.87646484375D0 0.017865927889943123D0 4.635396957397461D0)) (list (list 1.0D0 3731.375244140625D0 0.016965340822935105D0 4.647891044616699D0)) (list (list 1.0D0 3731.2041015625D0 0.015995381399989128D0 4.660385608673096D0)) (list (list 1.0D0 3730.259521484375D0 0.015167022123932839D0 4.672879695892334D0)) (list (list 1.0D0 3729.167724609375D0 0.014670208096504212D0 4.6853742599487305D0)) (list (list 1.0D0 3728.509765625D0 0.014409270137548447D0 4.697868347167969D0)) (list (list 1.0D0 3728.081298828125D0 0.014182638376951218D0 4.710362911224365D0)) (list (list 1.0D0 3727.621826171875D0 0.014009031467139721D0 4.7228569984436035D0)) (list (list 1.0D0 3727.4697265625D0 0.013871519826352597D0 4.7353515625D0)) (list (list 1.0D0 3727.825927734375D0 0.013547629117965699D0 4.747845649719238D0)) (list (list 1.0D0 3728.37451171875D0 0.01298882719129324D0 4.760340213775635D0)) (list (list 1.0D0 3728.788330078125D0 0.012492003850638867D0 4.772834300994873D0)) (list (list 1.0D0 3728.8681640625D0 0.012296521104872227D0 4.7853288650512695D0)) (list (list 1.0D0 3728.5576171875D0 0.012303918600082398D0 4.797822952270508D0)) (list (list 1.0D0 3728.503662109375D0 0.012402180582284928D0 4.810317516326904D0)) (list (list 1.0D0 3729.174560546875D0 0.012565508484840393D0 4.822811603546143D0)) (list (list 1.0D0 3730.071044921875D0 0.012762795202434063D0 4.835306167602539D0)) (list (list 1.0D0 3730.48095703125D0 0.012874062173068524D0 4.847800254821777D0)) (list (list 1.0D0 3730.568359375D0 0.012992418371140957D0 4.860294818878174D0)) (list (list 1.0D0 3730.763916015625D0 0.013279111124575138D0 4.872788906097412D0)) (list (list 1.0D0 3731.109619140625D0 0.013639860786497593D0 4.885283470153809D0)) (list (list 1.0D0 3731.22412109375D0 0.013770279474556446D0 4.897777557373047D0)) (list (list 1.0D0 3730.86083984375D0 0.013426084071397782D0 4.910272121429443D0)) (list (list 1.0D0 3730.307373046875D0 0.012611337937414647D0 4.922766208648682D0)) (list (list 1.0D0 3729.866943359375D0 0.011389798484742642D0 4.935260772705078D0)) (list (list 1.0D0 3729.571044921875D0 0.009867510758340359D0 4.947755336761475D0)) (list (list 1.0D0 3729.39306640625D0 0.008286699652671814D0 4.960249423980713D0)) (list (list 1.0D0 3729.361083984375D0 0.006869553588330746D0 4.972743988037109D0)) (list (list 1.0D0 3729.288330078125D0 0.00566595746204257D0 4.985238075256348D0)) (list (list 1.0D0 3729.00244140625D0 0.004652687348425388D0 4.997732639312744D0)) (list (list 1.0D0 3728.977783203125D0 0.003904730314388871D0 5.010226726531982D0)) (list (list 1.0D0 3729.514404296875D0 0.003565023420378566D0 5.022721290588379D0)) (list (list 1.0D0 3729.861083984375D0 0.0037254253402352333D0 5.035215377807617D0)) (list (list 1.0D0 3729.630615234375D0 0.004357574507594109D0 5.047709941864014D0)) (list (list 1.0D0 3729.38720703125D0 0.005322215147316456D0 5.060204029083252D0)) (list (list 1.0D0 3729.4697265625D0 0.0063781640492379666D0 5.072698593139648D0)) (list (list 1.0D0 3729.6806640625D0 0.007294366601854563D0 5.085192680358887D0)) (list (list 1.0D0 3729.75439453125D0 0.007969456724822522D0 5.097687244415283D0)) (list (list 1.0D0 3729.614990234375D0 0.008457661606371403D0 5.1101813316345215D0)) (list (list 1.0D0 3729.484619140625D0 0.008793461136519909D0 5.122675895690918D0)) (list (list 1.0D0 3729.453125D0 0.00885796919465065D0 5.135169982910156D0)) (list (list 1.0D0 3729.279541015625D0 0.008595401421189309D0 5.147664546966553D0)) (list (list 1.0D0 3728.91357421875D0 0.008246551267802716D0 5.160158634185791D0)) (list (list 1.0D0 3728.717529296875D0 0.008149015717208386D0 5.1726531982421875D0)) (list (list 1.0D0 3729.056640625D0 0.008364244364202023D0 5.185147285461426D0)) (list (list 1.0D0 3729.635986328125D0 0.008695614524185658D0 5.197641849517822D0)) (list (list 1.0D0 3729.785888671875D0 0.008795706555247307D0 5.2101359367370606D0)) (list (list 1.0D0 3729.320068359375D0 0.008386887609958649D0 5.222630500793457D0)) (list (list 1.0D0 3728.748779296875D0 0.007483255118131638D0 5.235124588012695D0)) (list (list 1.0D0 3728.67431640625D0 0.00632538553327322D0 5.247619152069092D0)) (list (list 1.0D0 3729.182861328125D0 0.005236129276454449D0 5.26011323928833D0)) (list (list 1.0D0 3729.692626953125D0 0.004336093086749315D0 5.272607803344727D0)) (list (list 1.0D0 3729.3212890625D0 0.003582445904612541D0 5.285101890563965D0)) (list (list 1.0D0 3728.72998046875D0 0.0030233680736273527D0 5.297596454620361D0)) (list (list 1.0D0 3729.01611328125D0 0.0027200980111956597D0 5.3100905418396D0)) (list (list 1.0D0 3729.71826171875D0 0.002703581005334854D0 5.322585105895996D0)) (list (list 1.0D0 3730.057373046875D0 0.0030378589872270823D0 5.335079193115234D0)) (list (list 1.0D0 3730.67626953125D0 0.003765105502679944D0 5.347573757171631D0)) (list (list 1.0D0 3731.501708984375D0 0.004769481718540192D0 5.360067844390869D0)) (list (list 1.0D0 3731.9248046875D0 0.005993120837956667D0 5.372562408447266D0)) (list (list 1.0D0 3732.025634765625D0 0.007503315806388855D0 5.385056495666504D0)) (list (list 1.0D0 3731.593017578125D0 0.009053113870322705D0 5.3975510597229D0)) (list (list 1.0D0 3730.57275390625D0 0.01018108893185854D0 5.410045146942139D0)) (list (list 1.0D0 3729.879638671875D0 0.010870732367038727D0 5.422539710998535D0)) (list (list 1.0D0 3729.693359375D0 0.011331027373671532D0 5.435033798217773D0)) (list (list 1.0D0 3729.43359375D0 0.011608686298131943D0 5.44752836227417D0)) (list (list 1.0D0 3728.981689453125D0 0.01168347243219614D0 5.460022449493408D0)) (list (list 1.0D0 3729.0263671875D0 0.011674965731799603D0 5.472517013549805D0)) (list (list 1.0D0 3729.5771484375D0 0.011643455363810063D0 5.485011100769043D0)) (list (list 1.0D0 3729.7666015625D0 0.011518986895680428D0 5.4975056648254395D0)) (list (list 1.0D0 3729.29931640625D0 0.011382674798369408D0 5.510000228881836D0)) (list (list 1.0D0 3728.78515625D0 0.011500316672027111D0 5.522494316101074D0)) (list (list 1.0D0 3728.755126953125D0 0.011738724075257779D0 5.534988880157471D0)) (list (list 1.0D0 3729.29443359375D0 0.01166447252035141D0 5.547482967376709D0)) (list (list 1.0D0 3730.01611328125D0 0.011196861974895D0 5.5599775314331055D0)) (list (list 1.0D0 3730.591796875D0 0.01081403810530901D0 5.572471618652344D0)) (list (list 1.0D0 3731.26025390625D0 0.01100518275052309D0 5.58496618270874D0)) (list (list 1.0D0 3731.76318359375D0 0.011619089171290398D0 5.5974602699279785D0)) (list (list 1.0D0 3731.247802734375D0 0.012103757821023465D0 5.609954833984375D0)) (list (list 1.0D0 3729.995361328125D0 0.012344990856945515D0 5.622448921203613D0)) (list (list 1.0D0 3728.70361328125D0 0.012454042211174965D0 5.63494348526001D0)) (list (list 1.0D0 3728.05908203125D0 0.012532985769212246D0 5.647437572479248D0)) (list (list 1.0D0 3728.34033203125D0 0.012779658660292626D0 5.6599321365356445D0)) (list (list 1.0D0 3729.062255859375D0 0.013300207443535328D0 5.672426223754883D0)) (list (list 1.0D0 3729.26171875D0 0.013771696016192437D0 5.684920787811279D0)) (list (list 1.0D0 3728.59521484375D0 0.013805271126329899D0 5.697414875030518D0)) (list (list 1.0D0 3727.668701171875D0 0.013296501711010933D0 5.709909439086914D0)) (list (list 1.0D0 3727.33740234375D0 0.012047488242387772D0 5.722403526306152D0)) (list (list 1.0D0 3727.800537109375D0 0.009875093586742878D0 5.734898090362549D0)) (list (list 1.0D0 3728.655517578125D0 0.007096834480762482D0 5.747392177581787D0)) (list (list 1.0D0 3729.115478515625D0 0.004747589118778706D0 5.759886741638184D0)) (list (list 1.0D0 3729.44970703125D0 0.004148684907704592D0 5.772380828857422D0)) (list (list 1.0D0 3729.912841796875D0 0.005508009810000658D0 5.784875392913818D0)) (list (list 1.0D0 3729.5703125D0 0.007409190759062767D0 5.797369480133057D0)) (list (list 1.0D0 3729.250244140625D0 0.008425074629485608D0 5.809864044189453D0)) (list (list 1.0D0 3730.104736328125D0 0.008676520548760891D0 5.822358131408691D0)) (list (list 1.0D0 3731.72509765625D0 0.009614837355911732D0 5.834852695465088D0)) (list (list 1.0D0 3732.905517578125D0 0.012035971507430077D0 5.847346782684326D0)) (list (list 1.0D0 3732.390625D0 0.014972073957324028D0 5.859841346740723D0)) (list (list 1.0D0 3731.358154296875D0 0.017590893432497978D0 5.872335433959961D0)) (list (list 1.0D0 3730.732177734375D0 0.019634004682302475D0 5.884829998016357D0)) (list (list 1.0D0 3730.093505859375D0 0.021058814600110054D0 5.897324085235596D0)) (list (list 1.0D0 3729.179443359375D0 0.02174602635204792D0 5.909818649291992D0)) (list (list 1.0D0 3728.55908203125D0 0.021593179553747177D0 5.9223127365112305D0)) (list (list 1.0D0 3728.600830078125D0 0.02085360698401928D0 5.934807300567627D0)) (list (list 1.0D0 3728.85546875D0 0.020334627479314804D0 5.947301387786865D0)) (list (list 1.0D0 3729.080322265625D0 0.020597146824002266D0 5.959795951843262D0)) (list (list 1.0D0 3729.50048828125D0 0.021487176418304444D0 5.9722900390625D0)) (list (list 1.0D0 3729.943115234375D0 0.02239016816020012D0 5.9847846031188965D0)) (list (list 1.0D0 3729.888671875D0 0.022789962589740753D0 5.997278690338135D0)) (list (list 1.0D0 3729.53759765625D0 0.022827019914984703D0 6.009773254394531D0)) (list (list 1.0D0 3729.575439453125D0 0.02289091981947422D0 6.0222673416137695D0)) (list (list 1.0D0 3730.045166015625D0 0.023186003789305687D0 6.034761905670166D0)) (list (list 1.0D0 3730.441650390625D0 0.023639574646949768D0 6.0472564697265625D0)) (list (list 1.0D0 3730.59228515625D0 0.0240926630795002D0 6.059750556945801D0)) (list (list 1.0D0 3730.43505859375D0 0.024355825036764145D0 6.072245121002197D0)) (list (list 1.0D0 3729.658447265625D0 0.02411997877061367D0 6.0847392082214356D0)) (list (list 1.0D0 3728.529296875D0 0.023275630548596382D0 6.097233772277832D0)) (list (list 1.0D0 3727.778564453125D0 0.02184430882334709D0 6.10972785949707D0)) (list (list 1.0D0 3727.919677734375D0 0.020280638709664345D0 6.122222423553467D0)) (list (list 1.0D0 3728.6318359375D0 0.01955578103661537D0 6.134716510772705D0)) (list (list 1.0D0 3729.196533203125D0 0.02008109539747238D0 6.147211074829102D0)) (list (list 1.0D0 3729.372802734375D0 0.021234463900327683D0 6.15970516204834D0)) (list (list 1.0D0 3729.4736328125D0 0.022255828604102135D0 6.172199726104736D0)) (list (list 1.0D0 3729.442138671875D0 0.022776655852794647D0 6.184693813323975D0)) (list (list 1.0D0 3728.892578125D0 0.022784436121582985D0 6.197188377380371D0)) (list (list 1.0D0 3728.208740234375D0 0.022641250863671303D0 6.209682464599609D0)) (list (list 1.0D0 3728.18505859375D0 0.022675493732094765D0 6.222177028656006D0)) (list (list 1.0D0 3728.888916015625D0 0.02293609082698822D0 6.234671115875244D0)) (list (list 1.0D0 3729.79541015625D0 0.023153966292738915D0 6.247165679931641D0)) (list (list 1.0D0 3730.464111328125D0 0.022916514426469803D0 6.259659767150879D0)) (list (list 1.0D0 3730.664306640625D0 0.02219376713037491D0 6.272154331207275D0)) (list (list 1.0D0 3730.44873046875D0 0.021379780024290085D0 6.284648418426514D0)) (list (list 1.0D0 3730.12744140625D0 0.020876942202448845D0 6.29714298248291D0)) (list (list 1.0D0 3729.93505859375D0 0.020701222121715546D0 6.309637069702148D0)) (list (list 1.0D0 3729.873046875D0 0.020605530589818955D0 6.322131633758545D0)) (list (list 1.0D0 3729.780517578125D0 0.0203591026365757D0 6.334625720977783D0)) (list (list 1.0D0 3729.56982421875D0 0.019977135583758354D0 6.34712028503418D0)) (list (list 1.0D0 3729.395751953125D0 0.01977067068219185D0 6.359614372253418D0)) (list (list 1.0D0 3729.464111328125D0 0.019904565066099167D0 6.3721089363098145D0)) (list (list 1.0D0 3729.687744140625D0 0.02013046108186245D0 6.384603023529053D0)) (list (list 1.0D0 3729.772705078125D0 0.0200322438031435D0 6.397097587585449D0)) (list (list 1.0D0 3729.611328125D0 0.01942383497953415D0 6.4095916748046875D0)) (list (list 1.0D0 3729.216552734375D0 0.018376704305410385D0 6.422086238861084D0)) (list (list 1.0D0 3728.745849609375D0 0.017163177952170372D0 6.434580326080322D0)) (list (list 1.0D0 3728.531982421875D0 0.016170646995306015D0 6.447074890136719D0)) (list (list 1.0D0 3728.62060546875D0 0.015606955625116825D0 6.459568977355957D0)) (list (list 1.0D0 3728.7783203125D0 0.015295132994651795D0 6.4720635414123535D0)) (list (list 1.0D0 3728.822265625D0 0.014818137511610985D0 6.484557628631592D0)) (list (list 1.0D0 3728.5751953125D0 0.013973905704915524D0 6.497052192687988D0)) (list (list 1.0D0 3727.9482421875D0 0.01298554614186287D0 6.509546279907227D0)) (list (list 1.0D0 3727.5078125D0 0.012234102003276348D0 6.522040843963623D0)) (list (list 1.0D0 3727.93603515625D0 0.01173507608473301D0 6.534534931182861D0)) (list (list 1.0D0 3729.07373046875D0 0.011287305504083634D0 6.547029495239258D0)) (list (list 1.0D0 3730.258056640625D0 0.01062163058668375D0 6.559523582458496D0)) (list (list 1.0D0 3731.283203125D0 0.00952125620096922D0 6.572018146514893D0)) (list (list 1.0D0 3731.906005859375D0 0.007939379662275315D0 6.584512233734131D0)) (list (list 1.0D0 3732.01904296875D0 0.006051911972463131D0 6.597006797790527D0)) (list (list 1.0D0 3732.077880859375D0 0.004190255422145128D0 6.609501361846924D0)) (list (list 1.0D0 3731.739990234375D0 0.0025718905963003636D0 6.621995449066162D0)) (list (list 1.0D0 3728.544677734375D0 0.0013884626096114517D0 6.634490013122559D0)) (list (list 1.0D0 3726.17529296875D0 7.99227855168283D-4 6.646984100341797D0)) (list (list 1.0D0 3727.094482421875D0 5.504851578734815D-4 6.659478664398193D0)) (list (list 1.0D0 3729.744140625D0 4.3065761565230787D-4 6.671972751617432D0)) (list (list 1.0D0 3728.1376953125D0 2.9154072399251163D-4 6.684467315673828D0)) (list (list 1.0D0 3743.62841796875D0 8.834939217194915D-5 6.696961402893066D0)) (list (list 1.0D0 3727.2529296875D0 1.4854077016934753D-4 6.734444618225098D0)) (list (list 1.0D0 3728.288818359375D0 1.4045443094801158D-4 6.746938705444336D0)) (list (list 1.0D0 3728.288818359375D0 0.0D0 6.759433269500732D0)) (list (list 2.0D0 2821.90380859375D0 1.884142548078671D-4 0.0D0)) (list (list 2.0D0 2811.364013671875D0 6.068285438232124D-4 0.01249433122575283D0)) (list (list 2.0D0 2846.532470703125D0 2.2487771639134735D-4 0.03748299181461334D0)) (list (list 2.0D0 2817.353515625D0 0.001110212760977447D0 0.04997732490301132D0)) (list (list 2.0D0 2831.029052734375D0 6.749643362127245D-4 0.062471654266119D0)) (list (list 2.0D0 2835.270263671875D0 8.114844094961882D-4 0.07496598362922669D0)) (list (list 2.0D0 2830.359619140625D0 0.0010238512186333538D0 0.08746031671762467D0)) (list (list 2.0D0 2792.601318359375D0 0.005213298834860325D0 0.09995464980602265D0)) (list (list 2.0D0 2811.85009765625D0 0.0019746532198041678D0 0.11244898289442063D0)) (list (list 2.0D0 2809.98095703125D0 0.0016462451312690974D0 0.124943308532238D0)) (list (list 2.0D0 2782.796142578125D0 0.005222138483077288D0 0.137437641620636D0)) (list (list 2.0D0 2809.2431640625D0 0.0033278551418334246D0 0.14993196725845337D0)) (list (list 2.0D0 2806.7177734375D0 0.004529817961156368D0 0.16242630779743195D0)) (list (list 2.0D0 2827.81640625D0 0.0011097887763753534D0 0.17492063343524933D0)) (list (list 2.0D0 2796.67578125D0 0.014381587505340577D0 0.1874149590730667D0)) (list (list 2.0D0 2795.750732421875D0 0.02032952383160591D0 0.1999092996120453D0)) (list (list 2.0D0 2795.057861328125D0 0.025283506140112877D0 0.21240362524986267D0)) (list (list 2.0D0 2795.0498046875D0 0.027933312579989434D0 0.22489796578884125D0)) (list (list 2.0D0 2795.255615234375D0 0.028563395142555237D0 0.23739229142665863D0)) (list (list 2.0D0 2795.586669921875D0 0.02820720337331295D0 0.249886617064476D0)) (list (list 2.0D0 2796.04345703125D0 0.027625372633337975D0 0.2623809576034546D0)) (list (list 2.0D0 2796.490234375D0 0.02713175117969513D0 0.274875283241272D0)) (list (list 2.0D0 2797.09326171875D0 0.026203542947769165D0 0.28736960887908936D0)) (list (list 2.0D0 2797.9970703125D0 0.023990722373127938D0 0.29986393451690674D0)) (list (list 2.0D0 2798.4755859375D0 0.020720452070236206D0 0.3123582899570465D0)) (list (list 2.0D0 2797.927734375D0 0.018018487840890885D0 0.3248526155948639D0)) (list (list 2.0D0 2797.46826171875D0 0.017341505736112595D0 0.3373469412326813D0)) (list (list 2.0D0 2798.3515625D0 0.017765864729881287D0 0.34984126687049866D0)) (list (list 2.0D0 2800.333740234375D0 0.017870880663394928D0 0.36233559250831604D0)) (list (list 2.0D0 2801.409912109375D0 0.017472388222813606D0 0.3748299181461334D0)) (list (list 2.0D0 2800.935546875D0 0.017257217317819596D0 0.3873242437839508D0)) (list (list 2.0D0 2798.91357421875D0 0.01781241036951542D0 0.3998185992240906D0)) (list (list 2.0D0 2796.70703125D0 0.018838874995708466D0 0.41231292486190796D0)) (list (list 2.0D0 2795.656982421875D0 0.019251931458711624D0 0.42480725049972534D0)) (list (list 2.0D0 2795.70556640625D0 0.018476340919733048D0 0.4373015761375427D0)) (list (list 2.0D0 2796.479248046875D0 0.016731971874833107D0 0.4497959315776825D0)) (list (list 2.0D0 2797.228515625D0 0.014637664891779423D0 0.4622902572154999D0)) (list (list 2.0D0 2797.430419921875D0 0.012876205146312714D0 0.47478458285331726D0)) (list (list 2.0D0 2797.3486328125D0 0.011892060749232769D0 0.48727890849113465D0)) (list (list 2.0D0 2797.53466796875D0 0.011624223552644253D0 0.499773234128952D0)) (list (list 2.0D0 2797.928466796875D0 0.011606431566178799D0 0.5122675895690918D0)) (list (list 2.0D0 2798.57080078125D0 0.011449581012129784D0 0.5247619152069092D0)) (list (list 2.0D0 2799.2001953125D0 0.011675551533699036D0 0.5372562408447266D0)) (list (list 2.0D0 2798.503173828125D0 0.01317758671939373D0 0.549750566482544D0)) (list (list 2.0D0 2796.166259765625D0 0.016448916867375374D0 0.5622448921203613D0)) (list (list 2.0D0 2794.552490234375D0 0.02066408470273018D0 0.5747392177581787D0)) (list (list 2.0D0 2794.666015625D0 0.023988336324691773D0 0.5872335433959961D0)) (list (list 2.0D0 2795.030029296875D0 0.026238583028316498D0 0.5997278690338135D0)) (list (list 2.0D0 2795.25439453125D0 0.027566103264689446D0 0.6122221946716309D0)) (list (list 2.0D0 2795.671875D0 0.027950512245297432D0 0.624716579914093D0)) (list (list 2.0D0 2796.12109375D0 0.02773953042924404D0 0.6372109055519104D0)) (list (list 2.0D0 2796.24951171875D0 0.027496859431266785D0 0.6497052311897278D0)) (list (list 2.0D0 2796.40576171875D0 0.027210677042603493D0 0.6621995568275452D0)) (list (list 2.0D0 2796.8779296875D0 0.026467353105545044D0 0.6746938824653626D0)) (list (list 2.0D0 2797.155029296875D0 0.025252753868699074D0 0.6871882081031799D0)) (list (list 2.0D0 2797.018310546875D0 0.023892749100923538D0 0.6996825337409973D0)) (list (list 2.0D0 2797.063720703125D0 0.02247263304889202D0 0.7121768593788147D0)) (list (list 2.0D0 2797.563720703125D0 0.021013950929045677D0 0.7246711850166321D0)) (list (list 2.0D0 2797.84765625D0 0.019885500892996788D0 0.7371655106544495D0)) (list (list 2.0D0 2797.77490234375D0 0.01922689750790596D0 0.7496598362922669D0)) (list (list 2.0D0 2797.84228515625D0 0.018679523840546608D0 0.762154221534729D0)) (list (list 2.0D0 2798.057861328125D0 0.017976844683289528D0 0.7746485471725464D0)) (list (list 2.0D0 2797.98193359375D0 0.017326034605503083D0 0.7871428728103638D0)) (list (list 2.0D0 2797.730712890625D0 0.016934935003519058D0 0.7996371984481812D0)) (list (list 2.0D0 2797.689208984375D0 0.01674271933734417D0 0.8121315240859985D0)) (list (list 2.0D0 2797.72412109375D0 0.016630852594971657D0 0.8246258497238159D0)) (list (list 2.0D0 2797.810546875D0 0.016360657289624214D0 0.8371201753616333D0)) (list (list 2.0D0 2798.073974609375D0 0.01583017222583294D0 0.8496145009994507D0)) (list (list 2.0D0 2797.803955078125D0 0.01566164754331112D0 0.8621088266372681D0)) (list (list 2.0D0 2796.673828125D0 0.01687105931341648D0 0.8746031522750855D0)) (list (list 2.0D0 2795.352783203125D0 0.01965554617345333D0 0.8870974779129028D0)) (list (list 2.0D0 2794.627197265625D0 0.022870538756251335D0 0.899591863155365D0)) (list (list 2.0D0 2794.330322265625D0 0.025282379239797592D0 0.9120861887931824D0)) (list (list 2.0D0 2794.540283203125D0 0.02597051113843918D0 0.9245805144309998D0)) (list (list 2.0D0 2795.305419921875D0 0.024736812338232994D0 0.9370748400688171D0)) (list (list 2.0D0 2796.07666015625D0 0.022320736199617386D0 0.9495691657066345D0)) (list (list 2.0D0 2796.78857421875D0 0.0195761788636446D0 0.9620634913444519D0)) (list (list 2.0D0 2797.459716796875D0 0.017305660992860794D0 0.9745578169822693D0)) (list (list 2.0D0 2797.783447265625D0 0.016093110665678978D0 0.9870521426200867D0)) (list (list 2.0D0 2797.74267578125D0 0.01589217036962509D0 0.999546468257904D0)) (list (list 2.0D0 2797.4931640625D0 0.016090745106339455D0 1.0120408535003662D0)) (list (list 2.0D0 2797.161376953125D0 0.016198229044675827D0 1.0245351791381836D0)) (list (list 2.0D0 2797.031005859375D0 0.016064021736383438D0 1.037029504776001D0)) (list (list 2.0D0 2797.322509765625D0 0.01548154279589653D0 1.0495238304138184D0)) (list (list 2.0D0 2797.8310546875D0 0.014410790987312794D0 1.0620181560516358D0)) (list (list 2.0D0 2798.2529296875D0 0.01341972965747118D0 1.0745124816894532D0)) (list (list 2.0D0 2798.1318359375D0 0.013364371843636036D0 1.0870068073272705D0)) (list (list 2.0D0 2797.250244140625D0 0.014481392689049244D0 1.099501132965088D0)) (list (list 2.0D0 2796.3125D0 0.01590188965201378D0 1.1119954586029053D0)) (list (list 2.0D0 2796.295654296875D0 0.016415564343333245D0 1.1244897842407227D0)) (list (list 2.0D0 2796.65576171875D0 0.016026416793465615D0 1.13698410987854D0)) (list (list 2.0D0 2796.70166015625D0 0.015498361550271511D0 1.1494784355163575D0)) (list (list 2.0D0 2796.53955078125D0 0.01514534279704094D0 1.1619727611541748D0)) (list (list 2.0D0 2796.542236328125D0 0.014764619059860707D0 1.1744670867919922D0)) (list (list 2.0D0 2796.708251953125D0 0.014203543774783612D0 1.1869614124298096D0)) (list (list 2.0D0 2796.927734375D0 0.013592648319900036D0 1.199455738067627D0)) (list (list 2.0D0 2797.042724609375D0 0.013339354656636715D0 1.2119500637054444D0)) (list (list 2.0D0 2796.903564453125D0 0.013730197213590145D0 1.2244443893432618D0)) (list (list 2.0D0 2796.573486328125D0 0.014380154199898243D0 1.236938714981079D0)) (list (list 2.0D0 2796.247802734375D0 0.014499371871352196D0 1.249433159828186D0)) (list (list 2.0D0 2796.078369140625D0 0.013933087699115277D0 1.2619274854660035D0)) (list (list 2.0D0 2796.16259765625D0 0.013289331458508969D0 1.2744218111038208D0)) (list (list 2.0D0 2796.394775390625D0 0.013154445216059685D0 1.2869161367416382D0)) (list (list 2.0D0 2796.301513671875D0 0.013589199632406235D0 1.2994104623794556D0)) (list (list 2.0D0 2795.84814453125D0 0.014085312373936177D0 1.311904788017273D0)) (list (list 2.0D0 2795.592041015625D0 0.013802677392959595D0 1.3243991136550904D0)) (list (list 2.0D0 2795.826904296875D0 0.012214353308081627D0 1.3368934392929078D0)) (list (list 2.0D0 2796.308349609375D0 0.009823090396821499D0 1.349387764930725D0)) (list (list 2.0D0 2796.94482421875D0 0.007682142313569784D0 1.3618820905685425D0)) (list (list 2.0D0 2797.420166015625D0 0.006509766448289156D0 1.3743764162063599D0)) (list (list 2.0D0 2797.271484375D0 0.006214412860572338D0 1.3868707418441773D0)) (list (list 2.0D0 2797.17431640625D0 0.006274135317653418D0 1.3993650674819947D0)) (list (list 2.0D0 2798.21484375D0 0.0062584360130131245D0 1.411859393119812D0)) (list (list 2.0D0 2799.438720703125D0 0.006107904016971588D0 1.4243537187576294D0)) (list (list 2.0D0 2798.967041015625D0 0.005803222768008709D0 1.4368480443954468D0)) (list (list 2.0D0 2797.13525390625D0 0.005549433641135693D0 1.4493423700332642D0)) (list (list 2.0D0 2796.195556640625D0 0.005467122420668602D0 1.4618366956710816D0)) (list (list 2.0D0 2796.90087890625D0 0.00545348459854722D0 1.474331021308899D0)) (list (list 2.0D0 2797.39990234375D0 0.005510839633643627D0 1.4868253469467163D0)) (list (list 2.0D0 2796.887451171875D0 0.005438569933176041D0 1.4993196725845337D0)) (list (list 2.0D0 2796.215576171875D0 0.005116273649036884D0 1.5118141174316407D0)) (list (list 2.0D0 2795.630859375D0 0.004608732182532549D0 1.524308443069458D0)) (list (list 2.0D0 2795.0634765625D0 0.00404808996245265D0 1.5368027687072754D0)) (list (list 2.0D0 2795.790283203125D0 0.003451579948887229D0 1.5492970943450928D0)) (list (list 2.0D0 2797.79638671875D0 0.0029447986744344235D0 1.5617914199829102D0)) (list (list 2.0D0 2798.83203125D0 0.0026435796171426773D0 1.5742857456207276D0)) (list (list 2.0D0 2798.4111328125D0 0.002475402085110545D0 1.586780071258545D0)) (list (list 2.0D0 2798.34619140625D0 0.0023702839389443398D0 1.5992743968963623D0)) (list (list 2.0D0 2798.6728515625D0 0.0022421611938625574D0 1.6117687225341797D0)) (list (list 2.0D0 2796.45068359375D0 0.0019993979949504137D0 1.624263048171997D0)) (list (list 2.0D0 2790.7783203125D0 0.0019853191915899515D0 1.6367573738098145D0)) (list (list 2.0D0 2788.44287109375D0 0.0022225994616746903D0 1.6492516994476319D0)) (list (list 2.0D0 2791.631591796875D0 0.0022032258566468954D0 1.6617460250854493D0)) (list (list 2.0D0 2795.802001953125D0 0.0021289775613695383D0 1.6742403507232666D0)) (list (list 2.0D0 2796.0126953125D0 0.0017673526890575886D0 1.686734676361084D0)) (list (list 2.0D0 2822.16162109375D0 8.607888594269753D-4 1.6992290019989014D0)) (list (list 2.0D0 2822.16162109375D0 0.0D0 1.7117233276367188D0)) (list (list 3.0D0 2762.809814453125D0 7.14545079972595D-4 0.0D0)) (list (list 3.0D0 2769.558837890625D0 0.0017016369383782149D0 0.01249433122575283D0)) (list (list 3.0D0 2741.5830078125D0 6.97616720572114D-4 0.02498866245150566D0)) (list (list 3.0D0 2739.25390625D0 8.050797041505575D-4 0.03748299181461334D0)) (list (list 3.0D0 2735.45703125D0 9.279903024435043D-4 0.04997732490301132D0)) (list (list 3.0D0 2731.416259765625D0 0.0011981063289567829D0 0.062471654266119D0)) (list (list 3.0D0 2729.48974609375D0 0.0013645150465890766D0 0.07496598362922669D0)) (list (list 3.0D0 2725.961669921875D0 0.0011916978983208538D0 0.08746031671762467D0)) (list (list 3.0D0 2722.819580078125D0 9.207279654219747D-4 0.09995464980602265D0)) (list (list 3.0D0 2721.324951171875D0 7.743622991256416D-4 0.11244898289442063D0)) (list (list 3.0D0 2715.182861328125D0 6.270364974625409D-4 0.124943308532238D0)) (list (list 3.0D0 2706.186279296875D0 6.983966450206935D-4 0.137437641620636D0)) (list (list 3.0D0 2732.166748046875D0 8.491448243148625D-4 0.14993196725845337D0)) (list (list 3.0D0 2732.099853515625D0 0.001410705503076315D0 0.16242630779743195D0)) (list (list 3.0D0 2730.767822265625D0 0.0019712571520358324D0 0.17492063343524933D0)) (list (list 3.0D0 2729.88134765625D0 0.0023645281326025725D0 0.1874149590730667D0)) (list (list 3.0D0 2728.7490234375D0 0.0025279915425926447D0 0.1999092996120453D0)) (list (list 3.0D0 2729.461669921875D0 0.0024028171319514513D0 0.21240362524986267D0)) (list (list 3.0D0 2733.183349609375D0 0.0021875547245144844D0 0.22489796578884125D0)) (list (list 3.0D0 2737.708984375D0 0.0021945417392998934D0 0.23739229142665863D0)) (list (list 3.0D0 2739.1064453125D0 0.002048551570624113D0 0.249886617064476D0)) (list (list 3.0D0 2735.70849609375D0 0.0016120525542646647D0 0.2623809576034546D0)) (list (list 3.0D0 2735.3369140625D0 0.0013083596713840962D0 0.274875283241272D0)) (list (list 3.0D0 2750.53173828125D0 0.0012891353107988835D0 0.28736960887908936D0)) (list (list 3.0D0 2749.502685546875D0 0.0015783306444063783D0 0.29986393451690674D0)) (list (list 3.0D0 2753.9150390625D0 0.0014769370900467039D0 0.3123582899570465D0)) (list (list 3.0D0 2756.915283203125D0 0.0012321368558332324D0 0.3248526155948639D0)) (list (list 3.0D0 2727.325439453125D0 6.83880818542093D-4 0.3373469412326813D0)) (list (list 3.0D0 2719.343505859375D0 9.132814593613148D-4 0.34984126687049866D0)) (list (list 3.0D0 2722.04931640625D0 0.0010438122553750873D0 0.36233559250831604D0)) (list (list 3.0D0 2742.217529296875D0 0.00143427774310112D0 0.3748299181461334D0)) (list (list 3.0D0 2739.412353515625D0 0.0017238582950085402D0 0.3873242437839508D0)) (list (list 3.0D0 2742.975341796875D0 0.0016693263314664364D0 0.3998185992240906D0)) (list (list 3.0D0 2759.899658203125D0 0.0020115752704441548D0 0.41231292486190796D0)) (list (list 3.0D0 2763.45654296875D0 0.0021848632022738457D0 0.42480725049972534D0)) (list (list 3.0D0 2729.969970703125D0 9.787296876311303D-4 0.4373015761375427D0)) (list (list 3.0D0 2707.787109375D0 8.514545042999089D-4 0.4497959315776825D0)) (list (list 3.0D0 2729.779052734375D0 8.718736935406923D-4 0.4622902572154999D0)) (list (list 3.0D0 2712.04150390625D0 0.0014025198761373759D0 0.47478458285331726D0)) (list (list 3.0D0 2715.625D0 0.0014992777723819018D0 0.48727890849113465D0)) (list (list 3.0D0 2724.19970703125D0 0.001253322116099298D0 0.499773234128952D0)) (list (list 3.0D0 2748.524169921875D0 0.0022064941003918648D0 0.5122675895690918D0)) (list (list 3.0D0 2743.58349609375D0 0.0016328581841662527D0 0.5247619152069092D0)) (list (list 3.0D0 2743.734130859375D0 9.854343952611089D-4 0.5372562408447266D0)) (list (list 3.0D0 2707.8603515625D0 0.001621971488930285D0 0.5747392177581787D0)) (list (list 3.0D0 2706.19384765625D0 0.0014011346502229572D0 0.5872335433959961D0)) (list (list 3.0D0 2709.870849609375D0 0.0010709947673603893D0 0.5997278690338135D0)) (list (list 3.0D0 2746.851806640625D0 0.0015821713022887707D0 0.6122221946716309D0)) (list (list 3.0D0 2724.240966796875D0 0.0014115002704784275D0 0.624716579914093D0)) (list (list 3.0D0 2718.96826171875D0 0.0012085341149941087D0 0.6372109055519104D0)) (list (list 3.0D0 2713.1796875D0 0.0011311311973258853D0 0.6497052311897278D0)) (list (list 3.0D0 2713.4990234375D0 9.467825293540955D-4 0.6621995568275452D0)) (list (list 3.0D0 2718.498046875D0 8.261194452643395D-4 0.6746938824653626D0)) (list (list 3.0D0 2722.871826171875D0 8.764071390032768D-4 0.6871882081031799D0)) (list (list 3.0D0 2725.353515625D0 8.829653379507363D-4 0.6996825337409973D0)) (list (list 3.0D0 2726.12060546875D0 8.606630726717413D-4 0.7121768593788147D0)) (list (list 3.0D0 2720.978759765625D0 8.834968903101981D-4 0.7246711850166321D0)) (list (list 3.0D0 2716.30126953125D0 0.0011650274973362685D0 0.7371655106544495D0)) (list (list 3.0D0 2716.986083984375D0 0.0012669708812609315D0 0.7496598362922669D0)) (list (list 3.0D0 2719.671142578125D0 0.001034933957271278D0 0.762154221534729D0)) (list (list 3.0D0 2713.764892578125D0 6.016562692821026D-4 0.7746485471725464D0)) (list (list 3.0D0 2708.028076171875D0 4.6856363769620657D-4 0.7871428728103638D0)) (list (list 3.0D0 2702.407958984375D0 5.813668831251562D-4 0.7996371984481812D0)) (list (list 3.0D0 2702.329345703125D0 6.800867849960923D-4 0.8121315240859985D0)) (list (list 3.0D0 2702.864990234375D0 7.387722143903375D-4 0.8246258497238159D0)) (list (list 3.0D0 2707.16015625D0 7.122307433746755D-4 0.8371201753616333D0)) (list (list 3.0D0 2708.638916015625D0 6.681744125671685D-4 0.8496145009994507D0)) (list (list 3.0D0 2706.802490234375D0 6.758985691703856D-4 0.8621088266372681D0)) (list (list 3.0D0 2705.314453125D0 7.688758196309209D-4 0.8746031522750855D0)) (list (list 3.0D0 2711.443603515625D0 7.146933348849416D-4 0.8870974779129028D0)) (list (list 3.0D0 2733.434814453125D0 7.491894066333771D-4 0.899591863155365D0)) (list (list 3.0D0 2741.144775390625D0 7.09850515704602D-4 0.9120861887931824D0)) (list (list 3.0D0 2718.850341796875D0 8.725647930987179D-4 0.9245805144309998D0)) (list (list 3.0D0 2743.913330078125D0 0.0013342483434826136D0 0.9370748400688171D0)) (list (list 3.0D0 2733.251708984375D0 0.0014200406149029732D0 0.9495691657066345D0)) (list (list 3.0D0 2732.73291015625D0 0.0010928674601018429D0 0.9620634913444519D0)) (list (list 3.0D0 2735.66259765625D0 6.568058161064982D-4 0.9745578169822693D0)) (list (list 3.0D0 2764.780029296875D0 0.0018422342836856842D0 0.999546468257904D0)) (list (list 3.0D0 2759.17919921875D0 0.0014999000122770667D0 1.0120408535003662D0)) (list (list 3.0D0 2754.439697265625D0 0.0012727793073281646D0 1.0245351791381836D0)) (list (list 3.0D0 2754.055908203125D0 0.0013431624975055457D0 1.037029504776001D0)) (list (list 3.0D0 2731.770263671875D0 9.168062242679298D-4 1.0495238304138184D0)) (list (list 3.0D0 2704.261962890625D0 7.011608686298132D-4 1.0620181560516358D0)) (list (list 3.0D0 2708.0087890625D0 5.873924819752574D-4 1.0745124816894532D0)) (list (list 3.0D0 2712.4130859375D0 5.498245009221137D-4 1.0870068073272705D0)) (list (list 3.0D0 2739.33349609375D0 0.0017978394171223045D0 1.099501132965088D0)) (list (list 3.0D0 2737.657470703125D0 0.001589024905115366D0 1.1119954586029053D0)) (list (list 3.0D0 2737.24755859375D0 0.001126537099480629D0 1.1244897842407227D0)) (list (list 3.0D0 2736.233642578125D0 5.925992736592889D-4 1.13698410987854D0)) (list (list 3.0D0 2704.44287109375D0 7.102921372279525D-4 1.1494784355163575D0)) (list (list 3.0D0 2706.7685546875D0 9.620083146728575D-4 1.1619727611541748D0)) (list (list 3.0D0 2705.101318359375D0 0.0010801663156598807D0 1.1744670867919922D0)) (list (list 3.0D0 2704.763916015625D0 0.0011315683368593455D0 1.1869614124298096D0)) (list (list 3.0D0 2707.939697265625D0 0.001096390769816935D0 1.199455738067627D0)) (list (list 3.0D0 2749.93359375D0 9.216113830916584D-4 1.2119500637054444D0)) (list (list 3.0D0 2769.243896484375D0 0.0015275374753400684D0 1.2244443893432618D0)) (list (list 3.0D0 2731.369384765625D0 0.0013232309138402343D0 1.236938714981079D0)) (list (list 3.0D0 2701.265869140625D0 0.0011134488740935922D0 1.249433159828186D0)) (list (list 3.0D0 2699.54541015625D0 0.0011702521005645395D0 1.2619274854660035D0)) (list (list 3.0D0 2693.507080078125D0 9.245405090041459D-4 1.2744218111038208D0)) (list (list 3.0D0 2690.572998046875D0 7.212328491732478D-4 1.2869161367416382D0)) (list (list 3.0D0 2721.96337890625D0 8.846388664096594D-4 1.311904788017273D0)) (list (list 3.0D0 2725.216064453125D0 0.0015452337684109807D0 1.3243991136550904D0)) (list (list 3.0D0 2729.177734375D0 0.0020292741246521473D0 1.3368934392929078D0)) (list (list 3.0D0 2756.880615234375D0 0.0017040667589753867D0 1.349387764930725D0)) (list (list 3.0D0 2755.822265625D0 0.0015287190908566118D0 1.3618820905685425D0)) (list (list 3.0D0 2752.77978515625D0 0.0010540763614699245D0 1.3743764162063599D0)) (list (list 3.0D0 2746.927978515625D0 8.784286328591406D-4 1.3868707418441773D0)) (list (list 3.0D0 2714.11767578125D0 8.81956540979445D-4 1.3993650674819947D0)) (list (list 3.0D0 2711.856689453125D0 9.738272055983543D-4 1.411859393119812D0)) (list (list 3.0D0 2710.2412109375D0 0.001122613437473774D0 1.4243537187576294D0)) (list (list 3.0D0 2709.8740234375D0 0.0011625628685578704D0 1.4368480443954468D0)) (list (list 3.0D0 2717.8515625D0 9.242742671631277D-4 1.4493423700332642D0)) (list (list 3.0D0 2725.0078125D0 0.0010232325876131654D0 1.4618366956710816D0)) (list (list 3.0D0 2695.888671875D0 0.0010211040498688817D0 1.474331021308899D0)) (list (list 3.0D0 2701.423583984375D0 9.966305224224925D-4 1.4868253469467163D0)) (list (list 3.0D0 2732.57421875D0 0.0010818005539476872D0 1.4993196725845337D0)) (list (list 3.0D0 2733.790283203125D0 0.0011152775259688497D0 1.5118141174316407D0)) (list (list 3.0D0 2735.017578125D0 0.0010730637004598976D0 1.524308443069458D0)) (list (list 3.0D0 2757.677001953125D0 7.867293898016214D-4 1.5492970943450928D0)) (list (list 3.0D0 2752.228759765625D0 9.305987041443586D-4 1.5742857456207276D0)) (list (list 3.0D0 2750.816650390625D0 0.001156394835561514D0 1.586780071258545D0)) (list (list 3.0D0 2752.5390625D0 0.0012291691964492202D0 1.5992743968963623D0)) (list (list 3.0D0 2753.214111328125D0 0.001228060689754784D0 1.6117687225341797D0)) (list (list 3.0D0 2752.087890625D0 0.001200303086079657D0 1.624263048171997D0)) (list (list 3.0D0 2752.834716796875D0 0.0011534863151609898D0 1.6367573738098145D0)) (list (list 3.0D0 2757.669677734375D0 0.0010535357287153602D0 1.6492516994476319D0)) (list (list 3.0D0 2768.1572265625D0 8.099306141957641D-4 1.6742403507232666D0)) (list (list 3.0D0 2767.326171875D0 6.515100249089301D-4 1.686734676361084D0)) (list (list 3.0D0 2745.632568359375D0 5.544574232771993D-4 1.6992290019989014D0)) (list (list 3.0D0 2773.485595703125D0 9.36015450861305D-4 1.7117233276367188D0)) (list (list 3.0D0 2774.80908203125D0 0.0013230984332039953D0 1.7242176532745362D0)) (list (list 3.0D0 2788.847412109375D0 0.0020602685399353505D0 1.7367119789123536D0)) (list (list 3.0D0 2792.076416015625D0 0.0023530556354671717D0 1.749206304550171D0)) (list (list 3.0D0 2796.86474609375D0 0.0025762589648365975D0 1.7617006301879883D0)) (list (list 3.0D0 2798.908203125D0 0.0027659782208502293D0 1.7741949558258057D0)) (list (list 3.0D0 2797.961669921875D0 0.0027198102325201035D0 1.7866894006729126D0)) (list (list 3.0D0 2798.217529296875D0 0.002877640537917614D0 1.79918372631073D0)) (list (list 3.0D0 2799.70263671875D0 0.0034895807038992644D0 1.8116780519485474D0)) (list (list 3.0D0 2799.845458984375D0 0.004173188470304012D0 1.8241723775863648D0)) (list (list 3.0D0 2798.109375D0 0.004415574017912149D0 1.8366667032241822D0)) (list (list 3.0D0 2796.653076171875D0 0.004365655593574047D0 1.8491610288619996D0)) (list (list 3.0D0 2796.165283203125D0 0.0043440042063593865D0 1.861655354499817D0)) (list (list 3.0D0 2796.91748046875D0 0.004518185742199421D0 1.8741496801376343D0)) (list (list 3.0D0 2797.458984375D0 0.0048450808972120285D0 1.8866440057754517D0)) (list (list 3.0D0 2796.636474609375D0 0.005031057167798281D0 1.899138331413269D0)) (list (list 3.0D0 2794.903564453125D0 0.0049385568127036095D0 1.9116326570510865D0)) (list (list 3.0D0 2794.3720703125D0 0.004745200742036104D0 1.9241269826889038D0)) (list (list 3.0D0 2795.664794921875D0 0.004924726206809282D0 1.9366213083267212D0)) (list (list 3.0D0 2797.716552734375D0 0.0058633266016840935D0 1.9491156339645386D0)) (list (list 3.0D0 2798.7958984375D0 0.00712039228528738D0 1.961609959602356D0)) (list (list 3.0D0 2798.651611328125D0 0.008095474913716317D0 1.9741042852401734D0)) (list (list 3.0D0 2798.392822265625D0 0.008843264542520047D0 1.9865986108779908D0)) (list (list 3.0D0 2798.261962890625D0 0.00963300745934248D0 1.999092936515808D0)) (list (list 3.0D0 2797.97607421875D0 0.01049466896802187D0 2.011587381362915D0)) (list (list 3.0D0 2797.57666015625D0 0.011312889866530896D0 2.0240817070007324D0)) (list (list 3.0D0 2797.423583984375D0 0.011989958584308625D0 2.03657603263855D0)) (list (list 3.0D0 2797.533447265625D0 0.012418228201568127D0 2.049070358276367D0)) (list (list 3.0D0 2797.298095703125D0 0.012500116601586342D0 2.0615646839141846D0)) (list (list 3.0D0 2796.564208984375D0 0.012344758957624436D0 2.074059009552002D0)) (list (list 3.0D0 2796.26953125D0 0.012140430510044098D0 2.0865533351898194D0)) (list (list 3.0D0 2796.96923828125D0 0.011816686019301415D0 2.0990476608276367D0)) (list (list 3.0D0 2797.74951171875D0 0.01117854006588459D0 2.111541986465454D0)) (list (list 3.0D0 2797.45263671875D0 0.009913892485201359D0 2.1240363121032715D0)) (list (list 3.0D0 2796.8662109375D0 0.008309596218168736D0 2.136530637741089D0)) (list (list 3.0D0 2797.974609375D0 0.007267880253493786D0 2.1490249633789063D0)) (list (list 3.0D0 2799.160888671875D0 0.007989125326275826D0 2.1615192890167237D0)) (list (list 3.0D0 2798.947998046875D0 0.010130947455763817D0 2.174013614654541D0)) (list (list 3.0D0 2798.390869140625D0 0.01218536589294672D0 2.1865079402923584D0)) (list (list 3.0D0 2798.6923828125D0 0.012803992256522179D0 2.199002265930176D0)) (list (list 3.0D0 2799.2900390625D0 0.01204722374677658D0 2.211496591567993D0)) (list (list 3.0D0 2799.651611328125D0 0.01089085079729557D0 2.2239909172058106D0)) (list (list 3.0D0 2799.114013671875D0 0.010385661385953427D0 2.236485242843628D0)) (list (list 3.0D0 2797.797119140625D0 0.011269754730165005D0 2.2489795684814453D0)) (list (list 3.0D0 2796.858154296875D0 0.01309120375663042D0 2.2614738941192627D0)) (list (list 3.0D0 2797.054931640625D0 0.013947699218988419D0 2.27396821975708D0)) (list (list 3.0D0 2797.4375D0 0.012596561573445797D0 2.2864625453948975D0)) (list (list 3.0D0 2797.0380859375D0 0.01004268042743206D0 2.298956871032715D0)) (list (list 3.0D0 2796.54638671875D0 0.008861194364726544D0 2.3114511966705323D0)) (list (list 3.0D0 2796.39111328125D0 0.010194187983870507D0 2.3239455223083496D0)) (list (list 3.0D0 2796.794921875D0 0.012498348020017147D0 2.336439847946167D0)) (list (list 3.0D0 2797.852783203125D0 0.013753577135503292D0 2.3489341735839844D0)) (list (list 3.0D0 2798.802734375D0 0.013942890800535679D0 2.3614284992218018D0)) (list (list 3.0D0 2798.86962890625D0 0.014246271923184395D0 2.373922824859619D0)) (list (list 3.0D0 2798.349365234375D0 0.015146113000810147D0 2.3864171504974366D0)) (list (list 3.0D0 2798.130859375D0 0.015905296429991722D0 2.398911476135254D0)) (list (list 3.0D0 2797.95166015625D0 0.015592154115438462D0 2.4114058017730713D0)) (list (list 3.0D0 2797.24951171875D0 0.013795246370136738D0 2.4239001274108887D0)) (list (list 3.0D0 2796.809814453125D0 0.010529914870858193D0 2.436394453048706D0)) (list (list 3.0D0 2798.980224609375D0 0.006901817861944437D0 2.4488887786865235D0)) (list (list 3.0D0 2799.535888671875D0 0.004814089275896549D0 2.461383104324341D0)) (list (list 3.0D0 2795.28466796875D0 0.004670581314712763D0 2.4738776683807373D0)) (list (list 3.0D0 2791.06396484375D0 0.006541199516505003D0 2.4863719940185547D0)) (list (list 3.0D0 2792.868408203125D0 0.008272492326796055D0 2.498866319656372D0)) (list (list 3.0D0 2795.3427734375D0 0.01019238494336605D0 2.5113606452941895D0)) (list (list 3.0D0 2795.86474609375D0 0.011426380835473538D0 2.523854970932007D0)) (list (list 3.0D0 2794.647705078125D0 0.01123843900859356D0 2.536349296569824D0)) (list (list 3.0D0 2794.32666015625D0 0.010131251998245716D0 2.5488436222076416D0)) (list (list 3.0D0 2795.252197265625D0 0.008645281195640564D0 2.561337947845459D0)) (list (list 3.0D0 2795.990478515625D0 0.006920784246176481D0 2.5738322734832764D0)) (list (list 3.0D0 2796.16455078125D0 0.004963775165379047D0 2.5863265991210938D0)) (list (list 3.0D0 2797.7373046875D0 0.0034123724326491356D0 2.598820924758911D0)) (list (list 3.0D0 2798.7900390625D0 0.0027459196280688048D0 2.6113152503967285D0)) (list (list 3.0D0 2792.62109375D0 0.0025383220054209233D0 2.623809576034546D0)) (list (list 3.0D0 2814.057373046875D0 0.002262751804664731D0 2.6363039016723633D0)) (list (list 3.0D0 2810.435302734375D0 0.0035287162754684687D0 2.6487982273101807D0)) (list (list 3.0D0 2797.9267578125D0 0.006765725091099739D0 2.661292552947998D0)) (list (list 3.0D0 2799.68701171875D0 0.008124243468046189D0 2.6737868785858155D0)) (list (list 3.0D0 2798.875244140625D0 0.008146228268742562D0 2.686281204223633D0)) (list (list 3.0D0 2797.985595703125D0 0.007882805541157723D0 2.69877552986145D0)) (list (list 3.0D0 2798.410400390625D0 0.007825122214853764D0 2.7112698554992676D0)) (list (list 3.0D0 2798.91015625D0 0.00825585052371025D0 2.723764181137085D0)) (list (list 3.0D0 2797.599853515625D0 0.009368371218442917D0 2.7362585067749024D0)) (list (list 3.0D0 2795.50634765625D0 0.011334839276969433D0 2.7487528324127198D0)) (list (list 3.0D0 2795.00927734375D0 0.01333409734070301D0 2.761247158050537D0)) (list (list 3.0D0 2795.80029296875D0 0.0145301828160882D0 2.7737414836883545D0)) (list (list 3.0D0 2796.749755859375D0 0.014693234115839005D0 2.786235809326172D0)) (list (list 3.0D0 2797.049072265625D0 0.013912450522184372D0 2.7987301349639893D0)) (list (list 3.0D0 2796.99755859375D0 0.012895068153738976D0 2.8112244606018067D0)) (list (list 3.0D0 2797.503173828125D0 0.012232322245836258D0 2.823718786239624D0)) (list (list 3.0D0 2798.50244140625D0 0.011908547021448613D0 2.8362131118774414D0)) (list (list 3.0D0 2798.735595703125D0 0.011520495638251305D0 2.848707437515259D0)) (list (list 3.0D0 2798.09326171875D0 0.01094762235879898D0 2.861201763153076D0)) (list (list 3.0D0 2797.681396484375D0 0.010398101061582566D0 2.8736960887908936D0)) (list (list 3.0D0 2797.66943359375D0 0.010079501196742058D0 2.886190414428711D0)) (list (list 3.0D0 2797.319580078125D0 0.010126319713890553D0 2.8986847400665283D0)) (list (list 3.0D0 2796.714111328125D0 0.010150647722184658D0 2.9111790657043457D0)) (list (list 3.0D0 2796.7333984375D0 0.009407233446836472D0 2.923673391342163D0)) (list (list 3.0D0 2797.276123046875D0 0.007687288802117109D0 2.9361677169799805D0)) (list (list 3.0D0 2797.48046875D0 0.005629901774227619D0 2.948662042617798D0)) (list (list 3.0D0 2796.786376953125D0 0.004062159452587366D0 2.9611563682556153D0)) (list (list 3.0D0 2793.96826171875D0 0.003199170110747218D0 2.9736506938934326D0)) (list (list 3.0D0 2786.3759765625D0 0.0034199669025838375D0 2.98614501953125D0)) (list (list 3.0D0 2782.968994140625D0 0.004325543530285358D0 2.9986393451690674D0)) (list (list 3.0D0 2785.666748046875D0 0.004288893658667803D0 3.0111336708068848D0)) (list (list 3.0D0 2794.357421875D0 0.004102698527276516D0 3.0236282348632813D0)) (list (list 3.0D0 2799.31005859375D0 0.004804822150617838D0 3.0361225605010987D0)) (list (list 3.0D0 2801.582763671875D0 0.0058622960932552815D0 3.048616886138916D0)) (list (list 3.0D0 2800.58984375D0 0.006610909942537546D0 3.0611112117767334D0)) (list (list 3.0D0 2799.155517578125D0 0.007038051728159189D0 3.073605537414551D0)) (list (list 3.0D0 2799.279296875D0 0.0070624942891299725D0 3.086099863052368D0)) (list (list 3.0D0 2800.5791015625D0 0.0069402530789375305D0 3.0985941886901856D0)) (list (list 3.0D0 2800.840576171875D0 0.007043655030429363D0 3.111088514328003D0)) (list (list 3.0D0 2799.82373046875D0 0.007262388244271278D0 3.1235828399658203D0)) (list (list 3.0D0 2798.49462890625D0 0.007235834375023842D0 3.1360771656036377D0)) (list (list 3.0D0 2797.531982421875D0 0.006941992323845625D0 3.148571491241455D0)) (list (list 3.0D0 2796.256591796875D0 0.007067411206662655D0 3.1610658168792725D0)) (list (list 3.0D0 2795.111328125D0 0.00803986843675375D0 3.17356014251709D0)) (list (list 3.0D0 2795.035888671875D0 0.008972356095910073D0 3.1860544681549073D0)) (list (list 3.0D0 2800.0546875D0 0.008333849720656872D0 3.1985487937927246D0)) (list (list 3.0D0 2805.419921875D0 0.008329336531460286D0 3.211043119430542D0)) (list (list 3.0D0 2805.270263671875D0 0.008518479764461518D0 3.2235374450683594D0)) (list (list 3.0D0 2801.089599609375D0 0.008837155997753144D0 3.2360317707061768D0)) (list (list 3.0D0 2799.154541015625D0 0.008535041473805905D0 3.248526096343994D0)) (list (list 3.0D0 2801.645751953125D0 0.007138761226087809D0 3.2610204219818116D0)) (list (list 3.0D0 2802.3818359375D0 0.007035566493868828D0 3.273514747619629D0)) (list (list 3.0D0 2799.940185546875D0 0.008572475984692574D0 3.2860090732574463D0)) (list (list 3.0D0 2796.83544921875D0 0.010807531885802746D0 3.2985033988952637D0)) (list (list 3.0D0 2797.18994140625D0 0.011369090527296067D0 3.310997724533081D0)) (list (list 3.0D0 2799.511474609375D0 0.010227860882878304D0 3.3234920501708985D0)) (list (list 3.0D0 2802.454833984375D0 0.008652457036077977D0 3.335986375808716D0)) (list (list 3.0D0 2804.949462890625D0 0.006979458034038544D0 3.348480701446533D0)) (list (list 3.0D0 2808.291748046875D0 0.004814969375729561D0 3.3609750270843506D0)) (list (list 3.0D0 2814.085205078125D0 0.0032687142957001925D0 3.373469352722168D0)) (list (list 3.0D0 2812.89306640625D0 0.0023447105195373297D0 3.3859636783599854D0)) (list (list 3.0D0 2786.070068359375D0 0.005150666926056147D0 3.3984580039978028D0)) (list (list 3.0D0 2784.183349609375D0 0.00496874051168561D0 3.41095232963562D0)) (list (list 3.0D0 2780.26611328125D0 0.004686666652560234D0 3.4234466552734375D0)) (list (list 3.0D0 2778.999267578125D0 0.004600850399583578D0 3.435940980911255D0)) (list (list 3.0D0 2787.708740234375D0 0.0043045757338404656D0 3.4484353065490723D0)) (list (list 3.0D0 2792.328369140625D0 0.005204014014452696D0 3.4609296321868897D0)) (list (list 3.0D0 2793.572265625D0 0.006018529180437326D0 3.473423957824707D0)) (list (list 3.0D0 2795.821044921875D0 0.0072865900583565235D0 3.4859182834625244D0)) (list (list 3.0D0 2797.68212890625D0 0.009296474047005177D0 3.498412609100342D0)) (list (list 3.0D0 2797.978515625D0 0.011552296578884125D0 3.510906934738159D0)) (list (list 3.0D0 2797.46044921875D0 0.01349264569580555D0 3.5234012603759766D0)) (list (list 3.0D0 2796.663330078125D0 0.014632919803261757D0 3.535895586013794D0)) (list (list 3.0D0 2795.81591796875D0 0.015035348013043404D0 3.5483899116516114D0)) (list (list 3.0D0 2795.0927734375D0 0.015174541622400284D0 3.5608842372894287D0)) (list (list 3.0D0 2794.716552734375D0 0.015181319788098336D0 3.573378801345825D0)) (list (list 3.0D0 2794.69287109375D0 0.014554237015545369D0 3.5858731269836426D0)) (list (list 3.0D0 2794.961181640625D0 0.012563593685626984D0 3.59836745262146D0)) (list (list 3.0D0 2795.029052734375D0 0.009158788248896599D0 3.6108617782592774D0)) (list (list 3.0D0 2793.046875D0 0.005554144270718098D0 3.6233561038970948D0)) (list (list 3.0D0 2790.8759765625D0 0.003468235721811652D0 3.635850429534912D0)) (list (list 3.0D0 2791.57373046875D0 0.002690488938242197D0 3.6483447551727295D0)) (list (list 3.0D0 2798.974365234375D0 0.0025229037273675204D0 3.660839080810547D0)) (list (list 3.0D0 2804.2802734375D0 0.002230557380244136D0 3.6733334064483643D0)) (list (list 3.0D0 2810.021728515625D0 0.0017083187121897936D0 3.6858277320861817D0)) (list (list 3.0D0 2810.928466796875D0 0.0016985717229545117D0 3.698322057723999D0)) (list (list 3.0D0 2807.137939453125D0 0.002600425621494651D0 3.7108163833618164D0)) (list (list 3.0D0 2800.572998046875D0 0.004644955974072218D0 3.723310708999634D0)) (list (list 3.0D0 2797.7900390625D0 0.00645508524030447D0 3.735805034637451D0)) (list (list 3.0D0 2795.093994140625D0 0.0071480185724794865D0 3.7482993602752686D0)) (list (list 3.0D0 2792.04345703125D0 0.007000240031629801D0 3.760793685913086D0)) (list (list 3.0D0 2790.361328125D0 0.006720289587974548D0 3.7732880115509033D0)) (list (list 3.0D0 2791.41259765625D0 0.006742318160831928D0 3.7857823371887207D0)) (list (list 3.0D0 2794.06005859375D0 0.007781654596328735D0 3.798276662826538D0)) (list (list 3.0D0 2796.4716796875D0 0.010011056438088417D0 3.8107709884643555D0)) (list (list 3.0D0 2797.10791015625D0 0.012422711588442326D0 3.823265314102173D0)) (list (list 3.0D0 2796.78662109375D0 0.013761362060904503D0 3.8357596397399903D0)) (list (list 3.0D0 2796.522216796875D0 0.013551006093621254D0 3.8482539653778076D0)) (list (list 3.0D0 2796.544189453125D0 0.01254954282194376D0 3.860748291015625D0)) (list (list 3.0D0 2796.754150390625D0 0.011711045168340207D0 3.8732426166534424D0)) (list (list 3.0D0 2797.44482421875D0 0.010754985734820366D0 3.8857369422912598D0)) (list (list 3.0D0 2798.521728515625D0 0.008854229003190995D0 3.898231267929077D0)) (list (list 3.0D0 2799.403564453125D0 0.0060616484843194485D0 3.9107255935668946D0)) (list (list 3.0D0 2799.021240234375D0 0.0035130728501826525D0 3.923219919204712D0)) (list (list 3.0D0 2797.4248046875D0 0.002171359956264496D0 3.9357142448425293D0)) (list (list 3.0D0 2798.12451171875D0 0.0017152115469798446D0 3.9482085704803467D0)) (list (list 3.0D0 2804.413818359375D0 0.0020981321576982737D0 3.960702896118164D0)) (list (list 3.0D0 2801.8486328125D0 0.003137768479064107D0 3.9731972217559815D0)) (list (list 3.0D0 2792.361572265625D0 0.005627363454550505D0 3.985691547393799D0)) (list (list 3.0D0 2794.85595703125D0 0.00809011422097683D0 3.998185873031616D0)) (list (list 3.0D0 2797.037109375D0 0.009490396827459336D0 4.010680198669434D0)) (list (list 3.0D0 2798.867919921875D0 0.010116534307599068D0 4.02317476272583D0)) (list (list 3.0D0 2799.7333984375D0 0.010081772692501545D0 4.035668849945068D0)) (list (list 3.0D0 2799.3154296875D0 0.009325786493718624D0 4.048163414001465D0)) (list (list 3.0D0 2797.97802734375D0 0.008209281601011753D0 4.060657501220703D0)) (list (list 3.0D0 2798.0126953125D0 0.007715417537838221D0 4.0731520652771D0)) (list (list 3.0D0 2799.26220703125D0 0.009034429676830769D0 4.085646152496338D0)) (list (list 3.0D0 2799.89501953125D0 0.012097395025193692D0 4.098140716552734D0)) (list (list 3.0D0 2799.306640625D0 0.015011309646070004D0 4.110634803771973D0)) (list (list 3.0D0 2798.954833984375D0 0.016318581998348236D0 4.123129367828369D0)) (list (list 3.0D0 2798.642578125D0 0.016030805185437203D0 4.135623455047607D0)) (list (list 3.0D0 2797.59375D0 0.014975951984524727D0 4.148118019104004D0)) (list (list 3.0D0 2796.702392578125D0 0.013652734458446503D0 4.160612106323242D0)) (list (list 3.0D0 2797.748779296875D0 0.012102331034839154D0 4.173106670379639D0)) (list (list 3.0D0 2798.939208984375D0 0.01106385886669159D0 4.185600757598877D0)) (list (list 3.0D0 2797.52294921875D0 0.010386395268142224D0 4.198095321655273D0)) (list (list 3.0D0 2794.353271484375D0 0.010222560726106167D0 4.210589408874512D0)) (list (list 3.0D0 2793.020751953125D0 0.009687097743153572D0 4.223083972930908D0)) (list (list 3.0D0 2795.97998046875D0 0.008012830279767514D0 4.2355780601501465D0)) (list (list 3.0D0 2800.2431640625D0 0.007208287250250578D0 4.248072624206543D0)) (list (list 3.0D0 2801.8623046875D0 0.008186286315321923D0 4.260566711425781D0)) (list (list 3.0D0 2801.407958984375D0 0.010745876468718052D0 4.273061275482178D0)) (list (list 3.0D0 2799.696044921875D0 0.01366990152746439D0 4.285555362701416D0)) (list (list 3.0D0 2798.00830078125D0 0.01533204223960638D0 4.2980499267578125D0)) (list (list 3.0D0 2797.65576171875D0 0.015179753303527832D0 4.310544013977051D0)) (list (list 3.0D0 2798.509765625D0 0.01418484840542078D0 4.323038578033447D0)) (list (list 3.0D0 2799.34375D0 0.013470743782818318D0 4.3355326652526856D0)) (list (list 3.0D0 2798.58203125D0 0.013154586777091027D0 4.348027229309082D0)) (list (list 3.0D0 2796.968994140625D0 0.013639803044497967D0 4.36052131652832D0)) (list (list 3.0D0 2795.898193359375D0 0.014973726123571396D0 4.373015880584717D0)) (list (list 3.0D0 2795.86181640625D0 0.016304105520248413D0 4.385509967803955D0)) (list (list 3.0D0 2796.14697265625D0 0.016952821984887123D0 4.398004531860352D0)) (list (list 3.0D0 2796.25830078125D0 0.0167391300201416D0 4.410499095916748D0)) (list (list 3.0D0 2796.22412109375D0 0.015854818746447563D0 4.422993183135986D0)) (list (list 3.0D0 2796.356689453125D0 0.014671677723526955D0 4.435487747192383D0)) (list (list 3.0D0 2797.1435546875D0 0.013558425940573216D0 4.447981834411621D0)) (list (list 3.0D0 2798.357421875D0 0.012823082506656647D0 4.460476398468018D0)) (list (list 3.0D0 2798.8916015625D0 0.012446785345673561D0 4.472970485687256D0)) (list (list 3.0D0 2798.2421875D0 0.012432278133928776D0 4.485465049743652D0)) (list (list 3.0D0 2797.063232421875D0 0.013094061054289341D0 4.497959136962891D0)) (list (list 3.0D0 2796.10986328125D0 0.014364553615450859D0 4.510453701019287D0)) (list (list 3.0D0 2795.947998046875D0 0.01560530811548233D0 4.522947788238525D0)) (list (list 3.0D0 2796.734130859375D0 0.016150042414665222D0 4.535442352294922D0)) (list (list 3.0D0 2797.999755859375D0 0.01601804606616497D0 4.54793643951416D0)) (list (list 3.0D0 2798.525390625D0 0.01574886590242386D0 4.560431003570557D0)) (list (list 3.0D0 2797.56689453125D0 0.015675781294703484D0 4.572925090789795D0)) (list (list 3.0D0 2795.78759765625D0 0.01602455973625183D0 4.585419654846191D0)) (list (list 3.0D0 2795.048828125D0 0.016315773129463196D0 4.59791374206543D0)) (list (list 3.0D0 2795.86572265625D0 0.016039667651057244D0 4.610408306121826D0)) (list (list 3.0D0 2797.4921875D0 0.015356600284576416D0 4.6229023933410645D0)) (list (list 3.0D0 2798.82568359375D0 0.014422974549233914D0 4.635396957397461D0)) (list (list 3.0D0 2799.24658203125D0 0.013478628359735012D0 4.647891044616699D0)) (list (list 3.0D0 2798.545166015625D0 0.012828444130718708D0 4.660385608673096D0)) (list (list 3.0D0 2796.710693359375D0 0.01265206653624773D0 4.672879695892334D0)) (list (list 3.0D0 2795.02880859375D0 0.012955104000866413D0 4.6853742599487305D0)) (list (list 3.0D0 2794.540771484375D0 0.013336044736206532D0 4.697868347167969D0)) (list (list 3.0D0 2794.89404296875D0 0.013696150854229927D0 4.710362911224365D0)) (list (list 3.0D0 2795.178466796875D0 0.014265765435993672D0 4.7228569984436035D0)) (list (list 3.0D0 2795.275634765625D0 0.014962521381676197D0 4.7353515625D0)) (list (list 3.0D0 2795.557861328125D0 0.015273782424628735D0 4.747845649719238D0)) (list (list 3.0D0 2796.380126953125D0 0.014918431639671326D0 4.760340213775635D0)) (list (list 3.0D0 2797.34130859375D0 0.014437244273722172D0 4.772834300994873D0)) (list (list 3.0D0 2797.421142578125D0 0.014330504462122918D0 4.7853288650512695D0)) (list (list 3.0D0 2796.39892578125D0 0.014538728632032872D0 4.797822952270508D0)) (list (list 3.0D0 2795.834716796875D0 0.01468989159911871D0 4.810317516326904D0)) (list (list 3.0D0 2796.76416015625D0 0.014285262674093247D0 4.822811603546143D0)) (list (list 3.0D0 2798.259765625D0 0.013637722469866276D0 4.835306167602539D0)) (list (list 3.0D0 2798.877685546875D0 0.01318796630948782D0 4.847800254821777D0)) (list (list 3.0D0 2798.755615234375D0 0.01326620951294899D0 4.860294818878174D0)) (list (list 3.0D0 2798.69287109375D0 0.01378878764808178D0 4.872788906097412D0)) (list (list 3.0D0 2798.83740234375D0 0.014107726514339447D0 4.885283470153809D0)) (list (list 3.0D0 2798.51416015625D0 0.013680904172360897D0 4.897777557373047D0)) (list (list 3.0D0 2797.412353515625D0 0.012594648636877537D0 4.910272121429443D0)) (list (list 3.0D0 2796.168212890625D0 0.01141150202602148D0 4.922766208648682D0)) (list (list 3.0D0 2795.470947265625D0 0.010409181006252766D0 4.935260772705078D0)) (list (list 3.0D0 2795.639892578125D0 0.009520945139229298D0 4.947755336761475D0)) (list (list 3.0D0 2796.421630859375D0 0.008700660429894925D0 4.960249423980713D0)) (list (list 3.0D0 2796.925537109375D0 0.007968848571181298D0 4.972743988037109D0)) (list (list 3.0D0 2796.562255859375D0 0.007324824575334787D0 4.985238075256348D0)) (list (list 3.0D0 2795.979248046875D0 0.006739710923284292D0 4.997732639312744D0)) (list (list 3.0D0 2796.299072265625D0 0.0060309250839054585D0 5.010226726531982D0)) (list (list 3.0D0 2797.850830078125D0 0.0052919224835932255D0 5.022721290588379D0)) (list (list 3.0D0 2798.597412109375D0 0.00510709173977375D0 5.035215377807617D0)) (list (list 3.0D0 2797.96435546875D0 0.005962823983281851D0 5.047709941864014D0)) (list (list 3.0D0 2796.94775390625D0 0.007736807223409414D0 5.060204029083252D0)) (list (list 3.0D0 2796.694580078125D0 0.009547518566250801D0 5.072698593139648D0)) (list (list 3.0D0 2796.7685546875D0 0.010686537250876427D0 5.085192680358887D0)) (list (list 3.0D0 2796.854736328125D0 0.011147601529955864D0 5.097687244415283D0)) (list (list 3.0D0 2796.926513671875D0 0.011395244859158993D0 5.1101813316345215D0)) (list (list 3.0D0 2796.75634765625D0 0.011779769323766232D0 5.122675895690918D0)) (list (list 3.0D0 2796.3662109375D0 0.012150540016591549D0 5.135169982910156D0)) (list (list 3.0D0 2796.39404296875D0 0.012223206460475922D0 5.147664546966553D0)) (list (list 3.0D0 2796.932373046875D0 0.012248056940734387D0 5.160158634185791D0)) (list (list 3.0D0 2797.312255859375D0 0.012687492184340954D0 5.1726531982421875D0)) (list (list 3.0D0 2797.50146484375D0 0.013370468281209469D0 5.185147285461426D0)) (list (list 3.0D0 2797.723388671875D0 0.013759777881205082D0 5.197641849517822D0)) (list (list 3.0D0 2797.464111328125D0 0.013725582510232926D0 5.2101359367370606D0)) (list (list 3.0D0 2796.43701171875D0 0.01361411064863205D0 5.222630500793457D0)) (list (list 3.0D0 2795.540283203125D0 0.013501833193004132D0 5.235124588012695D0)) (list (list 3.0D0 2795.945068359375D0 0.012680006213486195D0 5.247619152069092D0)) (list (list 3.0D0 2797.828857421875D0 0.010992535389959813D0 5.26011323928833D0)) (list (list 3.0D0 2799.13427734375D0 0.009154471568763256D0 5.272607803344727D0)) (list (list 3.0D0 2798.322509765625D0 0.007822975516319275D0 5.285101890563965D0)) (list (list 3.0D0 2796.98193359375D0 0.007541891653090715D0 5.297596454620361D0)) (list (list 3.0D0 2797.436767578125D0 0.007679542992264032D0 5.3100905418396D0)) (list (list 3.0D0 2799.083740234375D0 0.00784154050052166D0 5.322585105895996D0)) (list (list 3.0D0 2799.452392578125D0 0.00825620349496603D0 5.335079193115234D0)) (list (list 3.0D0 2798.58984375D0 0.009147344157099724D0 5.347573757171631D0)) (list (list 3.0D0 2797.977783203125D0 0.010175165720283986D0 5.360067844390869D0)) (list (list 3.0D0 2798.76513671875D0 0.010862921364605427D0 5.372562408447266D0)) (list (list 3.0D0 2799.39892578125D0 0.011629270389676094D0 5.385056495666504D0)) (list (list 3.0D0 2798.474609375D0 0.01257368829101324D0 5.3975510597229D0)) (list (list 3.0D0 2796.580322265625D0 0.013486337848007679D0 5.410045146942139D0)) (list (list 3.0D0 2795.99951171875D0 0.01396555919200182D0 5.422539710998535D0)) (list (list 3.0D0 2796.42333984375D0 0.014152215793728829D0 5.435033798217773D0)) (list (list 3.0D0 2796.653076171875D0 0.014471550472080708D0 5.44752836227417D0)) (list (list 3.0D0 2796.507568359375D0 0.01487610675394535D0 5.460022449493408D0)) (list (list 3.0D0 2796.77783203125D0 0.015050585381686688D0 5.472517013549805D0)) (list (list 3.0D0 2797.53076171875D0 0.014690209180116654D0 5.485011100769043D0)) (list (list 3.0D0 2797.79541015625D0 0.013944156467914582D0 5.4975056648254395D0)) (list (list 3.0D0 2797.391845703125D0 0.013515629805624485D0 5.510000228881836D0)) (list (list 3.0D0 2796.744384765625D0 0.013895723037421704D0 5.522494316101074D0)) (list (list 3.0D0 2796.268798828125D0 0.01453464850783348D0 5.534988880157471D0)) (list (list 3.0D0 2796.427001953125D0 0.014395860955119133D0 5.547482967376709D0)) (list (list 3.0D0 2797.579345703125D0 0.013236104510724545D0 5.5599775314331055D0)) (list (list 3.0D0 2798.949462890625D0 0.012027951888740063D0 5.572471618652344D0)) (list (list 3.0D0 2799.7724609375D0 0.011566832661628724D0 5.58496618270874D0)) (list (list 3.0D0 2799.629150390625D0 0.011711733415722847D0 5.5974602699279785D0)) (list (list 3.0D0 2798.288818359375D0 0.012109342962503434D0 5.609954833984375D0)) (list (list 3.0D0 2796.531982421875D0 0.012983184307813645D0 5.622448921203613D0)) (list (list 3.0D0 2795.301025390625D0 0.014423297718167305D0 5.63494348526001D0)) (list (list 3.0D0 2795.298583984375D0 0.015885230153799057D0 5.647437572479248D0)) (list (list 3.0D0 2796.1748046875D0 0.016860084608197212D0 5.6599321365356445D0)) (list (list 3.0D0 2797.06494140625D0 0.017123524099588394D0 5.672426223754883D0)) (list (list 3.0D0 2797.045166015625D0 0.016762828454375267D0 5.684920787811279D0)) (list (list 3.0D0 2796.009765625D0 0.016379496082663536D0 5.697414875030518D0)) (list (list 3.0D0 2794.675048828125D0 0.016451487317681313D0 5.709909439086914D0)) (list (list 3.0D0 2793.989013671875D0 0.01631215587258339D0 5.722403526306152D0)) (list (list 3.0D0 2794.21240234375D0 0.014926260337233544D0 5.734898090362549D0)) (list (list 3.0D0 2795.4833984375D0 0.012185737490653992D0 5.747392177581787D0)) (list (list 3.0D0 2798.143798828125D0 0.009482039138674736D0 5.759886741638184D0)) (list (list 3.0D0 2800.000732421875D0 0.008862065151333809D0 5.772380828857422D0)) (list (list 3.0D0 2799.462646484375D0 0.01020056288689375D0 5.784875392913818D0)) (list (list 3.0D0 2796.791748046875D0 0.012205810286104679D0 5.797369480133057D0)) (list (list 3.0D0 2795.645263671875D0 0.013241298496723175D0 5.809864044189453D0)) (list (list 3.0D0 2797.0732421875D0 0.012811923399567604D0 5.822358131408691D0)) (list (list 3.0D0 2799.527099609375D0 0.012875456362962723D0 5.834852695465088D0)) (list (list 3.0D0 2800.6025390625D0 0.014280658215284348D0 5.847346782684326D0)) (list (list 3.0D0 2799.427001953125D0 0.016026252880692482D0 5.859841346740723D0)) (list (list 3.0D0 2797.879150390625D0 0.017690276727080345D0 5.872335433959961D0)) (list (list 3.0D0 2797.20361328125D0 0.01888146996498108D0 5.884829998016357D0)) (list (list 3.0D0 2796.568359375D0 0.019717425107955933D0 5.897324085235596D0)) (list (list 3.0D0 2795.56103515625D0 0.020480696111917496D0 5.909818649291992D0)) (list (list 3.0D0 2795.153564453125D0 0.020962964743375778D0 5.9223127365112305D0)) (list (list 3.0D0 2795.88818359375D0 0.020885920152068138D0 5.934807300567627D0)) (list (list 3.0D0 2796.830322265625D0 0.020700758323073387D0 5.947301387786865D0)) (list (list 3.0D0 2797.256591796875D0 0.020769154652953148D0 5.959795951843262D0)) (list (list 3.0D0 2797.45556640625D0 0.02096591517329216D0 5.9722900390625D0)) (list (list 3.0D0 2797.542724609375D0 0.020836591720581055D0 5.9847846031188965D0)) (list (list 3.0D0 2797.2080078125D0 0.020235223695635796D0 5.997278690338135D0)) (list (list 3.0D0 2796.79833984375D0 0.019645798951387406D0 6.009773254394531D0)) (list (list 3.0D0 2797.065185546875D0 0.01932021975517273D0 6.0222673416137695D0)) (list (list 3.0D0 2797.82080078125D0 0.019138028845191002D0 6.034761905670166D0)) (list (list 3.0D0 2798.222900390625D0 0.018873199820518494D0 6.0472564697265625D0)) (list (list 3.0D0 2798.187255859375D0 0.018582051619887352D0 6.059750556945801D0)) (list (list 3.0D0 2797.667236328125D0 0.018475143238902092D0 6.072245121002197D0)) (list (list 3.0D0 2796.36962890625D0 0.018702907487750054D0 6.0847392082214356D0)) (list (list 3.0D0 2795.056640625D0 0.019374987110495568D0 6.097233772277832D0)) (list (list 3.0D0 2794.774658203125D0 0.01989084482192993D0 6.10972785949707D0)) (list (list 3.0D0 2795.755126953125D0 0.019761325791478157D0 6.122222423553467D0)) (list (list 3.0D0 2797.128662109375D0 0.019397549331188202D0 6.134716510772705D0)) (list (list 3.0D0 2797.740234375D0 0.01925557106733322D0 6.147211074829102D0)) (list (list 3.0D0 2797.446533203125D0 0.01931142434477806D0 6.15970516204834D0)) (list (list 3.0D0 2797.073486328125D0 0.019332975149154663D0 6.172199726104736D0)) (list (list 3.0D0 2796.85205078125D0 0.019151194021105767D0 6.184693813323975D0)) (list (list 3.0D0 2796.232421875D0 0.019076189026236534D0 6.197188377380371D0)) (list (list 3.0D0 2795.708740234375D0 0.019493548199534416D0 6.209682464599609D0)) (list (list 3.0D0 2796.095947265625D0 0.020043309777975083D0 6.222177028656006D0)) (list (list 3.0D0 2797.15283203125D0 0.020163513720035553D0 6.234671115875244D0)) (list (list 3.0D0 2798.01904296875D0 0.019515372812747956D0 6.247165679931641D0)) (list (list 3.0D0 2798.428466796875D0 0.018293218687176705D0 6.259659767150879D0)) (list (list 3.0D0 2798.335205078125D0 0.01712963543832302D0 6.272154331207275D0)) (list (list 3.0D0 2797.9267578125D0 0.01658298447728157D0 6.284648418426514D0)) (list (list 3.0D0 2797.584228515625D0 0.016719141975045204D0 6.29714298248291D0)) (list (list 3.0D0 2797.515869140625D0 0.01714158244431019D0 6.309637069702148D0)) (list (list 3.0D0 2797.490478515625D0 0.01749432273209095D0 6.322131633758545D0)) (list (list 3.0D0 2797.28466796875D0 0.017679274082183838D0 6.334625720977783D0)) (list (list 3.0D0 2797.059326171875D0 0.017824171110987664D0 6.34712028503418D0)) (list (list 3.0D0 2797.13134765625D0 0.018179699778556824D0 6.359614372253418D0)) (list (list 3.0D0 2797.47021484375D0 0.01875569112598896D0 6.3721089363098145D0)) (list (list 3.0D0 2797.761474609375D0 0.019138511270284653D0 6.384603023529053D0)) (list (list 3.0D0 2797.7353515625D0 0.018903035670518875D0 6.397097587585449D0)) (list (list 3.0D0 2797.347412109375D0 0.018107831478118897D0 6.4095916748046875D0)) (list (list 3.0D0 2796.598388671875D0 0.01717112772166729D0 6.422086238861084D0)) (list (list 3.0D0 2795.99853515625D0 0.01652826927602291D0 6.434580326080322D0)) (list (list 3.0D0 2796.142822265625D0 0.016341470181941986D0 6.447074890136719D0)) (list (list 3.0D0 2796.68212890625D0 0.01653202623128891D0 6.459568977355957D0)) (list (list 3.0D0 2796.761962890625D0 0.0166984461247921D0 6.4720635414123535D0)) (list (list 3.0D0 2796.299560546875D0 0.016492430120706558D0 6.484557628631592D0)) (list (list 3.0D0 2795.76123046875D0 0.016124382615089417D0 6.497052192687988D0)) (list (list 3.0D0 2795.49609375D0 0.016185717657208443D0 6.509546279907227D0)) (list (list 3.0D0 2795.70263671875D0 0.016781402751803398D0 6.522040843963623D0)) (list (list 3.0D0 2796.5205078125D0 0.016909338533878327D0 6.534534931182861D0)) (list (list 3.0D0 2797.787109375D0 0.015354453586041928D0 6.547029495239258D0)) (list (list 3.0D0 2799.521484375D0 0.011993159539997578D0 6.559523582458496D0)) (list (list 3.0D0 2802.621337890625D0 0.008023345842957497D0 6.572018146514893D0)) (list (list 3.0D0 2808.39306640625D0 0.005026614759117365D0 6.584512233734131D0)) (list (list 3.0D0 2813.683349609375D0 0.003394847270101309D0 6.597006797790527D0)) (list (list 3.0D0 2819.914794921875D0 0.0024506542831659317D0 6.609501361846924D0)) (list (list 3.0D0 2796.7119140625D0 0.0017413198947906495D0 6.621995449066162D0)) (list (list 3.0D0 2798.14111328125D0 0.002487752353772521D0 6.634490013122559D0)) (list (list 3.0D0 2808.311767578125D0 0.003105440177023411D0 6.646984100341797D0)) (list (list 3.0D0 2800.847412109375D0 0.0026005571708083153D0 6.659478664398193D0)) (list (list 3.0D0 2795.683837890625D0 0.001907956087961793D0 6.671972751617432D0)) (list (list 3.0D0 2794.114990234375D0 0.0016217627562582493D0 6.684467315673828D0)) (list (list 3.0D0 2795.016845703125D0 0.0016075620660558343D0 6.696961402893066D0)) (list (list 3.0D0 2795.31884765625D0 0.0016317511908710003D0 6.709455966949463D0)) (list (list 3.0D0 2794.7177734375D0 0.0015711222076788545D0 6.721950054168701D0)) (list (list 3.0D0 2794.506591796875D0 0.001497184275649488D0 6.734444618225098D0)) (list (list 3.0D0 2794.65576171875D0 0.0014432240277528763D0 6.746938705444336D0)) (list (list 3.0D0 2794.796875D0 0.001387326163239777D0 6.759433269500732D0)) (list (list 3.0D0 2794.81591796875D0 0.0013010930269956589D0 6.771927356719971D0)) (list (list 3.0D0 2794.958740234375D0 0.001184594351798296D0 6.784421920776367D0)) (list (list 3.0D0 2795.3369140625D0 0.0010563904652372003D0 6.7969160079956055D0)) (list (list 3.0D0 2795.653076171875D0 9.268206194974482D-4 6.809410572052002D0)) (list (list 3.0D0 2795.583984375D0 7.972629391588271D-4 6.82190465927124D0)) (list (list 3.0D0 2795.293212890625D0 6.802742718718946D-4 6.834399223327637D0)) (list (list 3.0D0 2795.075927734375D0 5.93433971516788D-4 6.846893310546875D0)) (list (list 3.0D0 2795.093017578125D0 5.416527856141329D-4 6.8593878746032715D0)) (list (list 3.0D0 2795.423583984375D0 5.098289693705738D-4 6.87188196182251D0)) (list (list 3.0D0 2795.704345703125D0 4.7165158321149647D-4 6.884376525878906D0)) (list (list 3.0D0 2795.280029296875D0 4.1263457387685776D-4 6.8968706130981445D0)) (list (list 3.0D0 2794.4619140625D0 3.478616999927908D-4 6.909365177154541D0)) (list (list 3.0D0 2794.030517578125D0 2.966345346067101D-4 6.921859264373779D0)) (list (list 3.0D0 2794.098388671875D0 2.5875517167150974D-4 6.934353828430176D0)) (list (list 3.0D0 2794.21337890625D0 2.2170261945575476D-4 6.946847915649414D0)) (list (list 3.0D0 2794.318359375D0 1.7879728693515062D-4 6.9593424797058106D0)) (list (list 3.0D0 2794.74072265625D0 1.3413469423539937D-4 6.971836566925049D0)) (list (list 3.0D0 2795.423828125D0 9.46595537243411D-5 6.984331130981445D0)) (list (list 3.0D0 2796.1572265625D0 6.473737448686734D-5 6.996825218200684D0)) (list (list 3.0D0 2797.277099609375D0 4.598512168740854D-5 7.00931978225708D0)) (list (list 3.0D0 2799.0205078125D0 3.777021265705116D-5 7.021813869476318D0)) (list (list 3.0D0 2799.930908203125D0 3.6654990253737196D-5 7.034308433532715D0)) (list (list 3.0D0 2798.9912109375D0 3.847936022793874D-5 7.046802520751953D0)) (list (list 3.0D0 2797.3125D0 4.14019450545311D-5 7.05929708480835D0)) (list (list 3.0D0 2795.7646484375D0 4.3563293729675934D-5 7.071791172027588D0)) (list (list 3.0D0 2794.574951171875D0 4.36394038842991D-5 7.084285736083984D0)) (list (list 3.0D0 2793.81787109375D0 4.118250581086613D-5 7.096779823303223D0)) (list (list 3.0D0 2793.5029296875D0 3.6571746022673324D-5 7.109274387359619D0)) (list (list 3.0D0 2793.5029296875D0 0.0D0 7.121768474578857D0)) (list (list 4.0D0 2307.66162109375D0 0.0011339879129081965D0 0.0D0)) (list (list 4.0D0 2308.431396484375D0 0.002738427370786667D0 0.01249433122575283D0)) (list (list 4.0D0 2309.7412109375D0 0.004448599182069302D0 0.02498866245150566D0)) (list (list 4.0D0 2310.958740234375D0 0.0047919596545398235D0 0.03748299181461334D0)) (list (list 4.0D0 2301.812255859375D0 0.0036656479351222515D0 0.04997732490301132D0)) (list (list 4.0D0 2298.12158203125D0 0.0027121456805616618D0 0.062471654266119D0)) (list (list 4.0D0 2297.388671875D0 0.002346350345760584D0 0.07496598362922669D0)) (list (list 4.0D0 2300.090576171875D0 0.002341342158615589D0 0.08746031671762467D0)) (list (list 4.0D0 2305.37255859375D0 0.00233896030113101D0 0.09995464980602265D0)) (list (list 4.0D0 2305.025634765625D0 0.0017631597584113479D0 0.11244898289442063D0)) (list (list 4.0D0 2300.40771484375D0 9.503298788331449D-4 0.124943308532238D0)) (list (list 4.0D0 2287.216552734375D0 6.002549198456109D-4 0.137437641620636D0)) (list (list 4.0D0 2291.645263671875D0 3.9549911161884666D-4 0.14993196725845337D0)) (list (list 4.0D0 2308.578857421875D0 0.0011373704764991999D0 0.16242630779743195D0)) (list (list 4.0D0 2328.297607421875D0 0.002467322861775756D0 0.17492063343524933D0)) (list (list 4.0D0 2320.7529296875D0 0.002953693037852645D0 0.1874149590730667D0)) (list (list 4.0D0 2320.856689453125D0 0.0031490966212004423D0 0.1999092996120453D0)) (list (list 4.0D0 2325.045654296875D0 0.002937477780506015D0 0.21240362524986267D0)) (list (list 4.0D0 2329.883056640625D0 0.002848062664270401D0 0.22489796578884125D0)) (list (list 4.0D0 2331.658447265625D0 0.0027574182022362948D0 0.23739229142665863D0)) (list (list 4.0D0 2331.8505859375D0 0.002760272240266204D0 0.249886617064476D0)) (list (list 4.0D0 2330.722900390625D0 0.002831681864336133D0 0.2623809576034546D0)) (list (list 4.0D0 2329.302001953125D0 0.002825259929522872D0 0.274875283241272D0)) (list (list 4.0D0 2328.607666015625D0 0.002586882095783949D0 0.28736960887908936D0)) (list (list 4.0D0 2329.770263671875D0 0.002091821748763323D0 0.29986393451690674D0)) (list (list 4.0D0 2333.538330078125D0 0.0015545171918347478D0 0.3123582899570465D0)) (list (list 4.0D0 2337.00634765625D0 0.0012557771988213063D0 0.3248526155948639D0)) (list (list 4.0D0 2336.951416015625D0 0.0013238218380138278D0 0.3373469412326813D0)) (list (list 4.0D0 2334.415283203125D0 0.0019856158178299666D0 0.34984126687049866D0)) (list (list 4.0D0 2330.32080078125D0 0.0031309460755437613D0 0.36233559250831604D0)) (list (list 4.0D0 2331.221923828125D0 0.003937116824090481D0 0.3748299181461334D0)) (list (list 4.0D0 2333.734619140625D0 0.004321156069636345D0 0.3873242437839508D0)) (list (list 4.0D0 2334.03466796875D0 0.004764901474118233D0 0.3998185992240906D0)) (list (list 4.0D0 2332.0869140625D0 0.005346606019884348D0 0.41231292486190796D0)) (list (list 4.0D0 2331.070556640625D0 0.00580546585842967D0 0.42480725049972534D0)) (list (list 4.0D0 2331.788818359375D0 0.005806284956634045D0 0.4373015761375427D0)) (list (list 4.0D0 2332.541259765625D0 0.0055674221366643906D0 0.4497959315776825D0)) (list (list 4.0D0 2332.48974609375D0 0.005228966474533081D0 0.4622902572154999D0)) (list (list 4.0D0 2331.3642578125D0 0.004875851795077324D0 0.47478458285331726D0)) (list (list 4.0D0 2329.491455078125D0 0.004610241390764713D0 0.48727890849113465D0)) (list (list 4.0D0 2328.71142578125D0 0.004249729681760073D0 0.499773234128952D0)) (list (list 4.0D0 2329.890380859375D0 0.0036048355977982283D0 0.5122675895690918D0)) (list (list 4.0D0 2330.63330078125D0 0.002871881937608123D0 0.5247619152069092D0)) (list (list 4.0D0 2328.533447265625D0 0.002299713669344783D0 0.5372562408447266D0)) (list (list 4.0D0 2326.82958984375D0 0.0022309646010398865D0 0.549750566482544D0)) (list (list 4.0D0 2327.854736328125D0 0.0025220229290425778D0 0.5622448921203613D0)) (list (list 4.0D0 2328.660888671875D0 0.0030229161493480206D0 0.5747392177581787D0)) (list (list 4.0D0 2328.015380859375D0 0.0033597396686673165D0 0.5872335433959961D0)) (list (list 4.0D0 2328.566162109375D0 0.0031977843027561903D0 0.5997278690338135D0)) (list (list 4.0D0 2331.19189453125D0 0.002649565227329731D0 0.6122221946716309D0)) (list (list 4.0D0 2332.900634765625D0 0.0021161420736461878D0 0.624716579914093D0)) (list (list 4.0D0 2334.326904296875D0 0.0018416043603792787D0 0.6372109055519104D0)) (list (list 4.0D0 2335.59228515625D0 0.0018424936570227147D0 0.6497052311897278D0)) (list (list 4.0D0 2335.83349609375D0 0.0018195903394371272D0 0.6621995568275452D0)) (list (list 4.0D0 2336.26611328125D0 0.001547034364193678D0 0.6746938824653626D0)) (list (list 4.0D0 2337.91552734375D0 0.001156738493591547D0 0.6871882081031799D0)) (list (list 4.0D0 2337.795654296875D0 9.444573661312461D-4 0.6996825337409973D0)) (list (list 4.0D0 2334.108642578125D0 0.001055168337188661D0 0.7121768593788147D0)) (list (list 4.0D0 2327.29296875D0 0.0015866556204855442D0 0.7246711850166321D0)) (list (list 4.0D0 2323.9541015625D0 0.0022109709680080414D0 0.7371655106544495D0)) (list (list 4.0D0 2325.38134765625D0 0.0023148825857788325D0 0.7496598362922669D0)) (list (list 4.0D0 2329.538818359375D0 0.0020998502150177956D0 0.762154221534729D0)) (list (list 4.0D0 2330.529296875D0 0.0021280471701174975D0 0.7746485471725464D0)) (list (list 4.0D0 2329.943603515625D0 0.0026017979253083468D0 0.7871428728103638D0)) (list (list 4.0D0 2329.422119140625D0 0.0032230541110038758D0 0.7996371984481812D0)) (list (list 4.0D0 2329.58740234375D0 0.0034148285631090403D0 0.8121315240859985D0)) (list (list 4.0D0 2328.953125D0 0.0030149996746331454D0 0.8246258497238159D0)) (list (list 4.0D0 2325.970458984375D0 0.0023450851440429688D0 0.8371201753616333D0)) (list (list 4.0D0 2320.364990234375D0 0.0019477552268654108D0 0.8496145009994507D0)) (list (list 4.0D0 2317.81884765625D0 0.001700039254501462D0 0.8621088266372681D0)) (list (list 4.0D0 2318.04150390625D0 0.0014331869315356017D0 0.8746031522750855D0)) (list (list 4.0D0 2318.6982421875D0 0.0012870363425463438D0 0.8870974779129028D0)) (list (list 4.0D0 2314.304931640625D0 0.001028178259730339D0 0.899591863155365D0)) (list (list 4.0D0 2308.67333984375D0 0.0010730428621172905D0 0.9120861887931824D0)) (list (list 4.0D0 2304.9365234375D0 0.001200248603709042D0 0.9245805144309998D0)) (list (list 4.0D0 2296.7041015625D0 0.0012222500517964364D0 0.9370748400688171D0)) (list (list 4.0D0 2296.441162109375D0 0.0014096118975430727D0 0.9495691657066345D0)) (list (list 4.0D0 2297.554443359375D0 0.0020382737275213003D0 0.9620634913444519D0)) (list (list 4.0D0 2297.996826171875D0 0.002784829819574952D0 0.9745578169822693D0)) (list (list 4.0D0 2297.41650390625D0 0.0030007674358785153D0 0.9870521426200867D0)) (list (list 4.0D0 2297.556884765625D0 0.0025128107517957688D0 0.999546468257904D0)) (list (list 4.0D0 2298.496826171875D0 0.0017124713631346822D0 1.0120408535003662D0)) (list (list 4.0D0 2298.49462890625D0 0.0010210233740508557D0 1.0245351791381836D0)) (list (list 4.0D0 2297.779052734375D0 6.699484074488282D-4 1.037029504776001D0)) (list (list 4.0D0 2300.501708984375D0 7.293426315300167D-4 1.0495238304138184D0)) (list (list 4.0D0 2318.305419921875D0 0.0015632831491529942D0 1.0620181560516358D0)) (list (list 4.0D0 2306.82080078125D0 0.001298305345699191D0 1.0870068073272705D0)) (list (list 4.0D0 2282.417724609375D0 4.356382123660296D-4 1.099501132965088D0)) (list (list 4.0D0 2282.313232421875D0 3.066985809709877D-4 1.13698410987854D0)) (list (list 4.0D0 2297.025146484375D0 4.535452462732792D-4 1.1494784355163575D0)) (list (list 4.0D0 2295.6357421875D0 8.855696069076657D-4 1.1619727611541748D0)) (list (list 4.0D0 2296.353759765625D0 0.0017303323838859797D0 1.1744670867919922D0)) (list (list 4.0D0 2295.8134765625D0 0.0025040723849087954D0 1.1869614124298096D0)) (list (list 4.0D0 2295.835693359375D0 0.0027681526262313128D0 1.199455738067627D0)) (list (list 4.0D0 2296.85986328125D0 0.002421085722744465D0 1.2119500637054444D0)) (list (list 4.0D0 2298.912109375D0 0.0018005134770646692D0 1.2244443893432618D0)) (list (list 4.0D0 2307.09619140625D0 9.22303122933954D-4 1.249433159828186D0)) (list (list 4.0D0 2283.918212890625D0 3.609724226407707D-4 1.2619274854660035D0)) (list (list 4.0D0 2285.469482421875D0 5.994431558065116D-4 1.2744218111038208D0)) (list (list 4.0D0 2296.083740234375D0 0.0011734404833987356D0 1.2869161367416382D0)) (list (list 4.0D0 2291.44873046875D0 0.001554979244247079D0 1.2994104623794556D0)) (list (list 4.0D0 2291.966796875D0 0.001866510370746255D0 1.311904788017273D0)) (list (list 4.0D0 2296.99267578125D0 0.002151982858777046D0 1.3243991136550904D0)) (list (list 4.0D0 2304.247802734375D0 0.002615527017042041D0 1.3368934392929078D0)) (list (list 4.0D0 2306.489501953125D0 0.0025293687358498574D0 1.349387764930725D0)) (list (list 4.0D0 2309.140380859375D0 0.002095148665830493D0 1.3618820905685425D0)) (list (list 4.0D0 2307.4619140625D0 0.0016263918951153756D0 1.3743764162063599D0)) (list (list 4.0D0 2307.4619140625D0 0.0D0 1.3868707418441773D0)) (list (list 5.0D0 1879.816650390625D0 3.9921372081153095D-4 0.0D0)) (list (list 5.0D0 1875.7598876953125D0 6.97020732332021D-4 0.01249433122575283D0)) (list (list 5.0D0 1896.1326904296875D0 6.55186886433512D-4 0.02498866245150566D0)) (list (list 5.0D0 1894.146240234375D0 8.958037942647934D-4 0.03748299181461334D0)) (list (list 5.0D0 1858.76220703125D0 0.00598672591149807D0 0.04997732490301132D0)) (list (list 5.0D0 1901.1025390625D0 0.0010562075767666102D0 0.062471654266119D0)) (list (list 5.0D0 1897.9437255859375D0 0.0013674807269126177D0 0.07496598362922669D0)) (list (list 5.0D0 1927.050537109375D0 3.674937761388719D-4 0.08746031671762467D0)) (list (list 5.0D0 1867.225341796875D0 0.0021244038362056017D0 0.11244898289442063D0)) (list (list 5.0D0 1863.7269287109375D0 0.0034584454260766507D0 0.124943308532238D0)) (list (list 5.0D0 1864.17529296875D0 0.009412798099219799D0 0.14993196725845337D0)) (list (list 5.0D0 1865.32470703125D0 0.011807620525360108D0 0.16242630779743195D0)) (list (list 5.0D0 1865.2239990234375D0 0.012760783545672894D0 0.17492063343524933D0)) (list (list 5.0D0 1864.2733154296875D0 0.013069734908640385D0 0.1874149590730667D0)) (list (list 5.0D0 1863.731201171875D0 0.013275003992021084D0 0.1999092996120453D0)) (list (list 5.0D0 1864.5208740234375D0 0.01285353023558855D0 0.21240362524986267D0)) (list (list 5.0D0 1865.438720703125D0 0.011748207733035088D0 0.22489796578884125D0)) (list (list 5.0D0 1865.5592041015625D0 0.010419267229735852D0 0.23739229142665863D0)) (list (list 5.0D0 1865.281494140625D0 0.009449131786823273D0 0.249886617064476D0)) (list (list 5.0D0 1865.0660400390625D0 0.009110958315432072D0 0.2623809576034546D0)) (list (list 5.0D0 1865.199951171875D0 0.00949067808687687D0 0.274875283241272D0)) (list (list 5.0D0 1866.2099609375D0 0.010571632534265519D0 0.28736960887908936D0)) (list (list 5.0D0 1867.56689453125D0 0.012094252742826939D0 0.29986393451690674D0)) (list (list 5.0D0 1867.8497314453125D0 0.012987163849174977D0 0.3123582899570465D0)) (list (list 5.0D0 1865.8555908203125D0 0.012502931989729405D0 0.3248526155948639D0)) (list (list 5.0D0 1864.049560546875D0 0.012046285904943943D0 0.3373469412326813D0)) (list (list 5.0D0 1864.236572265625D0 0.012840649113059044D0 0.34984126687049866D0)) (list (list 5.0D0 1865.8486328125D0 0.01520951185375452D0 0.36233559250831604D0)) (list (list 5.0D0 1866.8822021484375D0 0.018057581037282944D0 0.3748299181461334D0)) (list (list 5.0D0 1867.02490234375D0 0.019971003755927086D0 0.3873242437839508D0)) (list (list 5.0D0 1866.73779296875D0 0.020362693816423416D0 0.3998185992240906D0)) (list (list 5.0D0 1866.0975341796875D0 0.01916368678212166D0 0.41231292486190796D0)) (list (list 5.0D0 1865.511962890625D0 0.01713036186993122D0 0.42480725049972534D0)) (list (list 5.0D0 1865.3916015625D0 0.015499912202358246D0 0.4373015761375427D0)) (list (list 5.0D0 1865.4691162109375D0 0.014968141913414002D0 0.4497959315776825D0)) (list (list 5.0D0 1865.37939453125D0 0.015102921053767205D0 0.4622902572154999D0)) (list (list 5.0D0 1865.116455078125D0 0.015017702244222165D0 0.47478458285331726D0)) (list (list 5.0D0 1864.836181640625D0 0.014387046918272972D0 0.48727890849113465D0)) (list (list 5.0D0 1864.7225341796875D0 0.013681529089808464D0 0.499773234128952D0)) (list (list 5.0D0 1864.9388427734375D0 0.013436177745461464D0 0.5122675895690918D0)) (list (list 5.0D0 1865.2100830078125D0 0.013716671615839005D0 0.5247619152069092D0)) (list (list 5.0D0 1864.8369140625D0 0.014261595904827118D0 0.5372562408447266D0)) (list (list 5.0D0 1863.714111328125D0 0.014670250006020069D0 0.549750566482544D0)) (list (list 5.0D0 1862.5213623046875D0 0.014445900917053223D0 0.5622448921203613D0)) (list (list 5.0D0 1862.4571533203125D0 0.013448924757540226D0 0.5747392177581787D0)) (list (list 5.0D0 1863.0599365234375D0 0.012575339525938034D0 0.5872335433959961D0)) (list (list 5.0D0 1863.5208740234375D0 0.012510634958744049D0 0.5997278690338135D0)) (list (list 5.0D0 1863.98193359375D0 0.012950277887284756D0 0.6122221946716309D0)) (list (list 5.0D0 1864.60595703125D0 0.01357167400419712D0 0.624716579914093D0)) (list (list 5.0D0 1864.8680419921875D0 0.014334646984934807D0 0.6372109055519104D0)) (list (list 5.0D0 1864.7008056640625D0 0.015153449960052967D0 0.6497052311897278D0)) (list (list 5.0D0 1864.865234375D0 0.01606045290827751D0 0.6621995568275452D0)) (list (list 5.0D0 1865.33154296875D0 0.01726398803293705D0 0.6746938824653626D0)) (list (list 5.0D0 1865.42724609375D0 0.018566999584436417D0 0.6871882081031799D0)) (list (list 5.0D0 1865.1990966796875D0 0.019464567303657532D0 0.6996825337409973D0)) (list (list 5.0D0 1865.203857421875D0 0.020006878301501274D0 0.7121768593788147D0)) (list (list 5.0D0 1865.32666015625D0 0.020679069682955742D0 0.7246711850166321D0)) (list (list 5.0D0 1865.266357421875D0 0.02153846062719822D0 0.7371655106544495D0)) (list (list 5.0D0 1865.2183837890625D0 0.022272156551480294D0 0.7496598362922669D0)) (list (list 5.0D0 1865.3831787109375D0 0.02291211113333702D0 0.762154221534729D0)) (list (list 5.0D0 1865.5491943359375D0 0.02367670089006424D0 0.7746485471725464D0)) (list (list 5.0D0 1865.55908203125D0 0.024356335401535034D0 0.7871428728103638D0)) (list (list 5.0D0 1865.48876953125D0 0.024628881365060807D0 0.7996371984481812D0)) (list (list 5.0D0 1865.372314453125D0 0.024603722617030144D0 0.8121315240859985D0)) (list (list 5.0D0 1865.26318359375D0 0.02460053563117981D0 0.8246258497238159D0)) (list (list 5.0D0 1865.41650390625D0 0.024802707135677338D0 0.8371201753616333D0)) (list (list 5.0D0 1865.671875D0 0.025192536413669586D0 0.8496145009994507D0)) (list (list 5.0D0 1865.3875732421875D0 0.025234907865524292D0 0.8621088266372681D0)) (list (list 5.0D0 1864.3614501953125D0 0.024232733994722367D0 0.8746031522750855D0)) (list (list 5.0D0 1863.2113037109375D0 0.022213345393538475D0 0.8870974779129028D0)) (list (list 5.0D0 1862.298828125D0 0.020019738003611565D0 0.899591863155365D0)) (list (list 5.0D0 1862.0595703125D0 0.018657827749848366D0 0.9120861887931824D0)) (list (list 5.0D0 1863.0631103515625D0 0.01853604055941105D0 0.9245805144309998D0)) (list (list 5.0D0 1864.529541015625D0 0.019750822335481644D0 0.9370748400688171D0)) (list (list 5.0D0 1865.486083984375D0 0.02162066288292408D0 0.9495691657066345D0)) (list (list 5.0D0 1865.8408203125D0 0.02339339256286621D0 0.9620634913444519D0)) (list (list 5.0D0 1865.6341552734375D0 0.02479736879467964D0 0.9745578169822693D0)) (list (list 5.0D0 1864.970703125D0 0.02588668093085289D0 0.9870521426200867D0)) (list (list 5.0D0 1864.53466796875D0 0.026911793276667595D0 0.999546468257904D0)) (list (list 5.0D0 1864.5545654296875D0 0.027955224737524987D0 1.0120408535003662D0)) (list (list 5.0D0 1864.7227783203125D0 0.02892346866428852D0 1.0245351791381836D0)) (list (list 5.0D0 1864.9715576171875D0 0.029757611453533173D0 1.037029504776001D0)) (list (list 5.0D0 1865.35400390625D0 0.030728131532669068D0 1.0495238304138184D0)) (list (list 5.0D0 1865.635986328125D0 0.03201279044151306D0 1.0620181560516358D0)) (list (list 5.0D0 1865.5262451171875D0 0.03332717344164848D0 1.0745124816894532D0)) (list (list 5.0D0 1865.0723876953125D0 0.03427507355809212D0 1.0870068073272705D0)) (list (list 5.0D0 1864.6827392578125D0 0.03465918079018593D0 1.099501132965088D0)) (list (list 5.0D0 1864.7193603515625D0 0.034561507403850555D0 1.1119954586029053D0)) (list (list 5.0D0 1864.9774169921875D0 0.034446779638528824D0 1.1244897842407227D0)) (list (list 5.0D0 1865.0465087890625D0 0.0345691554248333D0 1.13698410987854D0)) (list (list 5.0D0 1864.9302978515625D0 0.03470025584101677D0 1.1494784355163575D0)) (list (list 5.0D0 1864.854736328125D0 0.03459053486585617D0 1.1619727611541748D0)) (list (list 5.0D0 1864.840576171875D0 0.034286145120859146D0 1.1744670867919922D0)) (list (list 5.0D0 1864.8548583984375D0 0.033964816480875015D0 1.1869614124298096D0)) (list (list 5.0D0 1864.814453125D0 0.03360448032617569D0 1.199455738067627D0)) (list (list 5.0D0 1864.4605712890625D0 0.03293329104781151D0 1.2119500637054444D0)) (list (list 5.0D0 1863.8851318359375D0 0.031969208270311356D0 1.2244443893432618D0)) (list (list 5.0D0 1863.746826171875D0 0.031228432431817055D0 1.236938714981079D0)) (list (list 5.0D0 1864.2154541015625D0 0.031181516125798226D0 1.249433159828186D0)) (list (list 5.0D0 1864.6820068359375D0 0.03160104528069496D0 1.2619274854660035D0)) (list (list 5.0D0 1864.5887451171875D0 0.03168965503573418D0 1.2744218111038208D0)) (list (list 5.0D0 1864.1290283203125D0 0.031238537281751633D0 1.2869161367416382D0)) (list (list 5.0D0 1863.6953125D0 0.030484629794955254D0 1.2994104623794556D0)) (list (list 5.0D0 1863.6768798828125D0 0.02970680221915245D0 1.311904788017273D0)) (list (list 5.0D0 1864.2388916015625D0 0.02949807420372963D0 1.3243991136550904D0)) (list (list 5.0D0 1865.0616455078125D0 0.030517123639583588D0 1.3368934392929078D0)) (list (list 5.0D0 1865.62744140625D0 0.03248901665210724D0 1.349387764930725D0)) (list (list 5.0D0 1865.6512451171875D0 0.03437820449471474D0 1.3618820905685425D0)) (list (list 5.0D0 1865.39453125D0 0.035548411309719086D0 1.3743764162063599D0)) (list (list 5.0D0 1865.2296142578125D0 0.03599658980965614D0 1.3868707418441773D0)) (list (list 5.0D0 1865.1275634765625D0 0.03597268462181091D0 1.3993650674819947D0)) (list (list 5.0D0 1864.8638916015625D0 0.03585014119744301D0 1.411859393119812D0)) (list (list 5.0D0 1864.5914306640625D0 0.03609360381960869D0 1.4243537187576294D0)) (list (list 5.0D0 1864.6273193359375D0 0.03682463616132736D0 1.4368480443954468D0)) (list (list 5.0D0 1864.9158935546875D0 0.037701189517974854D0 1.4493423700332642D0)) (list (list 5.0D0 1865.068359375D0 0.03824303299188614D0 1.4618366956710816D0)) (list (list 5.0D0 1864.8896484375D0 0.038288723677396774D0 1.474331021308899D0)) (list (list 5.0D0 1864.665283203125D0 0.038072481751441956D0 1.4868253469467163D0)) (list (list 5.0D0 1864.7098388671875D0 0.03780099004507065D0 1.4993196725845337D0)) (list (list 5.0D0 1864.92138671875D0 0.03756331652402878D0 1.5118141174316407D0)) (list (list 5.0D0 1865.103271484375D0 0.03731498867273331D0 1.524308443069458D0)) (list (list 5.0D0 1865.2110595703125D0 0.03697505220770836D0 1.5368027687072754D0)) (list (list 5.0D0 1865.136474609375D0 0.036471325904130936D0 1.5492970943450928D0)) (list (list 5.0D0 1864.859619140625D0 0.03584763780236244D0 1.5617914199829102D0)) (list (list 5.0D0 1864.623291015625D0 0.0352642685174942D0 1.5742857456207276D0)) (list (list 5.0D0 1864.5511474609375D0 0.03480732440948486D0 1.586780071258545D0)) (list (list 5.0D0 1864.4920654296875D0 0.03443576768040657D0 1.5992743968963623D0)) (list (list 5.0D0 1864.395751953125D0 0.03409029543399811D0 1.6117687225341797D0)) (list (list 5.0D0 1864.539306640625D0 0.0337824672460556D0 1.624263048171997D0)) (list (list 5.0D0 1865.0958251953125D0 0.03359074518084526D0 1.6367573738098145D0)) (list (list 5.0D0 1865.6728515625D0 0.03349386528134346D0 1.6492516994476319D0)) (list (list 5.0D0 1865.7779541015625D0 0.032988738268613815D0 1.6617460250854493D0)) (list (list 5.0D0 1865.4083251953125D0 0.03169465437531471D0 1.6742403507232666D0)) (list (list 5.0D0 1865.00439453125D0 0.030069194734096527D0 1.686734676361084D0)) (list (list 5.0D0 1864.81103515625D0 0.029078448191285134D0 1.6992290019989014D0)) (list (list 5.0D0 1864.633544921875D0 0.029097354039549828D0 1.7117233276367188D0)) (list (list 5.0D0 1864.2872314453125D0 0.029500693082809448D0 1.7242176532745362D0)) (list (list 5.0D0 1863.9730224609375D0 0.029655572026968003D0 1.7367119789123536D0)) (list (list 5.0D0 1864.0535888671875D0 0.0296382624655962D0 1.749206304550171D0)) (list (list 5.0D0 1864.4619140625D0 0.02973840944468975D0 1.7617006301879883D0)) (list (list 5.0D0 1864.703369140625D0 0.029721062630414963D0 1.7741949558258057D0)) (list (list 5.0D0 1864.673583984375D0 0.029264140874147415D0 1.7866894006729126D0)) (list (list 5.0D0 1864.927001953125D0 0.028649628162384033D0 1.79918372631073D0)) (list (list 5.0D0 1865.4395751953125D0 0.02824551798403263D0 1.8116780519485474D0)) (list (list 5.0D0 1865.5001220703125D0 0.02774587832391262D0 1.8241723775863648D0)) (list (list 5.0D0 1865.007080078125D0 0.026848964393138886D0 1.8366667032241822D0)) (list (list 5.0D0 1864.619384765625D0 0.0258871391415596D0 1.8491610288619996D0)) (list (list 5.0D0 1864.6669921875D0 0.025205302983522415D0 1.861655354499817D0)) (list (list 5.0D0 1864.992919921875D0 0.024779727682471276D0 1.8741496801376343D0)) (list (list 5.0D0 1865.1405029296875D0 0.024395016953349114D0 1.8866440057754517D0)) (list (list 5.0D0 1864.7177734375D0 0.023899227380752564D0 1.899138331413269D0)) (list (list 5.0D0 1863.8673095703125D0 0.02336161956191063D0 1.9116326570510865D0)) (list (list 5.0D0 1863.3431396484375D0 0.022980784997344017D0 1.9241269826889038D0)) (list (list 5.0D0 1863.7052001953125D0 0.023048952221870423D0 1.9366213083267212D0)) (list (list 5.0D0 1864.4967041015625D0 0.023923978209495545D0 1.9491156339645386D0)) (list (list 5.0D0 1865.05078125D0 0.02511459030210972D0 1.961609959602356D0)) (list (list 5.0D0 1865.32763671875D0 0.025793401524424553D0 1.9741042852401734D0)) (list (list 5.0D0 1865.618408203125D0 0.025875886902213097D0 1.9865986108779908D0)) (list (list 5.0D0 1865.7880859375D0 0.025899836793541908D0 1.999092936515808D0)) (list (list 5.0D0 1865.6485595703125D0 0.02627776749432087D0 2.011587381362915D0)) (list (list 5.0D0 1865.4031982421875D0 0.02713383361697197D0 2.0240817070007324D0)) (list (list 5.0D0 1865.272705078125D0 0.028262892737984658D0 2.03657603263855D0)) (list (list 5.0D0 1865.118896484375D0 0.029102599248290062D0 2.049070358276367D0)) (list (list 5.0D0 1864.81201171875D0 0.029203176498413086D0 2.0615646839141846D0)) (list (list 5.0D0 1864.6263427734375D0 0.02889581210911274D0 2.074059009552002D0)) (list (list 5.0D0 1864.8822021484375D0 0.028929634019732476D0 2.0865533351898194D0)) (list (list 5.0D0 1865.507080078125D0 0.029561255127191544D0 2.0990476608276367D0)) (list (list 5.0D0 1865.780029296875D0 0.030480531975626946D0 2.111541986465454D0)) (list (list 5.0D0 1865.132080078125D0 0.031339019536972046D0 2.1240363121032715D0)) (list (list 5.0D0 1863.9141845703125D0 0.031990159302949905D0 2.136530637741089D0)) (list (list 5.0D0 1862.9910888671875D0 0.031822238117456436D0 2.1490249633789063D0)) (list (list 5.0D0 1863.0455322265625D0 0.030335914343595505D0 2.1615192890167237D0)) (list (list 5.0D0 1864.273193359375D0 0.02825935371220112D0 2.174013614654541D0)) (list (list 5.0D0 1866.326416015625D0 0.02732461877167225D0 2.1865079402923584D0)) (list (list 5.0D0 1867.3521728515625D0 0.028686843812465668D0 2.199002265930176D0)) (list (list 5.0D0 1866.6734619140625D0 0.03163944557309151D0 2.211496591567993D0)) (list (list 5.0D0 1865.2781982421875D0 0.03475579619407654D0 2.2239909172058106D0)) (list (list 5.0D0 1864.49951171875D0 0.03562095761299133D0 2.236485242843628D0)) (list (list 5.0D0 1864.5640869140625D0 0.033604249358177185D0 2.2489795684814453D0)) (list (list 5.0D0 1865.1715087890625D0 0.030532825738191605D0 2.2614738941192627D0)) (list (list 5.0D0 1865.49560546875D0 0.0283652413636446D0 2.27396821975708D0)) (list (list 5.0D0 1864.65869140625D0 0.0276864655315876D0 2.2864625453948975D0)) (list (list 5.0D0 1863.4068603515625D0 0.02824016660451889D0 2.298956871032715D0)) (list (list 5.0D0 1863.3349609375D0 0.0283118337392807D0 2.3114511966705323D0)) (list (list 5.0D0 1864.827880859375D0 0.027023497968912125D0 2.3239455223083496D0)) (list (list 5.0D0 1866.2315673828125D0 0.026026783511042595D0 2.336439847946167D0)) (list (list 5.0D0 1866.3587646484375D0 0.026528185233473778D0 2.3489341735839844D0)) (list (list 5.0D0 1865.4927978515625D0 0.027753982692956925D0 2.3614284992218018D0)) (list (list 5.0D0 1864.7877197265625D0 0.027326524257659912D0 2.373922824859619D0)) (list (list 5.0D0 1865.0418701171875D0 0.024361785501241684D0 2.3864171504974366D0)) (list (list 5.0D0 1865.8831787109375D0 0.020911654457449913D0 2.398911476135254D0)) (list (list 5.0D0 1866.798095703125D0 0.019231507554650307D0 2.4114058017730713D0)) (list (list 5.0D0 1866.7392578125D0 0.019520431756973267D0 2.4239001274108887D0)) (list (list 5.0D0 1865.0128173828125D0 0.020294345915317536D0 2.436394453048706D0)) (list (list 5.0D0 1862.3416748046875D0 0.020112570375204087D0 2.4488887786865235D0)) (list (list 5.0D0 1860.929931640625D0 0.017893394455313683D0 2.461383104324341D0)) (list (list 5.0D0 1861.2791748046875D0 0.014404861256480217D0 2.4738776683807373D0)) (list (list 5.0D0 1863.6124267578125D0 0.011764339171350003D0 2.4863719940185547D0)) (list (list 5.0D0 1867.008056640625D0 0.011901355348527432D0 2.498866319656372D0)) (list (list 5.0D0 1868.8253173828125D0 0.014645600691437722D0 2.5113606452941895D0)) (list (list 5.0D0 1867.8385009765625D0 0.017689405009150505D0 2.523854970932007D0)) (list (list 5.0D0 1865.8157958984375D0 0.019864313304424286D0 2.536349296569824D0)) (list (list 5.0D0 1864.8909912109375D0 0.020568767562508583D0 2.5488436222076416D0)) (list (list 5.0D0 1864.818603515625D0 0.019990988075733185D0 2.561337947845459D0)) (list (list 5.0D0 1864.805419921875D0 0.01879858784377575D0 2.5738322734832764D0)) (list (list 5.0D0 1864.770263671875D0 0.01755702868103981D0 2.5863265991210938D0)) (list (list 5.0D0 1864.9354248046875D0 0.017086327075958252D0 2.598820924758911D0)) (list (list 5.0D0 1864.9896240234375D0 0.01781061850488186D0 2.6113152503967285D0)) (list (list 5.0D0 1864.880859375D0 0.01890709437429905D0 2.623809576034546D0)) (list (list 5.0D0 1865.1571044921875D0 0.019087670370936394D0 2.6363039016723633D0)) (list (list 5.0D0 1865.741455078125D0 0.018250280991196633D0 2.6487982273101807D0)) (list (list 5.0D0 1865.9461669921875D0 0.017402075231075287D0 2.661292552947998D0)) (list (list 5.0D0 1865.665283203125D0 0.017153140157461167D0 2.6737868785858155D0)) (list (list 5.0D0 1864.9761962890625D0 0.01720253936946392D0 2.686281204223633D0)) (list (list 5.0D0 1863.89404296875D0 0.01723109371960163D0 2.69877552986145D0)) (list (list 5.0D0 1863.2274169921875D0 0.017177604138851166D0 2.7112698554992676D0)) (list (list 5.0D0 1864.492431640625D0 0.01638457551598549D0 2.723764181137085D0)) (list (list 5.0D0 1867.4195556640625D0 0.015163128264248371D0 2.7362585067749024D0)) (list (list 5.0D0 1869.46484375D0 0.01377897709608078D0 2.7487528324127198D0)) (list (list 5.0D0 1870.331787109375D0 0.012066335417330265D0 2.761247158050537D0)) (list (list 5.0D0 1870.41357421875D0 0.01049375906586647D0 2.7737414836883545D0)) (list (list 5.0D0 1869.361328125D0 0.009382684715092183D0 2.786235809326172D0)) (list (list 5.0D0 1867.2376708984375D0 0.008964715525507927D0 2.7987301349639893D0)) (list (list 5.0D0 1866.326171875D0 0.009191803634166718D0 2.8112244606018067D0)) (list (list 5.0D0 1866.869384765625D0 0.010047179646790028D0 2.823718786239624D0)) (list (list 5.0D0 1867.526123046875D0 0.011479981243610382D0 2.8362131118774414D0)) (list (list 5.0D0 1867.532958984375D0 0.012634352780878544D0 2.848707437515259D0)) (list (list 5.0D0 1866.7216796875D0 0.012895346619188786D0 2.861201763153076D0)) (list (list 5.0D0 1865.5086669921875D0 0.012905634939670563D0 2.8736960887908936D0)) (list (list 5.0D0 1864.4505615234375D0 0.013922888785600663D0 2.886190414428711D0)) (list (list 5.0D0 1863.886962890625D0 0.016290292143821717D0 2.8986847400665283D0)) (list (list 5.0D0 1864.0181884765625D0 0.01882006973028183D0 2.9111790657043457D0)) (list (list 5.0D0 1864.7738037109375D0 0.02015768550336361D0 2.923673391342163D0)) (list (list 5.0D0 1865.2886962890625D0 0.02031521126627922D0 2.9361677169799805D0)) (list (list 5.0D0 1865.2625732421875D0 0.0199392419308424D0 2.948662042617798D0)) (list (list 5.0D0 1865.0146484375D0 0.01920885033905506D0 2.9611563682556153D0)) (list (list 5.0D0 1864.6845703125D0 0.01797354407608509D0 2.9736506938934326D0)) (list (list 5.0D0 1863.9852294921875D0 0.016262615099549294D0 2.98614501953125D0)) (list (list 5.0D0 1863.1199951171875D0 0.014066952280700207D0 2.9986393451690674D0)) (list (list 5.0D0 1863.503173828125D0 0.011506271548569203D0 3.0111336708068848D0)) (list (list 5.0D0 1865.1187744140625D0 0.010005815885961056D0 3.0236282348632813D0)) (list (list 5.0D0 1866.3515625D0 0.010941030457615853D0 3.0361225605010987D0)) (list (list 5.0D0 1866.453857421875D0 0.013815291225910187D0 3.048616886138916D0)) (list (list 5.0D0 1865.9715576171875D0 0.01728888787329197D0 3.0611112117767334D0)) (list (list 5.0D0 1865.689453125D0 0.020385319367051125D0 3.073605537414551D0)) (list (list 5.0D0 1865.3564453125D0 0.022498844191432D0 3.086099863052368D0)) (list (list 5.0D0 1864.9527587890625D0 0.02294989861547947D0 3.0985941886901856D0)) (list (list 5.0D0 1864.977294921875D0 0.021303003653883934D0 3.111088514328003D0)) (list (list 5.0D0 1865.2259521484375D0 0.018106603994965554D0 3.1235828399658203D0)) (list (list 5.0D0 1865.0426025390625D0 0.014351052232086659D0 3.1360771656036377D0)) (list (list 5.0D0 1866.0323486328125D0 0.010706894099712372D0 3.148571491241455D0)) (list (list 5.0D0 1867.6883544921875D0 0.008682641200721264D0 3.1610658168792725D0)) (list (list 5.0D0 1865.855224609375D0 0.008557981811463833D0 3.17356014251709D0)) (list (list 5.0D0 1852.7271728515625D0 0.01126124057918787D0 3.1860544681549073D0)) (list (list 5.0D0 1855.565185546875D0 0.012023228220641613D0 3.1985487937927246D0)) (list (list 5.0D0 1859.0272216796875D0 0.009745139628648758D0 3.211043119430542D0)) (list (list 5.0D0 1864.260498046875D0 0.00835463311523199D0 3.2235374450683594D0)) (list (list 5.0D0 1867.171875D0 0.009610993787646294D0 3.2360317707061768D0)) (list (list 5.0D0 1866.532470703125D0 0.011610466986894608D0 3.248526096343994D0)) (list (list 5.0D0 1864.2154541015625D0 0.012864275835454464D0 3.2610204219818116D0)) (list (list 5.0D0 1863.0272216796875D0 0.011812604032456875D0 3.273514747619629D0)) (list (list 5.0D0 1867.379150390625D0 0.008394474163651467D0 3.2860090732574463D0)) (list (list 5.0D0 1849.42236328125D0 0.00519740954041481D0 3.2985033988952637D0)) (list (list 5.0D0 1851.9608154296875D0 0.005008897744119167D0 3.310997724533081D0)) (list (list 5.0D0 1867.890625D0 0.009201734326779843D0 3.3234920501708985D0)) (list (list 5.0D0 1866.6136474609375D0 0.009853597730398178D0 3.335986375808716D0)) (list (list 5.0D0 1867.69091796875D0 0.009355290792882443D0 3.348480701446533D0)) (list (list 5.0D0 1868.869873046875D0 0.009182247333228588D0 3.3609750270843506D0)) (list (list 5.0D0 1867.9290771484375D0 0.009681507013738156D0 3.373469352722168D0)) (list (list 5.0D0 1865.437255859375D0 0.010665680281817913D0 3.3859636783599854D0)) (list (list 5.0D0 1863.595703125D0 0.01107894815504551D0 3.3984580039978028D0)) (list (list 5.0D0 1863.628173828125D0 0.009965850971639157D0 3.41095232963562D0)) (list (list 5.0D0 1864.439208984375D0 0.008279310539364815D0 3.4234466552734375D0)) (list (list 5.0D0 1865.606201171875D0 0.00754030654206872D0 3.435940980911255D0)) (list (list 5.0D0 1866.7618408203125D0 0.008607807569205761D0 3.4484353065490723D0)) (list (list 5.0D0 1866.7689208984375D0 0.011133439838886261D0 3.4609296321868897D0)) (list (list 5.0D0 1865.9571533203125D0 0.014008031226694584D0 3.473423957824707D0)) (list (list 5.0D0 1866.0360107421875D0 0.016111746430397034D0 3.4859182834625244D0)) (list (list 5.0D0 1866.7054443359375D0 0.017179785296320915D0 3.498412609100342D0)) (list (list 5.0D0 1866.564697265625D0 0.017797203734517098D0 3.510906934738159D0)) (list (list 5.0D0 1865.5086669921875D0 0.018552837893366814D0 3.5234012603759766D0))) (list (list (list 5.0D0 1864.6278076171875D0 0.0194369126111269D0 3.535895586013794D0)) (list (list 5.0D0 1864.1827392578125D0 0.019754912704229355D0 3.5483899116516114D0)) (list (list 5.0D0 1863.703125D0 0.019139079377055168D0 3.5608842372894287D0)) (list (list 5.0D0 1863.2413330078125D0 0.017678197473287583D0 3.573378801345825D0)) (list (list 5.0D0 1863.1229248046875D0 0.016096655279397965D0 3.5858731269836426D0)) (list (list 5.0D0 1863.1676025390625D0 0.015463447198271752D0 3.59836745262146D0)) (list (list 5.0D0 1863.3267822265625D0 0.016046209260821343D0 3.6108617782592774D0)) (list (list 5.0D0 1863.89697265625D0 0.016919231042265892D0 3.6233561038970948D0)) (list (list 5.0D0 1864.62109375D0 0.017003942281007767D0 3.635850429534912D0)) (list (list 5.0D0 1865.21435546875D0 0.01577276736497879D0 3.6483447551727295D0)) (list (list 5.0D0 1865.7298583984375D0 0.013483365997672081D0 3.660839080810547D0)) (list (list 5.0D0 1865.8709716796875D0 0.011085821315646172D0 3.6733334064483643D0)) (list (list 5.0D0 1865.114501953125D0 0.009467270225286484D0 3.6858277320861817D0)) (list (list 5.0D0 1863.8563232421875D0 0.008901222608983517D0 3.698322057723999D0)) (list (list 5.0D0 1864.478515625D0 0.009100078605115414D0 3.7108163833618164D0)) (list (list 5.0D0 1866.575439453125D0 0.010701381601393223D0 3.723310708999634D0)) (list (list 5.0D0 1867.5311279296875D0 0.014271646738052369D0 3.735805034637451D0)) (list (list 5.0D0 1866.9342041015625D0 0.018506737425923348D0 3.7482993602752686D0)) (list (list 5.0D0 1866.28125D0 0.02153407782316208D0 3.760793685913086D0)) (list (list 5.0D0 1866.178466796875D0 0.022339753806591034D0 3.7732880115509033D0)) (list (list 5.0D0 1866.2093505859375D0 0.02170407399535179D0 3.7857823371887207D0)) (list (list 5.0D0 1866.218994140625D0 0.02085290662944317D0 3.798276662826538D0)) (list (list 5.0D0 1866.0716552734375D0 0.020178962498903275D0 3.8107709884643555D0)) (list (list 5.0D0 1865.2430419921875D0 0.019429583102464676D0 3.823265314102173D0)) (list (list 5.0D0 1863.7974853515625D0 0.018638867884874344D0 3.8357596397399903D0)) (list (list 5.0D0 1862.9227294921875D0 0.017974667251110077D0 3.8482539653778076D0)) (list (list 5.0D0 1863.19970703125D0 0.01739070564508438D0 3.860748291015625D0)) (list (list 5.0D0 1863.9859619140625D0 0.01721784844994545D0 3.8732426166534424D0)) (list (list 5.0D0 1864.2821044921875D0 0.01782076247036457D0 3.8857369422912598D0)) (list (list 5.0D0 1864.2215576171875D0 0.019124608486890793D0 3.898231267929077D0)) (list (list 5.0D0 1864.421875D0 0.020487602800130844D0 3.9107255935668946D0)) (list (list 5.0D0 1864.9080810546875D0 0.02126130647957325D0 3.923219919204712D0)) (list (list 5.0D0 1865.153564453125D0 0.02136358805000782D0 3.9357142448425293D0)) (list (list 5.0D0 1864.8448486328125D0 0.021129854023456574D0 3.9482085704803467D0)) (list (list 5.0D0 1864.4205322265625D0 0.021104831248521805D0 3.960702896118164D0)) (list (list 5.0D0 1864.5064697265625D0 0.02150731533765793D0 3.9731972217559815D0)) (list (list 5.0D0 1864.95654296875D0 0.02208404429256916D0 3.985691547393799D0)) (list (list 5.0D0 1865.0072021484375D0 0.022422555834054947D0 3.998185873031616D0)) (list (list 5.0D0 1864.5709228515625D0 0.022562243044376374D0 4.010680198669434D0)) (list (list 5.0D0 1864.2225341796875D0 0.02289693057537079D0 4.02317476272583D0)) (list (list 5.0D0 1864.16845703125D0 0.023389596492052078D0 4.035668849945068D0)) (list (list 5.0D0 1864.1517333984375D0 0.023579066619277D0 4.048163414001465D0)) (list (list 5.0D0 1863.8753662109375D0 0.02312925085425377D0 4.060657501220703D0)) (list (list 5.0D0 1863.4935302734375D0 0.022177711129188538D0 4.0731520652771D0)) (list (list 5.0D0 1863.7564697265625D0 0.020915420725941658D0 4.085646152496338D0)) (list (list 5.0D0 1864.964599609375D0 0.019850783050060272D0 4.098140716552734D0)) (list (list 5.0D0 1865.8775634765625D0 0.019767411053180695D0 4.110634803771973D0)) (list (list 5.0D0 1865.8016357421875D0 0.020618267357349396D0 4.123129367828369D0)) (list (list 5.0D0 1865.2569580078125D0 0.02163543924689293D0 4.135623455047607D0)) (list (list 5.0D0 1865.0185546875D0 0.02184891514480114D0 4.148118019104004D0)) (list (list 5.0D0 1865.416748046875D0 0.021361730992794037D0 4.160612106323242D0)) (list (list 5.0D0 1865.995849609375D0 0.021195385605096817D0 4.173106670379639D0)) (list (list 5.0D0 1865.963134765625D0 0.02158656157553196D0 4.185600757598877D0)) (list (list 5.0D0 1865.3951416015625D0 0.02183026820421219D0 4.198095321655273D0)) (list (list 5.0D0 1865.2208251953125D0 0.0216117762029171D0 4.210589408874512D0)) (list (list 5.0D0 1865.280517578125D0 0.02156454138457775D0 4.223083972930908D0)) (list (list 5.0D0 1864.919677734375D0 0.022170783951878548D0 4.2355780601501465D0)) (list (list 5.0D0 1864.4185791015625D0 0.022906238213181496D0 4.248072624206543D0)) (list (list 5.0D0 1864.581787109375D0 0.022743482142686844D0 4.260566711425781D0)) (list (list 5.0D0 1865.624755859375D0 0.02141064591705799D0 4.273061275482178D0)) (list (list 5.0D0 1866.7784423828125D0 0.01975766196846962D0 4.285555362701416D0)) (list (list 5.0D0 1867.062255859375D0 0.018957121297717095D0 4.2980499267578125D0)) (list (list 5.0D0 1866.6348876953125D0 0.019742680713534355D0 4.310544013977051D0)) (list (list 5.0D0 1866.182373046875D0 0.021520867943763733D0 4.323038578033447D0)) (list (list 5.0D0 1865.8048095703125D0 0.022679390385746956D0 4.3355326652526856D0)) (list (list 5.0D0 1865.1815185546875D0 0.022455014288425446D0 4.348027229309082D0)) (list (list 5.0D0 1864.577392578125D0 0.02161307819187641D0 4.36052131652832D0)) (list (list 5.0D0 1864.4818115234375D0 0.021096793934702873D0 4.373015880584717D0)) (list (list 5.0D0 1864.7540283203125D0 0.020976362749934197D0 4.385509967803955D0)) (list (list 5.0D0 1864.864990234375D0 0.020641891285777092D0 4.398004531860352D0)) (list (list 5.0D0 1864.6593017578125D0 0.01985746994614601D0 4.410499095916748D0)) (list (list 5.0D0 1864.359130859375D0 0.019219180569052696D0 4.422993183135986D0)) (list (list 5.0D0 1864.4078369140625D0 0.01930626481771469D0 4.435487747192383D0)) (list (list 5.0D0 1865.0823974609375D0 0.02008920907974243D0 4.447981834411621D0)) (list (list 5.0D0 1865.7708740234375D0 0.02114437334239483D0 4.460476398468018D0)) (list (list 5.0D0 1865.8084716796875D0 0.021967517212033272D0 4.472970485687256D0)) (list (list 5.0D0 1865.3470458984375D0 0.022467030212283135D0 4.485465049743652D0)) (list (list 5.0D0 1864.7381591796875D0 0.022819163277745247D0 4.497959136962891D0)) (list (list 5.0D0 1864.212646484375D0 0.02315147966146469D0 4.510453701019287D0)) (list (list 5.0D0 1864.0902099609375D0 0.02347428910434246D0 4.522947788238525D0)) (list (list 5.0D0 1864.5311279296875D0 0.023791439831256867D0 4.535442352294922D0)) (list (list 5.0D0 1865.23486328125D0 0.024189408868551255D0 4.54793643951416D0)) (list (list 5.0D0 1865.501953125D0 0.02467728964984417D0 4.560431003570557D0)) (list (list 5.0D0 1864.9639892578125D0 0.02508101612329483D0 4.572925090789795D0)) (list (list 5.0D0 1864.0927734375D0 0.025298986583948136D0 4.585419654846191D0)) (list (list 5.0D0 1863.818115234375D0 0.025220148265361786D0 4.59791374206543D0)) (list (list 5.0D0 1864.4176025390625D0 0.025031929835677147D0 4.610408306121826D0)) (list (list 5.0D0 1865.3741455078125D0 0.02506912127137184D0 4.6229023933410645D0)) (list (list 5.0D0 1865.9984130859375D0 0.02524460293352604D0 4.635396957397461D0)) (list (list 5.0D0 1866.0521240234375D0 0.02542404644191265D0 4.647891044616699D0)) (list (list 5.0D0 1865.63134765625D0 0.025571461766958237D0 4.660385608673096D0)) (list (list 5.0D0 1864.84814453125D0 0.025420356541872025D0 4.672879695892334D0)) (list (list 5.0D0 1864.1756591796875D0 0.02470455877482891D0 4.6853742599487305D0)) (list (list 5.0D0 1864.0118408203125D0 0.02350272424519062D0 4.697868347167969D0)) (list (list 5.0D0 1864.095703125D0 0.022283030673861504D0 4.710362911224365D0)) (list (list 5.0D0 1864.0499267578125D0 0.021396057680249214D0 4.7228569984436035D0)) (list (list 5.0D0 1864.045166015625D0 0.020843125879764557D0 4.7353515625D0)) (list (list 5.0D0 1864.3575439453125D0 0.020486898720264435D0 4.747845649719238D0)) (list (list 5.0D0 1864.8363037109375D0 0.020435813814401627D0 4.760340213775635D0)) (list (list 5.0D0 1865.1378173828125D0 0.020792346447706223D0 4.772834300994873D0)) (list (list 5.0D0 1865.034912109375D0 0.021005861461162567D0 4.7853288650512695D0)) (list (list 5.0D0 1864.542236328125D0 0.02020356059074402D0 4.797822952270508D0)) (list (list 5.0D0 1864.3358154296875D0 0.01842207834124565D0 4.810317516326904D0)) (list (list 5.0D0 1864.7823486328125D0 0.016810335218906403D0 4.822811603546143D0)) (list (list 5.0D0 1865.2646484375D0 0.01638164184987545D0 4.835306167602539D0)) (list (list 5.0D0 1865.125D0 0.016974277794361115D0 4.847800254821777D0)) (list (list 5.0D0 1864.8900146484375D0 0.018017083406448364D0 4.860294818878174D0)) (list (list 5.0D0 1865.2373046875D0 0.019149167463183403D0 4.872788906097412D0)) (list (list 5.0D0 1865.8863525390625D0 0.0200826246291399D0 4.885283470153809D0)) (list (list 5.0D0 1866.0589599609375D0 0.020211907103657723D0 4.897777557373047D0)) (list (list 5.0D0 1865.3668212890625D0 0.019135931506752968D0 4.910272121429443D0)) (list (list 5.0D0 1864.3077392578125D0 0.017325276508927346D0 4.922766208648682D0)) (list (list 5.0D0 1863.634033203125D0 0.01555571611970663D0 4.935260772705078D0)) (list (list 5.0D0 1863.71533203125D0 0.014444944448769093D0 4.947755336761475D0)) (list (list 5.0D0 1864.22509765625D0 0.014277576468884945D0 4.960249423980713D0)) (list (list 5.0D0 1864.5643310546875D0 0.014612583443522454D0 4.972743988037109D0)) (list (list 5.0D0 1864.5186767578125D0 0.014581035822629929D0 4.985238075256348D0)) (list (list 5.0D0 1864.6292724609375D0 0.013734548352658749D0 4.997732639312744D0)) (list (list 5.0D0 1865.295166015625D0 0.012389329262077809D0 5.010226726531982D0)) (list (list 5.0D0 1865.68798828125D0 0.011174916289746762D0 5.022721290588379D0)) (list (list 5.0D0 1864.66845703125D0 0.010409283451735974D0 5.035215377807617D0)) (list (list 5.0D0 1862.9862060546875D0 0.010403046384453774D0 5.047709941864014D0)) (list (list 5.0D0 1862.6356201171875D0 0.010893495753407479D0 5.060204029083252D0)) (list (list 5.0D0 1863.7486572265625D0 0.011475960724055767D0 5.072698593139648D0)) (list (list 5.0D0 1864.9613037109375D0 0.01190262008458376D0 5.085192680358887D0)) (list (list 5.0D0 1865.2598876953125D0 0.011781292967498303D0 5.097687244415283D0)) (list (list 5.0D0 1864.6614990234375D0 0.011194887571036816D0 5.1101813316345215D0)) (list (list 5.0D0 1863.759033203125D0 0.01049271784722805D0 5.122675895690918D0)) (list (list 5.0D0 1863.19091796875D0 0.009719730354845524D0 5.135169982910156D0)) (list (list 5.0D0 1863.3870849609375D0 0.008901292458176613D0 5.147664546966553D0)) (list (list 5.0D0 1863.714111328125D0 0.008527155965566635D0 5.160158634185791D0)) (list (list 5.0D0 1863.82080078125D0 0.008968254551291466D0 5.1726531982421875D0)) (list (list 5.0D0 1864.341796875D0 0.00988156907260418D0 5.185147285461426D0)) (list (list 5.0D0 1865.1513671875D0 0.01063698623329401D0 5.197641849517822D0)) (list (list 5.0D0 1864.8787841796875D0 0.01095568761229515D0 5.2101359367370606D0)) (list (list 5.0D0 1863.4906005859375D0 0.011123917996883393D0 5.222630500793457D0)) (list (list 5.0D0 1862.7208251953125D0 0.011293284595012665D0 5.235124588012695D0)) (list (list 5.0D0 1864.1387939453125D0 0.010894138365983963D0 5.247619152069092D0)) (list (list 5.0D0 1866.9410400390625D0 0.010148954577744007D0 5.26011323928833D0)) (list (list 5.0D0 1867.8746337890625D0 0.009132172912359238D0 5.272607803344727D0)) (list (list 5.0D0 1865.406494140625D0 0.007993379607796669D0 5.285101890563965D0)) (list (list 5.0D0 1863.01220703125D0 0.007698914967477322D0 5.297596454620361D0)) (list (list 5.0D0 1863.982666015625D0 0.007573379669338465D0 5.3100905418396D0)) (list (list 5.0D0 1866.3065185546875D0 0.007802891544997692D0 5.322585105895996D0)) (list (list 5.0D0 1866.4163818359375D0 0.008359339088201523D0 5.335079193115234D0)) (list (list 5.0D0 1865.1083984375D0 0.009176176972687245D0 5.347573757171631D0)) (list (list 5.0D0 1864.7850341796875D0 0.009859149344265461D0 5.360067844390869D0)) (list (list 5.0D0 1866.2578125D0 0.010127334855496884D0 5.372562408447266D0)) (list (list 5.0D0 1867.1309814453125D0 0.01046817284077406D0 5.385056495666504D0)) (list (list 5.0D0 1865.96435546875D0 0.010647113434970379D0 5.3975510597229D0)) (list (list 5.0D0 1863.3704833984375D0 0.010500934906303883D0 5.410045146942139D0)) (list (list 5.0D0 1862.57763671875D0 0.009899121709167958D0 5.422539710998535D0)) (list (list 5.0D0 1863.2454833984375D0 0.009244663640856743D0 5.435033798217773D0)) (list (list 5.0D0 1863.80126953125D0 0.009041108191013337D0 5.44752836227417D0)) (list (list 5.0D0 1863.9466552734375D0 0.009001190774142743D0 5.460022449493408D0)) (list (list 5.0D0 1864.859130859375D0 0.008734003640711308D0 5.472517013549805D0)) (list (list 5.0D0 1866.180419921875D0 0.008167829364538193D0 5.485011100769043D0)) (list (list 5.0D0 1865.81640625D0 0.007439900189638138D0 5.4975056648254395D0)) (list (list 5.0D0 1864.1953125D0 0.007151307072490454D0 5.510000228881836D0)) (list (list 5.0D0 1862.923828125D0 0.007578285876661539D0 5.522494316101074D0)) (list (list 5.0D0 1862.7933349609375D0 0.008118459954857827D0 5.534988880157471D0)) (list (list 5.0D0 1863.8883056640625D0 0.008028768002986908D0 5.547482967376709D0)) (list (list 5.0D0 1866.28564453125D0 0.007232002913951874D0 5.5599775314331055D0)) (list (list 5.0D0 1868.0411376953125D0 0.006408241111785173D0 5.572471618652344D0)) (list (list 5.0D0 1868.592041015625D0 0.006009161937981844D0 5.58496618270874D0)) (list (list 5.0D0 1867.799560546875D0 0.005912804044783115D0 5.5974602699279785D0)) (list (list 5.0D0 1864.829833984375D0 0.005868027918040752D0 5.609954833984375D0)) (list (list 5.0D0 1861.6483154296875D0 0.006407460197806358D0 5.622448921203613D0)) (list (list 5.0D0 1860.5230712890625D0 0.0075412895530462265D0 5.63494348526001D0)) (list (list 5.0D0 1861.9979248046875D0 0.008594698272645474D0 5.647437572479248D0)) (list (list 5.0D0 1864.36767578125D0 0.009175780229270459D0 5.6599321365356445D0)) (list (list 5.0D0 1865.9151611328125D0 0.0088392598554492D0 5.672426223754883D0)) (list (list 5.0D0 1865.1705322265625D0 0.007616008631885052D0 5.684920787811279D0)) (list (list 5.0D0 1862.5291748046875D0 0.0067274309694767D0 5.697414875030518D0)) (list (list 5.0D0 1860.6978759765625D0 0.007076366804540157D0 5.709909439086914D0)) (list (list 5.0D0 1861.0684814453125D0 0.0077384598553180695D0 5.722403526306152D0)) (list (list 5.0D0 1863.3829345703125D0 0.0075441999360919D0 5.734898090362549D0)) (list (list 5.0D0 1867.203369140625D0 0.0062916334718465805D0 5.747392177581787D0)) (list (list 5.0D0 1869.4803466796875D0 0.005385567434132099D0 5.759886741638184D0)) (list (list 5.0D0 1869.084716796875D0 0.005753351841121912D0 5.772380828857422D0)) (list (list 5.0D0 1865.675537109375D0 0.00711087929084897D0 5.784875392913818D0)) (list (list 5.0D0 1863.016845703125D0 0.00815187580883503D0 5.797369480133057D0)) (list (list 5.0D0 1863.3511962890625D0 0.0077582113444805145D0 5.809864044189453D0)) (list (list 5.0D0 1866.1302490234375D0 0.007151187397539616D0 5.822358131408691D0)) (list (list 5.0D0 1868.6907958984375D0 0.008334392681717873D0 5.834852695465088D0)) (list (list 5.0D0 1868.987548828125D0 0.010653984732925892D0 5.847346782684326D0)) (list (list 5.0D0 1867.0673828125D0 0.012445185333490372D0 5.859841346740723D0)) (list (list 5.0D0 1865.8228759765625D0 0.013098505325615406D0 5.872335433959961D0)) (list (list 5.0D0 1865.50146484375D0 0.012803648598492146D0 5.884829998016357D0)) (list (list 5.0D0 1864.89208984375D0 0.01191159337759018D0 5.897324085235596D0)) (list (list 5.0D0 1863.2550048828125D0 0.010489244014024735D0 5.909818649291992D0)) (list (list 5.0D0 1862.7606201171875D0 0.008956709876656533D0 5.9223127365112305D0)) (list (list 5.0D0 1864.2142333984375D0 0.008189748972654343D0 5.934807300567627D0)) (list (list 5.0D0 1865.608642578125D0 0.00885824766010046D0 5.947301387786865D0)) (list (list 5.0D0 1865.6407470703125D0 0.010190831497311592D0 5.959795951843262D0)) (list (list 5.0D0 1865.7369384765625D0 0.011457989923655987D0 5.9722900390625D0)) (list (list 5.0D0 1866.06201171875D0 0.01215368416160345D0 5.9847846031188965D0)) (list (list 5.0D0 1865.445556640625D0 0.011908340267837048D0 5.997278690338135D0)) (list (list 5.0D0 1864.182861328125D0 0.011201302520930767D0 6.009773254394531D0)) (list (list 5.0D0 1864.14453125D0 0.011005163192749024D0 6.0222673416137695D0)) (list (list 5.0D0 1865.1094970703125D0 0.01191809494048357D0 6.034761905670166D0)) (list (list 5.0D0 1865.659423828125D0 0.013513385318219662D0 6.0472564697265625D0)) (list (list 5.0D0 1865.52099609375D0 0.014915204606950283D0 6.059750556945801D0)) (list (list 5.0D0 1865.2471923828125D0 0.015600167214870453D0 6.072245121002197D0)) (list (list 5.0D0 1864.406982421875D0 0.015090652741491795D0 6.0847392082214356D0)) (list (list 5.0D0 1863.1875D0 0.013506485149264336D0 6.097233772277832D0)) (list (list 5.0D0 1862.826416015625D0 0.011725805699825287D0 6.10972785949707D0)) (list (list 5.0D0 1863.7939453125D0 0.010923977941274643D0 6.122222423553467D0)) (list (list 5.0D0 1865.097412109375D0 0.011729555204510689D0 6.134716510772705D0)) (list (list 5.0D0 1865.67822265625D0 0.013318956829607487D0 6.147211074829102D0)) (list (list 5.0D0 1865.4732666015625D0 0.014503070153295994D0 6.15970516204834D0)) (list (list 5.0D0 1865.239990234375D0 0.014931300655007363D0 6.172199726104736D0)) (list (list 5.0D0 1864.9388427734375D0 0.014797565527260304D0 6.184693813323975D0)) (list (list 5.0D0 1863.917724609375D0 0.014215118251740933D0 6.197188377380371D0)) (list (list 5.0D0 1863.013427734375D0 0.013556832447648049D0 6.209682464599609D0)) (list (list 5.0D0 1863.517333984375D0 0.013440162874758244D0 6.222177028656006D0)) (list (list 5.0D0 1864.97412109375D0 0.014524470083415509D0 6.234671115875244D0)) (list (list 5.0D0 1866.018798828125D0 0.01644923910498619D0 6.247165679931641D0)) (list (list 5.0D0 1866.162841796875D0 0.01823839358985424D0 6.259659767150879D0)) (list (list 5.0D0 1865.781005859375D0 0.019472504034638405D0 6.272154331207275D0)) (list (list 5.0D0 1865.223876953125D0 0.02016258053481579D0 6.284648418426514D0)) (list (list 5.0D0 1864.8363037109375D0 0.020497271791100502D0 6.29714298248291D0)) (list (list 5.0D0 1864.70751953125D0 0.020729683339595795D0 6.309637069702148D0)) (list (list 5.0D0 1864.6929931640625D0 0.021017320454120636D0 6.322131633758545D0)) (list (list 5.0D0 1864.6436767578125D0 0.021298887208104134D0 6.334625720977783D0)) (list (list 5.0D0 1864.4869384765625D0 0.0215531587600708D0 6.34712028503418D0)) (list (list 5.0D0 1864.3935546875D0 0.022056352347135544D0 6.359614372253418D0)) (list (list 5.0D0 1864.6397705078125D0 0.023001573979854584D0 6.3721089363098145D0)) (list (list 5.0D0 1865.115234375D0 0.024115851148962975D0 6.384603023529053D0)) (list (list 5.0D0 1865.360107421875D0 0.02484210394322872D0 6.397097587585449D0)) (list (list 5.0D0 1865.1998291015625D0 0.02481023781001568D0 6.4095916748046875D0)) (list (list 5.0D0 1864.66748046875D0 0.02400844357907772D0 6.422086238861084D0)) (list (list 5.0D0 1864.0130615234375D0 0.022853385657072067D0 6.434580326080322D0)) (list (list 5.0D0 1863.764892578125D0 0.02208087407052517D0 6.447074890136719D0)) (list (list 5.0D0 1864.02392578125D0 0.022110506892204285D0 6.459568977355957D0)) (list (list 5.0D0 1864.38818359375D0 0.022527070716023445D0 6.4720635414123535D0)) (list (list 5.0D0 1864.4215087890625D0 0.022409813478589058D0 6.484557628631592D0)) (list (list 5.0D0 1864.0079345703125D0 0.021452205255627632D0 6.497052192687988D0)) (list (list 5.0D0 1863.4537353515625D0 0.02028934471309185D0 6.509546279907227D0)) (list (list 5.0D0 1863.490234375D0 0.0195462703704834D0 6.522040843963623D0)) (list (list 5.0D0 1864.5419921875D0 0.01913604699075222D0 6.534534931182861D0)) (list (list 5.0D0 1866.2125244140625D0 0.018498694524168968D0 6.547029495239258D0)) (list (list 5.0D0 1867.719482421875D0 0.01713612861931324D0 6.559523582458496D0)) (list (list 5.0D0 1868.8878173828125D0 0.015178010798990727D0 6.572018146514893D0)) (list (list 5.0D0 1869.35400390625D0 0.012921951711177826D0 6.584512233734131D0)) (list (list 5.0D0 1867.9532470703125D0 0.01057950034737587D0 6.597006797790527D0)) (list (list 5.0D0 1865.5843505859375D0 0.009197868406772614D0 6.609501361846924D0)) (list (list 5.0D0 1864.6361083984375D0 0.009076518006622792D0 6.621995449066162D0)) (list (list 5.0D0 1865.3260498046875D0 0.00929535087198019D0 6.634490013122559D0)) (list (list 5.0D0 1865.8914794921875D0 0.00887485034763813D0 6.646984100341797D0)) (list (list 5.0D0 1865.1571044921875D0 0.007510036695748568D0 6.659478664398193D0)) (list (list 5.0D0 1863.950439453125D0 0.005922083277255297D0 6.671972751617432D0)) (list (list 5.0D0 1863.3062744140625D0 0.004679342731833458D0 6.684467315673828D0)) (list (list 5.0D0 1863.457763671875D0 0.003827007720246911D0 6.696961402893066D0)) (list (list 5.0D0 1863.7989501953125D0 0.003213545773178339D0 6.709455966949463D0)) (list (list 5.0D0 1863.9364013671875D0 0.0027070750948041678D0 6.721950054168701D0)) (list (list 5.0D0 1863.923583984375D0 0.0022531035356223584D0 6.734444618225098D0)) (list (list 5.0D0 1863.65478515625D0 0.0018337585497647524D0 6.746938705444336D0)) (list (list 5.0D0 1863.2027587890625D0 0.0014625199837610126D0 6.759433269500732D0)) (list (list 5.0D0 1863.251220703125D0 0.0011536618694663048D0 6.771927356719971D0)) (list (list 5.0D0 1864.2459716796875D0 8.923085988499224D-4 6.784421920776367D0)) (list (list 5.0D0 1865.5972900390625D0 6.549942190758884D-4 6.7969160079956055D0)) (list (list 5.0D0 1866.2421875D0 4.3862874736078084D-4 6.809410572052002D0)) (list (list 5.0D0 1866.095703125D0 2.6990141486749053D-4 6.82190465927124D0)) (list (list 5.0D0 1865.451416015625D0 1.59284973051399D-4 6.834399223327637D0)) (list (list 5.0D0 1865.7237548828125D0 9.032669913722202D-5 6.846893310546875D0)) (list (list 5.0D0 1871.4937744140625D0 5.1972387154819444D-5 6.8593878746032715D0)) (list (list 5.0D0 1874.264404296875D0 4.5219170715427026D-5 6.87188196182251D0)) (list (list 5.0D0 1868.1962890625D0 5.340568532119505D-5 6.884376525878906D0)) (list (list 5.0D0 1862.8170166015625D0 9.764995775185526D-5 6.8968706130981445D0)) (list (list 5.0D0 1862.9853515625D0 1.50116509757936D-4 6.909365177154541D0)) (list (list 5.0D0 1864.0068359375D0 1.9518216140568257D-4 6.921859264373779D0)) (list (list 5.0D0 1864.2900390625D0 2.2163111134432256D-4 6.934353828430176D0)) (list (list 5.0D0 1863.7391357421875D0 2.3421166406478733D-4 6.946847915649414D0)) (list (list 5.0D0 1863.2886962890625D0 2.509109617676586D-4 6.9593424797058106D0)) (list (list 5.0D0 1863.479248046875D0 2.7837679954245687D-4 6.971836566925049D0)) (list (list 5.0D0 1863.880615234375D0 3.077812143601477D-4 6.984331130981445D0)) (list (list 5.0D0 1863.860107421875D0 3.257230273447931D-4 6.996825218200684D0)) (list (list 5.0D0 1863.4627685546875D0 3.2575594377703965D-4 7.00931978225708D0)) (list (list 5.0D0 1863.0130615234375D0 3.08814225718379D-4 7.021813869476318D0)) (list (list 5.0D0 1862.6827392578125D0 2.792144368868321D-4 7.034308433532715D0)) (list (list 5.0D0 1862.55419921875D0 2.4304738326463848D-4 7.046802520751953D0)) (list (list 5.0D0 1862.7957763671875D0 2.0582597062457353D-4 7.05929708480835D0)) (list (list 5.0D0 1863.3963623046875D0 1.7077929805964232D-4 7.071791172027588D0)) (list (list 5.0D0 1863.9154052734375D0 1.387725060340017D-4 7.084285736083984D0)) (list (list 5.0D0 1863.9404296875D0 1.1010796879418194D-4 7.096779823303223D0)) (list (list 5.0D0 1863.63037109375D0 8.668695954838768D-5 7.109274387359619D0)) (list (list 5.0D0 1863.3193359375D0 6.958736048545689D-5 7.121768474578857D0)) (list (list 5.0D0 1863.0269775390625D0 5.7403722166782245D-5 7.134263038635254D0)) (list (list 5.0D0 1862.810546875D0 4.768653161590919D-5 7.14675760269165D0)) (list (list 5.0D0 1862.7269287109375D0 3.892043241648935D-5 7.159251689910889D0)) (list (list 5.0D0 1862.7269287109375D0 0.0D0 7.171746253967285D0)) (list (list 6.0D0 1388.2838134765625D0 0.0025347403716295958D0 0.0D0)) (list (list 6.0D0 1390.5545654296875D0 0.0062568155117332935D0 0.01249433122575283D0)) (list (list 6.0D0 1392.6727294921875D0 0.012502750381827355D0 0.02498866245150566D0)) (list (list 6.0D0 1394.3480224609375D0 0.021014023572206497D0 0.03748299181461334D0)) (list (list 6.0D0 1395.700927734375D0 0.030056945979595185D0 0.04997732490301132D0)) (list (list 6.0D0 1397.0533447265625D0 0.03736952319741249D0 0.062471654266119D0)) (list (list 6.0D0 1398.3944091796875D0 0.04208185523748398D0 0.07496598362922669D0)) (list (list 6.0D0 1399.405029296875D0 0.04491671174764633D0 0.08746031671762467D0)) (list (list 6.0D0 1400.002197265625D0 0.04676477611064911D0 0.09995464980602265D0)) (list (list 6.0D0 1400.4990234375D0 0.04798378422856331D0 0.11244898289442063D0)) (list (list 6.0D0 1401.0777587890625D0 0.048695050179958344D0 0.124943308532238D0)) (list (list 6.0D0 1401.5081787109375D0 0.04913899302482605D0 0.137437641620636D0)) (list (list 6.0D0 1401.5224609375D0 0.049266934394836426D0 0.14993196725845337D0)) (list (list 6.0D0 1401.0457763671875D0 0.04856850206851959D0 0.16242630779743195D0)) (list (list 6.0D0 1400.181396484375D0 0.04636114835739136D0 0.17492063343524933D0)) (list (list 6.0D0 1399.10498046875D0 0.042000193148851395D0 0.1874149590730667D0)) (list (list 6.0D0 1398.2239990234375D0 0.03555803745985031D0 0.1999092996120453D0)) (list (list 6.0D0 1397.92578125D0 0.02833394706249237D0 0.21240362524986267D0)) (list (list 6.0D0 1398.0723876953125D0 0.022190837189555168D0 0.22489796578884125D0)) (list (list 6.0D0 1398.247802734375D0 0.01792154647409916D0 0.23739229142665863D0)) (list (list 6.0D0 1398.1658935546875D0 0.014915881678462029D0 0.249886617064476D0)) (list (list 6.0D0 1397.79248046875D0 0.012173726223409176D0 0.2623809576034546D0)) (list (list 6.0D0 1396.6895751953125D0 0.008976119570434094D0 0.274875283241272D0)) (list (list 6.0D0 1391.6759033203125D0 0.0058685303665697575D0 0.28736960887908936D0)) (list (list 6.0D0 1388.87060546875D0 0.004625787492841482D0 0.29986393451690674D0)) (list (list 6.0D0 1391.1988525390625D0 0.004695209674537182D0 0.3123582899570465D0)) (list (list 6.0D0 1397.4649658203125D0 0.0060837226919829846D0 0.3248526155948639D0)) (list (list 6.0D0 1399.12158203125D0 0.006831727921962738D0 0.3373469412326813D0)) (list (list 6.0D0 1401.827880859375D0 0.006248800549656153D0 0.34984126687049866D0)) (list (list 6.0D0 1405.921875D0 0.005664994474500418D0 0.36233559250831604D0)) (list (list 6.0D0 1406.9979248046875D0 0.006006167270243168D0 0.3748299181461334D0)) (list (list 6.0D0 1405.70068359375D0 0.00771066639572382D0 0.3873242437839508D0)) (list (list 6.0D0 1403.8721923828125D0 0.011093901470303536D0 0.3998185992240906D0)) (list (list 6.0D0 1401.8734130859375D0 0.015752024948596955D0 0.41231292486190796D0)) (list (list 6.0D0 1399.99951171875D0 0.02129335328936577D0 0.42480725049972534D0)) (list (list 6.0D0 1399.1541748046875D0 0.027030907571315766D0 0.4373015761375427D0)) (list (list 6.0D0 1399.10693359375D0 0.032469864934682846D0 0.4497959315776825D0)) (list (list 6.0D0 1399.2828369140625D0 0.03753317520022392D0 0.4622902572154999D0)) (list (list 6.0D0 1399.2459716796875D0 0.041855331510305405D0 0.47478458285331726D0)) (list (list 6.0D0 1398.9586181640625D0 0.044924862682819366D0 0.48727890849113465D0)) (list (list 6.0D0 1398.757080078125D0 0.04654631018638611D0 0.499773234128952D0)) (list (list 6.0D0 1398.84619140625D0 0.0469028539955616D0 0.5122675895690918D0)) (list (list 6.0D0 1399.104248046875D0 0.04620416834950447D0 0.5247619152069092D0)) (list (list 6.0D0 1399.2730712890625D0 0.04405266046524048D0 0.5372562408447266D0)) (list (list 6.0D0 1399.12744140625D0 0.039892055094242096D0 0.549750566482544D0)) (list (list 6.0D0 1398.5843505859375D0 0.03400782495737076D0 0.5622448921203613D0)) (list (list 6.0D0 1397.8349609375D0 0.027487976476550102D0 0.5747392177581787D0)) (list (list 6.0D0 1397.2135009765625D0 0.021218212321400643D0 0.5872335433959961D0)) (list (list 6.0D0 1397.050537109375D0 0.015745142474770546D0 0.5997278690338135D0)) (list (list 6.0D0 1397.19921875D0 0.011529889889061451D0 0.6122221946716309D0)) (list (list 6.0D0 1397.4005126953125D0 0.008615129627287388D0 0.624716579914093D0)) (list (list 6.0D0 1397.6610107421875D0 0.006652399431914091D0 0.6372109055519104D0)) (list (list 6.0D0 1397.5589599609375D0 0.0053582461550831795D0 0.6497052311897278D0)) (list (list 6.0D0 1395.8525390625D0 0.0044129048474133015D0 0.6621995568275452D0)) (list (list 6.0D0 1390.3115234375D0 0.003943620249629021D0 0.6746938824653626D0)) (list (list 6.0D0 1389.18798828125D0 0.004317627288401127D0 0.6871882081031799D0)) (list (list 6.0D0 1392.1842041015625D0 0.005760085303336382D0 0.6996825337409973D0)) (list (list 6.0D0 1396.015625D0 0.008901083841919899D0 0.7121768593788147D0)) (list (list 6.0D0 1397.24755859375D0 0.011982012540102005D0 0.7246711850166321D0)) (list (list 6.0D0 1398.14111328125D0 0.013563910499215126D0 0.7371655106544495D0)) (list (list 6.0D0 1398.859619140625D0 0.01361086405813694D0 0.7496598362922669D0)) (list (list 6.0D0 1399.0615234375D0 0.01287324633449316D0 0.762154221534729D0)) (list (list 6.0D0 1399.0819091796875D0 0.011695443652570248D0 0.7746485471725464D0)) (list (list 6.0D0 1399.4996337890625D0 0.009607676416635514D0 0.7871428728103638D0)) (list (list 6.0D0 1400.901611328125D0 0.006514532491564751D0 0.7996371984481812D0)) (list (list 6.0D0 1404.163818359375D0 0.0034882009495049715D0 0.8121315240859985D0)) (list (list 6.0D0 1403.9078369140625D0 0.0015832618810236454D0 0.8246258497238159D0)) (list (list 6.0D0 1396.896484375D0 0.0014101192355155945D0 0.8371201753616333D0)) (list (list 6.0D0 1391.5491943359375D0 0.003124233800917864D0 0.8496145009994507D0)) (list (list 6.0D0 1393.7037353515625D0 0.004802783951163292D0 0.8621088266372681D0)) (list (list 6.0D0 1394.8634033203125D0 0.005663095973432064D0 0.8746031522750855D0)) (list (list 6.0D0 1394.9710693359375D0 0.005240302067250013D0 0.8870974779129028D0)) (list (list 6.0D0 1395.396728515625D0 0.004192844964563847D0 0.899591863155365D0)) (list (list 6.0D0 1396.2781982421875D0 0.003693041391670704D0 0.9120861887931824D0)) (list (list 6.0D0 1397.2139892578125D0 0.004441790282726288D0 0.9245805144309998D0)) (list (list 6.0D0 1398.1124267578125D0 0.0061008138582110405D0 0.9370748400688171D0)) (list (list 6.0D0 1398.721923828125D0 0.00756819685921073D0 0.9495691657066345D0)) (list (list 6.0D0 1399.034912109375D0 0.008089461363852024D0 0.9620634913444519D0)) (list (list 6.0D0 1399.13232421875D0 0.007889388129115105D0 0.9745578169822693D0)) (list (list 6.0D0 1398.69384765625D0 0.007497582118958235D0 0.9870521426200867D0)) (list (list 6.0D0 1397.7891845703125D0 0.007039125543087721D0 0.999546468257904D0)) (list (list 6.0D0 1397.05908203125D0 0.006398287136107683D0 1.0120408535003662D0)) (list (list 6.0D0 1395.9251708984375D0 0.005539237055927515D0 1.0245351791381836D0)) (list (list 6.0D0 1392.8902587890625D0 0.0047134291380643845D0 1.037029504776001D0)) (list (list 6.0D0 1390.0325927734375D0 0.004458022769540548D0 1.0495238304138184D0)) (list (list 6.0D0 1389.400390625D0 0.004661508370190859D0 1.0620181560516358D0)) (list (list 6.0D0 1392.0360107421875D0 0.004803132731467485D0 1.0745124816894532D0)) (list (list 6.0D0 1395.5445556640625D0 0.004692572634667158D0 1.0870068073272705D0)) (list (list 6.0D0 1396.8372802734375D0 0.003788755042478442D0 1.099501132965088D0)) (list (list 6.0D0 1388.8533935546875D0 0.0025493588764220476D0 1.1119954586029053D0)) (list (list 6.0D0 1384.5216064453125D0 0.0023338249884545803D0 1.1244897842407227D0)) (list (list 6.0D0 1384.6529541015625D0 0.0025039820466190577D0 1.13698410987854D0)) (list (list 6.0D0 1386.9132080078125D0 0.00331562920473516D0 1.1494784355163575D0)) (list (list 6.0D0 1392.0126953125D0 0.005058052483946085D0 1.1619727611541748D0)) (list (list 6.0D0 1397.9041748046875D0 0.008658967912197113D0 1.1744670867919922D0)) (list (list 6.0D0 1398.2894287109375D0 0.012376329861581326D0 1.1869614124298096D0)) (list (list 6.0D0 1398.2003173828125D0 0.015329038724303246D0 1.199455738067627D0)) (list (list 6.0D0 1398.1956787109375D0 0.017226023599505425D0 1.2119500637054444D0)) (list (list 6.0D0 1398.2291259765625D0 0.017872313037514687D0 1.2244443893432618D0)) (list (list 6.0D0 1398.2174072265625D0 0.01729501225054264D0 1.236938714981079D0)) (list (list 6.0D0 1398.1793212890625D0 0.01567246951162815D0 1.249433159828186D0)) (list (list 6.0D0 1398.198486328125D0 0.013173189014196396D0 1.2619274854660035D0)) (list (list 6.0D0 1398.2857666015625D0 0.010026179254055024D0 1.2744218111038208D0)) (list (list 6.0D0 1398.0230712890625D0 0.006780361291021109D0 1.2869161367416382D0)) (list (list 6.0D0 1397.330078125D0 0.004559229593724012D0 1.2994104623794556D0)) (list (list 6.0D0 1397.29296875D0 0.004126851912587881D0 1.311904788017273D0)) (list (list 6.0D0 1397.6741943359375D0 0.004695769865065813D0 1.3243991136550904D0)) (list (list 6.0D0 1397.215087890625D0 0.004846715368330479D0 1.3368934392929078D0)) (list (list 6.0D0 1397.47509765625D0 0.004709974862635136D0 1.349387764930725D0)) (list (list 6.0D0 1398.587646484375D0 0.0057955519296228886D0 1.3618820905685425D0)) (list (list 6.0D0 1400.4598388671875D0 0.008968710899353028D0 1.3743764162063599D0)) (list (list 6.0D0 1400.749267578125D0 0.01385106798261404D0 1.3868707418441773D0)) (list (list 6.0D0 1400.238525390625D0 0.019800947979092598D0 1.3993650674819947D0)) (list (list 6.0D0 1399.5889892578125D0 0.025424975901842118D0 1.411859393119812D0)) (list (list 6.0D0 1399.1751708984375D0 0.02850555069744587D0 1.4243537187576294D0)) (list (list 6.0D0 1399.0302734375D0 0.028356492519378662D0 1.4368480443954468D0)) (list (list 6.0D0 1398.91064453125D0 0.026284538209438324D0 1.4493423700332642D0)) (list (list 6.0D0 1398.6827392578125D0 0.02299194224178791D0 1.4618366956710816D0)) (list (list 6.0D0 1398.4158935546875D0 0.018153106793761254D0 1.474331021308899D0)) (list (list 6.0D0 1398.49755859375D0 0.012686042115092278D0 1.4868253469467163D0)) (list (list 6.0D0 1398.906005859375D0 0.008740355260670185D0 1.4993196725845337D0)) (list (list 6.0D0 1399.2818603515625D0 0.007177513092756271D0 1.5118141174316407D0)) (list (list 6.0D0 1399.0562744140625D0 0.007021986413747072D0 1.524308443069458D0)) (list (list 6.0D0 1398.5140380859375D0 0.006953840609639883D0 1.5368027687072754D0)) (list (list 6.0D0 1398.6231689453125D0 0.006143517792224884D0 1.5492970943450928D0)) (list (list 6.0D0 1399.7435302734375D0 0.004970131907612085D0 1.5617914199829102D0)) (list (list 6.0D0 1399.4517822265625D0 0.004933066666126251D0 1.5742857456207276D0)) (list (list 6.0D0 1398.05224609375D0 0.006965158507227898D0 1.586780071258545D0)) (list (list 6.0D0 1397.472412109375D0 0.010043971240520478D0 1.5992743968963623D0)) (list (list 6.0D0 1397.8515625D0 0.012676347978413105D0 1.6117687225341797D0)) (list (list 6.0D0 1397.9117431640625D0 0.015083199366927147D0 1.624263048171997D0)) (list (list 6.0D0 1397.9837646484375D0 0.018104249611496926D0 1.6367573738098145D0)) (list (list 6.0D0 1398.47509765625D0 0.020956115797162056D0 1.6492516994476319D0)) (list (list 6.0D0 1399.5125732421875D0 0.021622976288199425D0 1.6617460250854493D0)) (list (list 6.0D0 1400.496826171875D0 0.019665798172354698D0 1.6742403507232666D0)) (list (list 6.0D0 1400.6514892578125D0 0.017063990235328675D0 1.686734676361084D0)) (list (list 6.0D0 1399.7806396484375D0 0.01604391448199749D0 1.6992290019989014D0)) (list (list 6.0D0 1398.393310546875D0 0.01694427616894245D0 1.7117233276367188D0)) (list (list 6.0D0 1397.638427734375D0 0.018043069168925286D0 1.7242176532745362D0)) (list (list 6.0D0 1397.9354248046875D0 0.017515378072857857D0 1.7367119789123536D0)) (list (list 6.0D0 1398.6102294921875D0 0.015004980377852917D0 1.749206304550171D0)) (list (list 6.0D0 1398.89306640625D0 0.011153427883982659D0 1.7617006301879883D0)) (list (list 6.0D0 1398.815673828125D0 0.006938898470252752D0 1.7741949558258057D0)) (list (list 6.0D0 1401.6690673828125D0 0.0034180183429270983D0 1.7866894006729126D0)) (list (list 6.0D0 1404.0123291015625D0 0.0016175280325114727D0 1.79918372631073D0)) (list (list 6.0D0 1401.0703125D0 0.001204064697958529D0 1.8116780519485474D0)) (list (list 6.0D0 1393.8359375D0 0.0017654616385698319D0 1.8241723775863648D0)) (list (list 6.0D0 1395.9373779296875D0 0.002055950928479433D0 1.8366667032241822D0)) (list (list 6.0D0 1396.6617431640625D0 0.0021515029948204756D0 1.8491610288619996D0)) (list (list 6.0D0 1395.145751953125D0 0.0023224414326250553D0 1.861655354499817D0)) (list (list 6.0D0 1395.0125732421875D0 0.002979522105306387D0 1.8741496801376343D0)) (list (list 6.0D0 1396.90234375D0 0.004387854598462582D0 1.8866440057754517D0)) (list (list 6.0D0 1397.8887939453125D0 0.0064226677641272545D0 1.899138331413269D0)) (list (list 6.0D0 1397.8089599609375D0 0.008071675896644593D0 1.9116326570510865D0)) (list (list 6.0D0 1398.3890380859375D0 0.008248820900917054D0 1.9241269826889038D0)) (list (list 6.0D0 1401.0560302734375D0 0.006659360136836767D0 1.9366213083267212D0)) (list (list 6.0D0 1405.6207275390625D0 0.004441519733518362D0 1.9491156339645386D0)) (list (list 6.0D0 1415.8817138671875D0 0.0028334474191069603D0 1.961609959602356D0)) (list (list 6.0D0 1418.048583984375D0 0.002830901648849249D0 1.9741042852401734D0)) (list (list 6.0D0 1394.7347412109375D0 0.004248148761689663D0 1.9865986108779908D0)) (list (list 6.0D0 1398.5008544921875D0 0.006426529493182898D0 1.999092936515808D0)) (list (list 6.0D0 1398.5418701171875D0 0.008249028585851193D0 2.011587381362915D0)) (list (list 6.0D0 1398.2603759765625D0 0.009823682717978955D0 2.0240817070007324D0)) (list (list 6.0D0 1398.28125D0 0.011306331492960453D0 2.03657603263855D0)) (list (list 6.0D0 1398.453125D0 0.01210541371256113D0 2.049070358276367D0)) (list (list 6.0D0 1398.5828857421875D0 0.01135440543293953D0 2.0615646839141846D0)) (list (list 6.0D0 1398.661865234375D0 0.008560828864574433D0 2.074059009552002D0)) (list (list 6.0D0 1390.152587890625D0 0.005023439414799213D0 2.0865533351898194D0)) (list (list 6.0D0 1408.7105712890625D0 0.0034370622597634793D0 2.0990476608276367D0)) (list (list 6.0D0 1391.713134765625D0 0.0058937943540513516D0 2.111541986465454D0)) (list (list 6.0D0 1394.9471435546875D0 0.011063951067626477D0 2.1240363121032715D0)) (list (list 6.0D0 1395.83740234375D0 0.017227571457624436D0 2.136530637741089D0)) (list (list 6.0D0 1396.693359375D0 0.022488083690404892D0 2.1490249633789063D0)) (list (list 6.0D0 1397.6944580078125D0 0.025330638512969017D0 2.1615192890167237D0)) (list (list 6.0D0 1398.929443359375D0 0.02618834748864174D0 2.174013614654541D0)) (list (list 6.0D0 1399.9234619140625D0 0.02677377127110958D0 2.1865079402923584D0)) (list (list 6.0D0 1400.6207275390625D0 0.02802623249590397D0 2.199002265930176D0)) (list (list 6.0D0 1401.25830078125D0 0.030092785134911537D0 2.211496591567993D0)) (list (list 6.0D0 1401.29248046875D0 0.03283409774303436D0 2.2239909172058106D0)) (list (list 6.0D0 1400.2064208984375D0 0.035562679171562195D0 2.236485242843628D0)) (list (list 6.0D0 1398.6031494140625D0 0.03729051351547241D0 2.2489795684814453D0)) (list (list 6.0D0 1397.9990234375D0 0.037171345204114914D0 2.2614738941192627D0)) (list (list 6.0D0 1398.3472900390625D0 0.036920446902513504D0 2.27396821975708D0)) (list (list 6.0D0 1398.529052734375D0 0.03933180868625641D0 2.2864625453948975D0)) (list (list 6.0D0 1398.218505859375D0 0.04384332895278931D0 2.298956871032715D0)) (list (list 6.0D0 1397.99365234375D0 0.04714535176753998D0 2.3114511966705323D0)) (list (list 6.0D0 1398.35498046875D0 0.04678655043244362D0 2.3239455223083496D0)) (list (list 6.0D0 1399.1607666015625D0 0.04382814094424248D0 2.336439847946167D0)) (list (list 6.0D0 1399.73291015625D0 0.04115752503275871D0 2.3489341735839844D0)) (list (list 6.0D0 1399.4144287109375D0 0.04000585526227951D0 2.3614284992218018D0)) (list (list 6.0D0 1398.328857421875D0 0.03916819766163826D0 2.373922824859619D0)) (list (list 6.0D0 1397.5966796875D0 0.03640013933181763D0 2.3864171504974366D0)) (list (list 6.0D0 1398.2550048828125D0 0.030987611040472985D0 2.398911476135254D0)) (list (list 6.0D0 1400.0399169921875D0 0.025571374222636223D0 2.4114058017730713D0)) (list (list 6.0D0 1401.224609375D0 0.02329111658036709D0 2.4239001274108887D0)) (list (list 6.0D0 1400.5452880859375D0 0.025411618873476982D0 2.436394453048706D0)) (list (list 6.0D0 1398.53515625D0 0.03203189745545387D0 2.4488887786865235D0)) (list (list 6.0D0 1396.8721923828125D0 0.04092516377568245D0 2.461383104324341D0)) (list (list 6.0D0 1396.5091552734375D0 0.047828737646341324D0 2.4738776683807373D0)) (list (list 6.0D0 1397.0811767578125D0 0.04989493265748024D0 2.4863719940185547D0)) (list (list 6.0D0 1398.369140625D0 0.04681887850165367D0 2.498866319656372D0)) (list (list 6.0D0 1400.0242919921875D0 0.04125817492604256D0 2.5113606452941895D0)) (list (list 6.0D0 1400.839111328125D0 0.03714964911341667D0 2.523854970932007D0)) (list (list 6.0D0 1400.3033447265625D0 0.03666325658559799D0 2.536349296569824D0)) (list (list 6.0D0 1399.1865234375D0 0.03956243395805359D0 2.5488436222076416D0)) (list (list 6.0D0 1398.675537109375D0 0.04355568066239357D0 2.561337947845459D0)) (list (list 6.0D0 1398.574951171875D0 0.04732854291796684D0 2.5738322734832764D0)) (list (list 6.0D0 1398.4329833984375D0 0.05082836374640465D0 2.5863265991210938D0)) (list (list 6.0D0 1398.2025146484375D0 0.05383000895380974D0 2.598820924758911D0)) (list (list 6.0D0 1398.0299072265625D0 0.056162815541028976D0 2.6113152503967285D0)) (list (list 6.0D0 1398.0762939453125D0 0.058638449758291245D0 2.623809576034546D0)) (list (list 6.0D0 1398.299072265625D0 0.06261672079563141D0 2.6363039016723633D0)) (list (list 6.0D0 1398.526611328125D0 0.0680244192481041D0 2.6487982273101807D0)) (list (list 6.0D0 1398.6220703125D0 0.07279559969902039D0 2.661292552947998D0)) (list (list 6.0D0 1398.605712890625D0 0.07500503957271576D0 2.6737868785858155D0)) (list (list 6.0D0 1398.63720703125D0 0.07444808632135391D0 2.686281204223633D0)) (list (list 6.0D0 1398.8856201171875D0 0.07234431058168411D0 2.69877552986145D0)) (list (list 6.0D0 1399.285400390625D0 0.07077924907207489D0 2.7112698554992676D0)) (list (list 6.0D0 1399.512939453125D0 0.07185070961713791D0 2.723764181137085D0)) (list (list 6.0D0 1399.359130859375D0 0.07605918496847153D0 2.7362585067749024D0)) (list (list 6.0D0 1398.9453125D0 0.08200056105852127D0 2.7487528324127198D0)) (list (list 6.0D0 1398.581787109375D0 0.08781072497367859D0 2.761247158050537D0)) (list (list 6.0D0 1398.4215087890625D0 0.09256619960069657D0 2.7737414836883545D0)) (list (list 6.0D0 1398.395751953125D0 0.09624455124139786D0 2.786235809326172D0)) (list (list 6.0D0 1398.389892578125D0 0.09911680966615677D0 2.7987301349639893D0)) (list (list 6.0D0 1398.40283203125D0 0.10138054937124253D0 2.8112244606018067D0)) (list (list 6.0D0 1398.4970703125D0 0.102742500603199D0 2.823718786239624D0)) (list (list 6.0D0 1398.6611328125D0 0.10245249420404434D0 2.8362131118774414D0)) (list (list 6.0D0 1398.828369140625D0 0.10031942278146744D0 2.848707437515259D0)) (list (list 6.0D0 1398.9290771484375D0 0.09725738316774368D0 2.861201763153076D0)) (list (list 6.0D0 1398.917236328125D0 0.09424813836812973D0 2.8736960887908936D0)) (list (list 6.0D0 1398.8782958984375D0 0.09126105159521103D0 2.886190414428711D0)) (list (list 6.0D0 1399.003662109375D0 0.08807298541069031D0 2.8986847400665283D0)) (list (list 6.0D0 1399.2459716796875D0 0.08560644090175629D0 2.9111790657043457D0)) (list (list 6.0D0 1399.345703125D0 0.0850290060043335D0 2.923673391342163D0)) (list (list 6.0D0 1399.2198486328125D0 0.08589230477809906D0 2.9361677169799805D0)) (list (list 6.0D0 1399.0072021484375D0 0.08645927906036377D0 2.948662042617798D0)) (list (list 6.0D0 1398.796875D0 0.08563350886106491D0 2.9611563682556153D0)) (list (list 6.0D0 1398.5076904296875D0 0.08362322300672531D0 2.9736506938934326D0)) (list (list 6.0D0 1398.1314697265625D0 0.0809546560049057D0 2.98614501953125D0)) (list (list 6.0D0 1397.9224853515625D0 0.07752466201782227D0 2.9986393451690674D0)) (list (list 6.0D0 1398.1417236328125D0 0.07284554094076157D0 3.0111336708068848D0)) (list (list 6.0D0 1398.6175537109375D0 0.06699346005916596D0 3.0236282348632813D0)) (list (list 6.0D0 1399.0003662109375D0 0.060580287128686905D0 3.0361225605010987D0)) (list (list 6.0D0 1399.3443603515625D0 0.054671164602041245D0 3.048616886138916D0)) (list (list 6.0D0 1399.738037109375D0 0.05045138671994209D0 3.0611112117767334D0)) (list (list 6.0D0 1399.8363037109375D0 0.04815967381000519D0 3.073605537414551D0)) (list (list 6.0D0 1399.448974609375D0 0.04693786799907684D0 3.086099863052368D0)) (list (list 6.0D0 1398.8603515625D0 0.046127963811159134D0 3.0985941886901856D0)) (list (list 6.0D0 1398.231201171875D0 0.04592770338058472D0 3.111088514328003D0)) (list (list 6.0D0 1397.6829833984375D0 0.04604188725352287D0 3.1235828399658203D0)) (list (list 6.0D0 1397.8330078125D0 0.04431489109992981D0 3.1360771656036377D0)) (list (list 6.0D0 1399.5185546875D0 0.039103709161281586D0 3.148571491241455D0)) (list (list 6.0D0 1402.775390625D0 0.03336716815829277D0 3.1610658168792725D0)) (list (list 6.0D0 1405.090087890625D0 0.03228023648262024D0 3.17356014251709D0)) (list (list 6.0D0 1404.984375D0 0.03599826991558075D0 3.1860544681549073D0)) (list (list 6.0D0 1403.2232666015625D0 0.043143801391124725D0 3.1985487937927246D0)) (list (list 6.0D0 1401.927490234375D0 0.05129599571228027D0 3.211043119430542D0)) (list (list 6.0D0 1401.2550048828125D0 0.0580776184797287D0 3.2235374450683594D0)) (list (list 6.0D0 1400.784912109375D0 0.06253156810998917D0 3.2360317707061768D0)) (list (list 6.0D0 1400.63232421875D0 0.06387127190828324D0 3.248526096343994D0)) (list (list 6.0D0 1400.6673583984375D0 0.0627400279045105D0 3.2610204219818116D0)) (list (list 6.0D0 1400.3917236328125D0 0.06154726445674896D0 3.273514747619629D0)) (list (list 6.0D0 1399.6259765625D0 0.06280685216188431D0 3.2860090732574463D0)) (list (list 6.0D0 1398.837646484375D0 0.06723601371049881D0 3.2985033988952637D0)) (list (list 6.0D0 1398.57080078125D0 0.0727575346827507D0 3.310997724533081D0)) (list (list 6.0D0 1398.7640380859375D0 0.0765642374753952D0 3.3234920501708985D0)) (list (list 6.0D0 1398.8980712890625D0 0.07723484933376312D0 3.335986375808716D0)) (list (list 6.0D0 1398.7159423828125D0 0.07507773488759995D0 3.348480701446533D0)) (list (list 6.0D0 1398.4443359375D0 0.07184800505638123D0 3.3609750270843506D0)) (list (list 6.0D0 1398.4371337890625D0 0.06986235082149506D0 3.373469352722168D0)) (list (list 6.0D0 1398.6588134765625D0 0.07054933160543442D0 3.3859636783599854D0)) (list (list 6.0D0 1398.727783203125D0 0.07297831028699875D0 3.3984580039978028D0)) (list (list 6.0D0 1398.4862060546875D0 0.07436239719390869D0 3.41095232963562D0)) (list (list 6.0D0 1398.313232421875D0 0.07254879176616669D0 3.4234466552734375D0)) (list (list 6.0D0 1398.5849609375D0 0.06792077422142029D0 3.435940980911255D0)) (list (list 6.0D0 1399.1900634765625D0 0.06339123100042343D0 3.4484353065490723D0)) (list (list 6.0D0 1399.7735595703125D0 0.06198683753609657D0 3.4609296321868897D0)) (list (list 6.0D0 1400.037109375D0 0.06465830653905869D0 3.473423957824707D0)) (list (list 6.0D0 1399.8067626953125D0 0.07022779434919357D0 3.4859182834625244D0)) (list (list 6.0D0 1399.322509765625D0 0.07682456821203232D0 3.498412609100342D0)) (list (list 6.0D0 1399.0120849609375D0 0.08287187665700913D0 3.510906934738159D0)) (list (list 6.0D0 1398.9122314453125D0 0.08768152445554733D0 3.5234012603759766D0)) (list (list 6.0D0 1398.7830810546875D0 0.09166768193244934D0 3.535895586013794D0)) (list (list 6.0D0 1398.5069580078125D0 0.09572390466928482D0 3.5483899116516114D0)) (list (list 6.0D0 1398.1304931640625D0 0.10018855333328247D0 3.5608842372894287D0)) (list (list 6.0D0 1397.783935546875D0 0.10423886030912399D0 3.573378801345825D0)) (list (list 6.0D0 1397.6126708984375D0 0.10625983029603958D0 3.5858731269836426D0)) (list (list 6.0D0 1397.6134033203125D0 0.10498644411563873D0 3.59836745262146D0)) (list (list 6.0D0 1397.6973876953125D0 0.10031641274690628D0 3.6108617782592774D0)) (list (list 6.0D0 1397.861328125D0 0.09340857714414597D0 3.6233561038970948D0)) (list (list 6.0D0 1398.1639404296875D0 0.0861147940158844D0 3.635850429534912D0)) (list (list 6.0D0 1398.562255859375D0 0.07997031509876251D0 3.6483447551727295D0)) (list (list 6.0D0 1398.91650390625D0 0.07549001276493073D0 3.660839080810547D0)) (list (list 6.0D0 1399.10791015625D0 0.07234154641628266D0 3.6733334064483643D0)) (list (list 6.0D0 1399.0811767578125D0 0.07002092897891998D0 3.6858277320861817D0)) (list (list 6.0D0 1398.888916015625D0 0.06791626662015915D0 3.698322057723999D0)) (list (list 6.0D0 1398.8533935546875D0 0.06498269736766815D0 3.7108163833618164D0)) (list (list 6.0D0 1399.5272216796875D0 0.06068744137883186D0 3.723310708999634D0)) (list (list 6.0D0 1400.5848388671875D0 0.05724829062819481D0 3.735805034637451D0)) (list (list 6.0D0 1400.73583984375D0 0.05730085447430611D0 3.7482993602752686D0)) (list (list 6.0D0 1399.71630859375D0 0.0612080954015255D0 3.760793685913086D0)) (list (list 6.0D0 1398.697265625D0 0.06726355850696564D0 3.7732880115509033D0)) (list (list 6.0D0 1398.5455322265625D0 0.07268713414669037D0 3.7857823371887207D0)) (list (list 6.0D0 1398.864501953125D0 0.07724611461162567D0 3.798276662826538D0)) (list (list 6.0D0 1399.155517578125D0 0.08175027370452881D0 3.8107709884643555D0)) (list (list 6.0D0 1399.149169921875D0 0.08616871386766434D0 3.823265314102173D0)) (list (list 6.0D0 1398.8489990234375D0 0.08981384336948395D0 3.8357596397399903D0)) (list (list 6.0D0 1398.5205078125D0 0.09215394407510758D0 3.8482539653778076D0)) (list (list 6.0D0 1398.3861083984375D0 0.09333395957946778D0 3.860748291015625D0)) (list (list 6.0D0 1398.419189453125D0 0.09382595866918564D0 3.8732426166534424D0)) (list (list 6.0D0 1398.498291015625D0 0.09338020533323288D0 3.8857369422912598D0)) (list (list 6.0D0 1398.5164794921875D0 0.0911906510591507D0 3.898231267929077D0)) (list (list 6.0D0 1398.4310302734375D0 0.08712708950042725D0 3.9107255935668946D0)) (list (list 6.0D0 1398.3599853515625D0 0.08218748867511749D0 3.923219919204712D0)) (list (list 6.0D0 1398.39599609375D0 0.07767876982688904D0 3.9357142448425293D0)) (list (list 6.0D0 1398.4139404296875D0 0.07417871803045273D0 3.9482085704803467D0)) (list (list 6.0D0 1398.3642578125D0 0.07125028967857361D0 3.960702896118164D0)) (list (list 6.0D0 1398.469482421875D0 0.06824279576539993D0 3.9731972217559815D0)) (list (list 6.0D0 1398.7774658203125D0 0.06519559025764466D0 3.985691547393799D0)) (list (list 6.0D0 1398.9783935546875D0 0.06246946007013321D0 3.998185873031616D0)) (list (list 6.0D0 1398.8665771484375D0 0.05995618551969528D0 4.010680198669434D0)) (list (list 6.0D0 1398.591552734375D0 0.05727193504571915D0 4.02317476272583D0)) (list (list 6.0D0 1398.3170166015625D0 0.05437025427818298D0 4.035668849945068D0)) (list (list 6.0D0 1398.0303955078125D0 0.051910992711782455D0 4.048163414001465D0)) (list (list 6.0D0 1397.684326171875D0 0.050645384937524796D0 4.060657501220703D0)) (list (list 6.0D0 1397.257568359375D0 0.05041411146521568D0 4.0731520652771D0)) (list (list 6.0D0 1396.853759765625D0 0.05027707293629646D0 4.085646152496338D0)) (list (list 6.0D0 1396.7989501953125D0 0.049515556544065475D0 4.098140716552734D0)) (list (list 6.0D0 1397.317138671875D0 0.048268746584653854D0 4.110634803771973D0)) (list (list 6.0D0 1398.1048583984375D0 0.04736412316560745D0 4.123129367828369D0)) (list (list 6.0D0 1398.639892578125D0 0.047407619655132294D0 4.135623455047607D0)) (list (list 6.0D0 1399.0306396484375D0 0.048111479729413986D0 4.148118019104004D0)) (list (list 6.0D0 1399.762451171875D0 0.048148177564144135D0 4.160612106323242D0)) (list (list 6.0D0 1400.8092041015625D0 0.046554017812013626D0 4.173106670379639D0)) (list (list 6.0D0 1401.480224609375D0 0.04406355321407318D0 4.185600757598877D0)) (list (list 6.0D0 1401.2884521484375D0 0.04258287698030472D0 4.198095321655273D0)) (list (list 6.0D0 1400.3773193359375D0 0.043696511536836624D0 4.210589408874512D0)) (list (list 6.0D0 1399.3004150390625D0 0.04734120890498161D0 4.223083972930908D0)) (list (list 6.0D0 1398.545166015625D0 0.05200092867016792D0 4.2355780601501465D0)) (list (list 6.0D0 1398.109130859375D0 0.055752355605363846D0 4.248072624206543D0)) (list (list 6.0D0 1397.835693359375D0 0.0570850744843483D0 4.260566711425781D0)) (list (list 6.0D0 1397.6832275390625D0 0.05580979585647583D0 4.273061275482178D0)) (list (list 6.0D0 1397.8206787109375D0 0.053007207810878754D0 4.285555362701416D0)) (list (list 6.0D0 1398.4720458984375D0 0.04931578412652016D0 4.2980499267578125D0)) (list (list 6.0D0 1399.7069091796875D0 0.04453291371464729D0 4.310544013977051D0)) (list (list 6.0D0 1400.8359375D0 0.039360951632261276D0 4.323038578033447D0)) (list (list 6.0D0 1400.9278564453125D0 0.03572678938508034D0 4.3355326652526856D0)) (list (list 6.0D0 1400.06591796875D0 0.03496513143181801D0 4.348027229309082D0)) (list (list 6.0D0 1399.13427734375D0 0.03579764813184738D0 4.36052131652832D0)) (list (list 6.0D0 1399.0101318359375D0 0.035285744816064835D0 4.373015880584717D0)) (list (list 6.0D0 1399.3756103515625D0 0.03217592462897301D0 4.385509967803955D0)) (list (list 6.0D0 1399.4830322265625D0 0.02721668779850006D0 4.398004531860352D0)) (list (list 6.0D0 1398.7288818359375D0 0.022375961765646935D0 4.410499095916748D0)) (list (list 6.0D0 1397.589111328125D0 0.020015956833958626D0 4.422993183135986D0)) (list (list 6.0D0 1397.184814453125D0 0.02083669789135456D0 4.435487747192383D0)) (list (list 6.0D0 1397.9237060546875D0 0.02370402030646801D0 4.447981834411621D0)) (list (list 6.0D0 1398.8211669921875D0 0.027181435376405716D0 4.460476398468018D0)) (list (list 6.0D0 1399.1773681640625D0 0.03005090169608593D0 4.472970485687256D0)) (list (list 6.0D0 1399.0419921875D0 0.03146412596106529D0 4.485465049743652D0)) (list (list 6.0D0 1398.6607666015625D0 0.030779967084527016D0 4.497959136962891D0)) (list (list 6.0D0 1398.322021484375D0 0.02790185436606407D0 4.510453701019287D0)) (list (list 6.0D0 1398.184814453125D0 0.023738328367471695D0 4.522947788238525D0)) (list (list 6.0D0 1398.168701171875D0 0.01947878487408161D0 4.535442352294922D0)) (list (list 6.0D0 1398.3023681640625D0 0.015342900529503823D0 4.54793643951416D0)) (list (list 6.0D0 1399.270751953125D0 0.010798620991408825D0 4.560431003570557D0)) (list (list 6.0D0 1403.6121826171875D0 0.006395112257450819D0 4.572925090789795D0)) (list (list 6.0D0 1407.6583251953125D0 0.003539063036441803D0 4.585419654846191D0)) (list (list 6.0D0 1406.388427734375D0 0.0018692412413656712D0 4.59791374206543D0)) (list (list 6.0D0 1406.388427734375D0 0.0D0 4.610408306121826D0)) (list (list 7.0D0 1224.0792236328125D0 2.3200098075903952D-4 0.0D0)) (list (list 7.0D0 1222.1591796875D0 3.717214858625084D-4 0.01249433122575283D0)) (list (list 7.0D0 1222.0655517578125D0 4.780078597832471D-4 0.02498866245150566D0)) (list (list 7.0D0 1252.5941162109375D0 3.8352538831532D-4 0.03748299181461334D0)) (list (list 7.0D0 1225.639892578125D0 5.825732368975878D-4 0.04997732490301132D0)) (list (list 7.0D0 1225.151123046875D0 5.203810287639499D-4 0.062471654266119D0)) (list (list 7.0D0 1223.908447265625D0 3.6578718572854996D-4 0.07496598362922669D0)) (list (list 7.0D0 1233.969970703125D0 2.576243132352829D-4 0.08746031671762467D0)) (list (list 7.0D0 1237.15576171875D0 4.774382396135479D-4 0.09995464980602265D0)) (list (list 7.0D0 1232.10205078125D0 8.383592357859016D-4 0.11244898289442063D0)) (list (list 7.0D0 1227.4302978515625D0 0.0012749851448461414D0 0.124943308532238D0)) (list (list 7.0D0 1225.7410888671875D0 0.0014765752712264657D0 0.137437641620636D0)) (list (list 7.0D0 1225.232177734375D0 0.0013917433097958565D0 0.14993196725845337D0)) (list (list 7.0D0 1226.48681640625D0 0.001176640042103827D0 0.16242630779743195D0)) (list (list 7.0D0 1227.8309326171875D0 0.0010793631663545967D0 0.17492063343524933D0)) (list (list 7.0D0 1226.929931640625D0 0.0011895810021087528D0 0.1874149590730667D0)) (list (list 7.0D0 1225.61474609375D0 0.0015031569637358189D0 0.1999092996120453D0)) (list (list 7.0D0 1226.370361328125D0 0.0018397924723103643D0 0.21240362524986267D0)) (list (list 7.0D0 1227.4405517578125D0 0.0020217287819832564D0 0.22489796578884125D0)) (list (list 7.0D0 1227.0850830078125D0 0.0018678283086046577D0 0.23739229142665863D0)) (list (list 7.0D0 1224.036865234375D0 0.0014078653184697032D0 0.249886617064476D0)) (list (list 7.0D0 1221.548095703125D0 9.594206348992884D-4 0.2623809576034546D0)) (list (list 7.0D0 1222.786376953125D0 7.025523809716106D-4 0.274875283241272D0)) (list (list 7.0D0 1228.3392333984375D0 7.201701519079506D-4 0.28736960887908936D0)) (list (list 7.0D0 1231.8994140625D0 7.948378915898502D-4 0.29986393451690674D0)) (list (list 7.0D0 1230.9814453125D0 6.493882392533124D-4 0.3123582899570465D0)) (list (list 7.0D0 1221.2603759765625D0 4.5718447654508054D-4 0.3248526155948639D0)) (list (list 7.0D0 1218.720703125D0 8.189737563952804D-4 0.34984126687049866D0)) (list (list 7.0D0 1220.9298095703125D0 0.001197860692627728D0 0.36233559250831604D0)) (list (list 7.0D0 1222.405029296875D0 0.0015472826780751348D0 0.3748299181461334D0)) (list (list 7.0D0 1223.9847412109375D0 0.0017569310730323196D0 0.3873242437839508D0)) (list (list 7.0D0 1224.80615234375D0 0.0017403329256922007D0 0.3998185992240906D0)) (list (list 7.0D0 1225.052001953125D0 0.0015404799487441779D0 0.41231292486190796D0)) (list (list 7.0D0 1225.512451171875D0 0.001459863968193531D0 0.42480725049972534D0)) (list (list 7.0D0 1224.5931396484375D0 0.0016872301930561662D0 0.4373015761375427D0)) (list (list 7.0D0 1219.46875D0 0.002124861115589738D0 0.4497959315776825D0)) (list (list 7.0D0 1216.006103515625D0 0.0027215557638555765D0 0.4622902572154999D0)) (list (list 7.0D0 1216.000244140625D0 0.003239610232412815D0 0.47478458285331726D0)) (list (list 7.0D0 1217.8721923828125D0 0.0037050750106573105D0 0.48727890849113465D0)) (list (list 7.0D0 1220.1685791015625D0 0.00393847469240427D0 0.499773234128952D0)) (list (list 7.0D0 1220.26708984375D0 0.003465482732281089D0 0.5122675895690918D0)) (list (list 7.0D0 1217.14111328125D0 0.0024920145515352488D0 0.5247619152069092D0)) (list (list 7.0D0 1214.4537353515625D0 0.0017256909050047398D0 0.5372562408447266D0)) (list (list 7.0D0 1213.475341796875D0 0.0012291737366467715D0 0.549750566482544D0)) (list (list 7.0D0 1211.1483154296875D0 9.65454033575952D-4 0.5622448921203613D0)) (list (list 7.0D0 1211.5289306640625D0 9.175821905955672D-4 0.5747392177581787D0)) (list (list 7.0D0 1232.8323974609375D0 0.0014067204901948572D0 0.5872335433959961D0)) (list (list 7.0D0 1229.2335205078125D0 0.0017820140346884728D0 0.5997278690338135D0)) (list (list 7.0D0 1230.8782958984375D0 0.0016705031739547849D0 0.6122221946716309D0)) (list (list 7.0D0 1233.21923828125D0 0.0012540532043203712D0 0.624716579914093D0)) (list (list 7.0D0 1233.0452880859375D0 8.919645333662629D-4 0.6372109055519104D0)) (list (list 7.0D0 1231.6522216796875D0 7.904968806542456D-4 0.6497052311897278D0)) (list (list 7.0D0 1229.61669921875D0 8.761271019466221D-4 0.6621995568275452D0)) (list (list 7.0D0 1227.31005859375D0 0.0010550968581810594D0 0.6746938824653626D0)) (list (list 7.0D0 1226.1923828125D0 0.001277250237762928D0 0.6871882081031799D0)) (list (list 7.0D0 1228.0634765625D0 0.001398736611008644D0 0.6996825337409973D0)) (list (list 7.0D0 1230.250732421875D0 0.001436814432963729D0 0.7121768593788147D0)) (list (list 7.0D0 1230.9810791015625D0 0.00136653333902359D0 0.7246711850166321D0)) (list (list 7.0D0 1230.73828125D0 0.0011823311215266586D0 0.7371655106544495D0)) (list (list 7.0D0 1228.68701171875D0 9.331139735877514D-4 0.7496598362922669D0)) (list (list 7.0D0 1225.187255859375D0 8.243990014307201D-4 0.762154221534729D0)) (list (list 7.0D0 1221.541748046875D0 0.0010091079166159034D0 0.7746485471725464D0)) (list (list 7.0D0 1220.8021240234375D0 0.0012126435758545995D0 0.7871428728103638D0)) (list (list 7.0D0 1223.0614013671875D0 0.0011917961528524757D0 0.7996371984481812D0)) (list (list 7.0D0 1226.1756591796875D0 0.0010223517892882228D0 0.8121315240859985D0)) (list (list 7.0D0 1229.89501953125D0 8.895009523257613D-4 0.8246258497238159D0)) (list (list 7.0D0 1233.37451171875D0 8.847663993947208D-4 0.8371201753616333D0)) (list (list 7.0D0 1234.5081787109375D0 8.73320852406323D-4 0.8496145009994507D0)) (list (list 7.0D0 1234.0670166015625D0 7.994992192834616D-4 0.8621088266372681D0)) (list (list 7.0D0 1233.6019287109375D0 7.138565997593105D-4 0.8746031522750855D0)) (list (list 7.0D0 1231.840576171875D0 6.774743087589741D-4 0.8870974779129028D0)) (list (list 7.0D0 1229.6397705078125D0 7.763204630464315D-4 0.899591863155365D0)) (list (list 7.0D0 1230.2177734375D0 9.434436215087771D-4 0.9120861887931824D0)) (list (list 7.0D0 1234.0830078125D0 0.0010928511619567872D0 0.9245805144309998D0)) (list (list 7.0D0 1235.433349609375D0 0.0011336616007611156D0 0.9370748400688171D0)) (list (list 7.0D0 1232.1160888671875D0 9.716680506244302D-4 0.9495691657066345D0)) (list (list 7.0D0 1226.190673828125D0 9.255880140699446D-4 0.9620634913444519D0)) (list (list 7.0D0 1225.049072265625D0 9.657730115577579D-4 0.9745578169822693D0)) (list (list 7.0D0 1227.8973388671875D0 9.359982213936746D-4 0.9870521426200867D0)) (list (list 7.0D0 1234.399169921875D0 9.82167897745967D-4 0.999546468257904D0)) (list (list 7.0D0 1234.0594482421875D0 0.0011498285457491875D0 1.0120408535003662D0)) (list (list 7.0D0 1229.250732421875D0 0.00151585612911731D0 1.0245351791381836D0)) (list (list 7.0D0 1222.549072265625D0 0.002123186830431223D0 1.037029504776001D0)) (list (list 7.0D0 1221.45166015625D0 0.002384753432124853D0 1.0495238304138184D0)) (list (list 7.0D0 1220.5850830078125D0 0.002367776818573475D0 1.0620181560516358D0)) (list (list 7.0D0 1218.4888916015625D0 0.0023179547861218453D0 1.0745124816894532D0)) (list (list 7.0D0 1216.3201904296875D0 0.0023706157226115465D0 1.0870068073272705D0)) (list (list 7.0D0 1216.1787109375D0 0.0023960615508258343D0 1.099501132965088D0)) (list (list 7.0D0 1216.812744140625D0 0.0022856665309518576D0 1.1119954586029053D0)) (list (list 7.0D0 1216.5743408203125D0 0.001974431797862053D0 1.1244897842407227D0)) (list (list 7.0D0 1215.900390625D0 0.001603229669854045D0 1.13698410987854D0)) (list (list 7.0D0 1216.1016845703125D0 0.0013727087061852217D0 1.1494784355163575D0)) (list (list 7.0D0 1217.9638671875D0 0.0012880609137937427D0 1.1619727611541748D0)) (list (list 7.0D0 1220.0386962890625D0 0.0012815947411581874D0 1.1744670867919922D0)) (list (list 7.0D0 1221.5025634765625D0 0.0013272225623950363D0 1.1869614124298096D0)) (list (list 7.0D0 1222.199462890625D0 0.0013336034025996924D0 1.199455738067627D0)) (list (list 7.0D0 1221.6409912109375D0 0.0012223903322592378D0 1.2119500637054444D0)) (list (list 7.0D0 1221.6424560546875D0 0.0012066989438608289D0 1.2244443893432618D0)) (list (list 7.0D0 1221.15478515625D0 0.001467658206820488D0 1.236938714981079D0)) (list (list 7.0D0 1217.6507568359375D0 0.0017588753253221512D0 1.249433159828186D0)) (list (list 7.0D0 1214.1182861328125D0 0.0017225693445652724D0 1.2619274854660035D0)) (list (list 7.0D0 1217.2125244140625D0 0.0013063987717032433D0 1.2744218111038208D0)) (list (list 7.0D0 1219.9942626953125D0 0.001214940450154245D0 1.2869161367416382D0)) (list (list 7.0D0 1222.4024658203125D0 0.0015338562661781907D0 1.2994104623794556D0)) (list (list 7.0D0 1222.531982421875D0 0.001695900340564549D0 1.311904788017273D0)) (list (list 7.0D0 1222.70556640625D0 0.0014274001587182284D0 1.3243991136550904D0)) (list (list 7.0D0 1225.4383544921875D0 9.628362022340298D-4 1.3368934392929078D0)) (list (list 7.0D0 1228.3211669921875D0 8.221558528020978D-4 1.349387764930725D0)) (list (list 7.0D0 1228.4564208984375D0 0.0010606758296489716D0 1.3618820905685425D0)) (list (list 7.0D0 1225.69775390625D0 0.001388615113683045D0 1.3743764162063599D0)) (list (list 7.0D0 1226.7818603515625D0 0.0014305493095889688D0 1.3868707418441773D0)) (list (list 7.0D0 1231.2056884765625D0 0.0012842530850321055D0 1.3993650674819947D0)) (list (list 7.0D0 1232.401611328125D0 0.0012764210114255548D0 1.411859393119812D0)) (list (list 7.0D0 1229.9261474609375D0 0.0013347344938665629D0 1.4243537187576294D0)) (list (list 7.0D0 1226.031982421875D0 0.0013512357836589218D0 1.4368480443954468D0)) (list (list 7.0D0 1226.31982421875D0 0.0011498392559587956D0 1.4493423700332642D0)) (list (list 7.0D0 1227.480712890625D0 9.94355883449316D-4 1.4618366956710816D0)) (list (list 7.0D0 1228.608154296875D0 0.0010563236428424716D0 1.474331021308899D0)) (list (list 7.0D0 1228.605224609375D0 0.0012106000212952495D0 1.4868253469467163D0)) (list (list 7.0D0 1227.9195556640625D0 0.0012813112698495388D0 1.4993196725845337D0)) (list (list 7.0D0 1227.6734619140625D0 0.001186216133646667D0 1.5118141174316407D0)) (list (list 7.0D0 1227.9510498046875D0 9.527754737064242D-4 1.524308443069458D0)) (list (list 7.0D0 1228.834716796875D0 7.046901737339795D-4 1.5368027687072754D0)) (list (list 7.0D0 1230.436279296875D0 5.365643883123994D-4 1.5492970943450928D0)) (list (list 7.0D0 1239.339599609375D0 4.7323410399258137D-4 1.5617914199829102D0)) (list (list 7.0D0 1239.985595703125D0 5.069135222584009D-4 1.5742857456207276D0)) (list (list 7.0D0 1237.2435302734375D0 5.996255786158145D-4 1.586780071258545D0)) (list (list 7.0D0 1232.1119384765625D0 7.493898738175631D-4 1.5992743968963623D0)) (list (list 7.0D0 1236.5587158203125D0 7.306943298317492D-4 1.6117687225341797D0)) (list (list 7.0D0 1237.6025390625D0 7.006155210547149D-4 1.624263048171997D0)) (list (list 7.0D0 1235.014404296875D0 7.652838248759508D-4 1.6367573738098145D0)) (list (list 7.0D0 1225.0185546875D0 9.615047601982951D-4 1.6492516994476319D0)) (list (list 7.0D0 1221.6287841796875D0 9.497853461652994D-4 1.6617460250854493D0)) (list (list 7.0D0 1219.04248046875D0 8.303464273922145D-4 1.6742403507232666D0)) (list (list 7.0D0 1221.0064697265625D0 7.153692422434688D-4 1.686734676361084D0)) (list (list 7.0D0 1222.980224609375D0 7.3555379640311D-4 1.6992290019989014D0)) (list (list 7.0D0 1219.97119140625D0 7.490464486181736D-4 1.7117233276367188D0)) (list (list 7.0D0 1216.47021484375D0 7.364799967035651D-4 1.7242176532745362D0)) (list (list 7.0D0 1215.348876953125D0 6.310243625193834D-4 1.7367119789123536D0)) (list (list 7.0D0 1214.433349609375D0 5.263999337330461D-4 1.749206304550171D0)) (list (list 7.0D0 1215.2791748046875D0 5.170552176423371D-4 1.7617006301879883D0)) (list (list 7.0D0 1218.402099609375D0 6.453614332713187D-4 1.7741949558258057D0)) (list (list 7.0D0 1221.3416748046875D0 8.235105779021978D-4 1.7866894006729126D0)) (list (list 7.0D0 1220.652587890625D0 8.447921718470752D-4 1.79918372631073D0)) (list (list 7.0D0 1220.24072265625D0 7.390503888018429D-4 1.8116780519485474D0)) (list (list 7.0D0 1222.232177734375D0 5.927822203375399D-4 1.8241723775863648D0)) (list (list 7.0D0 1226.6229248046875D0 5.542759317904711D-4 1.8366667032241822D0)) (list (list 7.0D0 1228.48046875D0 6.495902198366821D-4 1.8491610288619996D0)) (list (list 7.0D0 1229.6932373046875D0 7.737419218756259D-4 1.861655354499817D0)) (list (list 7.0D0 1231.85205078125D0 8.86085326783359D-4 1.8741496801376343D0)) (list (list 7.0D0 1233.05322265625D0 9.48839879129082D-4 1.8866440057754517D0)) (list (list 7.0D0 1234.0782470703125D0 8.467902662232518D-4 1.899138331413269D0)) (list (list 7.0D0 1239.2567138671875D0 6.390357157215476D-4 1.9116326570510865D0)) (list (list 7.0D0 1241.69921875D0 4.920953651890159D-4 1.9241269826889038D0)) (list (list 7.0D0 1214.4725341796875D0 5.252069677226245D-4 1.9366213083267212D0)) (list (list 7.0D0 1208.7174072265625D0 4.385103820823133D-4 1.9491156339645386D0)) (list (list 7.0D0 1227.021240234375D0 3.722628462128341D-4 1.961609959602356D0)) (list (list 7.0D0 1223.810791015625D0 4.672321956604719D-4 1.9741042852401734D0)) (list (list 7.0D0 1215.0362548828125D0 8.397478959523141D-4 1.9865986108779908D0)) (list (list 7.0D0 1219.181640625D0 0.0010459923651069403D0 1.999092936515808D0)) (list (list 7.0D0 1218.54296875D0 0.0010105585679411889D0 2.011587381362915D0)) (list (list 7.0D0 1210.8231201171875D0 9.372007916681469D-4 2.0240817070007324D0)) (list (list 7.0D0 1208.1376953125D0 0.0011243572225794197D0 2.03657603263855D0)) (list (list 7.0D0 1211.0908203125D0 0.0012452573282644153D0 2.049070358276367D0)) (list (list 7.0D0 1216.5064697265625D0 0.0013533527962863446D0 2.0615646839141846D0)) (list (list 7.0D0 1221.2440185546875D0 0.0012096785940229893D0 2.074059009552002D0)) (list (list 7.0D0 1227.9091796875D0 9.633967420086265D-4 2.0865533351898194D0)) (list (list 7.0D0 1229.7755126953125D0 9.697297937236726D-4 2.0990476608276367D0)) (list (list 7.0D0 1226.8782958984375D0 0.001154074678197503D0 2.111541986465454D0)) (list (list 7.0D0 1218.4569091796875D0 0.0014954523649066687D0 2.1240363121032715D0)) (list (list 7.0D0 1216.435546875D0 0.0015919447178021074D0 2.136530637741089D0)) (list (list 7.0D0 1217.710693359375D0 0.0013267581816762686D0 2.1490249633789063D0)) (list (list 7.0D0 1222.9139404296875D0 0.001112923608161509D0 2.1615192890167237D0)) (list (list 7.0D0 1225.3912353515625D0 0.0012820906704291702D0 2.174013614654541D0)) (list (list 7.0D0 1223.3876953125D0 0.0015842680586501956D0 2.1865079402923584D0)) (list (list 7.0D0 1220.874755859375D0 0.0019339905120432377D0 2.199002265930176D0)) (list (list 7.0D0 1220.8636474609375D0 0.002056072698906064D0 2.211496591567993D0)) (list (list 7.0D0 1221.6644287109375D0 0.001880045747384429D0 2.2239909172058106D0)) (list (list 7.0D0 1221.5645751953125D0 0.0014552841894328595D0 2.236485242843628D0)) (list (list 7.0D0 1217.771240234375D0 9.34847688768059D-4 2.2489795684814453D0)) (list (list 7.0D0 1213.96630859375D0 5.93062024563551D-4 2.2614738941192627D0)) (list (list 7.0D0 1215.98681640625D0 3.748115268535912D-4 2.27396821975708D0)) (list (list 7.0D0 1223.3560791015625D0 4.1222129948437214D-4 2.2864625453948975D0)) (list (list 7.0D0 1224.975830078125D0 5.263533093966544D-4 2.298956871032715D0)) (list (list 7.0D0 1231.6156005859375D0 5.762357031926513D-4 2.3114511966705323D0)) (list (list 7.0D0 1233.2327880859375D0 6.667572306469083D-4 2.3239455223083496D0)) (list (list 7.0D0 1231.1571044921875D0 8.056085789576173D-4 2.336439847946167D0)) (list (list 7.0D0 1225.227783203125D0 0.0010677826358005405D0 2.3489341735839844D0)) (list (list 7.0D0 1224.174560546875D0 0.0012443989980965853D0 2.3614284992218018D0)) (list (list 7.0D0 1222.4544677734375D0 0.0012083473848178983D0 2.373922824859619D0)) (list (list 7.0D0 1214.6368408203125D0 0.0010609800228849054D0 2.3864171504974366D0)) (list (list 7.0D0 1209.51513671875D0 9.519256418570876D-4 2.398911476135254D0)) (list (list 7.0D0 1207.818603515625D0 8.102747960947454D-4 2.4114058017730713D0)) (list (list 7.0D0 1208.966796875D0 6.528599769808352D-4 2.4239001274108887D0)) (list (list 7.0D0 1214.6790771484375D0 5.394646432250738D-4 2.436394453048706D0)) (list (list 7.0D0 1213.964599609375D0 4.988482687622309D-4 2.4488887786865235D0)) (list (list 7.0D0 1210.120849609375D0 6.173710571601987D-4 2.461383104324341D0)) (list (list 7.0D0 1205.055908203125D0 7.982308161444962D-4 2.4738776683807373D0)) (list (list 7.0D0 1203.0777587890625D0 8.91379255335778D-4 2.4863719940185547D0)) (list (list 7.0D0 1203.21630859375D0 9.374694200232625D-4 2.498866319656372D0)) (list (list 7.0D0 1208.5924072265625D0 9.576180018484592D-4 2.5113606452941895D0)) (list (list 7.0D0 1212.947021484375D0 0.0010209764586761594D0 2.523854970932007D0)) (list (list 7.0D0 1210.089599609375D0 9.28668596316129D-4 2.536349296569824D0)) (list (list 7.0D0 1210.2896728515625D0 9.447440388612449D-4 2.5488436222076416D0)) (list (list 7.0D0 1215.307373046875D0 0.0011412777239456773D0 2.561337947845459D0)) (list (list 7.0D0 1215.500244140625D0 0.0012613659491762519D0 2.5738322734832764D0)) (list (list 7.0D0 1214.116943359375D0 0.001174163888208568D0 2.5863265991210938D0)) (list (list 7.0D0 1216.0677490234375D0 0.0011811461299657822D0 2.598820924758911D0)) (list (list 7.0D0 1218.841064453125D0 0.0014585336903110147D0 2.6113152503967285D0)) (list (list 7.0D0 1216.7015380859375D0 0.0016107187839224935D0 2.623809576034546D0)) (list (list 7.0D0 1214.856689453125D0 0.0015768172452226282D0 2.6363039016723633D0)) (list (list 7.0D0 1216.728271484375D0 0.0015377221861854196D0 2.6487982273101807D0)) (list (list 7.0D0 1218.9296875D0 0.0018595263827592135D0 2.661292552947998D0)) (list (list 7.0D0 1218.5345458984375D0 0.00229388615116477D0 2.6737868785858155D0)) (list (list 7.0D0 1217.8214111328125D0 0.002421150216832757D0 2.686281204223633D0)) (list (list 7.0D0 1220.1624755859375D0 0.0021237714681774378D0 2.69877552986145D0)) (list (list 7.0D0 1223.0810546875D0 0.0018158007878810168D0 2.7112698554992676D0)) (list (list 7.0D0 1224.3455810546875D0 0.001638660323806107D0 2.723764181137085D0)) (list (list 7.0D0 1223.7708740234375D0 0.0014701377367600799D0 2.7362585067749024D0)) (list (list 7.0D0 1222.2686767578125D0 0.0012538821902126074D0 2.7487528324127198D0)) (list (list 7.0D0 1219.0341796875D0 0.0010614542989060283D0 2.761247158050537D0)) (list (list 7.0D0 1215.779541015625D0 0.0010736411204561592D0 2.7737414836883545D0)) (list (list 7.0D0 1216.060546875D0 0.0010593089973554016D0 2.786235809326172D0)) (list (list 7.0D0 1224.2451171875D0 0.0010369725059717894D0 2.7987301349639893D0)) (list (list 7.0D0 1227.074951171875D0 0.0010728752240538598D0 2.8112244606018067D0)) (list (list 7.0D0 1226.826171875D0 9.844789747148753D-4 2.823718786239624D0)) (list (list 7.0D0 1226.720947265625D0 9.043766185641289D-4 2.8362131118774414D0)) (list (list 7.0D0 1226.5574951171875D0 9.311142493970692D-4 2.848707437515259D0)) (list (list 7.0D0 1224.008544921875D0 0.0010822362964972854D0 2.861201763153076D0)) (list (list 7.0D0 1220.81298828125D0 0.001382278511300683D0 2.8736960887908936D0)) (list (list 7.0D0 1219.4970703125D0 0.0017279523890465498D0 2.886190414428711D0)) (list (list 7.0D0 1219.154296875D0 0.0019622824620455504D0 2.8986847400665283D0)) (list (list 7.0D0 1218.4549560546875D0 0.0018703462556004525D0 2.9111790657043457D0)) (list (list 7.0D0 1216.2691650390625D0 0.0014346539974212647D0 2.923673391342163D0)) (list (list 7.0D0 1215.7232666015625D0 8.995258831419051D-4 2.9361677169799805D0)) (list (list 7.0D0 1220.5008544921875D0 5.95632940530777D-4 2.948662042617798D0)) (list (list 7.0D0 1222.6600341796875D0 6.809467449784279D-4 2.9611563682556153D0)) (list (list 7.0D0 1200.7890625D0 0.0010063055669888854D0 2.9736506938934326D0)) (list (list 7.0D0 1203.7376708984375D0 0.0011845133267343045D0 2.98614501953125D0)) (list (list 7.0D0 1205.0762939453125D0 0.0011803846573457122D0 2.9986393451690674D0)) (list (list 7.0D0 1209.59765625D0 0.00105705251917243D0 3.0111336708068848D0)) (list (list 7.0D0 1217.5218505859375D0 0.0011627634521573782D0 3.0236282348632813D0)) (list (list 7.0D0 1217.93359375D0 0.0012664531823247672D0 3.0361225605010987D0)) (list (list 7.0D0 1216.3104248046875D0 0.0013599727535620332D0 3.048616886138916D0)) (list (list 7.0D0 1215.5472412109375D0 0.001407615258358419D0 3.0611112117767334D0)) (list (list 7.0D0 1216.5494384765625D0 0.0012585895601660014D0 3.073605537414551D0)) (list (list 7.0D0 1217.7589111328125D0 9.873993694782257D-4 3.086099863052368D0)) (list (list 7.0D0 1219.178955078125D0 7.627313025295734D-4 3.0985941886901856D0)) (list (list 7.0D0 1224.81103515625D0 7.266619359143078D-4 3.111088514328003D0)) (list (list 7.0D0 1230.40380859375D0 0.001051061088219285D0 3.1235828399658203D0)) (list (list 7.0D0 1228.7177734375D0 0.0013329756911844016D0 3.1360771656036377D0)) (list (list 7.0D0 1225.1529541015625D0 0.0015633325092494488D0 3.148571491241455D0)) (list (list 7.0D0 1221.4813232421875D0 0.0016493431758135558D0 3.1610658168792725D0)) (list (list 7.0D0 1218.670166015625D0 0.0014825623948127032D0 3.17356014251709D0)) (list (list 7.0D0 1216.680419921875D0 0.0011764426017180086D0 3.1860544681549073D0)) (list (list 7.0D0 1217.3109130859375D0 8.330442942678928D-4 3.1985487937927246D0)) (list (list 7.0D0 1218.6539306640625D0 5.88311639148742D-4 3.211043119430542D0)) (list (list 7.0D0 1215.529052734375D0 5.111161735840142D-4 3.2235374450683594D0)) (list (list 7.0D0 1209.545654296875D0 6.708791479468346D-4 3.2360317707061768D0)) (list (list 7.0D0 1209.646728515625D0 7.566586718894541D-4 3.248526096343994D0)) (list (list 7.0D0 1209.8726806640625D0 6.855902611277998D-4 3.2610204219818116D0)) (list (list 7.0D0 1208.143310546875D0 5.529174231924117D-4 3.273514747619629D0)) (list (list 7.0D0 1206.5247802734375D0 5.077027599327266D-4 3.2860090732574463D0)) (list (list 7.0D0 1206.970458984375D0 5.651407409459353D-4 3.2985033988952637D0)) (list (list 7.0D0 1214.0994873046875D0 6.704546976834536D-4 3.310997724533081D0)) (list (list 7.0D0 1215.4310302734375D0 8.744946680963039D-4 3.3234920501708985D0)) (list (list 7.0D0 1214.788818359375D0 0.0011633001267910004D0 3.335986375808716D0)) (list (list 7.0D0 1215.62255859375D0 0.0015255175530910492D0 3.348480701446533D0)) (list (list 7.0D0 1218.40966796875D0 0.0017703957855701447D0 3.3609750270843506D0)) (list (list 7.0D0 1220.7833251953125D0 0.001771288923919201D0 3.373469352722168D0)) (list (list 7.0D0 1221.3048095703125D0 0.0015937472926452756D0 3.3859636783599854D0)) (list (list 7.0D0 1219.4217529296875D0 0.0014971249038353563D0 3.3984580039978028D0)) (list (list 7.0D0 1216.7115478515625D0 0.0017333592986688018D0 3.41095232963562D0)) (list (list 7.0D0 1215.6929931640625D0 0.002084252657368779D0 3.4234466552734375D0)) (list (list 7.0D0 1216.7349853515625D0 0.002160582458600402D0 3.435940980911255D0)) (list (list 7.0D0 1217.4765625D0 0.0018719156505540014D0 3.4484353065490723D0)) (list (list 7.0D0 1216.5185546875D0 0.0013714039232581854D0 3.4609296321868897D0)) (list (list 7.0D0 1214.950927734375D0 9.628648404031992D-4 3.473423957824707D0)) (list (list 7.0D0 1215.279296875D0 7.499678176827729D-4 3.4859182834625244D0)) (list (list 7.0D0 1216.395751953125D0 6.699603400193155D-4 3.498412609100342D0)) (list (list 7.0D0 1213.500732421875D0 6.074551492929459D-4 3.510906934738159D0)) (list (list 7.0D0 1208.6009521484375D0 6.154213915579021D-4 3.5234012603759766D0)) (list (list 7.0D0 1203.4901123046875D0 7.392805418930948D-4 3.535895586013794D0)) (list (list 7.0D0 1201.8748779296875D0 8.626856724731624D-4 3.5483899116516114D0)) (list (list 7.0D0 1207.3292236328125D0 8.238166919909418D-4 3.5608842372894287D0)) (list (list 7.0D0 1211.353515625D0 8.876084466464818D-4 3.573378801345825D0)) (list (list 7.0D0 1211.4267578125D0 0.0010327757336199284D0 3.5858731269836426D0)) (list (list 7.0D0 1212.1839599609375D0 0.001285773003473878D0 3.59836745262146D0)) (list (list 7.0D0 1214.954833984375D0 0.0015503992326557637D0 3.6108617782592774D0)) (list (list 7.0D0 1216.483154296875D0 0.0016212675254791975D0 3.6233561038970948D0)) (list (list 7.0D0 1216.4676513671875D0 0.0013775695115327835D0 3.635850429534912D0)) (list (list 7.0D0 1217.1085205078125D0 9.674156899563968D-4 3.6483447551727295D0)) (list (list 7.0D0 1218.7698974609375D0 6.206079269759357D-4 3.660839080810547D0)) (list (list 7.0D0 1218.9111328125D0 4.942598170600832D-4 3.6733334064483643D0)) (list (list 7.0D0 1219.187255859375D0 6.124073988758028D-4 3.6858277320861817D0)) (list (list 7.0D0 1222.6534423828125D0 8.647030917927623D-4 3.698322057723999D0)) (list (list 7.0D0 1225.381591796875D0 0.0010974729666486383D0 3.7108163833618164D0)) (list (list 7.0D0 1224.0836181640625D0 0.0011400463990867138D0 3.723310708999634D0)) (list (list 7.0D0 1220.76318359375D0 0.0011286982335150242D0 3.735805034637451D0)) (list (list 7.0D0 1218.4493408203125D0 0.0012179752811789513D0 3.7482993602752686D0)) (list (list 7.0D0 1219.15966796875D0 0.001301166950725019D0 3.760793685913086D0)) (list (list 7.0D0 1220.2569580078125D0 0.0013420000905171037D0 3.7732880115509033D0)) (list (list 7.0D0 1219.7637939453125D0 0.0012303737457841635D0 3.7857823371887207D0)) (list (list 7.0D0 1215.757568359375D0 9.392412612214685D-4 3.798276662826538D0)) (list (list 7.0D0 1211.4200439453125D0 6.696609780192375D-4 3.8107709884643555D0)) (list (list 7.0D0 1211.5126953125D0 4.772189713548869D-4 3.823265314102173D0)) (list (list 7.0D0 1227.4822998046875D0 5.05810312461108D-4 3.8357596397399903D0)) (list (list 7.0D0 1227.541748046875D0 9.969939710572362D-4 3.8482539653778076D0)) (list (list 7.0D0 1225.71142578125D0 0.0016436727019026876D0 3.860748291015625D0)) (list (list 7.0D0 1222.633056640625D0 0.002143288729712367D0 3.8732426166534424D0)) (list (list 7.0D0 1222.7283935546875D0 0.001971188699826598D0 3.8857369422912598D0)) (list (list 7.0D0 1229.0374755859375D0 0.001359981601126492D0 3.898231267929077D0)) (list (list 7.0D0 1231.017578125D0 0.0010395771823823452D0 3.9107255935668946D0)) (list (list 7.0D0 1229.5120849609375D0 9.776691440492869D-4 3.923219919204712D0)) (list (list 7.0D0 1226.308349609375D0 9.700532536953688D-4 3.9357142448425293D0)) (list (list 7.0D0 1227.22509765625D0 8.434820920228958D-4 3.9482085704803467D0)) (list (list 7.0D0 1227.18212890625D0 8.644697372801602D-4 3.960702896118164D0)) (list (list 7.0D0 1226.473388671875D0 0.0011708965757861734D0 3.9731972217559815D0)) (list (list 7.0D0 1226.5439453125D0 0.0015507410280406475D0 3.985691547393799D0)) (list (list 7.0D0 1226.8489990234375D0 0.0016849858220666647D0 3.998185873031616D0)) (list (list 7.0D0 1225.9595947265625D0 0.0014561802381649614D0 4.010680198669434D0)) (list (list 7.0D0 1223.0413818359375D0 0.0010458336910232902D0 4.02317476272583D0)) (list (list 7.0D0 1218.9228515625D0 7.622645935043693D-4 4.035668849945068D0)) (list (list 7.0D0 1215.647705078125D0 6.794703658670187D-4 4.048163414001465D0)) (list (list 7.0D0 1212.6820068359375D0 6.53003400657326D-4 4.060657501220703D0)) (list (list 7.0D0 1211.2161865234375D0 6.135042058303952D-4 4.0731520652771D0)) (list (list 7.0D0 1213.1978759765625D0 5.595235270448029D-4 4.085646152496338D0)) (list (list 7.0D0 1222.0439453125D0 5.914629437029362D-4 4.098140716552734D0)) (list (list 7.0D0 1230.07666015625D0 9.23556333873421D-4 4.110634803771973D0)) (list (list 7.0D0 1230.6612548828125D0 0.0011358282063156367D0 4.123129367828369D0)) (list (list 7.0D0 1229.7664794921875D0 0.0012032388476654888D0 4.135623455047607D0)) (list (list 7.0D0 1226.7010498046875D0 0.0011467250296846033D0 4.148118019104004D0)) (list (list 7.0D0 1223.2109375D0 0.0010754528921097517D0 4.160612106323242D0)) (list (list 7.0D0 1220.0028076171875D0 0.001022352371364832D0 4.173106670379639D0)) (list (list 7.0D0 1217.2188720703125D0 9.293812327086926D-4 4.185600757598877D0)) (list (list 7.0D0 1217.5159912109375D0 7.433532737195492D-4 4.198095321655273D0)) (list (list 7.0D0 1220.9969482421875D0 5.977761466056109D-4 4.210589408874512D0)) (list (list 7.0D0 1223.2713623046875D0 6.273981416597962D-4 4.223083972930908D0)) (list (list 7.0D0 1219.08349609375D0 6.568984244950116D-4 4.2355780601501465D0)) (list (list 7.0D0 1203.6737060546875D0 8.354055462405086D-4 4.248072624206543D0)) (list (list 7.0D0 1202.90576171875D0 8.461768738925457D-4 4.260566711425781D0)) (list (list 7.0D0 1203.5877685546875D0 7.002936326898634D-4 4.273061275482178D0)) (list (list 7.0D0 1205.4356689453125D0 6.079105078242719D-4 4.285555362701416D0)) (list (list 7.0D0 1209.3616943359375D0 6.045899935998023D-4 4.2980499267578125D0)) (list (list 7.0D0 1213.3519287109375D0 6.512015825137496D-4 4.310544013977051D0)) (list (list 7.0D0 1215.939208984375D0 7.0433528162539D-4 4.323038578033447D0)) (list (list 7.0D0 1218.0042724609375D0 7.586220162920654D-4 4.3355326652526856D0)) (list (list 7.0D0 1220.8746337890625D0 8.437436772510409D-4 4.348027229309082D0)) (list (list 7.0D0 1223.4896240234375D0 9.712306200526655D-4 4.36052131652832D0)) (list (list 7.0D0 1224.106201171875D0 9.741237154230475D-4 4.373015880584717D0)) (list (list 7.0D0 1224.0653076171875D0 7.975615444593132D-4 4.385509967803955D0)) (list (list 7.0D0 1225.195068359375D0 5.913854693062604D-4 4.398004531860352D0)) (list (list 7.0D0 1224.2205810546875D0 4.576205101329833D-4 4.410499095916748D0)) (list (list 7.0D0 1215.5126953125D0 5.28006989043206D-4 4.422993183135986D0)) (list (list 7.0D0 1215.4031982421875D0 7.749726064503193D-4 4.435487747192383D0)) (list (list 7.0D0 1217.577392578125D0 0.0011007189750671387D0 4.447981834411621D0)) (list (list 7.0D0 1218.9534912109375D0 0.0014529929030686617D0 4.460476398468018D0)) (list (list 7.0D0 1218.8348388671875D0 0.0016691867494955659D0 4.472970485687256D0)) (list (list 7.0D0 1219.6744384765625D0 0.0017243034671992064D0 4.485465049743652D0)) (list (list 7.0D0 1221.9608154296875D0 0.0017505339346826077D0 4.497959136962891D0)) (list (list 7.0D0 1223.6190185546875D0 0.0018055960536003113D0 4.510453701019287D0)) (list (list 7.0D0 1224.890869140625D0 0.001696121646091342D0 4.522947788238525D0)) (list (list 7.0D0 1228.3201904296875D0 0.0013519517378881574D0 4.535442352294922D0)) (list (list 7.0D0 1230.682861328125D0 9.822673164308072D-4 4.54793643951416D0)) (list (list 7.0D0 1227.0989990234375D0 6.941554020158947D-4 4.560431003570557D0)) (list (list 7.0D0 1221.4931640625D0 8.129256311804056D-4 4.572925090789795D0)) (list (list 7.0D0 1221.13134765625D0 0.0010187755106016994D0 4.585419654846191D0)) (list (list 7.0D0 1220.925537109375D0 0.0011227547656744719D0 4.59791374206543D0)) (list (list 7.0D0 1218.5445556640625D0 0.001114829909056425D0 4.610408306121826D0)) (list (list 7.0D0 1215.8782958984375D0 0.0011046364670619369D0 4.6229023933410645D0)) (list (list 7.0D0 1213.3306884765625D0 0.001097736763767898D0 4.635396957397461D0)) (list (list 7.0D0 1209.2320556640625D0 0.0010244434233754874D0 4.647891044616699D0)) (list (list 7.0D0 1206.4049072265625D0 8.36136459838599D-4 4.660385608673096D0)) (list (list 7.0D0 1206.3858642578125D0 5.641007446683943D-4 4.672879695892334D0)) (list (list 7.0D0 1207.5211181640625D0 3.932346007786691D-4 4.6853742599487305D0)) (list (list 7.0D0 1208.630615234375D0 4.509457212407142D-4 4.697868347167969D0)) (list (list 7.0D0 1220.8974609375D0 7.151329191401601D-4 4.710362911224365D0)) (list (list 7.0D0 1221.517822265625D0 0.001141651184298098D0 4.7228569984436035D0)) (list (list 7.0D0 1222.7823486328125D0 0.00143280194606632D0 4.7353515625D0)) (list (list 7.0D0 1224.02978515625D0 0.0015329892048612237D0 4.747845649719238D0)) (list (list 7.0D0 1225.418212890625D0 0.0014084880240261555D0 4.760340213775635D0)) (list (list 7.0D0 1226.8896484375D0 0.0010885578813031316D0 4.772834300994873D0)) (list (list 7.0D0 1230.92626953125D0 6.777852540835738D-4 4.7853288650512695D0)) (list (list 7.0D0 1231.4510498046875D0 3.599370247684419D-4 4.797822952270508D0)) (list (list 7.0D0 1228.770263671875D0 2.6373888249509037D-4 4.810317516326904D0)) (list (list 7.0D0 1207.9522705078125D0 4.6642537927255035D-4 4.822811603546143D0)) (list (list 7.0D0 1207.2564697265625D0 4.2609177762642503D-4 4.835306167602539D0)) (list (list 7.0D0 1205.53515625D0 3.355995868332684D-4 4.847800254821777D0)) (list (list 7.0D0 1205.1614990234375D0 2.4874857626855374D-4 4.860294818878174D0)) (list (list 7.0D0 1209.1947021484375D0 2.0600308198481798D-4 4.872788906097412D0)) (list (list 7.0D0 1232.854248046875D0 8.337890030816197D-4 4.885283470153809D0)) (list (list 7.0D0 1226.7327880859375D0 0.0010499665513634682D0 4.897777557373047D0)) (list (list 7.0D0 1222.3551025390625D0 0.001261215889826417D0 4.910272121429443D0)) (list (list 7.0D0 1220.7132568359375D0 0.0013362279860302806D0 4.922766208648682D0)) (list (list 7.0D0 1222.902587890625D0 0.001202766434289515D0 4.935260772705078D0)) (list (list 7.0D0 1226.785400390625D0 0.0010931614087894559D0 4.947755336761475D0)) (list (list 7.0D0 1228.9757080078125D0 0.0010583181865513325D0 4.960249423980713D0)) (list (list 7.0D0 1230.782470703125D0 9.8040874581784D-4 4.972743988037109D0)) (list (list 7.0D0 1232.760498046875D0 8.900461834855378D-4 4.985238075256348D0)) (list (list 7.0D0 1232.511962890625D0 8.563768351450563D-4 4.997732639312744D0)) (list (list 7.0D0 1230.29931640625D0 9.004034800454974D-4 5.010226726531982D0)) (list (list 7.0D0 1230.606201171875D0 9.20548802241683D-4 5.022721290588379D0)) (list (list 7.0D0 1232.5860595703125D0 8.798440685495734D-4 5.035215377807617D0)) (list (list 7.0D0 1232.418212890625D0 8.247550576925278D-4 5.047709941864014D0)) (list (list 7.0D0 1230.9517822265625D0 7.535053882747889D-4 5.060204029083252D0)) (list (list 7.0D0 1234.1019287109375D0 5.878756637685001D-4 5.072698593139648D0)) (list (list 7.0D0 1237.7025146484375D0 4.922976950183511D-4 5.085192680358887D0)) (list (list 7.0D0 1234.452392578125D0 5.094018415547907D-4 5.097687244415283D0)) (list (list 7.0D0 1218.6668701171875D0 9.241796215064824D-4 5.1101813316345215D0)) (list (list 7.0D0 1224.0447998046875D0 0.0010460363700985909D0 5.122675895690918D0)) (list (list 7.0D0 1224.7890625D0 9.126854129135609D-4 5.135169982910156D0)) (list (list 7.0D0 1219.959716796875D0 6.676620105281472D-4 5.147664546966553D0)) (list (list 7.0D0 1217.3900146484375D0 6.332427728921175D-4 5.160158634185791D0)) (list (list 7.0D0 1219.0692138671875D0 7.067453698255122D-4 5.1726531982421875D0)) (list (list 7.0D0 1229.1885986328125D0 8.161340374499559D-4 5.185147285461426D0)) (list (list 7.0D0 1231.2867431640625D0 7.825598586350679D-4 5.197641849517822D0)) (list (list 7.0D0 1234.8319091796875D0 5.67203271202743D-4 5.2101359367370606D0)) (list (list 7.0D0 1239.9666748046875D0 4.988309228792787D-4 5.222630500793457D0)) (list (list 7.0D0 1238.7845458984375D0 6.988139939494431D-4 5.235124588012695D0)) (list (list 7.0D0 1223.979248046875D0 0.001288113882765174D0 5.247619152069092D0)) (list (list 7.0D0 1227.554931640625D0 0.0016177427023649216D0 5.26011323928833D0)) (list (list 7.0D0 1227.0413818359375D0 0.0015054503455758095D0 5.272607803344727D0)) (list (list 7.0D0 1222.46923828125D0 0.0010794783011078835D0 5.285101890563965D0)) (list (list 7.0D0 1236.068359375D0 5.865780985914171D-4 5.297596454620361D0)) (list (list 7.0D0 1236.2999267578125D0 6.754150381311774D-4 5.3100905418396D0)) (list (list 7.0D0 1222.7877197265625D0 0.0012554944260045886D0 5.322585105895996D0)) (list (list 7.0D0 1225.12744140625D0 0.0016253164503723383D0 5.335079193115234D0)) (list (list 7.0D0 1222.6451416015625D0 0.0015599644975736738D0 5.347573757171631D0)) (list (list 7.0D0 1218.0482177734375D0 0.001279332209378481D0 5.360067844390869D0)) (list (list 7.0D0 1215.3809814453125D0 9.839918930083514D-4 5.372562408447266D0)) (list (list 7.0D0 1215.663818359375D0 7.395811844617128D-4 5.385056495666504D0)) (list (list 7.0D0 1216.982421875D0 6.837739492766559D-4 5.3975510597229D0)) (list (list 7.0D0 1218.6002197265625D0 8.298610337078571D-4 5.410045146942139D0)) (list (list 7.0D0 1220.23681640625D0 0.0010571734746918083D0 5.422539710998535D0)) (list (list 7.0D0 1219.409912109375D0 0.0011370291467756033D0 5.435033798217773D0)) (list (list 7.0D0 1214.067138671875D0 0.0010085018584504724D0 5.44752836227417D0)) (list (list 7.0D0 1208.90625D0 0.001011598389595747D0 5.460022449493408D0)) (list (list 7.0D0 1206.9132080078125D0 0.0010938369669020176D0 5.472517013549805D0)) (list (list 7.0D0 1205.87451171875D0 0.0010194622445851565D0 5.485011100769043D0)) (list (list 7.0D0 1198.1466064453125D0 7.14457593858242D-4 5.4975056648254395D0)) (list (list 7.0D0 1190.003173828125D0 6.174826412461698D-4 5.510000228881836D0)) (list (list 7.0D0 1190.138671875D0 6.488221697509289D-4 5.522494316101074D0)) (list (list 7.0D0 1196.3536376953125D0 7.740673027001321D-4 5.534988880157471D0)) (list (list 7.0D0 1200.8741455078125D0 8.598509011790156D-4 5.547482967376709D0)) (list (list 7.0D0 1219.7724609375D0 7.155744242481887D-4 5.5599775314331055D0)) (list (list 7.0D0 1225.8656005859375D0 7.701975991949439D-4 5.572471618652344D0)) (list (list 7.0D0 1228.2437744140625D0 9.165019728243351D-4 5.58496618270874D0)) (list (list 7.0D0 1229.53564453125D0 9.795798687264324D-4 5.5974602699279785D0)) (list (list 7.0D0 1218.6141357421875D0 8.303632494062185D-4 5.609954833984375D0)) (list (list 7.0D0 1211.5906982421875D0 8.135078242048621D-4 5.622448921203613D0)) (list (list 7.0D0 1210.803955078125D0 6.919839070178568D-4 5.63494348526001D0)) (list (list 7.0D0 1211.946044921875D0 5.828812718391418D-4 5.647437572479248D0)) (list (list 7.0D0 1216.0838623046875D0 5.474768113344908D-4 5.6599321365356445D0)) (list (list 7.0D0 1226.1480712890625D0 7.82232906203717D-4 5.672426223754883D0)) (list (list 7.0D0 1225.2159423828125D0 0.0010050894925370813D0 5.684920787811279D0)) (list (list 7.0D0 1221.8865966796875D0 0.0010332653764635325D0 5.697414875030518D0)) (list (list 7.0D0 1220.273681640625D0 8.905748836696148D-4 5.709909439086914D0)) (list (list 7.0D0 1222.986572265625D0 6.429791101254523D-4 5.722403526306152D0)) (list (list 7.0D0 1224.5047607421875D0 5.204403423704207D-4 5.734898090362549D0)) (list (list 7.0D0 1223.76416015625D0 5.310820415616036D-4 5.747392177581787D0)) (list (list 7.0D0 1221.8341064453125D0 5.687628872692585D-4 5.759886741638184D0)) (list (list 7.0D0 1221.5067138671875D0 5.269073881208897D-4 5.772380828857422D0)) (list (list 7.0D0 1223.9190673828125D0 4.898110055364668D-4 5.784875392913818D0)) (list (list 7.0D0 1225.3824462890625D0 6.990432739257813D-4 5.797369480133057D0)) (list (list 7.0D0 1223.692626953125D0 0.0012146526714786888D0 5.809864044189453D0)) (list (list 7.0D0 1222.5709228515625D0 0.001890863641165197D0 5.822358131408691D0)) (list (list 7.0D0 1223.87890625D0 0.0023465740960091353D0 5.834852695465088D0)) (list (list 7.0D0 1226.2481689453125D0 0.0023542139679193497D0 5.847346782684326D0)) (list (list 7.0D0 1229.6895751953125D0 0.0020341675262898207D0 5.859841346740723D0)) (list (list 7.0D0 1231.5159912109375D0 0.001753311138600111D0 5.872335433959961D0)) (list (list 7.0D0 1230.55322265625D0 0.0016064731171354652D0 5.884829998016357D0)) (list (list 7.0D0 1227.4754638671875D0 0.0015416450332850218D0 5.897324085235596D0)) (list (list 7.0D0 1227.28955078125D0 0.0012996288714930416D0 5.909818649291992D0)) (list (list 7.0D0 1230.144287109375D0 9.392472566105425D-4 5.9223127365112305D0)) (list (list 7.0D0 1230.8974609375D0 6.877735140733421D-4 5.934807300567627D0)) (list (list 7.0D0 1226.0126953125D0 5.818383651785553D-4 5.947301387786865D0)) (list (list 7.0D0 1221.8065185546875D0 7.376573630608618D-4 5.959795951843262D0)) (list (list 7.0D0 1220.9698486328125D0 9.998508030548692D-4 5.9722900390625D0)) (list (list 7.0D0 1219.773193359375D0 0.0012523792684078217D0 5.9847846031188965D0)) (list (list 7.0D0 1217.6771240234375D0 0.0012853535590693355D0 5.997278690338135D0)) (list (list 7.0D0 1217.1898193359375D0 0.0010625546565279365D0 6.009773254394531D0)) (list (list 7.0D0 1219.4642333984375D0 8.398391655646265D-4 6.0222673416137695D0)) (list (list 7.0D0 1222.999267578125D0 9.569135727360845D-4 6.034761905670166D0)) (list (list 7.0D0 1226.261474609375D0 0.001302129472605884D0 6.0472564697265625D0)) (list (list 7.0D0 1227.400390625D0 0.0014095478691160679D0 6.059750556945801D0)) (list (list 7.0D0 1229.285888671875D0 0.0011483912821859122D0 6.072245121002197D0)) (list (list 7.0D0 1230.1949462890625D0 7.701896829530597D-4 6.0847392082214356D0)) (list (list 7.0D0 1229.0341796875D0 5.335969035513699D-4 6.097233772277832D0)) (list (list 7.0D0 1225.7425537109375D0 4.6939184539951384D-4 6.10972785949707D0)) (list (list 7.0D0 1223.38818359375D0 4.498841299209744D-4 6.122222423553467D0)) (list (list 7.0D0 1223.5029296875D0 4.452519060578197D-4 6.134716510772705D0)) (list (list 7.0D0 1225.7442626953125D0 4.7797011211514473D-4 6.147211074829102D0)) (list (list 7.0D0 1232.8741455078125D0 5.019379896111786D-4 6.15970516204834D0)) (list (list 7.0D0 1237.252685546875D0 4.7681177966296673D-4 6.172199726104736D0)) (list (list 7.0D0 1237.688720703125D0 4.417855234351009D-4 6.184693813323975D0)) (list (list 7.0D0 1228.148193359375D0 4.760949232149869D-4 6.197188377380371D0)) (list (list 7.0D0 1222.346435546875D0 8.885773713700473D-4 6.209682464599609D0)) (list (list 7.0D0 1222.2249755859375D0 0.0013147782301530242D0 6.222177028656006D0)) (list (list 7.0D0 1223.860595703125D0 0.0015558338491246105D0 6.234671115875244D0)) (list (list 7.0D0 1226.490234375D0 0.0014665795024484396D0 6.247165679931641D0)) (list (list 7.0D0 1228.328125D0 0.0010721799917519093D0 6.259659767150879D0)) (list (list 7.0D0 1235.55029296875D0 6.303468253463507D-4 6.272154331207275D0)) (list (list 7.0D0 1236.0576171875D0 4.359957529231906D-4 6.284648418426514D0)) (list (list 7.0D0 1212.2958984375D0 8.105756132863462D-4 6.29714298248291D0)) (list (list 7.0D0 1219.4501953125D0 9.207217372022569D-4 6.309637069702148D0)) (list (list 7.0D0 1223.5081787109375D0 9.636111790314317D-4 6.322131633758545D0)) (list (list 7.0D0 1226.4212646484375D0 9.452609228901565D-4 6.334625720977783D0)) (list (list 7.0D0 1228.1016845703125D0 8.866626885719597D-4 6.34712028503418D0)) (list (list 7.0D0 1228.1982421875D0 7.49818398617208D-4 6.359614372253418D0)) (list (list 7.0D0 1229.1474609375D0 6.033153040334582D-4 6.3721089363098145D0)) (list (list 7.0D0 1229.5731201171875D0 5.920713301748037D-4 6.384603023529053D0)) (list (list 7.0D0 1227.5394287109375D0 8.0566864926368D-4 6.397097587585449D0)) (list (list 7.0D0 1224.6307373046875D0 0.0011931045446544886D0 6.4095916748046875D0)) (list (list 7.0D0 1223.832275390625D0 0.0014774032169952989D0 6.422086238861084D0)) (list (list 7.0D0 1222.8316650390625D0 0.0015376892406493426D0 6.434580326080322D0)) (list (list 7.0D0 1221.4219970703125D0 0.0014825360849499703D0 6.447074890136719D0)) (list (list 7.0D0 1221.7109375D0 0.0013531649019569159D0 6.459568977355957D0)) (list (list 7.0D0 1225.9151611328125D0 0.0012053041718900204D0 6.4720635414123535D0)) (list (list 7.0D0 1229.050537109375D0 0.0012047982309013606D0 6.484557628631592D0)) (list (list 7.0D0 1229.2274169921875D0 0.0011672023683786393D0 6.497052192687988D0)) (list (list 7.0D0 1228.6099853515625D0 9.819780243560672D-4 6.509546279907227D0)) (list (list 7.0D0 1231.394775390625D0 7.219952531158924D-4 6.522040843963623D0)) (list (list 7.0D0 1232.964111328125D0 5.796445766463876D-4 6.534534931182861D0)) (list (list 7.0D0 1234.2984619140625D0 4.711707588285208D-4 6.547029495239258D0)) (list (list 7.0D0 1241.7835693359375D0 3.674868494272232D-4 6.559523582458496D0)) (list (list 7.0D0 1243.28515625D0 2.7339693042449653D-4 6.572018146514893D0)) (list (list 7.0D0 1249.7144775390625D0 2.2313512454275042D-4 6.584512233734131D0)) (list (list 7.0D0 1252.103271484375D0 2.825079136528075D-4 6.597006797790527D0)) (list (list 7.0D0 1225.0306396484375D0 5.881142569705844D-4 6.609501361846924D0)) (list (list 7.0D0 1224.076171875D0 6.715332856401801D-4 6.621995449066162D0)) (list (list 7.0D0 1222.274169921875D0 6.776135414838791D-4 6.634490013122559D0)) (list (list 7.0D0 1222.0848388671875D0 5.476647056639195D-4 6.646984100341797D0)) (list (list 7.0D0 1219.7677001953125D0 3.2279654988087714D-4 6.659478664398193D0)) (list (list 7.0D0 1238.4501953125D0 2.160677977371961D-4 6.671972751617432D0)) (list (list 7.0D0 1238.4501953125D0 0.0D0 6.684467315673828D0)) (list (list 8.0D0 924.3054809570313D0 4.8617509310133755D-4 0.0D0)) (list (list 8.0D0 923.503173828125D0 0.001075881184078753D0 0.01249433122575283D0)) (list (list 8.0D0 923.7314453125D0 0.0019410233944654465D0 0.02498866245150566D0)) (list (list 8.0D0 925.2639770507813D0 0.003012167988345027D0 0.03748299181461334D0)) (list (list 8.0D0 927.7724609375D0 0.004285493865609169D0 0.04997732490301132D0)) (list (list 8.0D0 930.1185302734375D0 0.005879031028598547D0 0.062471654266119D0)) (list (list 8.0D0 931.6810302734375D0 0.007776122074574232D0 0.07496598362922669D0)) (list (list 8.0D0 932.6051635742188D0 0.009841056540608406D0 0.08746031671762467D0)) (list (list 8.0D0 933.1463012695313D0 0.011998497880995274D0 0.09995464980602265D0)) (list (list 8.0D0 933.2816162109375D0 0.014234841801226139D0 0.11244898289442063D0)) (list (list 8.0D0 933.0892944335938D0 0.016594957560300827D0 0.124943308532238D0)) (list (list 8.0D0 932.7623291015625D0 0.019150197505950928D0 0.137437641620636D0)) (list (list 8.0D0 932.3402709960938D0 0.021893024444580078D0 0.14993196725845337D0)) (list (list 8.0D0 931.9352416992188D0 0.024587538093328476D0 0.16242630779743195D0)) (list (list 8.0D0 931.8792724609375D0 0.026791155338287354D0 0.17492063343524933D0)) (list (list 8.0D0 932.229248046875D0 0.028345264494419098D0 0.1874149590730667D0)) (list (list 8.0D0 932.51904296875D0 0.02968396618962288D0 0.1999092996120453D0)) (list (list 8.0D0 932.396240234375D0 0.031199388206005097D0 0.21240362524986267D0)) (list (list 8.0D0 932.0306396484375D0 0.03267847001552582D0 0.22489796578884125D0)) (list (list 8.0D0 931.8361206054688D0 0.03350109979510307D0 0.23739229142665863D0)) (list (list 8.0D0 931.9027709960938D0 0.03347627818584442D0 0.249886617064476D0)) (list (list 8.0D0 932.0119018554688D0 0.03307146206498146D0 0.2623809576034546D0)) (list (list 8.0D0 932.0511474609375D0 0.032768819481134415D0 0.274875283241272D0)) (list (list 8.0D0 932.0595092773438D0 0.03269471228122711D0 0.28736960887908936D0)) (list (list 8.0D0 932.0738525390625D0 0.032727137207984924D0 0.29986393451690674D0)) (list (list 8.0D0 932.1241455078125D0 0.032646846026182175D0 0.3123582899570465D0)) (list (list 8.0D0 932.2216186523438D0 0.0321987122297287D0 0.3248526155948639D0)) (list (list 8.0D0 932.3087158203125D0 0.03119359165430069D0 0.3373469412326813D0)) (list (list 8.0D0 932.418212890625D0 0.029605340212583542D0 0.34984126687049866D0)) (list (list 8.0D0 932.7656860351563D0 0.027623170986771584D0 0.36233559250831604D0)) (list (list 8.0D0 933.467041015625D0 0.025760352611541748D0 0.3748299181461334D0)) (list (list 8.0D0 934.1739501953125D0 0.02482009492814541D0 0.3873242437839508D0)) (list (list 8.0D0 934.29931640625D0 0.025440763682127D0 0.3998185992240906D0)) (list (list 8.0D0 933.7333984375D0 0.027648407965898514D0 0.41231292486190796D0)) (list (list 8.0D0 932.9472045898438D0 0.030635254457592964D0 0.42480725049972534D0)) (list (list 8.0D0 932.4984130859375D0 0.03304193913936615D0 0.4373015761375427D0)) (list (list 8.0D0 932.5196533203125D0 0.03412892669439316D0 0.4497959315776825D0)) (list (list 8.0D0 932.7259521484375D0 0.034330613911151886D0 0.4622902572154999D0)) (list (list 8.0D0 932.78515625D0 0.03452804312109947D0 0.47478458285331726D0)) (list (list 8.0D0 932.6292724609375D0 0.03515036031603813D0 0.48727890849113465D0)) (list (list 8.0D0 932.454833984375D0 0.03598272055387497D0 0.499773234128952D0)) (list (list 8.0D0 932.4461059570313D0 0.03655144199728966D0 0.5122675895690918D0)) (list (list 8.0D0 932.5758056640625D0 0.03670787811279297D0 0.5247619152069092D0)) (list (list 8.0D0 932.6927490234375D0 0.03668712452054024D0 0.5372562408447266D0)) (list (list 8.0D0 932.706298828125D0 0.03676924109458923D0 0.549750566482544D0)) (list (list 8.0D0 932.6132202148438D0 0.03712887316942215D0 0.5622448921203613D0)) (list (list 8.0D0 932.3963012695313D0 0.03781019523739815D0 0.5747392177581787D0)) (list (list 8.0D0 932.0737915039063D0 0.038652531802654266D0 0.5872335433959961D0)) (list (list 8.0D0 931.8115844726563D0 0.039374593645334244D0 0.5997278690338135D0)) (list (list 8.0D0 931.73388671875D0 0.03989633545279503D0 0.6122221946716309D0)) (list (list 8.0D0 931.763671875D0 0.040385596454143524D0 0.624716579914093D0)) (list (list 8.0D0 931.8326416015625D0 0.040898650884628296D0 0.6372109055519104D0)) (list (list 8.0D0 931.9443969726563D0 0.04130067303776741D0 0.6497052311897278D0)) (list (list 8.0D0 932.0479736328125D0 0.04151292145252228D0 0.6621995568275452D0)) (list (list 8.0D0 932.1126098632813D0 0.0415719598531723D0 0.6746938824653626D0)) (list (list 8.0D0 932.2171630859375D0 0.04154330492019653D0 0.6871882081031799D0)) (list (list 8.0D0 932.3782958984375D0 0.04153570160269737D0 0.6996825337409973D0)) (list (list 8.0D0 932.47265625D0 0.04161757603287697D0 0.7121768593788147D0)) (list (list 8.0D0 932.4564208984375D0 0.04170241579413414D0 0.7246711850166321D0)) (list (list 8.0D0 932.4337768554688D0 0.04167528450489044D0 0.7371655106544495D0)) (list (list 8.0D0 932.4593505859375D0 0.04155516251921654D0 0.7496598362922669D0)) (list (list 8.0D0 932.5003662109375D0 0.04138439893722534D0 0.762154221534729D0)) (list (list 8.0D0 932.5723266601563D0 0.04110311344265938D0 0.7746485471725464D0)) (list (list 8.0D0 932.6787109375D0 0.040688056498765945D0 0.7871428728103638D0)) (list (list 8.0D0 932.7273559570313D0 0.040246471762657166D0 0.7996371984481812D0)) (list (list 8.0D0 932.6713256835938D0 0.039863381534814835D0 0.8121315240859985D0)) (list (list 8.0D0 932.59423828125D0 0.03953280672430992D0 0.8246258497238159D0)) (list (list 8.0D0 932.574462890625D0 0.03922219201922417D0 0.8371201753616333D0)) (list (list 8.0D0 932.5982055664063D0 0.03890115022659302D0 0.8496145009994507D0)) (list (list 8.0D0 932.6611938476563D0 0.03856431692838669D0 0.8621088266372681D0)) (list (list 8.0D0 932.7179565429688D0 0.03836598992347717D0 0.8746031522750855D0)) (list (list 8.0D0 932.594482421875D0 0.03859132528305054D0 0.8870974779129028D0)) (list (list 8.0D0 932.2103271484375D0 0.03935018181800842D0 0.899591863155365D0)) (list (list 8.0D0 931.7630004882813D0 0.04042096063494682D0 0.9120861887931824D0)) (list (list 8.0D0 931.5026245117188D0 0.041438598185777664D0 0.9245805144309998D0)) (list (list 8.0D0 931.493896484375D0 0.042193956673145294D0 0.9370748400688171D0)) (list (list 8.0D0 931.706787109375D0 0.04265208914875984D0 0.9495691657066345D0)) (list (list 8.0D0 932.0138549804688D0 0.04287124425172806D0 0.9620634913444519D0)) (list (list 8.0D0 932.2568969726563D0 0.04291339963674545D0 0.9745578169822693D0)) (list (list 8.0D0 932.4217529296875D0 0.04283209890127182D0 0.9870521426200867D0)) (list (list 8.0D0 932.5402221679688D0 0.04278992488980293D0 0.999546468257904D0)) (list (list 8.0D0 932.5802612304688D0 0.04304112493991852D0 1.0120408535003662D0)) (list (list 8.0D0 932.5235595703125D0 0.04367969557642937D0 1.0245351791381836D0)) (list (list 8.0D0 932.4263305664063D0 0.044481340795755386D0 1.037029504776001D0)) (list (list 8.0D0 932.3726806640625D0 0.045079734176397324D0 1.0495238304138184D0)) (list (list 8.0D0 932.4417724609375D0 0.045293375849723816D0 1.0620181560516358D0)) (list (list 8.0D0 932.6218872070313D0 0.04529591649770737D0 1.0745124816894532D0)) (list (list 8.0D0 932.7771606445313D0 0.045493196696043015D0 1.0870068073272705D0)) (list (list 8.0D0 932.7673950195313D0 0.04616200923919678D0 1.099501132965088D0)) (list (list 8.0D0 932.5870361328125D0 0.04716935753822327D0 1.1119954586029053D0)) (list (list 8.0D0 932.3775634765625D0 0.047972869127988815D0 1.1244897842407227D0)) (list (list 8.0D0 932.3260498046875D0 0.048061519861221314D0 1.13698410987854D0)) (list (list 8.0D0 932.4408569335938D0 0.04752887785434723D0 1.1494784355163575D0)) (list (list 8.0D0 932.5285034179688D0 0.046962518244981766D0 1.1619727611541748D0)) (list (list 8.0D0 932.475830078125D0 0.04676709324121475D0 1.1744670867919922D0)) (list (list 8.0D0 932.3784790039063D0 0.04685244336724281D0 1.1869614124298096D0)) (list (list 8.0D0 932.3552856445313D0 0.046930573880672455D0 1.199455738067627D0)) (list (list 8.0D0 932.3827514648438D0 0.04693237692117691D0 1.2119500637054444D0)) (list (list 8.0D0 932.3619995117188D0 0.047017600387334824D0 1.2244443893432618D0)) (list (list 8.0D0 932.2388916015625D0 0.04727008193731308D0 1.236938714981079D0)) (list (list 8.0D0 932.0980224609375D0 0.04753996804356575D0 1.249433159828186D0)) (list (list 8.0D0 932.092529296875D0 0.04760607331991196D0 1.2619274854660035D0)) (list (list 8.0D0 932.2119140625D0 0.04746611416339874D0 1.2744218111038208D0)) (list (list 8.0D0 932.2661743164063D0 0.04735146462917328D0 1.2869161367416382D0)) (list (list 8.0D0 932.1607055664063D0 0.047480981796979904D0 1.2994104623794556D0)) (list (list 8.0D0 931.9926147460938D0 0.047857724130153656D0 1.311904788017273D0)) (list (list 8.0D0 931.8975219726563D0 0.04824777692556381D0 1.3243991136550904D0)) (list (list 8.0D0 931.9667358398438D0 0.04842198267579079D0 1.3368934392929078D0)) (list (list 8.0D0 932.2115478515625D0 0.04841522127389908D0 1.349387764930725D0)) (list (list 8.0D0 932.4991455078125D0 0.048474784940481186D0 1.3618820905685425D0)) (list (list 8.0D0 932.6681518554688D0 0.04876064136624336D0 1.3743764162063599D0)) (list (list 8.0D0 932.702880859375D0 0.04921785742044449D0 1.3868707418441773D0)) (list (list 8.0D0 932.7011108398438D0 0.04967375472187996D0 1.3993650674819947D0)) (list (list 8.0D0 932.7152099609375D0 0.05006316676735878D0 1.411859393119812D0)) (list (list 8.0D0 932.7091674804688D0 0.05047279968857765D0 1.4243537187576294D0)) (list (list 8.0D0 932.6455688476563D0 0.050971340388059616D0 1.4368480443954468D0)) (list (list 8.0D0 932.5430908203125D0 0.05146273225545883D0 1.4493423700332642D0)) (list (list 8.0D0 932.4476928710938D0 0.05178540199995041D0 1.4618366956710816D0)) (list (list 8.0D0 932.3802490234375D0 0.05187177658081055D0 1.474331021308899D0)) (list (list 8.0D0 932.3316040039063D0 0.051748353987932205D0 1.4868253469467163D0)) (list (list 8.0D0 932.3041381835938D0 0.05149306729435921D0 1.4993196725845337D0)) (list (list 8.0D0 932.32958984375D0 0.05123976990580559D0 1.5118141174316407D0)) (list (list 8.0D0 932.3978881835938D0 0.051147595047950745D0 1.524308443069458D0)) (list (list 8.0D0 932.4436645507813D0 0.051290880888700485D0 1.5368027687072754D0)) (list (list 8.0D0 932.4446411132813D0 0.05158344283699989D0 1.5492970943450928D0)) (list (list 8.0D0 932.44189453125D0 0.05181427672505379D0 1.5617914199829102D0)) (list (list 8.0D0 932.443115234375D0 0.05181249976158142D0 1.5742857456207276D0)) (list (list 8.0D0 932.4222412109375D0 0.05162283405661583D0 1.586780071258545D0)) (list (list 8.0D0 932.3786010742188D0 0.05146102234721184D0 1.5992743968963623D0)) (list (list 8.0D0 932.3328857421875D0 0.05150528624653816D0 1.6117687225341797D0)) (list (list 8.0D0 932.2923583984375D0 0.051742278039455414D0 1.624263048171997D0)) (list (list 8.0D0 932.2731323242188D0 0.052023667842149735D0 1.6367573738098145D0)) (list (list 8.0D0 932.2868041992188D0 0.052207428961992264D0 1.6492516994476319D0)) (list (list 8.0D0 932.3154296875D0 0.05221915617585182D0 1.6617460250854493D0)) (list (list 8.0D0 932.30419921875D0 0.05201229825615883D0 1.6742403507232666D0)) (list (list 8.0D0 932.2340698242188D0 0.05145453289151192D0 1.686734676361084D0)) (list (list 8.0D0 932.1771240234375D0 0.05034080520272255D0 1.6992290019989014D0)) (list (list 8.0D0 932.2633056640625D0 0.048604145646095276D0 1.7117233276367188D0)) (list (list 8.0D0 932.5196533203125D0 0.04663301259279251D0 1.7242176532745362D0)) (list (list 8.0D0 932.7752075195313D0 0.045258961617946625D0 1.7367119789123536D0)) (list (list 8.0D0 932.796875D0 0.04520256817340851D0 1.749206304550171D0)) (list (list 8.0D0 932.5604248046875D0 0.04650247097015381D0 1.7617006301879883D0)) (list (list 8.0D0 932.2894287109375D0 0.04842313379049301D0 1.7741949558258057D0)) (list (list 8.0D0 932.1882934570313D0 0.050008051097393036D0 1.7866894006729126D0)) (list (list 8.0D0 932.2223510742188D0 0.05082489177584648D0 1.79918372631073D0)) (list (list 8.0D0 932.2838134765625D0 0.05099178105592728D0 1.8116780519485474D0)) (list (list 8.0D0 932.3303833007813D0 0.05075402557849884D0 1.8241723775863648D0)) (list (list 8.0D0 932.3287353515625D0 0.050271835178136826D0 1.8366667032241822D0)) (list (list 8.0D0 932.2576904296875D0 0.049643274396657944D0 1.8491610288619996D0)) (list (list 8.0D0 932.17724609375D0 0.0489259734749794D0 1.861655354499817D0)) (list (list 8.0D0 932.145751953125D0 0.04811772704124451D0 1.8741496801376343D0)) (list (list 8.0D0 932.1651611328125D0 0.0471760518848896D0 1.8866440057754517D0)) (list (list 8.0D0 932.22607421875D0 0.04612080007791519D0 1.899138331413269D0)) (list (list 8.0D0 932.2960815429688D0 0.04514050483703613D0 1.9116326570510865D0)) (list (list 8.0D0 932.301513671875D0 0.04448646306991577D0 1.9241269826889038D0)) (list (list 8.0D0 932.2587890625D0 0.044209882616996765D0 1.9366213083267212D0)) (list (list 8.0D0 932.2853393554688D0 0.044162869453430176D0 1.9491156339645386D0)) (list (list 8.0D0 932.4061889648438D0 0.044264134019613266D0 1.961609959602356D0)) (list (list 8.0D0 932.4785766601563D0 0.044564004987478256D0 1.9741042852401734D0)) (list (list 8.0D0 932.404541015625D0 0.044939637184143066D0 1.9865986108779908D0)) (list (list 8.0D0 932.298095703125D0 0.04498220607638359D0 1.999092936515808D0)) (list (list 8.0D0 932.342529296875D0 0.044350847601890564D0 2.011587381362915D0)) (list (list 8.0D0 932.518310546875D0 0.043218135833740234D0 2.0240817070007324D0)) (list (list 8.0D0 932.6704711914063D0 0.04214975982904434D0 2.03657603263855D0)) (list (list 8.0D0 932.7233276367188D0 0.041583072394132614D0 2.049070358276367D0)) (list (list 8.0D0 932.6773071289063D0 0.0415840782225132D0 2.0615646839141846D0)) (list (list 8.0D0 932.5126342773438D0 0.041998907923698425D0 2.074059009552002D0)) (list (list 8.0D0 932.2322387695313D0 0.04258885234594345D0 2.0865533351898194D0)) (list (list 8.0D0 931.9342041015625D0 0.04295112565159798D0 2.0990476608276367D0)) (list (list 8.0D0 931.76416015625D0 0.042508210986852646D0 2.111541986465454D0)) (list (list 8.0D0 931.7881469726563D0 0.040816955268383026D0 2.1240363121032715D0)) (list (list 8.0D0 931.9775390625D0 0.03787611797451973D0 2.136530637741089D0)) (list (list 8.0D0 932.3383178710938D0 0.03409599885344505D0 2.1490249633789063D0)) (list (list 8.0D0 932.9554443359375D0 0.03017040342092514D0 2.1615192890167237D0)) (list (list 8.0D0 933.8071899414063D0 0.027132941409945488D0 2.174013614654541D0)) (list (list 8.0D0 934.3212280273438D0 0.026202531531453133D0 2.1865079402923584D0)) (list (list 8.0D0 933.8349609375D0 0.027990752831101418D0 2.199002265930176D0)) (list (list 8.0D0 932.6417846679688D0 0.032035842537879944D0 2.211496591567993D0)) (list (list 8.0D0 931.7734375D0 0.03643696382641792D0 2.2239909172058106D0)) (list (list 8.0D0 931.758544921875D0 0.03901444375514984D0 2.236485242843628D0)) (list (list 8.0D0 932.2158203125D0 0.039516132324934006D0 2.2489795684814453D0)) (list (list 8.0D0 932.6055297851563D0 0.03919075056910515D0 2.2614738941192627D0)) (list (list 8.0D0 932.5938720703125D0 0.03922339528799057D0 2.27396821975708D0)) (list (list 8.0D0 932.225830078125D0 0.03977525234222412D0 2.2864625453948975D0)) (list (list 8.0D0 931.9236450195313D0 0.04004359990358353D0 2.298956871032715D0)) (list (list 8.0D0 932.0874633789063D0 0.03929503262042999D0 2.3114511966705323D0)) (list (list 8.0D0 932.5465087890625D0 0.03797343000769615D0 2.3239455223083496D0)) (list (list 8.0D0 932.7833251953125D0 0.037064481526613236D0 2.336439847946167D0)) (list (list 8.0D0 932.6697998046875D0 0.036811087280511856D0 2.3489341735839844D0)) (list (list 8.0D0 932.5690307617188D0 0.03661275655031204D0 2.3614284992218018D0)) (list (list 8.0D0 932.7168579101563D0 0.035963721573352814D0 2.373922824859619D0)) (list (list 8.0D0 932.8560180664063D0 0.03504480421543121D0 2.3864171504974366D0)) (list (list 8.0D0 932.7916259765625D0 0.034130923449993134D0 2.398911476135254D0)) (list (list 8.0D0 932.6502075195313D0 0.03321893885731697D0 2.4114058017730713D0)) (list (list 8.0D0 932.5421142578125D0 0.03224879875779152D0 2.4239001274108887D0)) (list (list 8.0D0 932.43896484375D0 0.03116661123931408D0 2.436394453048706D0)) (list (list 8.0D0 932.4832763671875D0 0.02982664294540882D0 2.4488887786865235D0)) (list (list 8.0D0 932.803955078125D0 0.028412899002432823D0 2.461383104324341D0)) (list (list 8.0D0 933.0379028320313D0 0.02768794260919094D0 2.4738776683807373D0)) (list (list 8.0D0 932.8088989257813D0 0.028168844059109688D0 2.4863719940185547D0)) (list (list 8.0D0 932.2902221679688D0 0.029566945508122444D0 2.498866319656372D0)) (list (list 8.0D0 931.8831787109375D0 0.031127220019698143D0 2.5113606452941895D0)) (list (list 8.0D0 931.6051025390625D0 0.032361797988414764D0 2.523854970932007D0)) (list (list 8.0D0 931.34619140625D0 0.033040862530469894D0 2.536349296569824D0)) (list (list 8.0D0 931.2000122070313D0 0.0328659862279892D0 2.5488436222076416D0)) (list (list 8.0D0 931.2669067382813D0 0.031600870192050934D0 2.561337947845459D0)) (list (list 8.0D0 931.5308227539063D0 0.02930997498333454D0 2.5738322734832764D0)) (list (list 8.0D0 931.9620361328125D0 0.026372410356998444D0 2.5863265991210938D0)) (list (list 8.0D0 932.5411376953125D0 0.02339421957731247D0 2.598820924758911D0)) (list (list 8.0D0 933.1118774414063D0 0.02105131931602955D0 2.6113152503967285D0)) (list (list 8.0D0 933.2892456054688D0 0.019731074571609497D0 2.623809576034546D0)) (list (list 8.0D0 932.88037109375D0 0.01935485191643238D0 2.6363039016723633D0)) (list (list 8.0D0 932.1890258789063D0 0.019456377252936363D0 2.6487982273101807D0)) (list (list 8.0D0 931.6148681640625D0 0.0194137841463089D0 2.661292552947998D0)) (list (list 8.0D0 931.2062377929688D0 0.018894324079155922D0 2.6737868785858155D0)) (list (list 8.0D0 930.8695068359375D0 0.01790221408009529D0 2.686281204223633D0)) (list (list 8.0D0 930.6481323242188D0 0.01650928147137165D0 2.69877552986145D0)) (list (list 8.0D0 930.744873046875D0 0.014744308777153492D0 2.7112698554992676D0)) (list (list 8.0D0 931.5756225585938D0 0.012794774025678635D0 2.723764181137085D0)) (list (list 8.0D0 932.7326049804688D0 0.01133479829877615D0 2.7362585067749024D0)) (list (list 8.0D0 932.9091186523438D0 0.010943751782178879D0 2.7487528324127198D0)) (list (list 8.0D0 931.896240234375D0 0.01157177984714508D0 2.761247158050537D0)) (list (list 8.0D0 930.970458984375D0 0.012579821981489659D0 2.7737414836883545D0)) (list (list 8.0D0 931.1702880859375D0 0.01323753409087658D0 2.786235809326172D0)) (list (list 8.0D0 931.8294677734375D0 0.013747736811637879D0 2.7987301349639893D0)) (list (list 8.0D0 932.0707397460938D0 0.014653126709163189D0 2.8112244606018067D0)) (list (list 8.0D0 931.7426147460938D0 0.016131026670336724D0 2.823718786239624D0)) (list (list 8.0D0 931.272216796875D0 0.017951952293515206D0 2.8362131118774414D0)) (list (list 8.0D0 931.057861328125D0 0.019550977274775505D0 2.848707437515259D0)) (list (list 8.0D0 931.2373046875D0 0.020275769755244255D0 2.861201763153076D0)) (list (list 8.0D0 931.7735595703125D0 0.019829757511615753D0 2.8736960887908936D0)) (list (list 8.0D0 932.3759765625D0 0.018552912399172783D0 2.886190414428711D0)) (list (list 8.0D0 932.7191772460938D0 0.01708570495247841D0 2.8986847400665283D0)) (list (list 8.0D0 932.8716430664063D0 0.015962056815624237D0 2.9111790657043457D0)) (list (list 8.0D0 933.0399169921875D0 0.015618429519236088D0 2.923673391342163D0)) (list (list 8.0D0 932.9758911132813D0 0.016477152705192566D0 2.9361677169799805D0)) (list (list 8.0D0 932.5135498046875D0 0.018525179475545883D0 2.948662042617798D0)) (list (list 8.0D0 932.1023559570313D0 0.02103527821600437D0 2.9611563682556153D0)) (list (list 8.0D0 932.1297607421875D0 0.023049913346767426D0 2.9736506938934326D0)) (list (list 8.0D0 932.3792724609375D0 0.024280527606606484D0 2.98614501953125D0)) (list (list 8.0D0 932.6298217773438D0 0.025128182023763657D0 2.9986393451690674D0)) (list (list 8.0D0 932.7457885742188D0 0.026262357831001282D0 3.0111336708068848D0)) (list (list 8.0D0 932.5462646484375D0 0.028245840221643448D0 3.0236282348632813D0)) (list (list 8.0D0 932.0674438476563D0 0.031207652762532234D0 3.0361225605010987D0)) (list (list 8.0D0 931.5770874023438D0 0.03468107059597969D0 3.048616886138916D0)) (list (list 8.0D0 931.20068359375D0 0.03780669718980789D0 3.0611112117767334D0)) (list (list 8.0D0 930.9306030273438D0 0.03971179947257042D0 3.073605537414551D0)) (list (list 8.0D0 930.9267578125D0 0.039582740515470505D0 3.086099863052368D0)) (list (list 8.0D0 931.450927734375D0 0.03708921745419502D0 3.0985941886901856D0)) (list (list 8.0D0 932.4360961914063D0 0.03319443017244339D0 3.111088514328003D0)) (list (list 8.0D0 933.2066650390625D0 0.029740672558546067D0 3.1235828399658203D0)) (list (list 8.0D0 933.2431030273438D0 0.02790186181664467D0 3.1360771656036377D0)) (list (list 8.0D0 932.7533569335938D0 0.027830466628074646D0 3.148571491241455D0)) (list (list 8.0D0 932.241943359375D0 0.029284898191690445D0 3.1610658168792725D0)) (list (list 8.0D0 931.6868896484375D0 0.03239304572343826D0 3.17356014251709D0)) (list (list 8.0D0 930.9226684570313D0 0.03728614002466202D0 3.1860544681549073D0)) (list (list 8.0D0 930.1843872070313D0 0.04292158782482147D0 3.1985487937927246D0)) (list (list 8.0D0 929.6959228515625D0 0.04715713858604431D0 3.211043119430542D0)) (list (list 8.0D0 929.4063720703125D0 0.0482301339507103D0 3.2235374450683594D0)) (list (list 8.0D0 929.2476196289063D0 0.04580235481262207D0 3.2360317707061768D0)) (list (list 8.0D0 929.3294677734375D0 0.040815629065036774D0 3.248526096343994D0)) (list (list 8.0D0 929.8405151367188D0 0.034849897027015686D0 3.2610204219818116D0)) (list (list 8.0D0 930.6618041992188D0 0.029604695737361908D0 3.273514747619629D0)) (list (list 8.0D0 931.3508911132813D0 0.026156064122915268D0 3.2860090732574463D0)) (list (list 8.0D0 931.6546630859375D0 0.024595841765403748D0 3.2985033988952637D0)) (list (list 8.0D0 931.7225341796875D0 0.02437429688870907D0 3.310997724533081D0)) (list (list 8.0D0 931.7345581054688D0 0.02481081709265709D0 3.3234920501708985D0)) (list (list 8.0D0 931.739501953125D0 0.025376256555318833D0 3.335986375808716D0)) (list (list 8.0D0 931.7963256835938D0 0.02570294216275215D0 3.348480701446533D0)) (list (list 8.0D0 931.985595703125D0 0.0256431233137846D0 3.3609750270843506D0)) (list (list 8.0D0 932.240234375D0 0.025381356477737427D0 3.373469352722168D0)) (list (list 8.0D0 932.3878784179688D0 0.025347162038087845D0 3.3859636783599854D0)) (list (list 8.0D0 932.3079223632813D0 0.02587149664759636D0 3.3984580039978028D0)) (list (list 8.0D0 932.036865234375D0 0.0268010925501585D0 3.41095232963562D0)) (list (list 8.0D0 931.8121337890625D0 0.027509387582540512D0 3.4234466552734375D0)) (list (list 8.0D0 931.9058837890625D0 0.027462303638458252D0 3.435940980911255D0)) (list (list 8.0D0 932.1842041015625D0 0.026774058118462563D0 3.4484353065490723D0)) (list (list 8.0D0 932.252685546875D0 0.02586323767900467D0 3.4609296321868897D0)) (list (list 8.0D0 932.0D0 0.024874020367860794D0 3.473423957824707D0)) (list (list 8.0D0 931.7034301757813D0 0.023689797148108483D0 3.4859182834625244D0)) (list (list 8.0D0 931.6177978515625D0 0.02221875824034214D0 3.498412609100342D0)) (list (list 8.0D0 931.8408203125D0 0.020504793152213097D0 3.510906934738159D0)) (list (list 8.0D0 932.5213012695313D0 0.01861271634697914D0 3.5234012603759766D0)) (list (list 8.0D0 933.612548828125D0 0.016840942203998566D0 3.535895586013794D0)) (list (list 8.0D0 934.4306640625D0 0.01568920537829399D0 3.5483899116516114D0)) (list (list 8.0D0 934.27099609375D0 0.015455232001841069D0 3.5608842372894287D0)) (list (list 8.0D0 933.3671264648438D0 0.016131741926074028D0 3.573378801345825D0)) (list (list 8.0D0 932.65478515625D0 0.017273232340812683D0 3.5858731269836426D0)) (list (list 8.0D0 932.5803833007813D0 0.018406115472316742D0 3.59836745262146D0)) (list (list 8.0D0 932.7409057617188D0 0.019655296579003334D0 3.6108617782592774D0)) (list (list 8.0D0 932.656494140625D0 0.021394137293100357D0 3.6233561038970948D0)) (list (list 8.0D0 932.3983154296875D0 0.02354818396270275D0 3.635850429534912D0)) (list (list 8.0D0 932.2868041992188D0 0.025603312999010086D0 3.6483447551727295D0)) (list (list 8.0D0 932.2801513671875D0 0.02721872180700302D0 3.660839080810547D0)) (list (list 8.0D0 932.181640625D0 0.02838936448097229D0 3.6733334064483643D0)) (list (list 8.0D0 932.1265258789063D0 0.029080640524625778D0 3.6858277320861817D0)) (list (list 8.0D0 932.3445434570313D0 0.029384952038526535D0 3.698322057723999D0)) (list (list 8.0D0 932.5773315429688D0 0.029945548623800278D0 3.7108163833618164D0)) (list (list 8.0D0 932.3931274414063D0 0.03144479915499687D0 3.723310708999634D0)) (list (list 8.0D0 931.7769775390625D0 0.03374984487891197D0 3.735805034637451D0)) (list (list 8.0D0 931.160888671875D0 0.03579970821738243D0 3.7482993602752686D0)) (list (list 8.0D0 930.8958129882813D0 0.03633242845535278D0 3.760793685913086D0)) (list (list 8.0D0 931.0217895507813D0 0.03486922010779381D0 3.7732880115509033D0)) (list (list 8.0D0 931.4551391601563D0 0.03186308965086937D0 3.7857823371887207D0)) (list (list 8.0D0 932.02783203125D0 0.028248218819499016D0 3.798276662826538D0)) (list (list 8.0D0 932.509765625D0 0.024841872975230217D0 3.8107709884643555D0)) (list (list 8.0D0 932.8729858398438D0 0.022016623988747597D0 3.823265314102173D0)) (list (list 8.0D0 933.2841186523438D0 0.019861385226249695D0 3.8357596397399903D0)) (list (list 8.0D0 933.698486328125D0 0.01846374198794365D0 3.8482539653778076D0)) (list (list 8.0D0 933.7996826171875D0 0.01785191148519516D0 3.860748291015625D0)) (list (list 8.0D0 933.51611328125D0 0.017858870327472687D0 3.8732426166534424D0)) (list (list 8.0D0 933.0972290039063D0 0.018275851383805275D0 3.8857369422912598D0)) (list (list 8.0D0 932.7509155273438D0 0.019029634073376656D0 3.898231267929077D0)) (list (list 8.0D0 932.4768676757813D0 0.020096220076084137D0 3.9107255935668946D0)) (list (list 8.0D0 932.2343139648438D0 0.021280668675899506D0 3.923219919204712D0)) (list (list 8.0D0 932.0632934570313D0 0.022300628945231438D0 3.9357142448425293D0)) (list (list 8.0D0 932.0297241210938D0 0.023041000589728356D0 3.9482085704803467D0)) (list (list 8.0D0 932.0882568359375D0 0.023678790777921677D0 3.960702896118164D0)) (list (list 8.0D0 932.093505859375D0 0.02458564192056656D0 3.9731972217559815D0)) (list (list 8.0D0 931.9476318359375D0 0.02603059448301792D0 3.985691547393799D0)) (list (list 8.0D0 931.7151489257813D0 0.02784416824579239D0 3.998185873031616D0)) (list (list 8.0D0 931.6065063476563D0 0.029441580176353455D0 4.010680198669434D0)) (list (list 8.0D0 931.7939453125D0 0.030314235016703606D0 4.02317476272583D0)) (list (list 8.0D0 932.1924438476563D0 0.03052172064781189D0 4.035668849945068D0)) (list (list 8.0D0 932.5443115234375D0 0.03050347790122032D0 4.048163414001465D0)) (list (list 8.0D0 932.6568603515625D0 0.030602453276515007D0 4.060657501220703D0)) (list (list 8.0D0 932.58447265625D0 0.030874481424689293D0 4.0731520652771D0)) (list (list 8.0D0 932.59912109375D0 0.03118523396551609D0 4.085646152496338D0)) (list (list 8.0D0 932.8672485351563D0 0.03147878870368004D0 4.098140716552734D0)) (list (list 8.0D0 933.1820068359375D0 0.031897593289613724D0 4.110634803771973D0)) (list (list 8.0D0 933.2528076171875D0 0.03255249559879303D0 4.123129367828369D0)) (list (list 8.0D0 933.123291015625D0 0.03334512189030647D0 4.135623455047607D0)) (list (list 8.0D0 933.0237426757813D0 0.03415551409125328D0 4.148118019104004D0)) (list (list 8.0D0 932.9693603515625D0 0.03517485037446022D0 4.160612106323242D0)) (list (list 8.0D0 932.773681640625D0 0.036821845918893814D0 4.173106670379639D0)) (list (list 8.0D0 932.3549194335938D0 0.03919410705566406D0 4.185600757598877D0)) (list (list 8.0D0 931.8439331054688D0 0.04173106700181961D0 4.198095321655273D0)) (list (list 8.0D0 931.4967651367188D0 0.0434999018907547D0 4.210589408874512D0)) (list (list 8.0D0 931.5072021484375D0 0.043710801750421524D0 4.223083972930908D0)) (list (list 8.0D0 931.9441528320313D0 0.04220790043473244D0 4.2355780601501465D0)) (list (list 8.0D0 932.635009765625D0 0.03979339823126793D0 4.248072624206543D0)) (list (list 8.0D0 933.1951904296875D0 0.03780621662735939D0 4.260566711425781D0)) (list (list 8.0D0 933.4135131835938D0 0.03696674108505249D0 4.273061275482178D0)) (list (list 8.0D0 933.4513549804688D0 0.03703972324728966D0 4.285555362701416D0)) (list (list 8.0D0 933.4904174804688D0 0.03761730715632439D0 4.2980499267578125D0)) (list (list 8.0D0 933.3326416015625D0 0.038897883147001267D0 4.310544013977051D0)) (list (list 8.0D0 932.8228759765625D0 0.04111003875732422D0 4.323038578033447D0)) (list (list 8.0D0 932.2838134765625D0 0.04350828751921654D0 4.3355326652526856D0)) (list (list 8.0D0 932.2042846679688D0 0.044701967388391495D0 4.348027229309082D0)) (list (list 8.0D0 932.5806884765625D0 0.04448385909199715D0 4.36052131652832D0)) (list (list 8.0D0 932.8883056640625D0 0.04426879808306694D0 4.373015880584717D0)) (list (list 8.0D0 932.7543334960938D0 0.04529217258095741D0 4.385509967803955D0)) (list (list 8.0D0 932.326171875D0 0.04740424081683159D0 4.398004531860352D0)) (list (list 8.0D0 932.00732421875D0 0.04936545714735985D0 4.410499095916748D0)) (list (list 8.0D0 931.9478149414063D0 0.050232771784067154D0 4.422993183135986D0)) (list (list 8.0D0 932.0604858398438D0 0.05005490779876709D0 4.435487747192383D0)) (list (list 8.0D0 932.275146484375D0 0.04936095327138901D0 4.447981834411621D0)) (list (list 8.0D0 932.5166015625D0 0.048649027943611145D0 4.460476398468018D0)) (list (list 8.0D0 932.7173461914063D0 0.048124317079782486D0 4.472970485687256D0)) (list (list 8.0D0 932.8453369140625D0 0.04777742549777031D0 4.485465049743652D0)) (list (list 8.0D0 932.8646240234375D0 0.04760552942752838D0 4.497959136962891D0)) (list (list 8.0D0 932.7511596679688D0 0.04770414158701897D0 4.510453701019287D0)) (list (list 8.0D0 932.5628051757813D0 0.04809992015361786D0 4.522947788238525D0)) (list (list 8.0D0 932.418701171875D0 0.04863792657852173D0 4.535442352294922D0)) (list (list 8.0D0 932.402587890625D0 0.049077440053224564D0 4.54793643951416D0)) (list (list 8.0D0 932.5040283203125D0 0.04928465187549591D0 4.560431003570557D0)) (list (list 8.0D0 932.628173828125D0 0.049311526119709015D0 4.572925090789795D0)) (list (list 8.0D0 932.663818359375D0 0.04931047186255455D0 4.585419654846191D0)) (list (list 8.0D0 932.5551147460938D0 0.0494065135717392D0 4.59791374206543D0)) (list (list 8.0D0 932.3743896484375D0 0.049597837030887604D0 4.610408306121826D0)) (list (list 8.0D0 932.295166015625D0 0.04976067319512367D0 4.6229023933410645D0)) (list (list 8.0D0 932.4050903320313D0 0.04970615729689598D0 4.635396957397461D0)) (list (list 8.0D0 932.612060546875D0 0.049322664737701416D0 4.647891044616699D0)) (list (list 8.0D0 932.787353515625D0 0.048653196543455124D0 4.660385608673096D0)) (list (list 8.0D0 932.8396606445313D0 0.04786711558699608D0 4.672879695892334D0)) (list (list 8.0D0 932.6948852539063D0 0.04711918160319328D0 4.6853742599487305D0)) (list (list 8.0D0 932.3814697265625D0 0.04640382155776024D0 4.697868347167969D0)) (list (list 8.0D0 932.0887451171875D0 0.0455297976732254D0 4.710362911224365D0)) (list (list 8.0D0 931.9740600585938D0 0.04437682405114174D0 4.7228569984436035D0)) (list (list 8.0D0 931.9825439453125D0 0.04317263513803482D0 4.7353515625D0)) (list (list 8.0D0 931.9970092773438D0 0.04238423705101013D0 4.747845649719238D0)) (list (list 8.0D0 932.0313110351563D0 0.04232051223516464D0 4.760340213775635D0)) (list (list 8.0D0 932.1519165039063D0 0.04288959875702858D0 4.772834300994873D0)) (list (list 8.0D0 932.3306274414063D0 0.04369787126779556D0 4.7853288650512695D0)) (list (list 8.0D0 932.4217529296875D0 0.044282667338848114D0 4.797822952270508D0)) (list (list 8.0D0 932.3092651367188D0 0.04431086406111717D0 4.810317516326904D0)) (list (list 8.0D0 932.0980224609375D0 0.04374871030449867D0 4.822811603546143D0)) (list (list 8.0D0 932.045654296875D0 0.042842403054237366D0 4.835306167602539D0)) (list (list 8.0D0 932.2579956054688D0 0.042041923850774765D0 4.847800254821777D0)) (list (list 8.0D0 932.5851440429688D0 0.04187105596065521D0 4.860294818878174D0)) (list (list 8.0D0 932.8530883789063D0 0.04257584735751152D0 4.872788906097412D0)) (list (list 8.0D0 932.9957275390625D0 0.0438276045024395D0 4.885283470153809D0)) (list (list 8.0D0 932.990478515625D0 0.04488076642155647D0 4.897777557373047D0)) (list (list 8.0D0 932.8223266601563D0 0.045140061527490616D0 4.910272121429443D0)) (list (list 8.0D0 932.5450439453125D0 0.044624458998441696D0 4.922766208648682D0)) (list (list 8.0D0 932.303466796875D0 0.04384475201368332D0 4.935260772705078D0)) (list (list 8.0D0 932.2518310546875D0 0.043340012431144714D0 4.947755336761475D0)) (list (list 8.0D0 932.4014892578125D0 0.043421562761068344D0 4.960249423980713D0)) (list (list 8.0D0 932.6046752929688D0 0.04409147799015045D0 4.972743988037109D0)) (list (list 8.0D0 932.6974487304688D0 0.04503027722239494D0 4.985238075256348D0)) (list (list 8.0D0 932.62890625D0 0.04573172703385353D0 4.997732639312744D0)) (list (list 8.0D0 932.4887084960938D0 0.045734524726867676D0 5.010226726531982D0)) (list (list 8.0D0 932.40576171875D0 0.04481247067451477D0 5.022721290588379D0)) (list (list 8.0D0 932.4129638671875D0 0.04310912638902664D0 5.035215377807617D0)) (list (list 8.0D0 932.42919921875D0 0.04114047810435295D0 5.047709941864014D0)) (list (list 8.0D0 932.397216796875D0 0.03951891511678696D0 5.060204029083252D0)) (list (list 8.0D0 932.3724975585938D0 0.03857290372252464D0 5.072698593139648D0)) (list (list 8.0D0 932.432861328125D0 0.03821903467178345D0 5.085192680358887D0)) (list (list 8.0D0 932.540771484375D0 0.03818811476230621D0 5.097687244415283D0)) (list (list 8.0D0 932.5912475585938D0 0.038226522505283356D0 5.1101813316345215D0)) (list (list 8.0D0 932.5366821289063D0 0.03814243897795677D0 5.122675895690918D0)) (list (list 8.0D0 932.4157104492188D0 0.037825796753168106D0 5.135169982910156D0)) (list (list 8.0D0 932.2986450195313D0 0.03728986904025078D0 5.147664546966553D0)) (list (list 8.0D0 932.2440795898438D0 0.03665446490049362D0 5.160158634185791D0)) (list (list 8.0D0 932.268798828125D0 0.036106403917074204D0 5.1726531982421875D0)) (list (list 8.0D0 932.3179321289063D0 0.035877205431461334D0 5.185147285461426D0)) (list (list 8.0D0 932.344970703125D0 0.03611857444047928D0 5.197641849517822D0)) (list (list 8.0D0 932.3692626953125D0 0.0367916002869606D0 5.2101359367370606D0)) (list (list 8.0D0 932.3863525390625D0 0.03771127760410309D0 5.222630500793457D0)) (list (list 8.0D0 932.3421020507813D0 0.03869687020778656D0 5.235124588012695D0)) (list (list 8.0D0 932.2716674804688D0 0.03957422450184822D0 5.247619152069092D0)) (list (list 8.0D0 932.3108520507813D0 0.04011361300945282D0 5.26011323928833D0)) (list (list 8.0D0 932.4890747070313D0 0.04012659937143326D0 5.272607803344727D0)) (list (list 8.0D0 932.6328125D0 0.03964616358280182D0 5.285101890563965D0)) (list (list 8.0D0 932.5664672851563D0 0.03895729035139084D0 5.297596454620361D0)) (list (list 8.0D0 932.3599853515625D0 0.03844711557030678D0 5.3100905418396D0)) (list (list 8.0D0 932.284423828125D0 0.038344286382198334D0 5.322585105895996D0)) (list (list 8.0D0 932.4605102539063D0 0.03867540881037712D0 5.335079193115234D0)) (list (list 8.0D0 932.6810913085938D0 0.03944797441363335D0 5.347573757171631D0)) (list (list 8.0D0 932.734375D0 0.04060178995132446D0 5.360067844390869D0)) (list (list 8.0D0 932.6603393554688D0 0.041884031146764755D0 5.372562408447266D0)) (list (list 8.0D0 932.6397094726563D0 0.042954184114933014D0 5.385056495666504D0)) (list (list 8.0D0 932.7283325195313D0 0.04363301023840904D0 5.3975510597229D0)) (list (list 8.0D0 932.7824096679688D0 0.04397911950945854D0 5.410045146942139D0)) (list (list 8.0D0 932.6622924804688D0 0.044078852981328964D0 5.422539710998535D0)) (list (list 8.0D0 932.44287109375D0 0.04396311566233635D0 5.435033798217773D0)) (list (list 8.0D0 932.3078002929688D0 0.04366146773099899D0 5.44752836227417D0)) (list (list 8.0D0 932.3016967773438D0 0.04330161213874817D0 5.460022449493408D0)) (list (list 8.0D0 932.3550415039063D0 0.04298943281173706D0 5.472517013549805D0)) (list (list 8.0D0 932.4444580078125D0 0.04267636314034462D0 5.485011100769043D0)) (list (list 8.0D0 932.5482788085938D0 0.04225759953260422D0 5.4975056648254395D0)) (list (list 8.0D0 932.5662841796875D0 0.04175589606165886D0 5.510000228881836D0)) (list (list 8.0D0 932.4431762695313D0 0.0412919707596302D0 5.522494316101074D0)) (list (list 8.0D0 932.2642211914063D0 0.040881574153900147D0 5.534988880157471D0)) (list (list 8.0D0 932.1746826171875D0 0.040391575545072556D0 5.547482967376709D0)) (list (list 8.0D0 932.2426147460938D0 0.039738770574331284D0 5.5599775314331055D0)) (list (list 8.0D0 932.4461059570313D0 0.03898411989212036D0 5.572471618652344D0)) (list (list 8.0D0 932.6907958984375D0 0.03821995481848717D0 5.58496618270874D0)) (list (list 8.0D0 932.8558959960938D0 0.037534624338150024D0 5.5974602699279785D0)) (list (list 8.0D0 932.8617553710938D0 0.03698553144931793D0 5.609954833984375D0)) (list (list 8.0D0 932.6889038085938D0 0.036641985177993774D0 5.622448921203613D0)) (list (list 8.0D0 932.3970947265625D0 0.03660529851913452D0 5.63494348526001D0)) (list (list 8.0D0 932.12890625D0 0.036920685321092606D0 5.647437572479248D0)) (list (list 8.0D0 932.0137329101563D0 0.037450484931468964D0 5.6599321365356445D0)) (list (list 8.0D0 932.0620727539063D0 0.037875402718782425D0 5.672426223754883D0)) (list (list 8.0D0 932.1761474609375D0 0.03791458159685135D0 5.684920787811279D0)) (list (list 8.0D0 932.2156982421875D0 0.037492312490940094D0 5.697414875030518D0)) (list (list 8.0D0 932.0571899414063D0 0.03674185276031494D0 5.709909439086914D0)) (list (list 8.0D0 931.7413940429688D0 0.03589768707752228D0 5.722403526306152D0)) (list (list 8.0D0 931.5296020507813D0 0.035168010741472244D0 5.734898090362549D0)) (list (list 8.0D0 931.6781005859375D0 0.03471734747290611D0 5.747392177581787D0)) (list (list 8.0D0 932.1600341796875D0 0.03482409194111824D0 5.759886741638184D0)) (list (list 8.0D0 932.6551513671875D0 0.03578983247280121D0 5.772380828857422D0)) (list (list 8.0D0 932.8524169921875D0 0.0376061387360096D0 5.784875392913818D0)) (list (list 8.0D0 932.6895751953125D0 0.03983428701758385D0 5.797369480133057D0)) (list (list 8.0D0 932.3935546875D0 0.04188936948776245D0 5.809864044189453D0)) (list (list 8.0D0 932.2552490234375D0 0.043341346085071564D0 5.822358131408691D0)) (list (list 8.0D0 932.4078979492188D0 0.044184181839227676D0 5.834852695465088D0)) (list (list 8.0D0 932.75390625D0 0.04478156194090843D0 5.847346782684326D0)) (list (list 8.0D0 933.0408325195313D0 0.04552912339568138D0 5.859841346740723D0)) (list (list 8.0D0 933.0706176757813D0 0.04654286801815033D0 5.872335433959961D0)) (list (list 8.0D0 932.8857421875D0 0.04765602946281433D0 5.884829998016357D0)) (list (list 8.0D0 932.6509399414063D0 0.04851803556084633D0 5.897324085235596D0)) (list (list 8.0D0 932.4287719726563D0 0.048897482454776764D0 5.909818649291992D0)) (list (list 8.0D0 932.2012939453125D0 0.04886754974722862D0 5.9223127365112305D0)) (list (list 8.0D0 932.0438842773438D0 0.04870041832327843D0 5.934807300567627D0)) (list (list 8.0D0 932.0719604492188D0 0.04859069734811783D0 5.947301387786865D0)) (list (list 8.0D0 932.2417602539063D0 0.048673439770936966D0 5.959795951843262D0)) (list (list 8.0D0 932.3883056640625D0 0.04904383793473244D0 5.9722900390625D0)) (list (list 8.0D0 932.4375D0 0.049597203731536865D0 5.9847846031188965D0)) (list (list 8.0D0 932.4241333007813D0 0.050008464604616165D0 5.997278690338135D0)) (list (list 8.0D0 932.3842163085938D0 0.05006614327430725D0 6.009773254394531D0)) (list (list 8.0D0 932.3418579101563D0 0.04994356632232666D0 6.0222673416137695D0)) (list (list 8.0D0 932.350341796875D0 0.04995597526431084D0 6.034761905670166D0)) (list (list 8.0D0 932.44384765625D0 0.05019301921129227D0 6.0472564697265625D0)) (list (list 8.0D0 932.5657958984375D0 0.05055369809269905D0 6.059750556945801D0)) (list (list 8.0D0 932.6260375976563D0 0.05096928030252457D0 6.072245121002197D0)) (list (list 8.0D0 932.5740356445313D0 0.0513894185423851D0 6.0847392082214356D0)) (list (list 8.0D0 932.3925170898438D0 0.051746126264333725D0 6.097233772277832D0)) (list (list 8.0D0 932.1407470703125D0 0.051998693495988846D0 6.10972785949707D0)) (list (list 8.0D0 931.972900390625D0 0.05209416523575783D0 6.122222423553467D0)) (list (list 8.0D0 932.0054931640625D0 0.051905397325754166D0 6.134716510772705D0)) (list (list 8.0D0 932.1864013671875D0 0.05138980969786644D0 6.147211074829102D0)) (list (list 8.0D0 932.3526000976563D0 0.050699710845947266D0 6.15970516204834D0)) (list (list 8.0D0 932.3793334960938D0 0.05005871504545212D0 6.172199726104736D0)) (list (list 8.0D0 932.2865600585938D0 0.04959125816822052D0 6.184693813323975D0)) (list (list 8.0D0 932.1768798828125D0 0.04924243688583374D0 6.197188377380371D0)) (list (list 8.0D0 932.10009765625D0 0.04894477501511574D0 6.209682464599609D0)) (list (list 8.0D0 932.0602416992188D0 0.048742108047008514D0 6.222177028656006D0)) (list (list 8.0D0 932.0948486328125D0 0.04867080971598625D0 6.234671115875244D0)) (list (list 8.0D0 932.2283935546875D0 0.04865878447890282D0 6.247165679931641D0)) (list (list 8.0D0 932.4133911132813D0 0.04868464171886444D0 6.259659767150879D0)) (list (list 8.0D0 932.570068359375D0 0.048860978335142136D0 6.272154331207275D0)) (list (list 8.0D0 932.6351928710938D0 0.04927763342857361D0 6.284648418426514D0)) (list (list 8.0D0 932.5814819335938D0 0.04986514896154404D0 6.29714298248291D0)) (list (list 8.0D0 932.457763671875D0 0.050471216440200806D0 6.309637069702148D0)) (list (list 8.0D0 932.351806640625D0 0.0510248988866806D0 6.322131633758545D0)) (list (list 8.0D0 932.2969360351563D0 0.05161696672439575D0 6.334625720977783D0)) (list (list 8.0D0 932.2665405273438D0 0.05244569852948189D0 6.34712028503418D0)) (list (list 8.0D0 932.2448120117188D0 0.053621403872966766D0 6.359614372253418D0)) (list (list 8.0D0 932.2529907226563D0 0.055037397891283035D0 6.3721089363098145D0)) (list (list 8.0D0 932.315185546875D0 0.056428663432598114D0 6.384603023529053D0)) (list (list 8.0D0 932.4052124023438D0 0.05752180889248848D0 6.397097587585449D0)) (list (list 8.0D0 932.46240234375D0 0.05815047025680542D0 6.4095916748046875D0)) (list (list 8.0D0 932.4324340820313D0 0.05832548812031746D0 6.422086238861084D0)) (list (list 8.0D0 932.3159790039063D0 0.05822985991835594D0 6.434580326080322D0)) (list (list 8.0D0 932.18505859375D0 0.05813731253147125D0 6.447074890136719D0)) (list (list 8.0D0 932.1366577148438D0 0.05824257433414459D0 6.459568977355957D0)) (list (list 8.0D0 932.1742553710938D0 0.058544568717479706D0 6.4720635414123535D0)) (list (list 8.0D0 932.1987915039063D0 0.058891814202070236D0 6.484557628631592D0)) (list (list 8.0D0 932.1348266601563D0 0.059152357280254364D0 6.497052192687988D0)) (list (list 8.0D0 932.0209350585938D0 0.05929098278284073D0 6.509546279907227D0)) (list (list 8.0D0 931.9392700195313D0 0.05925464257597923D0 6.522040843963623D0)) (list (list 8.0D0 931.912353515625D0 0.05887169763445854D0 6.534534931182861D0)) (list (list 8.0D0 931.8887939453125D0 0.057875871658325195D0 6.547029495239258D0)) (list (list 8.0D0 931.8053588867188D0 0.05600537359714508D0 6.559523582458496D0)) (list (list 8.0D0 931.6223754882813D0 0.053137362003326416D0 6.572018146514893D0)) (list (list 8.0D0 931.34130859375D0 0.04932412877678871D0 6.584512233734131D0)) (list (list 8.0D0 931.025390625D0 0.04473382979631424D0 6.597006797790527D0)) (list (list 8.0D0 930.8075561523438D0 0.03950057551264763D0 6.609501361846924D0)) (list (list 8.0D0 930.8621826171875D0 0.033604398369789124D0 6.621995449066162D0)) (list (list 8.0D0 931.3377075195313D0 0.027065826579928398D0 6.634490013122559D0)) (list (list 8.0D0 932.2379760742188D0 0.0203899834305048D0 6.646984100341797D0)) (list (list 8.0D0 933.2088012695313D0 0.014528140425682068D0 6.659478664398193D0)) (list (list 8.0D0 933.700927734375D0 0.010189339518547058D0 6.671972751617432D0)) (list (list 8.0D0 933.5327758789063D0 0.007381933741271496D0 6.684467315673828D0)) (list (list 8.0D0 933.2114868164063D0 0.005626440979540348D0 6.696961402893066D0)) (list (list 8.0D0 933.3529052734375D0 0.004455944057554007D0 6.709455966949463D0)) (list (list 8.0D0 933.6880493164063D0 0.0036908122710883618D0 6.721950054168701D0)) (list (list 8.0D0 933.572021484375D0 0.0032423746306449175D0 6.734444618225098D0)) (list (list 8.0D0 932.9373779296875D0 0.002978731645271182D0 6.746938705444336D0)) (list (list 8.0D0 932.2860107421875D0 0.0027764705009758473D0 6.759433269500732D0)) (list (list 8.0D0 931.9763793945313D0 0.0025870404206216336D0 6.771927356719971D0)) (list (list 8.0D0 931.9585571289063D0 0.002429722575470805D0 6.784421920776367D0)) (list (list 8.0D0 931.9584350585938D0 0.0023162534926086665D0 6.7969160079956055D0)) (list (list 8.0D0 931.744384765625D0 0.0022178138606250286D0 6.809410572052002D0)) (list (list 8.0D0 931.3321533203125D0 0.0020942974369972945D0 6.82190465927124D0)) (list (list 8.0D0 930.9276733398438D0 0.0019316739635542036D0 6.834399223327637D0)) (list (list 8.0D0 930.7390747070313D0 0.001749856281094253D0 6.846893310546875D0)) (list (list 8.0D0 930.8472900390625D0 0.00157691549975425D0 6.8593878746032715D0)) (list (list 8.0D0 931.115478515625D0 0.0014219668228179217D0 6.87188196182251D0)) (list (list 8.0D0 931.2794189453125D0 0.0012772082118317485D0 6.884376525878906D0)) (list (list 8.0D0 931.1832885742188D0 0.0011409593280404807D0 6.8968706130981445D0)) (list (list 8.0D0 930.8839721679688D0 0.0010229627368971706D0 6.909365177154541D0)) (list (list 8.0D0 930.5367431640625D0 9.275536867789924D-4 6.921859264373779D0)) (list (list 8.0D0 930.3019409179688D0 8.463943959213793D-4 6.934353828430176D0)) (list (list 8.0D0 930.27197265625D0 7.68604630138725D-4 6.946847915649414D0)) (list (list 8.0D0 930.4235229492188D0 6.904174224473536D-4 6.9593424797058106D0)) (list (list 8.0D0 930.5806884765625D0 6.130307447165251D-4 6.971836566925049D0)) (list (list 8.0D0 930.5441284179688D0 5.36993145942688D-4 6.984331130981445D0)) (list (list 8.0D0 930.3016967773438D0 4.6182770165614784D-4 6.996825218200684D0)) (list (list 8.0D0 930.0891723632813D0 3.8851346471346915D-4 7.00931978225708D0)) (list (list 8.0D0 930.1132202148438D0 3.190846764482558D-4 7.021813869476318D0)) (list (list 8.0D0 930.3438110351563D0 2.5538509362377227D-4 7.034308433532715D0)) (list (list 8.0D0 930.5806884765625D0 1.9847376097459346D-4 7.046802520751953D0)) (list (list 8.0D0 930.6429443359375D0 1.491499861003831D-4 7.05929708480835D0)) (list (list 8.0D0 930.5090942382813D0 1.0788688814500347D-4 7.071791172027588D0)) (list (list 8.0D0 930.4913940429688D0 7.425259536830709D-5 7.084285736083984D0)) (list (list 8.0D0 931.361328125D0 4.797241490450688D-5 7.096779823303223D0)) (list (list 8.0D0 931.361328125D0 0.0D0 7.109274387359619D0)) (list (list 9.0D0 6980.3876953125D0 3.651224324130453D-5 0.01249433122575283D0)) (list (list 9.0D0 7009.98046875D0 5.3221960115479305D-5 0.02498866245150566D0)) (list (list 9.0D0 7021.76953125D0 6.348425085889176D-5 0.03748299181461334D0)) (list (list 9.0D0 7021.53515625D0 1.35375332320109D-4 0.04997732490301132D0)) (list (list 9.0D0 6985.81103515625D0 8.950208430178464D-4 0.062471654266119D0)) (list (list 9.0D0 6981.74072265625D0 8.061430417001247D-4 0.07496598362922669D0)) (list (list 9.0D0 6979.31640625D0 7.030571578070521D-4 0.08746031671762467D0)) (list (list 9.0D0 6985.1845703125D0 7.770355441607535D-4 0.09995464980602265D0)) (list (list 9.0D0 6999.38720703125D0 0.0028917419258505106D0 0.124943308532238D0)) (list (list 9.0D0 6999.6416015625D0 0.003126039868220687D0 0.137437641620636D0)) (list (list 9.0D0 7000.18212890625D0 0.002947515808045864D0 0.14993196725845337D0)) (list (list 9.0D0 7000.9951171875D0 0.002489806152880192D0 0.16242630779743195D0)) (list (list 9.0D0 7002.86865234375D0 0.002097153337672353D0 0.17492063343524933D0)) (list (list 9.0D0 7003.04150390625D0 0.0021104670595377684D0 0.1874149590730667D0)) (list (list 9.0D0 6981.251953125D0 0.0021983247715979815D0 0.1999092996120453D0)) (list (list 9.0D0 6990.6455078125D0 0.0035930336453020573D0 0.21240362524986267D0)) (list (list 9.0D0 6990.05712890625D0 0.004125774838030338D0 0.22489796578884125D0)) (list (list 9.0D0 6990.453125D0 0.003936962690204382D0 0.23739229142665863D0)) (list (list 9.0D0 6991.27978515625D0 0.003426703391596675D0 0.249886617064476D0)) (list (list 9.0D0 6992.05712890625D0 0.002819725312292576D0 0.2623809576034546D0)) (list (list 9.0D0 6992.55224609375D0 0.0021297442726790905D0 0.274875283241272D0)) (list (list 9.0D0 6992.751953125D0 0.0013604218838736415D0 0.28736960887908936D0)) (list (list 9.0D0 7005.357421875D0 7.064852979965508D-4 0.29986393451690674D0)) (list (list 9.0D0 7008.96533203125D0 5.536022363230586D-4 0.3123582899570465D0)) (list (list 9.0D0 7003.1240234375D0 4.650544433388859D-4 0.3248526155948639D0)) (list (list 9.0D0 6993.9921875D0 5.928781465627253D-4 0.3373469412326813D0)) (list (list 9.0D0 6989.55126953125D0 5.572771187871695D-4 0.34984126687049866D0)) (list (list 9.0D0 6985.865234375D0 4.84722841065377D-4 0.36233559250831604D0)) (list (list 9.0D0 7010.21044921875D0 5.222029867582023D-4 0.3748299181461334D0)) (list (list 9.0D0 7001.71923828125D0 9.835731470957399D-4 0.3873242437839508D0)) (list (list 9.0D0 6998.2919921875D0 0.0018358116503804923D0 0.3998185992240906D0)) (list (list 9.0D0 6995.2265625D0 0.0027840028051286936D0 0.41231292486190796D0)) (list (list 9.0D0 6993.53857421875D0 0.003621591255068779D0 0.42480725049972534D0)) (list (list 9.0D0 6993.1748046875D0 0.00408556591719389D0 0.4373015761375427D0)) (list (list 9.0D0 6993.70947265625D0 0.004076356068253517D0 0.4497959315776825D0)) (list (list 9.0D0 6994.5498046875D0 0.003640810726210475D0 0.4622902572154999D0)) (list (list 9.0D0 6994.71728515625D0 0.002965926192700863D0 0.47478458285331726D0)) (list (list 9.0D0 6994.24462890625D0 0.00234881485812366D0 0.48727890849113465D0)) (list (list 9.0D0 6994.15869140625D0 0.001975327730178833D0 0.499773234128952D0)) (list (list 9.0D0 6994.927734375D0 0.0017873512115329504D0 0.5122675895690918D0)) (list (list 9.0D0 6996.3046875D0 0.001668225391767919D0 0.5247619152069092D0)) (list (list 9.0D0 6996.7236328125D0 0.0016883333446457982D0 0.5372562408447266D0)) (list (list 9.0D0 6995.05224609375D0 0.0019590489100664854D0 0.549750566482544D0)) (list (list 9.0D0 6990.6923828125D0 0.0025311398785561323D0 0.5622448921203613D0)) (list (list 9.0D0 6988.18408203125D0 0.0030990256927907467D0 0.5747392177581787D0)) (list (list 9.0D0 6988.12939453125D0 0.0031713820062577725D0 0.5872335433959961D0)) (list (list 9.0D0 6988.82763671875D0 0.0028542953077703715D0 0.5997278690338135D0)) (list (list 9.0D0 6989.626953125D0 0.002411983674392104D0 0.6122221946716309D0)) (list (list 9.0D0 6990.66455078125D0 0.001984911970794201D0 0.624716579914093D0)) (list (list 9.0D0 6991.6669921875D0 0.001605616183951497D0 0.6372109055519104D0)) (list (list 9.0D0 6991.7734375D0 0.0012823279248550535D0 0.6497052311897278D0)) (list (list 9.0D0 6990.9091796875D0 9.877625852823258D-4 0.6621995568275452D0)) (list (list 9.0D0 6984.14892578125D0 7.820193422958255D-4 0.6746938824653626D0)) (list (list 9.0D0 7005.57568359375D0 8.187788189388812D-4 0.6871882081031799D0)) (list (list 9.0D0 6988.2060546875D0 0.0013989009894430638D0 0.6996825337409973D0)) (list (list 9.0D0 6993.7705078125D0 0.002338619902729988D0 0.7121768593788147D0)) (list (list 9.0D0 6994.19873046875D0 0.003022551303729415D0 0.7246711850166321D0)) (list (list 9.0D0 6994.35009765625D0 0.0033093844540417195D0 0.7371655106544495D0)) (list (list 9.0D0 6994.4873046875D0 0.003310901578515768D0 0.7496598362922669D0)) (list (list 9.0D0 6994.7724609375D0 0.0031969610136002303D0 0.762154221534729D0)) (list (list 9.0D0 6995.10400390625D0 0.002948864595964551D0 0.7746485471725464D0)) (list (list 9.0D0 6994.88720703125D0 0.0023689642548561097D0 0.7871428728103638D0)) (list (list 9.0D0 6990.43603515625D0 0.0014966324670240283D0 0.7996371984481812D0)) (list (list 9.0D0 6985.7861328125D0 8.907625451683998D-4 0.8121315240859985D0)) (list (list 9.0D0 6984.060546875D0 6.042738677933812D-4 0.8246258497238159D0)) (list (list 9.0D0 6982.2685546875D0 6.141213234513998D-4 0.8371201753616333D0)) (list (list 9.0D0 6983.03271484375D0 8.650716627016664D-4 0.8496145009994507D0)) (list (list 9.0D0 6985.93017578125D0 0.001273227040655911D0 0.8621088266372681D0)) (list (list 9.0D0 6987.125D0 0.0015633093426004053D0 0.8746031522750855D0)) (list (list 9.0D0 6986.333984375D0 0.0015022794250398875D0 0.8870974779129028D0)) (list (list 9.0D0 6986.35498046875D0 0.0012960348976776004D0 0.899591863155365D0)) (list (list 9.0D0 6987.19775390625D0 0.0012432343792170287D0 0.9120861887931824D0)) (list (list 9.0D0 6988.9482421875D0 0.0014108472969383002D0 0.9245805144309998D0)) (list (list 9.0D0 6991.009765625D0 0.001636818633414805D0 0.9370748400688171D0)) (list (list 9.0D0 6993.19287109375D0 0.0016772449016571045D0 0.9495691657066345D0)) (list (list 9.0D0 6995.60400390625D0 0.0014689193340018392D0 0.9620634913444519D0)) (list (list 9.0D0 6996.75048828125D0 0.0011817081831395626D0 0.9745578169822693D0)) (list (list 9.0D0 6995.8994140625D0 9.595792507752776D-4 0.9870521426200867D0)) (list (list 9.0D0 6993.83935546875D0 8.413488976657391D-4 0.999546468257904D0)) (list (list 9.0D0 6993.701171875D0 7.231366471387446D-4 1.0120408535003662D0)) (list (list 9.0D0 6995.78857421875D0 5.357591435313225D-4 1.0245351791381836D0)) (list (list 9.0D0 7003.33203125D0 3.6405774881131947D-4 1.037029504776001D0)) (list (list 9.0D0 7004.423828125D0 2.9509031446650624D-4 1.0495238304138184D0)) (list (list 9.0D0 7003.0556640625D0 3.2205451861955226D-4 1.0620181560516358D0)) (list (list 9.0D0 6999.65576171875D0 3.7220801459625364D-4 1.0745124816894532D0)) (list (list 9.0D0 7000.84619140625D0 3.6629350506700576D-4 1.0870068073272705D0)) (list (list 9.0D0 7004.5126953125D0 3.545730432961136D-4 1.099501132965088D0)) (list (list 9.0D0 7007.7705078125D0 3.758032398764044D-4 1.1119954586029053D0)) (list (list 9.0D0 7007.35498046875D0 3.610777494031936D-4 1.13698410987854D0)) (list (list 9.0D0 6984.07958984375D0 2.7262166258879006D-4 1.1494784355163575D0)) (list (list 9.0D0 6961.89111328125D0 5.577101183007471D-5 1.1744670867919922D0)) (list (list 9.0D0 6961.89111328125D0 0.0D0 1.1869614124298096D0)) (list (list 10.0D0 4210.2939453125D0 7.970207661855966D-5 0.01249433122575283D0)) (list (list 10.0D0 4211.17724609375D0 1.5494618855882436D-4 0.02498866245150566D0)) (list (list 10.0D0 4211.490234375D0 2.6479788357391954D-4 0.03748299181461334D0)) (list (list 10.0D0 4186.23046875D0 3.63624538294971D-4 0.04997732490301132D0)) (list (list 10.0D0 4163.93798828125D0 2.1294083853717894D-4 0.062471654266119D0)) (list (list 10.0D0 4200.91650390625D0 0.0018036734545603395D0 0.07496598362922669D0)) (list (list 10.0D0 4199.63134765625D0 0.0024491455405950547D0 0.08746031671762467D0)) (list (list 10.0D0 4198.13671875D0 0.002626005094498396D0 0.09995464980602265D0)) (list (list 10.0D0 4197.70361328125D0 0.0023268605582416058D0 0.11244898289442063D0)) (list (list 10.0D0 4199.78515625D0 0.0018928232602775097D0 0.124943308532238D0)) (list (list 10.0D0 4201.7470703125D0 0.0019299526466056705D0 0.137437641620636D0)) (list (list 10.0D0 4201.1298828125D0 0.0025518506299704314D0 0.14993196725845337D0)) (list (list 10.0D0 4198.55908203125D0 0.0036124272737652064D0 0.16242630779743195D0)) (list (list 10.0D0 4196.5244140625D0 0.004762499593198299D0 0.17492063343524933D0)) (list (list 10.0D0 4195.142578125D0 0.005604795645922422D0 0.1874149590730667D0)) (list (list 10.0D0 4194.2568359375D0 0.005945347715169191D0 0.1999092996120453D0)) (list (list 10.0D0 4193.77490234375D0 0.005860446952283382D0 0.21240362524986267D0)) (list (list 10.0D0 4193.4931640625D0 0.005630303639918566D0 0.22489796578884125D0)) (list (list 10.0D0 4193.47412109375D0 0.0053977458737790585D0 0.23739229142665863D0)) (list (list 10.0D0 4193.79736328125D0 0.0050459932535886765D0 0.249886617064476D0)) (list (list 10.0D0 4194.26416015625D0 0.0043935286812484265D0 0.2623809576034546D0)) (list (list 10.0D0 4194.7080078125D0 0.003374782856553793D0 0.274875283241272D0)) (list (list 10.0D0 4194.36328125D0 0.002097322605550289D0 0.28736960887908936D0)) (list (list 10.0D0 4207.46142578125D0 0.0011979028349742294D0 0.29986393451690674D0)) (list (list 10.0D0 4186.99267578125D0 8.991272770799696D-4 0.3123582899570465D0)) (list (list 10.0D0 4197.43115234375D0 0.0011033560149371624D0 0.3248526155948639D0)) (list (list 10.0D0 4196.6298828125D0 0.0012650659773498774D0 0.3373469412326813D0)) (list (list 10.0D0 4200.95263671875D0 9.923367761075497D-4 0.34984126687049866D0)) (list (list 10.0D0 4207.3447265625D0 8.966393652372062D-4 0.36233559250831604D0)) (list (list 10.0D0 4207.70361328125D0 0.0012072823010385037D0 0.3748299181461334D0)) (list (list 10.0D0 4203.91064453125D0 0.0020468595903366804D0 0.3873242437839508D0)) (list (list 10.0D0 4200.5771484375D0 0.0034995651803910733D0 0.3998185992240906D0)) (list (list 10.0D0 4198.4228515625D0 0.00512085622176528D0 0.41231292486190796D0)) (list (list 10.0D0 4197.18310546875D0 0.006532490719109774D0 0.42480725049972534D0)) (list (list 10.0D0 4196.638671875D0 0.0076634702272713185D0 0.4373015761375427D0)) (list (list 10.0D0 4196.72802734375D0 0.008616158738732338D0 0.4497959315776825D0)) (list (list 10.0D0 4197.078125D0 0.009386386722326279D0 0.4622902572154999D0)) (list (list 10.0D0 4197.001953125D0 0.009818241000175476D0 0.47478458285331726D0)) (list (list 10.0D0 4196.45166015625D0 0.009877091273665429D0 0.48727890849113465D0)) (list (list 10.0D0 4196.13427734375D0 0.009766561910510064D0 0.499773234128952D0)) (list (list 10.0D0 4196.48779296875D0 0.009683756157755852D0 0.5122675895690918D0)) (list (list 10.0D0 4197.23046875D0 0.009619132615625859D0 0.5247619152069092D0)) (list (list 10.0D0 4197.591796875D0 0.00929851271212101D0 0.5372562408447266D0)) (list (list 10.0D0 4196.89892578125D0 0.008491509594023228D0 0.549750566482544D0)) (list (list 10.0D0 4195.2333984375D0 0.007387844379991293D0 0.5622448921203613D0)) (list (list 10.0D0 4193.85986328125D0 0.0062796203419566155D0 0.5747392177581787D0)) (list (list 10.0D0 4193.52197265625D0 0.005215061362832785D0 0.5872335433959961D0)) (list (list 10.0D0 4193.43505859375D0 0.004290315788239241D0 0.5997278690338135D0)) (list (list 10.0D0 4193.099609375D0 0.0035606937017291785D0 0.6122221946716309D0)) (list (list 10.0D0 4193.2099609375D0 0.002952802460640669D0 0.624716579914093D0)) (list (list 10.0D0 4193.673828125D0 0.002373782219365239D0 0.6372109055519104D0)) (list (list 10.0D0 4193.28466796875D0 0.0018151573603972793D0 0.6497052311897278D0)) (list (list 10.0D0 4191.67578125D0 0.0013093031011521817D0 0.6621995568275452D0)) (list (list 10.0D0 4187.025390625D0 9.83123667538166D-4 0.6746938824653626D0)) (list (list 10.0D0 4208.88720703125D0 9.452030644752085D-4 0.6871882081031799D0)) (list (list 10.0D0 4192.47216796875D0 0.0016957670450210572D0 0.6996825337409973D0)) (list (list 10.0D0 4196.6767578125D0 0.002960922894999385D0 0.7121768593788147D0)) (list (list 10.0D0 4196.818359375D0 0.003971726633608341D0 0.7246711850166321D0)) (list (list 10.0D0 4196.90234375D0 0.004475508350878954D0 0.7371655106544495D0)) (list (list 10.0D0 4196.876953125D0 0.004525595810264349D0 0.7496598362922669D0)) (list (list 10.0D0 4196.87646484375D0 0.004332706332206726D0 0.762154221534729D0)) (list (list 10.0D0 4197.3193359375D0 0.0039606555365026D0 0.7746485471725464D0)) (list (list 10.0D0 4198.453125D0 0.0032737907022237778D0 0.7871428728103638D0)) (list (list 10.0D0 4201.23291015625D0 0.0022192399483174086D0 0.7996371984481812D0)) (list (list 10.0D0 4207.98876953125D0 0.0012816772796213627D0 0.8121315240859985D0)) (list (list 10.0D0 4211.04248046875D0 7.798125734552741D-4 0.8246258497238159D0)) (list (list 10.0D0 4211.93115234375D0 7.200536783784628D-4 0.8371201753616333D0)) (list (list 10.0D0 4209.47119140625D0 0.0010301542934030295D0 0.8496145009994507D0)) (list (list 10.0D0 4193.7333984375D0 0.0017153850058093667D0 0.8621088266372681D0)) (list (list 10.0D0 4195.18603515625D0 0.002416871953755617D0 0.8746031522750855D0)) (list (list 10.0D0 4193.87548828125D0 0.0024800633545964957D0 0.8870974779129028D0)) (list (list 10.0D0 4191.93115234375D0 0.0021678549237549305D0 0.899591863155365D0)) (list (list 10.0D0 4190.5791015625D0 0.0019791165832430125D0 0.9120861887931824D0)) (list (list 10.0D0 4191.17041015625D0 0.0021488312631845475D0 0.9245805144309998D0)) (list (list 10.0D0 4193.3359375D0 0.0026340093463659287D0 0.9370748400688171D0)) (list (list 10.0D0 4195.56103515625D0 0.0031086772214621306D0 0.9495691657066345D0)) (list (list 10.0D0 4196.841796875D0 0.0032079732045531273D0 0.9620634913444519D0)) (list (list 10.0D0 4197.12939453125D0 0.0029287971556186676D0 0.9745578169822693D0)) (list (list 10.0D0 4196.87255859375D0 0.002554714446887374D0 0.9870521426200867D0)) (list (list 10.0D0 4196.49072265625D0 0.002288599032908678D0 0.999546468257904D0)) (list (list 10.0D0 4196.1591796875D0 0.0021016912069171667D0 1.0120408535003662D0)) (list (list 10.0D0 4195.40966796875D0 0.00181886728387326D0 1.0245351791381836D0)) (list (list 10.0D0 4191.3046875D0 0.001338014379143715D0 1.037029504776001D0)) (list (list 10.0D0 4207.6884765625D0 7.013747817836702D-4 1.0495238304138184D0)) (list (list 10.0D0 4208.02734375D0 6.803878932259977D-4 1.0620181560516358D0)) (list (list 10.0D0 4191.6328125D0 0.0011276013683527708D0 1.0745124816894532D0)) (list (list 10.0D0 4195.4736328125D0 0.001238428521901369D0 1.0870068073272705D0)) (list (list 10.0D0 4197.25390625D0 9.933429537340999D-4 1.099501132965088D0)) (list (list 10.0D0 4207.560546875D0 7.985376287251711D-4 1.1119954586029053D0)) (list (list 10.0D0 4208.88623046875D0 8.351246360689402D-4 1.1244897842407227D0)) (list (list 10.0D0 4208.61474609375D0 8.892938494682312D-4 1.13698410987854D0)) (list (list 10.0D0 4210.49853515625D0 0.0010148395085707307D0 1.1494784355163575D0)) (list (list 10.0D0 4208.84765625D0 0.001362524228170514D0 1.1619727611541748D0)) (list (list 10.0D0 4193.55810546875D0 0.0024793329648673535D0 1.1744670867919922D0)) (list (list 10.0D0 4195.8408203125D0 0.0038158020470291376D0 1.1869614124298096D0)) (list (list 10.0D0 4195.82958984375D0 0.004668848589062691D0 1.199455738067627D0)) (list (list 10.0D0 4195.5703125D0 0.004984944127500057D0 1.2119500637054444D0)) (list (list 10.0D0 4195.0263671875D0 0.004876357037574053D0 1.2244443893432618D0)) (list (list 10.0D0 4194.42236328125D0 0.004462334327399731D0 1.236938714981079D0)) (list (list 10.0D0 4194.1376953125D0 0.003839949844405055D0 1.249433159828186D0)) (list (list 10.0D0 4194.1533203125D0 0.003092375351116061D0 1.2619274854660035D0)) (list (list 10.0D0 4194.25341796875D0 0.0022746329195797444D0 1.2744218111038208D0)) (list (list 10.0D0 4194.42626953125D0 0.0014446545392274857D0 1.2869161367416382D0)) (list (list 10.0D0 4194.07666015625D0 7.806322537362576D-4 1.2994104623794556D0)) (list (list 10.0D0 4213.6904296875D0 4.0938836173154414D-4 1.311904788017273D0)) (list (list 10.0D0 4195.54638671875D0 6.98643212672323D-4 1.3243991136550904D0)) (list (list 10.0D0 4199.498046875D0 0.001031179679557681D0 1.3368934392929078D0)) (list (list 10.0D0 4199.6171875D0 0.0011475473875179887D0 1.349387764930725D0)) (list (list 10.0D0 4198.51025390625D0 0.0010816866997629404D0 1.3618820905685425D0)) (list (list 10.0D0 4197.69970703125D0 0.001187749090604484D0 1.3743764162063599D0)) (list (list 10.0D0 4197.8994140625D0 0.001687253126874566D0 1.3868707418441773D0)) (list (list 10.0D0 4198.263671875D0 0.002501266309991479D0 1.3993650674819947D0)) (list (list 10.0D0 4197.7001953125D0 0.003368960227817297D0 1.411859393119812D0)) (list (list 10.0D0 4197.07373046875D0 0.004019819665700197D0 1.4243537187576294D0)) (list (list 10.0D0 4197.119140625D0 0.004247926641255617D0 1.4368480443954468D0)) (list (list 10.0D0 4197.42236328125D0 0.004035910591483116D0 1.4493423700332642D0)) (list (list 10.0D0 4197.203125D0 0.0035089764278382063D0 1.4618366956710816D0)) (list (list 10.0D0 4197.1337890625D0 0.002797597786411643D0 1.474331021308899D0)) (list (list 10.0D0 4199.43798828125D0 0.0020609109196811915D0 1.4868253469467163D0)) (list (list 10.0D0 4202.0576171875D0 0.001575143658556044D0 1.4993196725845337D0)) (list (list 10.0D0 4200.60693359375D0 0.0012065351475030184D0 1.5118141174316407D0)) (list (list 10.0D0 4195.17041015625D0 0.0010280490387231112D0 1.524308443069458D0)) (list (list 10.0D0 4193.5244140625D0 8.662623004056513D-4 1.5368027687072754D0)) (list (list 10.0D0 4195.90283203125D0 6.392469513230026D-4 1.5492970943450928D0)) (list (list 10.0D0 4197.755859375D0 5.410623853094876D-4 1.5617914199829102D0)) (list (list 10.0D0 4196.7578125D0 6.67989777866751D-4 1.5742857456207276D0)) (list (list 10.0D0 4193.56201171875D0 0.0010319588473066688D0 1.586780071258545D0)) (list (list 10.0D0 4192.333984375D0 0.0014579712878912688D0 1.5992743968963623D0)) (list (list 10.0D0 4192.99609375D0 0.00176872662268579D0 1.6117687225341797D0)) (list (list 10.0D0 4194.830078125D0 0.001971899764612317D0 1.624263048171997D0)) (list (list 10.0D0 4196.6767578125D0 0.0021353315096348524D0 1.6367573738098145D0)) (list (list 10.0D0 4197.0263671875D0 0.002185653895139694D0 1.6492516994476319D0)) (list (list 10.0D0 4196.72802734375D0 0.002093670889735222D0 1.6617460250854493D0)) (list (list 10.0D0 4197.39013671875D0 0.00196751207113266D0 1.6742403507232666D0)) (list (list 10.0D0 4198.078125D0 0.001954819308593869D0 1.686734676361084D0)) (list (list 10.0D0 4197.2021484375D0 0.0020241127349436283D0 1.6992290019989014D0)) (list (list 10.0D0 4195.30126953125D0 0.0020452276803553105D0 1.7117233276367188D0)) (list (list 10.0D0 4194.59716796875D0 0.001869410159997642D0 1.7242176532745362D0)) (list (list 10.0D0 4195.3564453125D0 0.0015164637006819249D0 1.7367119789123536D0)) (list (list 10.0D0 4195.955078125D0 0.0011377540649846197D0 1.749206304550171D0)) (list (list 10.0D0 4194.068359375D0 7.834094576537609D-4 1.7617006301879883D0)) (list (list 10.0D0 4184.62158203125D0 5.861754762008786D-4 1.7741949558258057D0)) (list (list 10.0D0 4180.8896484375D0 5.472625489346683D-4 1.7866894006729126D0)) (list (list 10.0D0 4183.556640625D0 4.8732131836004555D-4 1.79918372631073D0)) (list (list 10.0D0 4187.7314453125D0 5.373708554543555D-4 1.8116780519485474D0)) (list (list 10.0D0 4189.07666015625D0 5.749697447754443D-4 1.8241723775863648D0)) (list (list 10.0D0 4188.88720703125D0 4.7250249190256D-4 1.8366667032241822D0)) (list (list 10.0D0 4164.90869140625D0 3.096794243901968D-4 1.8491610288619996D0)) (list (list 10.0D0 4160.97802734375D0 2.2196222562342882D-4 1.861655354499817D0)) (list (list 10.0D0 4162.814453125D0 1.9252086349297315D-4 1.8741496801376343D0)) (list (list 10.0D0 4181.61376953125D0 3.549297107383609D-4 1.8866440057754517D0)) (list (list 10.0D0 4182.26416015625D0 5.394886829890311D-4 1.899138331413269D0)) (list (list 10.0D0 4184.81298828125D0 6.14267133641988D-4 1.9116326570510865D0)) (list (list 10.0D0 4186.40771484375D0 5.626463680528104D-4 1.9241269826889038D0)) (list (list 10.0D0 4186.0234375D0 4.46428544819355D-4 1.9366213083267212D0)) (list (list 10.0D0 4183.80908203125D0 3.849151253234595D-4 1.9491156339645386D0)) (list (list 10.0D0 4182.62255859375D0 4.4576721847988665D-4 1.961609959602356D0)) (list (list 10.0D0 4182.89404296875D0 5.585047183558345D-4 1.9741042852401734D0)) (list (list 10.0D0 4182.38232421875D0 5.972650833427906D-4 1.9865986108779908D0)) (list (list 10.0D0 4179.9052734375D0 5.105609889142215D-4 1.999092936515808D0)) (list (list 10.0D0 4176.296875D0 3.7401565350592137D-4 2.011587381362915D0)) (list (list 10.0D0 4172.0146484375D0 2.9359181644394994D-4 2.0240817070007324D0)) (list (list 10.0D0 4172.7841796875D0 2.3751436674501747D-4 2.03657603263855D0)) (list (list 10.0D0 4198.47119140625D0 3.61724232789129D-4 2.049070358276367D0)) (list (list 10.0D0 4199.7666015625D0 5.355629837140441D-4 2.0615646839141846D0)) (list (list 10.0D0 4202.130859375D0 6.60844030790031D-4 2.074059009552002D0)) (list (list 10.0D0 4203.98974609375D0 7.08982755895704D-4 2.0865533351898194D0)) (list (list 10.0D0 4202.93603515625D0 6.966882501728833D-4 2.0990476608276367D0)) (list (list 10.0D0 4199.0087890625D0 7.216911762952805D-4 2.111541986465454D0)) (list (list 10.0D0 4195.75830078125D0 8.64390458445996D-4 2.1240363121032715D0)) (list (list 10.0D0 4197.09228515625D0 0.0010175921488553286D0 2.136530637741089D0)) (list (list 10.0D0 4198.70458984375D0 0.001355291111394763D0 2.1490249633789063D0)) (list (list 10.0D0 4198.6123046875D0 0.0020654085092246533D0 2.1615192890167237D0)) (list (list 10.0D0 4197.734375D0 0.0031652089674025774D0 2.174013614654541D0)) (list (list 10.0D0 4197.5517578125D0 0.004293820820748806D0 2.1865079402923584D0)) (list (list 10.0D0 4198.3828125D0 0.004975637421011925D0 2.199002265930176D0)) (list (list 10.0D0 4199.1220703125D0 0.005165106616914272D0 2.211496591567993D0)) (list (list 10.0D0 4198.80224609375D0 0.00516415573656559D0 2.2239909172058106D0)) (list (list 10.0D0 4197.65283203125D0 0.005261824931949377D0 2.236485242843628D0)) (list (list 10.0D0 4196.8232421875D0 0.005461423192173243D0 2.2489795684814453D0)) (list (list 10.0D0 4196.580078125D0 0.005630948580801487D0 2.2614738941192627D0)) (list (list 10.0D0 4196.11328125D0 0.00574845913797617D0 2.27396821975708D0)) (list (list 10.0D0 4195.34521484375D0 0.0058325519785285D0 2.2864625453948975D0)) (list (list 10.0D0 4195.0673828125D0 0.005926909856498241D0 2.298956871032715D0)) (list (list 10.0D0 4195.5546875D0 0.006122630089521408D0 2.3114511966705323D0)) (list (list 10.0D0 4196.2685546875D0 0.006464993581175804D0 2.3239455223083496D0)) (list (list 10.0D0 4196.72607421875D0 0.006760170683264732D0 2.336439847946167D0)) (list (list 10.0D0 4197.1044921875D0 0.006739045027643442D0 2.3489341735839844D0))) (list (list (list 10.0D0 4197.72216796875D0 0.0063444385305047035D0 2.3614284992218018D0)) (list (list 10.0D0 4198.2333984375D0 0.005832321476191282D0 2.373922824859619D0)) (list (list 10.0D0 4198.06884765625D0 0.005510049406439066D0 2.3864171504974366D0)) (list (list 10.0D0 4197.45703125D0 0.005468209274113178D0 2.398911476135254D0)) (list (list 10.0D0 4197.09033203125D0 0.005490248557180166D0 2.4114058017730713D0)) (list (list 10.0D0 4196.88134765625D0 0.005321331322193146D0 2.4239001274108887D0)) (list (list 10.0D0 4196.49560546875D0 0.004994747694581747D0 2.436394453048706D0)) (list (list 10.0D0 4196.2509765625D0 0.004756647162139416D0 2.4488887786865235D0)) (list (list 10.0D0 4195.88916015625D0 0.004751028027385473D0 2.461383104324341D0)) (list (list 10.0D0 4194.75732421875D0 0.004879918415099382D0 2.4738776683807373D0)) (list (list 10.0D0 4193.71337890625D0 0.004955669399350882D0 2.4863719940185547D0)) (list (list 10.0D0 4194.30322265625D0 0.004810843151062727D0 2.498866319656372D0)) (list (list 10.0D0 4195.97412109375D0 0.004615691024810076D0 2.5113606452941895D0)) (list (list 10.0D0 4196.8203125D0 0.004497553687542677D0 2.523854970932007D0)) (list (list 10.0D0 4196.0244140625D0 0.004419888835400343D0 2.536349296569824D0)) (list (list 10.0D0 4194.73779296875D0 0.004455178044736385D0 2.5488436222076416D0)) (list (list 10.0D0 4194.15087890625D0 0.004525166470557451D0 2.561337947845459D0)) (list (list 10.0D0 4194.68359375D0 0.004442746751010418D0 2.5738322734832764D0)) (list (list 10.0D0 4196.10302734375D0 0.004143959376960993D0 2.5863265991210938D0)) (list (list 10.0D0 4197.595703125D0 0.0037062715273350478D0 2.598820924758911D0)) (list (list 10.0D0 4198.162109375D0 0.0032427627593278885D0 2.6113152503967285D0)) (list (list 10.0D0 4197.55615234375D0 0.002871220465749502D0 2.623809576034546D0)) (list (list 10.0D0 4196.47412109375D0 0.002639557234942913D0 2.6363039016723633D0)) (list (list 10.0D0 4195.7236328125D0 0.002445729449391365D0 2.6487982273101807D0)) (list (list 10.0D0 4195.66552734375D0 0.0022059003822505474D0 2.661292552947998D0)) (list (list 10.0D0 4195.8505859375D0 0.0019966824911534787D0 2.6737868785858155D0)) (list (list 10.0D0 4195.69873046875D0 0.001957101281732321D0 2.686281204223633D0)) (list (list 10.0D0 4195.20654296875D0 0.002150829415768385D0 2.69877552986145D0)) (list (list 10.0D0 4194.71826171875D0 0.0024876538664102555D0 2.7112698554992676D0)) (list (list 10.0D0 4194.4375D0 0.002736839232966304D0 2.723764181137085D0)) (list (list 10.0D0 4194.5869140625D0 0.002684810431674123D0 2.7362585067749024D0)) (list (list 10.0D0 4194.92822265625D0 0.0023811785504221917D0 2.7487528324127198D0)) (list (list 10.0D0 4194.4736328125D0 0.0021256066393107176D0 2.761247158050537D0)) (list (list 10.0D0 4193.1357421875D0 0.0021453050430864096D0 2.7737414836883545D0)) (list (list 10.0D0 4192.09130859375D0 0.0023025833070278168D0 2.786235809326172D0)) (list (list 10.0D0 4192.6064453125D0 0.0022888220846652985D0 2.7987301349639893D0)) (list (list 10.0D0 4193.34521484375D0 0.002105573657900095D0 2.8112244606018067D0)) (list (list 10.0D0 4193.2734375D0 0.0019304031739011407D0 2.823718786239624D0)) (list (list 10.0D0 4192.81640625D0 0.001863789395429194D0 2.8362131118774414D0)) (list (list 10.0D0 4193.21826171875D0 0.0018691179575398565D0 2.848707437515259D0)) (list (list 10.0D0 4194.47509765625D0 0.0019252931233495474D0 2.861201763153076D0)) (list (list 10.0D0 4195.5146484375D0 0.0020325942896306515D0 2.8736960887908936D0)) (list (list 10.0D0 4195.96435546875D0 0.0021484510507434607D0 2.886190414428711D0)) (list (list 10.0D0 4195.966796875D0 0.002272593090310693D0 2.8986847400665283D0)) (list (list 10.0D0 4195.5966796875D0 0.002439540345221758D0 2.9111790657043457D0)) (list (list 10.0D0 4195.185546875D0 0.0026583452709019184D0 2.923673391342163D0)) (list (list 10.0D0 4195.1943359375D0 0.0029285696800798178D0 2.9361677169799805D0)) (list (list 10.0D0 4195.3818359375D0 0.0032832699362188578D0 2.948662042617798D0)) (list (list 10.0D0 4195.43798828125D0 0.003694601822644472D0 2.9611563682556153D0)) (list (list 10.0D0 4195.23388671875D0 0.004060029052197933D0 2.9736506938934326D0)) (list (list 10.0D0 4194.5322265625D0 0.0043458957225084305D0 2.98614501953125D0)) (list (list 10.0D0 4193.33984375D0 0.004571324680000544D0 2.9986393451690674D0)) (list (list 10.0D0 4192.48486328125D0 0.004620480816811323D0 3.0111336708068848D0)) (list (list 10.0D0 4193.29541015625D0 0.004339712206274271D0 3.0236282348632813D0)) (list (list 10.0D0 4195.19775390625D0 0.004049896728247404D0 3.0361225605010987D0)) (list (list 10.0D0 4196.42041015625D0 0.004135096911340952D0 3.048616886138916D0)) (list (list 10.0D0 4196.52978515625D0 0.004487927071750164D0 3.0611112117767334D0)) (list (list 10.0D0 4196.22265625D0 0.004751125816255808D0 3.073605537414551D0)) (list (list 10.0D0 4196.10009765625D0 0.0046611656434834D0 3.086099863052368D0)) (list (list 10.0D0 4196.18798828125D0 0.0043079131282866D0 3.0985941886901856D0)) (list (list 10.0D0 4196.5048828125D0 0.003984049428254366D0 3.111088514328003D0)) (list (list 10.0D0 4196.697265625D0 0.003921825904399157D0 3.1235828399658203D0)) (list (list 10.0D0 4196.12255859375D0 0.004197041969746351D0 3.1360771656036377D0)) (list (list 10.0D0 4195.09619140625D0 0.004712541121989489D0 3.148571491241455D0)) (list (list 10.0D0 4194.66650390625D0 0.005072298925369978D0 3.1610658168792725D0)) (list (list 10.0D0 4195.36962890625D0 0.004888774827122688D0 3.17356014251709D0)) (list (list 10.0D0 4195.869140625D0 0.00431722542271018D0 3.1860544681549073D0)) (list (list 10.0D0 4195.31298828125D0 0.0038225206080824137D0 3.1985487937927246D0)) (list (list 10.0D0 4195.18505859375D0 0.003624123753979802D0 3.211043119430542D0)) (list (list 10.0D0 4197.0107421875D0 0.0035955344792455435D0 3.2235374450683594D0)) (list (list 10.0D0 4198.2060546875D0 0.00376300560310483D0 3.2360317707061768D0)) (list (list 10.0D0 4197.4921875D0 0.004112275782972574D0 3.248526096343994D0)) (list (list 10.0D0 4195.71435546875D0 0.004686536733061075D0 3.2610204219818116D0)) (list (list 10.0D0 4194.1162109375D0 0.005307488609105349D0 3.273514747619629D0)) (list (list 10.0D0 4193.08837890625D0 0.005643339827656746D0 3.2860090732574463D0)) (list (list 10.0D0 4193.5302734375D0 0.0053977700881659985D0 3.2985033988952637D0)) (list (list 10.0D0 4195.26025390625D0 0.004733924753963947D0 3.310997724533081D0)) (list (list 10.0D0 4196.95751953125D0 0.003968370147049427D0 3.3234920501708985D0)) (list (list 10.0D0 4198.68408203125D0 0.002987481886520982D0 3.335986375808716D0)) (list (list 10.0D0 4206.251953125D0 0.0020033225882798434D0 3.348480701446533D0)) (list (list 10.0D0 4207.212890625D0 0.0015300337690860033D0 3.3609750270843506D0)) (list (list 10.0D0 4185.57177734375D0 0.0018436696846038104D0 3.373469352722168D0)) (list (list 10.0D0 4192.69873046875D0 0.002199949696660042D0 3.3859636783599854D0)) (list (list 10.0D0 4196.01416015625D0 0.0020767985843122006D0 3.3984580039978028D0)) (list (list 10.0D0 4197.19921875D0 0.0018744741100817919D0 3.41095232963562D0)) (list (list 10.0D0 4195.6650390625D0 0.002006096765398979D0 3.4234466552734375D0)) (list (list 10.0D0 4193.20263671875D0 0.0025371466763317585D0 3.435940980911255D0)) (list (list 10.0D0 4194.38525390625D0 0.0029768613167107106D0 3.4484353065490723D0)) (list (list 10.0D0 4196.30419921875D0 0.0032994358334690333D0 3.4609296321868897D0)) (list (list 10.0D0 4196.7421875D0 0.0035388944670557976D0 3.473423957824707D0)) (list (list 10.0D0 4195.86669921875D0 0.0035556114744395018D0 3.4859182834625244D0)) (list (list 10.0D0 4194.873046875D0 0.0032147380989044905D0 3.498412609100342D0)) (list (list 10.0D0 4194.1552734375D0 0.002475035609677434D0 3.510906934738159D0)) (list (list 10.0D0 4187.1025390625D0 0.0015960360178723932D0 3.5234012603759766D0)) (list (list 10.0D0 4206.44482421875D0 0.0013093805173411966D0 3.535895586013794D0)) (list (list 10.0D0 4201.96142578125D0 0.0016542644007131458D0 3.5483899116516114D0)) (list (list 10.0D0 4192.908203125D0 0.002894452540203929D0 3.5608842372894287D0)) (list (list 10.0D0 4193.0947265625D0 0.003733639605343342D0 3.573378801345825D0)) (list (list 10.0D0 4192.23193359375D0 0.004414200782775879D0 3.5858731269836426D0)) (list (list 10.0D0 4190.93408203125D0 0.005283600650727749D0 3.59836745262146D0)) (list (list 10.0D0 4190.3994140625D0 0.00640912726521492D0 3.6108617782592774D0)) (list (list 10.0D0 4191.404296875D0 0.007474307902157307D0 3.6233561038970948D0)) (list (list 10.0D0 4193.0751953125D0 0.008276455104351044D0 3.635850429534912D0)) (list (list 10.0D0 4194.05810546875D0 0.00859138648957014D0 3.6483447551727295D0)) (list (list 10.0D0 4194.19287109375D0 0.008198069408535958D0 3.660839080810547D0)) (list (list 10.0D0 4194.15625D0 0.007176999468356371D0 3.6733334064483643D0)) (list (list 10.0D0 4194.54150390625D0 0.0058875903487205506D0 3.6858277320861817D0)) (list (list 10.0D0 4195.39111328125D0 0.004780184011906385D0 3.698322057723999D0)) (list (list 10.0D0 4197.2431640625D0 0.00408043572679162D0 3.7108163833618164D0)) (list (list 10.0D0 4199.69287109375D0 0.00401169853284955D0 3.723310708999634D0)) (list (list 10.0D0 4200.01806640625D0 0.0045900191180408D0 3.735805034637451D0)) (list (list 10.0D0 4197.62109375D0 0.005577790550887585D0 3.7482993602752686D0)) (list (list 10.0D0 4194.69580078125D0 0.0066730910912156105D0 3.760793685913086D0)) (list (list 10.0D0 4193.78173828125D0 0.0069760228507220745D0 3.7732880115509033D0)) (list (list 10.0D0 4194.29296875D0 0.006274451967328787D0 3.7857823371887207D0)) (list (list 10.0D0 4194.96435546875D0 0.005144503433257341D0 3.798276662826538D0)) (list (list 10.0D0 4194.79443359375D0 0.004066628869622946D0 3.8107709884643555D0)) (list (list 10.0D0 4193.46142578125D0 0.003197809448465705D0 3.823265314102173D0)) (list (list 10.0D0 4191.10546875D0 0.0024723289534449578D0 3.8357596397399903D0)) (list (list 10.0D0 4187.58642578125D0 0.0018399909604340792D0 3.8482539653778076D0)) (list (list 10.0D0 4186.271484375D0 0.0013779307482764125D0 3.860748291015625D0)) (list (list 10.0D0 4187.95947265625D0 0.001209797104820609D0 3.8732426166534424D0)) (list (list 10.0D0 4190.46923828125D0 0.0014579377602785826D0 3.8857369422912598D0)) (list (list 10.0D0 4191.12548828125D0 0.001949294819496572D0 3.898231267929077D0)) (list (list 10.0D0 4191.66357421875D0 0.0025259132962673903D0 3.9107255935668946D0)) (list (list 10.0D0 4192.89501953125D0 0.003051500068977475D0 3.923219919204712D0)) (list (list 10.0D0 4194.291015625D0 0.003388785757124424D0 3.9357142448425293D0)) (list (list 10.0D0 4195.0888671875D0 0.003542944323271513D0 3.9482085704803467D0)) (list (list 10.0D0 4194.61572265625D0 0.003670669160783291D0 3.960702896118164D0)) (list (list 10.0D0 4193.0087890625D0 0.003964206203818321D0 3.9731972217559815D0)) (list (list 10.0D0 4191.71435546875D0 0.004452166613191366D0 3.985691547393799D0)) (list (list 10.0D0 4191.88427734375D0 0.004908021539449692D0 3.998185873031616D0)) (list (list 10.0D0 4192.9443359375D0 0.005208256654441357D0 4.010680198669434D0)) (list (list 10.0D0 4194.06103515625D0 0.005272066220641136D0 4.02317476272583D0)) (list (list 10.0D0 4195.08154296875D0 0.005011373665183783D0 4.035668849945068D0)) (list (list 10.0D0 4195.9287109375D0 0.004537504632025957D0 4.048163414001465D0)) (list (list 10.0D0 4196.2392578125D0 0.004119934048503637D0 4.060657501220703D0)) (list (list 10.0D0 4196.40283203125D0 0.004004507791250944D0 4.0731520652771D0)) (list (list 10.0D0 4197.05419921875D0 0.004332179203629494D0 4.085646152496338D0)) (list (list 10.0D0 4197.43115234375D0 0.005126377567648888D0 4.098140716552734D0)) (list (list 10.0D0 4197.16357421875D0 0.006115250755101442D0 4.110634803771973D0)) (list (list 10.0D0 4197.0888671875D0 0.006836646236479282D0 4.123129367828369D0)) (list (list 10.0D0 4197.40185546875D0 0.007087357342243195D0 4.135623455047607D0)) (list (list 10.0D0 4197.30419921875D0 0.007043888326734304D0 4.148118019104004D0)) (list (list 10.0D0 4196.93359375D0 0.006774982903152704D0 4.160612106323242D0)) (list (list 10.0D0 4197.5595703125D0 0.006133534479886293D0 4.173106670379639D0)) (list (list 10.0D0 4198.7841796875D0 0.005385417491197586D0 4.185600757598877D0)) (list (list 10.0D0 4198.80859375D0 0.004961676429957151D0 4.198095321655273D0)) (list (list 10.0D0 4197.35546875D0 0.00495432922616601D0 4.210589408874512D0)) (list (list 10.0D0 4195.822265625D0 0.00506408279761672D0 4.223083972930908D0)) (list (list 10.0D0 4195.333984375D0 0.004879549611359835D0 4.2355780601501465D0)) (list (list 10.0D0 4195.80810546875D0 0.004369066096842289D0 4.248072624206543D0)) (list (list 10.0D0 4197.42041015625D0 0.0037497731391340494D0 4.260566711425781D0)) (list (list 10.0D0 4198.818359375D0 0.0033809668384492398D0 4.273061275482178D0)) (list (list 10.0D0 4198.294921875D0 0.0033426296431571246D0 4.285555362701416D0)) (list (list 10.0D0 4196.15673828125D0 0.00348353898152709D0 4.2980499267578125D0)) (list (list 10.0D0 4195.42578125D0 0.0033374102786183358D0 4.310544013977051D0)) (list (list 10.0D0 4197.955078125D0 0.0027310955338180065D0 4.323038578033447D0)) (list (list 10.0D0 4200.16259765625D0 0.0021833700593560934D0 4.3355326652526856D0)) (list (list 10.0D0 4199.43701171875D0 0.0018297965871170164D0 4.348027229309082D0)) (list (list 10.0D0 4196.3203125D0 0.0017147085163742304D0 4.36052131652832D0)) (list (list 10.0D0 4194.53564453125D0 0.0016556980554014445D0 4.373015880584717D0)) (list (list 10.0D0 4195.2900390625D0 0.0014694170095026493D0 4.385509967803955D0)) (list (list 10.0D0 4197.97998046875D0 0.0012705788249149919D0 4.398004531860352D0)) (list (list 10.0D0 4200.0166015625D0 0.0011873958865180612D0 4.410499095916748D0)) (list (list 10.0D0 4201.44677734375D0 0.0011750297853723169D0 4.422993183135986D0)) (list (list 10.0D0 4203.2724609375D0 0.001192665658891201D0 4.435487747192383D0)) (list (list 10.0D0 4204.3916015625D0 0.001235813950188458D0 4.447981834411621D0)) (list (list 10.0D0 4203.783203125D0 0.0012785869184881449D0 4.460476398468018D0)) (list (list 10.0D0 4202.025390625D0 0.0013005567016080022D0 4.472970485687256D0)) (list (list 10.0D0 4199.7353515625D0 0.001235932344570756D0 4.485465049743652D0)) (list (list 10.0D0 4196.80078125D0 0.0010682852007448674D0 4.497959136962891D0)) (list (list 10.0D0 4194.0498046875D0 8.825203985907137D-4 4.510453701019287D0)) (list (list 10.0D0 4192.90283203125D0 7.483877707272768D-4 4.522947788238525D0)) (list (list 10.0D0 4191.9716796875D0 6.260162335820496D-4 4.535442352294922D0)) (list (list 10.0D0 4184.13427734375D0 4.964793915860355D-4 4.54793643951416D0)) (list (list 10.0D0 4169.177734375D0 4.646335437428206D-4 4.560431003570557D0)) (list (list 10.0D0 4164.53564453125D0 4.344915214460343D-4 4.572925090789795D0)) (list (list 10.0D0 4162.88720703125D0 3.3911975333467126D-4 4.585419654846191D0)) (list (list 10.0D0 4164.77197265625D0 2.0620942814275623D-4 4.59791374206543D0)) (list (list 10.0D0 4168.43212890625D0 1.2710846203844994D-4 4.610408306121826D0)) (list (list 10.0D0 4170.27734375D0 1.3886547822039575D-4 4.6229023933410645D0)) (list (list 10.0D0 4150.18115234375D0 2.5449402164667845D-4 4.635396957397461D0)) (list (list 10.0D0 4151.630859375D0 3.7017042632214725D-4 4.647891044616699D0)) (list (list 10.0D0 4150.4287109375D0 4.6813877997919917D-4 4.660385608673096D0)) (list (list 10.0D0 4148.2119140625D0 4.5782094821333885D-4 4.672879695892334D0)) (list (list 10.0D0 4142.7109375D0 3.5264433245174587D-4 4.6853742599487305D0)) (list (list 10.0D0 4145.77197265625D0 2.179970033466816D-4 4.697868347167969D0)) (list (list 10.0D0 4130.7431640625D0 1.2512769899331033D-4 4.710362911224365D0)) (list (list 10.0D0 4153.94775390625D0 3.6915208329446614D-4 4.7228569984436035D0)) (list (list 10.0D0 4150.22314453125D0 4.3050237582065165D-4 4.7353515625D0)) (list (list 10.0D0 4153.09716796875D0 4.3713708873838186D-4 4.747845649719238D0)) (list (list 10.0D0 4159.099609375D0 5.019870586693287D-4 4.760340213775635D0)) (list (list 10.0D0 4159.8515625D0 4.889764823019505D-4 4.772834300994873D0)) (list (list 10.0D0 4146.84619140625D0 4.310731601435691D-4 4.7853288650512695D0)) (list (list 10.0D0 4146.84619140625D0 0.0D0 4.797822952270508D0)) (list (list 11.0D0 3265.623779296875D0 2.1762080723419786D-4 0.01249433122575283D0)) (list (list 11.0D0 3247.110107421875D0 0.002204394666478038D0 0.03748299181461334D0)) (list (list 11.0D0 3254.580810546875D0 0.0030229822732508183D0 0.04997732490301132D0)) (list (list 11.0D0 3260.958740234375D0 0.0033149621449410916D0 0.062471654266119D0)) (list (list 11.0D0 3265.9765625D0 0.0032926027197390795D0 0.07496598362922669D0)) (list (list 11.0D0 3268.557373046875D0 0.0032231055665761233D0 0.08746031671762467D0)) (list (list 11.0D0 3269.059326171875D0 0.0032166147138923407D0 0.09995464980602265D0)) (list (list 11.0D0 3268.70849609375D0 0.0034803396556526423D0 0.11244898289442063D0)) (list (list 11.0D0 3267.9404296875D0 0.004082323983311653D0 0.124943308532238D0)) (list (list 11.0D0 3266.763427734375D0 0.005013702437281609D0 0.137437641620636D0)) (list (list 11.0D0 3265.793212890625D0 0.00615638168528676D0 0.14993196725845337D0)) (list (list 11.0D0 3265.044189453125D0 0.0073208580724895D0 0.16242630779743195D0)) (list (list 11.0D0 3264.049560546875D0 0.00833398662507534D0 0.17492063343524933D0)) (list (list 11.0D0 3263.001953125D0 0.008946339599788189D0 0.1874149590730667D0)) (list (list 11.0D0 3262.4609375D0 0.00890947412699461D0 0.1999092996120453D0)) (list (list 11.0D0 3262.39501953125D0 0.008321157656610012D0 0.21240362524986267D0)) (list (list 11.0D0 3262.360107421875D0 0.0075716483406722546D0 0.22489796578884125D0)) (list (list 11.0D0 3262.147705078125D0 0.0068916515447199345D0 0.23739229142665863D0)) (list (list 11.0D0 3261.906005859375D0 0.006249065976589918D0 0.249886617064476D0)) (list (list 11.0D0 3261.757080078125D0 0.005492920987308025D0 0.2623809576034546D0)) (list (list 11.0D0 3261.681884765625D0 0.0044896360486745835D0 0.274875283241272D0)) (list (list 11.0D0 3261.647705078125D0 0.0032592664938420058D0 0.28736960887908936D0)) (list (list 11.0D0 3260.804931640625D0 0.002026778645813465D0 0.29986393451690674D0)) (list (list 11.0D0 3257.704345703125D0 0.0011697201989591122D0 0.3123582899570465D0)) (list (list 11.0D0 3254.330078125D0 9.036430856212974D-4 0.3248526155948639D0)) (list (list 11.0D0 3249.463623046875D0 8.819551439955831D-4 0.3373469412326813D0)) (list (list 11.0D0 3232.987060546875D0 6.783388671465218D-4 0.34984126687049866D0)) (list (list 11.0D0 3253.33056640625D0 3.604070225264877D-4 0.36233559250831604D0)) (list (list 11.0D0 3258.3935546875D0 2.8334319358691573D-4 0.3748299181461334D0)) (list (list 11.0D0 3270.794189453125D0 0.0011684122728183866D0 0.3873242437839508D0)) (list (list 11.0D0 3264.736328125D0 0.0023765412624925375D0 0.3998185992240906D0)) (list (list 11.0D0 3263.5D0 0.003952162340283394D0 0.41231292486190796D0)) (list (list 11.0D0 3263.558349609375D0 0.005544977728277445D0 0.42480725049972534D0)) (list (list 11.0D0 3263.739990234375D0 0.007111318409442902D0 0.4373015761375427D0)) (list (list 11.0D0 3263.969482421875D0 0.008635248988866806D0 0.4497959315776825D0)) (list (list 11.0D0 3264.171875D0 0.010034541599452496D0 0.4622902572154999D0)) (list (list 11.0D0 3264.135986328125D0 0.01120985858142376D0 0.47478458285331726D0)) (list (list 11.0D0 3263.92578125D0 0.012084413319826126D0 0.48727890849113465D0)) (list (list 11.0D0 3263.880615234375D0 0.012579808011651039D0 0.499773234128952D0)) (list (list 11.0D0 3264.069091796875D0 0.012676533311605454D0 0.5122675895690918D0)) (list (list 11.0D0 3264.3017578125D0 0.012410479597747326D0 0.5247619152069092D0)) (list (list 11.0D0 3264.3232421875D0 0.011808537878096104D0 0.5372562408447266D0)) (list (list 11.0D0 3263.9521484375D0 0.01094943005591631D0 0.549750566482544D0)) (list (list 11.0D0 3263.213623046875D0 0.009949754923582077D0 0.5622448921203613D0)) (list (list 11.0D0 3262.456298828125D0 0.00882142223417759D0 0.5747392177581787D0)) (list (list 11.0D0 3262.193359375D0 0.007525465451180935D0 0.5872335433959961D0)) (list (list 11.0D0 3262.393798828125D0 0.006238619331270456D0 0.5997278690338135D0)) (list (list 11.0D0 3262.501708984375D0 0.005179865751415491D0 0.6122221946716309D0)) (list (list 11.0D0 3262.408203125D0 0.004344755783677101D0 0.624716579914093D0)) (list (list 11.0D0 3262.360595703125D0 0.0036461993586272D0 0.6372109055519104D0)) (list (list 11.0D0 3262.264892578125D0 0.00303590577095747D0 0.6497052311897278D0)) (list (list 11.0D0 3261.811767578125D0 0.002394749317318201D0 0.6621995568275452D0)) (list (list 11.0D0 3258.17626953125D0 0.00161125254817307D0 0.6746938824653626D0)) (list (list 11.0D0 3274.376220703125D0 9.260518127121031D-4 0.6871882081031799D0)) (list (list 11.0D0 3272.766845703125D0 0.0010430194670334459D0 0.6996825337409973D0)) (list (list 11.0D0 3260.8427734375D0 0.0021311077289283276D0 0.7121768593788147D0)) (list (list 11.0D0 3262.87939453125D0 0.0030611322727054358D0 0.7246711850166321D0)) (list (list 11.0D0 3263.676025390625D0 0.003589738393202424D0 0.7371655106544495D0)) (list (list 11.0D0 3264.02392578125D0 0.0037849831860512495D0 0.7496598362922669D0)) (list (list 11.0D0 3263.944580078125D0 0.003811783157289028D0 0.762154221534729D0)) (list (list 11.0D0 3263.453857421875D0 0.003605491016060114D0 0.7746485471725464D0)) (list (list 11.0D0 3262.447265625D0 0.003010887186974287D0 0.7871428728103638D0)) (list (list 11.0D0 3260.791015625D0 0.0021399850957095623D0 0.7996371984481812D0)) (list (list 11.0D0 3258.784423828125D0 0.001339118811301887D0 0.8121315240859985D0)) (list (list 11.0D0 3255.11181640625D0 8.056927472352982D-4 0.8246258497238159D0)) (list (list 11.0D0 3247.05859375D0 8.094232762232423D-4 0.8371201753616333D0)) (list (list 11.0D0 3249.633056640625D0 9.849886409938336D-4 0.8496145009994507D0)) (list (list 11.0D0 3256.80859375D0 0.0013900382909923792D0 0.8621088266372681D0)) (list (list 11.0D0 3259.9169921875D0 0.0018285197438672185D0 0.8746031522750855D0)) (list (list 11.0D0 3260.50732421875D0 0.0019057823810726405D0 0.8870974779129028D0)) (list (list 11.0D0 3260.6943359375D0 0.0018939878791570664D0 0.899591863155365D0)) (list (list 11.0D0 3260.389404296875D0 0.002134275622665882D0 0.9120861887931824D0)) (list (list 11.0D0 3260.391845703125D0 0.0027076471596956253D0 0.9245805144309998D0)) (list (list 11.0D0 3261.030517578125D0 0.0033673306461423636D0 0.9370748400688171D0)) (list (list 11.0D0 3262.0712890625D0 0.003763010958209634D0 0.9495691657066345D0)) (list (list 11.0D0 3263.05224609375D0 0.0037957350723445416D0 0.9620634913444519D0)) (list (list 11.0D0 3263.309326171875D0 0.0036607705987989903D0 0.9745578169822693D0)) (list (list 11.0D0 3262.893798828125D0 0.0035067759454250336D0 0.9870521426200867D0)) (list (list 11.0D0 3262.556884765625D0 0.003291221335530281D0 0.999546468257904D0)) (list (list 11.0D0 3262.3916015625D0 0.0029626162722706795D0 1.0120408535003662D0)) (list (list 11.0D0 3261.126220703125D0 0.002548263408243656D0 1.0245351791381836D0)) (list (list 11.0D0 3258.03759765625D0 0.0021605759393423796D0 1.037029504776001D0)) (list (list 11.0D0 3255.549072265625D0 0.0019259406253695488D0 1.0495238304138184D0)) (list (list 11.0D0 3255.00537109375D0 0.0018010223284363747D0 1.0620181560516358D0)) (list (list 11.0D0 3259.02685546875D0 0.0016913736471906305D0 1.0745124816894532D0)) (list (list 11.0D0 3261.704345703125D0 0.0017038482474163175D0 1.0870068073272705D0)) (list (list 11.0D0 3260.614990234375D0 0.0015068755019456149D0 1.099501132965088D0)) (list (list 11.0D0 3251.217529296875D0 0.001260777236893773D0 1.1119954586029053D0)) (list (list 11.0D0 3248.9140625D0 0.0010078297927975655D0 1.1244897842407227D0)) (list (list 11.0D0 3249.853759765625D0 8.591504883952439D-4 1.13698410987854D0)) (list (list 11.0D0 3276.32470703125D0 9.66019812040031D-4 1.1494784355163575D0)) (list (list 11.0D0 3259.6591796875D0 0.0020008543506264687D0 1.1619727611541748D0)) (list (list 11.0D0 3262.8701171875D0 0.003546486608684063D0 1.1744670867919922D0)) (list (list 11.0D0 3262.790771484375D0 0.005037820432335138D0 1.1869614124298096D0)) (list (list 11.0D0 3262.58203125D0 0.0062454501166939736D0 1.199455738067627D0)) (list (list 11.0D0 3262.291259765625D0 0.007037149276584387D0 1.2119500637054444D0)) (list (list 11.0D0 3261.855224609375D0 0.007393856067210436D0 1.2244443893432618D0)) (list (list 11.0D0 3261.649658203125D0 0.007321493234485388D0 1.236938714981079D0)) (list (list 11.0D0 3261.78515625D0 0.0068471068516373635D0 1.249433159828186D0)) (list (list 11.0D0 3261.800537109375D0 0.0060079446993768215D0 1.2619274854660035D0)) (list (list 11.0D0 3261.4189453125D0 0.004872061312198639D0 1.2744218111038208D0)) (list (list 11.0D0 3261.2490234375D0 0.003642656374722719D0 1.2869161367416382D0)) (list (list 11.0D0 3261.8017578125D0 0.0027777161449193955D0 1.2994104623794556D0)) (list (list 11.0D0 3262.45263671875D0 0.0025561945512890816D0 1.311904788017273D0)) (list (list 11.0D0 3262.477294921875D0 0.0026041727978736163D0 1.3243991136550904D0)) (list (list 11.0D0 3262.61767578125D0 0.0024212549906224013D0 1.3368934392929078D0)) (list (list 11.0D0 3263.639892578125D0 0.002170201623812318D0 1.349387764930725D0)) (list (list 11.0D0 3264.69140625D0 0.00240185740403831D0 1.3618820905685425D0)) (list (list 11.0D0 3265.67138671875D0 0.0032916604541242123D0 1.3743764162063599D0)) (list (list 11.0D0 3265.6884765625D0 0.004763197153806686D0 1.3868707418441773D0)) (list (list 11.0D0 3265.035888671875D0 0.006684848573058844D0 1.3993650674819947D0)) (list (list 11.0D0 3264.159423828125D0 0.008607534691691399D0 1.411859393119812D0)) (list (list 11.0D0 3263.604248046875D0 0.009846173226833344D0 1.4243537187576294D0)) (list (list 11.0D0 3263.310302734375D0 0.010209191590547562D0 1.4368480443954468D0)) (list (list 11.0D0 3262.894287109375D0 0.009922223165631295D0 1.4493423700332642D0)) (list (list 11.0D0 3262.133544921875D0 0.008981727994978428D0 1.4618366956710816D0)) (list (list 11.0D0 3261.569580078125D0 0.007352342363446951D0 1.474331021308899D0)) (list (list 11.0D0 3262.088623046875D0 0.005471495445817709D0 1.4868253469467163D0)) (list (list 11.0D0 3263.209716796875D0 0.004014321602880955D0 1.4993196725845337D0)) (list (list 11.0D0 3264.278564453125D0 0.003108180360868573D0 1.5118141174316407D0)) (list (list 11.0D0 3264.699462890625D0 0.0025229458697140217D0 1.524308443069458D0)) (list (list 11.0D0 3264.95166015625D0 0.002086009830236435D0 1.5368027687072754D0)) (list (list 11.0D0 3265.53515625D0 0.0016941293142735959D0 1.5492970943450928D0)) (list (list 11.0D0 3265.28662109375D0 0.0014462766703218222D0 1.5617914199829102D0)) (list (list 11.0D0 3263.933837890625D0 0.0015753250336274505D0 1.5742857456207276D0)) (list (list 11.0D0 3262.17626953125D0 0.0021355212666094303D0 1.586780071258545D0)) (list (list 11.0D0 3261.915283203125D0 0.002833211561664939D0 1.5992743968963623D0)) (list (list 11.0D0 3262.108642578125D0 0.0035053850151598454D0 1.6117687225341797D0)) (list (list 11.0D0 3262.503173828125D0 0.00420610373839736D0 1.624263048171997D0)) (list (list 11.0D0 3262.921630859375D0 0.004929461516439915D0 1.6367573738098145D0)) (list (list 11.0D0 3263.100830078125D0 0.005413273815065622D0 1.6492516994476319D0)) (list (list 11.0D0 3263.27978515625D0 0.005360817536711693D0 1.6617460250854493D0)) (list (list 11.0D0 3263.50048828125D0 0.004872904624789953D0 1.6742403507232666D0)) (list (list 11.0D0 3263.474853515625D0 0.00427468353882432D0 1.686734676361084D0)) (list (list 11.0D0 3263.401123046875D0 0.003746435046195984D0 1.6992290019989014D0)) (list (list 11.0D0 3263.70654296875D0 0.003322294680401683D0 1.7117233276367188D0)) (list (list 11.0D0 3263.882568359375D0 0.0030777130741626025D0 1.7242176532745362D0)) (list (list 11.0D0 3263.595703125D0 0.0029812215361744166D0 1.7367119789123536D0)) (list (list 11.0D0 3262.958984375D0 0.0028274054639041424D0 1.749206304550171D0)) (list (list 11.0D0 3261.88623046875D0 0.002439914271235466D0 1.7617006301879883D0)) (list (list 11.0D0 3260.1826171875D0 0.001868835766799748D0 1.7741949558258057D0)) (list (list 11.0D0 3259.664306640625D0 0.0012827966129407287D0 1.7866894006729126D0)) (list (list 11.0D0 3260.39990234375D0 8.282416383735836D-4 1.79918372631073D0)) (list (list 11.0D0 3263.993408203125D0 5.583438323810697D-4 1.8116780519485474D0)) (list (list 11.0D0 3236.479736328125D0 5.175285623408854D-4 1.8241723775863648D0)) (list (list 11.0D0 3215.48974609375D0 7.585760322399437D-4 1.8366667032241822D0)) (list (list 11.0D0 3225.49853515625D0 7.976625929586589D-4 1.8491610288619996D0)) (list (list 11.0D0 3229.07958984375D0 7.721199071966112D-4 1.861655354499817D0)) (list (list 11.0D0 3232.014404296875D0 8.192992536351085D-4 1.8741496801376343D0)) (list (list 11.0D0 3236.1865234375D0 9.838953847065568D-4 1.8866440057754517D0)) (list (list 11.0D0 3260.610595703125D0 0.001544314087368548D0 1.899138331413269D0)) (list (list 11.0D0 3261.85498046875D0 0.0016462536295875907D0 1.9116326570510865D0)) (list (list 11.0D0 3262.830810546875D0 0.0014779458288103342D0 1.9241269826889038D0)) (list (list 11.0D0 3262.07666015625D0 0.001137778046540916D0 1.9366213083267212D0)) (list (list 11.0D0 3259.63916015625D0 7.485453970730305D-4 1.9491156339645386D0)) (list (list 11.0D0 3263.186767578125D0 4.457038303371519D-4 1.961609959602356D0)) (list (list 11.0D0 3265.86865234375D0 4.7729251673445106D-4 1.9741042852401734D0)) (list (list 11.0D0 3266.085205078125D0 7.476949831470847D-4 1.9865986108779908D0)) (list (list 11.0D0 3264.616455078125D0 0.0011006651911884547D0 1.999092936515808D0)) (list (list 11.0D0 3264.1455078125D0 0.001478872960433364D0 2.011587381362915D0)) (list (list 11.0D0 3263.7216796875D0 0.0018281713128089905D0 2.0240817070007324D0)) (list (list 11.0D0 3263.38916015625D0 0.002035772893577814D0 2.03657603263855D0)) (list (list 11.0D0 3263.01708984375D0 0.0020231464877724648D0 2.049070358276367D0)) (list (list 11.0D0 3261.81884765625D0 0.0017870984738692642D0 2.0615646839141846D0)) (list (list 11.0D0 3258.22900390625D0 0.0013790401862934232D0 2.074059009552002D0)) (list (list 11.0D0 3253.7099609375D0 9.485232876613736D-4 2.0865533351898194D0)) (list (list 11.0D0 3256.770263671875D0 5.314376321621239D-4 2.0990476608276367D0)) (list (list 11.0D0 3260.241943359375D0 6.343558779917657D-4 2.111541986465454D0)) (list (list 11.0D0 3258.42822265625D0 0.0013934050220996142D0 2.1240363121032715D0)) (list (list 11.0D0 3256.102783203125D0 0.0026437349151819945D0 2.136530637741089D0)) (list (list 11.0D0 3257.791259765625D0 0.003607975784689188D0 2.1490249633789063D0)) (list (list 11.0D0 3260.909423828125D0 0.0038493636529892683D0 2.1615192890167237D0)) (list (list 11.0D0 3263.86376953125D0 0.0037115372251719237D0 2.174013614654541D0)) (list (list 11.0D0 3265.64013671875D0 0.003530853195115924D0 2.1865079402923584D0)) (list (list 11.0D0 3266.581787109375D0 0.0034114900045096875D0 2.199002265930176D0)) (list (list 11.0D0 3266.939208984375D0 0.0035558452364057303D0 2.211496591567993D0)) (list (list 11.0D0 3266.011474609375D0 0.004092777613550425D0 2.2239909172058106D0)) (list (list 11.0D0 3263.811767578125D0 0.004894561134278774D0 2.236485242843628D0)) (list (list 11.0D0 3262.316650390625D0 0.005465981084853411D0 2.2489795684814453D0)) (list (list 11.0D0 3262.6591796875D0 0.005400659516453743D0 2.2614738941192627D0)) (list (list 11.0D0 3263.615234375D0 0.0051819197833538056D0 2.27396821975708D0)) (list (list 11.0D0 3263.790771484375D0 0.005436467006802559D0 2.2864625453948975D0)) (list (list 11.0D0 3263.1103515625D0 0.006245984695851803D0 2.298956871032715D0)) (list (list 11.0D0 3262.6171875D0 0.007105812430381775D0 2.3114511966705323D0)) (list (list 11.0D0 3263.00830078125D0 0.007418110501021147D0 2.3239455223083496D0)) (list (list 11.0D0 3264.10888671875D0 0.007150559686124325D0 2.336439847946167D0)) (list (list 11.0D0 3264.9951171875D0 0.006770776119083166D0 2.3489341735839844D0)) (list (list 11.0D0 3264.74658203125D0 0.0065668001770973206D0 2.3614284992218018D0)) (list (list 11.0D0 3263.512451171875D0 0.006404344458132982D0 2.373922824859619D0)) (list (list 11.0D0 3262.8623046875D0 0.005929327104240656D0 2.3864171504974366D0)) (list (list 11.0D0 3263.7734375D0 0.005044293124228716D0 2.398911476135254D0)) (list (list 11.0D0 3265.728759765625D0 0.004168436396867037D0 2.4114058017730713D0)) (list (list 11.0D0 3267.391357421875D0 0.003793098730966449D0 2.4239001274108887D0)) (list (list 11.0D0 3266.794677734375D0 0.004231379367411137D0 2.436394453048706D0)) (list (list 11.0D0 3264.01513671875D0 0.005670773331075907D0 2.4488887786865235D0)) (list (list 11.0D0 3261.321533203125D0 0.007728142198175192D0 2.461383104324341D0)) (list (list 11.0D0 3261.044189453125D0 0.009152265265583992D0 2.4738776683807373D0)) (list (list 11.0D0 3261.75048828125D0 0.009538426995277405D0 2.4863719940185547D0)) (list (list 11.0D0 3262.4599609375D0 0.009209753945469857D0 2.498866319656372D0)) (list (list 11.0D0 3263.290283203125D0 0.008455214090645314D0 2.5113606452941895D0)) (list (list 11.0D0 3264.342041015625D0 0.007624117657542229D0 2.523854970932007D0)) (list (list 11.0D0 3264.99462890625D0 0.007094585336744785D0 2.536349296569824D0)) (list (list 11.0D0 3264.9345703125D0 0.007020583841949701D0 2.5488436222076416D0)) (list (list 11.0D0 3264.47412109375D0 0.007373015861958265D0 2.561337947845459D0)) (list (list 11.0D0 3263.942138671875D0 0.008101539686322213D0 2.5738322734832764D0)) (list (list 11.0D0 3263.4482421875D0 0.009144838899374009D0 2.5863265991210938D0)) (list (list 11.0D0 3263.16796875D0 0.01029482763260603D0 2.598820924758911D0)) (list (list 11.0D0 3263.091552734375D0 0.011316289193928242D0 2.6113152503967285D0)) (list (list 11.0D0 3263.073974609375D0 0.012154487892985344D0 2.623809576034546D0)) (list (list 11.0D0 3263.144775390625D0 0.012780698016285897D0 2.6363039016723633D0)) (list (list 11.0D0 3263.419189453125D0 0.01303767878562212D0 2.6487982273101807D0)) (list (list 11.0D0 3263.7958984375D0 0.012821611016988755D0 2.661292552947998D0)) (list (list 11.0D0 3263.96875D0 0.012233646586537362D0 2.6737868785858155D0)) (list (list 11.0D0 3263.866455078125D0 0.011445329524576664D0 2.686281204223633D0)) (list (list 11.0D0 3263.759521484375D0 0.010678799822926522D0 2.69877552986145D0)) (list (list 11.0D0 3263.690673828125D0 0.010252252221107483D0 2.7112698554992676D0)) (list (list 11.0D0 3263.4521484375D0 0.010281181894242764D0 2.723764181137085D0)) (list (list 11.0D0 3263.158447265625D0 0.010305870324373246D0 2.7362585067749024D0)) (list (list 11.0D0 3263.14794921875D0 0.00964631699025631D0 2.7487528324127198D0)) (list (list 11.0D0 3263.3857421875D0 0.008032464422285557D0 2.761247158050537D0)) (list (list 11.0D0 3264.687744140625D0 0.005686844699084759D0 2.7737414836883545D0)) (list (list 11.0D0 3269.2666015625D0 0.003648805432021618D0 2.786235809326172D0)) (list (list 11.0D0 3270.950439453125D0 0.002854464342817664D0 2.7987301349639893D0)) (list (list 11.0D0 3269.083984375D0 0.0030337281059473753D0 2.8112244606018067D0)) (list (list 11.0D0 3266.646240234375D0 0.0038163040298968554D0 2.823718786239624D0)) (list (list 11.0D0 3266.48193359375D0 0.0044539007358253D0 2.8362131118774414D0)) (list (list 11.0D0 3266.430908203125D0 0.004892606753855944D0 2.848707437515259D0)) (list (list 11.0D0 3266.003662109375D0 0.005312028340995312D0 2.861201763153076D0)) (list (list 11.0D0 3265.2412109375D0 0.005904625169932842D0 2.8736960887908936D0)) (list (list 11.0D0 3264.1708984375D0 0.006772003136575222D0 2.886190414428711D0)) (list (list 11.0D0 3263.08251953125D0 0.00779546145349741D0 2.8986847400665283D0)) (list (list 11.0D0 3262.54931640625D0 0.008648932911455632D0 2.9111790657043457D0)) (list (list 11.0D0 3262.7314453125D0 0.009122239425778389D0 2.923673391342163D0)) (list (list 11.0D0 3263.125732421875D0 0.009327868930995465D0 2.9361677169799805D0)) (list (list 11.0D0 3263.402099609375D0 0.009370950981974602D0 2.948662042617798D0)) (list (list 11.0D0 3263.578125D0 0.009227619506418705D0 2.9611563682556153D0)) (list (list 11.0D0 3263.4345703125D0 0.00886230543255806D0 2.9736506938934326D0)) (list (list 11.0D0 3262.789306640625D0 0.008155751042068005D0 2.98614501953125D0)) (list (list 11.0D0 3262.4287109375D0 0.006894582416862249D0 2.9986393451690674D0)) (list (list 11.0D0 3264.383056640625D0 0.005224896129220724D0 3.0111336708068848D0)) (list (list 11.0D0 3266.487548828125D0 0.004197587724775076D0 3.0236282348632813D0)) (list (list 11.0D0 3266.01904296875D0 0.004221789073199034D0 3.0361225605010987D0)) (list (list 11.0D0 3263.264892578125D0 0.005131729878485203D0 3.048616886138916D0)) (list (list 11.0D0 3261.592041015625D0 0.00620309030637145D0 3.0611112117767334D0)) (list (list 11.0D0 3261.21826171875D0 0.006739130709320307D0 3.073605537414551D0)) (list (list 11.0D0 3261.325439453125D0 0.006721561774611473D0 3.086099863052368D0)) (list (list 11.0D0 3261.755615234375D0 0.006361977197229862D0 3.0985941886901856D0)) (list (list 11.0D0 3262.2822265625D0 0.005868970882147551D0 3.111088514328003D0)) (list (list 11.0D0 3262.28515625D0 0.005232813768088818D0 3.1235828399658203D0)) (list (list 11.0D0 3262.396240234375D0 0.00424389960244298D0 3.1360771656036377D0)) (list (list 11.0D0 3265.672607421875D0 0.003061768366023898D0 3.148571491241455D0)) (list (list 11.0D0 3267.121337890625D0 0.0025446333456784487D0 3.1610658168792725D0)) (list (list 11.0D0 3264.70458984375D0 0.0028375652618706227D0 3.17356014251709D0)) (list (list 11.0D0 3259.494140625D0 0.0037783680018037558D0 3.1860544681549073D0)) (list (list 11.0D0 3257.918701171875D0 0.004225246608257294D0 3.1985487937927246D0)) (list (list 11.0D0 3257.1513671875D0 0.0038496649358421564D0 3.211043119430542D0)) (list (list 11.0D0 3256.88330078125D0 0.0029048193246126175D0 3.2235374450683594D0)) (list (list 11.0D0 3257.78955078125D0 0.0017566438764333725D0 3.2360317707061768D0)) (list (list 11.0D0 3259.057373046875D0 8.834769832901657D-4 3.248526096343994D0)) (list (list 11.0D0 3258.103271484375D0 6.43712526652962D-4 3.2610204219818116D0)) (list (list 11.0D0 3253.34033203125D0 9.528764057904482D-4 3.273514747619629D0)) (list (list 11.0D0 3252.088134765625D0 0.0013647059677168727D0 3.2860090732574463D0)) (list (list 11.0D0 3251.081298828125D0 0.0015710329171270132D0 3.2985033988952637D0)) (list (list 11.0D0 3248.17919921875D0 0.0015741672832518816D0 3.310997724533081D0)) (list (list 11.0D0 3225.571533203125D0 0.0017028185538947583D0 3.3234920501708985D0)) (list (list 11.0D0 3227.477294921875D0 0.001666399766691029D0 3.335986375808716D0)) (list (list 11.0D0 3226.24658203125D0 0.0016418383456766606D0 3.348480701446533D0)) (list (list 11.0D0 3221.78369140625D0 0.002036940073594451D0 3.3609750270843506D0)) (list (list 11.0D0 3220.63916015625D0 0.0025583321694284678D0 3.373469352722168D0)) (list (list 11.0D0 3222.477294921875D0 0.0026543657295405865D0 3.3859636783599854D0)) (list (list 11.0D0 3224.288330078125D0 0.0023702618200331927D0 3.3984580039978028D0)) (list (list 11.0D0 3224.79443359375D0 0.0019408870721235872D0 3.41095232963562D0)) (list (list 11.0D0 3225.322021484375D0 0.0016975139733403922D0 3.4234466552734375D0)) (list (list 11.0D0 3225.009521484375D0 0.0017519674729555846D0 3.435940980911255D0)) (list (list 11.0D0 3224.086181640625D0 0.0019304672023281455D0 3.4484353065490723D0)) (list (list 11.0D0 3223.423828125D0 0.0020136507228016854D0 3.4609296321868897D0)) (list (list 11.0D0 3222.303955078125D0 0.0018711555749177933D0 3.473423957824707D0)) (list (list 11.0D0 3220.1748046875D0 0.0016199102392420173D0 3.4859182834625244D0)) (list (list 11.0D0 3216.296142578125D0 0.0013837750302627683D0 3.498412609100342D0)) (list (list 11.0D0 3207.929443359375D0 0.0010979402577504516D0 3.510906934738159D0)) (list (list 11.0D0 3203.898681640625D0 6.971347611397505D-4 3.5234012603759766D0)) (list (list 11.0D0 3207.150146484375D0 3.5367210512049496D-4 3.535895586013794D0)) (list (list 11.0D0 3180.5654296875D0 5.749326664954424D-4 3.5483899116516114D0)) (list (list 11.0D0 3180.617919921875D0 5.942475982010365D-4 3.5608842372894287D0)) (list (list 11.0D0 3152.0537109375D0 1.7694295092951507D-4 3.573378801345825D0)) (list (list 11.0D0 3152.0537109375D0 0.0D0 3.5858731269836426D0)) (list (list 12.0D0 9333.1181640625D0 5.346140096662566D-5 0.02498866245150566D0)) (list (list 12.0D0 9353.6611328125D0 5.04123090649955D-5 0.03748299181461334D0)) (list (list 12.0D0 9352.7734375D0 9.91115957731381D-5 0.04997732490301132D0)) (list (list 12.0D0 9382.0498046875D0 8.7646723841317D-5 0.062471654266119D0)) (list (list 12.0D0 9385.0419921875D0 1.0395404387963936D-4 0.07496598362922669D0)) (list (list 12.0D0 9368.005859375D0 8.269285171991214D-5 0.08746031671762467D0)) (list (list 12.0D0 9338.4921875D0 6.639350322075188D-4 0.09995464980602265D0)) (list (list 12.0D0 9336.822265625D0 8.722118218429387D-4 0.11244898289442063D0)) (list (list 12.0D0 9334.4404296875D0 0.0010732302907854319D0 0.124943308532238D0)) (list (list 12.0D0 9333.1943359375D0 0.0010434610303491354D0 0.137437641620636D0)) (list (list 12.0D0 9338.3828125D0 7.213058997876942D-4 0.14993196725845337D0)) (list (list 12.0D0 9317.869140625D0 6.970167742110789D-4 0.16242630779743195D0)) (list (list 12.0D0 9318.216796875D0 8.879693341441453D-4 0.17492063343524933D0)) (list (list 12.0D0 9320.14453125D0 0.0012220550561323762D0 0.1874149590730667D0)) (list (list 12.0D0 9321.41015625D0 0.0013618128141388297D0 0.1999092996120453D0)) (list (list 12.0D0 9324.2744140625D0 0.0011262674815952778D0 0.21240362524986267D0)) (list (list 12.0D0 9327.431640625D0 8.034105412662029D-4 0.22489796578884125D0)) (list (list 12.0D0 9328.4521484375D0 6.39965059235692D-4 0.23739229142665863D0)) (list (list 12.0D0 9326.498046875D0 6.835573585703969D-4 0.249886617064476D0)) (list (list 12.0D0 9324.50390625D0 9.334893547929823D-4 0.2623809576034546D0)) (list (list 12.0D0 9323.9599609375D0 0.0013023342471569777D0 0.274875283241272D0)) (list (list 12.0D0 9325.787109375D0 0.0016003373311832548D0 0.28736960887908936D0)) (list (list 12.0D0 9329.169921875D0 0.0017183959716930986D0 0.29986393451690674D0)) (list (list 12.0D0 9330.814453125D0 0.0016448376700282097D0 0.3123582899570465D0)) (list (list 12.0D0 9328.474609375D0 0.0013948777923360467D0 0.3248526155948639D0)) (list (list 12.0D0 9325.3564453125D0 0.0013026341330260039D0 0.3373469412326813D0)) (list (list 12.0D0 9326.0419921875D0 0.001303189666941762D0 0.34984126687049866D0)) (list (list 12.0D0 9330.7470703125D0 0.0013594933552667499D0 0.36233559250831604D0)) (list (list 12.0D0 9334.0419921875D0 0.0013948418200016022D0 0.3748299181461334D0)) (list (list 12.0D0 9335.701171875D0 0.0011860880767926574D0 0.3873242437839508D0)) (list (list 12.0D0 9339.205078125D0 8.394618635065854D-4 0.3998185992240906D0)) (list (list 12.0D0 9338.919921875D0 5.998963606543839D-4 0.41231292486190796D0)) (list (list 12.0D0 9333.349609375D0 6.875616381876171D-4 0.42480725049972534D0)) (list (list 12.0D0 9324.9033203125D0 0.001367510762065649D0 0.4373015761375427D0)) (list (list 12.0D0 9326.361328125D0 0.0018761383835226298D0 0.4497959315776825D0)) (list (list 12.0D0 9327.1220703125D0 0.0021654332522302866D0 0.4622902572154999D0)) (list (list 12.0D0 9326.650390625D0 0.0022192583419382573D0 0.47478458285331726D0)) (list (list 12.0D0 9325.2373046875D0 0.002151130000129342D0 0.48727890849113465D0)) (list (list 12.0D0 9324.5625D0 0.0020716029684990645D0 0.499773234128952D0)) (list (list 12.0D0 9325.4951171875D0 0.0019717179238796234D0 0.5122675895690918D0)) (list (list 12.0D0 9327.2861328125D0 0.0018449941417202354D0 0.5247619152069092D0)) (list (list 12.0D0 9328.3857421875D0 0.0016438550082966686D0 0.5372562408447266D0)) (list (list 12.0D0 9327.5234375D0 0.0013226473238319159D0 0.549750566482544D0)) (list (list 12.0D0 9323.8701171875D0 9.759646491147578D-4 0.5622448921203613D0)) (list (list 12.0D0 9322.5595703125D0 6.827182369306684D-4 0.5747392177581787D0)) (list (list 12.0D0 9326.3388671875D0 5.031696637161076D-4 0.5872335433959961D0)) (list (list 12.0D0 9303.064453125D0 4.8781061195768416D-4 0.5997278690338135D0)) (list (list 12.0D0 9322.5498046875D0 7.040950586088002D-4 0.6122221946716309D0)) (list (list 12.0D0 9322.220703125D0 8.982551516965032D-4 0.624716579914093D0)) (list (list 12.0D0 9322.7021484375D0 0.0010250069899484516D0 0.6372109055519104D0)) (list (list 12.0D0 9322.1796875D0 0.001105802832171321D0 0.6497052311897278D0)) (list (list 12.0D0 9322.458984375D0 0.0011354985181242228D0 0.6621995568275452D0)) (list (list 12.0D0 9324.0771484375D0 0.0011221658205613494D0 0.6746938824653626D0)) (list (list 12.0D0 9324.884765625D0 0.001081665395759046D0 0.6871882081031799D0)) (list (list 12.0D0 9324.3271484375D0 9.895709808915854D-4 0.6996825337409973D0)) (list (list 12.0D0 9324.39453125D0 8.494146168231964D-4 0.7121768593788147D0)) (list (list 12.0D0 9325.85546875D0 7.089954451657832D-4 0.7246711850166321D0)) (list (list 12.0D0 9326.3369140625D0 6.28350768238306D-4 0.7371655106544495D0)) (list (list 12.0D0 9325.568359375D0 6.027010385878384D-4 0.7496598362922669D0)) (list (list 12.0D0 9325.783203125D0 5.942580755800009D-4 0.762154221534729D0)) (list (list 12.0D0 9327.087890625D0 5.945372977294028D-4 0.7746485471725464D0)) (list (list 12.0D0 9327.70703125D0 6.238598725758493D-4 0.7871428728103638D0)) (list (list 12.0D0 9327.462890625D0 6.722426624037325D-4 0.7996371984481812D0)) (list (list 12.0D0 9326.9296875D0 7.095798500813544D-4 0.8121315240859985D0)) (list (list 12.0D0 9326.5546875D0 7.199812098406255D-4 0.8246258497238159D0)) (list (list 12.0D0 9326.9853515625D0 7.06602877471596D-4 0.8371201753616333D0)) (list (list 12.0D0 9327.767578125D0 6.737950607202947D-4 0.8496145009994507D0)) (list (list 12.0D0 9325.8896484375D0 6.066789501346648D-4 0.8621088266372681D0)) (list (list 12.0D0 9321.048828125D0 5.970672937110066D-4 0.8746031522750855D0)) (list (list 12.0D0 9316.7353515625D0 6.858535925857723D-4 0.8870974779129028D0)) (list (list 12.0D0 9314.8896484375D0 7.72775209043175D-4 0.899591863155365D0)) (list (list 12.0D0 9315.3681640625D0 8.35103215649724D-4 0.9120861887931824D0)) (list (list 12.0D0 9317.720703125D0 9.059836738742888D-4 0.9245805144309998D0)) (list (list 12.0D0 9320.9677734375D0 0.0010041091591119767D0 0.9370748400688171D0)) (list (list 12.0D0 9323.5166015625D0 0.0010783033212646842D0 0.9495691657066345D0)) (list (list 12.0D0 9325.78125D0 0.0011375572066754103D0 0.9620634913444519D0)) (list (list 12.0D0 9326.8818359375D0 0.0012127215741202236D0 0.9745578169822693D0)) (list (list 12.0D0 9325.8408203125D0 0.0012727283174172044D0 0.9870521426200867D0)) (list (list 12.0D0 9324.6025390625D0 0.0013575523626059294D0 0.999546468257904D0)) (list (list 12.0D0 9324.236328125D0 0.0014723369386047125D0 1.0120408535003662D0)) (list (list 12.0D0 9324.2548828125D0 0.0016091708093881607D0 1.0245351791381836D0)) (list (list 12.0D0 9324.7158203125D0 0.0017333189025521279D0 1.037029504776001D0)) (list (list 12.0D0 9326.1865234375D0 0.0018073699902743102D0 1.0495238304138184D0)) (list (list 12.0D0 9328.021484375D0 0.0018479684367775917D0 1.0620181560516358D0)) (list (list 12.0D0 9328.6123046875D0 0.001871083048172295D0 1.0745124816894532D0)) (list (list 12.0D0 9327.111328125D0 0.0018813597271218896D0 1.0870068073272705D0)) (list (list 12.0D0 9324.69921875D0 0.0019619823433458805D0 1.099501132965088D0)) (list (list 12.0D0 9323.6435546875D0 0.0020677358843386174D0 1.1119954586029053D0)) (list (list 12.0D0 9324.0400390625D0 0.00209823832847178D0 1.1244897842407227D0)) (list (list 12.0D0 9324.474609375D0 0.0020393149461597205D0 1.13698410987854D0)) (list (list 12.0D0 9324.54296875D0 0.0018925117328763009D0 1.1494784355163575D0)) (list (list 12.0D0 9324.7861328125D0 0.00169243139680475D0 1.1619727611541748D0)) (list (list 12.0D0 9325.03515625D0 0.0014685319038107992D0 1.1744670867919922D0)) (list (list 12.0D0 9324.615234375D0 0.0012322093825787306D0 1.1869614124298096D0)) (list (list 12.0D0 9323.65234375D0 0.0010253570508211852D0 1.199455738067627D0)) (list (list 12.0D0 9322.4443359375D0 9.022395242936909D-4 1.2119500637054444D0)) (list (list 12.0D0 9321.119140625D0 8.940542466007173D-4 1.2244443893432618D0)) (list (list 12.0D0 9320.8681640625D0 9.80467302724719D-4 1.236938714981079D0)) (list (list 12.0D0 9321.7294921875D0 0.0011349092237651349D0 1.249433159828186D0)) (list (list 12.0D0 9322.533203125D0 0.0013455860316753388D0 1.2619274854660035D0)) (list (list 12.0D0 9322.6083984375D0 0.0015625521773472429D0 1.2744218111038208D0)) (list (list 12.0D0 9321.7763671875D0 0.0017198998248204589D0 1.2869161367416382D0)) (list (list 12.0D0 9320.515625D0 0.0017743021016940475D0 1.2994104623794556D0)) (list (list 12.0D0 9320.3662109375D0 0.001717392704449594D0 1.311904788017273D0)) (list (list 12.0D0 9322.6708984375D0 0.0015965919010341168D0 1.3243991136550904D0)) (list (list 12.0D0 9326.5166015625D0 0.0015932295937091113D0 1.3368934392929078D0)) (list (list 12.0D0 9329.5078125D0 0.0017114083748310805D0 1.349387764930725D0)) (list (list 12.0D0 9330.1650390625D0 0.0017572090728208423D0 1.3618820905685425D0)) (list (list 12.0D0 9329.5732421875D0 0.0016337221022695303D0 1.3743764162063599D0)) (list (list 12.0D0 9330.3466796875D0 0.0012722857063636184D0 1.3868707418441773D0)) (list (list 12.0D0 9315.921875D0 7.641555857844651D-4 1.3993650674819947D0)) (list (list 12.0D0 9312.771484375D0 6.34190218988806D-4 1.411859393119812D0)) (list (list 12.0D0 9339.5712890625D0 6.081361789256334D-4 1.4243537187576294D0)) (list (list 12.0D0 9335.4169921875D0 4.427251114975661D-4 1.4368480443954468D0)) (list (list 12.0D0 9335.130859375D0 3.1729560578241945D-4 1.4493423700332642D0)) (list (list 12.0D0 9318.2490234375D0 3.936454013455659D-4 1.4618366956710816D0)) (list (list 12.0D0 9323.6533203125D0 8.979519479908049D-4 1.474331021308899D0)) (list (list 12.0D0 9324.111328125D0 0.0014273367123678327D0 1.4868253469467163D0)) (list (list 12.0D0 9325.3603515625D0 0.001762446016073227D0 1.4993196725845337D0)) (list (list 12.0D0 9326.4716796875D0 0.0018689078278839589D0 1.5118141174316407D0)) (list (list 12.0D0 9327.53125D0 0.0018218731274828315D0 1.524308443069458D0)) (list (list 12.0D0 9328.314453125D0 0.001706089242361486D0 1.5368027687072754D0)) (list (list 12.0D0 9327.9267578125D0 0.00155726820230484D0 1.5492970943450928D0)) (list (list 12.0D0 9326.1162109375D0 0.001410993980243802D0 1.5617914199829102D0)) (list (list 12.0D0 9324.2080078125D0 0.0012883436866104603D0 1.5742857456207276D0)) (list (list 12.0D0 9323.6015625D0 0.001155568053945899D0 1.586780071258545D0)) (list (list 12.0D0 9323.453125D0 0.001042929827235639D0 1.5992743968963623D0)) (list (list 12.0D0 9323.0595703125D0 9.768960298970342D-4 1.6117687225341797D0)) (list (list 12.0D0 9323.5029296875D0 8.967717294581234D-4 1.624263048171997D0)) (list (list 12.0D0 9326.9638671875D0 7.558036013506353D-4 1.6367573738098145D0)) (list (list 12.0D0 9329.869140625D0 6.481191958300769D-4 1.6492516994476319D0)) (list (list 12.0D0 9329.3359375D0 5.879065138287842D-4 1.6617460250854493D0)) (list (list 12.0D0 9325.8369140625D0 6.048437207937241D-4 1.6742403507232666D0)) (list (list 12.0D0 9323.466796875D0 6.718297954648733D-4 1.686734676361084D0)) (list (list 12.0D0 9323.4775390625D0 7.270834175869823D-4 1.6992290019989014D0)) (list (list 12.0D0 9323.84375D0 7.88214907515794D-4 1.7117233276367188D0)) (list (list 12.0D0 9323.0517578125D0 8.390956791117787D-4 1.7242176532745362D0)) (list (list 12.0D0 9321.220703125D0 8.824424003250897D-4 1.7367119789123536D0)) (list (list 12.0D0 9320.375D0 9.400223498232663D-4 1.749206304550171D0)) (list (list 12.0D0 9321.4501953125D0 0.0010048436233773828D0 1.7617006301879883D0)) (list (list 12.0D0 9322.9716796875D0 0.001078017521649599D0 1.7741949558258057D0)) (list (list 12.0D0 9323.61328125D0 0.0011082073906436563D0 1.7866894006729126D0)) (list (list 12.0D0 9324.1357421875D0 0.001068900222890079D0 1.79918372631073D0)) (list (list 12.0D0 9325.140625D0 9.934260742738843D-4 1.8116780519485474D0)) (list (list 12.0D0 9325.607421875D0 9.138434543274343D-4 1.8241723775863648D0)) (list (list 12.0D0 9324.671875D0 8.349184063263238D-4 1.8366667032241822D0)) (list (list 12.0D0 9323.1044921875D0 7.74125219322741D-4 1.8491610288619996D0)) (list (list 12.0D0 9322.3125D0 7.323080208152533D-4 1.861655354499817D0)) (list (list 12.0D0 9322.6943359375D0 6.958912708796561D-4 1.8741496801376343D0)) (list (list 12.0D0 9323.470703125D0 6.574404542334378D-4 1.8866440057754517D0)) (list (list 12.0D0 9323.0751953125D0 6.142867496237159D-4 1.899138331413269D0)) (list (list 12.0D0 9321.0478515625D0 5.847023567184806D-4 1.9116326570510865D0)) (list (list 12.0D0 9318.6748046875D0 5.973723600618541D-4 1.9241269826889038D0)) (list (list 12.0D0 9318.3974609375D0 6.372171337716281D-4 1.9366213083267212D0)) (list (list 12.0D0 9320.3642578125D0 6.907132337801158D-4 1.9491156339645386D0)) (list (list 12.0D0 9323.0205078125D0 7.623145938850939D-4 1.961609959602356D0)) (list (list 12.0D0 9324.5966796875D0 8.057553204707801D-4 1.9741042852401734D0)) (list (list 12.0D0 9325.3466796875D0 7.963948301039636D-4 1.9865986108779908D0)) (list (list 12.0D0 9326.068359375D0 7.643926073797047D-4 1.999092936515808D0)) (list (list 12.0D0 9326.8603515625D0 7.430888945236802D-4 2.011587381362915D0)) (list (list 12.0D0 9327.49609375D0 7.459013722836971D-4 2.0240817070007324D0)) (list (list 12.0D0 9327.87890625D0 7.672603242099285D-4 2.03657603263855D0)) (list (list 12.0D0 9327.78515625D0 7.87162862252444D-4 2.049070358276367D0)) (list (list 12.0D0 9326.7255859375D0 7.857452146708965D-4 2.0615646839141846D0)) (list (list 12.0D0 9325.0419921875D0 7.785425987094641D-4 2.074059009552002D0)) (list (list 12.0D0 9324.240234375D0 7.853854331187904D-4 2.0865533351898194D0)) (list (list 12.0D0 9325.2177734375D0 7.900675991550088D-4 2.0990476608276367D0)) (list (list 12.0D0 9327.0537109375D0 7.757402490824461D-4 2.111541986465454D0)) (list (list 12.0D0 9328.2314453125D0 6.928035872988403D-4 2.1240363121032715D0)) (list (list 12.0D0 9328.603515625D0 5.185343907214701D-4 2.136530637741089D0)) (list (list 12.0D0 9329.7412109375D0 3.071698301937431D-4 2.1490249633789063D0)) (list (list 12.0D0 9333.0107421875D0 1.600754912942648D-4 2.1615192890167237D0)) (list (list 12.0D0 9334.064453125D0 1.354383275611326D-4 2.174013614654541D0)) (list (list 12.0D0 9333.44921875D0 1.9584868277888745D-4 2.1865079402923584D0)) (list (list 12.0D0 9330.7978515625D0 2.5350251235067845D-4 2.199002265930176D0)) (list (list 12.0D0 9328.5234375D0 2.520799753256142D-4 2.211496591567993D0)) (list (list 12.0D0 9327.1640625D0 2.0844161917921156D-4 2.2239909172058106D0)) (list (list 12.0D0 9326.0458984375D0 1.69305523741059D-4 2.236485242843628D0)) (list (list 12.0D0 9325.541015625D0 1.542070967843756D-4 2.2489795684814453D0)) (list (list 12.0D0 9326.59375D0 1.4989225019235164D-4 2.2614738941192627D0)) (list (list 12.0D0 9329.5244140625D0 1.443072542315349D-4 2.27396821975708D0)) (list (list 12.0D0 9332.421875D0 1.4128009206615389D-4 2.2864625453948975D0)) (list (list 12.0D0 9333.0380859375D0 1.4453398762270808D-4 2.298956871032715D0)) (list (list 12.0D0 9332.3671875D0 1.5328956942539662D-4 2.3114511966705323D0)) (list (list 12.0D0 9332.158203125D0 1.5353757771663368D-4 2.3239455223083496D0)) (list (list 12.0D0 9332.189453125D0 1.3183223200030625D-4 2.336439847946167D0)) (list (list 12.0D0 9328.96484375D0 1.0281831782776863D-4 2.3489341735839844D0)) (list (list 12.0D0 9325.69140625D0 9.576113370712847D-5 2.3614284992218018D0)) (list (list 12.0D0 9315.3896484375D0 8.855824125930667D-5 2.373922824859619D0)) (list (list 12.0D0 9310.4794921875D0 1.1208969226572663D-4 2.3864171504974366D0)) (list (list 12.0D0 9310.9326171875D0 1.3407430378720164D-4 2.398911476135254D0)) (list (list 12.0D0 9332.09765625D0 1.539105287520215D-4 2.4114058017730713D0)) (list (list 12.0D0 9336.5537109375D0 1.5292224998120219D-4 2.4239001274108887D0)) (list (list 12.0D0 9340.1611328125D0 1.7636215488892049D-4 2.436394453048706D0)) (list (list 12.0D0 9338.1171875D0 1.969672302948311D-4 2.4488887786865235D0)) (list (list 12.0D0 9324.244140625D0 2.4126525386236608D-4 2.461383104324341D0)) (list (list 12.0D0 9322.2734375D0 2.770781284198165D-4 2.4738776683807373D0)) (list (list 12.0D0 9322.4130859375D0 2.651797840371728D-4 2.4863719940185547D0)) (list (list 12.0D0 9323.5810546875D0 2.4005638260859996D-4 2.498866319656372D0)) (list (list 12.0D0 9325.818359375D0 2.0528081222437322D-4 2.5113606452941895D0)) (list (list 12.0D0 9326.0693359375D0 1.5956468996591866D-4 2.523854970932007D0)) (list (list 12.0D0 9349.7744140625D0 1.0182346886722371D-4 2.536349296569824D0)) (list (list 12.0D0 9323.509765625D0 2.1221980568952859D-4 2.561337947845459D0)) (list (list 12.0D0 9322.5244140625D0 2.540118002798408D-4 2.5738322734832764D0)) (list (list 12.0D0 9322.7373046875D0 2.707107341848314D-4 2.5863265991210938D0)) (list (list 12.0D0 9324.7099609375D0 2.54073238465935D-4 2.598820924758911D0)) (list (list 12.0D0 9326.162109375D0 2.0769747789017856D-4 2.6113152503967285D0)) (list (list 12.0D0 9322.6962890625D0 1.4305225340649486D-4 2.623809576034546D0)) (list (list 12.0D0 9319.337890625D0 1.2211772263981402D-4 2.6363039016723633D0)) (list (list 12.0D0 9322.416015625D0 1.3360167213249952D-4 2.6487982273101807D0)) (list (list 12.0D0 9330.8837890625D0 2.0639694412238896D-4 2.661292552947998D0)) (list (list 12.0D0 9330.6494140625D0 2.626164350658655D-4 2.6737868785858155D0)) (list (list 12.0D0 9328.8818359375D0 2.6217682170681656D-4 2.686281204223633D0)) (list (list 12.0D0 9326.2578125D0 2.132140944013372D-4 2.69877552986145D0)) (list (list 12.0D0 9322.931640625D0 1.452522410545498D-4 2.7112698554992676D0)) (list (list 12.0D0 9321.1640625D0 1.0346552153350786D-4 2.723764181137085D0)) (list (list 12.0D0 9319.494140625D0 1.0559980000834912D-4 2.7362585067749024D0)) (list (list 12.0D0 9315.7353515625D0 1.267319603357464D-4 2.7487528324127198D0)) (list (list 12.0D0 9314.2333984375D0 1.41267228173092D-4 2.761247158050537D0)) (list (list 12.0D0 9314.701171875D0 1.4935265062376857D-4 2.7737414836883545D0)) (list (list 12.0D0 9317.2919921875D0 1.5206537500489503D-4 2.786235809326172D0)) (list (list 12.0D0 9319.8583984375D0 1.3577697973232716D-4 2.7987301349639893D0)) (list (list 12.0D0 9317.3525390625D0 9.126891382038593D-5 2.8112244606018067D0)) (list (list 12.0D0 9340.1025390625D0 5.224534106673673D-5 2.823718786239624D0)) (list (list 12.0D0 9324.962890625D0 4.6508474042639136D-5 2.8362131118774414D0)) (list (list 12.0D0 9330.873046875D0 8.419956429861486D-5 2.848707437515259D0)) (list (list 12.0D0 9331.1494140625D0 1.1753323633456603D-4 2.861201763153076D0)) (list (list 12.0D0 9330.865234375D0 1.4672116958536208D-4 2.8736960887908936D0)) (list (list 12.0D0 9328.9306640625D0 1.6294470697175712D-4 2.886190414428711D0)) (list (list 12.0D0 9325.9150390625D0 1.6657232481520623D-4 2.8986847400665283D0)) (list (list 12.0D0 9323.8427734375D0 1.5840117703191936D-4 2.9111790657043457D0)) (list (list 12.0D0 9324.0302734375D0 1.3322808081284166D-4 2.923673391342163D0)) (list (list 12.0D0 9329.234375D0 1.0326367191737518D-4 2.9361677169799805D0)) (list (list 12.0D0 9333.20703125D0 1.0457522876095027D-4 2.948662042617798D0)) (list (list 12.0D0 9331.5107421875D0 1.1516387894516811D-4 2.9611563682556153D0)) (list (list 12.0D0 9322.0341796875D0 1.6071181744337082D-4 2.9736506938934326D0)) (list (list 12.0D0 9318.9921875D0 2.513599465601146D-4 2.98614501953125D0)) (list (list 12.0D0 9318.4423828125D0 3.274660266470164D-4 2.9986393451690674D0)) (list (list 12.0D0 9319.65625D0 3.395111416466534D-4 3.0111336708068848D0)) (list (list 12.0D0 9320.3359375D0 3.113348502665758D-4 3.0236282348632813D0)) (list (list 12.0D0 9343.693359375D0 2.0546636369545013D-4 3.0361225605010987D0)) (list (list 12.0D0 9321.51171875D0 5.247249500826001D-4 3.048616886138916D0)) (list (list 12.0D0 9323.40234375D0 7.55661225412041D-4 3.0611112117767334D0)) (list (list 12.0D0 9324.3583984375D0 8.891312754712999D-4 3.073605537414551D0)) (list (list 12.0D0 9325.3916015625D0 8.957583922892809D-4 3.086099863052368D0)) (list (list 12.0D0 9326.1259765625D0 8.93950869794935D-4 3.0985941886901856D0)) (list (list 12.0D0 9325.8232421875D0 9.472380043007433D-4 3.111088514328003D0)) (list (list 12.0D0 9324.4365234375D0 9.617118630558252D-4 3.1235828399658203D0)) (list (list 12.0D0 9325.9716796875D0 8.144347229972482D-4 3.1360771656036377D0)) (list (list 12.0D0 9306.017578125D0 6.859237910248339D-4 3.148571491241455D0)) (list (list 12.0D0 9308.185546875D0 9.162949281744659D-4 3.1610658168792725D0)) (list (list 12.0D0 9323.0615234375D0 0.0017582910368219018D0 3.17356014251709D0)) (list (list 12.0D0 9325.3525390625D0 0.0023982878774404526D0 3.1860544681549073D0)) (list (list 12.0D0 9329.2900390625D0 0.0026149519253522158D0 3.1985487937927246D0)) (list (list 12.0D0 9333.69140625D0 0.0024455725215375424D0 3.211043119430542D0)) (list (list 12.0D0 9335.453125D0 0.002059679478406906D0 3.2235374450683594D0)) (list (list 12.0D0 9333.501953125D0 0.001639659865759313D0 3.2360317707061768D0)) (list (list 12.0D0 9326.939453125D0 0.001554789487272501D0 3.248526096343994D0)) (list (list 12.0D0 9321.71484375D0 0.0018023718148469925D0 3.2610204219818116D0)) (list (list 12.0D0 9319.771484375D0 0.001779075595550239D0 3.273514747619629D0)) (list (list 12.0D0 9316.6474609375D0 0.0014776734169572592D0 3.2860090732574463D0)) (list (list 12.0D0 9315.8681640625D0 0.0011266737710684538D0 3.2985033988952637D0)) (list (list 12.0D0 9319.5283203125D0 9.730232995934784D-4 3.310997724533081D0)) (list (list 12.0D0 9334.2568359375D0 0.0015459496062248946D0 3.3234920501708985D0)) (list (list 12.0D0 9331.1484375D0 0.0019470129627734423D0 3.335986375808716D0)) (list (list 12.0D0 9328.1689453125D0 0.0018209187546744943D0 3.348480701446533D0)) (list (list 12.0D0 9323.634765625D0 0.0014940649271011353D0 3.3609750270843506D0)) (list (list 12.0D0 9321.41015625D0 0.0012965283822268248D0 3.373469352722168D0)) (list (list 12.0D0 9322.2255859375D0 0.0012703686952590943D0 3.3859636783599854D0)) (list (list 12.0D0 9324.626953125D0 0.0013926647370681167D0 3.3984580039978028D0)) (list (list 12.0D0 9326.7529296875D0 0.001469226786866784D0 3.41095232963562D0)) (list (list 12.0D0 9328.591796875D0 0.0014137029647827149D0 3.4234466552734375D0)) (list (list 12.0D0 9329.84375D0 0.001316501060500741D0 3.435940980911255D0)) (list (list 12.0D0 9330.2060546875D0 0.0012201874051243067D0 3.4484353065490723D0)) (list (list 12.0D0 9329.6142578125D0 0.0011175289982929826D0 3.4609296321868897D0)) (list (list 12.0D0 9328.396484375D0 0.0010582872200757266D0 3.473423957824707D0)) (list (list 12.0D0 9326.822265625D0 0.001158651546575129D0 3.4859182834625244D0)) (list (list 12.0D0 9325.779296875D0 0.0014360969653353095D0 3.498412609100342D0)) (list (list 12.0D0 9326.62890625D0 0.0017465951386839152D0 3.510906934738159D0)) (list (list 12.0D0 9327.94140625D0 0.0019836234860122204D0 3.5234012603759766D0)) (list (list 12.0D0 9327.7548828125D0 0.0020497809164226055D0 3.535895586013794D0)) (list (list 12.0D0 9324.8828125D0 0.0019727565813809634D0 3.5483899116516114D0)) (list (list 12.0D0 9321.2548828125D0 0.002046257024630904D0 3.5608842372894287D0)) (list (list 12.0D0 9319.6748046875D0 0.002231733873486519D0 3.573378801345825D0)) (list (list 12.0D0 9321.4169921875D0 0.002248929813504219D0 3.5858731269836426D0)) (list (list 12.0D0 9324.1337890625D0 0.002171711530536413D0 3.59836745262146D0)) (list (list 12.0D0 9324.55078125D0 0.002072141971439123D0 3.6108617782592774D0)) (list (list 12.0D0 9323.5927734375D0 0.002069459529593587D0 3.6233561038970948D0)) (list (list 12.0D0 9323.08203125D0 0.002149529755115509D0 3.635850429534912D0)) (list (list 12.0D0 9323.8662109375D0 0.0021089164074510336D0 3.6483447551727295D0)) (list (list 12.0D0 9326.423828125D0 0.0019010772230103612D0 3.660839080810547D0)) (list (list 12.0D0 9328.986328125D0 0.0017972249770537019D0 3.6733334064483643D0)) (list (list 12.0D0 9328.771484375D0 0.0018769399030134082D0 3.6858277320861817D0)) (list (list 12.0D0 9326.2177734375D0 0.0020370923448354006D0 3.698322057723999D0)) (list (list 12.0D0 9322.802734375D0 0.0019703246653079987D0 3.7108163833618164D0)) (list (list 12.0D0 9318.6826171875D0 0.0015807626768946648D0 3.723310708999634D0)) (list (list 12.0D0 9317.5126953125D0 0.0012192261638119817D0 3.735805034637451D0)) (list (list 12.0D0 9318.6630859375D0 0.0011170097859576345D0 3.7482993602752686D0)) (list (list 12.0D0 9319.6201171875D0 0.0012072325916960836D0 3.760793685913086D0)) (list (list 12.0D0 9317.9140625D0 0.0012286361306905747D0 3.7732880115509033D0)) (list (list 12.0D0 9317.2255859375D0 0.0012002700241282583D0 3.7857823371887207D0)) (list (list 12.0D0 9319.3828125D0 0.0012251734733581543D0 3.798276662826538D0)) (list (list 12.0D0 9324.2685546875D0 0.0015310029266402126D0 3.8107709884643555D0)) (list (list 12.0D0 9326.26953125D0 0.002050359733402729D0 3.823265314102173D0)) (list (list 12.0D0 9325.37109375D0 0.002440701238811016D0 3.8357596397399903D0)) (list (list 12.0D0 9324.548828125D0 0.002630973467603326D0 3.8482539653778076D0)) (list (list 12.0D0 9324.5751953125D0 0.0026064093690365553D0 3.860748291015625D0)) (list (list 12.0D0 9324.43359375D0 0.0024764344561845064D0 3.8732426166534424D0)) (list (list 12.0D0 9323.728515625D0 0.002334399614483118D0 3.8857369422912598D0)) (list (list 12.0D0 9322.7041015625D0 0.002103692851960659D0 3.898231267929077D0)) (list (list 12.0D0 9321.001953125D0 0.0016750606009736658D0 3.9107255935668946D0)) (list (list 12.0D0 9319.291015625D0 0.0011503433343023062D0 3.923219919204712D0)) (list (list 12.0D0 9319.126953125D0 7.199399988166988D-4 3.9357142448425293D0)) (list (list 12.0D0 9318.6337890625D0 4.981805104762316D-4 3.9482085704803467D0)) (list (list 12.0D0 9315.8359375D0 5.227351211942732D-4 3.960702896118164D0)) (list (list 12.0D0 9315.208984375D0 7.771774544380605D-4 3.9731972217559815D0)) (list (list 12.0D0 9318.2783203125D0 0.001145946211181581D0 3.985691547393799D0)) (list (list 12.0D0 9320.888671875D0 0.0015392457135021687D0 3.998185873031616D0)) (list (list 12.0D0 9322.0947265625D0 0.0017715400317683816D0 4.010680198669434D0)) (list (list 12.0D0 9322.44921875D0 0.0017393941525369883D0 4.02317476272583D0)) (list (list 12.0D0 9321.796875D0 0.0014631523517891765D0 4.035668849945068D0)) (list (list 12.0D0 9320.6669921875D0 0.001097803469747305D0 4.048163414001465D0)) (list (list 12.0D0 9320.451171875D0 8.114371448755264D-4 4.060657501220703D0)) (list (list 12.0D0 9321.939453125D0 6.792397471144795D-4 4.0731520652771D0)) (list (list 12.0D0 9324.5263671875D0 6.55570940580219D-4 4.085646152496338D0)) (list (list 12.0D0 9332.234375D0 6.55418902169913D-4 4.098140716552734D0)) (list (list 12.0D0 9337.421875D0 7.571153691969812D-4 4.110634803771973D0)) (list (list 12.0D0 9336.2744140625D0 7.544141844846308D-4 4.123129367828369D0)) (list (list 12.0D0 9330.0732421875D0 7.591183530166745D-4 4.135623455047607D0)) (list (list 12.0D0 9326.23046875D0 9.332485496997833D-4 4.148118019104004D0)) (list (list 12.0D0 9327.7265625D0 0.0010177260264754296D0 4.160612106323242D0)) (list (list 12.0D0 9333.5712890625D0 0.0010695515666157008D0 4.173106670379639D0)) (list (list 12.0D0 9335.3837890625D0 0.0010473593138158322D0 4.185600757598877D0)) (list (list 12.0D0 9331.15234375D0 8.562370203435421D-4 4.198095321655273D0)) (list (list 12.0D0 9325.875D0 8.266962831839919D-4 4.210589408874512D0)) (list (list 12.0D0 9324.6015625D0 8.526482270099223D-4 4.223083972930908D0)) (list (list 12.0D0 9324.90625D0 8.53434787131846D-4 4.2355780601501465D0)) (list (list 12.0D0 9325.619140625D0 7.938308408483863D-4 4.248072624206543D0)) (list (list 12.0D0 9327.2802734375D0 6.790914922021329D-4 4.260566711425781D0)) (list (list 12.0D0 9330.2001953125D0 6.107288645580411D-4 4.273061275482178D0)) (list (list 12.0D0 9332.4287109375D0 6.673721945844591D-4 4.285555362701416D0)) (list (list 12.0D0 9333.208984375D0 7.719544810242951D-4 4.2980499267578125D0)) (list (list 12.0D0 9333.2060546875D0 7.816741126589477D-4 4.310544013977051D0)) (list (list 12.0D0 9331.9658203125D0 6.45233376417309D-4 4.323038578033447D0)) (list (list 12.0D0 9330.193359375D0 4.961849190294743D-4 4.3355326652526856D0)) (list (list 12.0D0 9328.111328125D0 4.583266272675246D-4 4.348027229309082D0)) (list (list 12.0D0 9325.0244140625D0 4.598091763909906D-4 4.36052131652832D0)) (list (list 12.0D0 9323.984375D0 3.456403792370111D-4 4.373015880584717D0)) (list (list 12.0D0 9314.4404296875D0 2.2906340018380433D-4 4.385509967803955D0)) (list (list 12.0D0 9335.3134765625D0 2.2613683540839702D-4 4.398004531860352D0)) (list (list 12.0D0 9325.7294921875D0 3.052075335290283D-4 4.410499095916748D0)) (list (list 12.0D0 9325.5732421875D0 3.851712681353092D-4 4.422993183135986D0)) (list (list 12.0D0 9328.1259765625D0 3.650758881121874D-4 4.435487747192383D0)) (list (list 12.0D0 9331.40625D0 3.1376376864500344D-4 4.447981834411621D0)) (list (list 12.0D0 9333.3349609375D0 2.716856251936406D-4 4.460476398468018D0)) (list (list 12.0D0 9334.044921875D0 2.3697724100202322D-4 4.472970485687256D0)) (list (list 12.0D0 9333.548828125D0 2.0553542708512396D-4 4.485465049743652D0)) (list (list 12.0D0 9332.94140625D0 1.6963091911748052D-4 4.497959136962891D0)) (list (list 12.0D0 9337.9453125D0 1.1933167843380943D-4 4.510453701019287D0)) (list (list 12.0D0 9340.6455078125D0 1.0848131205420941D-4 4.522947788238525D0)) (list (list 12.0D0 9336.8720703125D0 1.5221395005937666D-4 4.535442352294922D0)) (list (list 12.0D0 9329.7158203125D0 2.8710515471175313D-4 4.54793643951416D0)) (list (list 12.0D0 9328.1982421875D0 4.1813074494712055D-4 4.560431003570557D0)) (list (list 12.0D0 9325.5390625D0 5.514813819900155D-4 4.572925090789795D0)) (list (list 12.0D0 9323.4755859375D0 7.027172250673175D-4 4.585419654846191D0)) (list (list 12.0D0 9323.1845703125D0 8.313875878229737D-4 4.59791374206543D0)) (list (list 12.0D0 9324.544921875D0 9.009141358546913D-4 4.610408306121826D0)) (list (list 12.0D0 9326.810546875D0 9.192093857564032D-4 4.6229023933410645D0)) (list (list 12.0D0 9328.724609375D0 9.033106616698206D-4 4.635396957397461D0)) (list (list 12.0D0 9329.412109375D0 8.536653476767242D-4 4.647891044616699D0)) (list (list 12.0D0 9328.5810546875D0 7.750954246148467D-4 4.660385608673096D0)) (list (list 12.0D0 9326.158203125D0 7.038795156404376D-4 4.672879695892334D0)) (list (list 12.0D0 9324.3056640625D0 6.839311099611223D-4 4.6853742599487305D0)) (list (list 12.0D0 9323.3544921875D0 6.825992604717612D-4 4.697868347167969D0)) (list (list 12.0D0 9321.4072265625D0 6.60382560454309D-4 4.710362911224365D0)) (list (list 12.0D0 9319.0185546875D0 6.50399480946362D-4 4.7228569984436035D0)) (list (list 12.0D0 9318.37890625D0 6.552627310156822D-4 4.7353515625D0)) (list (list 12.0D0 9319.5361328125D0 6.09532231464982D-4 4.747845649719238D0)) (list (list 12.0D0 9321.498046875D0 4.71355248009786D-4 4.760340213775635D0)) (list (list 12.0D0 9349.173828125D0 3.1310832127928734D-4 4.772834300994873D0)) (list (list 12.0D0 9350.6611328125D0 2.8620188822969794D-4 4.7853288650512695D0)) (list (list 12.0D0 9350.30859375D0 3.2130745239555836D-4 4.797822952270508D0)) (list (list 12.0D0 9346.53125D0 4.192209744360298D-4 4.810317516326904D0)) (list (list 12.0D0 9330.3876953125D0 6.398635450750589D-4 4.822811603546143D0)) (list (list 12.0D0 9328.708984375D0 9.372756467200816D-4 4.835306167602539D0)) (list (list 12.0D0 9327.5D0 0.0011228503426536918D0 4.847800254821777D0)) (list (list 12.0D0 9327.03515625D0 0.0012409817427396775D0 4.860294818878174D0)) (list (list 12.0D0 9327.2763671875D0 0.0013406096259132028D0 4.872788906097412D0)) (list (list 12.0D0 9327.890625D0 0.0014216289855539799D0 4.885283470153809D0)) (list (list 12.0D0 9328.2119140625D0 0.001436132355593145D0 4.897777557373047D0)) (list (list 12.0D0 9327.7314453125D0 0.0013121808879077435D0 4.910272121429443D0)) (list (list 12.0D0 9326.9599609375D0 0.0010206795996055007D0 4.922766208648682D0)) (list (list 12.0D0 9332.1171875D0 6.221255171112716D-4 4.935260772705078D0)) (list (list 12.0D0 9314.3427734375D0 4.736854461953044D-4 4.947755336761475D0)) (list (list 12.0D0 9317.248046875D0 5.568121559917927D-4 4.960249423980713D0)) (list (list 12.0D0 9323.3515625D0 8.96981218829751D-4 4.972743988037109D0)) (list (list 12.0D0 9322.9873046875D0 0.0011389299761503935D0 4.985238075256348D0)) (list (list 12.0D0 9323.79296875D0 0.0012126746587455273D0 4.997732639312744D0)) (list (list 12.0D0 9326.0068359375D0 0.0011569561902433634D0 5.010226726531982D0)) (list (list 12.0D0 9327.1357421875D0 0.0010429291287437082D0 5.022721290588379D0)) (list (list 12.0D0 9325.59765625D0 9.172699064947665D-4 5.035215377807617D0)) (list (list 12.0D0 9322.6259765625D0 8.582332520745695D-4 5.047709941864014D0)) (list (list 12.0D0 9320.044921875D0 7.856915472075343D-4 5.060204029083252D0)) (list (list 12.0D0 9318.67578125D0 6.179285701364279D-4 5.072698593139648D0)) (list (list 12.0D0 9318.0556640625D0 4.2455014772713185D-4 5.085192680358887D0)) (list (list 12.0D0 9318.1552734375D0 3.241924860049039D-4 5.097687244415283D0)) (list (list 12.0D0 9318.8203125D0 3.8553125341422856D-4 5.1101813316345215D0)) (list (list 12.0D0 9319.4111328125D0 5.34776714630425D-4 5.122675895690918D0)) (list (list 12.0D0 9316.7744140625D0 5.66210481338203D-4 5.135169982910156D0)) (list (list 12.0D0 9344.568359375D0 4.985656123608351D-4 5.147664546966553D0)) (list (list 12.0D0 9349.1318359375D0 4.8258312745019794D-4 5.160158634185791D0)) (list (list 12.0D0 9354.220703125D0 3.8319939631037414D-4 5.1726531982421875D0)) (list (list 12.0D0 9383.830078125D0 2.801193040795624D-4 5.185147285461426D0)) (list (list 12.0D0 9379.9365234375D0 2.5563364033587277D-4 5.197641849517822D0)) (list (list 12.0D0 9352.146484375D0 2.8625971754081547D-4 5.235124588012695D0)) (list (list 12.0D0 9327.990234375D0 0.0018276084447279573D0 5.247619152069092D0)) (list (list 12.0D0 9328.587890625D0 0.002532210433855653D0 5.26011323928833D0)) (list (list 12.0D0 9327.8291015625D0 0.0029325082432478667D0 5.272607803344727D0)) (list (list 12.0D0 9325.0703125D0 0.0030741170048713684D0 5.285101890563965D0)) (list (list 12.0D0 9323.26953125D0 0.003201530547812581D0 5.297596454620361D0)) (list (list 12.0D0 9324.63671875D0 0.0031582654919475317D0 5.3100905418396D0)) (list (list 12.0D0 9327.1328125D0 0.003151045413687825D0 5.322585105895996D0)) (list (list 12.0D0 9327.3798828125D0 0.0032053187023848296D0 5.335079193115234D0)) (list (list 12.0D0 9326.345703125D0 0.0033308241982012987D0 5.347573757171631D0)) (list (list 12.0D0 9326.306640625D0 0.003369042417034507D0 5.360067844390869D0)) (list (list 12.0D0 9327.2138671875D0 0.003006837097927928D0 5.372562408447266D0)) (list (list 12.0D0 9325.8779296875D0 0.0021674963645637036D0 5.385056495666504D0)) (list (list 12.0D0 9321.97265625D0 0.0013502818765118719D0 5.3975510597229D0)) (list (list 12.0D0 9321.4736328125D0 8.679268066771328D-4 5.410045146942139D0)) (list (list 12.0D0 9300.630859375D0 5.626309430226684D-4 5.422539710998535D0)) (list (list 12.0D0 9275.8740234375D0 3.615559544414282D-4 5.435033798217773D0)) (list (list 12.0D0 9277.232421875D0 3.722171823028475D-4 5.44752836227417D0)) (list (list 12.0D0 9274.953125D0 3.125477524008602D-4 5.460022449493408D0)) (list (list 12.0D0 9273.9638671875D0 2.532995131332427D-4 5.472517013549805D0)) (list (list 12.0D0 9275.43359375D0 2.3144151782616973D-4 5.485011100769043D0)) (list (list 12.0D0 9308.9150390625D0 2.6696358690969646D-4 5.4975056648254395D0)) (list (list 12.0D0 9344.4921875D0 4.4475062168203294D-4 5.510000228881836D0)) (list (list 12.0D0 9357.4375D0 3.4457186120562256D-4 5.522494316101074D0)) (list (list 12.0D0 9360.10546875D0 3.9918816764838994D-4 5.534988880157471D0)) (list (list 12.0D0 9356.169921875D0 4.0932383853942156D-4 5.547482967376709D0)) (list (list 12.0D0 9348.4921875D0 4.320535808801651D-4 5.5599775314331055D0)) (list (list 12.0D0 9345.7431640625D0 3.85464692953974D-4 5.572471618652344D0)) (list (list 12.0D0 9346.53515625D0 2.7247858815826476D-4 5.58496618270874D0)) (list (list 12.0D0 9322.80859375D0 1.8483868916518986D-4 5.5974602699279785D0)) (list (list 12.0D0 9322.80859375D0 0.0D0 5.609954833984375D0)) (list (list 13.0D0 7424.216796875D0 5.6906315876403824D-5 0.02498866245150566D0)) (list (list 13.0D0 7425.3515625D0 8.722172060515732D-5 0.03748299181461334D0)) (list (list 13.0D0 7421.419921875D0 9.087406215257943D-5 0.04997732490301132D0)) (list (list 13.0D0 7417.66259765625D0 8.072503260336816D-5 0.062471654266119D0)) (list (list 13.0D0 7418.7568359375D0 6.25846951152198D-5 0.07496598362922669D0)) (list (list 13.0D0 7445.88525390625D0 2.0161278371233493D-4 0.08746031671762467D0)) (list (list 13.0D0 7445.51708984375D0 2.4241830396931619D-4 0.09995464980602265D0)) (list (list 13.0D0 7460.966796875D0 3.7773061194457114D-4 0.11244898289442063D0)) (list (list 13.0D0 7482.41796875D0 3.380478301551193D-4 0.124943308532238D0)) (list (list 13.0D0 7479.2109375D0 5.510497721843422D-4 0.137437641620636D0)) (list (list 13.0D0 7449.7275390625D0 8.83792934473604D-4 0.14993196725845337D0)) (list (list 13.0D0 7464.03173828125D0 0.0019156192429363728D0 0.16242630779743195D0)) (list (list 13.0D0 7460.7265625D0 0.0027724436949938536D0 0.17492063343524933D0)) (list (list 13.0D0 7460.17333984375D0 0.002979765646159649D0 0.1874149590730667D0)) (list (list 13.0D0 7462.2587890625D0 0.0024873758666217327D0 0.1999092996120453D0)) (list (list 13.0D0 7465.11279296875D0 0.0019489012192934752D0 0.21240362524986267D0)) (list (list 13.0D0 7464.16552734375D0 0.001703582238405943D0 0.22489796578884125D0)) (list (list 13.0D0 7459.7216796875D0 0.001955743646249175D0 0.23739229142665863D0)) (list (list 13.0D0 7457.744140625D0 0.002446704311296344D0 0.249886617064476D0)) (list (list 13.0D0 7457.9345703125D0 0.00284199183806777D0 0.2623809576034546D0)) (list (list 13.0D0 7458.6337890625D0 0.0032586511224508286D0 0.274875283241272D0)) (list (list 13.0D0 7460.63818359375D0 0.003629247425124049D0 0.28736960887908936D0)) (list (list 13.0D0 7463.712890625D0 0.003871659282594919D0 0.29986393451690674D0)) (list (list 13.0D0 7465.28076171875D0 0.003847810672596097D0 0.3123582899570465D0)) (list (list 13.0D0 7463.4892578125D0 0.0034522449132055045D0 0.3248526155948639D0)) (list (list 13.0D0 7460.62744140625D0 0.0032993433997035027D0 0.3373469412326813D0)) (list (list 13.0D0 7460.69873046875D0 0.0034476113505661488D0 0.34984126687049866D0)) (list (list 13.0D0 7463.85498046875D0 0.003768735332414508D0 0.36233559250831604D0)) (list (list 13.0D0 7466.5576171875D0 0.004106955137103796D0 0.3748299181461334D0)) (list (list 13.0D0 7467.6767578125D0 0.0039659528993070126D0 0.3873242437839508D0)) (list (list 13.0D0 7467.8720703125D0 0.0032217176631093026D0 0.3998185992240906D0)) (list (list 13.0D0 7468.4345703125D0 0.0021158952731639147D0 0.41231292486190796D0)) (list (list 13.0D0 7470.23583984375D0 0.0012986855581402779D0 0.42480725049972534D0)) (list (list 13.0D0 7450.447265625D0 0.0011423439718782902D0 0.4373015761375427D0)) (list (list 13.0D0 7463.72998046875D0 0.0022246018052101136D0 0.4497959315776825D0)) (list (list 13.0D0 7462.265625D0 0.003481338731944561D0 0.4622902572154999D0)) (list (list 13.0D0 7461.5927734375D0 0.0043488251976668835D0 0.47478458285331726D0)) (list (list 13.0D0 7460.5244140625D0 0.004765013232827187D0 0.48727890849113465D0)) (list (list 13.0D0 7459.90478515625D0 0.004884923342615366D0 0.499773234128952D0)) (list (list 13.0D0 7460.42041015625D0 0.004809753969311714D0 0.5122675895690918D0)) (list (list 13.0D0 7461.859375D0 0.004564042668789625D0 0.5247619152069092D0)) (list (list 13.0D0 7463.39453125D0 0.004031715914607048D0 0.5372562408447266D0)) (list (list 13.0D0 7464.44970703125D0 0.0030869466718286276D0 0.549750566482544D0)) (list (list 13.0D0 7464.02490234375D0 0.0019849492236971855D0 0.5622448921203613D0)) (list (list 13.0D0 7463.0849609375D0 0.0013298036064952612D0 0.5747392177581787D0)) (list (list 13.0D0 7461.55126953125D0 0.0013917275937274099D0 0.5872335433959961D0)) (list (list 13.0D0 7457.595703125D0 0.0019584177061915398D0 0.5997278690338135D0)) (list (list 13.0D0 7456.25D0 0.002543708309531212D0 0.6122221946716309D0)) (list (list 13.0D0 7456.6796875D0 0.0028266136068850756D0 0.624716579914093D0)) (list (list 13.0D0 7457.33642578125D0 0.0028705839067697525D0 0.6372109055519104D0)) (list (list 13.0D0 7457.4462890625D0 0.002816852880641818D0 0.6497052311897278D0)) (list (list 13.0D0 7457.603515625D0 0.002740317489951849D0 0.6621995568275452D0)) (list (list 13.0D0 7458.5625D0 0.0026312025729566813D0 0.6746938824653626D0)) (list (list 13.0D0 7459.60205078125D0 0.002458075527101755D0 0.6871882081031799D0)) (list (list 13.0D0 7460.00439453125D0 0.002189589198678732D0 0.6996825337409973D0)) (list (list 13.0D0 7460.25341796875D0 0.0018537522992119193D0 0.7121768593788147D0)) (list (list 13.0D0 7460.7080078125D0 0.0015120944008231163D0 0.7246711850166321D0)) (list (list 13.0D0 7460.6318359375D0 0.001230571186169982D0 0.7371655106544495D0)) (list (list 13.0D0 7459.84619140625D0 0.001048646285198629D0 0.7496598362922669D0)) (list (list 13.0D0 7459.12158203125D0 9.459351422265172D-4 0.762154221534729D0)) (list (list 13.0D0 7459.02001953125D0 8.721904014237225D-4 0.7746485471725464D0)) (list (list 13.0D0 7459.22119140625D0 8.202418684959412D-4 0.7871428728103638D0)) (list (list 13.0D0 7459.3154296875D0 8.058227831497788D-4 0.7996371984481812D0)) (list (list 13.0D0 7459.1064453125D0 8.263021009042859D-4 0.8121315240859985D0)) (list (list 13.0D0 7458.923828125D0 8.625774062238634D-4 0.8246258497238159D0)) (list (list 13.0D0 7459.3388671875D0 9.048461797647178D-4 0.8371201753616333D0)) (list (list 13.0D0 7459.87255859375D0 9.572998969815671D-4 0.8496145009994507D0)) (list (list 13.0D0 7459.21240234375D0 9.899839060381055D-4 0.8621088266372681D0)) (list (list 13.0D0 7456.6318359375D0 9.788100142031908D-4 0.8746031522750855D0)) (list (list 13.0D0 7453.51904296875D0 9.444261086173356D-4 0.8870974779129028D0)) (list (list 13.0D0 7451.12255859375D0 8.967486792244017D-4 0.899591863155365D0)) (list (list 13.0D0 7451.26708984375D0 8.523975848220289D-4 0.9120861887931824D0)) (list (list 13.0D0 7453.9482421875D0 8.878289954736829D-4 0.9245805144309998D0)) (list (list 13.0D0 7457.2080078125D0 0.0010697008110582829D0 0.9370748400688171D0)) (list (list 13.0D0 7459.53662109375D0 0.0012914288090541959D0 0.9495691657066345D0)) (list (list 13.0D0 7461.20458984375D0 0.0014635988045483828D0 0.9620634913444519D0)) (list (list 13.0D0 7461.94189453125D0 0.0015610804548487068D0 0.9745578169822693D0)) (list (list 13.0D0 7461.01904296875D0 0.0015731435269117356D0 0.9870521426200867D0)) (list (list 13.0D0 7459.95654296875D0 0.0015832182252779603D0 0.999546468257904D0)) (list (list 13.0D0 7459.89599609375D0 0.0016272172797471285D0 1.0120408535003662D0)) (list (list 13.0D0 7460.4130859375D0 0.0017044066917151213D0 1.0245351791381836D0)) (list (list 13.0D0 7460.85693359375D0 0.0017973218346014619D0 1.037029504776001D0)) (list (list 13.0D0 7461.55615234375D0 0.0018924381583929062D0 1.0495238304138184D0)) (list (list 13.0D0 7462.61767578125D0 0.0019801915623247624D0 1.0620181560516358D0)) (list (list 13.0D0 7463.13671875D0 0.0020555544178932906D0 1.0745124816894532D0)) (list (list 13.0D0 7462.33203125D0 0.00212516519241035D0 1.0870068073272705D0)) (list (list 13.0D0 7460.7451171875D0 0.0022476352751255036D0 1.099501132965088D0)) (list (list 13.0D0 7459.73291015625D0 0.0024221602361649275D0 1.1119954586029053D0)) (list (list 13.0D0 7459.54150390625D0 0.002587833907455206D0 1.1244897842407227D0)) (list (list 13.0D0 7459.60009765625D0 0.0027125475462526083D0 1.13698410987854D0)) (list (list 13.0D0 7459.7763671875D0 0.0027593194972723723D0 1.1494784355163575D0)) (list (list 13.0D0 7460.205078125D0 0.002685374114662409D0 1.1619727611541748D0)) (list (list 13.0D0 7460.576171875D0 0.0024884629528969527D0 1.1744670867919922D0)) (list (list 13.0D0 7460.49951171875D0 0.0022358435671776533D0 1.1869614124298096D0)) (list (list 13.0D0 7460.0703125D0 0.0020201904699206353D0 1.199455738067627D0)) (list (list 13.0D0 7459.22314453125D0 0.0018791448092088104D0 1.2119500637054444D0)) (list (list 13.0D0 7457.87646484375D0 0.0018257201882079244D0 1.2244443893432618D0)) (list (list 13.0D0 7456.85986328125D0 0.0018871157662943006D0 1.236938714981079D0)) (list (list 13.0D0 7456.86376953125D0 0.0020403675734996796D0 1.249433159828186D0)) (list (list 13.0D0 7457.583984375D0 0.002229413017630577D0 1.2619274854660035D0)) (list (list 13.0D0 7458.05029296875D0 0.0023963528219610453D0 1.2744218111038208D0)) (list (list 13.0D0 7457.59375D0 0.002515190513804555D0 1.2869161367416382D0)) (list (list 13.0D0 7456.46484375D0 0.0026146206073462963D0 1.2994104623794556D0)) (list (list 13.0D0 7455.892578125D0 0.0026866993866860867D0 1.311904788017273D0)) (list (list 13.0D0 7457.14501953125D0 0.002658488228917122D0 1.3243991136550904D0)) (list (list 13.0D0 7459.90869140625D0 0.0025997667107731104D0 1.3368934392929078D0)) (list (list 13.0D0 7462.46044921875D0 0.0025916513986885548D0 1.349387764930725D0)) (list (list 13.0D0 7463.40576171875D0 0.0025476794689893723D0 1.3618820905685425D0)) (list (list 13.0D0 7463.01318359375D0 0.0023990280460566283D0 1.3743764162063599D0)) (list (list 13.0D0 7462.11962890625D0 0.0020719217136502266D0 1.3868707418441773D0)) (list (list 13.0D0 7460.3427734375D0 0.001502438448369503D0 1.3993650674819947D0)) (list (list 13.0D0 7456.7470703125D0 8.713378920219839D-4 1.411859393119812D0)) (list (list 13.0D0 7480.3076171875D0 4.180064133834094D-4 1.4243537187576294D0)) (list (list 13.0D0 7475.95751953125D0 3.5741255851462484D-4 1.4368480443954468D0)) (list (list 13.0D0 7462.56494140625D0 6.613167352043092D-4 1.4493423700332642D0)) (list (list 13.0D0 7460.69482421875D0 9.638937772251666D-4 1.4618366956710816D0)) (list (list 13.0D0 7460.12158203125D0 0.0012803340796381236D0 1.474331021308899D0)) (list (list 13.0D0 7459.46875D0 0.001594769419170916D0 1.4868253469467163D0)) (list (list 13.0D0 7459.376953125D0 0.001818966818973422D0 1.4993196725845337D0)) (list (list 13.0D0 7460.03955078125D0 0.0018771315226331354D0 1.5118141174316407D0)) (list (list 13.0D0 7460.9248046875D0 0.0018026656471192837D0 1.524308443069458D0)) (list (list 13.0D0 7461.55322265625D0 0.0016679986147210002D0 1.5368027687072754D0)) (list (list 13.0D0 7461.25439453125D0 0.0015277201309800148D0 1.5492970943450928D0)) (list (list 13.0D0 7459.8544921875D0 0.0014219206059351564D0 1.5617914199829102D0)) (list (list 13.0D0 7458.16259765625D0 0.0013546962291002274D0 1.5742857456207276D0)) (list (list 13.0D0 7457.27490234375D0 0.0012639823835343123D0 1.586780071258545D0)) (list (list 13.0D0 7457.18896484375D0 0.0011401813244447112D0 1.5992743968963623D0)) (list (list 13.0D0 7457.2578125D0 0.0010378650622442365D0 1.6117687225341797D0)) (list (list 13.0D0 7457.46044921875D0 9.76609531790018D-4 1.624263048171997D0)) (list (list 13.0D0 7458.48046875D0 9.099647868424654D-4 1.6367573738098145D0)) (list (list 13.0D0 7460.46044921875D0 8.245399221777916D-4 1.6492516994476319D0)) (list (list 13.0D0 7461.6611328125D0 7.767282659187913D-4 1.6617460250854493D0)) (list (list 13.0D0 7461.14990234375D0 7.999820518307388D-4 1.6742403507232666D0)) (list (list 13.0D0 7459.44873046875D0 8.902111439965665D-4 1.686734676361084D0)) (list (list 13.0D0 7458.6220703125D0 0.0010039927437901497D0 1.6992290019989014D0)) (list (list 13.0D0 7458.62158203125D0 0.0011147168697789312D0 1.7117233276367188D0)) (list (list 13.0D0 7458.25732421875D0 0.0012291193706914783D0 1.7242176532745362D0)) (list (list 13.0D0 7457.29443359375D0 0.001349384430795908D0 1.7367119789123536D0)) (list (list 13.0D0 7456.9912109375D0 0.0014835119945928455D0 1.749206304550171D0)) (list (list 13.0D0 7457.90283203125D0 0.0016426002839580179D0 1.7617006301879883D0)) (list (list 13.0D0 7458.98291015625D0 0.0018306219717487693D0 1.7741949558258057D0)) (list (list 13.0D0 7459.41015625D0 0.0019870928954333067D0 1.7866894006729126D0)) (list (list 13.0D0 7459.9931640625D0 0.0020760023035109043D0 1.79918372631073D0)) (list (list 13.0D0 7461.0302734375D0 0.0021252664737403393D0 1.8116780519485474D0)) (list (list 13.0D0 7461.37109375D0 0.002157357055693865D0 1.8241723775863648D0)) (list (list 13.0D0 7460.5341796875D0 0.0021942071616649628D0 1.8366667032241822D0)) (list (list 13.0D0 7459.4912109375D0 0.0022867824882268906D0 1.8491610288619996D0)) (list (list 13.0D0 7459.06982421875D0 0.0024142907932400704D0 1.861655354499817D0)) (list (list 13.0D0 7459.396484375D0 0.0025195067282766104D0 1.8741496801376343D0)) (list (list 13.0D0 7459.734375D0 0.0025825153570622206D0 1.8866440057754517D0)) (list (list 13.0D0 7459.1533203125D0 0.0026115234941244126D0 1.899138331413269D0)) (list (list 13.0D0 7457.6171875D0 0.0026719446759670973D0 1.9116326570510865D0)) (list (list 13.0D0 7456.3271484375D0 0.002843571826815605D0 1.9241269826889038D0)) (list (list 13.0D0 7456.3720703125D0 0.0031021039467304945D0 1.9366213083267212D0)) (list (list 13.0D0 7457.60791015625D0 0.003395589767023921D0 1.9491156339645386D0)) (list (list 13.0D0 7459.1689453125D0 0.0036456622183322907D0 1.961609959602356D0)) (list (list 13.0D0 7460.36083984375D0 0.0037545987870544196D0 1.9741042852401734D0)) (list (list 13.0D0 7461.2900390625D0 0.003744967980310321D0 1.9865986108779908D0)) (list (list 13.0D0 7462.01171875D0 0.0037282442208379507D0 1.999092936515808D0)) (list (list 13.0D0 7462.375D0 0.0037807063199579716D0 2.011587381362915D0)) (list (list 13.0D0 7462.47998046875D0 0.0038978001102805138D0 2.0240817070007324D0)) (list (list 13.0D0 7462.5615234375D0 0.004042190499603748D0 2.03657603263855D0)) (list (list 13.0D0 7462.44384765625D0 0.004191295243799686D0 2.049070358276367D0)) (list (list 13.0D0 7461.6923828125D0 0.004355141427367926D0 2.0615646839141846D0)) (list (list 13.0D0 7460.61572265625D0 0.00459344033151865D0 2.074059009552002D0)) (list (list 13.0D0 7460.2841796875D0 0.004885952454060316D0 2.0865533351898194D0)) (list (list 13.0D0 7461.12890625D0 0.005104391369968653D0 2.0990476608276367D0)) (list (list 13.0D0 7462.2294921875D0 0.0051276423037052155D0 2.111541986465454D0)) (list (list 13.0D0 7462.103515625D0 0.004726850893348455D0 2.1240363121032715D0)) (list (list 13.0D0 7460.2470703125D0 0.003895132103934884D0 2.136530637741089D0)) (list (list 13.0D0 7458.48095703125D0 0.0028895032592117787D0 2.1490249633789063D0)) (list (list 13.0D0 7458.31005859375D0 0.0018662807997316122D0 2.1615192890167237D0)) (list (list 13.0D0 7473.037109375D0 9.118125890381634D-4 2.174013614654541D0)) (list (list 13.0D0 7476.1865234375D0 0.0010610228637233377D0 2.1865079402923584D0)) (list (list 13.0D0 7452.294921875D0 0.0015943031758069992D0 2.199002265930176D0)) (list (list 13.0D0 7459.77734375D0 0.0016780843725427986D0 2.211496591567993D0)) (list (list 13.0D0 7465.09814453125D0 0.0013766264310106636D0 2.2239909172058106D0)) (list (list 13.0D0 7466.685546875D0 9.813143406063319D-4 2.236485242843628D0)) (list (list 13.0D0 7439.74072265625D0 6.690118461847305D-4 2.2489795684814453D0)) (list (list 13.0D0 7441.67041015625D0 5.510867340490222D-4 2.2614738941192627D0)) (list (list 13.0D0 7475.3232421875D0 8.561413269490004D-4 2.27396821975708D0)) (list (list 13.0D0 7474.81591796875D0 0.0010695673990994692D0 2.2864625453948975D0)) (list (list 13.0D0 7451.154296875D0 9.386826422996819D-4 2.298956871032715D0)) (list (list 13.0D0 7464.07373046875D0 0.0022685322910547257D0 2.3114511966705323D0)) (list (list 13.0D0 7461.73388671875D0 0.0031094246078282595D0 2.3239455223083496D0)) (list (list 13.0D0 7461.2939453125D0 0.0032562254928052426D0 2.336439847946167D0)) (list (list 13.0D0 7462.43896484375D0 0.002611663658171892D0 2.3489341735839844D0)) (list (list 13.0D0 7465.595703125D0 0.0017154889646917582D0 2.3614284992218018D0)) (list (list 13.0D0 7468.498046875D0 0.0011439821682870388D0 2.373922824859619D0)) (list (list 13.0D0 7473.22900390625D0 9.757478255778551D-4 2.3864171504974366D0)) (list (list 13.0D0 7475.12744140625D0 8.98060214240104D-4 2.398911476135254D0)) (list (list 13.0D0 7470.966796875D0 7.769762305542827D-4 2.4114058017730713D0)) (list (list 13.0D0 7493.83251953125D0 6.659876089543104D-4 2.4239001274108887D0)) (list (list 13.0D0 7471.58056640625D0 0.0012379625113680959D0 2.436394453048706D0)) (list (list 13.0D0 7471.2412109375D0 0.001787326531484723D0 2.4488887786865235D0)) (list (list 13.0D0 7464.99951171875D0 0.00235781935043633D0 2.461383104324341D0)) (list (list 13.0D0 7457.15869140625D0 0.003494849195703864D0 2.4738776683807373D0)) (list (list 13.0D0 7456.66650390625D0 0.0043273018673062325D0 2.4863719940185547D0)) (list (list 13.0D0 7457.94677734375D0 0.004376273136585951D0 2.498866319656372D0)) (list (list 13.0D0 7460.30810546875D0 0.0038200162816792727D0 2.5113606452941895D0)) (list (list 13.0D0 7461.712890625D0 0.0029770194087177515D0 2.523854970932007D0)) (list (list 13.0D0 7460.9111328125D0 0.002317338017746806D0 2.536349296569824D0)) (list (list 13.0D0 7459.0234375D0 0.0022620828822255135D0 2.5488436222076416D0)) (list (list 13.0D0 7457.66064453125D0 0.002707443432882428D0 2.561337947845459D0)) (list (list 13.0D0 7457.56494140625D0 0.003305799560621381D0 2.5738322734832764D0)) (list (list 13.0D0 7458.029296875D0 0.003742743283510208D0 2.5863265991210938D0)) (list (list 13.0D0 7459.07275390625D0 0.0037199975922703743D0 2.598820924758911D0)) (list (list 13.0D0 7459.94482421875D0 0.0032289971131831408D0 2.6113152503967285D0)) (list (list 13.0D0 7460.0634765625D0 0.002627162029966712D0 2.623809576034546D0)) (list (list 13.0D0 7459.89306640625D0 0.002242748159915209D0 2.6363039016723633D0)) (list (list 13.0D0 7460.017578125D0 0.0020478973165154457D0 2.6487982273101807D0)) (list (list 13.0D0 7460.486328125D0 0.0018840604461729527D0 2.661292552947998D0)) (list (list 13.0D0 7460.80615234375D0 0.0017460656818002463D0 2.6737868785858155D0)) (list (list 13.0D0 7460.56494140625D0 0.0017108524916693569D0 2.686281204223633D0)) (list (list 13.0D0 7459.7724609375D0 0.0018221301725134254D0 2.69877552986145D0)) (list (list 13.0D0 7459.24658203125D0 0.002053262898698449D0 2.7112698554992676D0)) (list (list 13.0D0 7459.5009765625D0 0.002208499237895012D0 2.723764181137085D0)) (list (list 13.0D0 7460.5048828125D0 0.0020408127456903458D0 2.7362585067749024D0)) (list (list 13.0D0 7460.72412109375D0 0.0015354609349742532D0 2.7487528324127198D0)) (list (list 13.0D0 7458.39306640625D0 9.621199569664896D-4 2.761247158050537D0)) (list (list 13.0D0 7453.2275390625D0 6.881501758471131D-4 2.7737414836883545D0)) (list (list 13.0D0 7450.490234375D0 7.453744765371084D-4 2.786235809326172D0)) (list (list 13.0D0 7452.53076171875D0 8.953633368946612D-4 2.7987301349639893D0)) (list (list 13.0D0 7456.4697265625D0 0.001096774241887033D0 2.8112244606018067D0)) (list (list 13.0D0 7460.57763671875D0 0.0012738039949908853D0 2.823718786239624D0)) (list (list 13.0D0 7464.1591796875D0 0.0014016445493325592D0 2.8362131118774414D0)) (list (list 13.0D0 7465.45751953125D0 0.0014463510597124696D0 2.848707437515259D0)) (list (list 13.0D0 7465.5390625D0 0.0014683877816423774D0 2.861201763153076D0)) (list (list 13.0D0 7465.40771484375D0 0.0015224884264171124D0 2.8736960887908936D0)) (list (list 13.0D0 7465.33203125D0 0.0014800343196839095D0 2.886190414428711D0)) (list (list 13.0D0 7466.3974609375D0 0.0012218181509524584D0 2.8986847400665283D0)) (list (list 13.0D0 7467.89501953125D0 8.893788326531649D-4 2.9111790657043457D0)) (list (list 13.0D0 7466.75537109375D0 7.170317694544792D-4 2.923673391342163D0)) (list (list 13.0D0 7463.9130859375D0 8.98689788300544D-4 2.9361677169799805D0)) (list (list 13.0D0 7462.37890625D0 0.0013376021524891258D0 2.948662042617798D0)) (list (list 13.0D0 7461.2080078125D0 0.0017740102484822274D0 2.9611563682556153D0)) (list (list 13.0D0 7460.0263671875D0 0.002054839162155986D0 2.9736506938934326D0)) (list (list 13.0D0 7459.82861328125D0 0.0021023626904934645D0 2.98614501953125D0)) (list (list 13.0D0 7460.74267578125D0 0.001980875851586461D0 2.9986393451690674D0)) (list (list 13.0D0 7460.841796875D0 0.0019147784914821387D0 3.0111336708068848D0)) (list (list 13.0D0 7460.0576171875D0 0.002172035863623023D0 3.0236282348632813D0)) (list (list 13.0D0 7460.1123046875D0 0.0027591923717409373D0 3.0361225605010987D0)) (list (list 13.0D0 7461.3076171875D0 0.0033408652525395155D0 3.048616886138916D0)) (list (list 13.0D0 7462.10546875D0 0.003586253384128213D0 3.0611112117767334D0)) (list (list 13.0D0 7462.2763671875D0 0.003450229065492749D0 3.073605537414551D0)) (list (list 13.0D0 7462.1572265625D0 0.0031443238258361817D0 3.086099863052368D0)) (list (list 13.0D0 7461.96923828125D0 0.0028768947813659907D0 3.0985941886901856D0)) (list (list 13.0D0 7461.36669921875D0 0.002784352982416749D0 3.111088514328003D0)) (list (list 13.0D0 7459.89599609375D0 0.0029212411027401686D0 3.1235828399658203D0)) (list (list 13.0D0 7458.568359375D0 0.003205919871106744D0 3.1360771656036377D0)) (list (list 13.0D0 7459.72119140625D0 0.0033166937064379454D0 3.148571491241455D0)) (list (list 13.0D0 7463.20263671875D0 0.0032802715431898833D0 3.1610658168792725D0)) (list (list 13.0D0 7467.09814453125D0 0.003342254087328911D0 3.17356014251709D0)) (list (list 13.0D0 7469.05859375D0 0.003390764817595482D0 3.1860544681549073D0)) (list (list 13.0D0 7467.90478515625D0 0.003120346460491419D0 3.1985487937927246D0)) (list (list 13.0D0 7464.43505859375D0 0.0026579820550978184D0 3.211043119430542D0)) (list (list 13.0D0 7462.63232421875D0 0.002035886747762561D0 3.2235374450683594D0)) (list (list 13.0D0 7466.94580078125D0 0.0013737628469243646D0 3.2360317707061768D0)) (list (list 13.0D0 7446.16943359375D0 7.930153515189886D-4 3.248526096343994D0)) (list (list 13.0D0 7424.890625D0 7.785940542817116D-4 3.2610204219818116D0)) (list (list 13.0D0 7429.978515625D0 0.001374726416543126D0 3.273514747619629D0)) (list (list 13.0D0 7435.53271484375D0 0.002002149820327759D0 3.2860090732574463D0)) (list (list 13.0D0 7456.63134765625D0 0.0039013500791043043D0 3.2985033988952637D0)) (list (list 13.0D0 7458.65673828125D0 0.00407320074737072D0 3.310997724533081D0)) (list (list 13.0D0 7462.19384765625D0 0.003643343225121498D0 3.3234920501708985D0)) (list (list 13.0D0 7464.5693359375D0 0.0029955084901303053D0 3.335986375808716D0)) (list (list 13.0D0 7464.81787109375D0 0.002169194631278515D0 3.348480701446533D0)) (list (list 13.0D0 7461.23095703125D0 0.001336822984740138D0 3.3609750270843506D0)) (list (list 13.0D0 7457.94873046875D0 7.705468451604247D-4 3.373469352722168D0)) (list (list 13.0D0 7458.3154296875D0 5.005916464142501D-4 3.3859636783599854D0)) (list (list 13.0D0 7458.3525390625D0 4.89512924104929D-4 3.3984580039978028D0)) (list (list 13.0D0 7456.3095703125D0 5.09353878442198D-4 3.41095232963562D0)) (list (list 13.0D0 7448.9423828125D0 4.081084916833788D-4 3.4234466552734375D0)) (list (list 13.0D0 7469.09228515625D0 3.796131641138345D-4 3.435940980911255D0)) (list (list 13.0D0 7467.984375D0 4.6020737499929965D-4 3.4484353065490723D0)) (list (list 13.0D0 7462.255859375D0 5.99584192968905D-4 3.4609296321868897D0)) (list (list 13.0D0 7460.29150390625D0 6.304637645371258D-4 3.473423957824707D0)) (list (list 13.0D0 7460.29150390625D0 0.0D0 3.4859182834625244D0)) (list (list 14.0D0 6032.0146484375D0 5.537014803849161D-4 0.02498866245150566D0)) (list (list 14.0D0 6038.92919921875D0 0.0010564670665189624D0 0.03748299181461334D0)) (list (list 14.0D0 6043.8994140625D0 0.0014493203489109874D0 0.04997732490301132D0)) (list (list 14.0D0 6044.66015625D0 0.0014824368990957737D0 0.062471654266119D0)) (list (list 14.0D0 6067.12060546875D0 0.0011769726406782866D0 0.07496598362922669D0)) (list (list 14.0D0 6045.54443359375D0 0.0014777026372030378D0 0.08746031671762467D0)) (list (list 14.0D0 6065.70458984375D0 0.0028302872087806464D0 0.09995464980602265D0)) (list (list 14.0D0 6064.978515625D0 0.003690997138619423D0 0.11244898289442063D0)) (list (list 14.0D0 6065.890625D0 0.0038877634797245264D0 0.124943308532238D0)) (list (list 14.0D0 6065.5576171875D0 0.0034387034829705954D0 0.137437641620636D0)) (list (list 14.0D0 6060.8603515625D0 0.0026467859279364348D0 0.14993196725845337D0)) (list (list 14.0D0 6055.77099609375D0 0.002545867348089814D0 0.16242630779743195D0)) (list (list 14.0D0 6056.21923828125D0 0.0033169882372021675D0 0.17492063343524933D0)) (list (list 14.0D0 6057.12841796875D0 0.005498866084963083D0 0.1874149590730667D0)) (list (list 14.0D0 6056.91455078125D0 0.008436841890215874D0 0.1999092996120453D0)) (list (list 14.0D0 6056.95703125D0 0.010666470043361187D0 0.21240362524986267D0)) (list (list 14.0D0 6057.45849609375D0 0.01137187797576189D0 0.22489796578884125D0)) (list (list 14.0D0 6058.0224609375D0 0.010883951559662819D0 0.23739229142665863D0)) (list (list 14.0D0 6058.455078125D0 0.009816587902605534D0 0.249886617064476D0)) (list (list 14.0D0 6058.5654296875D0 0.008415642194449902D0 0.2623809576034546D0)) (list (list 14.0D0 6058.01953125D0 0.0066075692884624005D0 0.274875283241272D0)) (list (list 14.0D0 6055.5546875D0 0.004513568710535765D0 0.28736960887908936D0)) (list (list 14.0D0 6052.23388671875D0 0.002875224221497774D0 0.29986393451690674D0)) (list (list 14.0D0 6053.1142578125D0 0.0019790641963481903D0 0.3123582899570465D0)) (list (list 14.0D0 6056.796875D0 0.001977130537852645D0 0.3248526155948639D0)) (list (list 14.0D0 6058.35595703125D0 0.0021769381128251553D0 0.3373469412326813D0)) (list (list 14.0D0 6055.49072265625D0 0.001958978595212102D0 0.34984126687049866D0)) (list (list 14.0D0 6053.04052734375D0 0.001618849695660174D0 0.36233559250831604D0)) (list (list 14.0D0 6056.521484375D0 0.0013314553070813418D0 0.3748299181461334D0)) (list (list 14.0D0 6034.978515625D0 0.0015514943515881896D0 0.3873242437839508D0)) (list (list 14.0D0 6064.84814453125D0 0.004234056919813156D0 0.3998185992240906D0)) (list (list 14.0D0 6062.4638671875D0 0.006508751306682825D0 0.41231292486190796D0)) (list (list 14.0D0 6061.07666015625D0 0.00859352108091116D0 0.42480725049972534D0)) (list (list 14.0D0 6060.86083984375D0 0.009871765971183777D0 0.4373015761375427D0)) (list (list 14.0D0 6061.35693359375D0 0.010213368572294712D0 0.4497959315776825D0)) (list (list 14.0D0 6062.19091796875D0 0.009785124100744725D0 0.4622902572154999D0)) (list (list 14.0D0 6062.51416015625D0 0.008899152278900147D0 0.47478458285331726D0)) (list (list 14.0D0 6062.017578125D0 0.007983590476214886D0 0.48727890849113465D0)) (list (list 14.0D0 6061.45361328125D0 0.007364832330495119D0 0.499773234128952D0)) (list (list 14.0D0 6061.60986328125D0 0.006965859327465296D0 0.5122675895690918D0)) (list (list 14.0D0 6062.58642578125D0 0.006586314644664526D0 0.5247619152069092D0)) (list (list 14.0D0 6063.34619140625D0 0.00634909700602293D0 0.5372562408447266D0)) (list (list 14.0D0 6062.3876953125D0 0.006507216952741146D0 0.549750566482544D0)) (list (list 14.0D0 6059.24658203125D0 0.007289317436516285D0 0.5622448921203613D0)) (list (list 14.0D0 6055.970703125D0 0.008390498347580433D0 0.5747392177581787D0)) (list (list 14.0D0 6055.0517578125D0 0.008450942113995552D0 0.5872335433959961D0)) (list (list 14.0D0 6055.6064453125D0 0.0072702630423009396D0 0.5997278690338135D0)) (list (list 14.0D0 6056.697265625D0 0.0056528192944824696D0 0.6122221946716309D0)) (list (list 14.0D0 6057.962890625D0 0.00425197696313262D0 0.624716579914093D0)) (list (list 14.0D0 6059.0966796875D0 0.003241207916289568D0 0.6372109055519104D0)) (list (list 14.0D0 6059.1201171875D0 0.0025054195430129767D0 0.6497052311897278D0)) (list (list 14.0D0 6057.705078125D0 0.0019092533038929105D0 0.6621995568275452D0)) (list (list 14.0D0 6053.1015625D0 0.0014309040270745755D0 0.6746938824653626D0)) (list (list 14.0D0 6050.41552734375D0 0.0013102126540616155D0 0.6871882081031799D0)) (list (list 14.0D0 6051.82421875D0 0.0015350792091339827D0 0.6996825337409973D0)) (list (list 14.0D0 6057.3046875D0 0.002149932784959674D0 0.7121768593788147D0)) (list (list 14.0D0 6059.6572265625D0 0.002765845973044634D0 0.7246711850166321D0)) (list (list 14.0D0 6060.46240234375D0 0.002948506735265255D0 0.7371655106544495D0)) (list (list 14.0D0 6061.1162109375D0 0.002765446435660124D0 0.7496598362922669D0)) (list (list 14.0D0 6061.6064453125D0 0.0024409170728176833D0 0.762154221534729D0)) (list (list 14.0D0 6061.63671875D0 0.0021400859113782645D0 0.7746485471725464D0)) (list (list 14.0D0 6060.96533203125D0 0.001832261448726058D0 0.7871428728103638D0)) (list (list 14.0D0 6059.52490234375D0 0.0014175880933180452D0 0.7996371984481812D0)) (list (list 14.0D0 6057.6318359375D0 9.409550111740828D-4 0.8121315240859985D0)) (list (list 14.0D0 6056.69580078125D0 5.68229821510613D-4 0.8246258497238159D0)) (list (list 14.0D0 6057.123046875D0 3.8388706161640585D-4 0.8371201753616333D0)) (list (list 14.0D0 6061.26611328125D0 3.115728322882205D-4 0.8496145009994507D0)) (list (list 14.0D0 6067.771484375D0 3.115783038083464D-4 0.8621088266372681D0)) (list (list 14.0D0 6067.91845703125D0 2.933935320470482D-4 0.8746031522750855D0)) (list (list 14.0D0 6059.71826171875D0 2.6082611293531954D-4 0.8870974779129028D0)) (list (list 14.0D0 6045.8056640625D0 3.3398825326003134D-4 0.899591863155365D0)) (list (list 14.0D0 6046.32568359375D0 3.1975642195902765D-4 0.9120861887931824D0)) (list (list 14.0D0 6051.314453125D0 2.91030592052266D-4 0.9245805144309998D0)) (list (list 14.0D0 6058.13232421875D0 3.947616496589035D-4 0.9370748400688171D0)) (list (list 14.0D0 6064.29638671875D0 5.765527603216469D-4 0.9495691657066345D0)) (list (list 14.0D0 6064.1650390625D0 6.786981248296797D-4 0.9620634913444519D0)) (list (list 14.0D0 6062.58447265625D0 7.391318213194609D-4 0.9745578169822693D0)) (list (list 14.0D0 6060.71923828125D0 8.122927392832935D-4 0.9870521426200867D0)) (list (list 14.0D0 6060.404296875D0 8.744241786189377D-4 0.999546468257904D0)) (list (list 14.0D0 6060.8310546875D0 8.942691492848098D-4 1.0120408535003662D0)) (list (list 14.0D0 6060.783203125D0 8.076818194240332D-4 1.0245351791381836D0)) (list (list 14.0D0 6054.02197265625D0 5.785824032500386D-4 1.037029504776001D0)) (list (list 14.0D0 6072.8173828125D0 4.4546311255544424D-4 1.0495238304138184D0)) (list (list 14.0D0 6072.509765625D0 4.881110799033195D-4 1.0620181560516358D0)) (list (list 14.0D0 6063.15869140625D0 6.482686148956418D-4 1.0745124816894532D0)) (list (list 14.0D0 6063.3037109375D0 7.405183860100806D-4 1.0870068073272705D0)) (list (list 14.0D0 6066.09521484375D0 6.737096700817347D-4 1.099501132965088D0)) (list (list 14.0D0 6044.78125D0 6.264486000873148D-4 1.1119954586029053D0)) (list (list 14.0D0 6045.75439453125D0 6.790159386582673D-4 1.1244897842407227D0)) (list (list 14.0D0 6047.29443359375D0 8.318724576383829D-4 1.13698410987854D0)) (list (list 14.0D0 6075.1865234375D0 0.0010131201706826687D0 1.1494784355163575D0)) (list (list 14.0D0 6054.7783203125D0 0.0019133378518745304D0 1.1619727611541748D0)) (list (list 14.0D0 6061.0947265625D0 0.003307584673166275D0 1.1744670867919922D0)) (list (list 14.0D0 6061.2275390625D0 0.004581798799335957D0 1.1869614124298096D0)) (list (list 14.0D0 6060.86376953125D0 0.00545676751062274D0 1.199455738067627D0)) (list (list 14.0D0 6060.03076171875D0 0.005921618547290564D0 1.2119500637054444D0)) (list (list 14.0D0 6058.908203125D0 0.006050983443856239D0 1.2244443893432618D0)) (list (list 14.0D0 6058.28662109375D0 0.005897654220461845D0 1.236938714981079D0)) (list (list 14.0D0 6058.568359375D0 0.005458761006593704D0 1.249433159828186D0)) (list (list 14.0D0 6059.07373046875D0 0.004734791349619627D0 1.2619274854660035D0)) (list (list 14.0D0 6059.37353515625D0 0.0036776710767298937D0 1.2744218111038208D0)) (list (list 14.0D0 6059.36279296875D0 0.002454772824421525D0 1.2869161367416382D0)) (list (list 14.0D0 6058.5283203125D0 0.0016665264265611768D0 1.2994104623794556D0)) (list (list 14.0D0 6079.81494140625D0 0.001355192274786532D0 1.311904788017273D0)) (list (list 14.0D0 6059.412109375D0 0.002493522595614195D0 1.3243991136550904D0)) (list (list 14.0D0 6062.080078125D0 0.002707981038838625D0 1.3368934392929078D0)) (list (list 14.0D0 6062.8291015625D0 0.0023026729468256235D0 1.349387764930725D0)) (list (list 14.0D0 6084.39453125D0 0.001143013359978795D0 1.3618820905685425D0)) (list (list 14.0D0 6096.10107421875D0 4.12318273447454D-4 1.3743764162063599D0)) (list (list 14.0D0 6117.94677734375D0 2.1193840075284243D-4 1.3868707418441773D0)) (list (list 14.0D0 6099.12451171875D0 3.391439386177808D-4 1.411859393119812D0)) (list (list 14.0D0 6098.447265625D0 3.9088481571525336D-4 1.4243537187576294D0)) (list (list 14.0D0 6061.2744140625D0 0.011233377270400525D0 1.4368480443954468D0)) (list (list 14.0D0 6061.1435546875D0 0.011084804311394692D0 1.4493423700332642D0)) (list (list 14.0D0 6061.01611328125D0 0.010048464871942997D0 1.4618366956710816D0)) (list (list 14.0D0 6060.7255859375D0 0.007896351628005505D0 1.474331021308899D0)) (list (list 14.0D0 6060.638671875D0 0.005322410259395838D0 1.4868253469467163D0)) (list (list 14.0D0 6061.2880859375D0 0.0035641377326101065D0 1.4993196725845337D0)) (list (list 14.0D0 6062.65771484375D0 0.0030290083959698677D0 1.5118141174316407D0)) (list (list 14.0D0 6063.68603515625D0 0.0030503871385008097D0 1.524308443069458D0)) (list (list 14.0D0 6063.8701171875D0 0.002974563045427203D0 1.5368027687072754D0)) (list (list 14.0D0 6063.55322265625D0 0.0026741784531623125D0 1.5492970943450928D0)) (list (list 14.0D0 6061.806640625D0 0.0023933262564241886D0 1.5617914199829102D0)) (list (list 14.0D0 6060.72119140625D0 0.002603203058242798D0 1.5742857456207276D0)) (list (list 14.0D0 6060.599609375D0 0.00351062323898077D0 1.586780071258545D0)) (list (list 14.0D0 6060.2744140625D0 0.00476079760119319D0 1.5992743968963623D0)) (list (list 14.0D0 6059.603515625D0 0.005774164572358131D0 1.6117687225341797D0)) (list (list 14.0D0 6059.85205078125D0 0.006378723308444023D0 1.624263048171997D0)) (list (list 14.0D0 6061.16748046875D0 0.006860930006951094D0 1.6367573738098145D0)) (list (list 14.0D0 6062.8564453125D0 0.007303666323423386D0 1.6492516994476319D0)) (list (list 14.0D0 6063.98486328125D0 0.007235383614897728D0 1.6617460250854493D0)) (list (list 14.0D0 6063.63623046875D0 0.006455127615481615D0 1.6742403507232666D0)) (list (list 14.0D0 6062.123046875D0 0.005506719928234816D0 1.686734676361084D0)) (list (list 14.0D0 6060.32275390625D0 0.00491176825016737D0 1.6992290019989014D0)) (list (list 14.0D0 6059.52001953125D0 0.004553850740194321D0 1.7117233276367188D0)) (list (list 14.0D0 6059.74658203125D0 0.004267006181180477D0 1.7242176532745362D0)) (list (list 14.0D0 6060.08349609375D0 0.004058131482452154D0 1.7367119789123536D0)) (list (list 14.0D0 6060.220703125D0 0.0037812478840351105D0 1.749206304550171D0)) (list (list 14.0D0 6059.80322265625D0 0.003142930567264557D0 1.7617006301879883D0)) (list (list 14.0D0 6055.7431640625D0 0.002097176155075431D0 1.7741949558258057D0)) (list (list 14.0D0 6049.072265625D0 0.0013010273687541485D0 1.7866894006729126D0)) (list (list 14.0D0 6047.4521484375D0 8.418817305937409D-4 1.79918372631073D0)) (list (list 14.0D0 6048.630859375D0 7.208377937786281D-4 1.8116780519485474D0)) (list (list 14.0D0 6049.82666015625D0 8.540804265066981D-4 1.8241723775863648D0)) (list (list 14.0D0 6055.5400390625D0 0.0010205500293523074D0 1.8366667032241822D0)) (list (list 14.0D0 6059.4853515625D0 0.0011642066529020667D0 1.8491610288619996D0)) (list (list 14.0D0 6059.9228515625D0 0.0011078428942710162D0 1.861655354499817D0)) (list (list 14.0D0 6059.8857421875D0 0.0011132508516311646D0 1.8741496801376343D0)) (list (list 14.0D0 6059.427734375D0 0.0013993039028719068D0 1.8866440057754517D0)) (list (list 14.0D0 6058.03857421875D0 0.0018495635595172644D0 1.899138331413269D0)) (list (list 14.0D0 6056.9521484375D0 0.002107595559209585D0 1.9116326570510865D0)) (list (list 14.0D0 6056.4794921875D0 0.0019130379660055042D0 1.9241269826889038D0)) (list (list 14.0D0 6052.0322265625D0 0.0013757693814113737D0 1.9366213083267212D0)) (list (list 14.0D0 6046.62841796875D0 0.0010924640810117126D0 1.9491156339645386D0)) (list (list 14.0D0 6044.62939453125D0 0.0010387446964159608D0 1.961609959602356D0)) (list (list 14.0D0 6045.7451171875D0 0.0011070223990827799D0 1.9741042852401734D0)) (list (list 14.0D0 6075.42431640625D0 0.0013507374096661807D0 1.9865986108779908D0)) (list (list 14.0D0 6063.47265625D0 0.0017832005396485329D0 1.999092936515808D0)) (list (list 14.0D0 6062.3251953125D0 0.002226912649348378D0 2.011587381362915D0)) (list (list 14.0D0 6061.81396484375D0 0.002401582198217511D0 2.0240817070007324D0)) (list (list 14.0D0 6061.75732421875D0 0.0025115550961345435D0 2.03657603263855D0)) (list (list 14.0D0 6062.3505859375D0 0.0024999864399433136D0 2.049070358276367D0)) (list (list 14.0D0 6063.203125D0 0.002204437740147114D0 2.0615646839141846D0)) (list (list 14.0D0 6067.83740234375D0 0.001591479405760765D0 2.074059009552002D0)) (list (list 14.0D0 6073.5595703125D0 0.0012274921173229814D0 2.0865533351898194D0)) (list (list 14.0D0 6074.49951171875D0 9.82364290393889D-4 2.0990476608276367D0)) (list (list 14.0D0 6061.4990234375D0 9.001796133816242D-4 2.111541986465454D0)) (list (list 14.0D0 6060.29052734375D0 0.0011479586828500033D0 2.1240363121032715D0)) (list (list 14.0D0 6060.1884765625D0 0.0015826582675799728D0 2.136530637741089D0)) (list (list 14.0D0 6059.65966796875D0 0.0023285825736820698D0 2.1490249633789063D0)) (list (list 14.0D0 6059.00244140625D0 0.003079925896599889D0 2.1615192890167237D0)) (list (list 14.0D0 6060.30908203125D0 0.0032881740480661393D0 2.174013614654541D0)) (list (list 14.0D0 6064.533203125D0 0.003021030919626355D0 2.1865079402923584D0)) (list (list 14.0D0 6065.91845703125D0 0.0029391543939709664D0 2.199002265930176D0)) (list (list 14.0D0 6064.5029296875D0 0.0033726836554706097D0 2.211496591567993D0)) (list (list 14.0D0 6062.37451171875D0 0.004396065603941679D0 2.2239909172058106D0)) (list (list 14.0D0 6061.81201171875D0 0.005364104174077511D0 2.236485242843628D0)) (list (list 14.0D0 6061.7587890625D0 0.005824022926390171D0 2.2489795684814453D0)) (list (list 14.0D0 6061.8828125D0 0.005811350420117378D0 2.2614738941192627D0)) (list (list 14.0D0 6061.62744140625D0 0.005700042471289635D0 2.27396821975708D0)) (list (list 14.0D0 6060.54638671875D0 0.005819905549287796D0 2.2864625453948975D0)) (list (list 14.0D0 6059.44775390625D0 0.006131050176918507D0 2.298956871032715D0)) (list (list 14.0D0 6059.845703125D0 0.006241600960493088D0 2.3114511966705323D0)) (list (list 14.0D0 6061.30224609375D0 0.006134729832410812D0 2.3239455223083496D0)) (list (list 14.0D0 6062.537109375D0 0.006067283917218447D0 2.336439847946167D0)) (list (list 14.0D0 6063.044921875D0 0.006134978495538235D0 2.3489341735839844D0)) (list (list 14.0D0 6063.26318359375D0 0.006246231496334076D0 2.3614284992218018D0)) (list (list 14.0D0 6063.40966796875D0 0.006103395018726587D0 2.373922824859619D0)) (list (list 14.0D0 6063.419921875D0 0.005519466940313578D0 2.3864171504974366D0)) (list (list 14.0D0 6063.65234375D0 0.004690159112215042D0 2.398911476135254D0)) (list (list 14.0D0 6064.1572265625D0 0.004097517114132643D0 2.4114058017730713D0)) (list (list 14.0D0 6063.75244140625D0 0.004013899713754654D0 2.4239001274108887D0)) (list (list 14.0D0 6061.88134765625D0 0.004294358193874359D0 2.436394453048706D0)) (list (list 14.0D0 6060.39501953125D0 0.004554523155093193D0 2.4488887786865235D0)) (list (list 14.0D0 6060.22509765625D0 0.004377160686999559D0 2.461383104324341D0)) (list (list 14.0D0 6060.3046875D0 0.003758870530873537D0 2.4738776683807373D0)) (list (list 14.0D0 6060.16796875D0 0.0029688524082303048D0 2.4863719940185547D0)) (list (list 14.0D0 6060.697265625D0 0.00249575637280941D0 2.498866319656372D0)) (list (list 14.0D0 6061.4033203125D0 0.002774849534034729D0 2.5113606452941895D0)) (list (list 14.0D0 6060.7080078125D0 0.0036661429330706597D0 2.523854970932007D0)) (list (list 14.0D0 6059.216796875D0 0.004716057330369949D0 2.536349296569824D0)) (list (list 14.0D0 6058.7177734375D0 0.0055076489225029946D0 2.5488436222076416D0)) (list (list 14.0D0 6058.916015625D0 0.005870797671377659D0 2.561337947845459D0)) (list (list 14.0D0 6058.90576171875D0 0.0057951356284320355D0 2.5738322734832764D0)) (list (list 14.0D0 6058.65380859375D0 0.005269245710223913D0 2.5863265991210938D0)) (list (list 14.0D0 6059.23291015625D0 0.004378717392683029D0 2.598820924758911D0)) (list (list 14.0D0 6060.6181640625D0 0.0034482565242797137D0 2.6113152503967285D0)) (list (list 14.0D0 6060.419921875D0 0.0027215187437832356D0 2.623809576034546D0)) (list (list 14.0D0 6057.29052734375D0 0.002393381204456091D0 2.6363039016723633D0)) (list (list 14.0D0 6055.5791015625D0 0.002541920868679881D0 2.6487982273101807D0)) (list (list 14.0D0 6058.21533203125D0 0.002714024158194661D0 2.661292552947998D0)) (list (list 14.0D0 6062.39404296875D0 0.002978599863126874D0 2.6737868785858155D0)) (list (list 14.0D0 6063.43408203125D0 0.0030543915927410126D0 2.686281204223633D0)) (list (list 14.0D0 6062.6376953125D0 0.0029622248839586974D0 2.69877552986145D0)) (list (list 14.0D0 6061.61474609375D0 0.002945953980088234D0 2.7112698554992676D0)) (list (list 14.0D0 6061.3388671875D0 0.003039037110283971D0 2.723764181137085D0)) (list (list 14.0D0 6061.4091796875D0 0.0031150244176387787D0 2.7362585067749024D0)) (list (list 14.0D0 6061.48583984375D0 0.0029913336038589478D0 2.7487528324127198D0)) (list (list 14.0D0 6061.7373046875D0 0.0025853717233985663D0 2.761247158050537D0)) (list (list 14.0D0 6061.396484375D0 0.0019684266299009323D0 2.7737414836883545D0)) (list (list 14.0D0 6056.38671875D0 0.0013400147436186672D0 2.786235809326172D0)) (list (list 14.0D0 6050.79345703125D0 0.0012817909009754658D0 2.7987301349639893D0)) (list (list 14.0D0 6049.94189453125D0 0.00158008374273777D0 2.8112244606018067D0)) (list (list 14.0D0 6053.59521484375D0 0.0019308264600113035D0 2.823718786239624D0)) (list (list 14.0D0 6058.9580078125D0 0.0022561463993042708D0 2.8362131118774414D0)) (list (list 14.0D0 6062.3662109375D0 0.0023890098091214896D0 2.848707437515259D0)) (list (list 14.0D0 6064.45068359375D0 0.002327942056581378D0 2.861201763153076D0)) (list (list 14.0D0 6064.71826171875D0 0.002194078639149666D0 2.8736960887908936D0)) (list (list 14.0D0 6062.53857421875D0 0.0020817576441913843D0 2.886190414428711D0)) (list (list 14.0D0 6059.3896484375D0 0.0020927339792251587D0 2.8986847400665283D0)) (list (list 14.0D0 6058.52880859375D0 0.002023447537794709D0 2.9111790657043457D0)) (list (list 14.0D0 6059.7333984375D0 0.0017975495429709554D0 2.923673391342163D0)) (list (list 14.0D0 6059.86865234375D0 0.0015178993344306946D0 2.9361677169799805D0)) (list (list 14.0D0 6058.0361328125D0 0.0011750286212190986D0 2.948662042617798D0)) (list (list 14.0D0 6057.82421875D0 7.631885819137096D-4 2.9611563682556153D0)) (list (list 14.0D0 6058.98193359375D0 3.926170466002077D-4 2.9736506938934326D0)) (list (list 14.0D0 6069.1240234375D0 2.1915635443292558D-4 2.98614501953125D0)) (list (list 14.0D0 6065.7080078125D0 3.2084109261631966D-4 2.9986393451690674D0)) (list (list 14.0D0 6048.046875D0 0.0016703320434316993D0 3.0236282348632813D0)) (list (list 14.0D0 6051.76220703125D0 0.0016994730103760958D0 3.0361225605010987D0)) (list (list 14.0D0 6055.25732421875D0 0.0016300072893500328D0 3.048616886138916D0)) (list (list 14.0D0 6058.46875D0 0.0016463816864416004D0 3.0611112117767334D0)) (list (list 14.0D0 6060.2275390625D0 0.0017274781130254269D0 3.073605537414551D0)) (list (list 14.0D0 6061.9501953125D0 0.0017339581390842796D0 3.086099863052368D0)) (list (list 14.0D0 6064.02685546875D0 0.0016427806112915278D0 3.0985941886901856D0)) (list (list 14.0D0 6064.12548828125D0 0.0015444797463715077D0 3.111088514328003D0)) (list (list 14.0D0 6061.31005859375D0 0.0015215714229270816D0 3.1235828399658203D0)) (list (list 14.0D0 6056.84619140625D0 0.0015346246073022485D0 3.1360771656036377D0)) (list (list 14.0D0 6042.931640625D0 0.001492526032961905D0 3.148571491241455D0)) (list (list 14.0D0 6065.78955078125D0 0.0014592190273106099D0 3.1610658168792725D0)) (list (list 14.0D0 6061.68359375D0 0.0021693333983421326D0 3.17356014251709D0)) (list (list 14.0D0 6055.30078125D0 0.0033384140115231276D0 3.1860544681549073D0)) (list (list 14.0D0 6056.8203125D0 0.003434311132878065D0 3.1985487937927246D0)) (list (list 14.0D0 6063.61865234375D0 0.002524149138480425D0 3.211043119430542D0)) (list (list 14.0D0 6045.94970703125D0 0.0015810270560905338D0 3.2235374450683594D0)) (list (list 14.0D0 6047.646484375D0 0.0016815339913591743D0 3.2360317707061768D0)) (list (list 14.0D0 6061.19091796875D0 0.00303671951405704D0 3.248526096343994D0)) (list (list 14.0D0 6060.20263671875D0 0.0037963618524372578D0 3.2610204219818116D0)) (list (list 14.0D0 6059.8525390625D0 0.0041593583300709725D0 3.273514747619629D0)) (list (list 14.0D0 6059.81494140625D0 0.004275016486644745D0 3.2860090732574463D0)) (list (list 14.0D0 6061.52197265625D0 0.004292204510420561D0 3.2985033988952637D0)) (list (list 14.0D0 6063.8203125D0 0.004575848579406738D0 3.310997724533081D0)) (list (list 14.0D0 6065.14501953125D0 0.0051185390911996365D0 3.3234920501708985D0)) (list (list 14.0D0 6065.25D0 0.005538059398531914D0 3.335986375808716D0)) (list (list 14.0D0 6063.673828125D0 0.0055575682781636715D0 3.348480701446533D0)) (list (list 14.0D0 6060.19970703125D0 0.0054135373793542385D0 3.3609750270843506D0)) (list (list 14.0D0 6057.03515625D0 0.0056327213533222675D0 3.373469352722168D0)) (list (list 14.0D0 6056.951171875D0 0.005800002254545689D0 3.3859636783599854D0)) (list (list 14.0D0 6059.13037109375D0 0.0058145830407738686D0 3.3984580039978028D0)) (list (list 14.0D0 6061.39794921875D0 0.0057383025996387005D0 3.41095232963562D0)) (list (list 14.0D0 6062.453125D0 0.005337342619895935D0 3.4234466552734375D0)) (list (list 14.0D0 6062.6396484375D0 0.004580714274197817D0 3.435940980911255D0)) (list (list 14.0D0 6063.23388671875D0 0.0035186761524528265D0 3.4484353065490723D0)) (list (list 14.0D0 6065.44482421875D0 0.002592399949207902D0 3.4609296321868897D0)) (list (list 14.0D0 6065.4794921875D0 0.0025636176578700543D0 3.473423957824707D0)) (list (list 14.0D0 6062.13232421875D0 0.0037833459209650755D0 3.4859182834625244D0)) (list (list 14.0D0 6059.72607421875D0 0.0059475041925907135D0 3.498412609100342D0)) (list (list 14.0D0 6060.54052734375D0 0.0077778431586921215D0 3.510906934738159D0)) (list (list 14.0D0 6061.5185546875D0 0.00897188764065504D0 3.5234012603759766D0)) (list (list 14.0D0 6061.28125D0 0.009669805876910687D0 3.535895586013794D0)) (list (list 14.0D0 6059.5166015625D0 0.010365331545472145D0 3.5483899116516114D0)) (list (list 14.0D0 6057.29541015625D0 0.011597039178013802D0 3.5608842372894287D0)) (list (list 14.0D0 6055.89306640625D0 0.0127358827739954D0 3.573378801345825D0)) (list (list 14.0D0 6055.6044921875D0 0.012422888539731503D0 3.5858731269836426D0)) (list (list 14.0D0 6055.7421875D0 0.010137935169041157D0 3.59836745262146D0)) (list (list 14.0D0 6054.861328125D0 0.006515720393508673D0 3.6108617782592774D0)) (list (list 14.0D0 6047.63916015625D0 0.0036533637903630734D0 3.6233561038970948D0)) (list (list 14.0D0 6066.81689453125D0 0.002461954252794385D0 3.635850429534912D0)) (list (list 14.0D0 6052.56689453125D0 0.00410493602976203D0 3.6483447551727295D0)) (list (list 14.0D0 6056.849609375D0 0.0063622803427278996D0 3.660839080810547D0)) (list (list 14.0D0 6058.8505859375D0 0.007932007312774659D0 3.6733334064483643D0)) (list (list 14.0D0 6060.3046875D0 0.008626265451312065D0 3.6858277320861817D0)) (list (list 14.0D0 6060.23486328125D0 0.008355651050806046D0 3.698322057723999D0)) (list (list 14.0D0 6058.267578125D0 0.0073021347634494305D0 3.7108163833618164D0)) (list (list 14.0D0 6055.89013671875D0 0.006153421942144632D0 3.723310708999634D0)) (list (list 14.0D0 6055.30419921875D0 0.005386756733059883D0 3.735805034637451D0)) (list (list 14.0D0 6054.57861328125D0 0.0054633840918540955D0 3.7482993602752686D0)) (list (list 14.0D0 6052.3056640625D0 0.00613663112744689D0 3.760793685913086D0)) (list (list 14.0D0 6051.556640625D0 0.006559704430401325D0 3.7732880115509033D0)) (list (list 14.0D0 6053.18994140625D0 0.006599554792046547D0 3.7857823371887207D0)) (list (list 14.0D0 6056.046875D0 0.0071125696413218975D0 3.798276662826538D0)) (list (list 14.0D0 6059.8046875D0 0.008904007263481617D0 3.8107709884643555D0)) (list (list 14.0D0 6061.22216796875D0 0.011661960743367672D0 3.823265314102173D0)) (list (list 14.0D0 6060.69287109375D0 0.014144661836326123D0 3.8357596397399903D0)) (list (list 14.0D0 6059.97412109375D0 0.015505542047321797D0 3.8482539653778076D0)) (list (list 14.0D0 6060.00634765625D0 0.015471087768673897D0 3.860748291015625D0)) (list (list 14.0D0 6060.19580078125D0 0.014779656194150448D0 3.8732426166534424D0)) (list (list 14.0D0 6059.86328125D0 0.013998432084918023D0 3.8857369422912598D0)) (list (list 14.0D0 6058.77587890625D0 0.012800192460417748D0 3.898231267929077D0)) (list (list 14.0D0 6057.150390625D0 0.010764695703983307D0 3.9107255935668946D0)) (list (list 14.0D0 6056.12060546875D0 0.008122957311570645D0 3.923219919204712D0)) (list (list 14.0D0 6056.6357421875D0 0.005584363825619221D0 3.9357142448425293D0)) (list (list 14.0D0 6056.64892578125D0 0.0039286063984036446D0 3.9482085704803467D0)) (list (list 14.0D0 6053.7763671875D0 0.003514648647978902D0 3.960702896118164D0)) (list (list 14.0D0 6051.263671875D0 0.004483537282794714D0 3.9731972217559815D0)) (list (list 14.0D0 6052.91455078125D0 0.005855313502252102D0 3.985691547393799D0)) (list (list 14.0D0 6055.97998046875D0 0.007403592579066753D0 3.998185873031616D0)) (list (list 14.0D0 6057.986328125D0 0.008844686672091484D0 4.010680198669434D0)) (list (list 14.0D0 6059.3056640625D0 0.009678220376372338D0 4.02317476272583D0)) (list (list 14.0D0 6060.3359375D0 0.00955234281718731D0 4.035668849945068D0)) (list (list 14.0D0 6060.9287109375D0 0.00861639715731144D0 4.048163414001465D0)) (list (list 14.0D0 6060.54052734375D0 0.007540170568972826D0 4.060657501220703D0)) (list (list 14.0D0 6059.73095703125D0 0.007165280636399984D0 4.0731520652771D0)) (list (list 14.0D0 6059.7265625D0 0.0076371789909899235D0 4.085646152496338D0)) (list (list 14.0D0 6060.72412109375D0 0.008263970725238324D0 4.098140716552734D0)) (list (list 14.0D0 6062.2265625D0 0.008139371871948243D0 4.110634803771973D0)) (list (list 14.0D0 6063.77978515625D0 0.007056085858494043D0 4.123129367828369D0)) (list (list 14.0D0 6065.03955078125D0 0.005660675931721926D0 4.135623455047607D0)) (list (list 14.0D0 6066.01904296875D0 0.004542021080851555D0 4.148118019104004D0)) (list (list 14.0D0 6066.83154296875D0 0.003896646900102496D0 4.160612106323242D0)) (list (list 14.0D0 6066.8193359375D0 0.0037037222646176815D0 4.173106670379639D0)) (list (list 14.0D0 6065.0732421875D0 0.003835301846265793D0 4.185600757598877D0)) (list (list 14.0D0 6062.359375D0 0.004181906580924988D0 4.198095321655273D0)) (list (list 14.0D0 6060.40185546875D0 0.0044907764531672D0 4.210589408874512D0)) (list (list 14.0D0 6059.35009765625D0 0.0045095207169651985D0 4.223083972930908D0)) (list (list 14.0D0 6059.59130859375D0 0.004107185639441013D0 4.2355780601501465D0)) (list (list 14.0D0 6061.17138671875D0 0.0034758427646011114D0 4.248072624206543D0)) (list (list 14.0D0 6062.75D0 0.0030517589766532183D0 4.260566711425781D0)) (list (list 14.0D0 6063.31298828125D0 0.0029288185760378838D0 4.273061275482178D0)) (list (list 14.0D0 6063.3369140625D0 0.002805891912430525D0 4.285555362701416D0)) (list (list 14.0D0 6064.4501953125D0 0.002431935630738735D0 4.2980499267578125D0)) (list (list 14.0D0 6065.77978515625D0 0.001993756275624037D0 4.310544013977051D0)) (list (list 14.0D0 6065.59033203125D0 0.001758064259774983D0 4.323038578033447D0)) (list (list 14.0D0 6063.69970703125D0 0.0017662591999396682D0 4.3355326652526856D0)) (list (list 14.0D0 6061.70166015625D0 0.0018597707385197282D0 4.348027229309082D0)) (list (list 14.0D0 6060.2568359375D0 0.0018808722961694003D0 4.36052131652832D0)) (list (list 14.0D0 6059.59814453125D0 0.001814492978155613D0 4.373015880584717D0)) (list (list 14.0D0 6059.666015625D0 0.0016810332890599966D0 4.385509967803955D0)) (list (list 14.0D0 6059.64599609375D0 0.0015029199421405793D0 4.398004531860352D0)) (list (list 14.0D0 6058.63037109375D0 0.001282663200981915D0 4.410499095916748D0)) (list (list 14.0D0 6056.6884765625D0 0.00110129383392632D0 4.422993183135986D0)) (list (list 14.0D0 6056.40283203125D0 0.0010729226050898433D0 4.435487747192383D0)) (list (list 14.0D0 6058.673828125D0 0.0012597892200574279D0 4.447981834411621D0)) (list (list 14.0D0 6061.84521484375D0 0.0016721985302865506D0 4.460476398468018D0)) (list (list 14.0D0 6063.06884765625D0 0.002108332235366106D0 4.472970485687256D0)) (list (list 14.0D0 6062.9921875D0 0.0024236971512436867D0 4.485465049743652D0)) (list (list 14.0D0 6062.115234375D0 0.0026003269013017416D0 4.497959136962891D0)) (list (list 14.0D0 6060.84326171875D0 0.002647978952154517D0 4.510453701019287D0)) (list (list 14.0D0 6060.01904296875D0 0.0025753178633749485D0 4.522947788238525D0)) (list (list 14.0D0 6060.14306640625D0 0.002365914871916175D0 4.535442352294922D0)) (list (list 14.0D0 6061.28125D0 0.0020030904561281205D0 4.54793643951416D0)) (list (list 14.0D0 6063.1484375D0 0.001495444099418819D0 4.560431003570557D0)) (list (list 14.0D0 6065.8642578125D0 9.152697748504579D-4 4.572925090789795D0)) (list (list 14.0D0 6073.19482421875D0 4.731606168206781D-4 4.585419654846191D0)) (list (list 14.0D0 6087.87890625D0 2.3893294564913958D-4 4.59791374206543D0)) (list (list 14.0D0 6090.6884765625D0 1.5243385860230774D-4 4.610408306121826D0)) (list (list 14.0D0 6089.7880859375D0 1.0899276821874082D-4 4.6229023933410645D0)) (list (list 14.0D0 6091.01904296875D0 1.418343308614567D-4 4.635396957397461D0)) (list (list 14.0D0 6102.474609375D0 1.858212344814092D-4 4.647891044616699D0)) (list (list 14.0D0 6103.630859375D0 2.3647250782232732D-4 4.660385608673096D0)) (list (list 14.0D0 6102.59521484375D0 2.639448794070631D-4 4.672879695892334D0)) (list (list 14.0D0 6102.69140625D0 2.4796961224637926D-4 4.6853742599487305D0)) (list (list 14.0D0 6106.5625D0 2.0899661467410624D-4 4.697868347167969D0)) (list (list 14.0D0 6106.787109375D0 1.896083849715069D-4 4.710362911224365D0)) (list (list 14.0D0 6102.82177734375D0 2.0802138897124678D-4 4.7228569984436035D0)) (list (list 14.0D0 6100.5478515625D0 2.7163451886735857D-4 4.7353515625D0)) (list (list 14.0D0 6099.583984375D0 2.841306268237531D-4 4.747845649719238D0)) (list (list 14.0D0 6103.00146484375D0 2.1898291015531868D-4 4.760340213775635D0)) (list (list 14.0D0 6110.2578125D0 1.3169486192055047D-4 4.772834300994873D0)) (list (list 14.0D0 6106.78076171875D0 6.608245894312859D-5 4.7853288650512695D0)) (list (list 14.0D0 6130.1708984375D0 5.373986641643569D-5 4.797822952270508D0)) (list (list 14.0D0 6132.22314453125D0 5.34177670488134D-5 4.822811603546143D0)) (list (list 14.0D0 6131.06982421875D0 4.850623736274429D-5 4.835306167602539D0)) (list (list 14.0D0 6134.44189453125D0 4.653756695915945D-5 4.847800254821777D0)) (list (list 14.0D0 6137.83544921875D0 4.8325986426789314D-5 4.860294818878174D0)) (list (list 14.0D0 6164.07080078125D0 4.3397871195338667D-5 4.872788906097412D0)) (list (list 14.0D0 6178.8427734375D0 3.93369555240497D-5 4.885283470153809D0)) (list (list 14.0D0 6181.1845703125D0 3.287076106062159D-5 4.897777557373047D0)) (list (list 14.0D0 6182.37158203125D0 3.393051156308502D-5 4.910272121429443D0)) (list (list 14.0D0 6183.43408203125D0 4.0565118979429826D-5 4.922766208648682D0)) (list (list 14.0D0 6188.1923828125D0 3.799096884904429D-5 4.935260772705078D0)) (list (list 14.0D0 6192.2841796875D0 3.7668924051104114D-5 4.947755336761475D0)) (list (list 14.0D0 6166.64892578125D0 5.719700493500568D-5 4.960249423980713D0)) (list (list 14.0D0 6166.05078125D0 7.240026752697304D-5 4.972743988037109D0)) (list (list 14.0D0 6169.46337890625D0 7.310743239941076D-5 4.985238075256348D0)) (list (list 14.0D0 6171.3212890625D0 7.163559348555282D-5 4.997732639312744D0)) (list (list 14.0D0 6175.1513671875D0 8.216770220315084D-5 5.010226726531982D0)) (list (list 14.0D0 6176.49267578125D0 9.506708011031151D-5 5.022721290588379D0)) (list (list 14.0D0 6174.42431640625D0 9.51966576394625D-5 5.035215377807617D0)) (list (list 14.0D0 6174.056640625D0 8.995255484478548D-5 5.047709941864014D0)) (list (list 14.0D0 6176.5185546875D0 7.880807243054733D-5 5.060204029083252D0)) (list (list 14.0D0 6186.54541015625D0 6.579755427083D-5 5.072698593139648D0)) (list (list 14.0D0 6193.92041015625D0 5.6999568187166005D-5 5.085192680358887D0)) (list (list 14.0D0 6198.00146484375D0 5.083202995592728D-5 5.097687244415283D0)) (list (list 14.0D0 6200.521484375D0 3.7826685002073646D-5 5.1101813316345215D0)) (list (list 14.0D0 6190.9580078125D0 3.421824658289552D-5 5.147664546966553D0)) (list (list 14.0D0 6188.72509765625D0 4.490766514209099D-5 5.160158634185791D0)) (list (list 14.0D0 6164.39013671875D0 6.889160431455821D-5 5.1726531982421875D0)) (list (list 14.0D0 6173.5341796875D0 5.156904808245599D-5 5.185147285461426D0)) (list (list 14.0D0 6173.5341796875D0 0.0D0 5.197641849517822D0)) (list (list 15.0D0 5581.82421875D0 4.0037743747234345D-4 0.02498866245150566D0)) (list (list 15.0D0 5582.27001953125D0 0.0010831089457497D0 0.03748299181461334D0)) (list (list 15.0D0 5586.50244140625D0 0.002151286695152521D0 0.04997732490301132D0)) (list (list 15.0D0 5592.8046875D0 0.0034033169504255057D0 0.062471654266119D0)) (list (list 15.0D0 5598.60791015625D0 0.00443918164819479D0 0.07496598362922669D0)) (list (list 15.0D0 5602.408203125D0 0.004867220297455788D0 0.08746031671762467D0)) (list (list 15.0D0 5603.7138671875D0 0.004844485316425562D0 0.09995464980602265D0)) (list (list 15.0D0 5603.16845703125D0 0.005086165852844715D0 0.11244898289442063D0)) (list (list 15.0D0 5601.16259765625D0 0.00607509259134531D0 0.124943308532238D0)) (list (list 15.0D0 5598.921875D0 0.007586537394672632D0 0.137437641620636D0)) (list (list 15.0D0 5597.7470703125D0 0.00897706113755703D0 0.14993196725845337D0)) (list (list 15.0D0 5597.17724609375D0 0.009707006625831128D0 0.16242630779743195D0)) (list (list 15.0D0 5596.912109375D0 0.009214475750923157D0 0.17492063343524933D0)) (list (list 15.0D0 5599.76953125D0 0.00723750377073884D0 0.1874149590730667D0)) (list (list 15.0D0 5579.619140625D0 0.00455993739888072D0 0.1999092996120453D0)) (list (list 15.0D0 5581.21435546875D0 0.004536274820566177D0 0.21240362524986267D0)) (list (list 15.0D0 5593.45556640625D0 0.007188122719526291D0 0.22489796578884125D0)) (list (list 15.0D0 5592.33154296875D0 0.009163481183350087D0 0.23739229142665863D0)) (list (list 15.0D0 5592.67333984375D0 0.009934424422681332D0 0.249886617064476D0)) (list (list 15.0D0 5593.12890625D0 0.010385558009147644D0 0.2623809576034546D0)) (list (list 15.0D0 5593.6875D0 0.010952390730381012D0 0.274875283241272D0)) (list (list 15.0D0 5595.166015625D0 0.01131843589246273D0 0.28736960887908936D0)) (list (list 15.0D0 5597.46142578125D0 0.011200194247066975D0 0.29986393451690674D0)) (list (list 15.0D0 5598.50146484375D0 0.010557330213487149D0 0.3123582899570465D0)) (list (list 15.0D0 5597.0107421875D0 0.009595821611583233D0 0.3248526155948639D0)) (list (list 15.0D0 5595.2958984375D0 0.009256203658878804D0 0.3373469412326813D0)) (list (list 15.0D0 5596.1123046875D0 0.00923230592161417D0 0.34984126687049866D0)) (list (list 15.0D0 5598.888671875D0 0.009450525045394898D0 0.36233559250831604D0)) (list (list 15.0D0 5600.5908203125D0 0.009647471830248833D0 0.3748299181461334D0)) (list (list 15.0D0 5600.61474609375D0 0.009284304454922676D0 0.3873242437839508D0)) (list (list 15.0D0 5599.2529296875D0 0.008344047702848912D0 0.3998185992240906D0)) (list (list 15.0D0 5597.427734375D0 0.006951150484383106D0 0.41231292486190796D0)) (list (list 15.0D0 5595.931640625D0 0.005016702227294445D0 0.42480725049972534D0)) (list (list 15.0D0 5585.9501953125D0 0.0032474128529429436D0 0.4373015761375427D0)) (list (list 15.0D0 5585.21435546875D0 0.002905940869823098D0 0.4497959315776825D0)) (list (list 15.0D0 5600.94482421875D0 0.003984199836850166D0 0.4622902572154999D0)) (list (list 15.0D0 5595.875D0 0.006310369353741407D0 0.47478458285331726D0)) (list (list 15.0D0 5595.12158203125D0 0.007695439737290144D0 0.48727890849113465D0)) (list (list 15.0D0 5595.00537109375D0 0.008104721084237099D0 0.499773234128952D0)) (list (list 15.0D0 5595.81787109375D0 0.007834156043827534D0 0.5122675895690918D0)) (list (list 15.0D0 5597.052734375D0 0.007096327841281891D0 0.5247619152069092D0)) (list (list 15.0D0 5600.63525390625D0 0.005575765855610371D0 0.5372562408447266D0)) (list (list 15.0D0 5606.001953125D0 0.0043044970370829106D0 0.549750566482544D0)) (list (list 15.0D0 5581.12939453125D0 0.003948601428419352D0 0.5622448921203613D0)) (list (list 15.0D0 5587.59814453125D0 0.005319667514413595D0 0.5747392177581787D0)) (list (list 15.0D0 5590.67724609375D0 0.008063648827373982D0 0.5872335433959961D0)) (list (list 15.0D0 5591.24462890625D0 0.010301141999661923D0 0.5997278690338135D0)) (list (list 15.0D0 5591.9482421875D0 0.011772621423006058D0 0.6122221946716309D0)) (list (list 15.0D0 5593.025390625D0 0.012496442534029484D0 0.624716579914093D0)) (list (list 15.0D0 5593.798828125D0 0.012925303541123867D0 0.6372109055519104D0)) (list (list 15.0D0 5593.92041015625D0 0.013369875960052014D0 0.6497052311897278D0)) (list (list 15.0D0 5594.298828125D0 0.01386310812085867D0 0.6621995568275452D0)) (list (list 15.0D0 5595.21630859375D0 0.014332040213048458D0 0.6746938824653626D0)) (list (list 15.0D0 5595.7236328125D0 0.014614545740187168D0 0.6871882081031799D0)) (list (list 15.0D0 5595.70751953125D0 0.014525910839438439D0 0.6996825337409973D0)) (list (list 15.0D0 5595.986328125D0 0.014191977679729462D0 0.7121768593788147D0)) (list (list 15.0D0 5596.31689453125D0 0.013999870046973229D0 0.7246711850166321D0)) (list (list 15.0D0 5596.0224609375D0 0.01424030214548111D0 0.7371655106544495D0)) (list (list 15.0D0 5595.693359375D0 0.014913426712155342D0 0.7496598362922669D0)) (list (list 15.0D0 5596.044921875D0 0.015729408711194992D0 0.762154221534729D0)) (list (list 15.0D0 5596.53955078125D0 0.016559630632400513D0 0.7746485471725464D0)) (list (list 15.0D0 5596.6298828125D0 0.01736518181860447D0 0.7871428728103638D0)) (list (list 15.0D0 5596.541015625D0 0.018118375912308693D0 0.7996371984481812D0)) (list (list 15.0D0 5596.46337890625D0 0.018723933026194573D0 0.8121315240859985D0)) (list (list 15.0D0 5596.3828125D0 0.019065482541918755D0 0.8246258497238159D0)) (list (list 15.0D0 5596.634765625D0 0.019091660156846047D0 0.8371201753616333D0)) (list (list 15.0D0 5596.9775390625D0 0.01895665004849434D0 0.8496145009994507D0)) (list (list 15.0D0 5596.08154296875D0 0.018797311931848526D0 0.8621088266372681D0)) (list (list 15.0D0 5593.55908203125D0 0.01920376904308796D0 0.8746031522750855D0)) (list (list 15.0D0 5590.8623046875D0 0.020527370274066925D0 0.8870974779129028D0)) (list (list 15.0D0 5589.19970703125D0 0.02184988372027874D0 0.899591863155365D0)) (list (list 15.0D0 5588.89697265625D0 0.022578390315175057D0 0.9120861887931824D0)) (list (list 15.0D0 5590.296875D0 0.02260451205074787D0 0.9245805144309998D0)) (list (list 15.0D0 5592.56103515625D0 0.022642092779278755D0 0.9370748400688171D0)) (list (list 15.0D0 5594.53857421875D0 0.022802809253335D0 0.9495691657066345D0)) (list (list 15.0D0 5596.05029296875D0 0.022919923067092896D0 0.9620634913444519D0)) (list (list 15.0D0 5596.57763671875D0 0.023108763620257378D0 0.9745578169822693D0)) (list (list 15.0D0 5595.83935546875D0 0.02361735887825489D0 0.9870521426200867D0)) (list (list 15.0D0 5594.958984375D0 0.02495407499372959D0 0.999546468257904D0)) (list (list 15.0D0 5594.72216796875D0 0.026702415198087692D0 1.0120408535003662D0)) (list (list 15.0D0 5594.81640625D0 0.028168825432658196D0 1.0245351791381836D0)) (list (list 15.0D0 5595.0986328125D0 0.0290070753544569D0 1.037029504776001D0)) (list (list 15.0D0 5595.83056640625D0 0.029324118047952652D0 1.0495238304138184D0)) (list (list 15.0D0 5596.80419921875D0 0.029527224600315094D0 1.0620181560516358D0)) (list (list 15.0D0 5597.146484375D0 0.0298791341483593D0 1.0745124816894532D0)) (list (list 15.0D0 5596.37646484375D0 0.030427251011133194D0 1.0870068073272705D0)) (list (list 15.0D0 5595.083984375D0 0.03130895271897316D0 1.099501132965088D0)) (list (list 15.0D0 5594.47021484375D0 0.031989604234695435D0 1.1119954586029053D0)) (list (list 15.0D0 5594.6181640625D0 0.032187528908252716D0 1.1244897842407227D0)) (list (list 15.0D0 5594.76318359375D0 0.03222305327653885D0 1.13698410987854D0)) (list (list 15.0D0 5594.77392578125D0 0.03188294917345047D0 1.1494784355163575D0)) (list (list 15.0D0 5594.95751953125D0 0.03062158077955246D0 1.1619727611541748D0)) (list (list 15.0D0 5595.1484375D0 0.02844776026904583D0 1.1744670867919922D0)) (list (list 15.0D0 5595.04345703125D0 0.026078887283802033D0 1.1869614124298096D0)) (list (list 15.0D0 5594.69482421875D0 0.02422928251326084D0 1.199455738067627D0)) (list (list 15.0D0 5593.94384765625D0 0.023031391203403473D0 1.2119500637054444D0)) (list (list 15.0D0 5592.7294921875D0 0.02249911054968834D0 1.2244443893432618D0)) (list (list 15.0D0 5592.01611328125D0 0.02276901714503765D0 1.236938714981079D0)) (list (list 15.0D0 5592.38916015625D0 0.02358928881585598D0 1.249433159828186D0)) (list (list 15.0D0 5593.2314453125D0 0.024648983031511307D0 1.2619274854660035D0)) (list (list 15.0D0 5593.55224609375D0 0.02543259784579277D0 1.2744218111038208D0)) (list (list 15.0D0 5593.12646484375D0 0.025758929550647736D0 1.2869161367416382D0)) (list (list 15.0D0 5592.30517578125D0 0.025771239772439003D0 1.2994104623794556D0)) (list (list 15.0D0 5591.91796875D0 0.025290070101618767D0 1.311904788017273D0)) (list (list 15.0D0 5592.767578125D0 0.02400774508714676D0 1.3243991136550904D0)) (list (list 15.0D0 5594.748046875D0 0.022436991333961487D0 1.3368934392929078D0)) (list (list 15.0D0 5596.751953125D0 0.021213620901107788D0 1.349387764930725D0)) (list (list 15.0D0 5597.69677734375D0 0.02002047188580036D0 1.3618820905685425D0)) (list (list 15.0D0 5597.5927734375D0 0.018517054617404938D0 1.3743764162063599D0)) (list (list 15.0D0 5597.11865234375D0 0.016415376216173172D0 1.3868707418441773D0)) (list (list 15.0D0 5596.6259765625D0 0.01341106928884983D0 1.3993650674819947D0)) (list (list 15.0D0 5595.92431640625D0 0.01005116943269968D0 1.411859393119812D0)) (list (list 15.0D0 5595.18603515625D0 0.007783352863043547D0 1.4243537187576294D0)) (list (list 15.0D0 5594.84033203125D0 0.007443297654390335D0 1.4368480443954468D0)) (list (list 15.0D0 5595.0087890625D0 0.008362079970538617D0 1.4493423700332642D0)) (list (list 15.0D0 5595.43994140625D0 0.00939812883734703D0 1.4618366956710816D0)) (list (list 15.0D0 5595.3310546875D0 0.01019263919442892D0 1.474331021308899D0)) (list (list 15.0D0 5594.8203125D0 0.010799042880535126D0 1.4868253469467163D0)) (list (list 15.0D0 5594.73876953125D0 0.010928129777312279D0 1.4993196725845337D0)) (list (list 15.0D0 5595.40966796875D0 0.010304543189704419D0 1.5118141174316407D0)) (list (list 15.0D0 5596.259765625D0 0.009179741144180298D0 1.524308443069458D0)) (list (list 15.0D0 5596.9345703125D0 0.007946008816361428D0 1.5368027687072754D0)) (list (list 15.0D0 5597.01806640625D0 0.006879213731735945D0 1.5492970943450928D0)) (list (list 15.0D0 5596.24462890625D0 0.00610712356865406D0 1.5617914199829102D0)) (list (list 15.0D0 5595.17529296875D0 0.005598745308816433D0 1.5742857456207276D0)) (list (list 15.0D0 5594.75634765625D0 0.005140640772879124D0 1.586780071258545D0)) (list (list 15.0D0 5594.8017578125D0 0.004651837516576052D0 1.5992743968963623D0)) (list (list 15.0D0 5594.68798828125D0 0.004194853361696005D0 1.6117687225341797D0)) (list (list 15.0D0 5594.4404296875D0 0.003735535778105259D0 1.624263048171997D0)) (list (list 15.0D0 5594.919921875D0 0.003122735535725951D0 1.6367573738098145D0)) (list (list 15.0D0 5596.9111328125D0 0.0023716059513390065D0 1.6492516994476319D0)) (list (list 15.0D0 5598.97509765625D0 0.0017288032686337829D0 1.6617460250854493D0)) (list (list 15.0D0 5599.37939453125D0 0.0013132719323039055D0 1.6742403507232666D0)) (list (list 15.0D0 5598.77734375D0 0.001119193620979786D0 1.686734676361084D0)) (list (list 15.0D0 5598.55517578125D0 0.0010510007850825787D0 1.6992290019989014D0)) (list (list 15.0D0 5597.95458984375D0 0.0010327979689463973D0 1.7117233276367188D0)) (list (list 15.0D0 5596.2421875D0 0.001089476514607668D0 1.7242176532745362D0)) (list (list 15.0D0 5594.81640625D0 0.0012967201182618738D0 1.7367119789123536D0)) (list (list 15.0D0 5595.25146484375D0 0.0016439364990219474D0 1.749206304550171D0)) (list (list 15.0D0 5596.29345703125D0 0.0020784090738743544D0 1.7617006301879883D0)) (list (list 15.0D0 5596.0556640625D0 0.0024683841038495303D0 1.7741949558258057D0)) (list (list 15.0D0 5595.451171875D0 0.0027596892323344946D0 1.7866894006729126D0)) (list (list 15.0D0 5595.93212890625D0 0.002954256720840931D0 1.79918372631073D0)) (list (list 15.0D0 5596.86669921875D0 0.003057368565350771D0 1.8116780519485474D0)) (list (list 15.0D0 5596.70361328125D0 0.00303095206618309D0 1.8241723775863648D0)) (list (list 15.0D0 5595.685546875D0 0.0029503670521080494D0 1.8366667032241822D0)) (list (list 15.0D0 5594.8544921875D0 0.0029213191010057927D0 1.8491610288619996D0)) (list (list 15.0D0 5594.66552734375D0 0.0029173993971198798D0 1.861655354499817D0)) (list (list 15.0D0 5595.0380859375D0 0.002852481557056308D0 1.8741496801376343D0)) (list (list 15.0D0 5595.3544921875D0 0.002702675759792328D0 1.8866440057754517D0)) (list (list 15.0D0 5594.845703125D0 0.002531463513150811D0 1.899138331413269D0)) (list (list 15.0D0 5593.57470703125D0 0.002430855529382825D0 1.9116326570510865D0)) (list (list 15.0D0 5592.490234375D0 0.002441133139654994D0 1.9241269826889038D0)) (list (list 15.0D0 5592.68798828125D0 0.0025274415966123343D0 1.9366213083267212D0)) (list (list 15.0D0 5594.0322265625D0 0.002666318556293845D0 1.9491156339645386D0)) (list (list 15.0D0 5595.544921875D0 0.0028023344930261374D0 1.961609959602356D0)) (list (list 15.0D0 5596.51171875D0 0.0028328378684818745D0 1.9741042852401734D0)) (list (list 15.0D0 5597.23974609375D0 0.002766157267615199D0 1.9865986108779908D0)) (list (list 15.0D0 5597.87353515625D0 0.0026847405824810267D0 1.999092936515808D0)) (list (list 15.0D0 5598.12939453125D0 0.0026292491238564253D0 2.011587381362915D0)) (list (list 15.0D0 5597.9638671875D0 0.002605026587843895D0 2.0240817070007324D0)) (list (list 15.0D0 5597.90869140625D0 0.0026227261405438185D0 2.03657603263855D0)) (list (list 15.0D0 5598.09912109375D0 0.0026742378249764443D0 2.049070358276367D0)) (list (list 15.0D0 5597.70654296875D0 0.0027177988085895777D0 2.0615646839141846D0)) (list (list 15.0D0 5596.4189453125D0 0.002758156741037965D0 2.074059009552002D0)) (list (list 15.0D0 5595.5302734375D0 0.002848885953426361D0 2.0865533351898194D0)) (list (list 15.0D0 5596.02197265625D0 0.002949798945337534D0 2.0990476608276367D0)) (list (list 15.0D0 5597.1396484375D0 0.002992666093632579D0 2.111541986465454D0)) (list (list 15.0D0 5597.30078125D0 0.0028468393720686436D0 2.1240363121032715D0)) (list (list 15.0D0 5596.08837890625D0 0.002483435207977891D0 2.136530637741089D0)) (list (list 15.0D0 5594.76708984375D0 0.002018584869801998D0 2.1490249633789063D0)) (list (list 15.0D0 5595.13916015625D0 0.0015228475676849485D0 2.1615192890167237D0)) (list (list 15.0D0 5597.35498046875D0 0.0011399441864341498D0 2.174013614654541D0)) (list (list 15.0D0 5598.52197265625D0 0.0010056071914732457D0 2.1865079402923584D0)) (list (list 15.0D0 5598.248046875D0 0.0011516259983181954D0 2.199002265930176D0)) (list (list 15.0D0 5597.2041015625D0 0.001485062064602971D0 2.211496591567993D0)) (list (list 15.0D0 5595.576171875D0 0.0017917314544320107D0 2.2239909172058106D0)) (list (list 15.0D0 5594.8017578125D0 0.0019419125746935606D0 2.236485242843628D0)) (list (list 15.0D0 5595.505859375D0 0.002010475378483534D0 2.2489795684814453D0)) (list (list 15.0D0 5596.62744140625D0 0.0021774047054350376D0 2.2614738941192627D0)) (list (list 15.0D0 5597.04248046875D0 0.0023646994959563017D0 2.27396821975708D0)) (list (list 15.0D0 5596.68994140625D0 0.002269128104671836D0 2.2864625453948975D0)) (list (list 15.0D0 5596.34130859375D0 0.0017364388331770897D0 2.298956871032715D0)) (list (list 15.0D0 5598.3076171875D0 9.860709542408586D-4 2.3114511966705323D0)) (list (list 15.0D0 5600.94970703125D0 4.135846102144569D-4 2.3239455223083496D0)) (list (list 15.0D0 5593.3017578125D0 2.1722410747315735D-4 2.336439847946167D0)) (list (list 15.0D0 5584.62646484375D0 5.479482933878899D-4 2.3489341735839844D0)) (list (list 15.0D0 5590.14111328125D0 8.231531246565282D-4 2.3614284992218018D0)) (list (list 15.0D0 5594.962890625D0 0.001044072094373405D0 2.373922824859619D0)) (list (list 15.0D0 5598.03515625D0 0.0011527339229360223D0 2.3864171504974366D0)) (list (list 15.0D0 5599.404296875D0 0.0011991168139502407D0 2.398911476135254D0)) (list (list 15.0D0 5598.1455078125D0 0.0011690444080159069D0 2.4114058017730713D0)) (list (list 15.0D0 5596.3095703125D0 0.0010837070876732469D0 2.4239001274108887D0)) (list (list 15.0D0 5597.544921875D0 8.86338297277689D-4 2.436394453048706D0)) (list (list 15.0D0 5602.8427734375D0 6.978735909797251D-4 2.4488887786865235D0)) (list (list 15.0D0 5601.6025390625D0 5.424355040304363D-4 2.461383104324341D0)) (list (list 15.0D0 5582.64306640625D0 5.884600686840713D-4 2.4738776683807373D0)) (list (list 15.0D0 5588.9345703125D0 8.836917695589364D-4 2.4863719940185547D0)) (list (list 15.0D0 5588.2666015625D0 8.549604681320488D-4 2.498866319656372D0)) (list (list 15.0D0 5581.65234375D0 5.722175701521337D-4 2.5113606452941895D0)) (list (list 15.0D0 5597.89697265625D0 2.301995555171743D-4 2.523854970932007D0)) (list (list 15.0D0 5578.5283203125D0 3.5988056333735585D-4 2.536349296569824D0)) (list (list 15.0D0 5585.92333984375D0 4.995077615603805D-4 2.5488436222076416D0)) (list (list 15.0D0 5589.2158203125D0 7.616830989718437D-4 2.561337947845459D0)) (list (list 15.0D0 5590.953125D0 0.0010619201930239797D0 2.5738322734832764D0)) (list (list 15.0D0 5593.107421875D0 0.0012945388443768025D0 2.5863265991210938D0)) (list (list 15.0D0 5595.3583984375D0 0.0012986373621970416D0 2.598820924758911D0)) (list (list 15.0D0 5594.947265625D0 0.0010439620818942786D0 2.6113152503967285D0)) (list (list 15.0D0 5593.62060546875D0 8.896811632439494D-4 2.623809576034546D0)) (list (list 15.0D0 5593.68359375D0 0.0011721437331289053D0 2.6363039016723633D0)) (list (list 15.0D0 5595.5302734375D0 0.0017835712060332299D0 2.6487982273101807D0)) (list (list 15.0D0 5596.30419921875D0 0.002288991818204522D0 2.661292552947998D0)) (list (list 15.0D0 5595.7919921875D0 0.0024311647284775973D0 2.6737868785858155D0)) (list (list 15.0D0 5594.4931640625D0 0.002434584777802229D0 2.686281204223633D0)) (list (list 15.0D0 5593.26220703125D0 0.0026779964100569487D0 2.69877552986145D0)) (list (list 15.0D0 5593.17529296875D0 0.0031765494495630265D0 2.7112698554992676D0)) (list (list 15.0D0 5594.388671875D0 0.0036750745493918658D0 2.723764181137085D0)) (list (list 15.0D0 5595.4658203125D0 0.003987521398812532D0 2.7362585067749024D0)) (list (list 15.0D0 5595.2763671875D0 0.004019690211862326D0 2.7487528324127198D0)) (list (list 15.0D0 5593.48974609375D0 0.003735892940312624D0 2.761247158050537D0)) (list (list 15.0D0 5590.4365234375D0 0.003153776051476598D0 2.7737414836883545D0)) (list (list 15.0D0 5586.44580078125D0 0.00233450997620821D0 2.786235809326172D0)) (list (list 15.0D0 5584.27099609375D0 0.0017366274259984494D0 2.7987301349639893D0)) (list (list 15.0D0 5605.81982421875D0 0.0014045049902051688D0 2.8112244606018067D0)) (list (list 15.0D0 5597.69970703125D0 0.002949885558336973D0 2.823718786239624D0)) (list (list 15.0D0 5598.90478515625D0 0.004960615187883377D0 2.8362131118774414D0)) (list (list 15.0D0 5598.86669921875D0 0.0066414764150977135D0 2.848707437515259D0)) (list (list 15.0D0 5598.05029296875D0 0.007736743427813053D0 2.861201763153076D0)) (list (list 15.0D0 5596.8525390625D0 0.008389421738684178D0 2.8736960887908936D0)) (list (list 15.0D0 5595.828125D0 0.00892745703458786D0 2.886190414428711D0)) (list (list 15.0D0 5595.30419921875D0 0.009606246836483479D0 2.8986847400665283D0)) (list (list 15.0D0 5595.1142578125D0 0.010660839267075062D0 2.9111790657043457D0)) (list (list 15.0D0 5595.134765625D0 0.012280634604394436D0 2.923673391342163D0)) (list (list 15.0D0 5595.37744140625D0 0.014424515888094902D0 2.9361677169799805D0)) (list (list 15.0D0 5595.6943359375D0 0.016680575907230377D0 2.948662042617798D0)) (list (list 15.0D0 5595.5986328125D0 0.01839190348982811D0 2.9611563682556153D0)) (list (list 15.0D0 5594.5556640625D0 0.019061705097556114D0 2.9736506938934326D0)) (list (list 15.0D0 5592.94677734375D0 0.018795445561408997D0 2.98614501953125D0)) (list (list 15.0D0 5592.24365234375D0 0.017558544874191284D0 2.9986393451690674D0)) (list (list 15.0D0 5593.7587890625D0 0.01539770420640707D0 3.0111336708068848D0)) (list (list 15.0D0 5596.099609375D0 0.013698462396860123D0 3.0236282348632813D0)) (list (list 15.0D0 5596.8681640625D0 0.012401874177157879D0 3.0361225605010987D0)) (list (list 15.0D0 5595.18017578125D0 0.01073263119906187D0 3.048616886138916D0)) (list (list 15.0D0 5592.9755859375D0 0.008767788298428059D0 3.0611112117767334D0)) (list (list 15.0D0 5592.39990234375D0 0.006396591197699308D0 3.073605537414551D0)) (list (list 15.0D0 5597.39404296875D0 0.003997678402811289D0 3.086099863052368D0)) (list (list 15.0D0 5625.71923828125D0 0.001379778841510415D0 3.0985941886901856D0)) (list (list 15.0D0 5625.71923828125D0 0.0D0 3.111088514328003D0)) (list (list 16.0D0 5122.806640625D0 2.5752035435289145D-4 0.02498866245150566D0)) (list (list 16.0D0 5127.22021484375D0 5.169719224795699D-4 0.03748299181461334D0)) (list (list 16.0D0 5128.869140625D0 7.234225049614906D-4 0.04997732490301132D0)) (list (list 16.0D0 5123.1015625D0 6.523882620967925D-4 0.062471654266119D0)) (list (list 16.0D0 5118.22216796875D0 6.85668783262372D-4 0.07496598362922669D0)) (list (list 16.0D0 5120.64208984375D0 9.293016628362238D-4 0.08746031671762467D0)) (list (list 16.0D0 5134.9541015625D0 0.0016819824231788516D0 0.09995464980602265D0)) (list (list 16.0D0 5131.37451171875D0 0.0019617718644440174D0 0.11244898289442063D0)) (list (list 16.0D0 5131.279296875D0 0.0017780017806217075D0 0.124943308532238D0)) (list (list 16.0D0 5131.02001953125D0 0.001716980361379683D0 0.137437641620636D0)) (list (list 16.0D0 5129.52880859375D0 0.0023696774151176215D0 0.14993196725845337D0)) (list (list 16.0D0 5127.7939453125D0 0.003835140960291028D0 0.16242630779743195D0)) (list (list 16.0D0 5127.3251953125D0 0.005768186412751675D0 0.17492063343524933D0)) (list (list 16.0D0 5126.6533203125D0 0.007839600555598736D0 0.1874149590730667D0)) (list (list 16.0D0 5125.87255859375D0 0.00957353413105011D0 0.1999092996120453D0)) (list (list 16.0D0 5125.552734375D0 0.010403966531157494D0 0.21240362524986267D0)) (list (list 16.0D0 5125.615234375D0 0.010254492983222008D0 0.22489796578884125D0)) (list (list 16.0D0 5125.8056640625D0 0.009520442225039006D0 0.23739229142665863D0)) (list (list 16.0D0 5126.0859375D0 0.008509360253810883D0 0.249886617064476D0)) (list (list 16.0D0 5126.37646484375D0 0.007237672805786133D0 0.2623809576034546D0)) (list (list 16.0D0 5126.46923828125D0 0.005583031103014946D0 0.274875283241272D0)) (list (list 16.0D0 5124.89111328125D0 0.0035691384691745043D0 0.28736960887908936D0)) (list (list 16.0D0 5139.60986328125D0 0.001845032093115151D0 0.29986393451690674D0)) (list (list 16.0D0 5119.86279296875D0 0.0015121715841814876D0 0.3123582899570465D0)) (list (list 16.0D0 5127.89404296875D0 0.0018866184400394559D0 0.3248526155948639D0)) (list (list 16.0D0 5128.58935546875D0 0.0023689025547355414D0 0.3373469412326813D0)) (list (list 16.0D0 5126.26318359375D0 0.002091527683660388D0 0.34984126687049866D0)) (list (list 16.0D0 5120.982421875D0 0.0015684658428654075D0 0.36233559250831604D0)) (list (list 16.0D0 5122.68115234375D0 0.0012994128046557308D0 0.3748299181461334D0)) (list (list 16.0D0 5135.7451171875D0 0.0023699477314949036D0 0.3873242437839508D0)) (list (list 16.0D0 5131.84765625D0 0.004555119667202234D0 0.3998185992240906D0)) (list (list 16.0D0 5129.9248046875D0 0.006970399525016546D0 0.41231292486190796D0)) (list (list 16.0D0 5128.9501953125D0 0.009127574041485787D0 0.42480725049972534D0)) (list (list 16.0D0 5128.85546875D0 0.010629894211888314D0 0.4373015761375427D0)) (list (list 16.0D0 5129.25732421875D0 0.011496778577566147D0 0.4497959315776825D0)) (list (list 16.0D0 5129.771484375D0 0.011854862794280053D0 0.4622902572154999D0)) (list (list 16.0D0 5129.85546875D0 0.011796425096690655D0 0.47478458285331726D0)) (list (list 16.0D0 5129.419921875D0 0.011505077593028546D0 0.48727890849113465D0)) (list (list 16.0D0 5129.01171875D0 0.011177471838891507D0 0.499773234128952D0)) (list (list 16.0D0 5129.13671875D0 0.010835290886461735D0 0.5122675895690918D0)) (list (list 16.0D0 5129.79931640625D0 0.010443577542901039D0 0.5247619152069092D0)) (list (list 16.0D0 5130.2978515625D0 0.01005674060434103D0 0.5372562408447266D0)) (list (list 16.0D0 5129.68505859375D0 0.00967604573816061D0 0.549750566482544D0)) (list (list 16.0D0 5127.77783203125D0 0.009294557385146618D0 0.5622448921203613D0)) (list (list 16.0D0 5125.6572265625D0 0.008742105215787888D0 0.5747392177581787D0)) (list (list 16.0D0 5124.54150390625D0 0.007634401321411133D0 0.5872335433959961D0)) (list (list 16.0D0 5124.3076171875D0 0.006118561141192913D0 0.5997278690338135D0)) (list (list 16.0D0 5124.43017578125D0 0.0046837469562888146D0 0.6122221946716309D0)) (list (list 16.0D0 5124.91064453125D0 0.003575699869543314D0 0.624716579914093D0)) (list (list 16.0D0 5125.77880859375D0 0.002773449756205082D0 0.6372109055519104D0)) (list (list 16.0D0 5126.2890625D0 0.0021627789828926325D0 0.6497052311897278D0)) (list (list 16.0D0 5125.78466796875D0 0.0016121360240504146D0 0.6621995568275452D0)) (list (list 16.0D0 5120.59619140625D0 0.0011319642653688789D0 0.6746938824653626D0)) (list (list 16.0D0 5140.4951171875D0 8.325475500896573D-4 0.6871882081031799D0)) (list (list 16.0D0 5134.58447265625D0 0.0012577715096995235D0 0.6996825337409973D0)) (list (list 16.0D0 5127.83837890625D0 0.0024798891972750426D0 0.7121768593788147D0)) (list (list 16.0D0 5128.58935546875D0 0.0033680140040814877D0 0.7246711850166321D0)) (list (list 16.0D0 5129.0400390625D0 0.003808704437687993D0 0.7371655106544495D0)) (list (list 16.0D0 5129.58984375D0 0.0038490304723381996D0 0.7496598362922669D0)) (list (list 16.0D0 5130.01220703125D0 0.003686953568831086D0 0.762154221534729D0)) (list (list 16.0D0 5129.95068359375D0 0.0034113808069378138D0 0.7746485471725464D0)) (list (list 16.0D0 5129.1328125D0 0.0029327820520848036D0 0.7871428728103638D0)) (list (list 16.0D0 5127.5673828125D0 0.002197758760303259D0 0.7996371984481812D0)) (list (list 16.0D0 5124.92236328125D0 0.001368592493236065D0 0.8121315240859985D0)) (list (list 16.0D0 5119.416015625D0 7.506575202569366D-4 0.8246258497238159D0)) (list (list 16.0D0 5115.51318359375D0 6.433402886614203D-4 0.8371201753616333D0)) (list (list 16.0D0 5117.02978515625D0 8.832046878524125D-4 0.8496145009994507D0)) (list (list 16.0D0 5121.39111328125D0 0.0013881464255973697D0 0.8621088266372681D0)) (list (list 16.0D0 5122.513671875D0 0.0018236463656648994D0 0.8746031522750855D0)) (list (list 16.0D0 5122.6611328125D0 0.0019113888265565038D0 0.8870974779129028D0)) (list (list 16.0D0 5123.18408203125D0 0.0017329450929537416D0 0.899591863155365D0)) (list (list 16.0D0 5123.82470703125D0 0.0015819573309272528D0 0.9120861887931824D0)) (list (list 16.0D0 5124.552734375D0 0.0016688345931470395D0 0.9245805144309998D0)) (list (list 16.0D0 5125.39501953125D0 0.001946216681972146D0 0.9370748400688171D0)) (list (list 16.0D0 5126.0087890625D0 0.0021378416568040848D0 0.9495691657066345D0)) (list (list 16.0D0 5127.09765625D0 0.002018818398937583D0 0.9620634913444519D0)) (list (list 16.0D0 5128.64794921875D0 0.0017036934150382877D0 0.9745578169822693D0)) (list (list 16.0D0 5129.3916015625D0 0.0014587311306968332D0 0.9870521426200867D0)) (list (list 16.0D0 5129.125D0 0.0013723575975745917D0 0.999546468257904D0)) (list (list 16.0D0 5128.36279296875D0 0.0013520829379558564D0 1.0120408535003662D0)) (list (list 16.0D0 5127.03466796875D0 0.001266474719159305D0 1.0245351791381836D0)) (list (list 16.0D0 5123.998046875D0 0.0010981867089867592D0 1.037029504776001D0)) (list (list 16.0D0 5120.80419921875D0 9.406155440956354D-4 1.0495238304138184D0)) (list (list 16.0D0 5118.44775390625D0 8.392262971028686D-4 1.0620181560516358D0)) (list (list 16.0D0 5118.12548828125D0 6.902969907969236D-4 1.0745124816894532D0)) (list (list 16.0D0 5124.603515625D0 4.972121096216142D-4 1.0870068073272705D0)) (list (list 16.0D0 5125.28125D0 3.6978721618652344D-4 1.099501132965088D0)) (list (list 16.0D0 5120.1943359375D0 3.602628712542355D-4 1.1119954586029053D0)) (list (list 16.0D0 5115.84814453125D0 4.933474119752646D-4 1.1244897842407227D0)) (list (list 16.0D0 5116.0283203125D0 5.814546020701528D-4 1.13698410987854D0)) (list (list 16.0D0 5116.37890625D0 6.981983315199614D-4 1.1494784355163575D0)) (list (list 16.0D0 5119.068359375D0 8.609555079601705D-4 1.1619727611541748D0)) (list (list 16.0D0 5124.82568359375D0 0.0011067574378103018D0 1.1744670867919922D0)) (list (list 16.0D0 5126.4736328125D0 0.001291554537601769D0 1.1869614124298096D0)) (list (list 16.0D0 5126.7734375D0 0.001324474927969277D0 1.199455738067627D0)) (list (list 16.0D0 5126.67236328125D0 0.0012939299922436476D0 1.2119500637054444D0)) (list (list 16.0D0 5125.9873046875D0 0.0012649333802983165D0 1.2244443893432618D0)) (list (list 16.0D0 5124.72509765625D0 0.0012284048134461046D0 1.236938714981079D0)) (list (list 16.0D0 5123.85498046875D0 0.0011237489525228739D0 1.249433159828186D0)) (list (list 16.0D0 5123.74365234375D0 9.428454213775694D-4 1.2619274854660035D0)) (list (list 16.0D0 5123.72900390625D0 7.591050234623253D-4 1.2744218111038208D0)) (list (list 16.0D0 5124.11962890625D0 6.002858863212168D-4 1.2869161367416382D0)) (list (list 16.0D0 5128.7216796875D0 4.336498095653951D-4 1.2994104623794556D0)) (list (list 16.0D0 5108.71142578125D0 2.6638180133886636D-4 1.311904788017273D0)) (list (list 16.0D0 5099.5126953125D0 3.9076831308193505D-4 1.3243991136550904D0)) (list (list 16.0D0 5107.39013671875D0 3.8454684545286D-4 1.3368934392929078D0)) (list (list 16.0D0 5085.85546875D0 1.6563980898354203D-4 1.349387764930725D0)) (list (list 16.0D0 5085.85546875D0 0.0D0 1.3618820905685425D0)) (list (list 17.0D0 2776.148193359375D0 0.0035264447797089815D0 0.02498866245150566D0)) (list (list 17.0D0 2782.06396484375D0 0.006126461084932089D0 0.03748299181461334D0)) (list (list 17.0D0 2785.761962890625D0 0.008260875009000302D0 0.04997732490301132D0)) (list (list 17.0D0 2788.148193359375D0 0.008926867507398129D0 0.062471654266119D0)) (list (list 17.0D0 2790.404052734375D0 0.008325379341840744D0 0.07496598362922669D0)) (list (list 17.0D0 2792.798095703125D0 0.006989411544054747D0 0.08746031671762467D0)) (list (list 17.0D0 2789.986083984375D0 0.004119514022022486D0 0.11244898289442063D0)) (list (list 17.0D0 2787.314208984375D0 0.004406820051372051D0 0.124943308532238D0)) (list (list 17.0D0 2780.78515625D0 0.005969278980046511D0 0.14993196725845337D0)) (list (list 17.0D0 2784.585693359375D0 0.00581378024071455D0 0.16242630779743195D0)) (list (list 17.0D0 2796.27099609375D0 0.008668126538395882D0 0.17492063343524933D0)) (list (list 17.0D0 2796.27099609375D0 0.0D0 0.1874149590730667D0)) (list (list 18.0D0 1359.323974609375D0 7.439187611453235D-4 0.02498866245150566D0)) (list (list 18.0D0 1359.6949462890625D0 7.687107427045703D-4 0.03748299181461334D0)) (list (list 18.0D0 1340.2796630859375D0 3.912862157449126D-4 0.062471654266119D0)) (list (list 18.0D0 1337.5087890625D0 3.8790670805610717D-4 0.07496598362922669D0)) (list (list 18.0D0 1349.6580810546875D0 3.9068484329618514D-4 0.08746031671762467D0)) (list (list 18.0D0 1371.199951171875D0 0.0011490944307297469D0 0.09995464980602265D0)) (list (list 18.0D0 1356.1044921875D0 5.747770192101598D-4 0.11244898289442063D0)) (list (list 18.0D0 1351.3333740234375D0 5.800453363917768D-4 0.124943308532238D0)) (list (list 18.0D0 1341.4129638671875D0 5.534360534511507D-4 0.137437641620636D0)) (list (list 18.0D0 1337.0562744140625D0 5.886757280677557D-4 0.14993196725845337D0)) (list (list 18.0D0 1333.1517333984375D0 5.614751717075706D-4 0.16242630779743195D0)) (list (list 18.0D0 1333.0291748046875D0 5.744645604863763D-4 0.17492063343524933D0)) (list (list 18.0D0 1334.8040771484375D0 6.570041878148913D-4 0.1874149590730667D0)) (list (list 18.0D0 1337.0870361328125D0 7.166855502873659D-4 0.1999092996120453D0)) (list (list 18.0D0 1337.17041015625D0 5.996249965392053D-4 0.21240362524986267D0)) (list (list 18.0D0 1335.574951171875D0 4.1496759513393045D-4 0.22489796578884125D0)) (list (list 18.0D0 1338.4971923828125D0 3.531941620167345D-4 0.23739229142665863D0)) (list (list 18.0D0 1363.1158447265625D0 0.0011153646046295762D0 0.249886617064476D0)) (list (list 18.0D0 1362.4423828125D0 0.0011305363150313497D0 0.2623809576034546D0)) (list (list 18.0D0 1331.866455078125D0 4.7107547288760543D-4 0.274875283241272D0)) (list (list 18.0D0 1357.987548828125D0 7.872571586631239D-4 0.28736960887908936D0)) (list (list 18.0D0 1349.640869140625D0 5.58234634809196D-4 0.29986393451690674D0)) (list (list 18.0D0 1343.0208740234375D0 3.7616718327626586D-4 0.3123582899570465D0)) (list (list 18.0D0 1341.412841796875D0 3.8151885382831097D-4 0.3248526155948639D0)) (list (list 18.0D0 1346.0404052734375D0 4.30435553425923D-4 0.3373469412326813D0)) (list (list 18.0D0 1349.87451171875D0 5.194417317397893D-4 0.34984126687049866D0)) (list (list 18.0D0 1349.2919921875D0 6.627191905863583D-4 0.36233559250831604D0)) (list (list 18.0D0 1334.309814453125D0 9.540498140268028D-4 0.3873242437839508D0)) (list (list 18.0D0 1334.6875D0 9.280298836529255D-4 0.3998185992240906D0)) (list (list 18.0D0 1338.3692626953125D0 7.780137239024043D-4 0.41231292486190796D0)) (list (list 18.0D0 1340.2322998046875D0 6.19432597886771D-4 0.42480725049972534D0)) (list (list 18.0D0 1338.697265625D0 4.4313856051303447D-4 0.4373015761375427D0)) (list (list 18.0D0 1342.6912841796875D0 3.281237732153386D-4 0.4497959315776825D0)) (list (list 18.0D0 1356.93701171875D0 5.054105422459543D-4 0.4622902572154999D0)) (list (list 18.0D0 1357.9666748046875D0 6.044108304195106D-4 0.47478458285331726D0)) (list (list 18.0D0 1321.639892578125D0 3.6130944499745965D-4 0.48727890849113465D0)) (list (list 18.0D0 1354.0933837890625D0 8.335571619682014D-4 0.499773234128952D0)) (list (list 18.0D0 1349.4603271484375D0 9.69153072219342D-4 0.5122675895690918D0)) (list (list 18.0D0 1351.1756591796875D0 0.0010534643661230803D0 0.5247619152069092D0)) (list (list 18.0D0 1354.313720703125D0 9.019178105518222D-4 0.5372562408447266D0)) (list (list 18.0D0 1354.52978515625D0 8.294119033962488D-4 0.549750566482544D0)) (list (list 18.0D0 1358.104736328125D0 7.592320907860994D-4 0.5622448921203613D0)) (list (list 18.0D0 1330.8411865234375D0 3.9303561788983643D-4 0.5747392177581787D0)) (list (list 18.0D0 1335.290771484375D0 3.116103762295097D-4 0.5872335433959961D0)) (list (list 18.0D0 1319.7994384765625D0 2.1258067863527686D-4 0.5997278690338135D0)) (list (list 18.0D0 1348.75634765625D0 7.740281871519983D-4 0.624716579914093D0)) (list (list 18.0D0 1371.43994140625D0 0.0011417411733418703D0 0.6497052311897278D0)) (list (list 18.0D0 1334.72412109375D0 4.836067673750222D-4 0.6746938824653626D0)) (list (list 18.0D0 1334.658203125D0 6.082204636186361D-4 0.6871882081031799D0)) (list (list 18.0D0 1330.1966552734375D0 6.602646899409592D-4 0.6996825337409973D0)) (list (list 18.0D0 1327.5518798828125D0 6.886398186907172D-4 0.7121768593788147D0)) (list (list 18.0D0 1328.574462890625D0 6.954380660317838D-4 0.7246711850166321D0)) (list (list 18.0D0 1331.73095703125D0 7.107636774890125D-4 0.7371655106544495D0)) (list (list 18.0D0 1335.302978515625D0 7.155131897889078D-4 0.7496598362922669D0)) (list (list 18.0D0 1337.5947265625D0 6.423650775104761D-4 0.762154221534729D0)) (list (list 18.0D0 1338.2896728515625D0 5.14380051754415D-4 0.7746485471725464D0)) (list (list 18.0D0 1360.5091552734375D0 5.963633884675801D-4 0.7871428728103638D0)) (list (list 18.0D0 1359.9385986328125D0 6.527220830321312D-4 0.7996371984481812D0)) (list (list 18.0D0 1337.4580078125D0 3.047984791919589D-4 0.8121315240859985D0)) (list (list 18.0D0 1364.7882080078125D0 8.439980447292328D-4 0.8246258497238159D0)) (list (list 18.0D0 1352.690185546875D0 3.844838065560907D-4 0.8496145009994507D0)) (list (list 18.0D0 1353.2431640625D0 3.0783715192228556D-4 0.8621088266372681D0)) (list (list 18.0D0 1325.0604248046875D0 9.663703531259671D-5 0.8746031522750855D0)) (list (list 18.0D0 1359.4854736328125D0 4.017122555524111D-4 0.8870974779129028D0))) (list (list (list 18.0D0 1362.0562744140625D0 5.613858811557293D-4 0.899591863155365D0)) (list (list 18.0D0 1372.46630859375D0 0.001126287505030632D0 0.9120861887931824D0)) (list (list 18.0D0 1362.8951416015625D0 6.996297743171454D-4 0.9370748400688171D0)) (list (list 18.0D0 1342.8099365234375D0 5.413747276179493D-4 0.9495691657066345D0)) (list (list 18.0D0 1366.5855712890625D0 0.0019216473447158933D0 0.9745578169822693D0)) (list (list 18.0D0 1366.4935302734375D0 0.0015411247732117773D0 0.9870521426200867D0)) (list (list 18.0D0 1347.5819091796875D0 7.27096339687705D-4 0.999546468257904D0)) (list (list 18.0D0 1344.690185546875D0 4.5547448098659516D-4 1.0120408535003662D0)) (list (list 18.0D0 1343.880615234375D0 3.769642789848149D-4 1.0245351791381836D0)) (list (list 18.0D0 1341.0211181640625D0 3.7169898860156536D-4 1.037029504776001D0)) (list (list 18.0D0 1341.8154296875D0 3.34467418724671D-4 1.0495238304138184D0)) (list (list 18.0D0 1323.195068359375D0 1.388920354656875D-4 1.0620181560516358D0)) (list (list 18.0D0 1346.530029296875D0 2.312517026439309D-4 1.0745124816894532D0)) (list (list 18.0D0 1346.0179443359375D0 1.895170280477032D-4 1.0870068073272705D0)) (list (list 18.0D0 1367.1436767578125D0 7.934115710668266D-4 1.099501132965088D0)) (list (list 18.0D0 1353.5435791015625D0 2.949156623799354D-4 1.1244897842407227D0)) (list (list 18.0D0 1349.0687255859375D0 2.9619544511660934D-4 1.13698410987854D0)) (list (list 18.0D0 1351.37548828125D0 4.593344056047499D-4 1.1494784355163575D0)) (list (list 18.0D0 1357.952392578125D0 9.382017306052148D-4 1.1619727611541748D0)) (list (list 18.0D0 1363.614990234375D0 0.0016045848606154323D0 1.1744670867919922D0)) (list (list 18.0D0 1362.6165771484375D0 0.001893379958346486D0 1.1869614124298096D0)) (list (list 18.0D0 1362.9549560546875D0 0.0016530327266082168D0 1.199455738067627D0)) (list (list 18.0D0 1364.7230224609375D0 0.0010338102001696825D0 1.2119500637054444D0)) (list (list 18.0D0 1368.2659912109375D0 5.538899567909539D-4 1.2244443893432618D0)) (list (list 18.0D0 1334.8253173828125D0 2.89365416392684D-4 1.236938714981079D0)) (list (list 18.0D0 1330.91650390625D0 2.2839161101728678D-4 1.249433159828186D0)) (list (list 18.0D0 1332.712158203125D0 2.8177638887427747D-4 1.2619274854660035D0)) (list (list 18.0D0 1362.615234375D0 7.024393999017775D-4 1.2744218111038208D0)) (list (list 18.0D0 1356.8187255859375D0 9.881739970296622D-4 1.2869161367416382D0)) (list (list 18.0D0 1358.5550537109375D0 0.0011517793172970415D0 1.2994104623794556D0)) (list (list 18.0D0 1362.4619140625D0 0.0013162825489416719D0 1.311904788017273D0)) (list (list 18.0D0 1338.3970947265625D0 8.322980138473213D-4 1.3368934392929078D0)) (list (list 18.0D0 1338.252685546875D0 8.280793554149568D-4 1.349387764930725D0)) (list (list 18.0D0 1343.9326171875D0 6.473163375630975D-4 1.3618820905685425D0)) (list (list 18.0D0 1352.5543212890625D0 4.7144806012511254D-4 1.3743764162063599D0)) (list (list 18.0D0 1333.8482666015625D0 3.104082716163248D-4 1.3868707418441773D0)) (list (list 18.0D0 1349.7655029296875D0 4.5267672976478934D-4 1.411859393119812D0)) (list (list 18.0D0 1352.1671142578125D0 3.3176879514940083D-4 1.4243537187576294D0)) (list (list 18.0D0 1353.92529296875D0 4.4258913840167225D-4 1.4493423700332642D0)) (list (list 18.0D0 1353.860107421875D0 5.034538335166872D-4 1.4618366956710816D0)) (list (list 18.0D0 1333.1192626953125D0 4.4153339695185423D-4 1.474331021308899D0)) (list (list 18.0D0 1337.01708984375D0 5.133379017934203D-4 1.4868253469467163D0)) (list (list 18.0D0 1317.1846923828125D0 2.6800762861967087D-4 1.4993196725845337D0)) (list (list 18.0D0 1318.0137939453125D0 2.878258819691837D-4 1.5118141174316407D0)) (list (list 18.0D0 1344.523193359375D0 8.80714098457247D-4 1.524308443069458D0)) (list (list 18.0D0 1335.7447509765625D0 6.655939505435526D-4 1.5368027687072754D0)) (list (list 18.0D0 1334.6375732421875D0 4.895866150036454D-4 1.5492970943450928D0)) (list (list 18.0D0 1342.8677978515625D0 3.638628404587507D-4 1.5617914199829102D0)) (list (list 18.0D0 1348.457275390625D0 5.897960509173572D-4 1.5742857456207276D0)) (list (list 18.0D0 1353.296875D0 8.19249136839062D-4 1.6117687225341797D0)) (list (list 18.0D0 1370.5289306640625D0 8.065373403951526D-4 1.624263048171997D0)) (list (list 18.0D0 1348.3909912109375D0 5.540798301808536D-4 1.6367573738098145D0)) (list (list 18.0D0 1347.6038818359375D0 4.852908896282315D-4 1.6492516994476319D0)) (list (list 18.0D0 1342.3250732421875D0 3.4285077708773315D-4 1.6617460250854493D0)) (list (list 18.0D0 1341.0849609375D0 2.7819807291962207D-4 1.6742403507232666D0)) (list (list 18.0D0 1340.2669677734375D0 3.500168095342815D-4 1.686734676361084D0)) (list (list 18.0D0 1339.9716796875D0 4.3933329288847745D-4 1.6992290019989014D0)) (list (list 18.0D0 1338.3623046875D0 4.2784333345480263D-4 1.7117233276367188D0)) (list (list 18.0D0 1333.050048828125D0 3.106504736933857D-4 1.7242176532745362D0)) (list (list 18.0D0 1332.2913818359375D0 2.5823904434219003D-4 1.7367119789123536D0)) (list (list 18.0D0 1333.1414794921875D0 2.916533558163792D-4 1.749206304550171D0)) (list (list 18.0D0 1333.6312255859375D0 3.7524389335885644D-4 1.7617006301879883D0)) (list (list 18.0D0 1335.21533203125D0 4.529809230007231D-4 1.7741949558258057D0)) (list (list 18.0D0 1339.7294921875D0 5.514948861673474D-4 1.7866894006729126D0)) (list (list 18.0D0 1344.8902587890625D0 7.13503803126514D-4 1.79918372631073D0)) (list (list 18.0D0 1344.829345703125D0 8.047486189752817D-4 1.8116780519485474D0)) (list (list 18.0D0 1348.052978515625D0 9.371499763801694D-4 1.8241723775863648D0)) (list (list 18.0D0 1364.364501953125D0 0.001362195354886353D0 1.8366667032241822D0)) (list (list 18.0D0 1361.855712890625D0 7.33735563699156D-4 1.861655354499817D0)) (list (list 18.0D0 1331.522705078125D0 4.476694739423692D-4 1.8741496801376343D0)) (list (list 18.0D0 1333.93701171875D0 4.3144667870365083D-4 1.8866440057754517D0)) (list (list 18.0D0 1339.9342041015625D0 5.047452868893743D-4 1.899138331413269D0)) (list (list 18.0D0 1344.716064453125D0 5.768341361545026D-4 1.9116326570510865D0)) (list (list 18.0D0 1344.4439697265625D0 5.689063109457493D-4 1.9241269826889038D0)) (list (list 18.0D0 1341.87744140625D0 4.716613329946995D-4 1.9366213083267212D0)) (list (list 18.0D0 1330.283203125D0 3.895557892974466D-4 1.9491156339645386D0)) (list (list 18.0D0 1329.244140625D0 3.6832335172221065D-4 1.961609959602356D0)) (list (list 18.0D0 1353.4727783203125D0 6.100626196712256D-4 1.9865986108779908D0)) (list (list 18.0D0 1353.5880126953125D0 5.164372269064188D-4 1.999092936515808D0)) (list (list 18.0D0 1332.1380615234375D0 3.5998455132357776D-4 2.011587381362915D0)) (list (list 18.0D0 1348.25390625D0 6.311496254056692D-4 2.03657603263855D0)) (list (list 18.0D0 1367.574951171875D0 6.279426743276417D-4 2.049070358276367D0)) (list (list 18.0D0 1346.158935546875D0 3.730932658072561D-4 2.0615646839141846D0)) (list (list 18.0D0 1344.6011962890625D0 3.3075996907427907D-4 2.074059009552002D0)) (list (list 18.0D0 1342.8092041015625D0 3.0674206209369004D-4 2.0865533351898194D0)) (list (list 18.0D0 1333.3804931640625D0 2.1811475744470954D-4 2.0990476608276367D0)) (list (list 18.0D0 1331.2041015625D0 1.670819183345884D-4 2.111541986465454D0)) (list (list 18.0D0 1330.336181640625D0 2.3223402968142182D-4 2.1240363121032715D0)) (list (list 18.0D0 1329.4715576171875D0 4.2232684791088104D-4 2.136530637741089D0)) (list (list 18.0D0 1330.1829833984375D0 6.660732324235141D-4 2.1490249633789063D0)) (list (list 18.0D0 1331.414306640625D0 8.391108713112772D-4 2.1615192890167237D0)) (list (list 18.0D0 1333.4825439453125D0 7.896837778389454D-4 2.174013614654541D0)) (list (list 18.0D0 1349.842529296875D0 6.361958803609014D-4 2.1865079402923584D0)) (list (list 18.0D0 1354.9239501953125D0 7.710452773608267D-4 2.199002265930176D0)) (list (list 18.0D0 1374.1607666015625D0 0.003782900981605053D0 2.2239909172058106D0)) (list (list 18.0D0 1356.5689697265625D0 0.0011014915071427823D0 2.236485242843628D0)) (list (list 18.0D0 1357.1395263671875D0 8.391196606680751D-4 2.2489795684814453D0)) (list (list 18.0D0 1336.7904052734375D0 4.219308029860258D-4 2.2614738941192627D0)) (list (list 18.0D0 1334.81201171875D0 3.9229507092386484D-4 2.27396821975708D0)) (list (list 18.0D0 1338.80078125D0 2.622006577439606D-4 2.298956871032715D0)) (list (list 18.0D0 1315.0318603515625D0 3.726797876879573D-4 2.3114511966705323D0)) (list (list 18.0D0 1315.0318603515625D0 0.0D0 2.3239455223083496D0)) (list (list 19.0D0 3722.330078125D0 0.0019616778008639813D0 0.03748299181461334D0)) (list (list 19.0D0 3724.952880859375D0 0.002849956275895238D0 0.04997732490301132D0)) (list (list 19.0D0 3727.577880859375D0 0.004055510275065899D0 0.062471654266119D0)) (list (list 19.0D0 3729.920166015625D0 0.0058036972768604756D0 0.07496598362922669D0)) (list (list 19.0D0 3729.920166015625D0 0.0D0 0.08746031671762467D0)) (list (list 20.0D0 1853.9705810546875D0 0.004513789899647236D0 0.03748299181461334D0)) (list (list 20.0D0 1863.30078125D0 0.006110499147325754D0 0.062471654266119D0)) (list (list 20.0D0 1869.01123046875D0 0.005057929083704948D0 0.07496598362922669D0)) (list (list 20.0D0 1874.65283203125D0 0.0038814768195152283D0 0.08746031671762467D0)) (list (list 20.0D0 1874.65283203125D0 0.0D0 0.09995464980602265D0)) (list (list 21.0D0 2326.076904296875D0 0.004356898367404938D0 0.04997732490301132D0)) (list (list 21.0D0 2331.5986328125D0 0.004660944454371929D0 0.062471654266119D0)) (list (list 21.0D0 2333.716796875D0 0.005248320288956165D0 0.07496598362922669D0)) (list (list 21.0D0 2333.0009765625D0 0.005771693307906389D0 0.08746031671762467D0)) (list (list 21.0D0 2331.90673828125D0 0.00616610748693347D0 0.09995464980602265D0)) (list (list 21.0D0 2332.219482421875D0 0.006014050450176001D0 0.11244898289442063D0)) (list (list 21.0D0 2333.306396484375D0 0.005310168955475092D0 0.124943308532238D0)) (list (list 21.0D0 2334.106201171875D0 0.004323560278862715D0 0.137437641620636D0)) (list (list 21.0D0 2334.548828125D0 0.0034392913803458214D0 0.14993196725845337D0)) (list (list 21.0D0 2333.7958984375D0 0.002826129551976919D0 0.16242630779743195D0)) (list (list 21.0D0 2333.7958984375D0 0.0D0 0.17492063343524933D0)) (list (list 22.0D0 6534.4970703125D0 5.02992479596287D-4 0.062471654266119D0)) (list (list 22.0D0 6536.50146484375D0 7.316903211176395D-4 0.07496598362922669D0)) (list (list 22.0D0 6537.32958984375D0 8.904883870854974D-4 0.08746031671762467D0)) (list (list 22.0D0 6536.70458984375D0 8.7117834482342D-4 0.09995464980602265D0)) (list (list 22.0D0 6536.21044921875D0 7.200889522209764D-4 0.11244898289442063D0)) (list (list 22.0D0 6535.9521484375D0 6.209706189110875D-4 0.124943308532238D0)) (list (list 22.0D0 6530.88427734375D0 0.001083063194528222D0 0.14993196725845337D0)) (list (list 22.0D0 6529.43359375D0 0.0014457096112892032D0 0.16242630779743195D0)) (list (list 22.0D0 6528.78076171875D0 0.0015792087651789189D0 0.17492063343524933D0)) (list (list 22.0D0 6529.3583984375D0 0.0013848475646227599D0 0.1874149590730667D0)) (list (list 22.0D0 6532.30029296875D0 0.0010244883596897126D0 0.1999092996120453D0)) (list (list 22.0D0 6533.5927734375D0 7.675368688069284D-4 0.21240362524986267D0)) (list (list 22.0D0 6531.048828125D0 6.479485891759396D-4 0.22489796578884125D0)) (list (list 22.0D0 6526.24853515625D0 6.537932204082608D-4 0.23739229142665863D0)) (list (list 22.0D0 6524.75244140625D0 5.905430880375207D-4 0.249886617064476D0)) (list (list 22.0D0 6523.03662109375D0 4.766412894241512D-4 0.2623809576034546D0)) (list (list 22.0D0 6520.51953125D0 4.025611560791731D-4 0.274875283241272D0)) (list (list 22.0D0 6519.62548828125D0 3.7330802297219634D-4 0.28736960887908936D0)) (list (list 22.0D0 6523.7109375D0 3.639575152192265D-4 0.29986393451690674D0)) (list (list 22.0D0 6527.41748046875D0 4.5003637205809355D-4 0.3123582899570465D0)) (list (list 22.0D0 6527.39111328125D0 5.791287403553724D-4 0.3248526155948639D0)) (list (list 22.0D0 6525.52734375D0 7.159276283346117D-4 0.3373469412326813D0)) (list (list 22.0D0 6526.12451171875D0 8.451847243122757D-4 0.34984126687049866D0)) (list (list 22.0D0 6529.15234375D0 9.95539827272296D-4 0.36233559250831604D0)) (list (list 22.0D0 6532.05029296875D0 0.00122283142991364D0 0.3748299181461334D0)) (list (list 22.0D0 6532.94677734375D0 0.001397722284309566D0 0.3873242437839508D0)) (list (list 22.0D0 6532.4072265625D0 0.001391738303937018D0 0.3998185992240906D0)) (list (list 22.0D0 6531.40771484375D0 0.0011725433869287372D0 0.41231292486190796D0)) (list (list 22.0D0 6533.54248046875D0 7.991368183866143D-4 0.42480725049972534D0)) (list (list 22.0D0 6516.7470703125D0 5.386926932260394D-4 0.4373015761375427D0)) (list (list 22.0D0 6518.91259765625D0 7.345377816818655D-4 0.4497959315776825D0)) (list (list 22.0D0 6531.51171875D0 0.0015859565464779735D0 0.4622902572154999D0)) (list (list 22.0D0 6529.8759765625D0 0.002381882630288601D0 0.47478458285331726D0)) (list (list 22.0D0 6528.9306640625D0 0.0029569983016699553D0 0.48727890849113465D0)) (list (list 22.0D0 6528.17236328125D0 0.0032999117393046618D0 0.499773234128952D0)) (list (list 22.0D0 6528.208984375D0 0.003497270867228508D0 0.5122675895690918D0)) (list (list 22.0D0 6529.12890625D0 0.003579795127734542D0 0.5247619152069092D0)) (list (list 22.0D0 6530.78564453125D0 0.0033901191782206297D0 0.5372562408447266D0)) (list (list 22.0D0 6533.55322265625D0 0.0028081072960048914D0 0.549750566482544D0)) (list (list 22.0D0 6534.48974609375D0 0.0020879514049738646D0 0.5622448921203613D0)) (list (list 22.0D0 6531.8125D0 0.001757382764481008D0 0.5747392177581787D0)) (list (list 22.0D0 6526.67431640625D0 0.0024033193476498127D0 0.5872335433959961D0)) (list (list 22.0D0 6524.03857421875D0 0.0036445914302021265D0 0.5997278690338135D0)) (list (list 22.0D0 6523.94482421875D0 0.00472725834697485D0 0.6122221946716309D0)) (list (list 22.0D0 6524.60498046875D0 0.005470214877277613D0 0.624716579914093D0)) (list (list 22.0D0 6525.18408203125D0 0.005959101486951113D0 0.6372109055519104D0)) (list (list 22.0D0 6525.23779296875D0 0.006341960746794939D0 0.6497052311897278D0)) (list (list 22.0D0 6525.4912109375D0 0.006683802232146263D0 0.6621995568275452D0)) (list (list 22.0D0 6526.474609375D0 0.006963444873690605D0 0.6746938824653626D0)) (list (list 22.0D0 6527.37939453125D0 0.007116212043911219D0 0.6871882081031799D0)) (list (list 22.0D0 6527.62158203125D0 0.006995000410825014D0 0.6996825337409973D0)) (list (list 22.0D0 6527.8447265625D0 0.006631605792790651D0 0.7121768593788147D0)) (list (list 22.0D0 6528.2724609375D0 0.00625710841268301D0 0.7246711850166321D0)) (list (list 22.0D0 6528.27978515625D0 0.006083042826503515D0 0.7371655106544495D0)) (list (list 22.0D0 6528.021484375D0 0.00613743020221591D0 0.7496598362922669D0)) (list (list 22.0D0 6528.3056640625D0 0.006294554565101862D0 0.762154221534729D0)) (list (list 22.0D0 6528.9541015625D0 0.006488324608653784D0 0.7746485471725464D0)) (list (list 22.0D0 6529.3056640625D0 0.006726276129484177D0 0.7871428728103638D0)) (list (list 22.0D0 6529.33203125D0 0.006990141700953245D0 0.7996371984481812D0)) (list (list 22.0D0 6529.2578125D0 0.00721370754763484D0 0.8121315240859985D0)) (list (list 22.0D0 6529.1259765625D0 0.007311294320970774D0 0.8246258497238159D0)) (list (list 22.0D0 6529.2119140625D0 0.007227566093206406D0 0.8371201753616333D0)) (list (list 22.0D0 6529.50390625D0 0.007012322079390287D0 0.8496145009994507D0)) (list (list 22.0D0 6528.83349609375D0 0.006808147300034761D0 0.8621088266372681D0)) (list (list 22.0D0 6526.56201171875D0 0.00686626834794879D0 0.8746031522750855D0)) (list (list 22.0D0 6523.50341796875D0 0.007326375227421522D0 0.8870974779129028D0)) (list (list 22.0D0 6521.19091796875D0 0.007819400168955326D0 0.899591863155365D0)) (list (list 22.0D0 6520.45263671875D0 0.007993330247700215D0 0.9120861887931824D0)) (list (list 22.0D0 6521.65283203125D0 0.007822836749255658D0 0.9245805144309998D0)) (list (list 22.0D0 6524.06591796875D0 0.007661264389753342D0 0.9370748400688171D0)) (list (list 22.0D0 6526.26953125D0 0.007603939156979322D0 0.9495691657066345D0)) (list (list 22.0D0 6527.95556640625D0 0.007499908562749624D0 0.9620634913444519D0)) (list (list 22.0D0 6528.75439453125D0 0.0073699951171875D0 0.9745578169822693D0)) (list (list 22.0D0 6528.3466796875D0 0.007293195929378271D0 0.9870521426200867D0)) (list (list 22.0D0 6527.59033203125D0 0.007406302727758884D0 0.999546468257904D0)) (list (list 22.0D0 6527.3486328125D0 0.00762491999194026D0 1.0120408535003662D0)) (list (list 22.0D0 6527.419921875D0 0.0077767446637153626D0 1.0245351791381836D0)) (list (list 22.0D0 6527.62255859375D0 0.007796615362167358D0 1.037029504776001D0)) (list (list 22.0D0 6528.240234375D0 0.007692881394177675D0 1.0495238304138184D0)) (list (list 22.0D0 6529.1845703125D0 0.00749813299626112D0 1.0620181560516358D0)) (list (list 22.0D0 6529.69482421875D0 0.00723370723426342D0 1.0745124816894532D0)) (list (list 22.0D0 6529.1142578125D0 0.006928509101271629D0 1.0870068073272705D0)) (list (list 22.0D0 6527.85986328125D0 0.006707752589136362D0 1.099501132965088D0)) (list (list 22.0D0 6527.07470703125D0 0.0065527125261723995D0 1.1119954586029053D0)) (list (list 22.0D0 6527.08203125D0 0.006375034339725971D0 1.1244897842407227D0)) (list (list 22.0D0 6527.189453125D0 0.006193899549543858D0 1.13698410987854D0)) (list (list 22.0D0 6527.2353515625D0 0.005960742477327585D0 1.1494784355163575D0)) (list (list 22.0D0 6527.46826171875D0 0.0055785574950277805D0 1.1619727611541748D0)) (list (list 22.0D0 6527.6474609375D0 0.005046744365245104D0 1.1744670867919922D0)) (list (list 22.0D0 6527.484375D0 0.004505237098783255D0 1.1869614124298096D0)) (list (list 22.0D0 6527.06591796875D0 0.004098423756659031D0 1.199455738067627D0)) (list (list 22.0D0 6526.10986328125D0 0.003842681646347046D0 1.2119500637054444D0)) (list (list 22.0D0 6524.54638671875D0 0.0037562150973826647D0 1.2244443893432618D0)) (list (list 22.0D0 6523.5703125D0 0.0038717694114893675D0 1.236938714981079D0)) (list (list 22.0D0 6523.85986328125D0 0.004114528652280569D0 1.249433159828186D0)) (list (list 22.0D0 6524.73583984375D0 0.004398533143103123D0 1.2619274854660035D0)) (list (list 22.0D0 6525.068359375D0 0.004621982108801603D0 1.2744218111038208D0)) (list (list 22.0D0 6524.61767578125D0 0.004754432011395693D0 1.2869161367416382D0)) (list (list 22.0D0 6523.77197265625D0 0.004829820245504379D0 1.2994104623794556D0)) (list (list 22.0D0 6523.3759765625D0 0.00483359070494771D0 1.311904788017273D0)) (list (list 22.0D0 6524.1357421875D0 0.004731234163045883D0 1.3243991136550904D0)) (list (list 22.0D0 6525.9541015625D0 0.004577219020575285D0 1.3368934392929078D0)) (list (list 22.0D0 6527.95849609375D0 0.004410679452121258D0 1.349387764930725D0)) (list (list 22.0D0 6529.1044921875D0 0.00413413904607296D0 1.3618820905685425D0)) (list (list 22.0D0 6529.244140625D0 0.0036977005656808615D0 1.3743764162063599D0)) (list (list 22.0D0 6528.94970703125D0 0.003096993314102292D0 1.3868707418441773D0)) (list (list 22.0D0 6528.42041015625D0 0.002305674133822322D0 1.3993650674819947D0)) (list (list 22.0D0 6527.06005859375D0 0.0014754686271771789D0 1.411859393119812D0)) (list (list 22.0D0 6526.63330078125D0 9.674570173956454D-4 1.4243537187576294D0)) (list (list 22.0D0 6527.6640625D0 9.854589588940144D-4 1.4368480443954468D0)) (list (list 22.0D0 6528.93505859375D0 0.0013974696630612016D0 1.4493423700332642D0)) (list (list 22.0D0 6528.3642578125D0 0.0019261011620983482D0 1.4618366956710816D0)) (list (list 22.0D0 6527.47412109375D0 0.0025199847295880318D0 1.474331021308899D0)) (list (list 22.0D0 6526.81103515625D0 0.003184390952810645D0 1.4868253469467163D0)) (list (list 22.0D0 6526.95556640625D0 0.0037801910657435656D0 1.4993196725845337D0)) (list (list 22.0D0 6527.6201171875D0 0.004172429442405701D0 1.5118141174316407D0)) (list (list 22.0D0 6528.28857421875D0 0.004341981839388609D0 1.524308443069458D0)) (list (list 22.0D0 6528.7958984375D0 0.0043269069865345955D0 1.5368027687072754D0)) (list (list 22.0D0 6528.77197265625D0 0.004186473786830902D0 1.5492970943450928D0)) (list (list 22.0D0 6528.0068359375D0 0.004024331923574209D0 1.5617914199829102D0)) (list (list 22.0D0 6527.0048828125D0 0.003914429806172848D0 1.5742857456207276D0)) (list (list 22.0D0 6526.42041015625D0 0.0037933026906102896D0 1.586780071258545D0)) (list (list 22.0D0 6526.1923828125D0 0.003621248295530677D0 1.5992743968963623D0)) (list (list 22.0D0 6526.0205078125D0 0.003472486976534128D0 1.6117687225341797D0)) (list (list 22.0D0 6526.13720703125D0 0.0033491651993244887D0 1.624263048171997D0)) (list (list 22.0D0 6527.1533203125D0 0.0031032711267471314D0 1.6367573738098145D0)) (list (list 22.0D0 6529.130859375D0 0.002710426226258278D0 1.6492516994476319D0)) (list (list 22.0D0 6530.50048828125D0 0.002355848904699087D0 1.6617460250854493D0)) (list (list 22.0D0 6530.154296875D0 0.0021698642522096634D0 1.6742403507232666D0)) (list (list 22.0D0 6528.5126953125D0 0.0021970849484205246D0 1.686734676361084D0)) (list (list 22.0D0 6527.572265625D0 0.0023619893472641707D0 1.6992290019989014D0)) (list (list 22.0D0 6527.33740234375D0 0.002553944243118167D0 1.7117233276367188D0)) (list (list 22.0D0 6526.70654296875D0 0.0027554866392165423D0 1.7242176532745362D0)) (list (list 22.0D0 6525.7197265625D0 0.0030428445897996426D0 1.7367119789123536D0)) (list (list 22.0D0 6525.56689453125D0 0.0035013509914278984D0 1.749206304550171D0)) (list (list 22.0D0 6526.6005859375D0 0.0040877205319702625D0 1.7617006301879883D0)) (list (list 22.0D0 6527.5908203125D0 0.004638446494936943D0 1.7741949558258057D0)) (list (list 22.0D0 6527.693359375D0 0.0049552908167243D0 1.7866894006729126D0)) (list (list 22.0D0 6527.9423828125D0 0.005046663340181112D0 1.79918372631073D0)) (list (list 22.0D0 6528.74462890625D0 0.0050107152201235295D0 1.8116780519485474D0)) (list (list 22.0D0 6528.98046875D0 0.004872937686741352D0 1.8241723775863648D0)) (list (list 22.0D0 6528.1572265625D0 0.004668268375098705D0 1.8366667032241822D0)) (list (list 22.0D0 6527.13720703125D0 0.004515809938311577D0 1.8491610288619996D0)) (list (list 22.0D0 6526.55810546875D0 0.004401346668601036D0 1.861655354499817D0)) (list (list 22.0D0 6526.541015625D0 0.004254793282598257D0 1.8741496801376343D0)) (list (list 22.0D0 6526.83935546875D0 0.004072318319231272D0 1.8866440057754517D0)) (list (list 22.0D0 6526.71484375D0 0.003920186776667833D0 1.899138331413269D0)) (list (list 22.0D0 6525.69775390625D0 0.0038577609229832888D0 1.9116326570510865D0)) (list (list 22.0D0 6524.4189453125D0 0.003949951846152544D0 1.9241269826889038D0)) (list (list 22.0D0 6524.23388671875D0 0.0041975826025009155D0 1.9366213083267212D0)) (list (list 22.0D0 6525.34375D0 0.00457244087010622D0 1.9491156339645386D0)) (list (list 22.0D0 6526.81591796875D0 0.004973096773028374D0 1.961609959602356D0)) (list (list 22.0D0 6527.69677734375D0 0.005147748626768589D0 1.9741042852401734D0)) (list (list 22.0D0 6528.20263671875D0 0.005019839853048325D0 1.9865986108779908D0)) (list (list 22.0D0 6528.74853515625D0 0.004767794162034988D0 1.999092936515808D0)) (list (list 22.0D0 6529.2158203125D0 0.00457715755328536D0 2.011587381362915D0)) (list (list 22.0D0 6529.34619140625D0 0.004492671228945255D0 2.0240817070007324D0)) (list (list 22.0D0 6529.35302734375D0 0.004460720345377922D0 2.03657603263855D0)) (list (list 22.0D0 6529.42431640625D0 0.0043943808414042D0 2.049070358276367D0)) (list (list 22.0D0 6529.03662109375D0 0.004255934618413448D0 2.0615646839141846D0)) (list (list 22.0D0 6527.95166015625D0 0.004135254304856062D0 2.074059009552002D0)) (list (list 22.0D0 6527.1533203125D0 0.00412654597312212D0 2.0865533351898194D0)) (list (list 22.0D0 6527.677734375D0 0.004130839835852385D0 2.0990476608276367D0)) (list (list 22.0D0 6528.748046875D0 0.004017905797809362D0 2.111541986465454D0)) (list (list 22.0D0 6528.78564453125D0 0.003627985483035445D0 2.1240363121032715D0)) (list (list 22.0D0 6527.318359375D0 0.0029829763807356358D0 2.136530637741089D0)) (list (list 22.0D0 6525.53369140625D0 0.0022984894458204508D0 2.1490249633789063D0)) (list (list 22.0D0 6523.78125D0 0.0016720193671062589D0 2.1615192890167237D0)) (list (list 22.0D0 6520.85595703125D0 0.00115565478336066D0 2.174013614654541D0)) (list (list 22.0D0 6517.68115234375D0 8.320770575664938D-4 2.1865079402923584D0)) (list (list 22.0D0 6515.744140625D0 7.100538350641727D-4 2.199002265930176D0)) (list (list 22.0D0 6514.37744140625D0 6.91843859385699D-4 2.211496591567993D0)) (list (list 22.0D0 6511.57373046875D0 6.170987035147846D-4 2.2239909172058106D0)) (list (list 22.0D0 6505.994140625D0 4.8297192552126944D-4 2.236485242843628D0)) (list (list 22.0D0 6508.4658203125D0 3.4669291926547885D-4 2.2489795684814453D0)) (list (list 22.0D0 6528.779296875D0 5.387135897763073D-4 2.2614738941192627D0)) (list (list 22.0D0 6528.5576171875D0 7.792930118739605D-4 2.27396821975708D0)) (list (list 22.0D0 6533.29833984375D0 8.605025941506028D-4 2.2864625453948975D0)) (list (list 22.0D0 6535.30126953125D0 8.41877015773207D-4 2.298956871032715D0)) (list (list 22.0D0 6534.27001953125D0 7.865757215768099D-4 2.3114511966705323D0)) (list (list 22.0D0 6530.18212890625D0 7.411245023831725D-4 2.3239455223083496D0)) (list (list 22.0D0 6524.90380859375D0 6.245541153475642D-4 2.336439847946167D0)) (list (list 22.0D0 6519.96630859375D0 4.347709473222494D-4 2.3489341735839844D0)) (list (list 22.0D0 6520.4921875D0 2.638974110595882D-4 2.3614284992218018D0)) (list (list 22.0D0 6524.27294921875D0 1.9585380505304784D-4 2.373922824859619D0)) (list (list 22.0D0 6527.4599609375D0 2.1132607071194798D-4 2.3864171504974366D0)) (list (list 22.0D0 6528.4931640625D0 2.2717447427567095D-4 2.398911476135254D0)) (list (list 22.0D0 6527.806640625D0 2.3650836374145D-4 2.4114058017730713D0)) (list (list 22.0D0 6524.4697265625D0 2.3390610294882208D-4 2.4239001274108887D0)) (list (list 22.0D0 6513.26708984375D0 2.690622059162706D-4 2.436394453048706D0)) (list (list 22.0D0 6508.96142578125D0 3.70691588614136D-4 2.4488887786865235D0)) (list (list 22.0D0 6512.36767578125D0 4.022994835395366D-4 2.461383104324341D0)) (list (list 22.0D0 6517.88134765625D0 4.6591306454502046D-4 2.4738776683807373D0)) (list (list 22.0D0 6520.27734375D0 5.705397925339639D-4 2.4863719940185547D0)) (list (list 22.0D0 6520.908203125D0 6.242393283173442D-4 2.498866319656372D0)) (list (list 22.0D0 6520.68896484375D0 5.673993728123605D-4 2.5113606452941895D0)) (list (list 22.0D0 6520.20654296875D0 3.9698436739854515D-4 2.523854970932007D0)) (list (list 22.0D0 6514.474609375D0 2.0838646742049605D-4 2.536349296569824D0)) (list (list 22.0D0 6495.783203125D0 8.469304884783924D-5 2.5488436222076416D0)) (list (list 22.0D0 6480.9931640625D0 5.860680903424509D-5 2.561337947845459D0)) (list (list 22.0D0 6472.48974609375D0 6.318483065115288D-5 2.5738322734832764D0)) (list (list 22.0D0 6468.91748046875D0 7.372933760052547D-5 2.5863265991210938D0)) (list (list 22.0D0 6464.4755859375D0 6.448807107517496D-5 2.598820924758911D0)) (list (list 22.0D0 6456.12646484375D0 5.9410853282315657D-5 2.6113152503967285D0)) (list (list 22.0D0 6452.9130859375D0 7.636588998138905D-5 2.623809576034546D0)) (list (list 22.0D0 6451.966796875D0 8.685710781719536D-5 2.6363039016723633D0)) (list (list 22.0D0 6472.37744140625D0 1.009641055134125D-4 2.6487982273101807D0)) (list (list 22.0D0 6474.59375D0 1.2082996545359492D-4 2.661292552947998D0)) (list (list 22.0D0 6502.119140625D0 1.476011675549671D-4 2.6737868785858155D0)) (list (list 22.0D0 6528.6123046875D0 0.002188814105466008D0 2.686281204223633D0)) (list (list 22.0D0 6525.97509765625D0 0.001937597873620689D0 2.69877552986145D0)) (list (list 22.0D0 6524.3662109375D0 0.001690676319412887D0 2.7112698554992676D0)) (list (list 22.0D0 6524.69091796875D0 0.0014208712382242084D0 2.723764181137085D0)) (list (list 22.0D0 6522.39599609375D0 0.0011204042239114643D0 2.7362585067749024D0)) (list (list 22.0D0 6518.17724609375D0 0.0011586649343371392D0 2.7487528324127198D0)) (list (list 22.0D0 6536.75D0 0.001161658437922597D0 2.761247158050537D0)) (list (list 22.0D0 6524.30615234375D0 0.002916692290455103D0 2.7737414836883545D0)) (list (list 22.0D0 6525.0654296875D0 0.0046084667555987835D0 2.786235809326172D0)) (list (list 22.0D0 6524.25048828125D0 0.006165313068777323D0 2.7987301349639893D0)) (list (list 22.0D0 6523.9052734375D0 0.0072081321850419045D0 2.8112244606018067D0)) (list (list 22.0D0 6524.83349609375D0 0.007255862466990948D0 2.823718786239624D0)) (list (list 22.0D0 6527.03857421875D0 0.006236332934349775D0 2.8362131118774414D0)) (list (list 22.0D0 6529.30615234375D0 0.004652694799005985D0 2.848707437515259D0)) (list (list 22.0D0 6530.32177734375D0 0.0033236790914088488D0 2.861201763153076D0)) (list (list 22.0D0 6530.61669921875D0 0.0027965642511844635D0 2.8736960887908936D0)) (list (list 22.0D0 6531.24169921875D0 0.002787162084132433D0 2.886190414428711D0)) (list (list 22.0D0 6532.8681640625D0 0.002824257593601942D0 2.8986847400665283D0)) (list (list 22.0D0 6534.03466796875D0 0.0027883744332939387D0 2.9111790657043457D0)) (list (list 22.0D0 6534.484375D0 0.002700329525396228D0 2.923673391342163D0)) (list (list 22.0D0 6535.3818359375D0 0.0026388231199234724D0 2.9361677169799805D0)) (list (list 22.0D0 6536.32373046875D0 0.0027221424970775843D0 2.948662042617798D0)) (list (list 22.0D0 6534.7578125D0 0.002831078600138426D0 2.9611563682556153D0)) (list (list 22.0D0 6529.91162109375D0 0.0031668751034885645D0 2.9736506938934326D0)) (list (list 22.0D0 6526.615234375D0 0.004145905841141939D0 2.98614501953125D0)) (list (list 22.0D0 6524.71533203125D0 0.005573641508817673D0 2.9986393451690674D0)) (list (list 22.0D0 6524.38134765625D0 0.006725464016199112D0 3.0111336708068848D0)) (list (list 22.0D0 6525.64990234375D0 0.006969336420297623D0 3.0236282348632813D0)) (list (list 22.0D0 6527.21923828125D0 0.0065786996856331825D0 3.0361225605010987D0)) (list (list 22.0D0 6527.830078125D0 0.0060819159261882305D0 3.048616886138916D0)) (list (list 22.0D0 6527.525390625D0 0.005630249157547951D0 3.0611112117767334D0)) (list (list 22.0D0 6527.4912109375D0 0.005095839500427246D0 3.073605537414551D0)) (list (list 22.0D0 6528.0361328125D0 0.004380405880510807D0 3.086099863052368D0)) (list (list 22.0D0 6528.6796875D0 0.003563199657946825D0 3.0985941886901856D0)) (list (list 22.0D0 6529.556640625D0 0.0028496815357357264D0 3.111088514328003D0)) (list (list 22.0D0 6529.5927734375D0 0.002606277586892247D0 3.1235828399658203D0)) (list (list 22.0D0 6527.94677734375D0 0.003182742977514863D0 3.1360771656036377D0)) (list (list 22.0D0 6525.576171875D0 0.004430085886269808D0 3.148571491241455D0)) (list (list 22.0D0 6524.7568359375D0 0.005152686964720488D0 3.1610658168792725D0)) (list (list 22.0D0 6528.73681640625D0 0.004293620120733976D0 3.17356014251709D0)) (list (list 22.0D0 6535.1796875D0 0.003249441273510456D0 3.1860544681549073D0)) (list (list 22.0D0 6513.70947265625D0 0.0020988062024116516D0 3.1985487937927246D0)) (list (list 22.0D0 6528.396484375D0 0.003050465602427721D0 3.211043119430542D0)) (list (list 22.0D0 6523.931640625D0 0.0038415733724832535D0 3.2235374450683594D0)) (list (list 22.0D0 6523.80517578125D0 0.004159907810389996D0 3.2360317707061768D0)) (list (list 22.0D0 6524.515625D0 0.004672879818826914D0 3.248526096343994D0)) (list (list 22.0D0 6524.46044921875D0 0.005630050785839558D0 3.2610204219818116D0)) (list (list 22.0D0 6523.505859375D0 0.006478153169155121D0 3.273514747619629D0)) (list (list 22.0D0 6523.11767578125D0 0.00649896590039134D0 3.2860090732574463D0)) (list (list 22.0D0 6523.18359375D0 0.005534187890589237D0 3.2985033988952637D0)) (list (list 22.0D0 6522.75927734375D0 0.003994873724877834D0 3.310997724533081D0)) (list (list 22.0D0 6521.4755859375D0 0.002401785459369421D0 3.3234920501708985D0)) (list (list 22.0D0 6522.3232421875D0 0.0012293888721615076D0 3.335986375808716D0)) (list (list 22.0D0 6523.44091796875D0 8.29974829684943D-4 3.348480701446533D0)) (list (list 22.0D0 6523.720703125D0 0.0010302930604666472D0 3.3609750270843506D0)) (list (list 22.0D0 6524.85498046875D0 0.0013468883698806167D0 3.373469352722168D0)) (list (list 22.0D0 6526.4052734375D0 0.0015350108733400703D0 3.3859636783599854D0)) (list (list 22.0D0 6527.56005859375D0 0.0016162216197699309D0 3.3984580039978028D0)) (list (list 22.0D0 6527.54150390625D0 0.0015922138700261712D0 3.41095232963562D0)) (list (list 22.0D0 6526.54443359375D0 0.0014793584123253823D0 3.4234466552734375D0)) (list (list 22.0D0 6526.3798828125D0 0.0013399864546954632D0 3.435940980911255D0)) (list (list 22.0D0 6528.732421875D0 0.001219624769873917D0 3.4484353065490723D0)) (list (list 22.0D0 6531.322265625D0 0.0012545492500066758D0 3.4609296321868897D0)) (list (list 22.0D0 6530.70458984375D0 0.0013879863545298577D0 3.473423957824707D0)) (list (list 22.0D0 6527.83349609375D0 0.0015828445320948959D0 3.4859182834625244D0)) (list (list 22.0D0 6526.3271484375D0 0.001700384309515357D0 3.498412609100342D0)) (list (list 22.0D0 6526.84326171875D0 0.0016021846095100046D0 3.510906934738159D0)) (list (list 22.0D0 6527.38916015625D0 0.0014178744750097394D0 3.5234012603759766D0)) (list (list 22.0D0 6526.53369140625D0 0.0012543329503387213D0 3.535895586013794D0)) (list (list 22.0D0 6524.2373046875D0 0.0011525371810421348D0 3.5483899116516114D0)) (list (list 22.0D0 6522.287109375D0 0.0010699562262743712D0 3.5608842372894287D0)) (list (list 22.0D0 6520.13818359375D0 9.395403903909028D-4 3.573378801345825D0)) (list (list 22.0D0 6516.9326171875D0 7.503124070353806D-4 3.5858731269836426D0)) (list (list 22.0D0 6510.49462890625D0 5.188643699511886D-4 3.59836745262146D0)) (list (list 22.0D0 6507.6806640625D0 3.355368389748037D-4 3.6108617782592774D0)) (list (list 22.0D0 6534.24462890625D0 3.565404040273279D-4 3.6233561038970948D0)) (list (list 22.0D0 6529.42431640625D0 4.3944851495325566D-4 3.635850429534912D0)) (list (list 22.0D0 6525.103515625D0 5.109781050123274D-4 3.6483447551727295D0)) (list (list 22.0D0 6522.66748046875D0 4.932362353429198D-4 3.660839080810547D0)) (list (list 22.0D0 6522.70751953125D0 3.958962333854288D-4 3.6733334064483643D0)) (list (list 22.0D0 6525.93310546875D0 2.8545083478093147D-4 3.6858277320861817D0)) (list (list 22.0D0 6528.38916015625D0 2.5033135898411274D-4 3.698322057723999D0)) (list (list 22.0D0 6529.11962890625D0 3.075135173276067D-4 3.7108163833618164D0)) (list (list 22.0D0 6530.05224609375D0 4.4413411524146795D-4 3.723310708999634D0)) (list (list 22.0D0 6531.09423828125D0 6.043097819201648D-4 3.735805034637451D0)) (list (list 22.0D0 6530.220703125D0 7.226770976558328D-4 3.7482993602752686D0)) (list (list 22.0D0 6528.11279296875D0 8.284152718260884D-4 3.760793685913086D0)) (list (list 22.0D0 6526.80224609375D0 0.001000216812826693D0 3.7732880115509033D0)) (list (list 22.0D0 6527.21533203125D0 0.0012004422023892403D0 3.7857823371887207D0)) (list (list 22.0D0 6528.728515625D0 0.0013348784996196628D0 3.798276662826538D0)) (list (list 22.0D0 6529.99365234375D0 0.0013174713822081685D0 3.8107709884643555D0)) (list (list 22.0D0 6529.54736328125D0 0.0011681661708280445D0 3.823265314102173D0)) (list (list 22.0D0 6527.82275390625D0 0.0010769208893179894D0 3.8357596397399903D0)) (list (list 22.0D0 6526.5615234375D0 0.0011705831857398153D0 3.8482539653778076D0)) (list (list 22.0D0 6526.2861328125D0 0.0013480748748406768D0 3.860748291015625D0)) (list (list 22.0D0 6526.82373046875D0 0.0015163567150011659D0 3.8732426166534424D0)) (list (list 22.0D0 6527.31689453125D0 0.0017542396672070027D0 3.8857369422912598D0)) (list (list 22.0D0 6527.15625D0 0.002148921135812998D0 3.898231267929077D0)) (list (list 22.0D0 6526.47216796875D0 0.002623474458232522D0 3.9107255935668946D0)) (list (list 22.0D0 6526.34716796875D0 0.003002346493303776D0 3.923219919204712D0)) (list (list 22.0D0 6526.69921875D0 0.003188528586179018D0 3.9357142448425293D0)) (list (list 22.0D0 6526.609375D0 0.0031888089142739773D0 3.9482085704803467D0)) (list (list 22.0D0 6525.94873046875D0 0.0030637416057288647D0 3.960702896118164D0)) (list (list 22.0D0 6525.76171875D0 0.002889860887080431D0 3.9731972217559815D0)) (list (list 22.0D0 6526.53466796875D0 0.0027093200478702784D0 3.985691547393799D0)) (list (list 22.0D0 6527.48583984375D0 0.002504352480173111D0 3.998185873031616D0)) (list (list 22.0D0 6528.01904296875D0 0.0021874690428376198D0 4.010680198669434D0)) (list (list 22.0D0 6528.3896484375D0 0.001769259455613792D0 4.02317476272583D0)) (list (list 22.0D0 6528.12890625D0 0.001345765427686274D0 4.035668849945068D0)) (list (list 22.0D0 6525.76416015625D0 0.0010079792700707913D0 4.048163414001465D0)) (list (list 22.0D0 6522.06884765625D0 8.376918267458677D-4 4.060657501220703D0)) (list (list 22.0D0 6520.02587890625D0 7.417429587803781D-4 4.0731520652771D0)) (list (list 22.0D0 6520.509765625D0 5.788286798633635D-4 4.085646152496338D0)) (list (list 22.0D0 6506.3232421875D0 4.6702937106601894D-4 4.098140716552734D0)) (list (list 22.0D0 6532.8857421875D0 6.032554665580392D-4 4.110634803771973D0)) (list (list 22.0D0 6531.71875D0 8.01712682005018D-4 4.123129367828369D0)) (list (list 22.0D0 6529.24267578125D0 0.0010311973746865988D0 4.135623455047607D0)) (list (list 22.0D0 6528.6015625D0 0.0012378537794575096D0 4.148118019104004D0)) (list (list 22.0D0 6529.57666015625D0 0.001360552036203444D0 4.160612106323242D0)) (list (list 22.0D0 6532.517578125D0 0.001352092600427568D0 4.173106670379639D0)) (list (list 22.0D0 6535.0654296875D0 0.0011996016837656498D0 4.185600757598877D0)) (list (list 22.0D0 6534.80908203125D0 9.301207028329372D-4 4.198095321655273D0)) (list (list 22.0D0 6532.73681640625D0 7.216407684609294D-4 4.210589408874512D0)) (list (list 22.0D0 6530.86376953125D0 6.81081204675138D-4 4.223083972930908D0)) (list (list 22.0D0 6529.517578125D0 7.711513317190111D-4 4.2355780601501465D0)) (list (list 22.0D0 6527.8984375D0 9.036020492203534D-4 4.248072624206543D0)) (list (list 22.0D0 6527.0400390625D0 9.486704948358238D-4 4.260566711425781D0)) (list (list 22.0D0 6528.31884765625D0 8.563890587538481D-4 4.273061275482178D0)) (list (list 22.0D0 6529.35595703125D0 7.751701050437987D-4 4.285555362701416D0)) (list (list 22.0D0 6528.93603515625D0 7.95129977632314D-4 4.2980499267578125D0)) (list (list 22.0D0 6526.20654296875D0 8.249730453826487D-4 4.310544013977051D0)) (list (list 22.0D0 6521.60205078125D0 7.350381929427385D-4 4.323038578033447D0)) (list (list 22.0D0 6514.42529296875D0 5.695606814697385D-4 4.3355326652526856D0)) (list (list 22.0D0 6510.27392578125D0 4.5081903226673603D-4 4.348027229309082D0)) (list (list 22.0D0 6509.2392578125D0 3.489811497274786D-4 4.36052131652832D0)) (list (list 22.0D0 6512.24169921875D0 2.7415432850830257D-4 4.373015880584717D0)) (list (list 22.0D0 6518.6015625D0 3.097253502346575D-4 4.385509967803955D0)) (list (list 22.0D0 6527.65283203125D0 5.899391835555434D-4 4.398004531860352D0)) (list (list 22.0D0 6526.9306640625D0 9.204225498251617D-4 4.410499095916748D0)) (list (list 22.0D0 6526.44775390625D0 0.0011589815840125084D0 4.422993183135986D0)) (list (list 22.0D0 6526.44677734375D0 0.0012311562895774842D0 4.435487747192383D0)) (list (list 22.0D0 6526.99755859375D0 0.0010886803502216936D0 4.447981834411621D0)) (list (list 22.0D0 6527.70849609375D0 7.713587256148458D-4 4.460476398468018D0)) (list (list 22.0D0 6526.9091796875D0 4.1241757571697235D-4 4.472970485687256D0)) (list (list 22.0D0 6512.583984375D0 1.759216102072969D-4 4.485465049743652D0)) (list (list 22.0D0 6487.41748046875D0 1.07321233372204D-4 4.497959136962891D0)) (list (list 22.0D0 6487.32177734375D0 8.205657650250942D-5 4.510453701019287D0)) (list (list 22.0D0 6477.169921875D0 5.90229537920095D-5 4.522947788238525D0)) (list (list 22.0D0 6502.50634765625D0 1.7551827477291227D-4 4.54793643951416D0)) (list (list 22.0D0 6502.98486328125D0 1.4797644689679146D-4 4.560431003570557D0)) (list (list 22.0D0 6502.98486328125D0 0.0D0 4.572925090789795D0)) (list (list 23.0D0 9809.21875D0 3.256266063544899D-4 0.08746031671762467D0)) (list (list 23.0D0 9807.353515625D0 3.7447933573275805D-4 0.09995464980602265D0)) (list (list 23.0D0 9798.49609375D0 5.123719456605613D-4 0.124943308532238D0)) (list (list 23.0D0 9797.3369140625D0 6.335932994261384D-4 0.137437641620636D0)) (list (list 23.0D0 9794.484375D0 0.0012006001779809595D0 0.16242630779743195D0)) (list (list 23.0D0 9794.7587890625D0 0.00136145472060889D0 0.17492063343524933D0)) (list (list 23.0D0 9797.2841796875D0 0.0013019007164984942D0 0.1874149590730667D0)) (list (list 23.0D0 9797.6591796875D0 0.001241273246705532D0 0.1999092996120453D0)) (list (list 23.0D0 9794.16015625D0 0.001334832631982863D0 0.21240362524986267D0)) (list (list 23.0D0 9787.5068359375D0 0.001769314520061016D0 0.22489796578884125D0)) (list (list 23.0D0 9786.6611328125D0 0.0020419785287231207D0 0.23739229142665863D0)) (list (list 23.0D0 9786.890625D0 0.0020130674820393324D0 0.249886617064476D0)) (list (list 23.0D0 9787.1201171875D0 0.001776585471816361D0 0.2623809576034546D0)) (list (list 23.0D0 9786.642578125D0 0.0013646692968904972D0 0.274875283241272D0)) (list (list 23.0D0 9783.21875D0 8.807455305941403D-4 0.28736960887908936D0)) (list (list 23.0D0 9780.6943359375D0 5.339105264283717D-4 0.29986393451690674D0)) (list (list 23.0D0 9806.1005859375D0 4.095031472388655D-4 0.3123582899570465D0)) (list (list 23.0D0 9792.30859375D0 4.557088250294328D-4 0.3248526155948639D0)) (list (list 23.0D0 9789.9833984375D0 5.009447340853512D-4 0.3373469412326813D0)) (list (list 23.0D0 9784.2900390625D0 4.72842191811651D-4 0.34984126687049866D0)) (list (list 23.0D0 9783.3681640625D0 4.0714789065532387D-4 0.36233559250831604D0)) (list (list 23.0D0 9808.73828125D0 4.6074105193838477D-4 0.3748299181461334D0)) (list (list 23.0D0 9801.173828125D0 8.063928107731044D-4 0.3873242437839508D0)) (list (list 23.0D0 9798.2509765625D0 0.0012710230657830835D0 0.3998185992240906D0)) (list (list 23.0D0 9794.6015625D0 0.0016249606851488352D0 0.41231292486190796D0)) (list (list 23.0D0 9791.7998046875D0 0.001685056951828301D0 0.42480725049972534D0)) (list (list 23.0D0 9788.6767578125D0 0.0013190980535000563D0 0.4373015761375427D0)) (list (list 23.0D0 9782.51953125D0 9.150012629106641D-4 0.4497959315776825D0)) (list (list 23.0D0 9803.9599609375D0 7.244469015859067D-4 0.4622902572154999D0)) (list (list 23.0D0 9788.7763671875D0 0.0010653884382918477D0 0.47478458285331726D0)) (list (list 23.0D0 9791.15625D0 0.0015574883436784149D0 0.48727890849113465D0)) (list (list 23.0D0 9791.072265625D0 0.0017787368269637227D0 0.499773234128952D0)) (list (list 23.0D0 9792.0166015625D0 0.001763695734553039D0 0.5122675895690918D0)) (list (list 23.0D0 9793.7900390625D0 0.0016110624419525266D0 0.5247619152069092D0)) (list (list 23.0D0 9798.779296875D0 0.0013249409385025502D0 0.5372562408447266D0)) (list (list 23.0D0 9803.123046875D0 0.0011406195117160678D0 0.549750566482544D0)) (list (list 23.0D0 9775.837890625D0 0.001145332120358944D0 0.5622448921203613D0)) (list (list 23.0D0 9778.5361328125D0 0.001517750322818756D0 0.5747392177581787D0)) (list (list 23.0D0 9781.97265625D0 0.001783751999028027D0 0.5872335433959961D0)) (list (list 23.0D0 9783.3076171875D0 0.0017446207348257304D0 0.5997278690338135D0)) (list (list 23.0D0 9784.494140625D0 0.0015501450980082155D0 0.6122221946716309D0)) (list (list 23.0D0 9786.09375D0 0.0013242559507489205D0 0.624716579914093D0)) (list (list 23.0D0 9787.8173828125D0 0.0011102991411462427D0 0.6372109055519104D0)) (list (list 23.0D0 9787.7548828125D0 9.063129546120763D-4 0.6497052311897278D0)) (list (list 23.0D0 9785.33984375D0 7.096381159499288D-4 0.6621995568275452D0)) (list (list 23.0D0 9779.2880859375D0 6.319163367152214D-4 0.6746938824653626D0)) (list (list 23.0D0 9802.6494140625D0 6.417024997062981D-4 0.6871882081031799D0)) (list (list 23.0D0 9793.7607421875D0 0.0010962544474750758D0 0.6996825337409973D0)) (list (list 23.0D0 9792.2548828125D0 0.0018377822125330568D0 0.7121768593788147D0)) (list (list 23.0D0 9792.3447265625D0 0.002315261634066701D0 0.7246711850166321D0)) (list (list 23.0D0 9792.169921875D0 0.002469875616952777D0 0.7371655106544495D0)) (list (list 23.0D0 9792.13671875D0 0.0024073468521237374D0 0.7496598362922669D0)) (list (list 23.0D0 9792.5078125D0 0.0022682880517095328D0 0.762154221534729D0)) (list (list 23.0D0 9793.00390625D0 0.002046929905191064D0 0.7746485471725464D0)) (list (list 23.0D0 9793.0546875D0 0.0016160887898877263D0 0.7871428728103638D0)) (list (list 23.0D0 9790.3818359375D0 9.85974445939064D-4 0.7996371984481812D0)) (list (list 23.0D0 9803.87109375D0 4.369731468614191D-4 0.8121315240859985D0)) (list (list 23.0D0 9828.8720703125D0 1.2078808504156768D-4 0.8246258497238159D0)) (list (list 23.0D0 9810.4814453125D0 3.048775834031403D-4 0.8371201753616333D0)) (list (list 23.0D0 9782.8486328125D0 5.246634245850146D-4 0.8496145009994507D0)) (list (list 23.0D0 9786.6416015625D0 7.859114557504654D-4 0.8621088266372681D0)) (list (list 23.0D0 9787.2109375D0 9.478341671638191D-4 0.8746031522750855D0)) (list (list 23.0D0 9784.51171875D0 8.591314544901252D-4 0.8870974779129028D0)) (list (list 23.0D0 9780.7822265625D0 6.852567312307656D-4 0.899591863155365D0)) (list (list 23.0D0 9779.7958984375D0 6.161155761219561D-4 0.9120861887931824D0)) (list (list 23.0D0 9782.828125D0 7.024783408269286D-4 0.9245805144309998D0)) (list (list 23.0D0 9787.0712890625D0 9.475565748289228D-4 0.9370748400688171D0)) (list (list 23.0D0 9789.1904296875D0 0.0010917257750406862D0 0.9495691657066345D0)) (list (list 23.0D0 9791.708984375D0 0.001032920554280281D0 0.9620634913444519D0)) (list (list 23.0D0 9793.046875D0 8.857561042532325D-4 0.9745578169822693D0)) (list (list 23.0D0 9792.390625D0 7.711598300375044D-4 0.9870521426200867D0)) (list (list 23.0D0 9790.771484375D0 7.394326967187226D-4 0.999546468257904D0)) (list (list 23.0D0 9790.1171875D0 7.161797257140279D-4 1.0120408535003662D0)) (list (list 23.0D0 9789.306640625D0 6.289742304943502D-4 1.0245351791381836D0)) (list (list 23.0D0 9785.0673828125D0 4.942261148244143D-4 1.037029504776001D0)) (list (list 23.0D0 9781.1318359375D0 4.2474738438613713D-4 1.0495238304138184D0)) (list (list 23.0D0 9780.646484375D0 3.8820705958642066D-4 1.0620181560516358D0)) (list (list 23.0D0 9787.6689453125D0 3.503888437990099D-4 1.0745124816894532D0)) (list (list 23.0D0 9792.13671875D0 3.450258809607476D-4 1.0870068073272705D0)) (list (list 23.0D0 9796.916015625D0 2.65207898337394D-4 1.099501132965088D0)) (list (list 23.0D0 9775.7470703125D0 2.5299322442151606D-4 1.1119954586029053D0)) (list (list 23.0D0 9775.3564453125D0 3.13742202706635D-4 1.1244897842407227D0)) (list (list 23.0D0 9776.890625D0 3.5591720370575786D-4 1.13698410987854D0)) (list (list 23.0D0 9778.1240234375D0 4.4315922423265875D-4 1.1494784355163575D0)) (list (list 23.0D0 9782.37109375D0 6.124965730123222D-4 1.1619727611541748D0)) (list (list 23.0D0 9789.5458984375D0 0.0010064992820844055D0 1.1744670867919922D0)) (list (list 23.0D0 9790.091796875D0 0.0013901253696531058D0 1.1869614124298096D0)) (list (list 23.0D0 9789.93359375D0 0.0016597849316895009D0 1.199455738067627D0)) (list (list 23.0D0 9788.9267578125D0 0.0018081171438097954D0 1.2119500637054444D0)) (list (list 23.0D0 9787.2265625D0 0.0018679349450394512D0 1.2244443893432618D0)) (list (list 23.0D0 9786.119140625D0 0.0018801485421136022D0 1.236938714981079D0)) (list (list 23.0D0 9786.439453125D0 0.001821073703467846D0 1.249433159828186D0)) (list (list 23.0D0 9787.525390625D0 0.001661876798607409D0 1.2619274854660035D0)) (list (list 23.0D0 9788.5234375D0 0.0013629981549456716D0 1.2744218111038208D0)) (list (list 23.0D0 9788.36328125D0 9.725350537337363D-4 1.2869161367416382D0)) (list (list 23.0D0 9786.265625D0 7.013994036242366D-4 1.2994104623794556D0)) (list (list 23.0D0 9785.15234375D0 7.273965165950358D-4 1.311904788017273D0)) (list (list 23.0D0 9786.2763671875D0 8.853129111230373D-4 1.3243991136550904D0)) (list (list 23.0D0 9792.5361328125D0 9.242776432074606D-4 1.3368934392929078D0)) (list (list 23.0D0 9794.2529296875D0 8.517780806869268D-4 1.349387764930725D0)) (list (list 23.0D0 9794.435546875D0 9.304081904701889D-4 1.3618820905685425D0)) (list (list 23.0D0 9794.619140625D0 0.0013258216204121709D0 1.3743764162063599D0)) (list (list 23.0D0 9794.7890625D0 0.0018659525085240603D0 1.3868707418441773D0)) (list (list 23.0D0 9794.1630859375D0 0.0022988643031567335D0 1.3993650674819947D0)) (list (list 23.0D0 9792.6591796875D0 0.0025706368032842875D0 1.411859393119812D0)) (list (list 23.0D0 9791.37890625D0 0.0028297726530581713D0 1.4243537187576294D0)) (list (list 23.0D0 9790.8564453125D0 0.0031832498498260975D0 1.4368480443954468D0)) (list (list 23.0D0 9790.9208984375D0 0.0035122004337608815D0 1.4493423700332642D0)) (list (list 23.0D0 9791.203125D0 0.0034722283016890288D0 1.4618366956710816D0)) (list (list 23.0D0 9791.0576171875D0 0.002905399538576603D0 1.474331021308899D0)) (list (list 23.0D0 9790.609375D0 0.002122969599440694D0 1.4868253469467163D0)) (list (list 23.0D0 9790.8994140625D0 0.0015846294118091464D0 1.4993196725845337D0)) (list (list 23.0D0 9792.18359375D0 0.0014342765789479018D0 1.5118141174316407D0)) (list (list 23.0D0 9793.3359375D0 0.0014793637674301863D0 1.524308443069458D0)) (list (list 23.0D0 9793.7490234375D0 0.0014828391140326858D0 1.5368027687072754D0)) (list (list 23.0D0 9793.7763671875D0 0.001342330127954483D0 1.5492970943450928D0)) (list (list 23.0D0 9792.158203125D0 0.0011291579576209188D0 1.5617914199829102D0)) (list (list 23.0D0 9790.6044921875D0 0.0011194724356755615D0 1.5742857456207276D0)) (list (list 23.0D0 9789.62109375D0 0.001472414587624371D0 1.586780071258545D0)) (list (list 23.0D0 9788.9052734375D0 0.0020043239928781987D0 1.5992743968963623D0)) (list (list 23.0D0 9788.447265625D0 0.0024148179218173027D0 1.6117687225341797D0)) (list (list 23.0D0 9789.1572265625D0 0.0025739686097949744D0 1.624263048171997D0)) (list (list 23.0D0 9791.5634765625D0 0.0025817034766077996D0 1.6367573738098145D0)) (list (list 23.0D0 9794.5283203125D0 0.002601072657853365D0 1.6492516994476319D0)) (list (list 23.0D0 9795.6796875D0 0.0025055152364075184D0 1.6617460250854493D0)) (list (list 23.0D0 9794.3857421875D0 0.002217898378148675D0 1.6742403507232666D0)) (list (list 23.0D0 9791.7705078125D0 0.0019239889224991203D0 1.686734676361084D0)) (list (list 23.0D0 9789.9169921875D0 0.0016967058181762696D0 1.6992290019989014D0)) (list (list 23.0D0 9789.9130859375D0 0.0015021697618067265D0 1.7117233276367188D0)) (list (list 23.0D0 9790.0751953125D0 0.0013895598240196705D0 1.7242176532745362D0)) (list (list 23.0D0 9788.9833984375D0 0.0013561451341956854D0 1.7367119789123536D0)) (list (list 23.0D0 9787.59375D0 0.0013097316259518266D0 1.749206304550171D0)) (list (list 23.0D0 9787.09765625D0 0.0010902105132117868D0 1.7617006301879883D0)) (list (list 23.0D0 9787.6044921875D0 6.814805092290044D-4 1.7741949558258057D0)) (list (list 23.0D0 9776.56640625D0 3.2446140539832413D-4 1.7866894006729126D0)) (list (list 23.0D0 9776.5126953125D0 1.6449671238660813D-4 1.79918372631073D0)) (list (list 23.0D0 9782.9150390625D0 1.7986792954616249D-4 1.8116780519485474D0)) (list (list 23.0D0 9785.2001953125D0 2.694623835850507D-4 1.8241723775863648D0)) (list (list 23.0D0 9787.8779296875D0 3.302122058812529D-4 1.8366667032241822D0)) (list (list 23.0D0 9789.91796875D0 3.111669502686709D-4 1.861655354499817D0)) (list (list 23.0D0 9790.3876953125D0 3.7692737532779575D-4 1.8741496801376343D0)) (list (list 23.0D0 9789.4052734375D0 5.407535354606807D-4 1.8866440057754517D0)) (list (list 23.0D0 9787.453125D0 7.02939520124346D-4 1.899138331413269D0)) (list (list 23.0D0 9787.08984375D0 7.304411265067756D-4 1.9116326570510865D0)) (list (list 23.0D0 9788.541015625D0 5.911500193178654D-4 1.9241269826889038D0)) (list (list 23.0D0 9794.3984375D0 4.027862742077559D-4 1.9366213083267212D0)) (list (list 23.0D0 9798.912109375D0 2.9721605824306607D-4 1.9491156339645386D0)) (list (list 23.0D0 9807.716796875D0 2.6368178077973426D-4 1.961609959602356D0)) (list (list 23.0D0 9809.3505859375D0 3.590938576962799D-4 1.9741042852401734D0)) (list (list 23.0D0 9786.7578125D0 5.106256576254964D-4 1.9865986108779908D0)) (list (list 23.0D0 9793.826171875D0 7.058571791276336D-4 1.999092936515808D0)) (list (list 23.0D0 9793.48828125D0 7.655549561604857D-4 2.011587381362915D0)) (list (list 23.0D0 9793.1591796875D0 7.49901810195297D-4 2.0240817070007324D0)) (list (list 23.0D0 9793.4951171875D0 7.337945280596614D-4 2.03657603263855D0)) (list (list 23.0D0 9794.125D0 6.926924106664956D-4 2.049070358276367D0)) (list (list 23.0D0 9794.833984375D0 5.690543912351131D-4 2.0615646839141846D0)) (list (list 23.0D0 9799.7333984375D0 3.9188022492453456D-4 2.074059009552002D0)) (list (list 23.0D0 9774.123046875D0 2.8796077822335065D-4 2.0865533351898194D0)) (list (list 23.0D0 9770.5654296875D0 2.5466037914156914D-4 2.0990476608276367D0)) (list (list 23.0D0 9770.375D0 1.980782690225169D-4 2.111541986465454D0)) (list (list 23.0D0 9749.80859375D0 8.73250319273211D-5 2.1240363121032715D0)) (list (list 23.0D0 9747.728515625D0 1.2482667807489634D-4 2.1490249633789063D0)) (list (list 23.0D0 9776.7900390625D0 3.266642743255943D-4 2.1615192890167237D0)) (list (list 23.0D0 9757.0703125D0 2.3211904044728726D-4 2.1865079402923584D0)) (list (list 23.0D0 9757.0703125D0 0.0D0 2.199002265930176D0)) (list (list 24.0D0 1848.046142578125D0 9.699458023533225D-4 0.09995464980602265D0)) (list (list 24.0D0 1837.13427734375D0 9.001735597848892D-4 0.11244898289442063D0)) (list (list 24.0D0 1863.2442626953125D0 0.0061479792930185795D0 0.137437641620636D0)) (list (list 24.0D0 1821.8175048828125D0 7.538361824117601D-4 0.16242630779743195D0)) (list (list 24.0D0 1837.571533203125D0 0.0021702090743929148D0 0.17492063343524933D0)) (list (list 24.0D0 1837.571533203125D0 0.0D0 0.1874149590730667D0)) (list (list 25.0D0 5628.64599609375D0 4.682005965150893D-4 0.11244898289442063D0)) (list (list 25.0D0 5633.42724609375D0 7.492704316973686D-4 0.137437641620636D0)) (list (list 25.0D0 5635.8623046875D0 7.749617216177285D-4 0.14993196725845337D0)) (list (list 25.0D0 5636.642578125D0 7.258998812176287D-4 0.16242630779743195D0)) (list (list 25.0D0 5636.0439453125D0 7.381991017609835D-4 0.17492063343524933D0)) (list (list 25.0D0 5635.62890625D0 8.809612481854856D-4 0.1874149590730667D0)) (list (list 25.0D0 5636.98046875D0 9.187068208120763D-4 0.21240362524986267D0)) (list (list 25.0D0 5647.8447265625D0 6.330792093649507D-4 0.22489796578884125D0)) (list (list 25.0D0 5625.498046875D0 6.221475196070969D-4 0.23739229142665863D0)) (list (list 25.0D0 5624.2861328125D0 5.660466267727315D-4 0.249886617064476D0)) (list (list 25.0D0 5622.54248046875D0 6.250896258279681D-4 0.2623809576034546D0)) (list (list 25.0D0 5631.0166015625D0 4.3133480357937515D-4 0.274875283241272D0)) (list (list 25.0D0 5631.900390625D0 5.537482793442905D-4 0.28736960887908936D0)) (list (list 25.0D0 5656.40185546875D0 4.539386718533933D-4 0.29986393451690674D0)) (list (list 25.0D0 5655.205078125D0 5.093288491480053D-4 0.3123582899570465D0)) (list (list 25.0D0 5649.73583984375D0 4.825922951567918D-4 0.3248526155948639D0)) (list (list 25.0D0 5646.583984375D0 4.6676016063429415D-4 0.3373469412326813D0)) (list (list 25.0D0 5645.2197265625D0 3.814705996774137D-4 0.34984126687049866D0)) (list (list 25.0D0 5660.84814453125D0 2.96788610285148D-4 0.36233559250831604D0)) (list (list 25.0D0 5663.34619140625D0 3.90854780562222D-4 0.3748299181461334D0)) (list (list 25.0D0 5664.66943359375D0 4.2749368003569544D-4 0.3873242437839508D0)) (list (list 25.0D0 5666.36181640625D0 4.052771255373955D-4 0.3998185992240906D0)) (list (list 25.0D0 5662.98974609375D0 3.7662225076928735D-4 0.41231292486190796D0)) (list (list 25.0D0 5647.41015625D0 6.788616301491857D-4 0.42480725049972534D0)) (list (list 25.0D0 5650.40966796875D0 8.392829913645983D-4 0.4373015761375427D0)) (list (list 25.0D0 5646.0947265625D0 8.312624995596707D-4 0.4497959315776825D0)) (list (list 25.0D0 5640.97998046875D0 8.402431267313659D-4 0.4622902572154999D0)) (list (list 25.0D0 5639.1875D0 8.497831877321005D-4 0.47478458285331726D0)) (list (list 25.0D0 5637.86767578125D0 7.456833845935762D-4 0.48727890849113465D0)) (list (list 25.0D0 5638.12451171875D0 5.833662580698729D-4 0.499773234128952D0)) (list (list 25.0D0 5638.9697265625D0 4.5222428161650896D-4 0.5122675895690918D0)) (list (list 25.0D0 5632.7880859375D0 3.794166259467602D-4 0.5247619152069092D0)) (list (list 25.0D0 5603.296875D0 0.0032947491854429245D0 0.5622448921203613D0)) (list (list 25.0D0 5640.0849609375D0 5.915891961194575D-4 0.5747392177581787D0)) (list (list 25.0D0 5643.7080078125D0 7.904329104349017D-4 0.5872335433959961D0)) (list (list 25.0D0 5642.86865234375D0 0.0010655599180608988D0 0.5997278690338135D0)) (list (list 25.0D0 5635.4619140625D0 0.0011538044782355428D0 0.6122221946716309D0)) (list (list 25.0D0 5635.45263671875D0 7.672967039979994D-4 0.624716579914093D0)) (list (list 25.0D0 5659.310546875D0 4.90069214720279D-4 0.6372109055519104D0)) (list (list 25.0D0 5626.90234375D0 4.051249416079372D-4 0.6497052311897278D0)) (list (list 25.0D0 5621.24853515625D0 8.186267805285752D-4 0.6621995568275452D0)) (list (list 25.0D0 5623.81005859375D0 8.968310430645943D-4 0.6996825337409973D0)) (list (list 25.0D0 5623.3154296875D0 8.593731909058988D-4 0.7121768593788147D0)) (list (list 25.0D0 5622.8662109375D0 6.475265836343169D-4 0.7371655106544495D0)) (list (list 25.0D0 5651.30517578125D0 2.26825664867647D-4 0.762154221534729D0)) (list (list 25.0D0 5636.369140625D0 4.816512227989733D-4 0.7996371984481812D0)) (list (list 25.0D0 5635.64306640625D0 8.120263810269535D-4 0.8121315240859985D0)) (list (list 25.0D0 5630.251953125D0 0.0012236691545695067D0 0.8246258497238159D0)) (list (list 25.0D0 5627.21044921875D0 0.0015967044746503234D0 0.8371201753616333D0)) (list (list 25.0D0 5649.71875D0 7.195573416538537D-4 0.8746031522750855D0)) (list (list 25.0D0 5649.619140625D0 6.192045984789729D-4 0.8870974779129028D0)) (list (list 25.0D0 5635.025390625D0 5.617508431896567D-4 0.899591863155365D0)) (list (list 25.0D0 5638.7353515625D0 4.7418594476766885D-4 0.9120861887931824D0)) (list (list 25.0D0 5635.19970703125D0 6.34042895399034D-4 0.9245805144309998D0)) (list (list 25.0D0 5653.6044921875D0 5.433966871351004D-4 0.9495691657066345D0)) (list (list 25.0D0 5660.92236328125D0 6.04054017458111D-4 0.9620634913444519D0)) (list (list 25.0D0 5665.01953125D0 6.25575368758291D-4 0.9745578169822693D0)) (list (list 25.0D0 5693.830078125D0 6.584528600797057D-4 0.9870521426200867D0)) (list (list 25.0D0 5690.10009765625D0 8.135961834341288D-4 0.999546468257904D0)) (list (list 25.0D0 5690.13330078125D0 8.676789584569633D-4 1.0120408535003662D0)) (list (list 25.0D0 5690.7373046875D0 8.131080539897084D-4 1.0245351791381836D0)) (list (list 25.0D0 5689.32861328125D0 7.168787997215986D-4 1.037029504776001D0)) (list (list 25.0D0 5687.8349609375D0 6.150584667921066D-4 1.0495238304138184D0)) (list (list 25.0D0 5689.333984375D0 4.982111277058721D-4 1.0620181560516358D0)) (list (list 25.0D0 5691.421875D0 3.976970328949392D-4 1.0745124816894532D0)) (list (list 25.0D0 5657.33740234375D0 5.49717980902642D-4 1.0870068073272705D0)) (list (list 25.0D0 5655.99560546875D0 7.832549745216966D-4 1.099501132965088D0)) (list (list 25.0D0 5652.8310546875D0 9.259650250896812D-4 1.1119954586029053D0)) (list (list 25.0D0 5649.6171875D0 8.382010273635387D-4 1.1244897842407227D0)) (list (list 25.0D0 5630.84375D0 7.330821827054024D-4 1.13698410987854D0)) (list (list 25.0D0 5626.1875D0 6.103774067014456D-4 1.1494784355163575D0)) (list (list 25.0D0 5656.46826171875D0 1.0378524893894792D-4 1.1619727611541748D0)) (list (list 25.0D0 5635.171875D0 2.8126503457315266D-4 1.1744670867919922D0)) (list (list 25.0D0 5624.6826171875D0 0.0011757542379200459D0 1.199455738067627D0)) (list (list 25.0D0 5653.0849609375D0 2.7260073693469167D-4 1.2244443893432618D0)) (list (list 25.0D0 5653.0849609375D0 0.0D0 1.236938714981079D0)) (list (list 26.0D0 2768.840576171875D0 0.004008956719189882D0 0.17492063343524933D0)) (list (list 26.0D0 2771.322021484375D0 0.004449996165931225D0 0.1874149590730667D0)) (list (list 26.0D0 2767.801025390625D0 0.001179513637907803D0 0.22489796578884125D0)) (list (list 26.0D0 2763.5576171875D0 0.0013082210207358003D0 0.23739229142665863D0)) (list (list 26.0D0 2765.57666015625D0 0.00164069386664778D0 0.2623809576034546D0)) (list (list 26.0D0 2758.300048828125D0 0.001064771437086165D0 0.274875283241272D0)) (list (list 26.0D0 2758.300048828125D0 0.0D0 0.28736960887908936D0)) (list (list 27.0D0 2289.62060546875D0 6.15122087765485D-4 0.1999092996120453D0)) (list (list 27.0D0 2289.387939453125D0 6.684806430712342D-4 0.21240362524986267D0)) (list (list 27.0D0 2302.33251953125D0 0.001074945437721908D0 0.22489796578884125D0)) (list (list 27.0D0 2295.10693359375D0 0.0013254032237455249D0 0.23739229142665863D0)) (list (list 27.0D0 2294.30615234375D0 0.0015058552380651236D0 0.249886617064476D0)) (list (list 27.0D0 2295.084228515625D0 0.0016133396420627833D0 0.2623809576034546D0)) (list (list 27.0D0 2294.997802734375D0 0.0015968676889315248D0 0.274875283241272D0)) (list (list 27.0D0 2294.882080078125D0 0.0014424746623262763D0 0.28736960887908936D0)) (list (list 27.0D0 2297.194580078125D0 0.0012670195428654552D0 0.29986393451690674D0)) (list (list 27.0D0 2302.322509765625D0 0.0011802389053627849D0 0.3123582899570465D0)) (list (list 27.0D0 2303.16748046875D0 0.00100202695466578D0 0.3248526155948639D0)) (list (list 27.0D0 2305.7978515625D0 9.623309597373009D-4 0.3373469412326813D0)) (list (list 27.0D0 2312.871826171875D0 0.0014054214116185904D0 0.34984126687049866D0)) (list (list 27.0D0 2282.6533203125D0 9.104046039283276D-4 0.36233559250831604D0)) (list (list 27.0D0 2285.8095703125D0 0.001274039619602263D0 0.3748299181461334D0)) (list (list 27.0D0 2307.781005859375D0 0.002686784602701664D0 0.3873242437839508D0)) (list (list 27.0D0 2304.716552734375D0 0.0033351052552461624D0 0.3998185992240906D0)) (list (list 27.0D0 2302.483154296875D0 0.0031698981765657664D0 0.41231292486190796D0)) (list (list 27.0D0 2299.249267578125D0 0.0024609635584056378D0 0.42480725049972534D0)) (list (list 27.0D0 2297.7158203125D0 0.0017785429954528809D0 0.4373015761375427D0)) (list (list 27.0D0 2298.15625D0 0.0012346457224339247D0 0.4497959315776825D0)) (list (list 27.0D0 2295.5048828125D0 8.587904158048332D-4 0.4622902572154999D0)) (list (list 27.0D0 2292.474365234375D0 8.649197407066822D-4 0.47478458285331726D0)) (list (list 27.0D0 2292.840087890625D0 0.0010187581647187472D0 0.48727890849113465D0)) (list (list 27.0D0 2284.7724609375D0 8.251310791820288D-4 0.5122675895690918D0)) (list (list 27.0D0 2282.09521484375D0 7.786964415572584D-4 0.5247619152069092D0)) (list (list 27.0D0 2283.362548828125D0 7.868635002523661D-4 0.5372562408447266D0)) (list (list 27.0D0 2286.290283203125D0 8.60349799040705D-4 0.549750566482544D0)) (list (list 27.0D0 2289.506103515625D0 9.405635064467788D-4 0.5622448921203613D0)) (list (list 27.0D0 2294.39306640625D0 0.0011464538984000683D0 0.5747392177581787D0)) (list (list 27.0D0 2298.963134765625D0 0.0014902874827384949D0 0.5872335433959961D0)) (list (list 27.0D0 2306.326416015625D0 0.0014868442667648197D0 0.6122221946716309D0)) (list (list 27.0D0 2304.186767578125D0 0.001062426483258605D0 0.624716579914093D0)) (list (list 27.0D0 2302.5439453125D0 0.0010077315382659436D0 0.6372109055519104D0)) (list (list 27.0D0 2301.501220703125D0 0.001083629671484232D0 0.6497052311897278D0)) (list (list 27.0D0 2304.591796875D0 9.370764601044357D-4 0.6621995568275452D0)) (list (list 27.0D0 2278.672119140625D0 2.975213574245572D-4 0.6871882081031799D0)) (list (list 27.0D0 2288.482177734375D0 5.421226960606873D-4 0.7121768593788147D0)) (list (list 27.0D0 2293.2939453125D0 7.851538248360157D-4 0.7246711850166321D0)) (list (list 27.0D0 2273.055419921875D0 3.7697545485571027D-4 0.7371655106544495D0)) (list (list 27.0D0 2272.419677734375D0 2.9048725264146924D-4 0.7496598362922669D0)) (list (list 27.0D0 2303.603271484375D0 0.0017008777940645814D0 0.762154221534729D0)) (list (list 27.0D0 2295.716064453125D0 0.0011519433464854956D0 0.7996371984481812D0)) (list (list 27.0D0 2298.385986328125D0 0.0013731915969401598D0 0.8121315240859985D0)) (list (list 27.0D0 2298.136962890625D0 0.001483780681155622D0 0.8246258497238159D0)) (list (list 27.0D0 2298.885498046875D0 0.0014296447625383735D0 0.8371201753616333D0)) (list (list 27.0D0 2298.885498046875D0 0.0D0 0.8496145009994507D0)) (list (list 28.0D0 2838.1552734375D0 4.228627367410809D-4 0.21240362524986267D0)) (list (list 28.0D0 2834.344482421875D0 2.9385610832832754D-4 0.22489796578884125D0)) (list (list 28.0D0 2826.957763671875D0 4.6166375977918506D-4 0.23739229142665863D0)) (list (list 28.0D0 2829.536376953125D0 5.527420435100794D-4 0.249886617064476D0)) (list (list 28.0D0 2827.43896484375D0 6.238017813302577D-4 0.2623809576034546D0)) (list (list 28.0D0 2833.718017578125D0 4.890325362794101D-4 0.274875283241272D0)) (list (list 28.0D0 2835.474609375D0 5.537418182939291D-4 0.28736960887908936D0)) (list (list 28.0D0 2820.3837890625D0 0.0032343415077775717D0 0.3248526155948639D0)) (list (list 28.0D0 2821.711181640625D0 0.0030083477031439543D0 0.3373469412326813D0)) (list (list 28.0D0 2832.37646484375D0 6.075671408325434D-4 0.3748299181461334D0)) (list (list 28.0D0 2836.000732421875D0 3.5030697472393513D-4 0.41231292486190796D0)) (list (list 28.0D0 2824.353515625D0 3.8131154724396765D-4 0.42480725049972534D0)) (list (list 28.0D0 2830.4970703125D0 2.9762674239464104D-4 0.4622902572154999D0)) (list (list 28.0D0 2830.814208984375D0 4.7019924386404455D-4 0.47478458285331726D0)) (list (list 28.0D0 2824.63330078125D0 8.385985274799168D-4 0.48727890849113465D0)) (list (list 28.0D0 2861.82275390625D0 1.8904221360571683D-4 0.5122675895690918D0)) (list (list 28.0D0 2826.885986328125D0 6.024229805916548D-4 0.5247619152069092D0)) (list (list 28.0D0 2840.072021484375D0 3.183071094099432D-4 0.5372562408447266D0)) (list (list 28.0D0 2841.0810546875D0 3.563018108252436D-4 0.549750566482544D0)) (list (list 28.0D0 2869.568359375D0 1.0971610026899725D-4 0.5622448921203613D0)) (list (list 28.0D0 2873.2314453125D0 1.2062954920111224D-4 0.5747392177581787D0)) (list (list 28.0D0 2825.359130859375D0 9.488982032053173D-4 0.5997278690338135D0)) (list (list 28.0D0 2826.361572265625D0 8.996305405162275D-4 0.6122221946716309D0)) (list (list 28.0D0 2824.6455078125D0 3.643437521532178D-4 0.6497052311897278D0)) (list (list 28.0D0 2824.6455078125D0 0.0D0 0.6621995568275452D0)) (list (list 29.0D0 1887.5570068359375D0 0.003610796993598342D0 0.3373469412326813D0)) (list (list 29.0D0 1884.5001220703125D0 0.003537312848493457D0 0.34984126687049866D0)) (list (list 29.0D0 1899.4874267578125D0 0.0010949482675641776D0 0.3748299181461334D0)) (list (list 29.0D0 1899.4874267578125D0 0.0D0 0.3873242437839508D0)) (list (list 30.0D0 2760.26220703125D0 0.0019898167811334133D0 0.4497959315776825D0)) (list (list 30.0D0 2758.88916015625D0 0.002127633662894368D0 0.4622902572154999D0)) (list (list 30.0D0 2757.37060546875D0 0.0023451668675988913D0 0.47478458285331726D0)) (list (list 30.0D0 2754.55126953125D0 0.002518604975193739D0 0.48727890849113465D0)) (list (list 30.0D0 2751.399658203125D0 0.0025376344565302134D0 0.499773234128952D0)) (list (list 30.0D0 2774.515380859375D0 0.002214687177911401D0 0.5372562408447266D0)) (list (list 30.0D0 2774.583251953125D0 0.003965579904615879D0 0.549750566482544D0)) (list (list 30.0D0 2767.447509765625D0 0.0013390186941251159D0 0.5872335433959961D0)) (list (list 30.0D0 2747.884521484375D0 0.0014326558448374272D0 0.5997278690338135D0)) (list (list 30.0D0 2768.99365234375D0 0.001379583147354424D0 0.6372109055519104D0)) (list (list 30.0D0 2749.78662109375D0 5.810559960082173D-4 0.6497052311897278D0)) (list (list 30.0D0 2742.318603515625D0 5.687097436748445D-4 0.6621995568275452D0)) (list (list 30.0D0 2769.052490234375D0 0.0015710360603407026D0 0.6871882081031799D0)) (list (list 30.0D0 2750.732421875D0 7.910359418019652D-4 0.7121768593788147D0)) (list (list 30.0D0 2770.657470703125D0 0.0015374923823401332D0 0.7371655106544495D0)) (list (list 30.0D0 2769.45263671875D0 8.314154692925513D-4 0.7746485471725464D0)) (list (list 30.0D0 2755.1494140625D0 5.728951655328274D-4 0.7871428728103638D0)) (list (list 30.0D0 2757.0634765625D0 4.367479996290058D-4 0.7996371984481812D0)) (list (list 30.0D0 2733.439208984375D0 4.242570430506021D-4 0.8121315240859985D0)) (list (list 30.0D0 2732.5234375D0 5.451045581139624D-4 0.8246258497238159D0)) (list (list 30.0D0 2732.5234375D0 0.0D0 0.8371201753616333D0)) (list (list 31.0D0 2769.45068359375D0 8.398220525123179D-4 0.8246258497238159D0)) (list (list 31.0D0 2771.136962890625D0 0.0032639370765537024D0 0.8621088266372681D0)) (list (list 31.0D0 2765.462890625D0 0.0013479528715834022D0 0.899591863155365D0)) (list (list 31.0D0 2744.240478515625D0 0.0010430249385535717D0 0.9245805144309998D0)) (list (list 31.0D0 2766.28173828125D0 0.001596318557858467D0 0.9495691657066345D0)) (list (list 31.0D0 2769.91162109375D0 0.0021322816610336304D0 0.9870521426200867D0)) (list (list 31.0D0 2769.91162109375D0 0.0D0 0.999546468257904D0)) (list (list 32.0D0 2334.420654296875D0 0.0015675198519602418D0 0.9245805144309998D0)) (list (list 32.0D0 2330.197021484375D0 0.001936068176291883D0 0.9370748400688171D0)) (list (list 32.0D0 2327.654296875D0 0.0020794400479644537D0 0.9495691657066345D0)) (list (list 32.0D0 2329.756103515625D0 0.001787444343790412D0 0.9620634913444519D0)) (list (list 32.0D0 2332.243896484375D0 0.0015926796477288008D0 0.9745578169822693D0)) (list (list 32.0D0 2332.55126953125D0 0.0016198687953874469D0 0.9870521426200867D0)) (list (list 32.0D0 2331.39306640625D0 0.0016396245919167996D0 0.999546468257904D0)) (list (list 32.0D0 2331.066162109375D0 0.001467684400267899D0 1.0120408535003662D0)) (list (list 32.0D0 2328.281005859375D0 0.0011533077340573073D0 1.0245351791381836D0)) (list (list 32.0D0 2322.34912109375D0 0.0011401185765862465D0 1.037029504776001D0)) (list (list 32.0D0 2321.03173828125D0 0.0013346788473427296D0 1.0495238304138184D0)) (list (list 32.0D0 2311.178955078125D0 0.0015372534980997444D0 1.0745124816894532D0)) (list (list 32.0D0 2305.192138671875D0 0.0012029762146994472D0 1.099501132965088D0)) (list (list 32.0D0 2305.7822265625D0 0.001328538521192968D0 1.1119954586029053D0)) (list (list 32.0D0 2311.67626953125D0 0.0014722540508955718D0 1.1244897842407227D0)) (list (list 32.0D0 2318.386962890625D0 0.0016949090640991927D0 1.13698410987854D0)) (list (list 32.0D0 2321.51318359375D0 0.002099953591823578D0 1.1494784355163575D0)) (list (list 32.0D0 2326.416259765625D0 0.002594168996438384D0 1.1619727611541748D0)) (list (list 32.0D0 2329.691650390625D0 0.0031880000606179238D0 1.1744670867919922D0)) (list (list 32.0D0 2329.82568359375D0 0.003544456558302045D0 1.1869614124298096D0)) (list (list 32.0D0 2329.28369140625D0 0.0036672765854746104D0 1.199455738067627D0)) (list (list 32.0D0 2329.159912109375D0 0.003527699038386345D0 1.2119500637054444D0)) (list (list 32.0D0 2329.21728515625D0 0.00316409207880497D0 1.2244443893432618D0)) (list (list 32.0D0 2329.2841796875D0 0.002621227642521262D0 1.236938714981079D0)) (list (list 32.0D0 2330.066650390625D0 0.0019026444060727954D0 1.249433159828186D0)) (list (list 32.0D0 2336.65869140625D0 0.0010845649521797896D0 1.2619274854660035D0)) (list (list 32.0D0 2342.149169921875D0 8.556384709663689D-4 1.2744218111038208D0)) (list (list 32.0D0 2343.817138671875D0 9.485364425927401D-4 1.2869161367416382D0)) (list (list 32.0D0 2345.434814453125D0 0.0011379244970157743D0 1.2994104623794556D0)) (list (list 32.0D0 2348.150634765625D0 0.0012729326263070107D0 1.311904788017273D0)) (list (list 32.0D0 2352.809814453125D0 0.0013420883333310485D0 1.3243991136550904D0)) (list (list 32.0D0 2354.314697265625D0 0.0013891180278733373D0 1.3368934392929078D0)) (list (list 32.0D0 2352.183349609375D0 0.0013843935448676348D0 1.349387764930725D0)) (list (list 32.0D0 2340.367431640625D0 0.0016932699363678694D0 1.3618820905685425D0)) (list (list 32.0D0 2305.55029296875D0 0.0017774783773347736D0 1.3868707418441773D0)) (list (list 32.0D0 2332.6337890625D0 0.005410296842455864D0 1.3993650674819947D0)) (list (list 32.0D0 2330.97021484375D0 0.006121618207544088D0 1.411859393119812D0)) (list (list 32.0D0 2330.359619140625D0 0.005547789391130209D0 1.4243537187576294D0)) (list (list 32.0D0 2330.962158203125D0 0.0042319223284721375D0 1.4368480443954468D0)) (list (list 32.0D0 2330.548828125D0 0.0031052655540406704D0 1.4493423700332642D0)) (list (list 32.0D0 2321.150634765625D0 0.002615052741020918D0 1.4618366956710816D0)) (list (list 32.0D0 2350.501953125D0 0.0017885345732793212D0 1.474331021308899D0)) (list (list 32.0D0 2356.85205078125D0 0.0017034712946042419D0 1.4868253469467163D0)) (list (list 32.0D0 2361.102783203125D0 0.0014714919961988926D0 1.4993196725845337D0)) (list (list 32.0D0 2324.962890625D0 0.0010762137826532126D0 1.5118141174316407D0)) (list (list 32.0D0 2328.515869140625D0 7.045585662126541D-4 1.524308443069458D0)) (list (list 32.0D0 2335.228759765625D0 5.288845277391374D-4 1.5368027687072754D0)) (list (list 32.0D0 2355.1962890625D0 6.83844496961683D-4 1.5492970943450928D0)) (list (list 32.0D0 2352.01953125D0 0.0010791525710374117D0 1.5617914199829102D0)) (list (list 32.0D0 2349.17333984375D0 0.0012491251109167934D0 1.5742857456207276D0)) (list (list 32.0D0 2340.31298828125D0 0.0013524041278287769D0 1.586780071258545D0)) (list (list 32.0D0 2327.205322265625D0 0.0022443507332354784D0 1.5992743968963623D0)) (list (list 32.0D0 2330.356689453125D0 0.0023413680028170348D0 1.6117687225341797D0)) (list (list 32.0D0 2331.443115234375D0 0.002518352819606662D0 1.624263048171997D0)) (list (list 32.0D0 2331.935791015625D0 0.002930148970335722D0 1.6367573738098145D0)) (list (list 32.0D0 2333.1884765625D0 0.0029260229784995318D0 1.6492516994476319D0)) (list (list 32.0D0 2338.0400390625D0 0.002281303983181715D0 1.6617460250854493D0)) (list (list 32.0D0 2311.087158203125D0 0.0021913356613367796D0 1.6742403507232666D0)) (list (list 32.0D0 2311.706787109375D0 0.0021734328474849463D0 1.686734676361084D0)) (list (list 32.0D0 2313.0732421875D0 0.0022503978107124567D0 1.6992290019989014D0)) (list (list 32.0D0 2313.262451171875D0 0.00208062632009387D0 1.7117233276367188D0)) (list (list 32.0D0 2313.874267578125D0 0.0017646425403654576D0 1.7242176532745362D0)) (list (list 32.0D0 2313.973876953125D0 0.0015928951324895025D0 1.7367119789123536D0)) (list (list 32.0D0 2312.056884765625D0 0.0015656155301257968D0 1.749206304550171D0)) (list (list 32.0D0 2311.686279296875D0 0.0015954941045492888D0 1.7617006301879883D0)) (list (list 32.0D0 2313.0849609375D0 0.0016318600391969085D0 1.7741949558258057D0)) (list (list 32.0D0 2320.59912109375D0 0.001520082470960915D0 1.7866894006729126D0)) (list (list 32.0D0 2326.475830078125D0 0.0014408937422558666D0 1.79918372631073D0)) (list (list 32.0D0 2299.943603515625D0 0.001239498844370246D0 1.8116780519485474D0)) (list (list 32.0D0 2301.445068359375D0 0.0014210535446181894D0 1.8241723775863648D0)) (list (list 32.0D0 2299.929931640625D0 0.001690029981546104D0 1.8366667032241822D0)) (list (list 32.0D0 2296.96337890625D0 0.0018498740391805768D0 1.8491610288619996D0)) (list (list 32.0D0 2297.49365234375D0 0.0017811513971537352D0 1.861655354499817D0)) (list (list 32.0D0 2300.77880859375D0 0.0017350929556414485D0 1.8741496801376343D0)) (list (list 32.0D0 2305.9375D0 0.00207873759791255D0 1.8866440057754517D0)) (list (list 32.0D0 2311.02978515625D0 0.0026844744570553303D0 1.899138331413269D0)) (list (list 32.0D0 2313.41748046875D0 0.0029042901005595923D0 1.9116326570510865D0)) (list (list 32.0D0 2316.061279296875D0 0.0025698996614664793D0 1.9241269826889038D0)) (list (list 32.0D0 2322.29931640625D0 0.0021456934046000243D0 1.9366213083267212D0)) (list (list 32.0D0 2326.496826171875D0 0.0021227195393294096D0 1.9491156339645386D0)) (list (list 32.0D0 2323.00439453125D0 0.0019390081288293004D0 1.961609959602356D0)) (list (list 32.0D0 2318.98193359375D0 0.0020461876410990954D0 1.9741042852401734D0)) (list (list 32.0D0 2321.8056640625D0 0.0018136563012376428D0 1.9865986108779908D0)) (list (list 32.0D0 2331.52099609375D0 0.0018982657929882408D0 1.999092936515808D0)) (list (list 32.0D0 2331.35986328125D0 0.001963517162948847D0 2.011587381362915D0)) (list (list 32.0D0 2330.373046875D0 0.0020064888522028923D0 2.0240817070007324D0)) (list (list 32.0D0 2331.330810546875D0 0.0018951265374198556D0 2.03657603263855D0)) (list (list 32.0D0 2334.26904296875D0 0.0015606627566739917D0 2.049070358276367D0)) (list (list 32.0D0 2339.1669921875D0 0.001333479885943234D0 2.0615646839141846D0)) (list (list 32.0D0 2341.5400390625D0 0.0014909299788996578D0 2.074059009552002D0)) (list (list 32.0D0 2354.822021484375D0 0.0015809079632163048D0 2.0865533351898194D0)) (list (list 32.0D0 2359.203857421875D0 0.002108717104420066D0 2.0990476608276367D0)) (list (list 32.0D0 2358.410400390625D0 0.0020629852078855038D0 2.111541986465454D0)) (list (list 32.0D0 2348.468017578125D0 0.0016190910246223212D0 2.1240363121032715D0)) (list (list 32.0D0 2339.541259765625D0 0.0019729495979845524D0 2.136530637741089D0)) (list (list 32.0D0 2327.7158203125D0 0.00557671906426549D0 2.1615192890167237D0)) (list (list 32.0D0 2331.03466796875D0 0.0067244586534798145D0 2.174013614654541D0)) (list (list 32.0D0 2333.07177734375D0 0.0072594620287418366D0 2.1865079402923584D0)) (list (list 32.0D0 2333.531982421875D0 0.007190308533608913D0 2.199002265930176D0)) (list (list 32.0D0 2333.287109375D0 0.006586749106645584D0 2.211496591567993D0)) (list (list 32.0D0 2333.072021484375D0 0.005825792904943228D0 2.2239909172058106D0)) (list (list 32.0D0 2332.438232421875D0 0.005529733840376139D0 2.236485242843628D0)) (list (list 32.0D0 2330.941162109375D0 0.005791312083601952D0 2.2489795684814453D0)) (list (list 32.0D0 2329.47021484375D0 0.006130655761808157D0 2.2614738941192627D0)) (list (list 32.0D0 2328.799560546875D0 0.0062857093289494515D0 2.27396821975708D0)) (list (list 32.0D0 2330.278076171875D0 0.006337092723697424D0 2.2864625453948975D0)) (list (list 32.0D0 2333.000732421875D0 0.006918583530932665D0 2.298956871032715D0)) (list (list 32.0D0 2333.412353515625D0 0.007998342625796795D0 2.3114511966705323D0)) (list (list 32.0D0 2331.946533203125D0 0.008816464804112912D0 2.3239455223083496D0)) (list (list 32.0D0 2331.1845703125D0 0.008536643348634243D0 2.336439847946167D0)) (list (list 32.0D0 2332.51611328125D0 0.007104555610567331D0 2.3489341735839844D0)) (list (list 32.0D0 2333.364501953125D0 0.005939817521721125D0 2.3614284992218018D0)) (list (list 32.0D0 2332.646484375D0 0.005780344363301992D0 2.373922824859619D0)) (list (list 32.0D0 2330.980224609375D0 0.0062591303139925D0 2.3864171504974366D0)) (list (list 32.0D0 2330.293212890625D0 0.006431748624891043D0 2.398911476135254D0)) (list (list 32.0D0 2330.220947265625D0 0.005806692410260439D0 2.4114058017730713D0)) (list (list 32.0D0 2330.22509765625D0 0.004761952441185713D0 2.4239001274108887D0)) (list (list 32.0D0 2330.5986328125D0 0.004188446793705225D0 2.436394453048706D0)) (list (list 32.0D0 2331.73876953125D0 0.004684455692768097D0 2.4488887786865235D0)) (list (list 32.0D0 2331.957763671875D0 0.00596680399030447D0 2.461383104324341D0)) (list (list 32.0D0 2330.804931640625D0 0.007300339173525572D0 2.4738776683807373D0)) (list (list 32.0D0 2330.50830078125D0 0.008047745563089848D0 2.4863719940185547D0)) (list (list 32.0D0 2331.669921875D0 0.0077220420353114605D0 2.498866319656372D0)) (list (list 32.0D0 2331.842041015625D0 0.006573570892214775D0 2.5113606452941895D0)) (list (list 32.0D0 2329.7958984375D0 0.005350697785615921D0 2.523854970932007D0)) (list (list 32.0D0 2327.98974609375D0 0.00480168592184782D0 2.536349296569824D0)) (list (list 32.0D0 2328.9794921875D0 0.004662273917347193D0 2.5488436222076416D0)) (list (list 32.0D0 2330.682861328125D0 0.004977850709110498D0 2.561337947845459D0)) (list (list 32.0D0 2331.783203125D0 0.005501143168658018D0 2.5738322734832764D0)) (list (list 32.0D0 2332.8876953125D0 0.005819830112159252D0 2.5863265991210938D0)) (list (list 32.0D0 2333.342041015625D0 0.0057063233107328415D0 2.598820924758911D0)) (list (list 32.0D0 2332.419677734375D0 0.005364127457141876D0 2.6113152503967285D0)) (list (list 32.0D0 2331.14306640625D0 0.005358519032597542D0 2.623809576034546D0)) (list (list 32.0D0 2330.693359375D0 0.005689592100679874D0 2.6363039016723633D0)) (list (list 32.0D0 2330.965576171875D0 0.005884548649191856D0 2.6487982273101807D0)) (list (list 32.0D0 2330.84326171875D0 0.005633270367980003D0 2.661292552947998D0)) (list (list 32.0D0 2330.111572265625D0 0.0052405232563614845D0 2.6737868785858155D0)) (list (list 32.0D0 2329.532470703125D0 0.005356352310627699D0 2.686281204223633D0)) (list (list 32.0D0 2329.525634765625D0 0.006103924009948969D0 2.69877552986145D0)) (list (list 32.0D0 2330.26904296875D0 0.006818310357630253D0 2.7112698554992676D0)) (list (list 32.0D0 2331.47900390625D0 0.007001481018960476D0 2.723764181137085D0)) (list (list 32.0D0 2332.108642578125D0 0.006987257394939661D0 2.7362585067749024D0)) (list (list 32.0D0 2332.30126953125D0 0.007114700973033905D0 2.7487528324127198D0)) (list (list 32.0D0 2331.861328125D0 0.0071649448946118355D0 2.761247158050537D0)) (list (list 32.0D0 2331.220703125D0 0.007081018760800362D0 2.7737414836883545D0)) (list (list 32.0D0 2330.677490234375D0 0.007300852332264185D0 2.786235809326172D0)) (list (list 32.0D0 2330.240966796875D0 0.007948554120957852D0 2.7987301349639893D0)) (list (list 32.0D0 2330.291748046875D0 0.008730700239539147D0 2.8112244606018067D0)) (list (list 32.0D0 2330.9462890625D0 0.009494885802268982D0 2.823718786239624D0)) (list (list 32.0D0 2331.764404296875D0 0.010306809097528458D0 2.8362131118774414D0)) (list (list 32.0D0 2332.36669921875D0 0.011087974533438683D0 2.848707437515259D0)) (list (list 32.0D0 2332.68603515625D0 0.011615308932960034D0 2.861201763153076D0)) (list (list 32.0D0 2332.549072265625D0 0.011649376712739468D0 2.8736960887908936D0)) (list (list 32.0D0 2331.917724609375D0 0.011048125103116036D0 2.886190414428711D0)) (list (list 32.0D0 2331.132080078125D0 0.010065869428217411D0 2.8986847400665283D0)) (list (list 32.0D0 2330.677734375D0 0.009265459142625332D0 2.9111790657043457D0)) (list (list 32.0D0 2330.862548828125D0 0.009129088371992112D0 2.923673391342163D0)) (list (list 32.0D0 2331.36572265625D0 0.009674323722720147D0 2.9361677169799805D0)) (list (list 32.0D0 2331.588623046875D0 0.010495223104953766D0 2.948662042617798D0)) (list (list 32.0D0 2331.39013671875D0 0.011180092580616475D0 2.9611563682556153D0)) (list (list 32.0D0 2330.84814453125D0 0.011649412102997303D0 2.9736506938934326D0)) (list (list 32.0D0 2330.227294921875D0 0.012295945547521115D0 2.98614501953125D0)) (list (list 32.0D0 2330.010009765625D0 0.01352370623499155D0 2.9986393451690674D0)) (list (list 32.0D0 2330.3125D0 0.01513231173157692D0 3.0111336708068848D0)) (list (list 32.0D0 2330.87158203125D0 0.01636386476457119D0 3.0236282348632813D0)) (list (list 32.0D0 2331.17724609375D0 0.016584284603595734D0 3.0361225605010987D0)) (list (list 32.0D0 2331.183837890625D0 0.015806274488568306D0 3.048616886138916D0)) (list (list 32.0D0 2331.28369140625D0 0.01454912219196558D0 3.0611112117767334D0)) (list (list 32.0D0 2331.44677734375D0 0.013306465931236744D0 3.073605537414551D0)) (list (list 32.0D0 2331.25244140625D0 0.012099259532988072D0 3.086099863052368D0)) (list (list 32.0D0 2331.11279296875D0 0.010817362926900387D0 3.0985941886901856D0)) (list (list 32.0D0 2331.6796875D0 0.00981469638645649D0 3.111088514328003D0)) (list (list 32.0D0 2332.1494140625D0 0.009781889617443085D0 3.1235828399658203D0)) (list (list 32.0D0 2332.037841796875D0 0.010994735173881054D0 3.1360771656036377D0)) (list (list 32.0D0 2331.71826171875D0 0.013091133907437325D0 3.148571491241455D0)) (list (list 32.0D0 2331.857421875D0 0.015329222194850445D0 3.1610658168792725D0)) (list (list 32.0D0 2332.4287109375D0 0.016860241070389748D0 3.17356014251709D0)) (list (list 32.0D0 2332.9541015625D0 0.01743810810148716D0 3.1860544681549073D0)) (list (list 32.0D0 2333.188232421875D0 0.017575904726982117D0 3.1985487937927246D0)) (list (list 32.0D0 2333.130859375D0 0.01777835749089718D0 3.211043119430542D0)) (list (list 32.0D0 2332.43505859375D0 0.01804155856370926D0 3.2235374450683594D0)) (list (list 32.0D0 2331.627685546875D0 0.018569616600871086D0 3.2360317707061768D0)) (list (list 32.0D0 2331.11083984375D0 0.01965322718024254D0 3.248526096343994D0)) (list (list 32.0D0 2330.38134765625D0 0.02085058018565178D0 3.2610204219818116D0)) (list (list 32.0D0 2329.385498046875D0 0.02139170467853546D0 3.273514747619629D0)) (list (list 32.0D0 2328.984130859375D0 0.020975152030587197D0 3.2860090732574463D0)) (list (list 32.0D0 2329.697265625D0 0.020105205476284027D0 3.2985033988952637D0)) (list (list 32.0D0 2330.95263671875D0 0.019632143899798393D0 3.310997724533081D0)) (list (list 32.0D0 2332.06005859375D0 0.019551217555999756D0 3.3234920501708985D0)) (list (list 32.0D0 2332.8017578125D0 0.019366953521966934D0 3.335986375808716D0)) (list (list 32.0D0 2332.63671875D0 0.01866733469069004D0 3.348480701446533D0)) (list (list 32.0D0 2331.021240234375D0 0.017572730779647827D0 3.3609750270843506D0)) (list (list 32.0D0 2329.61767578125D0 0.016901543363928795D0 3.373469352722168D0)) (list (list 32.0D0 2330.015380859375D0 0.01675177924335003D0 3.3859636783599854D0)) (list (list 32.0D0 2331.0830078125D0 0.017274728044867516D0 3.3984580039978028D0)) (list (list 32.0D0 2331.208740234375D0 0.018020275980234146D0 3.41095232963562D0)) (list (list 32.0D0 2330.853515625D0 0.01864486187696457D0 3.4234466552734375D0)) (list (list 32.0D0 2330.707763671875D0 0.01894117332994938D0 3.435940980911255D0)) (list (list 32.0D0 2330.73095703125D0 0.018426895141601563D0 3.4484353065490723D0)) (list (list 32.0D0 2330.799072265625D0 0.01701154187321663D0 3.4609296321868897D0)) (list (list 32.0D0 2330.906982421875D0 0.015319698490202427D0 3.473423957824707D0)) (list (list 32.0D0 2330.91845703125D0 0.014052745886147023D0 3.4859182834625244D0)) (list (list 32.0D0 2330.89013671875D0 0.013326848857104779D0 3.498412609100342D0)) (list (list 32.0D0 2331.51025390625D0 0.012738695368170739D0 3.510906934738159D0)) (list (list 32.0D0 2333.05908203125D0 0.011908678337931633D0 3.5234012603759766D0)) (list (list 32.0D0 2333.658447265625D0 0.01062080543488264D0 3.535895586013794D0)) (list (list 32.0D0 2331.934326171875D0 0.00914942566305399D0 3.5483899116516114D0)) (list (list 32.0D0 2329.95751953125D0 0.008615224622189999D0 3.5608842372894287D0)) (list (list 32.0D0 2330.037353515625D0 0.009067339822649956D0 3.573378801345825D0)) (list (list 32.0D0 2331.0732421875D0 0.010407249443233014D0 3.5858731269836426D0)) (list (list 32.0D0 2331.20947265625D0 0.012250971049070359D0 3.59836745262146D0)) (list (list 32.0D0 2330.9765625D0 0.014153987169265747D0 3.6108617782592774D0)) (list (list 32.0D0 2331.173828125D0 0.015897706151008606D0 3.6233561038970948D0)) (list (list 32.0D0 2331.180908203125D0 0.017428193241357804D0 3.635850429534912D0)) (list (list 32.0D0 2330.728759765625D0 0.01877577044069767D0 3.6483447551727295D0)) (list (list 32.0D0 2330.552978515625D0 0.019953692331910134D0 3.660839080810547D0)) (list (list 32.0D0 2330.887939453125D0 0.02084888145327568D0 3.6733334064483643D0)) (list (list 32.0D0 2331.08349609375D0 0.021458560600876808D0 3.6858277320861817D0)) (list (list 32.0D0 2330.97509765625D0 0.02175476774573326D0 3.698322057723999D0)) (list (list 32.0D0 2330.904296875D0 0.021567821502685547D0 3.7108163833618164D0)) (list (list 32.0D0 2330.990966796875D0 0.020612087100744248D0 3.723310708999634D0)) (list (list 32.0D0 2330.835205078125D0 0.018866972997784615D0 3.735805034637451D0)) (list (list 32.0D0 2330.256103515625D0 0.016801634803414345D0 3.7482993602752686D0)) (list (list 32.0D0 2329.93603515625D0 0.015073020942509175D0 3.760793685913086D0)) (list (list 32.0D0 2330.572265625D0 0.01392336469143629D0 3.7732880115509033D0)) (list (list 32.0D0 2331.69921875D0 0.013320370577275753D0 3.7857823371887207D0)) (list (list 32.0D0 2332.45751953125D0 0.013041536323726178D0 3.798276662826538D0)) (list (list 32.0D0 2332.728515625D0 0.012940933927893639D0 3.8107709884643555D0)) (list (list 32.0D0 2332.61376953125D0 0.012872274033725262D0 3.823265314102173D0)) (list (list 32.0D0 2332.56884765625D0 0.012715796008706093D0 3.8357596397399903D0)) (list (list 32.0D0 2332.860107421875D0 0.012565754354000092D0 3.8482539653778076D0)) (list (list 32.0D0 2332.71826171875D0 0.012451715767383576D0 3.860748291015625D0)) (list (list 32.0D0 2331.957763671875D0 0.012274309061467648D0 3.8732426166534424D0)) (list (list 32.0D0 2331.5478515625D0 0.011963209137320519D0 3.8857369422912598D0)) (list (list 32.0D0 2331.679443359375D0 0.011450136080384255D0 3.898231267929077D0)) (list (list 32.0D0 2331.628173828125D0 0.01070479303598404D0 3.9107255935668946D0)) (list (list 32.0D0 2331.37451171875D0 0.009783000685274601D0 3.923219919204712D0)) (list (list 32.0D0 2331.32421875D0 0.008892095647752285D0 3.9357142448425293D0)) (list (list 32.0D0 2331.262939453125D0 0.008074266836047173D0 3.9482085704803467D0)) (list (list 32.0D0 2330.5654296875D0 0.00703218812122941D0 3.960702896118164D0)) (list (list 32.0D0 2328.80126953125D0 0.005618150811642408D0 3.9731972217559815D0)) (list (list 32.0D0 2326.5537109375D0 0.0042159417644143105D0 3.985691547393799D0)) (list (list 32.0D0 2325.524658203125D0 0.0032484394032508135D0 3.998185873031616D0)) (list (list 32.0D0 2326.234375D0 0.0027589970268309117D0 4.010680198669434D0)) (list (list 32.0D0 2328.392578125D0 0.002498555462807417D0 4.02317476272583D0)) (list (list 32.0D0 2330.747802734375D0 0.0023243469186127186D0 4.035668849945068D0)) (list (list 32.0D0 2331.116943359375D0 0.002465571276843548D0 4.048163414001465D0)) (list (list 32.0D0 2331.38916015625D0 0.0031849707011133433D0 4.060657501220703D0)) (list (list 32.0D0 2333.337646484375D0 0.00444273604080081D0 4.0731520652771D0)) (list (list 32.0D0 2334.19482421875D0 0.0061607216484844685D0 4.085646152496338D0)) (list (list 32.0D0 2333.6005859375D0 0.008018000982701779D0 4.098140716552734D0)) (list (list 32.0D0 2332.74560546875D0 0.009566975757479668D0 4.110634803771973D0)) (list (list 32.0D0 2332.398681640625D0 0.010386706329882145D0 4.123129367828369D0)) (list (list 32.0D0 2331.9482421875D0 0.010865969583392144D0 4.135623455047607D0)) (list (list 32.0D0 2331.52783203125D0 0.011680718511343003D0 4.148118019104004D0)) (list (list 32.0D0 2331.92529296875D0 0.012577202171087265D0 4.160612106323242D0)) (list (list 32.0D0 2332.76123046875D0 0.012792759574949742D0 4.173106670379639D0)) (list (list 32.0D0 2332.45458984375D0 0.012076196260750294D0 4.185600757598877D0)) (list (list 32.0D0 2331.0791015625D0 0.011171801947057248D0 4.198095321655273D0)) (list (list 32.0D0 2330.030029296875D0 0.01056677382439375D0 4.210589408874512D0)) (list (list 32.0D0 2330.6708984375D0 0.009834137745201588D0 4.223083972930908D0)) (list (list 32.0D0 2332.0830078125D0 0.008982046507298947D0 4.2355780601501465D0)) (list (list 32.0D0 2333.076904296875D0 0.008194704540073872D0 4.248072624206543D0)) (list (list 32.0D0 2333.3857421875D0 0.007787954527884722D0 4.260566711425781D0)) (list (list 32.0D0 2332.747314453125D0 0.00814749114215374D0 4.273061275482178D0)) (list (list 32.0D0 2331.648193359375D0 0.009283044375479222D0 4.285555362701416D0)) (list (list 32.0D0 2331.4560546875D0 0.010107157751917839D0 4.2980499267578125D0)) (list (list 32.0D0 2332.682861328125D0 0.009638991206884385D0 4.310544013977051D0)) (list (list 32.0D0 2333.134765625D0 0.008415354415774346D0 4.323038578033447D0)) (list (list 32.0D0 2332.2333984375D0 0.007596683222800493D0 4.3355326652526856D0)) (list (list 32.0D0 2330.951416015625D0 0.007645610719919205D0 4.348027229309082D0)) (list (list 32.0D0 2330.68603515625D0 0.007702391594648361D0 4.36052131652832D0)) (list (list 32.0D0 2331.356201171875D0 0.007136897183954716D0 4.373015880584717D0)) (list (list 32.0D0 2331.9248046875D0 0.006082049570977688D0 4.385509967803955D0)) (list (list 32.0D0 2331.065673828125D0 0.004900146275758743D0 4.398004531860352D0)) (list (list 32.0D0 2328.4375D0 0.004077544901520014D0 4.410499095916748D0)) (list (list 32.0D0 2327.74462890625D0 0.0038053076714277268D0 4.422993183135986D0)) (list (list 32.0D0 2330.330322265625D0 0.004097134340554476D0 4.435487747192383D0)) (list (list 32.0D0 2332.696044921875D0 0.005131765268743038D0 4.447981834411621D0)) (list (list 32.0D0 2332.98388671875D0 0.006199299357831478D0 4.460476398468018D0)) (list (list 32.0D0 2332.61669921875D0 0.006807904690504074D0 4.472970485687256D0)) (list (list 32.0D0 2332.388671875D0 0.006774957291781902D0 4.485465049743652D0)) (list (list 32.0D0 2332.119873046875D0 0.006127992179244757D0 4.497959136962891D0)) (list (list 32.0D0 2331.55419921875D0 0.005154228303581476D0 4.510453701019287D0)) (list (list 32.0D0 2330.748779296875D0 0.00432544806972146D0 4.522947788238525D0)) (list (list 32.0D0 2330.2744140625D0 0.0038116236682981253D0 4.535442352294922D0)) (list (list 32.0D0 2331.498291015625D0 0.003337624715641141D0 4.54793643951416D0)) (list (list 32.0D0 2333.589599609375D0 0.0028112437576055527D0 4.560431003570557D0)) (list (list 32.0D0 2333.654296875D0 0.002330934163182974D0 4.572925090789795D0)) (list (list 32.0D0 2331.89501953125D0 0.0020087326411157847D0 4.585419654846191D0)) (list (list 32.0D0 2331.00244140625D0 0.0017689219675958157D0 4.59791374206543D0)) (list (list 32.0D0 2333.268798828125D0 0.0014667944051325322D0 4.610408306121826D0)) (list (list 32.0D0 2336.62939453125D0 0.0013132719323039055D0 4.6229023933410645D0)) (list (list 32.0D0 2337.8251953125D0 0.0013617698568850756D0 4.635396957397461D0)) (list (list 32.0D0 2336.633544921875D0 0.001642232877202332D0 4.647891044616699D0)) (list (list 32.0D0 2334.768310546875D0 0.002192493062466383D0 4.660385608673096D0)) (list (list 32.0D0 2332.729248046875D0 0.002699142787605524D0 4.672879695892334D0)) (list (list 32.0D0 2331.052978515625D0 0.002746352693066001D0 4.6853742599487305D0)) (list (list 32.0D0 2330.5693359375D0 0.0023326314985752106D0 4.697868347167969D0)) (list (list 32.0D0 2329.669921875D0 0.0018898239359259606D0 4.710362911224365D0)) (list (list 32.0D0 2328.304443359375D0 0.0016681187553331256D0 4.7228569984436035D0)) (list (list 32.0D0 2329.856201171875D0 0.0016915936721488834D0 4.7353515625D0)) (list (list 32.0D0 2331.6708984375D0 0.0022144033573567868D0 4.747845649719238D0)) (list (list 32.0D0 2332.379638671875D0 0.0030927411280572415D0 4.760340213775635D0)) (list (list 32.0D0 2331.93408203125D0 0.003761859145015478D0 4.772834300994873D0)) (list (list 32.0D0 2331.3486328125D0 0.003869218286126852D0 4.7853288650512695D0)) (list (list 32.0D0 2330.64599609375D0 0.003430963959544897D0 4.797822952270508D0)) (list (list 32.0D0 2331.10791015625D0 0.002560531487688422D0 4.810317516326904D0)) (list (list 32.0D0 2333.390869140625D0 0.0017045761924237013D0 4.822811603546143D0)) (list (list 32.0D0 2332.394775390625D0 0.001286391750909388D0 4.835306167602539D0)) (list (list 32.0D0 2313.372802734375D0 0.001566053368151188D0 4.847800254821777D0)) (list (list 32.0D0 2322.202880859375D0 0.0014349209377542139D0 4.860294818878174D0)) (list (list 32.0D0 2295.2470703125D0 8.081522537395358D-4 4.872788906097412D0)) (list (list 32.0D0 2315.62158203125D0 9.003164595924318D-4 4.885283470153809D0)) (list (list 32.0D0 2310.134521484375D0 0.0012508571380749345D0 4.897777557373047D0)) (list (list 32.0D0 2318.0283203125D0 0.0013513012090697885D0 4.910272121429443D0)) (list (list 32.0D0 2326.29345703125D0 0.0018880752613767982D0 4.922766208648682D0)) (list (list 32.0D0 2331.107421875D0 0.0032016485929489136D0 4.935260772705078D0)) (list (list 32.0D0 2332.1376953125D0 0.004573191981762648D0 4.947755336761475D0)) (list (list 32.0D0 2332.47607421875D0 0.005714245606213808D0 4.960249423980713D0)) (list (list 32.0D0 2332.066650390625D0 0.006418731529265642D0 4.972743988037109D0)) (list (list 32.0D0 2331.68798828125D0 0.00664140097796917D0 4.985238075256348D0)) (list (list 32.0D0 2332.098388671875D0 0.006440639495849609D0 4.997732639312744D0)) (list (list 32.0D0 2332.97607421875D0 0.0059726424515247345D0 5.010226726531982D0)) (list (list 32.0D0 2333.185546875D0 0.005344875622540712D0 5.022721290588379D0)) (list (list 32.0D0 2332.508544921875D0 0.00452334713190794D0 5.035215377807617D0)) (list (list 32.0D0 2331.57421875D0 0.0035170528572052718D0 5.047709941864014D0)) (list (list 32.0D0 2331.121337890625D0 0.0025341114960610867D0 5.060204029083252D0)) (list (list 32.0D0 2330.9619140625D0 0.001870169653557241D0 5.072698593139648D0)) (list (list 32.0D0 2330.8154296875D0 0.0015541967004537583D0 5.085192680358887D0)) (list (list 32.0D0 2329.35888671875D0 0.0013980414951220155D0 5.097687244415283D0)) (list (list 32.0D0 2326.93603515625D0 0.0012885619653388858D0 5.1101813316345215D0)) (list (list 32.0D0 2328.3408203125D0 0.001198204467073083D0 5.122675895690918D0)) (list (list 32.0D0 2330.7529296875D0 0.0014913759659975768D0 5.135169982910156D0)) (list (list 32.0D0 2330.240966796875D0 0.0022174641489982605D0 5.147664546966553D0)) (list (list 32.0D0 2327.4326171875D0 0.002918688114732504D0 5.160158634185791D0)) (list (list 32.0D0 2328.011474609375D0 0.0029870294965803624D0 5.1726531982421875D0)) (list (list 32.0D0 2329.6826171875D0 0.0026174383237957955D0 5.185147285461426D0)) (list (list 32.0D0 2331.171630859375D0 0.002562332898378372D0 5.197641849517822D0)) (list (list 32.0D0 2331.4697265625D0 0.003236857010051608D0 5.2101359367370606D0)) (list (list 32.0D0 2330.78173828125D0 0.0045370059087872505D0 5.222630500793457D0)) (list (list 32.0D0 2330.6396484375D0 0.005970759317278862D0 5.235124588012695D0)) (list (list 32.0D0 2331.685546875D0 0.006961457896977663D0 5.247619152069092D0)) (list (list 32.0D0 2332.918212890625D0 0.007365099154412746D0 5.26011323928833D0)) (list (list 32.0D0 2332.84521484375D0 0.0073027173057198525D0 5.272607803344727D0)) (list (list 32.0D0 2331.40673828125D0 0.007023223210126162D0 5.285101890563965D0)) (list (list 32.0D0 2330.332763671875D0 0.0066975136287510395D0 5.297596454620361D0)) (list (list 32.0D0 2331.11181640625D0 0.006274954881519079D0 5.3100905418396D0)) (list (list 32.0D0 2332.169921875D0 0.006044809240847826D0 5.322585105895996D0)) (list (list 32.0D0 2332.053466796875D0 0.0059462254866957665D0 5.335079193115234D0)) (list (list 32.0D0 2331.390625D0 0.0057845814153552056D0 5.347573757171631D0)) (list (list 32.0D0 2331.80029296875D0 0.0054007298313081265D0 5.360067844390869D0)) (list (list 32.0D0 2333.31689453125D0 0.0048026954755187035D0 5.372562408447266D0)) (list (list 32.0D0 2333.8251953125D0 0.004109440837055445D0 5.385056495666504D0)) (list (list 32.0D0 2332.111083984375D0 0.003594005946069956D0 5.3975510597229D0)) (list (list 32.0D0 2329.98388671875D0 0.003491715295240283D0 5.410045146942139D0)) (list (list 32.0D0 2328.613525390625D0 0.0031887078657746315D0 5.422539710998535D0)) (list (list 32.0D0 2331.03955078125D0 0.0023371519055217505D0 5.435033798217773D0)) (list (list 32.0D0 2331.45947265625D0 0.0016315754037350417D0 5.44752836227417D0)) (list (list 32.0D0 2313.553955078125D0 0.0014170561917126179D0 5.460022449493408D0)) (list (list 32.0D0 2328.019775390625D0 0.002843789290636778D0 5.472517013549805D0)) (list (list 32.0D0 2329.518310546875D0 0.00383803341537714D0 5.485011100769043D0)) (list (list 32.0D0 2330.632080078125D0 0.004259409848600626D0 5.4975056648254395D0)) (list (list 32.0D0 2331.46826171875D0 0.00406426377594471D0 5.510000228881836D0)) (list (list 32.0D0 2331.876708984375D0 0.0036781674716621638D0 5.522494316101074D0)) (list (list 32.0D0 2331.348388671875D0 0.0036218708846718073D0 5.534988880157471D0)) (list (list 32.0D0 2330.69091796875D0 0.004153999034315348D0 5.547482967376709D0)) (list (list 32.0D0 2330.7607421875D0 0.004826488438993692D0 5.5599775314331055D0)) (list (list 32.0D0 2331.55859375D0 0.004892999771982431D0 5.572471618652344D0)) (list (list 32.0D0 2332.644775390625D0 0.004265465773642063D0 5.58496618270874D0)) (list (list 32.0D0 2332.931640625D0 0.0035786787047982216D0 5.5974602699279785D0)) (list (list 32.0D0 2331.567626953125D0 0.003279630560427904D0 5.609954833984375D0)) (list (list 32.0D0 2329.84912109375D0 0.0033168664667755366D0 5.622448921203613D0)) (list (list 32.0D0 2330.528564453125D0 0.003286325605586171D0 5.63494348526001D0)) (list (list 32.0D0 2331.93408203125D0 0.0031510726548731327D0 5.647437572479248D0)) (list (list 32.0D0 2331.800537109375D0 0.002980360295623541D0 5.6599321365356445D0)) (list (list 32.0D0 2330.8193359375D0 0.0029772354755550623D0 5.672426223754883D0)) (list (list 32.0D0 2330.0234375D0 0.0031291779596358538D0 5.684920787811279D0)) (list (list 32.0D0 2329.46728515625D0 0.0031872843392193318D0 5.697414875030518D0)) (list (list 32.0D0 2329.23876953125D0 0.0031330662313848734D0 5.709909439086914D0)) (list (list 32.0D0 2329.269775390625D0 0.0033218737225979567D0 5.722403526306152D0)) (list (list 32.0D0 2329.93212890625D0 0.003976808860898018D0 5.734898090362549D0)) (list (list 32.0D0 2331.265869140625D0 0.004849724005907774D0 5.747392177581787D0)) (list (list 32.0D0 2332.673095703125D0 0.005419127177447081D0 5.759886741638184D0)) (list (list 32.0D0 2333.253173828125D0 0.005359388887882233D0 5.772380828857422D0)) (list (list 32.0D0 2332.651611328125D0 0.00488583417609334D0 5.784875392913818D0)) (list (list 32.0D0 2331.196044921875D0 0.004531750455498695D0 5.797369480133057D0)) (list (list 32.0D0 2330.61767578125D0 0.004487834870815277D0 5.809864044189453D0)) (list (list 32.0D0 2332.813232421875D0 0.004525361582636833D0 5.822358131408691D0)) (list (list 32.0D0 2335.312255859375D0 0.004728057887405157D0 5.834852695465088D0)) (list (list 32.0D0 2334.924072265625D0 0.004693980328738689D0 5.847346782684326D0)) (list (list 32.0D0 2332.3603515625D0 0.0044513666070997715D0 5.859841346740723D0)) (list (list 32.0D0 2331.19873046875D0 0.004098111297935247D0 5.872335433959961D0)) (list (list 32.0D0 2333.23095703125D0 0.0034821010194718838D0 5.884829998016357D0)) (list (list 32.0D0 2337.05615234375D0 0.0030306698754429818D0 5.897324085235596D0)) (list (list 32.0D0 2337.5048828125D0 0.0027745619881898165D0 5.909818649291992D0)) (list (list 32.0D0 2335.417724609375D0 0.0027062741573899985D0 5.9223127365112305D0)) (list (list 32.0D0 2333.841796875D0 0.00273396959528327D0 5.934807300567627D0)) (list (list 32.0D0 2335.120361328125D0 0.002491457387804985D0 5.947301387786865D0)) (list (list 32.0D0 2337.651123046875D0 0.002146483166143298D0 5.959795951843262D0)) (list (list 32.0D0 2338.556396484375D0 0.002015859354287386D0 5.9722900390625D0)) (list (list 32.0D0 2337.45263671875D0 0.002234061248600483D0 5.9847846031188965D0)) (list (list 32.0D0 2335.149658203125D0 0.0026386308018118143D0 5.997278690338135D0)) (list (list 32.0D0 2331.6513671875D0 0.0029044069815427065D0 6.009773254394531D0)) (list (list 32.0D0 2329.743896484375D0 0.0030999945010989905D0 6.0222673416137695D0)) (list (list 32.0D0 2329.43603515625D0 0.003206241177394986D0 6.034761905670166D0)) (list (list 32.0D0 2329.69384765625D0 0.003128731157630682D0 6.0472564697265625D0)) (list (list 32.0D0 2331.248291015625D0 0.002862469991669059D0 6.059750556945801D0)) (list (list 32.0D0 2334.149658203125D0 0.002861537504941225D0 6.072245121002197D0)) (list (list 32.0D0 2335.087890625D0 0.0032960178796201945D0 6.0847392082214356D0)) (list (list 32.0D0 2332.841796875D0 0.003819548524916172D0 6.097233772277832D0)) (list (list 32.0D0 2331.7978515625D0 0.00430180411785841D0 6.10972785949707D0)) (list (list 32.0D0 2332.235595703125D0 0.004331161733716726D0 6.122222423553467D0)) (list (list 32.0D0 2333.2607421875D0 0.003789544804021716D0 6.134716510772705D0)) (list (list 32.0D0 2334.2666015625D0 0.002954778727144003D0 6.147211074829102D0)) (list (list 32.0D0 2335.8740234375D0 0.0023557567037642D0 6.15970516204834D0)) (list (list 32.0D0 2337.500244140625D0 0.0021553386468440295D0 6.172199726104736D0)) (list (list 32.0D0 2335.887939453125D0 0.002020855899900198D0 6.184693813323975D0)) (list (list 32.0D0 2331.840576171875D0 0.0019266856834292412D0 6.197188377380371D0)) (list (list 32.0D0 2328.615234375D0 0.0018500311998650432D0 6.209682464599609D0)) (list (list 32.0D0 2327.681884765625D0 0.0017051368486136198D0 6.222177028656006D0)) (list (list 32.0D0 2328.01171875D0 0.0016541685909032822D0 6.234671115875244D0)) (list (list 32.0D0 2329.018310546875D0 0.0017629743088036776D0 6.247165679931641D0)) (list (list 32.0D0 2329.252685546875D0 0.0019467442762106657D0 6.259659767150879D0)) (list (list 32.0D0 2329.4111328125D0 0.002068017842248082D0 6.272154331207275D0)) (list (list 32.0D0 2330.26171875D0 0.0020857159979641438D0 6.284648418426514D0)) (list (list 32.0D0 2330.92041015625D0 0.002130493987351656D0 6.29714298248291D0)) (list (list 32.0D0 2331.4462890625D0 0.0022839957382529974D0 6.309637069702148D0)) (list (list 32.0D0 2331.970947265625D0 0.002461299765855074D0 6.322131633758545D0)) (list (list 32.0D0 2332.495849609375D0 0.002475104760378599D0 6.334625720977783D0)) (list (list 32.0D0 2333.62890625D0 0.002233083825558424D0 6.34712028503418D0)) (list (list 32.0D0 2336.759765625D0 0.001916072447784245D0 6.359614372253418D0)) (list (list 32.0D0 2338.6181640625D0 0.0019733428489416838D0 6.3721089363098145D0)) (list (list 32.0D0 2338.8984375D0 0.002401731675490737D0 6.384603023529053D0)) (list (list 32.0D0 2335.835205078125D0 0.0027451745700091124D0 6.397097587585449D0)) (list (list 32.0D0 2333.368408203125D0 0.0028577898629009724D0 6.4095916748046875D0)) (list (list 32.0D0 2332.846923828125D0 0.0028613947797566653D0 6.422086238861084D0)) (list (list 32.0D0 2334.451171875D0 0.0027721107471734286D0 6.434580326080322D0)) (list (list 32.0D0 2338.886962890625D0 0.0025286839809268713D0 6.447074890136719D0)) (list (list 32.0D0 2345.651123046875D0 0.002022605389356613D0 6.459568977355957D0)) (list (list 32.0D0 2353.113037109375D0 0.002092982642352581D0 6.4720635414123535D0)) (list (list 32.0D0 2351.3564453125D0 0.0017925712745636702D0 6.484557628631592D0)) (list (list 32.0D0 2364.076171875D0 0.0011224583722651005D0 6.497052192687988D0)) (list (list 32.0D0 2367.208251953125D0 0.0010988169815391303D0 6.509546279907227D0)) (list (list 32.0D0 2367.35498046875D0 0.0014522268902510405D0 6.522040843963623D0)) (list (list 32.0D0 2367.2333984375D0 0.00209836196154356D0 6.534534931182861D0)) (list (list 32.0D0 2366.785888671875D0 0.002688201144337654D0 6.547029495239258D0)) (list (list 32.0D0 2366.415771484375D0 0.0029553635977208615D0 6.559523582458496D0)) (list (list 32.0D0 2366.309326171875D0 0.0030709707643836737D0 6.572018146514893D0)) (list (list 32.0D0 2365.86474609375D0 0.0031914825085550547D0 6.584512233734131D0)) (list (list 32.0D0 2365.77490234375D0 0.0030817603692412377D0 6.597006797790527D0)) (list (list 32.0D0 2367.904052734375D0 0.0024666953831911087D0 6.609501361846924D0)) (list (list 32.0D0 2372.961669921875D0 0.0017419523792341352D0 6.621995449066162D0)) (list (list 32.0D0 2374.92822265625D0 0.0013028831453993917D0 6.634490013122559D0)) (list (list 32.0D0 2373.377685546875D0 0.0010297363623976708D0 6.646984100341797D0)) (list (list 32.0D0 2348.19384765625D0 9.038416319526732D-4 6.659478664398193D0)) (list (list 32.0D0 2344.537109375D0 7.183123379945755D-4 6.671972751617432D0)) (list (list 32.0D0 2337.49609375D0 5.600270233117044D-4 6.684467315673828D0)) (list (list 32.0D0 2331.527099609375D0 4.367278015706688D-4 6.696961402893066D0)) (list (list 32.0D0 2325.8837890625D0 3.341370029374957D-4 6.709455966949463D0)) (list (list 32.0D0 2323.697509765625D0 2.6480629458092153D-4 6.721950054168701D0)) (list (list 32.0D0 2325.329833984375D0 2.3344586952589452D-4 6.734444618225098D0)) (list (list 32.0D0 2328.690673828125D0 2.652058028616011D-4 6.746938705444336D0)) (list (list 32.0D0 2330.243896484375D0 3.161839849781245D-4 6.759433269500732D0)) (list (list 32.0D0 2330.21875D0 3.273596812505275D-4 6.771927356719971D0)) (list (list 32.0D0 2329.548828125D0 2.8283349820412696D-4 6.784421920776367D0)) (list (list 32.0D0 2327.7392578125D0 2.0570069318637252D-4 6.7969160079956055D0)) (list (list 32.0D0 2324.9609375D0 1.4140969142317772D-4 6.809410572052002D0)) (list (list 32.0D0 2323.72314453125D0 1.0457121970830485D-4 6.82190465927124D0)) (list (list 32.0D0 2324.37060546875D0 9.0409281256143D-5 6.834399223327637D0)) (list (list 32.0D0 2325.565185546875D0 9.30720052565448D-5 6.846893310546875D0)) (list (list 32.0D0 2328.226318359375D0 9.775620856089518D-5 6.8593878746032715D0)) (list (list 32.0D0 2331.224609375D0 9.431129728909582D-5 6.87188196182251D0)) (list (list 32.0D0 2330.968017578125D0 7.655462104594335D-5 6.884376525878906D0)) (list (list 32.0D0 2331.211181640625D0 5.5029137001838535D-5 6.8968706130981445D0)) (list (list 32.0D0 2337.0107421875D0 4.025282396469265D-5 6.909365177154541D0)) (list (list 32.0D0 2336.938232421875D0 3.646146069513634D-5 6.921859264373779D0)) (list (list 32.0D0 2333.990478515625D0 4.4349471863824874D-5 6.934353828430176D0)) (list (list 32.0D0 2330.281005859375D0 5.8858982811216265D-5 6.946847915649414D0)) (list (list 32.0D0 2329.608642578125D0 6.240392394829542D-5 6.9593424797058106D0)) (list (list 32.0D0 2330.132568359375D0 5.353660526452586D-5 6.971836566925049D0)) (list (list 32.0D0 2332.55126953125D0 3.991044286522083D-5 6.984331130981445D0)) (list (list 32.0D0 2332.55126953125D0 0.0D0 6.996825218200684D0)) (list (list 33.0D0 6997.91748046875D0 0.001150259398855269D0 1.1744670867919922D0)) (list (list 33.0D0 6995.517578125D0 0.0016166825080290437D0 1.1869614124298096D0)) (list (list 33.0D0 6994.36572265625D0 0.00196132343262434D0 1.199455738067627D0)) (list (list 33.0D0 6993.14404296875D0 0.002129180356860161D0 1.2119500637054444D0)) (list (list 33.0D0 6991.68310546875D0 0.0021523204632103443D0 1.2244443893432618D0)) (list (list 33.0D0 6990.73046875D0 0.002109398366883397D0 1.236938714981079D0)) (list (list 33.0D0 6990.88134765625D0 0.0020061328541487456D0 1.249433159828186D0)) (list (list 33.0D0 6991.755859375D0 0.0018103348556905985D0 1.2619274854660035D0)) (list (list 33.0D0 6992.8291015625D0 0.0014885544078424573D0 1.2744218111038208D0)) (list (list 33.0D0 6993.49658203125D0 0.0010647752787917853D0 1.2869161367416382D0)) (list (list 33.0D0 6990.3173828125D0 6.900791195221245D-4 1.2994104623794556D0)) (list (list 33.0D0 6988.8671875D0 6.364533328451216D-4 1.311904788017273D0)) (list (list 33.0D0 7011.19091796875D0 8.873209590092301D-4 1.3243991136550904D0)) (list (list 33.0D0 6999.28662109375D0 0.0010080024367198348D0 1.3368934392929078D0)) (list (list 33.0D0 6995.69580078125D0 9.168082033284009D-4 1.349387764930725D0)) (list (list 33.0D0 6994.99853515625D0 8.76676058396697D-4 1.3618820905685425D0)) (list (list 33.0D0 6996.318359375D0 0.0011603700695559383D0 1.3743764162063599D0)) (list (list 33.0D0 6997.56884765625D0 0.0017395587638020516D0 1.3868707418441773D0)) (list (list 33.0D0 6996.69140625D0 0.002351963659748435D0 1.3993650674819947D0)) (list (list 33.0D0 6995.2470703125D0 0.0028435790445655585D0 1.411859393119812D0)) (list (list 33.0D0 6994.06298828125D0 0.003137871390208602D0 1.4243537187576294D0)) (list (list 33.0D0 6993.30029296875D0 0.003236507996916771D0 1.4368480443954468D0)) (list (list 33.0D0 6992.96630859375D0 0.0031962133944034577D0 1.4493423700332642D0)) (list (list 33.0D0 6993.1650390625D0 0.002949000336229801D0 1.4618366956710816D0)) (list (list 33.0D0 6993.46630859375D0 0.0023897825740277768D0 1.474331021308899D0)) (list (list 33.0D0 6992.69189453125D0 0.0016513646114617587D0 1.4868253469467163D0)) (list (list 33.0D0 6991.99267578125D0 0.0010821082396432758D0 1.4993196725845337D0)) (list (list 33.0D0 6992.77880859375D0 8.146839682012796D-4 1.5118141174316407D0)) (list (list 33.0D0 6994.68701171875D0 7.230764604173601D-4 1.524308443069458D0)) (list (list 33.0D0 6995.4833984375D0 6.356182275339961D-4 1.5368027687072754D0)) (list (list 33.0D0 6996.6572265625D0 5.216205609031022D-4 1.5492970943450928D0)) (list (list 33.0D0 6995.99267578125D0 3.9284644299186766D-4 1.5617914199829102D0)) (list (list 33.0D0 6992.97265625D0 3.14274278935045D-4 1.5742857456207276D0)) (list (list 33.0D0 6992.26171875D0 3.4991741995327175D-4 1.586780071258545D0)) (list (list 33.0D0 6993.55419921875D0 4.5638729352504015D-4 1.5992743968963623D0)) (list (list 33.0D0 6992.9775390625D0 5.489253089763224D-4 1.6117687225341797D0)) (list (list 33.0D0 6991.72705078125D0 6.104601197876036D-4 1.624263048171997D0)) (list (list 33.0D0 6992.2783203125D0 6.884712493047118D-4 1.6367573738098145D0)) (list (list 33.0D0 6994.41650390625D0 8.124672458507121D-4 1.6492516994476319D0)) (list (list 33.0D0 6995.921875D0 9.282971732318401D-4 1.6617460250854493D0)) (list (list 33.0D0 6995.28369140625D0 9.372758795507252D-4 1.6742403507232666D0)) (list (list 33.0D0 6993.68310546875D0 8.698388119228184D-4 1.686734676361084D0)) (list (list 33.0D0 6992.3466796875D0 7.973468746058643D-4 1.6992290019989014D0)) (list (list 33.0D0 6991.71875D0 7.45249621104449D-4 1.7117233276367188D0)) (list (list 33.0D0 6991.6171875D0 7.151494501158595D-4 1.7242176532745362D0)) (list (list 33.0D0 6991.537109375D0 6.904544425196946D-4 1.7367119789123536D0)) (list (list 33.0D0 6991.87158203125D0 6.3550058985129D-4 1.749206304550171D0)) (list (list 33.0D0 6993.5263671875D0 5.272805574350059D-4 1.7617006301879883D0)) (list (list 33.0D0 6996.95556640625D0 3.9957265835255385D-4 1.7741949558258057D0)) (list (list 33.0D0 7000.4384765625D0 2.85351270576939D-4 1.7866894006729126D0)) (list (list 33.0D0 7004.052734375D0 1.66186029673554D-4 1.79918372631073D0)) (list (list 33.0D0 7007.92626953125D0 1.1644858750514686D-4 1.8116780519485474D0)) (list (list 33.0D0 6987.681640625D0 1.6062625218182802D-4 1.8241723775863648D0)) (list (list 33.0D0 6994.6962890625D0 2.2595682821702212D-4 1.8366667032241822D0)) (list (list 33.0D0 6994.890625D0 2.583232126198709D-4 1.8491610288619996D0)) (list (list 33.0D0 6993.6220703125D0 2.6506080757826567D-4 1.861655354499817D0)) (list (list 33.0D0 6992.6220703125D0 3.35012300638482D-4 1.8741496801376343D0)) (list (list 33.0D0 6992.41796875D0 5.01614180393517D-4 1.8866440057754517D0)) (list (list 33.0D0 6992.45947265625D0 6.894425023347139D-4 1.899138331413269D0)) (list (list 33.0D0 6992.375D0 7.801015162840486D-4 1.9116326570510865D0)) (list (list 33.0D0 6993.21435546875D0 7.155577186495066D-4 1.9241269826889038D0)) (list (list 33.0D0 6998.09033203125D0 5.589107749983668D-4 1.9366213083267212D0)) (list (list 33.0D0 7004.41259765625D0 5.023636622354388D-4 1.9491156339645386D0)) (list (list 33.0D0 7010.4794921875D0 6.018378771841526D-4 1.961609959602356D0)) (list (list 33.0D0 7011.85205078125D0 7.956685731187463D-4 1.9741042852401734D0)) (list (list 33.0D0 7008.84765625D0 9.361873962916434D-4 1.9865986108779908D0)) (list (list 33.0D0 6999.21875D0 0.0010837442241609097D0 1.999092936515808D0)) (list (list 33.0D0 6996.0703125D0 0.0012867602054029704D0 2.011587381362915D0)) (list (list 33.0D0 6995.32080078125D0 0.001446508220396936D0 2.0240817070007324D0)) (list (list 33.0D0 6995.82080078125D0 0.0015953585971146822D0 2.03657603263855D0)) (list (list 33.0D0 6996.72119140625D0 0.0016713192453607917D0 2.049070358276367D0)) (list (list 33.0D0 6997.99072265625D0 0.0015719596995040775D0 2.0615646839141846D0)) (list (list 33.0D0 7002.2783203125D0 0.0013115303590893746D0 2.074059009552002D0)) (list (list 33.0D0 7006.67626953125D0 0.0011368035338819027D0 2.0865533351898194D0)) (list (list 33.0D0 7008.51025390625D0 9.437353000976145D-4 2.0990476608276367D0)) (list (list 33.0D0 7019.04638671875D0 6.651096045970917D-4 2.111541986465454D0)) (list (list 33.0D0 7017.38671875D0 5.097744287922978D-4 2.1240363121032715D0)) (list (list 33.0D0 6992.1171875D0 0.001837311778217554D0 2.136530637741089D0)) (list (list 33.0D0 6991.21826171875D0 0.002832072088494897D0 2.1490249633789063D0)) (list (list 33.0D0 6992.16455078125D0 0.0036351869348436594D0 2.1615192890167237D0)) (list (list 33.0D0 6993.74169921875D0 0.004047882743179798D0 2.174013614654541D0)) (list (list 33.0D0 6996.41650390625D0 0.004081378225237131D0 2.1865079402923584D0)) (list (list 33.0D0 6999.05322265625D0 0.003980790730565786D0 2.199002265930176D0)) (list (list 33.0D0 6999.6787109375D0 0.003992552403360605D0 2.211496591567993D0)) (list (list 33.0D0 6998.3564453125D0 0.004289943724870682D0 2.2239909172058106D0)) (list (list 33.0D0 6996.17138671875D0 0.004824064206331968D0 2.236485242843628D0)) (list (list 33.0D0 6994.99853515625D0 0.005187029950320721D0 2.2489795684814453D0)) (list (list 33.0D0 6994.91845703125D0 0.005178259685635567D0 2.2614738941192627D0)) (list (list 33.0D0 6994.8408203125D0 0.005016371142119169D0 2.27396821975708D0)) (list (list 33.0D0 6993.73046875D0 0.004941650666296482D0 2.2864625453948975D0)) (list (list 33.0D0 6992.1103515625D0 0.005027384031563997D0 2.298956871032715D0)) (list (list 33.0D0 6991.90087890625D0 0.004982830956578255D0 2.3114511966705323D0)) (list (list 33.0D0 6993.6005859375D0 0.004652589559555054D0 2.3239455223083496D0)) (list (list 33.0D0 6995.83154296875D0 0.004347860347479582D0 2.336439847946167D0)) (list (list 33.0D0 6996.98388671875D0 0.004303820431232452D0 2.3489341735839844D0)) (list (list 33.0D0 6997.0439453125D0 0.0044930740259587765D0 2.3614284992218018D0)) (list (list 33.0D0 6996.60498046875D0 0.00463860435411334D0 2.373922824859619D0)) (list (list 33.0D0 6996.33935546875D0 0.004496827721595764D0 2.3864171504974366D0)) (list (list 33.0D0 6996.404296875D0 0.00411036005243659D0 2.398911476135254D0)) (list (list 33.0D0 6996.95166015625D0 0.0036782987881451846D0 2.4114058017730713D0)) (list (list 33.0D0 6997.32421875D0 0.003374614054337144D0 2.4239001274108887D0)) (list (list 33.0D0 6996.126953125D0 0.003211632836610079D0 2.436394453048706D0)) (list (list 33.0D0 6993.2978515625D0 0.003138601081445813D0 2.4488887786865235D0)) (list (list 33.0D0 6990.85400390625D0 0.0028327929321676493D0 2.461383104324341D0)) (list (list 33.0D0 6989.6376953125D0 0.002003929577767849D0 2.4738776683807373D0)) (list (list 33.0D0 6989.900390625D0 0.0010259102564305067D0 2.4863719940185547D0)) (list (list 33.0D0 6975.7578125D0 5.00540598295629D-4 2.498866319656372D0)) (list (list 33.0D0 6978.8115234375D0 6.151869310997427D-4 2.5113606452941895D0)) (list (list 33.0D0 6993.44775390625D0 0.0015656687319278717D0 2.523854970932007D0)) (list (list 33.0D0 6990.65380859375D0 0.0022782322484999895D0 2.536349296569824D0)) (list (list 33.0D0 6990.1123046875D0 0.002528236946091056D0 2.5488436222076416D0)) (list (list 33.0D0 6990.466796875D0 0.002264162991195917D0 2.561337947845459D0)) (list (list 33.0D0 6991.6806640625D0 0.0017038945807144046D0 2.5738322734832764D0)) (list (list 33.0D0 6994.98046875D0 0.001151522621512413D0 2.5863265991210938D0)) (list (list 33.0D0 6997.2353515625D0 9.516444988548756D-4 2.598820924758911D0)) (list (list 33.0D0 6996.439453125D0 0.0010805845959112049D0 2.6113152503967285D0)) (list (list 33.0D0 6992.3310546875D0 0.0013002704363316298D0 2.623809576034546D0)) (list (list 33.0D0 6986.1435546875D0 0.0012682491214945913D0 2.6363039016723633D0)) (list (list 33.0D0 6981.2451171875D0 0.0010344506008550525D0 2.6487982273101807D0)) (list (list 33.0D0 6980.458984375D0 7.500798674300313D-4 2.661292552947998D0)) (list (list 33.0D0 6987.0810546875D0 5.080872215330601D-4 2.6737868785858155D0)) (list (list 33.0D0 6994.41015625D0 6.230850704014301D-4 2.686281204223633D0)) (list (list 33.0D0 6994.025390625D0 7.554278126917779D-4 2.69877552986145D0)) (list (list 33.0D0 6993.23193359375D0 8.804393582977355D-4 2.7112698554992676D0)) (list (list 33.0D0 6996.31689453125D0 9.197231265716255D-4 2.723764181137085D0)) (list (list 33.0D0 6998.96337890625D0 9.874501265585423D-4 2.7362585067749024D0)) (list (list 33.0D0 6999.31298828125D0 0.0010467319516465068D0 2.7487528324127198D0)) (list (list 33.0D0 6997.6396484375D0 9.780141990631819D-4 2.761247158050537D0)) (list (list 33.0D0 6997.78125D0 7.456333260051906D-4 2.7737414836883545D0)) (list (list 33.0D0 6998.91650390625D0 5.392850143834949D-4 2.786235809326172D0)) (list (list 33.0D0 6998.66015625D0 6.004559108987451D-4 2.7987301349639893D0)) (list (list 33.0D0 6998.86865234375D0 9.879445424303413D-4 2.8112244606018067D0)) (list (list 33.0D0 7000.044921875D0 0.0015861057909205556D0 2.823718786239624D0)) (list (list 33.0D0 7000.25341796875D0 0.0022089413832873106D0 2.8362131118774414D0)) (list (list 33.0D0 6999.55078125D0 0.0026866858825087548D0 2.848707437515259D0)) (list (list 33.0D0 6998.1669921875D0 0.002970623318105936D0 2.861201763153076D0)) (list (list 33.0D0 6996.28857421875D0 0.00314932013861835D0 2.8736960887908936D0)) (list (list 33.0D0 6994.6943359375D0 0.0033633150160312653D0 2.886190414428711D0)) (list (list 33.0D0 6994.20263671875D0 0.003637248184531927D0 2.8986847400665283D0)) (list (list 33.0D0 6994.51904296875D0 0.0039732614532113075D0 2.9111790657043457D0)) (list (list 33.0D0 6994.9677734375D0 0.0043638925999403D0 2.923673391342163D0)) (list (list 33.0D0 6995.248046875D0 0.00473002577200532D0 2.9361677169799805D0)) (list (list 33.0D0 6995.24462890625D0 0.004959363490343094D0 2.948662042617798D0)) (list (list 33.0D0 6994.7763671875D0 0.004960223101079464D0 2.9611563682556153D0)) (list (list 33.0D0 6993.71826171875D0 0.004655992612242699D0 2.9736506938934326D0)) (list (list 33.0D0 6992.599609375D0 0.004052694421261549D0 2.98614501953125D0)) (list (list 33.0D0 6992.8779296875D0 0.003359003458172083D0 2.9986393451690674D0)) (list (list 33.0D0 6993.7705078125D0 0.002995274495333433D0 3.0111336708068848D0)) (list (list 33.0D0 6993.88671875D0 0.0029236560221761465D0 3.0236282348632813D0)) (list (list 33.0D0 6992.26611328125D0 0.0026150585617870093D0 3.0361225605010987D0)) (list (list 33.0D0 6987.09814453125D0 0.0019153638277202845D0 3.048616886138916D0)) (list (list 33.0D0 7005.37939453125D0 9.737618383951485D-4 3.0611112117767334D0)) (list (list 33.0D0 7027.00830078125D0 5.387928686104715D-4 3.073605537414551D0)) (list (list 33.0D0 6991.296875D0 0.002274176338687539D0 3.086099863052368D0)) (list (list 33.0D0 6992.6064453125D0 0.002784403972327709D0 3.0985941886901856D0)) (list (list 33.0D0 6993.38037109375D0 0.00270191952586174D0 3.111088514328003D0)) (list (list 33.0D0 6995.005859375D0 0.002176828682422638D0 3.1235828399658203D0)) (list (list 33.0D0 6995.33251953125D0 0.0015856989193707705D0 3.1360771656036377D0)) (list (list 33.0D0 6992.80029296875D0 0.0012159142643213273D0 3.148571491241455D0)) (list (list 33.0D0 6991.1064453125D0 0.0011960477568209172D0 3.1610658168792725D0)) (list (list 33.0D0 6994.00732421875D0 0.0014565633609890938D0 3.17356014251709D0)) (list (list 33.0D0 6996.6474609375D0 0.002133759669959545D0 3.1860544681549073D0)) (list (list 33.0D0 6998.75439453125D0 0.0027910475619137287D0 3.1985487937927246D0)) (list (list 33.0D0 7001.43115234375D0 0.0030031572096049786D0 3.211043119430542D0)) (list (list 33.0D0 7002.75439453125D0 0.0028321121353656054D0 3.2235374450683594D0)) (list (list 33.0D0 7000.701171875D0 0.0024319891817867756D0 3.2360317707061768D0)) (list (list 33.0D0 6993.85302734375D0 0.0022582141682505608D0 3.248526096343994D0)) (list (list 33.0D0 6985.57421875D0 0.002259537111967802D0 3.2610204219818116D0)) (list (list 33.0D0 6979.47216796875D0 0.002174194436520338D0 3.273514747619629D0)) (list (list 33.0D0 6976.6708984375D0 0.0019136052578687668D0 3.2860090732574463D0)) (list (list 33.0D0 7003.20849609375D0 0.0012678938219323755D0 3.2985033988952637D0)) (list (list 33.0D0 6977.712890625D0 5.802014493383467D-4 3.310997724533081D0)) (list (list 33.0D0 6979.45947265625D0 4.3118064058944583D-4 3.3234920501708985D0)) (list (list 33.0D0 6963.87451171875D0 2.718017785809934D-4 3.335986375808716D0)) (list (list 33.0D0 6965.90869140625D0 3.185583627782762D-4 3.348480701446533D0)) (list (list 33.0D0 6993.74951171875D0 0.003944162745028734D0 3.3609750270843506D0)) (list (list 33.0D0 6989.89111328125D0 0.0044531249441206455D0 3.373469352722168D0)) (list (list 33.0D0 6989.25048828125D0 0.004882719833403826D0 3.3859636783599854D0)) (list (list 33.0D0 6991.69873046875D0 0.004957232624292374D0 3.3984580039978028D0)) (list (list 33.0D0 6994.18212890625D0 0.004930554423481226D0 3.41095232963562D0)) (list (list 33.0D0 6995.04443359375D0 0.004744804464280605D0 3.4234466552734375D0)) (list (list 33.0D0 6995.07666015625D0 0.004559346474707127D0 3.435940980911255D0)) (list (list 33.0D0 6994.6884765625D0 0.004397132433950901D0 3.4484353065490723D0)) (list (list 33.0D0 6993.9248046875D0 0.004110743757337332D0 3.4609296321868897D0)) (list (list 33.0D0 6993.4560546875D0 0.0036358132492750883D0 3.473423957824707D0)) (list (list 33.0D0 6993.8271484375D0 0.0030956268310546875D0 3.4859182834625244D0)) (list (list 33.0D0 6994.380859375D0 0.002717025112360716D0 3.498412609100342D0)) (list (list 33.0D0 6995.28271484375D0 0.0024929651990532875D0 3.510906934738159D0)) (list (list 33.0D0 6998.4892578125D0 0.002337576122954488D0 3.5234012603759766D0)) (list (list 33.0D0 7000.2109375D0 0.0024064795579761267D0 3.535895586013794D0)) (list (list 33.0D0 6997.77392578125D0 0.002565470291301608D0 3.5483899116516114D0)) (list (list 33.0D0 6990.93408203125D0 0.003092060796916485D0 3.5608842372894287D0)) (list (list 33.0D0 6988.24072265625D0 0.0036331932060420513D0 3.573378801345825D0)) (list (list 33.0D0 6987.82958984375D0 0.003750308882445097D0 3.5858731269836426D0)) (list (list 33.0D0 6988.201171875D0 0.0036275554448366165D0 3.59836745262146D0)) (list (list 33.0D0 6988.66162109375D0 0.003304336918517947D0 3.6108617782592774D0)) (list (list 33.0D0 6989.04443359375D0 0.002730331849306822D0 3.6233561038970948D0)) (list (list 33.0D0 6990.23291015625D0 0.001977695384994149D0 3.635850429534912D0)) (list (list 33.0D0 6993.29296875D0 0.0013160135131329298D0 3.6483447551727295D0)) (list (list 33.0D0 6995.28857421875D0 9.69009823165834D-4 3.660839080810547D0)) (list (list 33.0D0 6994.68310546875D0 8.769530104473233D-4 3.6733334064483643D0)) (list (list 33.0D0 6992.9599609375D0 9.342316188849509D-4 3.6858277320861817D0)) (list (list 33.0D0 6992.29638671875D0 9.833518415689469D-4 3.698322057723999D0)) (list (list 33.0D0 6992.4052734375D0 9.443694143556058D-4 3.7108163833618164D0)) (list (list 33.0D0 6992.85498046875D0 8.037378429435194D-4 3.723310708999634D0)) (list (list 33.0D0 6993.0732421875D0 5.786817637272179D-4 3.735805034637451D0)) (list (list 33.0D0 6990.92236328125D0 3.401894064154476D-4 3.7482993602752686D0)) (list (list 33.0D0 6989.61083984375D0 2.0600634161382914D-4 3.760793685913086D0)) (list (list 33.0D0 6991.580078125D0 2.294830046594143D-4 3.7732880115509033D0)) (list (list 33.0D0 6996.2802734375D0 4.2164186015725136D-4 3.7857823371887207D0)) (list (list 33.0D0 6998.22802734375D0 7.080574869178236D-4 3.798276662826538D0)) (list (list 33.0D0 7000.08544921875D0 0.0010411039693281055D0 3.8107709884643555D0)) (list (list 33.0D0 7000.21484375D0 0.0013117725029587746D0 3.823265314102173D0)) (list (list 33.0D0 6998.57177734375D0 0.0014558292459696532D0 3.8357596397399903D0)) (list (list 33.0D0 6997.57373046875D0 0.001595286768861115D0 3.8482539653778076D0)) (list (list 33.0D0 6997.2216796875D0 0.0017966391751542688D0 3.860748291015625D0)) (list (list 33.0D0 6995.88427734375D0 0.001989340875297785D0 3.8732426166534424D0)) (list (list 33.0D0 6993.80810546875D0 0.002100712154060602D0 3.8857369422912598D0)) (list (list 33.0D0 6993.14697265625D0 0.0021013282239437104D0 3.898231267929077D0)) (list (list 33.0D0 6994.31884765625D0 0.0019703926518559456D0 3.9107255935668946D0)) (list (list 33.0D0 6996.45703125D0 0.0017525797011330724D0 3.923219919204712D0)) (list (list 33.0D0 6997.373046875D0 0.0014764072839170695D0 3.9357142448425293D0)) (list (list 33.0D0 6996.85546875D0 0.0012868877965956927D0 3.9482085704803467D0)) (list (list 33.0D0 6996.36572265625D0 0.0013796973507851363D0 3.960702896118164D0)) (list (list 33.0D0 6996.6123046875D0 0.001764375832863152D0 3.9731972217559815D0)) (list (list 33.0D0 6996.513671875D0 0.0022457572631537915D0 3.985691547393799D0)) (list (list 33.0D0 6994.9931640625D0 0.002564892638474703D0 3.998185873031616D0)) (list (list 33.0D0 6993.02685546875D0 0.002741317031905055D0 4.010680198669434D0)) (list (list 33.0D0 6991.9404296875D0 0.002969748340547085D0 4.02317476272583D0)) (list (list 33.0D0 6991.6962890625D0 0.003378872759640217D0 4.035668849945068D0)) (list (list 33.0D0 6991.37744140625D0 0.003921313211321831D0 4.048163414001465D0)) (list (list 33.0D0 6990.3525390625D0 0.004398066084831953D0 4.060657501220703D0)) (list (list 33.0D0 6989.44873046875D0 0.004635590594261885D0 4.0731520652771D0)) (list (list 33.0D0 6990.49755859375D0 0.0044435434974730015D0 4.085646152496338D0)) (list (list 33.0D0 6994.1513671875D0 0.0041081723757088185D0 4.098140716552734D0)) (list (list 33.0D0 6997.29638671875D0 0.004085557069629431D0 4.110634803771973D0)) (list (list 33.0D0 6998.345703125D0 0.004143239930272102D0 4.123129367828369D0)) (list (list 33.0D0 6997.59326171875D0 0.004068341106176376D0 4.135623455047607D0)) (list (list 33.0D0 6995.5908203125D0 0.0037362496368587017D0 4.148118019104004D0)) (list (list 33.0D0 6993.79736328125D0 0.0030629239045083523D0 4.160612106323242D0)) (list (list 33.0D0 6997.029296875D0 0.0021165276411920786D0 4.173106670379639D0)) (list (list 33.0D0 6977.91064453125D0 0.001170071423985064D0 4.185600757598877D0)) (list (list 33.0D0 6958.07080078125D0 2.094140654662624D-4 4.198095321655273D0)) (list (list 33.0D0 6958.07080078125D0 0.0D0 4.210589408874512D0)) (list (list 34.0D0 6058.33203125D0 0.0018233365844935179D0 1.311904788017273D0)) (list (list 34.0D0 6041.30859375D0 0.0014960833359509707D0 1.349387764930725D0)) (list (list 34.0D0 6063.23828125D0 0.002217943547293544D0 1.3618820905685425D0)) (list (list 34.0D0 6064.1689453125D0 0.0031572910957038403D0 1.3743764162063599D0)) (list (list 34.0D0 6064.39599609375D0 0.004968042951077223D0 1.3868707418441773D0)) (list (list 34.0D0 6063.513671875D0 0.0071505652740597725D0 1.3993650674819947D0)) (list (list 34.0D0 6062.35888671875D0 0.009234512224793435D0 1.411859393119812D0)) (list (list 34.0D0 6061.5810546875D0 0.010672451928257943D0 1.4243537187576294D0)) (list (list 34.0D0 6061.5810546875D0 0.0D0 1.4368480443954468D0)) (list (list 35.0D0 5130.9443359375D0 0.0018706850241869688D0 1.4243537187576294D0)) (list (list 35.0D0 5130.453125D0 0.0019509725971147418D0 1.4368480443954468D0)) (list (list 35.0D0 5129.560546875D0 0.0018682304071262479D0 1.4493423700332642D0)) (list (list 35.0D0 5129.63525390625D0 0.001669486053287983D0 1.4618366956710816D0)) (list (list 35.0D0 5131.7529296875D0 0.0013749456265941263D0 1.474331021308899D0)) (list (list 35.0D0 5133.443359375D0 0.0010353648103773594D0 1.4868253469467163D0)) (list (list 35.0D0 5129.716796875D0 6.825603195466101D-4 1.4993196725845337D0)) (list (list 35.0D0 5125.833984375D0 5.230866372585297D-4 1.5118141174316407D0)) (list (list 35.0D0 5127.21337890625D0 4.4045469257980585D-4 1.524308443069458D0)) (list (list 35.0D0 5130.017578125D0 4.4175240327604115D-4 1.5368027687072754D0)) (list (list 35.0D0 5130.666015625D0 4.701557627413422D-4 1.5492970943450928D0)) (list (list 35.0D0 5129.232421875D0 4.6290745376609266D-4 1.5617914199829102D0)) (list (list 35.0D0 5124.7470703125D0 4.392278497107327D-4 1.5742857456207276D0)) (list (list 35.0D0 5123.65185546875D0 4.7060404904186726D-4 1.586780071258545D0)) (list (list 35.0D0 5125.64501953125D0 5.582738667726517D-4 1.5992743968963623D0)) (list (list 35.0D0 5128.2216796875D0 6.568111712113023D-4 1.6117687225341797D0)) (list (list 35.0D0 5127.71142578125D0 6.356342346407473D-4 1.624263048171997D0)) (list (list 35.0D0 5126.34375D0 5.451033939607441D-4 1.6367573738098145D0)) (list (list 35.0D0 5126.4384765625D0 4.959016805514693D-4 1.6492516994476319D0)) (list (list 35.0D0 5128.9296875D0 4.7367752995342016D-4 1.6617460250854493D0)) (list (list 35.0D0 5141.32763671875D0 4.247472679708153D-4 1.6742403507232666D0)) (list (list 35.0D0 5147.4736328125D0 3.775705408770591D-4 1.686734676361084D0)) (list (list 35.0D0 5143.95068359375D0 2.5426328647881747D-4 1.6992290019989014D0)) (list (list 35.0D0 5128.33544921875D0 4.347973736003041D-4 1.7242176532745362D0)) (list (list 35.0D0 5128.880859375D0 4.768366052303463D-4 1.7367119789123536D0)) (list (list 35.0D0 5128.517578125D0 4.918996128253639D-4 1.749206304550171D0)) (list (list 35.0D0 5126.74365234375D0 4.7465451643802226D-4 1.7617006301879883D0)) (list (list 35.0D0 5122.88134765625D0 4.0752231143414974D-4 1.7741949558258057D0)) (list (list 35.0D0 5120.259765625D0 3.16388817736879D-4 1.7866894006729126D0)) (list (list 35.0D0 5153.6142578125D0 2.5075694429688156D-4 1.79918372631073D0)) (list (list 35.0D0 5135.8974609375D0 2.3433915339410305D-4 1.8116780519485474D0)) (list (list 35.0D0 5115.32861328125D0 2.2963117226026952D-4 1.8241723775863648D0)) (list (list 35.0D0 5130.8544921875D0 4.4039456406608224D-4 1.8366667032241822D0)) (list (list 35.0D0 5165.25634765625D0 7.164088892750442D-4 1.8491610288619996D0)) (list (list 35.0D0 5164.6474609375D0 7.331998203881085D-4 1.861655354499817D0)) (list (list 35.0D0 5163.72265625D0 7.501096115447581D-4 1.8741496801376343D0)) (list (list 35.0D0 5160.73486328125D0 6.955357384867966D-4 1.8866440057754517D0)) (list (list 35.0D0 5158.81982421875D0 4.99745539855212D-4 1.899138331413269D0)) (list (list 35.0D0 5163.17822265625D0 2.5580718647688627D-4 1.9116326570510865D0)) (list (list 35.0D0 5168.81005859375D0 1.78186091943644D-4 1.9241269826889038D0)) (list (list 35.0D0 5179.6796875D0 2.487515739630908D-4 1.9366213083267212D0)) (list (list 35.0D0 5178.74609375D0 2.789926074910909D-4 1.9491156339645386D0)) (list (list 35.0D0 5178.2275390625D0 2.9222245211713016D-4 1.961609959602356D0)) (list (list 35.0D0 5180.74267578125D0 2.804888936225325D-4 1.9741042852401734D0)) (list (list 35.0D0 5181.81201171875D0 2.560146967880428D-4 1.9865986108779908D0)) (list (list 35.0D0 5175.767578125D0 2.558690612204373D-4 1.999092936515808D0)) (list (list 35.0D0 5198.4365234375D0 1.563340483698994D-4 2.011587381362915D0)) (list (list 35.0D0 5163.48876953125D0 4.4916640035808087D-4 2.03657603263855D0)) (list (list 35.0D0 5160.72607421875D0 3.5809315158985555D-4 2.049070358276367D0)) (list (list 35.0D0 5165.22021484375D0 3.3174356212839484D-4 2.0615646839141846D0)) (list (list 35.0D0 5169.5859375D0 5.336465546861291D-4 2.074059009552002D0)) (list (list 35.0D0 5162.49609375D0 7.810250972397625D-4 2.0865533351898194D0)) (list (list 35.0D0 5151.38916015625D0 9.542700718156993D-4 2.1240363121032715D0)) (list (list 35.0D0 5128.32080078125D0 0.0023663793690502644D0 2.136530637741089D0)) (list (list 35.0D0 5126.11572265625D0 0.0037417043931782246D0 2.1490249633789063D0)) (list (list 35.0D0 5128.07568359375D0 0.004673732444643974D0 2.1615192890167237D0)) (list (list 35.0D0 5131.66015625D0 0.005189769435673952D0 2.174013614654541D0)) (list (list 35.0D0 5133.7109375D0 0.005744776222854853D0 2.1865079402923584D0)) (list (list 35.0D0 5132.609375D0 0.005923309829086065D0 2.199002265930176D0)) (list (list 35.0D0 5129.97119140625D0 0.0059738378040492535D0 2.211496591567993D0)) (list (list 35.0D0 5128.8984375D0 0.006139046512544155D0 2.2239909172058106D0)) (list (list 35.0D0 5128.814453125D0 0.006465306505560875D0 2.236485242843628D0)) (list (list 35.0D0 5128.93310546875D0 0.006633134558796883D0 2.2489795684814453D0)) (list (list 35.0D0 5129.07666015625D0 0.006273615173995495D0 2.2614738941192627D0)) (list (list 35.0D0 5128.8310546875D0 0.005768073257058859D0 2.27396821975708D0)) (list (list 35.0D0 5127.87744140625D0 0.005938835442066193D0 2.2864625453948975D0)) (list (list 35.0D0 5126.85986328125D0 0.006984014064073563D0 2.298956871032715D0)) (list (list 35.0D0 5127.22607421875D0 0.007994008250534535D0 2.3114511966705323D0)) (list (list 35.0D0 5128.89111328125D0 0.008185305632650853D0 2.3239455223083496D0)) (list (list 35.0D0 5130.2529296875D0 0.007744340691715479D0 2.336439847946167D0)) (list (list 35.0D0 5130.34716796875D0 0.00730464281514287D0 2.3489341735839844D0)) (list (list 35.0D0 5129.75830078125D0 0.007241999264806509D0 2.3614284992218018D0)) (list (list 35.0D0 5129.74365234375D0 0.007066328544169664D0 2.373922824859619D0)) (list (list 35.0D0 5130.99462890625D0 0.006237638648599386D0 2.3864171504974366D0)) (list (list 35.0D0 5131.9111328125D0 0.005150711629539728D0 2.398911476135254D0)) (list (list 35.0D0 5131.48388671875D0 0.004469134379178286D0 2.4114058017730713D0)) (list (list 35.0D0 5129.70068359375D0 0.004478237591683865D0 2.4239001274108887D0)) (list (list 35.0D0 5128.0048828125D0 0.005038418807089329D0 2.436394453048706D0)) (list (list 35.0D0 5126.701171875D0 0.00584192480891943D0 2.4488887786865235D0)) (list (list 35.0D0 5125.427734375D0 0.006442571058869362D0 2.461383104324341D0)) (list (list 35.0D0 5125.16943359375D0 0.006339996121823788D0 2.4738776683807373D0)) (list (list 35.0D0 5126.23583984375D0 0.005732284393161535D0 2.4863719940185547D0)) (list (list 35.0D0 5127.6064453125D0 0.005344432312995195D0 2.498866319656372D0)) (list (list 35.0D0 5128.2568359375D0 0.005335978232324123D0 2.5113606452941895D0)) (list (list 35.0D0 5127.36474609375D0 0.00534561974927783D0 2.523854970932007D0)) (list (list 35.0D0 5126.17431640625D0 0.005247801076620817D0 2.536349296569824D0)) (list (list 35.0D0 5126.14990234375D0 0.004983908962458372D0 2.5488436222076416D0)) (list (list 35.0D0 5127.58447265625D0 0.00455200532451272D0 2.561337947845459D0)) (list (list 35.0D0 5129.1494140625D0 0.004117548931390047D0 2.5738322734832764D0)) (list (list 35.0D0 5130.08984375D0 0.0038806137163192034D0 2.5863265991210938D0)) (list (list 35.0D0 5130.33740234375D0 0.004027525894343853D0 2.598820924758911D0)) (list (list 35.0D0 5129.58349609375D0 0.0045273397117853165D0 2.6113152503967285D0)) (list (list 35.0D0 5128.37353515625D0 0.0051148757338523865D0 2.623809576034546D0)) (list (list 35.0D0 5127.63671875D0 0.005236204247921705D0 2.6363039016723633D0)) (list (list 35.0D0 5128.21337890625D0 0.004479726776480675D0 2.6487982273101807D0)) (list (list 35.0D0 5130.3134765625D0 0.003228517482057214D0 2.661292552947998D0)) (list (list 35.0D0 5132.26513671875D0 0.0022231964394450188D0 2.6737868785858155D0)) (list (list 35.0D0 5133.70751953125D0 0.0016956869512796402D0 2.686281204223633D0)) (list (list 35.0D0 5133.28076171875D0 0.0014316500164568425D0 2.69877552986145D0)) (list (list 35.0D0 5131.34765625D0 0.0013200094690546394D0 2.7112698554992676D0)) (list (list 35.0D0 5132.2470703125D0 0.0013799063162878156D0 2.723764181137085D0)) (list (list 35.0D0 5135.443359375D0 0.001818483229726553D0 2.7362585067749024D0)) (list (list 35.0D0 5134.7275390625D0 0.0025938174221664667D0 2.7487528324127198D0)) (list (list 35.0D0 5130.20361328125D0 0.003669834928587079D0 2.761247158050537D0)) (list (list 35.0D0 5127.9072265625D0 0.005135553888976574D0 2.7737414836883545D0)) (list (list 35.0D0 5126.85302734375D0 0.006700332276523113D0 2.786235809326172D0)) (list (list 35.0D0 5125.7333984375D0 0.0083758644759655D0 2.7987301349639893D0)) (list (list 35.0D0 5125.427734375D0 0.009747328236699105D0 2.8112244606018067D0)) (list (list 35.0D0 5126.58154296875D0 0.010001667775213719D0 2.823718786239624D0)) (list (list 35.0D0 5129.1015625D0 0.0089253606274724D0 2.8362131118774414D0)) (list (list 35.0D0 5131.31884765625D0 0.00726360734552145D0 2.848707437515259D0)) (list (list 35.0D0 5132.01416015625D0 0.006101568229496479D0 2.861201763153076D0)) (list (list 35.0D0 5131.36376953125D0 0.005984897259622812D0 2.8736960887908936D0)) (list (list 35.0D0 5130.0205078125D0 0.006357274483889341D0 2.886190414428711D0)) (list (list 35.0D0 5129.70751953125D0 0.0063179899007081986D0 2.8986847400665283D0)) (list (list 35.0D0 5130.21630859375D0 0.005720654968172312D0 2.9111790657043457D0)) (list (list 35.0D0 5130.7119140625D0 0.004968388471752405D0 2.923673391342163D0)) (list (list 35.0D0 5131.17041015625D0 0.004250399302691221D0 2.9361677169799805D0)) (list (list 35.0D0 5130.9248046875D0 0.00352666899561882D0 2.948662042617798D0)) (list (list 35.0D0 5129.48193359375D0 0.002871730364859104D0 2.9611563682556153D0)) (list (list 35.0D0 5127.2412109375D0 0.0022385725751519204D0 2.9736506938934326D0)) (list (list 35.0D0 5139.703125D0 0.0016413734992966056D0 2.98614501953125D0)) (list (list 35.0D0 5140.21044921875D0 0.0018120731692761183D0 2.9986393451690674D0)) (list (list 35.0D0 5118.759765625D0 0.0035980285611003638D0 3.0111336708068848D0)) (list (list 35.0D0 5122.6552734375D0 0.005452848970890045D0 3.0236282348632813D0)) (list (list 35.0D0 5124.9052734375D0 0.007150295656174421D0 3.0361225605010987D0)) (list (list 35.0D0 5127.08837890625D0 0.008363761939108372D0 3.048616886138916D0)) (list (list 35.0D0 5128.18408203125D0 0.008982722647488118D0 3.0611112117767334D0)) (list (list 35.0D0 5128.396484375D0 0.009237402118742466D0 3.073605537414551D0)) (list (list 35.0D0 5128.40576171875D0 0.009467694908380509D0 3.086099863052368D0)) (list (list 35.0D0 5128.333984375D0 0.009409639984369278D0 3.0985941886901856D0)) (list (list 35.0D0 5128.20947265625D0 0.008598148822784424D0 3.111088514328003D0)) (list (list 35.0D0 5128.3671875D0 0.007033779285848141D0 3.1235828399658203D0)) (list (list 35.0D0 5129.267578125D0 0.005335278809070587D0 3.1360771656036377D0)) (list (list 35.0D0 5130.61279296875D0 0.004286221694201231D0 3.148571491241455D0)) (list (list 35.0D0 5131.5009765625D0 0.004183070734143257D0 3.1610658168792725D0)) (list (list 35.0D0 5130.3359375D0 0.004473883658647537D0 3.17356014251709D0)) (list (list 35.0D0 5126.0390625D0 0.004649017006158829D0 3.1860544681549073D0)) (list (list 35.0D0 5121.99755859375D0 0.004633672535419464D0 3.1985487937927246D0)) (list (list 35.0D0 5120.51708984375D0 0.003991828765720129D0 3.211043119430542D0)) (list (list 35.0D0 5120.4443359375D0 0.0031225201673805714D0 3.2235374450683594D0)) (list (list 35.0D0 5121.361328125D0 0.0026624028105288744D0 3.2360317707061768D0)) (list (list 35.0D0 5124.13525390625D0 0.0026908274739980698D0 3.248526096343994D0)) (list (list 35.0D0 5128.51171875D0 0.0028183250688016415D0 3.2610204219818116D0)) (list (list 35.0D0 5131.048828125D0 0.002827838994562626D0 3.273514747619629D0)) (list (list 35.0D0 5131.12353515625D0 0.002941688522696495D0 3.2860090732574463D0)) (list (list 35.0D0 5127.79296875D0 0.003066520905122161D0 3.2985033988952637D0)) (list (list 35.0D0 5117.81201171875D0 0.002965685911476612D0 3.310997724533081D0)) (list (list 35.0D0 5110.7236328125D0 0.002166768768802285D0 3.3234920501708985D0)) (list (list 35.0D0 5108.49609375D0 0.0013323809253051877D0 3.335986375808716D0)) (list (list 35.0D0 5110.71142578125D0 8.778871269896627D-4 3.348480701446533D0)) (list (list 35.0D0 5118.01953125D0 8.891889592632651D-4 3.3609750270843506D0)) (list (list 35.0D0 5118.22119140625D0 8.72966309543699D-4 3.373469352722168D0)) (list (list 35.0D0 5116.4638671875D0 7.954926113598049D-4 3.3859636783599854D0)) (list (list 35.0D0 5112.58447265625D0 7.414298597723246D-4 3.3984580039978028D0)) (list (list 35.0D0 5109.43310546875D0 7.261802675202489D-4 3.41095232963562D0)) (list (list 35.0D0 5108.10009765625D0 7.027566316537559D-4 3.4234466552734375D0)) (list (list 35.0D0 5108.22998046875D0 6.522751064039767D-4 3.435940980911255D0)) (list (list 35.0D0 5109.8505859375D0 5.734442383982241D-4 3.4484353065490723D0)) (list (list 35.0D0 5111.4189453125D0 5.477967788465321D-4 3.4609296321868897D0)) (list (list 35.0D0 5140.0849609375D0 7.048962288536131D-4 3.473423957824707D0)) (list (list 35.0D0 5132.93408203125D0 8.810184663161635D-4 3.4859182834625244D0)) (list (list 35.0D0 5130.89208984375D0 0.0010601526591926814D0 3.498412609100342D0)) (list (list 35.0D0 5132.1748046875D0 0.0010167441796511412D0 3.510906934738159D0)) (list (list 35.0D0 5140.11328125D0 8.974212105385959D-4 3.5234012603759766D0)) (list (list 35.0D0 5141.55517578125D0 8.556865504942834D-4 3.535895586013794D0)) (list (list 35.0D0 5114.46728515625D0 0.001115330494940281D0 3.5483899116516114D0)) (list (list 35.0D0 5122.01220703125D0 0.0012600549962371588D0 3.5608842372894287D0)) (list (list 35.0D0 5122.63671875D0 0.0014042002148926259D0 3.573378801345825D0)) (list (list 35.0D0 5122.01220703125D0 0.001548053347505629D0 3.5858731269836426D0)) (list (list 35.0D0 5121.771484375D0 0.0016033729771152139D0 3.59836745262146D0)) (list (list 35.0D0 5122.623046875D0 0.0013275271048769355D0 3.6108617782592774D0)) (list (list 35.0D0 5121.62890625D0 8.799277129583061D-4 3.6233561038970948D0)) (list (list 35.0D0 5120.5869140625D0 6.818443071097136D-4 3.635850429534912D0)) (list (list 35.0D0 5121.0458984375D0 7.884353399276733D-4 3.6483447551727295D0)) (list (list 35.0D0 5123.990234375D0 9.46281012147665D-4 3.660839080810547D0)) (list (list 35.0D0 5125.3505859375D0 9.625061647966504D-4 3.6733334064483643D0)) (list (list 35.0D0 5124.84375D0 8.515046210959554D-4 3.6858277320861817D0)) (list (list 35.0D0 5124.01953125D0 7.676097447983921D-4 3.698322057723999D0)) (list (list 35.0D0 5125.3564453125D0 8.366231922991574D-4 3.7108163833618164D0)) (list (list 35.0D0 5128.6416015625D0 0.0010616818908602D0 3.723310708999634D0)) (list (list 35.0D0 5131.39306640625D0 0.0012472670059651137D0 3.735805034637451D0)) (list (list 35.0D0 5130.86474609375D0 0.0011936866212636233D0 3.7482993602752686D0)) (list (list 35.0D0 5129.1826171875D0 0.0010420946637168527D0 3.760793685913086D0)) (list (list 35.0D0 5127.79931640625D0 9.713402250781655D-4 3.7732880115509033D0)) (list (list 35.0D0 5127.47412109375D0 9.35525051318109D-4 3.7857823371887207D0)) (list (list 35.0D0 5127.2099609375D0 8.266481454484165D-4 3.798276662826538D0)) (list (list 35.0D0 5123.67529296875D0 6.216634646989405D-4 3.8107709884643555D0)) (list (list 35.0D0 5120.88720703125D0 4.50232153525576D-4 3.823265314102173D0)) (list (list 35.0D0 5124.55712890625D0 3.596292808651924D-4 3.8357596397399903D0)) (list (list 35.0D0 5130.6669921875D0 5.884242709726095D-4 3.8482539653778076D0)) (list (list 35.0D0 5129.74462890625D0 9.874769020825625D-4 3.860748291015625D0)) (list (list 35.0D0 5128.6787109375D0 0.0014368114061653614D0 3.8732426166534424D0)) (list (list 35.0D0 5129.111328125D0 0.0018261122750118375D0 3.8857369422912598D0)) (list (list 35.0D0 5129.71435546875D0 0.002219266025349498D0 3.898231267929077D0)) (list (list 35.0D0 5129.7783203125D0 0.0027821091935038567D0 3.9107255935668946D0)) (list (list 35.0D0 5129.4228515625D0 0.003491529729217291D0 3.923219919204712D0)) (list (list 35.0D0 5128.8583984375D0 0.004120691679418087D0 3.9357142448425293D0)) (list (list 35.0D0 5128.21337890625D0 0.004585696384310722D0 3.9482085704803467D0)) (list (list 35.0D0 5127.76025390625D0 0.005074955988675356D0 3.960702896118164D0)) (list (list 35.0D0 5127.78466796875D0 0.005687362048774958D0 3.9731972217559815D0)) (list (list 35.0D0 5128.03857421875D0 0.006229378283023834D0 3.985691547393799D0)) (list (list 35.0D0 5127.93798828125D0 0.006449881941080093D0 3.998185873031616D0)) (list (list 35.0D0 5127.62158203125D0 0.006384274922311306D0 4.010680198669434D0)) (list (list 35.0D0 5127.5126953125D0 0.006295972503721714D0 4.02317476272583D0)) (list (list 35.0D0 5127.50830078125D0 0.006386214401572943D0 4.035668849945068D0)) (list (list 35.0D0 5127.0537109375D0 0.006681154482066631D0 4.048163414001465D0)) (list (list 35.0D0 5125.98828125D0 0.0071308426558971405D0 4.060657501220703D0)) (list (list 35.0D0 5125.1162109375D0 0.007559611927717924D0 4.0731520652771D0)) (list (list 35.0D0 5125.65283203125D0 0.00740387849509716D0 4.085646152496338D0)) (list (list 35.0D0 5129.0D0 0.006414534989744425D0 4.098140716552734D0)) (list (list 35.0D0 5133.173828125D0 0.005472315475344658D0 4.110634803771973D0)) (list (list 35.0D0 5134.33837890625D0 0.004972357302904129D0 4.123129367828369D0)) (list (list 35.0D0 5132.244140625D0 0.005085950717329979D0 4.135623455047607D0)) (list (list 35.0D0 5129.7041015625D0 0.0061405738815665245D0 4.148118019104004D0)) (list (list 35.0D0 5129.59521484375D0 0.007364008110016584D0 4.160612106323242D0)) (list (list 35.0D0 5131.02880859375D0 0.008047615177929402D0 4.173106670379639D0)) (list (list 35.0D0 5131.54052734375D0 0.007947811856865883D0 4.185600757598877D0)) (list (list 35.0D0 5130.3388671875D0 0.007427072152495384D0 4.198095321655273D0)) (list (list 35.0D0 5128.88427734375D0 0.007289294619113207D0 4.210589408874512D0)) (list (list 35.0D0 5128.75244140625D0 0.007556417491286993D0 4.223083972930908D0)) (list (list 35.0D0 5129.2138671875D0 0.008066431619226933D0 4.2355780601501465D0)) (list (list 35.0D0 5128.84375D0 0.008763010613620282D0 4.248072624206543D0)) (list (list 35.0D0 5128.36572265625D0 0.009283814579248429D0 4.260566711425781D0)) (list (list 35.0D0 5129.6279296875D0 0.009004932828247548D0 4.273061275482178D0)) (list (list 35.0D0 5132.0078125D0 0.008295299485325814D0 4.285555362701416D0)) (list (list 35.0D0 5132.95947265625D0 0.007763348985463381D0 4.2980499267578125D0)) (list (list 35.0D0 5132.27294921875D0 0.007396876811981201D0 4.310544013977051D0)) (list (list 35.0D0 5131.4599609375D0 0.007091823499649763D0 4.323038578033447D0)) (list (list 35.0D0 5131.17822265625D0 0.00692366948351264D0 4.3355326652526856D0)) (list (list 35.0D0 5130.18505859375D0 0.007175889331847429D0 4.348027229309082D0)) (list (list 35.0D0 5128.498046875D0 0.0077410852536559105D0 4.36052131652832D0)) (list (list 35.0D0 5127.75537109375D0 0.007984118536114693D0 4.373015880584717D0)) (list (list 35.0D0 5127.89794921875D0 0.007582046091556549D0 4.385509967803955D0)) (list (list 35.0D0 5127.9033203125D0 0.006773722358047962D0 4.398004531860352D0)) (list (list 35.0D0 5127.13720703125D0 0.005866106599569321D0 4.410499095916748D0)) (list (list 35.0D0 5126.1396484375D0 0.005195835139602423D0 4.422993183135986D0)) (list (list 35.0D0 5126.4052734375D0 0.005030984058976173D0 4.435487747192383D0)) (list (list 35.0D0 5128.00439453125D0 0.005523132625967264D0 4.447981834411621D0)) (list (list 35.0D0 5129.72265625D0 0.006456154864281416D0 4.460476398468018D0)) (list (list 35.0D0 5130.31005859375D0 0.007230919320136309D0 4.472970485687256D0)) (list (list 35.0D0 5130.09716796875D0 0.007548940367996693D0 4.485465049743652D0)) (list (list 35.0D0 5129.3193359375D0 0.00745506351813674D0 4.497959136962891D0)) (list (list 35.0D0 5128.30322265625D0 0.007073840592056513D0 4.510453701019287D0)) (list (list 35.0D0 5127.6513671875D0 0.006484568119049072D0 4.522947788238525D0)) (list (list 35.0D0 5127.64404296875D0 0.005680746398866177D0 4.535442352294922D0)) (list (list 35.0D0 5128.123046875D0 0.004612034186720848D0 4.54793643951416D0)) (list (list 35.0D0 5128.77490234375D0 0.0032983096316456795D0 4.560431003570557D0)) (list (list 35.0D0 5128.93798828125D0 0.0019855599384754896D0 4.572925090789795D0)) (list (list 35.0D0 5127.85986328125D0 9.910929948091507D-4 4.585419654846191D0)) (list (list 35.0D0 5124.25830078125D0 4.451191343832761D-4 4.59791374206543D0)) (list (list 35.0D0 5121.43359375D0 2.628127986099571D-4 4.610408306121826D0)) (list (list 35.0D0 5121.484375D0 3.06078844005242D-4 4.6229023933410645D0)) (list (list 35.0D0 5127.09912109375D0 4.883156507275999D-4 4.635396957397461D0)) (list (list 35.0D0 5130.19970703125D0 8.227908983826637D-4 4.647891044616699D0)) (list (list 35.0D0 5130.30322265625D0 0.0012937699211761356D0 4.660385608673096D0)) (list (list 35.0D0 5128.78662109375D0 0.0018467888003215194D0 4.672879695892334D0)) (list (list 35.0D0 5126.95068359375D0 0.002310188254341483D0 4.6853742599487305D0)) (list (list 35.0D0 5126.23828125D0 0.002492626430466771D0 4.697868347167969D0)) (list (list 35.0D0 5126.1689453125D0 0.002432461827993393D0 4.710362911224365D0)) (list (list 35.0D0 5126.1123046875D0 0.002299480838701129D0 4.7228569984436035D0)) (list (list 35.0D0 5126.27783203125D0 0.0021747311111539603D0 4.7353515625D0)) (list (list 35.0D0 5127.19140625D0 0.002095201052725315D0 4.747845649719238D0)) (list (list 35.0D0 5128.43017578125D0 0.0021541111636906863D0 4.760340213775635D0)) (list (list 35.0D0 5129.07421875D0 0.0023562712594866753D0 4.772834300994873D0)) (list (list 35.0D0 5128.40478515625D0 0.00256390986032784D0 4.7853288650512695D0)) (list (list 35.0D0 5126.79052734375D0 0.002630572998896241D0 4.797822952270508D0)) (list (list 35.0D0 5125.15380859375D0 0.0024448696058243513D0 4.810317516326904D0)) (list (list 35.0D0 5125.14306640625D0 0.0019412933615967632D0 4.822811603546143D0)) (list (list 35.0D0 5128.26171875D0 0.0013455774169415236D0 4.835306167602539D0)) (list (list 35.0D0 5130.85595703125D0 0.0010355423437431455D0 4.847800254821777D0)) (list (list 35.0D0 5131.19091796875D0 9.526099311187863D-4 4.860294818878174D0)) (list (list 35.0D0 5129.6328125D0 8.822740637697279D-4 4.872788906097412D0)) (list (list 35.0D0 5127.42919921875D0 6.762640550732613D-4 4.885283470153809D0)) (list (list 35.0D0 5130.14404296875D0 4.1765838977880776D-4 4.897777557373047D0)) (list (list 35.0D0 5112.21923828125D0 3.380042326170951D-4 4.910272121429443D0)) (list (list 35.0D0 5132.4306640625D0 6.818915135227144D-4 4.922766208648682D0)) (list (list 35.0D0 5128.74609375D0 0.001075312728062272D0 4.935260772705078D0)) (list (list 35.0D0 5128.6708984375D0 0.0014190946239978075D0 4.947755336761475D0)) (list (list 35.0D0 5129.193359375D0 0.0016752691008150578D0 4.960249423980713D0)) (list (list 35.0D0 5128.98095703125D0 0.0018770821625366807D0 4.972743988037109D0)) (list (list 35.0D0 5128.13525390625D0 0.002027292037382722D0 4.985238075256348D0)) (list (list 35.0D0 5127.93994140625D0 0.002076792297884822D0 4.997732639312744D0)) (list (list 35.0D0 5129.13525390625D0 0.0019667353481054306D0 5.010226726531982D0)) (list (list 35.0D0 5130.64697265625D0 0.0017507905140519143D0 5.022721290588379D0)) (list (list 35.0D0 5130.42822265625D0 0.0014989313203841448D0 5.035215377807617D0)) (list (list 35.0D0 5128.22216796875D0 0.0013099968200549484D0 5.047709941864014D0)) (list (list 35.0D0 5125.56591796875D0 0.001212274539284408D0 5.060204029083252D0)) (list (list 35.0D0 5124.65478515625D0 0.0010791291715577245D0 5.072698593139648D0)) (list (list 35.0D0 5125.95751953125D0 8.643732289783657D-4 5.085192680358887D0)) (list (list 35.0D0 5128.41796875D0 6.55248062685132D-4 5.097687244415283D0)) (list (list 35.0D0 5128.73779296875D0 5.049245082773268D-4 5.1101813316345215D0)) (list (list 35.0D0 5126.74462890625D0 4.272403602954D-4 5.122675895690918D0)) (list (list 35.0D0 5125.9482421875D0 3.8489632424898446D-4 5.135169982910156D0)) (list (list 35.0D0 5128.9169921875D0 3.3380245440639556D-4 5.147664546966553D0)) (list (list 35.0D0 5130.2080078125D0 2.958366530947387D-4 5.160158634185791D0)) (list (list 35.0D0 5125.12451171875D0 2.522518334444612D-4 5.1726531982421875D0)) (list (list 35.0D0 5117.5927734375D0 2.8695526998490095D-4 5.185147285461426D0)) (list (list 35.0D0 5116.17626953125D0 3.131645789835602D-4 5.197641849517822D0)) (list (list 35.0D0 5117.50390625D0 3.1034284620545805D-4 5.2101359367370606D0)) (list (list 35.0D0 5120.80908203125D0 2.9627649928443134D-4 5.222630500793457D0)) (list (list 35.0D0 5126.0673828125D0 2.9442113009281457D-4 5.235124588012695D0)) (list (list 35.0D0 5129.4658203125D0 3.4713043714873493D-4 5.247619152069092D0)) (list (list 35.0D0 5128.88720703125D0 4.514761094469577D-4 5.26011323928833D0)) (list (list 35.0D0 5127.314453125D0 6.493108812719584D-4 5.272607803344727D0)) (list (list 35.0D0 5127.04052734375D0 9.179497719742358D-4 5.285101890563965D0)) (list (list 35.0D0 5127.994140625D0 0.0011786139803007245D0 5.297596454620361D0)) (list (list 35.0D0 5128.9951171875D0 0.001406814786605537D0 5.3100905418396D0)) (list (list 35.0D0 5129.544921875D0 0.0016429168172180653D0 5.322585105895996D0)) (list (list 35.0D0 5129.7763671875D0 0.001933953259140253D0 5.335079193115234D0)) (list (list 35.0D0 5129.9267578125D0 0.00224569090642035D0 5.347573757171631D0)) (list (list 35.0D0 5130.25341796875D0 0.0024775005877017975D0 5.360067844390869D0)) (list (list 35.0D0 5130.6962890625D0 0.002566187409684062D0 5.372562408447266D0)) (list (list 35.0D0 5130.87841796875D0 0.0025471856351941824D0 5.385056495666504D0)) (list (list 35.0D0 5130.5751953125D0 0.002510413061827421D0 5.3975510597229D0)) (list (list 35.0D0 5129.89892578125D0 0.002490437589585781D0 5.410045146942139D0)) (list (list 35.0D0 5129.14208984375D0 0.0024074865505099297D0 5.422539710998535D0)) (list (list 35.0D0 5128.70263671875D0 0.0021835227962583304D0 5.435033798217773D0)) (list (list 35.0D0 5128.4453125D0 0.0018989471718668938D0 5.44752836227417D0)) (list (list 35.0D0 5127.82177734375D0 0.0017339227488264442D0 5.460022449493408D0)) (list (list 35.0D0 5127.20263671875D0 0.0017598401755094529D0 5.472517013549805D0)) (list (list 35.0D0 5127.51220703125D0 0.0018813296919688583D0 5.485011100769043D0)) (list (list 35.0D0 5128.19677734375D0 0.0020197811536490918D0 5.4975056648254395D0)) (list (list 35.0D0 5128.259765625D0 0.0021618513856083155D0 5.510000228881836D0)) (list (list 35.0D0 5127.732421875D0 0.002299766056239605D0 5.522494316101074D0)) (list (list 35.0D0 5127.30859375D0 0.002408723346889019D0 5.534988880157471D0)) (list (list 35.0D0 5127.46728515625D0 0.0025000772438943386D0 5.547482967376709D0)) (list (list 35.0D0 5127.98291015625D0 0.002633322961628437D0 5.5599775314331055D0)) (list (list 35.0D0 5128.65380859375D0 0.0027970229275524617D0 5.572471618652344D0)) (list (list 35.0D0 5129.6201171875D0 0.00289240013808012D0 5.58496618270874D0)) (list (list 35.0D0 5130.4794921875D0 0.0028896683361381293D0 5.5974602699279785D0)) (list (list 35.0D0 5130.51611328125D0 0.0028398812282830477D0 5.609954833984375D0)) (list (list 35.0D0 5129.6787109375D0 0.0027967358473688364D0 5.622448921203613D0)) (list (list 35.0D0 5128.642578125D0 0.002755900379270315D0 5.63494348526001D0)) (list (list 35.0D0 5127.87451171875D0 0.002667325083166361D0 5.647437572479248D0)) (list (list 35.0D0 5127.45654296875D0 0.0025275920052081347D0 5.6599321365356445D0)) (list (list 35.0D0 5127.31298828125D0 0.002396052237600088D0 5.672426223754883D0)) (list (list 35.0D0 5126.94140625D0 0.002355011645704508D0 5.684920787811279D0)) (list (list 35.0D0 5126.1865234375D0 0.0024217921309173107D0 5.697414875030518D0)) (list (list 35.0D0 5125.6640625D0 0.002502759452909231D0 5.709909439086914D0)) (list (list 35.0D0 5125.56884765625D0 0.0025056605227291584D0 5.722403526306152D0)) (list (list 35.0D0 5125.6396484375D0 0.0024433713406324387D0 5.734898090362549D0)) (list (list 35.0D0 5126.13427734375D0 0.0023568165488541127D0 5.747392177581787D0)) (list (list 35.0D0 5127.27197265625D0 0.0022812813986092806D0 5.759886741638184D0)) (list (list 35.0D0 5128.21923828125D0 0.0022685586009174586D0 5.772380828857422D0)) (list (list 35.0D0 5128.25927734375D0 0.0023547394666820765D0 5.784875392913818D0)) (list (list 35.0D0 5127.8427734375D0 0.0025370900984853506D0 5.797369480133057D0)) (list (list 35.0D0 5127.86474609375D0 0.002733500674366951D0 5.809864044189453D0)) (list (list 35.0D0 5128.57763671875D0 0.002853494370356202D0 5.822358131408691D0)) (list (list 35.0D0 5129.59130859375D0 0.002887908136472106D0 5.834852695465088D0)) (list (list 35.0D0 5130.5830078125D0 0.0028634779155254364D0 5.847346782684326D0)) (list (list 35.0D0 5131.30615234375D0 0.0028014054987579584D0 5.859841346740723D0)) (list (list 35.0D0 5131.34033203125D0 0.0026920505333691836D0 5.872335433959961D0)) (list (list 35.0D0 5130.63818359375D0 0.002500005764886737D0 5.884829998016357D0)) (list (list 35.0D0 5129.89501953125D0 0.0021548212971538306D0 5.897324085235596D0)) (list (list 35.0D0 5131.26171875D0 0.001591467997059226D0 5.909818649291992D0)) (list (list 35.0D0 5136.09375D0 0.0011381233343854547D0 5.9223127365112305D0)) (list (list 35.0D0 5136.52294921875D0 0.0010765779297798872D0 5.934807300567627D0)) (list (list 35.0D0 5131.34130859375D0 0.0014182935701683164D0 5.947301387786865D0)) (list (list 35.0D0 5127.462890625D0 0.0021256825421005488D0 5.959795951843262D0)) (list (list 35.0D0 5127.3076171875D0 0.0026573233772069216D0 5.9722900390625D0)) (list (list 35.0D0 5127.63330078125D0 0.0029121392872184515D0 5.9847846031188965D0)) (list (list 35.0D0 5127.92578125D0 0.0028224012348800898D0 5.997278690338135D0)) (list (list 35.0D0 5128.32275390625D0 0.002451810985803604D0 6.009773254394531D0)) (list (list 35.0D0 5128.84228515625D0 0.002088327892124653D0 6.0222673416137695D0)) (list (list 35.0D0 5129.33154296875D0 0.0019604130648076535D0 6.034761905670166D0)) (list (list 35.0D0 5129.55419921875D0 0.002009001560509205D0 6.0472564697265625D0)) (list (list 35.0D0 5129.4072265625D0 0.0020082963164895773D0 6.059750556945801D0)) (list (list 35.0D0 5130.0654296875D0 0.0016965732211247087D0 6.072245121002197D0)) (list (list 35.0D0 5138.068359375D0 0.001349027967080474D0 6.0847392082214356D0)) (list (list 35.0D0 5137.0146484375D0 0.0013617189833894372D0 6.097233772277832D0)) (list (list 35.0D0 5123.03759765625D0 0.0023173124063760043D0 6.10972785949707D0)) (list (list 35.0D0 5125.958984375D0 0.0038793799467384816D0 6.122222423553467D0)) (list (list 35.0D0 5126.38427734375D0 0.005085672251880169D0 6.134716510772705D0)) (list (list 35.0D0 5126.7021484375D0 0.005712578073143959D0 6.147211074829102D0)) (list (list 35.0D0 5127.01220703125D0 0.00574563117697835D0 6.15970516204834D0)) (list (list 35.0D0 5127.5078125D0 0.005280229263007641D0 6.172199726104736D0)) (list (list 35.0D0 5128.14013671875D0 0.004433364141732454D0 6.184693813323975D0)) (list (list 35.0D0 5128.36181640625D0 0.0034017274156212807D0 6.197188377380371D0)) (list (list 35.0D0 5127.7666015625D0 0.002507984172552824D0 6.209682464599609D0)) (list (list 35.0D0 5127.13623046875D0 0.002080933190882206D0 6.222177028656006D0)) (list (list 35.0D0 5127.61376953125D0 0.002186920028179884D0 6.234671115875244D0)) (list (list 35.0D0 5129.255859375D0 0.0026476450730115176D0 6.247165679931641D0)) (list (list 35.0D0 5130.294921875D0 0.003139920299872756D0 6.259659767150879D0)) (list (list 35.0D0 5130.044921875D0 0.0033835775684565306D0 6.272154331207275D0)) (list (list 35.0D0 5129.19921875D0 0.0033776569180190564D0 6.284648418426514D0)) (list (list 35.0D0 5128.5732421875D0 0.0032952940091490746D0 6.29714298248291D0)) (list (list 35.0D0 5128.5078125D0 0.003313549794256687D0 6.309637069702148D0)) (list (list 35.0D0 5128.7666015625D0 0.003493930445984006D0 6.322131633758545D0)) (list (list 35.0D0 5128.88427734375D0 0.003752222517505288D0 6.334625720977783D0)) (list (list 35.0D0 5128.58837890625D0 0.003936810418963432D0 6.34712028503418D0)) (list (list 35.0D0 5127.9814453125D0 0.0038904286921024323D0 6.359614372253418D0)) (list (list 35.0D0 5127.1005859375D0 0.0034307881724089384D0 6.3721089363098145D0)) (list (list 35.0D0 5125.14013671875D0 0.002505810931324959D0 6.384603023529053D0)) (list (list 35.0D0 5120.03662109375D0 0.0015535486163571477D0 6.397097587585449D0)) (list (list 35.0D0 5120.0D0 0.0010907992254942656D0 6.4095916748046875D0)) (list (list 35.0D0 5123.4755859375D0 0.0013990940060466528D0 6.422086238861084D0)) (list (list 35.0D0 5126.16845703125D0 0.0022285005543380976D0 6.434580326080322D0)) (list (list 35.0D0 5125.0615234375D0 0.002670783083885908D0 6.447074890136719D0)) (list (list 35.0D0 5124.34619140625D0 0.0023803538642823696D0 6.459568977355957D0)) (list (list 35.0D0 5126.83154296875D0 0.0016633151099085808D0 6.4720635414123535D0)) (list (list 35.0D0 5128.7900390625D0 0.0013580647064372898D0 6.484557628631592D0)) (list (list 35.0D0 5128.40771484375D0 0.001651648199185729D0 6.497052192687988D0)) (list (list 35.0D0 5125.69677734375D0 0.002206214237958193D0 6.509546279907227D0)) (list (list 35.0D0 5124.7236328125D0 0.0025489197578281165D0 6.522040843963623D0)) (list (list 35.0D0 5124.1044921875D0 0.0024723797105252743D0 6.534534931182861D0)) (list (list 35.0D0 5122.90380859375D0 0.0020574931986629963D0 6.547029495239258D0)) (list (list 35.0D0 5121.0087890625D0 0.0015214883023872972D0 6.559523582458496D0)) (list (list 35.0D0 5119.5732421875D0 0.001083463430404663D0 6.572018146514893D0)) (list (list 35.0D0 5118.93798828125D0 7.829398382455111D-4 6.584512233734131D0)) (list (list 35.0D0 5119.0263671875D0 5.290012923069298D-4 6.597006797790527D0)) (list (list 35.0D0 5118.34326171875D0 2.774702734313905D-4 6.609501361846924D0)) (list (list 35.0D0 5135.86083984375D0 1.3743685849476606D-4 6.621995449066162D0)) (list (list 35.0D0 5143.0634765625D0 8.173481182893738D-5 6.634490013122559D0)) (list (list 35.0D0 5119.0263671875D0 5.385203621699475D-5 6.646984100341797D0)) (list (list 35.0D0 5119.79638671875D0 6.414160452550277D-5 6.659478664398193D0)) (list (list 35.0D0 5121.8974609375D0 7.357510185102001D-5 6.671972751617432D0)) (list (list 35.0D0 5123.72705078125D0 7.697266846662387D-5 6.684467315673828D0)) (list (list 35.0D0 5124.69384765625D0 6.427208427339792D-5 6.696961402893066D0)) (list (list 35.0D0 5125.2802734375D0 4.272111618774943D-5 6.709455966949463D0)) (list (list 35.0D0 5125.2802734375D0 0.0D0 6.721950054168701D0)) (list (list 36.0D0 2287.599365234375D0 7.919835625216365D-4 1.4243537187576294D0)) (list (list 36.0D0 2288.525634765625D0 6.849390338174999D-4 1.4368480443954468D0)) (list (list 36.0D0 2306.396728515625D0 0.0015811880584806204D0 1.4493423700332642D0)) (list (list 36.0D0 2285.005615234375D0 4.7812980483286083D-4 1.4618366956710816D0)) (list (list 36.0D0 2314.1357421875D0 0.0033306810073554516D0 1.474331021308899D0)) (list (list 36.0D0 2310.8740234375D0 0.003456737846136093D0 1.4868253469467163D0)) (list (list 36.0D0 2304.710693359375D0 0.0030219785403460265D0 1.4993196725845337D0)) (list (list 36.0D0 2301.28564453125D0 0.002357470104470849D0 1.5118141174316407D0)) (list (list 36.0D0 2302.576416015625D0 0.001680482178926468D0 1.524308443069458D0)) (list (list 36.0D0 2305.684814453125D0 0.0015141974436119199D0 1.5368027687072754D0)) (list (list 36.0D0 2268.72216796875D0 1.9543951202649623D-4 1.5492970943450928D0)) (list (list 36.0D0 2272.93603515625D0 2.565282047726214D-4 1.5617914199829102D0)) (list (list 36.0D0 2282.571533203125D0 5.924570141360164D-4 1.5742857456207276D0)) (list (list 36.0D0 2283.14990234375D0 8.642783504910767D-4 1.586780071258545D0)) (list (list 36.0D0 2296.561279296875D0 0.0012575522996485234D0 1.5992743968963623D0)) (list (list 36.0D0 2290.966796875D0 0.0013207608135417104D0 1.6117687225341797D0)) (list (list 36.0D0 2290.966796875D0 0.0D0 1.624263048171997D0)) (list (list 37.0D0 7970.45751953125D0 5.1677947340067476D-5 1.6742403507232666D0)) (list (list 37.0D0 7976.61865234375D0 5.5392800277331844D-5 1.686734676361084D0)) (list (list 37.0D0 7979.0615234375D0 5.838610013597645D-5 1.6992290019989014D0)) (list (list 37.0D0 7981.84765625D0 6.264349212870002D-5 1.7117233276367188D0)) (list (list 37.0D0 7983.75244140625D0 6.140301411505789D-5 1.7242176532745362D0)) (list (list 37.0D0 7990.431640625D0 4.511482620728202D-5 1.7367119789123536D0)) (list (list 37.0D0 7967.23828125D0 3.91815701732412D-5 1.749206304550171D0)) (list (list 37.0D0 7962.251953125D0 4.2685722291935235D-5 1.7617006301879883D0)) (list (list 37.0D0 7959.55859375D0 3.996232044300996D-5 1.7741949558258057D0)) (list (list 37.0D0 7932.6611328125D0 7.000334881013259D-5 1.7866894006729126D0)) (list (list 37.0D0 7924.4404296875D0 6.902690802235156D-5 1.79918372631073D0)) (list (list 37.0D0 7919.458984375D0 6.046911221346818D-5 1.8116780519485474D0)) (list (list 37.0D0 7917.0400390625D0 6.072579344618134D-5 1.8241723775863648D0)) (list (list 37.0D0 7921.81494140625D0 6.205243698786944D-5 1.8366667032241822D0)) (list (list 37.0D0 7929.24365234375D0 7.494158489862457D-5 1.8491610288619996D0)) (list (list 37.0D0 7928.03955078125D0 8.15666135167703D-5 1.861655354499817D0)) (list (list 37.0D0 7898.7724609375D0 7.180761167546734D-5 1.8741496801376343D0)) (list (list 37.0D0 7921.048828125D0 1.5432627697009593D-4 1.8866440057754517D0)) (list (list 37.0D0 7921.46728515625D0 1.9145841361023486D-4 1.899138331413269D0)) (list (list 37.0D0 7924.962890625D0 1.8246498075313866D-4 1.9116326570510865D0)) (list (list 37.0D0 7929.13134765625D0 1.4765588275622577D-4 1.9241269826889038D0)) (list (list 37.0D0 7931.57861328125D0 1.2552418047562242D-4 1.9366213083267212D0)) (list (list 37.0D0 7933.20947265625D0 1.170010436908342D-4 1.9491156339645386D0)) (list (list 37.0D0 7941.42578125D0 1.1956639355048537D-4 1.961609959602356D0)) (list (list 37.0D0 7916.63134765625D0 1.2122607586206868D-4 1.9741042852401734D0)) (list (list 37.0D0 7922.044921875D0 1.6089789278339595D-4 1.9865986108779908D0)) (list (list 37.0D0 7929.41162109375D0 2.600291627459228D-4 1.999092936515808D0)) (list (list 37.0D0 7928.173828125D0 3.181429929099977D-4 2.011587381362915D0)) (list (list 37.0D0 7927.36572265625D0 3.4743425203487277D-4 2.0240817070007324D0)) (list (list 37.0D0 7927.4775390625D0 3.595543676055968D-4 2.03657603263855D0)) (list (list 37.0D0 7928.23876953125D0 3.540535399224609D-4 2.049070358276367D0)) (list (list 37.0D0 7929.068359375D0 3.160155611112714D-4 2.0615646839141846D0))) (list (list (list 37.0D0 7933.37939453125D0 2.3661508748773486D-4 2.074059009552002D0)) (list (list 37.0D0 7937.20361328125D0 1.8007303879130632D-4 2.0865533351898194D0)) (list (list 37.0D0 7936.11865234375D0 1.4901529357302934D-4 2.0990476608276367D0)) (list (list 37.0D0 7928.5126953125D0 1.5760280075483024D-4 2.111541986465454D0)) (list (list 37.0D0 7926.580078125D0 1.7567216127645224D-4 2.1240363121032715D0)) (list (list 37.0D0 7925.0693359375D0 1.9563159730751068D-4 2.136530637741089D0)) (list (list 37.0D0 7923.4775390625D0 2.407056890660897D-4 2.1490249633789063D0)) (list (list 37.0D0 7923.40478515625D0 2.911986084654927D-4 2.1615192890167237D0)) (list (list 37.0D0 7924.25830078125D0 3.3312971936538816D-4 2.174013614654541D0)) (list (list 37.0D0 7925.4794921875D0 3.674038453027606D-4 2.1865079402923584D0)) (list (list 37.0D0 7926.66455078125D0 3.9845440187491477D-4 2.199002265930176D0)) (list (list 37.0D0 7927.3564453125D0 4.245940363034606D-4 2.211496591567993D0)) (list (list 37.0D0 7927.28125D0 4.453603469301015D-4 2.2239909172058106D0)) (list (list 37.0D0 7926.58251953125D0 4.7367982915602625D-4 2.236485242843628D0)) (list (list 37.0D0 7925.9990234375D0 5.26632706169039D-4 2.2489795684814453D0)) (list (list 37.0D0 7925.978515625D0 5.961810238659382D-4 2.2614738941192627D0)) (list (list 37.0D0 7925.93017578125D0 6.456044502556324D-4 2.27396821975708D0)) (list (list 37.0D0 7924.98486328125D0 6.454703398048878D-4 2.2864625453948975D0)) (list (list 37.0D0 7923.82568359375D0 6.212259759195149D-4 2.298956871032715D0)) (list (list 37.0D0 7923.9697265625D0 6.189994746819139D-4 2.3114511966705323D0)) (list (list 37.0D0 7925.51953125D0 6.71728397719562D-4 2.3239455223083496D0)) (list (list 37.0D0 7927.35595703125D0 7.760758744552732D-4 2.336439847946167D0)) (list (list 37.0D0 7928.771484375D0 8.898540399968624D-4 2.3489341735839844D0)) (list (list 37.0D0 7929.7041015625D0 9.858357952907682D-4 2.3614284992218018D0)) (list (list 37.0D0 7929.97607421875D0 0.0010530046420171857D0 2.373922824859619D0)) (list (list 37.0D0 7929.75732421875D0 0.0010979678481817246D0 2.3864171504974366D0)) (list (list 37.0D0 7929.42724609375D0 0.0011290350230410695D0 2.398911476135254D0)) (list (list 37.0D0 7929.21875D0 0.0011338108452036977D0 2.4114058017730713D0)) (list (list 37.0D0 7928.921875D0 0.0010799120645970107D0 2.4239001274108887D0)) (list (list 37.0D0 7928.02880859375D0 9.461038280278444D-4 2.436394453048706D0)) (list (list 37.0D0 7926.673828125D0 7.473021396435797D-4 2.4488887786865235D0)) (list (list 37.0D0 7926.8447265625D0 5.079135298728943D-4 2.461383104324341D0)) (list (list 37.0D0 7932.6201171875D0 3.1110248528420925D-4 2.4738776683807373D0)) (list (list 37.0D0 7905.8759765625D0 1.922546507557854D-4 2.4863719940185547D0)) (list (list 37.0D0 7908.1201171875D0 2.109388296958059D-4 2.498866319656372D0)) (list (list 37.0D0 7919.77490234375D0 3.427647170610726D-4 2.5113606452941895D0)) (list (list 37.0D0 7929.00048828125D0 6.768478779122233D-4 2.523854970932007D0)) (list (list 37.0D0 7925.7802734375D0 9.318034863099456D-4 2.536349296569824D0)) (list (list 37.0D0 7924.89892578125D0 0.0010881461203098298D0 2.5488436222076416D0)) (list (list 37.0D0 7924.91748046875D0 0.0011600657599046827D0 2.561337947845459D0)) (list (list 37.0D0 7924.892578125D0 0.0011221743188798428D0 2.5738322734832764D0)) (list (list 37.0D0 7923.70849609375D0 9.643739322200418D-4 2.5863265991210938D0)) (list (list 37.0D0 7922.333984375D0 7.888666586950421D-4 2.598820924758911D0)) (list (list 37.0D0 7921.31396484375D0 6.960965692996979D-4 2.6113152503967285D0)) (list (list 37.0D0 7919.82373046875D0 7.411218830384314D-4 2.623809576034546D0)) (list (list 37.0D0 7919.9072265625D0 9.46991378441453D-4 2.6363039016723633D0)) (list (list 37.0D0 7923.5146484375D0 0.0012782244011759758D0 2.6487982273101807D0)) (list (list 37.0D0 7928.08935546875D0 0.0017608434427529574D0 2.661292552947998D0)) (list (list 37.0D0 7928.64990234375D0 0.0020580401178449393D0 2.6737868785858155D0)) (list (list 37.0D0 7927.22998046875D0 0.001997764455154538D0 2.686281204223633D0)) (list (list 37.0D0 7924.0791015625D0 0.0016919623594731093D0 2.69877552986145D0)) (list (list 37.0D0 7921.431640625D0 0.0013411438558250666D0 2.7112698554992676D0)) (list (list 37.0D0 7921.4111328125D0 0.0010235842783004046D0 2.723764181137085D0)) (list (list 37.0D0 7922.10498046875D0 8.329428383149207D-4 2.7362585067749024D0)) (list (list 37.0D0 7919.7001953125D0 8.317565079778433D-4 2.7487528324127198D0)) (list (list 37.0D0 7918.05615234375D0 0.0011267809895798564D0 2.761247158050537D0)) (list (list 37.0D0 7920.06103515625D0 0.0015726357232779265D0 2.7737414836883545D0)) (list (list 37.0D0 7922.40625D0 0.002017056802287698D0 2.786235809326172D0)) (list (list 37.0D0 7922.330078125D0 0.0021458761766552925D0 2.7987301349639893D0)) (list (list 37.0D0 7921.12353515625D0 0.0019205176504328847D0 2.8112244606018067D0)) (list (list 37.0D0 7920.42431640625D0 0.001534604118205607D0 2.823718786239624D0)) (list (list 37.0D0 7920.97412109375D0 0.001176641439087689D0 2.8362131118774414D0)) (list (list 37.0D0 7923.13916015625D0 9.354040375910699D-4 2.848707437515259D0)) (list (list 37.0D0 7926.93896484375D0 8.368476992473006D-4 2.861201763153076D0)) (list (list 37.0D0 7928.97998046875D0 8.279880858026445D-4 2.8736960887908936D0)) (list (list 37.0D0 7927.22900390625D0 7.782338070683181D-4 2.886190414428711D0)) (list (list 37.0D0 7922.92529296875D0 7.452376885339618D-4 2.8986847400665283D0)) (list (list 37.0D0 7921.51416015625D0 7.455216837115586D-4 2.9111790657043457D0)) (list (list 37.0D0 7923.99560546875D0 7.574533228762448D-4 2.923673391342163D0)) (list (list 37.0D0 7927.71337890625D0 8.709129178896546D-4 2.9361677169799805D0)) (list (list 37.0D0 7929.15966796875D0 0.0010193079942837358D0 2.948662042617798D0)) (list (list 37.0D0 7928.6494140625D0 0.0011206334456801415D0 2.9611563682556153D0)) (list (list 37.0D0 7926.513671875D0 0.0011553020449355245D0 2.9736506938934326D0)) (list (list 37.0D0 7923.65185546875D0 0.0011527157621458173D0 2.98614501953125D0)) (list (list 37.0D0 7921.8798828125D0 0.0011205339105799795D0 2.9986393451690674D0)) (list (list 37.0D0 7922.248046875D0 0.0010163421975448728D0 3.0111336708068848D0)) (list (list 37.0D0 7924.615234375D0 8.579344721511006D-4 3.0236282348632813D0)) (list (list 37.0D0 7927.43212890625D0 6.80569326505065D-4 3.0361225605010987D0)) (list (list 37.0D0 7930.2763671875D0 4.8211353714577854D-4 3.048616886138916D0)) (list (list 37.0D0 7933.59130859375D0 3.1211250461637974D-4 3.0611112117767334D0)) (list (list 37.0D0 7934.89208984375D0 2.3097815574146807D-4 3.073605537414551D0)) (list (list 37.0D0 7931.904296875D0 2.224539202870801D-4 3.086099863052368D0)) (list (list 37.0D0 7926.11474609375D0 2.785838732961565D-4 3.0985941886901856D0)) (list (list 37.0D0 7924.0634765625D0 3.2106152502819896D-4 3.111088514328003D0)) (list (list 37.0D0 7921.94091796875D0 3.108218952547759D-4 3.1235828399658203D0)) (list (list 37.0D0 7917.931640625D0 2.517930988688022D-4 3.1360771656036377D0)) (list (list 37.0D0 7916.4931640625D0 2.0863783720415086D-4 3.148571491241455D0)) (list (list 37.0D0 7916.359375D0 2.3196819529403D-4 3.1610658168792725D0)) (list (list 37.0D0 7897.62890625D0 2.764459641184658D-4 3.17356014251709D0)) (list (list 37.0D0 7898.685546875D0 3.210187132935971D-4 3.1860544681549073D0)) (list (list 37.0D0 7899.9443359375D0 3.079567104578018D-4 3.1985487937927246D0)) (list (list 37.0D0 7902.75830078125D0 3.0814664205536247D-4 3.211043119430542D0)) (list (list 37.0D0 7906.31640625D0 3.422314766794443D-4 3.2235374450683594D0)) (list (list 37.0D0 7930.58837890625D0 8.293330320157111D-4 3.2360317707061768D0)) (list (list 37.0D0 7926.60302734375D0 9.917052229866386D-4 3.248526096343994D0)) (list (list 37.0D0 7924.6611328125D0 0.0010370963718742133D0 3.2610204219818116D0)) (list (list 37.0D0 7922.380859375D0 8.989412453956902D-4 3.273514747619629D0)) (list (list 37.0D0 7913.7998046875D0 6.556383450515568D-4 3.2860090732574463D0)) (list (list 37.0D0 7911.53125D0 4.320365551393479D-4 3.2985033988952637D0)) (list (list 37.0D0 7918.884765625D0 2.8678771923296154D-4 3.310997724533081D0)) (list (list 37.0D0 7929.6181640625D0 9.539242018945515D-4 3.348480701446533D0)) (list (list 37.0D0 7925.82861328125D0 9.856241522356868D-4 3.3609750270843506D0)) (list (list 37.0D0 7922.7763671875D0 0.0010238594841212035D0 3.373469352722168D0)) (list (list 37.0D0 7922.2109375D0 0.00106073881033808D0 3.3859636783599854D0)) (list (list 37.0D0 7923.6376953125D0 0.0010830212850123644D0 3.3984580039978028D0)) (list (list 37.0D0 7926.09765625D0 0.001080775517039001D0 3.41095232963562D0)) (list (list 37.0D0 7928.13525390625D0 0.0010386320063844324D0 3.4234466552734375D0)) (list (list 37.0D0 7929.3515625D0 9.92941320873797D-4 3.435940980911255D0)) (list (list 37.0D0 7929.5234375D0 9.67618718277663D-4 3.4484353065490723D0)) (list (list 37.0D0 7929.0166015625D0 9.381295531056821D-4 3.4609296321868897D0)) (list (list 37.0D0 7928.67626953125D0 8.625302580185235D-4 3.473423957824707D0)) (list (list 37.0D0 7928.7900390625D0 7.447724347002804D-4 3.4859182834625244D0)) (list (list 37.0D0 7928.88330078125D0 6.270821904763579D-4 3.498412609100342D0)) (list (list 37.0D0 7928.845703125D0 5.336187314242125D-4 3.510906934738159D0)) (list (list 37.0D0 7928.72509765625D0 4.6066773938946426D-4 3.5234012603759766D0)) (list (list 37.0D0 7928.1669921875D0 4.070401191711426D-4 3.535895586013794D0)) (list (list 37.0D0 7927.16357421875D0 3.8274703547358513D-4 3.5483899116516114D0)) (list (list 37.0D0 7925.72900390625D0 3.8127522566355765D-4 3.5608842372894287D0)) (list (list 37.0D0 7924.00537109375D0 3.7144889938645065D-4 3.573378801345825D0)) (list (list 37.0D0 7924.771484375D0 3.1985034001991153D-4 3.5858731269836426D0)) (list (list 37.0D0 7928.05712890625D0 2.8300596750341356D-4 3.59836745262146D0)) (list (list 37.0D0 7929.78271484375D0 3.4821193548850715D-4 3.6108617782592774D0)) (list (list 37.0D0 7929.6328125D0 5.025115679018199D-4 3.6233561038970948D0)) (list (list 37.0D0 7927.68701171875D0 6.640411447733641D-4 3.635850429534912D0)) (list (list 37.0D0 7926.07177734375D0 7.669189944863319D-4 3.6483447551727295D0)) (list (list 37.0D0 7926.79248046875D0 7.959441863931716D-4 3.660839080810547D0)) (list (list 37.0D0 7929.0537109375D0 8.454056223854423D-4 3.6733334064483643D0)) (list (list 37.0D0 7929.49560546875D0 9.833697695285082D-4 3.6858277320861817D0)) (list (list 37.0D0 7928.140625D0 0.0011812192387878895D0 3.698322057723999D0)) (list (list 37.0D0 7927.25830078125D0 0.001358264940790832D0 3.7108163833618164D0)) (list (list 37.0D0 7927.4794921875D0 0.0013697409303858877D0 3.723310708999634D0)) (list (list 37.0D0 7928.166015625D0 0.0011767311953008175D0 3.735805034637451D0)) (list (list 37.0D0 7928.4013671875D0 8.903048583306372D-4 3.7482993602752686D0)) (list (list 37.0D0 7927.51220703125D0 7.163832196965814D-4 3.760793685913086D0)) (list (list 37.0D0 7926.63330078125D0 8.059125975705683D-4 3.7732880115509033D0)) (list (list 37.0D0 7927.25244140625D0 0.001111588324420154D0 3.7857823371887207D0)) (list (list 37.0D0 7928.86376953125D0 0.0014799112686887384D0 3.798276662826538D0)) (list (list 37.0D0 7929.763671875D0 0.0017528778407722712D0 3.8107709884643555D0)) (list (list 37.0D0 7928.841796875D0 0.0018367556622251869D0 3.823265314102173D0)) (list (list 37.0D0 7926.73095703125D0 0.001844309619627893D0 3.8357596397399903D0)) (list (list 37.0D0 7925.46875D0 0.0018757553771138192D0 3.8482539653778076D0)) (list (list 37.0D0 7925.37548828125D0 0.0018828687025234104D0 3.860748291015625D0)) (list (list 37.0D0 7925.244140625D0 0.001874160603620112D0 3.8732426166534424D0)) (list (list 37.0D0 7924.55078125D0 0.0019123670645058155D0 3.8857369422912598D0)) (list (list 37.0D0 7923.619140625D0 0.0019580419175326825D0 3.898231267929077D0)) (list (list 37.0D0 7923.01416015625D0 0.001863202080130577D0 3.9107255935668946D0)) (list (list 37.0D0 7923.51513671875D0 0.0015907882479950786D0 3.923219919204712D0)) (list (list 37.0D0 7924.93505859375D0 0.0012831329368054867D0 3.9357142448425293D0)) (list (list 37.0D0 7925.8701171875D0 0.001014166628010571D0 3.9482085704803467D0)) (list (list 37.0D0 7924.00830078125D0 6.995159783400595D-4 3.960702896118164D0)) (list (list 37.0D0 7912.82470703125D0 5.07085642311722D-4 3.9731972217559815D0)) (list (list 37.0D0 7911.931640625D0 4.399398167151958D-4 3.985691547393799D0)) (list (list 37.0D0 7919.2490234375D0 4.7018626355566085D-4 3.998185873031616D0)) (list (list 37.0D0 7924.83154296875D0 7.365058409050107D-4 4.010680198669434D0)) (list (list 37.0D0 7926.07421875D0 9.604807128198445D-4 4.02317476272583D0)) (list (list 37.0D0 7926.73583984375D0 0.001058245194144547D0 4.035668849945068D0)) (list (list 37.0D0 7926.728515625D0 0.0010106272529810667D0 4.048163414001465D0)) (list (list 37.0D0 7925.51953125D0 9.037501877173781D-4 4.060657501220703D0)) (list (list 37.0D0 7924.68359375D0 8.878773078322411D-4 4.0731520652771D0)) (list (list 37.0D0 7926.0947265625D0 9.664411190897226D-4 4.085646152496338D0)) (list (list 37.0D0 7930.55615234375D0 0.0010835508583113552D0 4.098140716552734D0)) (list (list 37.0D0 7933.3740234375D0 0.001182842766866088D0 4.110634803771973D0)) (list (list 37.0D0 7933.2841796875D0 0.0012004923773929477D0 4.123129367828369D0)) (list (list 37.0D0 7931.15673828125D0 0.0011906118597835303D0 4.135623455047607D0)) (list (list 37.0D0 7927.5595703125D0 0.0011799195781350136D0 4.148118019104004D0)) (list (list 37.0D0 7926.35107421875D0 0.0010834704153239727D0 4.160612106323242D0)) (list (list 37.0D0 7929.89794921875D0 9.102082112804055D-4 4.173106670379639D0)) (list (list 37.0D0 7933.287109375D0 9.253533207811415D-4 4.185600757598877D0)) (list (list 37.0D0 7932.8525390625D0 9.800728876143694D-4 4.198095321655273D0)) (list (list 37.0D0 7929.26318359375D0 9.852868970483542D-4 4.210589408874512D0)) (list (list 37.0D0 7927.55517578125D0 9.22860752325505D-4 4.223083972930908D0)) (list (list 37.0D0 7927.22802734375D0 8.625167538411915D-4 4.2355780601501465D0)) (list (list 37.0D0 7927.36474609375D0 9.51525173150003D-4 4.248072624206543D0)) (list (list 37.0D0 7928.16162109375D0 0.0012157564051449299D0 4.260566711425781D0)) (list (list 37.0D0 7929.77294921875D0 0.0015716925263404847D0 4.273061275482178D0)) (list (list 37.0D0 7930.95263671875D0 0.0019015143625438214D0 4.285555362701416D0)) (list (list 37.0D0 7931.26220703125D0 0.002116155344992876D0 4.2980499267578125D0)) (list (list 37.0D0 7931.61279296875D0 0.002215892542153597D0 4.310544013977051D0)) (list (list 37.0D0 7932.37841796875D0 0.0022528646513819695D0 4.323038578033447D0)) (list (list 37.0D0 7932.0400390625D0 0.0022713036742061377D0 4.3355326652526856D0)) (list (list 37.0D0 7929.59228515625D0 0.002346741734072566D0 4.348027229309082D0)) (list (list 37.0D0 7926.80419921875D0 0.0026222465094178915D0 4.36052131652832D0)) (list (list 37.0D0 7925.61181640625D0 0.002910466166213155D0 4.373015880584717D0)) (list (list 37.0D0 7925.3515625D0 0.002998087555170059D0 4.385509967803955D0)) (list (list 37.0D0 7924.6923828125D0 0.0028588371351361275D0 4.398004531860352D0)) (list (list 37.0D0 7923.3818359375D0 0.0026137949898838997D0 4.410499095916748D0)) (list (list 37.0D0 7922.6318359375D0 0.002423973986878991D0 4.422993183135986D0)) (list (list 37.0D0 7923.39208984375D0 0.00239932001568377D0 4.435487747192383D0)) (list (list 37.0D0 7925.3232421875D0 0.002601301297545433D0 4.447981834411621D0)) (list (list 37.0D0 7927.53076171875D0 0.0029078819788992405D0 4.460476398468018D0)) (list (list 37.0D0 7928.7060546875D0 0.0030777151696383953D0 4.472970485687256D0)) (list (list 37.0D0 7928.6669921875D0 0.003063840325921774D0 4.485465049743652D0)) (list (list 37.0D0 7927.6162109375D0 0.002994667971506715D0 4.497959136962891D0)) (list (list 37.0D0 7925.978515625D0 0.0029495663475245238D0 4.510453701019287D0)) (list (list 37.0D0 7924.9794921875D0 0.002870055614039302D0 4.522947788238525D0)) (list (list 37.0D0 7925.08837890625D0 0.0026535186916589737D0 4.535442352294922D0)) (list (list 37.0D0 7925.900390625D0 0.0022508485708385706D0 4.54793643951416D0)) (list (list 37.0D0 7926.92333984375D0 0.001659335452131927D0 4.560431003570557D0)) (list (list 37.0D0 7927.87939453125D0 9.915821719914675D-4 4.572925090789795D0)) (list (list 37.0D0 7929.78662109375D0 4.4582990813069046D-4 4.585419654846191D0)) (list (list 37.0D0 7934.0771484375D0 1.5088803775142878D-4 4.59791374206543D0)) (list (list 37.0D0 7933.24072265625D0 6.974671850912273D-5 4.610408306121826D0)) (list (list 37.0D0 7930.23876953125D0 1.257091498700902D-4 4.6229023933410645D0)) (list (list 37.0D0 7930.00390625D0 2.4546575150452554D-4 4.635396957397461D0)) (list (list 37.0D0 7929.99609375D0 4.0503591299057007D-4 4.647891044616699D0)) (list (list 37.0D0 7928.7216796875D0 6.162626086734235D-4 4.660385608673096D0)) (list (list 37.0D0 7925.9775390625D0 8.755502058193088D-4 4.672879695892334D0)) (list (list 37.0D0 7923.64599609375D0 0.0010959889041259885D0 4.6853742599487305D0)) (list (list 37.0D0 7923.138671875D0 0.0011441647075116635D0 4.697868347167969D0)) (list (list 37.0D0 7922.9521484375D0 0.0010490886634215713D0 4.710362911224365D0)) (list (list 37.0D0 7922.33740234375D0 9.051336674019694D-4 4.7228569984436035D0)) (list (list 37.0D0 7922.01171875D0 7.600256358273327D-4 4.7353515625D0)) (list (list 37.0D0 7923.1650390625D0 6.390944472514093D-4 4.747845649719238D0)) (list (list 37.0D0 7925.0166015625D0 5.887582083232701D-4 4.760340213775635D0)) (list (list 37.0D0 7926.353515625D0 6.056252168491483D-4 4.772834300994873D0)) (list (list 37.0D0 7926.17529296875D0 6.408309563994408D-4 4.7853288650512695D0)) (list (list 37.0D0 7925.439453125D0 6.446077022701502D-4 4.797822952270508D0)) (list (list 37.0D0 7926.14208984375D0 5.721215857192874D-4 4.810317516326904D0)) (list (list 37.0D0 7928.9453125D0 4.6950692194513977D-4 4.822811603546143D0)) (list (list 37.0D0 7930.107421875D0 4.2863740236498416D-4 4.835306167602539D0)) (list (list 37.0D0 7929.1474609375D0 4.6157787437550724D-4 4.847800254821777D0)) (list (list 37.0D0 7928.04345703125D0 5.090813501738012D-4 4.860294818878174D0)) (list (list 37.0D0 7928.19091796875D0 4.799404414370656D-4 4.872788906097412D0)) (list (list 37.0D0 7928.56494140625D0 3.991461417172104D-4 4.885283470153809D0)) (list (list 37.0D0 7953.33544921875D0 3.3824812271632254D-4 4.897777557373047D0)) (list (list 37.0D0 7928.87890625D0 6.177988252602518D-4 4.910272121429443D0)) (list (list 37.0D0 7927.802734375D0 9.315928327850997D-4 4.922766208648682D0)) (list (list 37.0D0 7926.61181640625D0 0.001186833018437028D0 4.935260772705078D0)) (list (list 37.0D0 7925.845703125D0 0.0012916072737425566D0 4.947755336761475D0)) (list (list 37.0D0 7925.24853515625D0 0.001259520067833364D0 4.960249423980713D0)) (list (list 37.0D0 7924.58984375D0 0.0011357456678524614D0 4.972743988037109D0)) (list (list 37.0D0 7923.69189453125D0 9.588118409737945D-4 4.985238075256348D0)) (list (list 37.0D0 7922.9521484375D0 7.658358663320541D-4 4.997732639312744D0)) (list (list 37.0D0 7923.84033203125D0 5.921893171034753D-4 5.010226726531982D0)) (list (list 37.0D0 7926.5380859375D0 5.281076882965863D-4 5.022721290588379D0)) (list (list 37.0D0 7927.078125D0 6.363709107972682D-4 5.035215377807617D0)) (list (list 37.0D0 7925.02294921875D0 8.893692283891141D-4 5.047709941864014D0)) (list (list 37.0D0 7923.6630859375D0 0.0011952181812375784D0 5.060204029083252D0)) (list (list 37.0D0 7924.16845703125D0 0.0013786379713565112D0 5.072698593139648D0)) (list (list 37.0D0 7925.12353515625D0 0.0013972979504615069D0 5.085192680358887D0)) (list (list 37.0D0 7925.47998046875D0 0.0013115603942424059D0 5.097687244415283D0)) (list (list 37.0D0 7925.10498046875D0 0.001194535056129098D0 5.1101813316345215D0)) (list (list 37.0D0 7924.666015625D0 0.0010757931740954519D0 5.122675895690918D0)) (list (list 37.0D0 7924.74267578125D0 9.53379669226706D-4 5.135169982910156D0)) (list (list 37.0D0 7924.6669921875D0 8.474086062051356D-4 5.147664546966553D0)) (list (list 37.0D0 7923.92822265625D0 7.700574933551252D-4 5.160158634185791D0)) (list (list 37.0D0 7923.39892578125D0 6.948445807211101D-4 5.1726531982421875D0)) (list (list 37.0D0 7924.14599609375D0 5.877093062736094D-4 5.185147285461426D0)) (list (list 37.0D0 7925.64794921875D0 4.642019048333168D-4 5.197641849517822D0)) (list (list 37.0D0 7927.0830078125D0 3.470063384156674D-4 5.2101359367370606D0)) (list (list 37.0D0 7929.45751953125D0 2.5032120174728334D-4 5.222630500793457D0)) (list (list 37.0D0 7931.66796875D0 1.9511327263899148D-4 5.235124588012695D0)) (list (list 37.0D0 7931.78173828125D0 1.7370573186781258D-4 5.247619152069092D0)) (list (list 37.0D0 7930.92578125D0 1.7142115393653512D-4 5.26011323928833D0)) (list (list 37.0D0 7930.091796875D0 1.665345480432734D-4 5.272607803344727D0)) (list (list 37.0D0 7926.72607421875D0 1.5711697051301599D-4 5.285101890563965D0)) (list (list 37.0D0 7923.99853515625D0 1.745641784509644D-4 5.297596454620361D0)) (list (list 37.0D0 7924.8515625D0 2.052449417533353D-4 5.3100905418396D0)) (list (list 37.0D0 7928.37451171875D0 2.614073164295405D-4 5.322585105895996D0)) (list (list 37.0D0 7929.1318359375D0 3.8767256774008274D-4 5.335079193115234D0)) (list (list 37.0D0 7928.6904296875D0 6.001706351526082D-4 5.347573757171631D0)) (list (list 37.0D0 7929.34130859375D0 8.371771546080709D-4 5.360067844390869D0)) (list (list 37.0D0 7930.7998046875D0 0.001034982269629836D0 5.372562408447266D0)) (list (list 37.0D0 7930.72705078125D0 0.0012103448389098049D0 5.385056495666504D0)) (list (list 37.0D0 7928.56396484375D0 0.001401629182510078D0 5.3975510597229D0)) (list (list 37.0D0 7925.8818359375D0 0.0016253851354122162D0 5.410045146942139D0)) (list (list 37.0D0 7924.9423828125D0 0.0017060069367289544D0 5.422539710998535D0)) (list (list 37.0D0 7925.29833984375D0 0.0015660542994737626D0 5.435033798217773D0)) (list (list 37.0D0 7925.30419921875D0 0.0013532063458114863D0 5.44752836227417D0)) (list (list 37.0D0 7924.53076171875D0 0.0013031354174017907D0 5.460022449493408D0)) (list (list 37.0D0 7924.3125D0 0.0015030155191197992D0 5.472517013549805D0)) (list (list 37.0D0 7925.74267578125D0 0.0017788454424589873D0 5.485011100769043D0)) (list (list 37.0D0 7927.017578125D0 0.00194576196372509D0 5.4975056648254395D0)) (list (list 37.0D0 7926.6689453125D0 0.0019388271030038596D0 5.510000228881836D0)) (list (list 37.0D0 7925.1748046875D0 0.0018584717763587833D0 5.522494316101074D0)) (list (list 37.0D0 7923.859375D0 0.0017685488564893604D0 5.534988880157471D0)) (list (list 37.0D0 7924.43017578125D0 0.0016154682962223888D0 5.547482967376709D0)) (list (list 37.0D0 7926.5859375D0 0.0014604402240365744D0 5.5599775314331055D0)) (list (list 37.0D0 7928.5546875D0 0.0013728835619986058D0 5.572471618652344D0)) (list (list 37.0D0 7929.70263671875D0 0.0013129145372658968D0 5.58496618270874D0)) (list (list 37.0D0 7930.33349609375D0 0.0012663606321439147D0 5.5974602699279785D0)) (list (list 37.0D0 7929.6142578125D0 0.0012117329752072692D0 5.609954833984375D0)) (list (list 37.0D0 7926.6767578125D0 0.001148262177594006D0 5.622448921203613D0)) (list (list 37.0D0 7923.7548828125D0 0.0011029766174033285D0 5.63494348526001D0)) (list (list 37.0D0 7922.68359375D0 0.0010207246523350478D0 5.647437572479248D0)) (list (list 37.0D0 7922.974609375D0 9.261881350539625D-4 5.6599321365356445D0)) (list (list 37.0D0 7924.11865234375D0 8.757766336202622D-4 5.672426223754883D0)) (list (list 37.0D0 7924.97607421875D0 8.876831270754337D-4 5.684920787811279D0)) (list (list 37.0D0 7924.533203125D0 9.013901581056416D-4 5.697414875030518D0)) (list (list 37.0D0 7922.9130859375D0 8.479619864374399D-4 5.709909439086914D0)) (list (list 37.0D0 7921.54345703125D0 7.083602831698954D-4 5.722403526306152D0)) (list (list 37.0D0 7920.46337890625D0 5.073965294286609D-4 5.734898090362549D0)) (list (list 37.0D0 7917.02880859375D0 3.1132702133618295D-4 5.747392177581787D0)) (list (list 37.0D0 7913.1611328125D0 2.1383471903391183D-4 5.759886741638184D0)) (list (list 37.0D0 7913.4091796875D0 1.9455629808362574D-4 5.772380828857422D0)) (list (list 37.0D0 7917.8193359375D0 2.2198115766514093D-4 5.784875392913818D0)) (list (list 37.0D0 7921.119140625D0 2.5454265414737165D-4 5.797369480133057D0)) (list (list 37.0D0 7926.2236328125D0 2.6047523715533316D-4 5.809864044189453D0)) (list (list 37.0D0 7931.134765625D0 2.8636306524276734D-4 5.822358131408691D0)) (list (list 37.0D0 7933.90087890625D0 3.65192536264658D-4 5.834852695465088D0)) (list (list 37.0D0 7932.99365234375D0 4.6485173515975476D-4 5.847346782684326D0)) (list (list 37.0D0 7930.00341796875D0 5.795724573545158D-4 5.859841346740723D0)) (list (list 37.0D0 7928.56298828125D0 6.946765352040529D-4 5.872335433959961D0)) (list (list 37.0D0 7928.65673828125D0 7.258831756189466D-4 5.884829998016357D0)) (list (list 37.0D0 7932.48388671875D0 6.068594520911574D-4 5.897324085235596D0)) (list (list 37.0D0 7914.40966796875D0 4.135513736400753D-4 5.909818649291992D0)) (list (list 37.0D0 7914.6484375D0 4.6319712419062853D-4 5.9223127365112305D0)) (list (list 37.0D0 7923.83154296875D0 7.08917563315481D-4 5.934807300567627D0)) (list (list 37.0D0 7924.400390625D0 0.001051414990797639D0 5.947301387786865D0)) (list (list 37.0D0 7925.01123046875D0 0.0012687714770436287D0 5.959795951843262D0)) (list (list 37.0D0 7926.1513671875D0 0.0013589815935119987D0 5.9722900390625D0)) (list (list 37.0D0 7927.400390625D0 0.0012973035918548704D0 5.9847846031188965D0)) (list (list 37.0D0 7927.8193359375D0 0.0010769817745313049D0 5.997278690338135D0)) (list (list 37.0D0 7927.06640625D0 8.262664778158069D-4 6.009773254394531D0)) (list (list 37.0D0 7926.8994140625D0 7.194163044914603D-4 6.0222673416137695D0)) (list (list 37.0D0 7927.77294921875D0 7.660098490305245D-4 6.034761905670166D0)) (list (list 37.0D0 7928.5673828125D0 8.416647906415165D-4 6.0472564697265625D0)) (list (list 37.0D0 7929.40771484375D0 7.898677722550929D-4 6.059750556945801D0)) (list (list 37.0D0 7915.5751953125D0 6.298179505392909D-4 6.072245121002197D0)) (list (list 37.0D0 7939.32177734375D0 7.808878435753286D-4 6.0847392082214356D0)) (list (list 37.0D0 7916.69140625D0 0.0013053760631009937D0 6.097233772277832D0)) (list (list 37.0D0 7921.1689453125D0 0.0019435464637354017D0 6.10972785949707D0)) (list (list 37.0D0 7922.78662109375D0 0.002455165609717369D0 6.122222423553467D0)) (list (list 37.0D0 7924.43896484375D0 0.0027874016668647528D0 6.134716510772705D0)) (list (list 37.0D0 7925.546875D0 0.0029866823460906744D0 6.147211074829102D0)) (list (list 37.0D0 7926.0009765625D0 0.002968054497614503D0 6.15970516204834D0)) (list (list 37.0D0 7926.48095703125D0 0.00265002460218966D0 6.172199726104736D0)) (list (list 37.0D0 7927.3115234375D0 0.002074172953143716D0 6.184693813323975D0)) (list (list 37.0D0 7926.798828125D0 0.0014269634848460555D0 6.197188377380371D0)) (list (list 37.0D0 7924.3271484375D0 0.001021389034576714D0 6.209682464599609D0)) (list (list 37.0D0 7923.5D0 0.0010336642153561116D0 6.222177028656006D0)) (list (list 37.0D0 7925.83447265625D0 0.0013407819205895067D0 6.234671115875244D0)) (list (list 37.0D0 7928.787109375D0 0.0018045613542199135D0 6.247165679931641D0)) (list (list 37.0D0 7930.091796875D0 0.002211559098213911D0 6.259659767150879D0)) (list (list 37.0D0 7929.78857421875D0 0.002447990933433175D0 6.272154331207275D0)) (list (list 37.0D0 7928.32373046875D0 0.0025782601442188025D0 6.284648418426514D0)) (list (list 37.0D0 7927.15234375D0 0.002776592969894409D0 6.29714298248291D0)) (list (list 37.0D0 7926.85791015625D0 0.0031005078926682473D0 6.309637069702148D0)) (list (list 37.0D0 7927.00439453125D0 0.003493554424494505D0 6.322131633758545D0)) (list (list 37.0D0 7927.1455078125D0 0.0038337784353643656D0 6.334625720977783D0)) (list (list 37.0D0 7927.03173828125D0 0.004002016503363848D0 6.34712028503418D0)) (list (list 37.0D0 7926.55712890625D0 0.003845229046419263D0 6.359614372253418D0)) (list (list 37.0D0 7925.56982421875D0 0.003148809541016817D0 6.3721089363098145D0)) (list (list 37.0D0 7918.6240234375D0 0.002055075252428651D0 6.384603023529053D0)) (list (list 37.0D0 7938.4130859375D0 0.0012535839341580868D0 6.397097587585449D0)) (list (list 37.0D0 7933.9599609375D0 0.0011235058773308993D0 6.4095916748046875D0)) (list (list 37.0D0 7924.533203125D0 0.0020837229676544667D0 6.422086238861084D0)) (list (list 37.0D0 7924.50537109375D0 0.002705361694097519D0 6.434580326080322D0)) (list (list 37.0D0 7924.50048828125D0 0.0026535706128925085D0 6.447074890136719D0)) (list (list 37.0D0 7925.69873046875D0 0.0019229124300181866D0 6.459568977355957D0)) (list (list 37.0D0 7925.4580078125D0 0.0011882353574037552D0 6.4720635414123535D0)) (list (list 37.0D0 7946.0986328125D0 8.503891876898706D-4 6.484557628631592D0)) (list (list 37.0D0 7921.87646484375D0 0.0017488379962742329D0 6.497052192687988D0)) (list (list 37.0D0 7921.724609375D0 0.0022721239365637303D0 6.509546279907227D0)) (list (list 37.0D0 7921.57177734375D0 0.002355115255340934D0 6.522040843963623D0)) (list (list 37.0D0 7921.13525390625D0 0.0020030871964991093D0 6.534534931182861D0)) (list (list 37.0D0 7918.98681640625D0 0.0013943228404968977D0 6.547029495239258D0)) (list (list 37.0D0 7916.05810546875D0 8.646943024359644D-4 6.559523582458496D0)) (list (list 37.0D0 7917.009765625D0 5.302126519382D-4 6.572018146514893D0)) (list (list 37.0D0 7934.564453125D0 4.3220125371590257D-4 6.584512233734131D0)) (list (list 37.0D0 7931.18994140625D0 3.6290616844780743D-4 6.597006797790527D0)) (list (list 37.0D0 7930.3857421875D0 2.064706786768511D-4 6.609501361846924D0)) (list (list 37.0D0 7926.828125D0 9.115694410866127D-5 6.621995449066162D0)) (list (list 37.0D0 7921.37255859375D0 4.65099947177805D-5 6.634490013122559D0)) (list (list 37.0D0 7919.43115234375D0 3.813893999904394D-5 6.646984100341797D0)) (list (list 37.0D0 7920.3046875D0 3.841581929009408D-5 6.659478664398193D0)) (list (list 37.0D0 7921.84375D0 3.583939906093292D-5 6.671972751617432D0)) (list (list 37.0D0 7921.84375D0 0.0D0 6.684467315673828D0)) (list (list 38.0D0 2281.732666015625D0 3.6920272395946086D-4 2.011587381362915D0)) (list (list 38.0D0 2294.00537109375D0 7.563400431536138D-4 2.03657603263855D0)) (list (list 38.0D0 2288.46728515625D0 6.670786533504725D-4 2.049070358276367D0)) (list (list 38.0D0 2291.177734375D0 4.955538897775114D-4 2.0615646839141846D0)) (list (list 38.0D0 2300.932861328125D0 6.692075985483825D-4 2.074059009552002D0)) (list (list 38.0D0 2315.34814453125D0 0.0015023062005639077D0 2.0865533351898194D0)) (list (list 38.0D0 2321.947265625D0 0.0021572012919932604D0 2.0990476608276367D0)) (list (list 38.0D0 2293.00390625D0 0.0015716443303972483D0 2.111541986465454D0)) (list (list 38.0D0 2294.284912109375D0 0.0019497853936627508D0 2.1240363121032715D0)) (list (list 38.0D0 2313.619873046875D0 0.0031085156369954348D0 2.136530637741089D0)) (list (list 38.0D0 2319.63232421875D0 0.0038759508170187474D0 2.1490249633789063D0)) (list (list 38.0D0 2294.08642578125D0 0.001837611780501902D0 2.1615192890167237D0)) (list (list 38.0D0 2295.272705078125D0 0.0017628507921472192D0 2.174013614654541D0)) (list (list 38.0D0 2303.043701171875D0 0.0023880652152001858D0 2.1865079402923584D0)) (list (list 38.0D0 2303.19189453125D0 0.0029520136304199696D0 2.199002265930176D0)) (list (list 38.0D0 2304.235107421875D0 0.003358476562425494D0 2.211496591567993D0)) (list (list 38.0D0 2303.7685546875D0 0.0034561557695269585D0 2.2239909172058106D0)) (list (list 38.0D0 2302.229248046875D0 0.002969568595290184D0 2.236485242843628D0)) (list (list 38.0D0 2298.758056640625D0 0.00222605699673295D0 2.2489795684814453D0)) (list (list 38.0D0 2299.8125D0 0.001565866288729012D0 2.2614738941192627D0)) (list (list 38.0D0 2291.972900390625D0 3.1379112624563277D-4 2.2864625453948975D0)) (list (list 38.0D0 2289.869140625D0 5.264338687993586D-4 2.298956871032715D0)) (list (list 38.0D0 2309.02197265625D0 0.0022874646820127964D0 2.3114511966705323D0)) (list (list 38.0D0 2288.41015625D0 0.0012217086041346193D0 2.336439847946167D0)) (list (list 38.0D0 2288.9912109375D0 0.0012204889208078385D0 2.3489341735839844D0)) (list (list 38.0D0 2307.549560546875D0 0.0022807444911450148D0 2.3614284992218018D0)) (list (list 38.0D0 2296.352294921875D0 0.0019746311008930207D0 2.373922824859619D0)) (list (list 38.0D0 2292.379638671875D0 0.001756233279593289D0 2.3864171504974366D0)) (list (list 38.0D0 2288.552734375D0 0.0014803020749241114D0 2.398911476135254D0)) (list (list 38.0D0 2287.26513671875D0 0.0013288703048601747D0 2.4114058017730713D0)) (list (list 38.0D0 2290.74951171875D0 0.0013055084273219109D0 2.4239001274108887D0)) (list (list 38.0D0 2297.762939453125D0 0.0016438266029581428D0 2.436394453048706D0)) (list (list 38.0D0 2297.193359375D0 0.0018259882926940918D0 2.4488887786865235D0)) (list (list 38.0D0 2299.490234375D0 0.001774793490767479D0 2.461383104324341D0)) (list (list 38.0D0 2271.600830078125D0 2.523858565837145D-4 2.4863719940185547D0)) (list (list 38.0D0 2276.400390625D0 2.2979384812060744D-4 2.498866319656372D0)) (list (list 38.0D0 2305.612060546875D0 0.0013239776017144323D0 2.5113606452941895D0)) (list (list 38.0D0 2284.501953125D0 4.657210665754974D-4 2.536349296569824D0)) (list (list 38.0D0 2284.137939453125D0 4.796672146767378D-4 2.5488436222076416D0)) (list (list 38.0D0 2302.205322265625D0 7.468645344488323D-4 2.561337947845459D0)) (list (list 38.0D0 2296.864501953125D0 6.551629630848765D-4 2.5738322734832764D0)) (list (list 38.0D0 2293.8369140625D0 4.306784539949149D-4 2.5863265991210938D0)) (list (list 38.0D0 2295.393798828125D0 4.0209354483522475D-4 2.598820924758911D0)) (list (list 38.0D0 2301.312255859375D0 6.491646054200828D-4 2.6113152503967285D0)) (list (list 38.0D0 2292.13671875D0 9.392010979354382D-4 2.623809576034546D0)) (list (list 38.0D0 2291.15869140625D0 0.0011274019489064813D0 2.6363039016723633D0)) (list (list 38.0D0 2292.4921875D0 0.0011502415873110295D0 2.6487982273101807D0)) (list (list 38.0D0 2294.787841796875D0 0.0010866336524486542D0 2.661292552947998D0)) (list (list 38.0D0 2294.538330078125D0 0.0010046822717413307D0 2.6737868785858155D0)) (list (list 38.0D0 2294.787109375D0 0.0010988672729581595D0 2.686281204223633D0)) (list (list 38.0D0 2297.490234375D0 0.0013467146782204509D0 2.69877552986145D0)) (list (list 38.0D0 2287.884765625D0 0.0011705325450748206D0 2.723764181137085D0)) (list (list 38.0D0 2288.639404296875D0 0.0013896068558096886D0 2.7362585067749024D0)) (list (list 38.0D0 2300.59765625D0 0.002252732403576374D0 2.7487528324127198D0)) (list (list 38.0D0 2297.745361328125D0 0.0030754597391933203D0 2.761247158050537D0)) (list (list 38.0D0 2296.7509765625D0 0.0031549432314932347D0 2.7737414836883545D0)) (list (list 38.0D0 2295.14306640625D0 0.002790252212435007D0 2.786235809326172D0)) (list (list 38.0D0 2294.2646484375D0 0.0022865040227770806D0 2.7987301349639893D0)) (list (list 38.0D0 2294.7412109375D0 0.0018458758713677526D0 2.8112244606018067D0)) (list (list 38.0D0 2295.45947265625D0 0.0012854854576289654D0 2.823718786239624D0)) (list (list 38.0D0 2285.269775390625D0 8.03101051133126D-4 2.8362131118774414D0)) (list (list 38.0D0 2283.245361328125D0 7.88681791163981D-4 2.848707437515259D0)) (list (list 38.0D0 2287.952392578125D0 9.139426401816309D-4 2.861201763153076D0)) (list (list 38.0D0 2294.260986328125D0 0.0012011389480903745D0 2.8736960887908936D0)) (list (list 38.0D0 2294.76416015625D0 0.001241706544533372D0 2.886190414428711D0)) (list (list 38.0D0 2294.051025390625D0 0.0011925905710086227D0 2.8986847400665283D0)) (list (list 38.0D0 2293.90966796875D0 0.001364805269986391D0 2.9111790657043457D0)) (list (list 38.0D0 2292.352783203125D0 0.00169312150683254D0 2.923673391342163D0)) (list (list 38.0D0 2291.890869140625D0 0.002055988647043705D0 2.9361677169799805D0)) (list (list 38.0D0 2291.371826171875D0 0.0022227244917303324D0 2.948662042617798D0)) (list (list 38.0D0 2292.22216796875D0 0.002155964495614171D0 2.9611563682556153D0)) (list (list 38.0D0 2291.560791015625D0 0.0019281633431091905D0 2.9736506938934326D0)) (list (list 38.0D0 2291.705810546875D0 0.0017630837392061949D0 2.98614501953125D0)) (list (list 38.0D0 2291.118408203125D0 0.001649910002015531D0 2.9986393451690674D0)) (list (list 38.0D0 2290.578857421875D0 0.0014501922996714712D0 3.0111336708068848D0)) (list (list 38.0D0 2287.539794921875D0 0.0012019231216982007D0 3.0236282348632813D0)) (list (list 38.0D0 2287.841796875D0 0.0010333574609830976D0 3.0361225605010987D0)) (list (list 38.0D0 2290.31982421875D0 0.0011036432115361095D0 3.048616886138916D0)) (list (list 38.0D0 2294.524658203125D0 0.0012667515547946096D0 3.0611112117767334D0)) (list (list 38.0D0 2302.61181640625D0 0.0012085101334378124D0 3.073605537414551D0)) (list (list 38.0D0 2283.335693359375D0 9.473481914028525D-4 3.086099863052368D0)) (list (list 38.0D0 2283.553466796875D0 0.001150402007624507D0 3.0985941886901856D0)) (list (list 38.0D0 2288.48583984375D0 0.0014693901175633073D0 3.111088514328003D0)) (list (list 38.0D0 2287.17578125D0 0.0015502702444791794D0 3.1235828399658203D0)) (list (list 38.0D0 2286.767578125D0 0.001744429930113256D0 3.1360771656036377D0)) (list (list 38.0D0 2288.63818359375D0 0.0023665032349526883D0 3.148571491241455D0)) (list (list 38.0D0 2291.50830078125D0 0.003514559008181095D0 3.1610658168792725D0)) (list (list 38.0D0 2292.99853515625D0 0.004443231970071793D0 3.17356014251709D0)) (list (list 38.0D0 2292.451904296875D0 0.0046592289581894875D0 3.1860544681549073D0)) (list (list 38.0D0 2292.47412109375D0 0.004164764657616615D0 3.1985487937927246D0)) (list (list 38.0D0 2292.859130859375D0 0.0031837415881454945D0 3.211043119430542D0)) (list (list 38.0D0 2295.86474609375D0 0.0019245096482336522D0 3.2235374450683594D0)) (list (list 38.0D0 2303.94482421875D0 0.0011637549614533782D0 3.2360317707061768D0)) (list (list 38.0D0 2284.668701171875D0 0.0011140614515170455D0 3.248526096343994D0)) (list (list 38.0D0 2289.154052734375D0 0.001375397783704102D0 3.2610204219818116D0)) (list (list 38.0D0 2289.37451171875D0 0.0016393595142289997D0 3.273514747619629D0)) (list (list 38.0D0 2290.614990234375D0 0.0016942009096965194D0 3.2860090732574463D0)) (list (list 38.0D0 2286.5703125D0 0.0015304198022931815D0 3.2985033988952637D0)) (list (list 38.0D0 2284.52197265625D0 0.001336221699602902D0 3.310997724533081D0)) (list (list 38.0D0 2288.088134765625D0 0.0012932437239214778D0 3.3234920501708985D0)) (list (list 38.0D0 2297.52587890625D0 0.0017328724497929216D0 3.335986375808716D0)) (list (list 38.0D0 2304.008544921875D0 0.001983020920306444D0 3.348480701446533D0)) (list (list 38.0D0 2284.066650390625D0 0.001250414177775383D0 3.3609750270843506D0)) (list (list 38.0D0 2285.608154296875D0 0.001434354460798204D0 3.373469352722168D0)) (list (list 38.0D0 2302.161376953125D0 0.0023760441690683365D0 3.3859636783599854D0)) (list (list 38.0D0 2296.932861328125D0 0.0022833840921521187D0 3.3984580039978028D0)) (list (list 38.0D0 2295.371337890625D0 0.0018191210692748428D0 3.41095232963562D0)) (list (list 38.0D0 2294.34423828125D0 0.0012512755347415805D0 3.4234466552734375D0)) (list (list 38.0D0 2290.220703125D0 0.0010214013746008277D0 3.435940980911255D0)) (list (list 38.0D0 2287.8779296875D0 0.0013516029575839639D0 3.4484353065490723D0)) (list (list 38.0D0 2290.64697265625D0 0.0018601297633722425D0 3.4609296321868897D0)) (list (list 38.0D0 2291.93603515625D0 0.002219216665253043D0 3.473423957824707D0)) (list (list 38.0D0 2292.35205078125D0 0.0021654705051332713D0 3.4859182834625244D0)) (list (list 38.0D0 2295.05078125D0 0.0017081545665860177D0 3.498412609100342D0)) (list (list 38.0D0 2278.4091796875D0 8.274013525806367D-4 3.510906934738159D0)) (list (list 38.0D0 2274.41552734375D0 6.704509141854942D-4 3.5234012603759766D0)) (list (list 38.0D0 2308.058837890625D0 0.0010054324520751834D0 3.535895586013794D0)) (list (list 38.0D0 2285.294921875D0 7.404090720228851D-4 3.5483899116516114D0)) (list (list 38.0D0 2286.499267578125D0 9.031817317008972D-4 3.5608842372894287D0)) (list (list 38.0D0 2285.83349609375D0 0.0010985868284478784D0 3.573378801345825D0)) (list (list 38.0D0 2286.234375D0 0.0011620407458394766D0 3.5858731269836426D0)) (list (list 38.0D0 2291.98193359375D0 0.0011726411757990718D0 3.59836745262146D0)) (list (list 38.0D0 2290.8486328125D0 6.611800636164844D-4 3.6233561038970948D0)) (list (list 38.0D0 2289.757568359375D0 5.545545718632638D-4 3.635850429534912D0)) (list (list 38.0D0 2288.807373046875D0 8.165222825482488D-4 3.6733334064483643D0)) (list (list 38.0D0 2288.07958984375D0 8.673917618580163D-4 3.6858277320861817D0)) (list (list 38.0D0 2289.260009765625D0 0.0011178525164723397D0 3.698322057723999D0)) (list (list 38.0D0 2293.24169921875D0 0.0013427059166133404D0 3.7108163833618164D0)) (list (list 38.0D0 2293.392822265625D0 0.001282679964788258D0 3.723310708999634D0)) (list (list 38.0D0 2294.557861328125D0 0.0012835764791816473D0 3.735805034637451D0)) (list (list 38.0D0 2294.794677734375D0 0.001365853939205408D0 3.7482993602752686D0)) (list (list 38.0D0 2293.884033203125D0 0.0014822814846411348D0 3.760793685913086D0)) (list (list 38.0D0 2289.243896484375D0 0.0013861353509128094D0 3.7732880115509033D0)) (list (list 38.0D0 2287.134521484375D0 0.0012844422599300743D0 3.7857823371887207D0)) (list (list 38.0D0 2286.2255859375D0 0.0013867170782759786D0 3.798276662826538D0)) (list (list 38.0D0 2287.389404296875D0 0.0014573006192222238D0 3.8107709884643555D0)) (list (list 38.0D0 2291.53857421875D0 0.0013365235645323992D0 3.823265314102173D0)) (list (list 38.0D0 2306.01953125D0 9.85154532827437D-4 3.8482539653778076D0)) (list (list 38.0D0 2276.20166015625D0 3.4280732506886125D-4 3.860748291015625D0)) (list (list 38.0D0 2257.80908203125D0 6.089901216910221D-5 3.8732426166534424D0)) (list (list 38.0D0 2296.791015625D0 0.0012362416600808502D0 3.8857369422912598D0)) (list (list 38.0D0 2291.967041015625D0 0.0013857593294233084D0 3.898231267929077D0)) (list (list 38.0D0 2289.331298828125D0 0.0013219714164733887D0 3.9107255935668946D0)) (list (list 38.0D0 2288.125244140625D0 0.0012006359174847603D0 3.923219919204712D0)) (list (list 38.0D0 2289.958984375D0 0.0010811521206051112D0 3.9357142448425293D0)) (list (list 38.0D0 2292.19140625D0 9.556318400427699D-4 3.9482085704803467D0)) (list (list 38.0D0 2291.636474609375D0 8.078906685113907D-4 3.960702896118164D0)) (list (list 38.0D0 2290.8896484375D0 6.44857354927808D-4 3.9731972217559815D0)) (list (list 38.0D0 2291.15576171875D0 5.030083120800555D-4 3.985691547393799D0)) (list (list 38.0D0 2285.3759765625D0 3.525878710206598D-4 3.998185873031616D0)) (list (list 38.0D0 2282.88037109375D0 3.744812565855682D-4 4.010680198669434D0)) (list (list 38.0D0 2281.942626953125D0 4.867434618063271D-4 4.02317476272583D0)) (list (list 38.0D0 2282.792724609375D0 6.144986837171018D-4 4.035668849945068D0)) (list (list 38.0D0 2285.077392578125D0 7.066574762575328D-4 4.048163414001465D0)) (list (list 38.0D0 2302.083251953125D0 0.0017780340276658535D0 4.0731520652771D0)) (list (list 38.0D0 2304.070068359375D0 0.002038039034232497D0 4.085646152496338D0)) (list (list 38.0D0 2284.856201171875D0 7.897004252299666D-4 4.110634803771973D0)) (list (list 38.0D0 2285.44921875D0 6.714944029226899D-4 4.123129367828369D0)) (list (list 38.0D0 2305.6416015625D0 8.471566252410412D-4 4.135623455047607D0)) (list (list 38.0D0 2288.921630859375D0 8.055293001234531D-4 4.148118019104004D0)) (list (list 38.0D0 2287.744140625D0 9.461110457777977D-4 4.160612106323242D0)) (list (list 38.0D0 2286.179931640625D0 9.696410270407796D-4 4.173106670379639D0)) (list (list 38.0D0 2286.267333984375D0 7.854106370359659D-4 4.185600757598877D0)) (list (list 38.0D0 2291.54345703125D0 5.543942097574472D-4 4.198095321655273D0)) (list (list 38.0D0 2277.61376953125D0 2.45379691477865D-4 4.210589408874512D0)) (list (list 38.0D0 2255.67041015625D0 1.2933515245094896D-4 4.223083972930908D0)) (list (list 38.0D0 2253.7607421875D0 1.4735074364580214D-4 4.2355780601501465D0)) (list (list 38.0D0 2250.0009765625D0 2.2548258129972965D-4 4.248072624206543D0)) (list (list 38.0D0 2243.829345703125D0 3.436563129071146D-4 4.260566711425781D0)) (list (list 38.0D0 2237.3095703125D0 4.500338982325047D-4 4.273061275482178D0)) (list (list 38.0D0 2230.9521484375D0 5.500609986484051D-4 4.285555362701416D0)) (list (list 38.0D0 2231.380859375D0 4.8209846136160195D-4 4.2980499267578125D0)) (list (list 38.0D0 2233.279052734375D0 3.47329507349059D-4 4.310544013977051D0)) (list (list 38.0D0 2235.566162109375D0 2.973894588649273D-4 4.323038578033447D0)) (list (list 38.0D0 2238.656494140625D0 3.4654352930374444D-4 4.3355326652526856D0)) (list (list 38.0D0 2242.489013671875D0 3.8814099389128387D-4 4.348027229309082D0)) (list (list 38.0D0 2271.023193359375D0 4.718147392850369D-4 4.36052131652832D0)) (list (list 38.0D0 2272.8798828125D0 4.5616301940754056D-4 4.373015880584717D0)) (list (list 38.0D0 2271.922607421875D0 3.738002560567111D-4 4.385509967803955D0)) (list (list 38.0D0 2272.450927734375D0 2.8545333771035075D-4 4.398004531860352D0)) (list (list 38.0D0 2274.158935546875D0 2.74792721029371D-4 4.410499095916748D0)) (list (list 38.0D0 2274.635498046875D0 3.013109671883285D-4 4.422993183135986D0)) (list (list 38.0D0 2282.740234375D0 4.8013910418376327D-4 4.447981834411621D0)) (list (list 38.0D0 2281.5390625D0 5.617430433630943D-4 4.460476398468018D0)) (list (list 38.0D0 2281.5390625D0 0.0D0 4.472970485687256D0)) (list (list 39.0D0 1838.451416015625D0 0.0015464700991287828D0 2.111541986465454D0)) (list (list 39.0D0 1839.223388671875D0 0.002776719629764557D0 2.1240363121032715D0)) (list (list 39.0D0 1830.870361328125D0 0.001668061362579465D0 2.1615192890167237D0)) (list (list 39.0D0 1833.53857421875D0 0.0017277608858421445D0 2.174013614654541D0)) (list (list 39.0D0 1842.8341064453125D0 0.003659997833892703D0 2.199002265930176D0)) (list (list 39.0D0 1824.2940673828125D0 7.585775456391275D-4 2.211496591567993D0)) (list (list 39.0D0 1829.3289794921875D0 0.0014562368160113693D0 2.2489795684814453D0)) (list (list 39.0D0 1819.5008544921875D0 9.32753027882427D-4 2.27396821975708D0)) (list (list 39.0D0 1814.1678466796875D0 0.0010875691659748555D0 2.298956871032715D0)) (list (list 39.0D0 1825.693359375D0 0.0010258182883262635D0 2.3239455223083496D0)) (list (list 39.0D0 1842.873779296875D0 0.0040398756973445416D0 2.336439847946167D0)) (list (list 39.0D0 1842.3306884765625D0 0.004698177333921194D0 2.3489341735839844D0)) (list (list 39.0D0 1813.18115234375D0 6.89243315719068D-4 2.3614284992218018D0)) (list (list 39.0D0 1814.0745849609375D0 0.0010235230438411236D0 2.373922824859619D0)) (list (list 39.0D0 1813.130859375D0 0.0012540686875581742D0 2.3864171504974366D0)) (list (list 39.0D0 1802.3907470703125D0 0.0011431036982685328D0 2.398911476135254D0)) (list (list 39.0D0 1838.72216796875D0 0.0038959719240665436D0 2.4239001274108887D0)) (list (list 39.0D0 1810.6529541015625D0 7.536606281064451D-4 2.4488887786865235D0)) (list (list 39.0D0 1807.7789306640625D0 6.510631064884365D-4 2.461383104324341D0)) (list (list 39.0D0 1828.06591796875D0 0.001021889504045248D0 2.4738776683807373D0)) (list (list 39.0D0 1844.2437744140625D0 0.0016344237374141813D0 2.498866319656372D0)) (list (list 39.0D0 1828.625244140625D0 0.0015258676139637828D0 2.5113606452941895D0)) (list (list 39.0D0 1811.188720703125D0 4.5949924970045686D-4 2.536349296569824D0)) (list (list 39.0D0 1836.369384765625D0 0.002356355544179678D0 2.5488436222076416D0)) (list (list 39.0D0 1832.9974365234375D0 0.002003946341574192D0 2.561337947845459D0)) (list (list 39.0D0 1833.7689208984375D0 0.0016373110702261329D0 2.5738322734832764D0)) (list (list 39.0D0 1839.5001220703125D0 9.96452639810741D-4 2.6113152503967285D0)) (list (list 39.0D0 1839.5001220703125D0 0.0D0 2.623809576034546D0)) (list (list 40.0D0 1359.25634765625D0 2.6722525944933295D-4 2.1490249633789063D0)) (list (list 40.0D0 1333.696533203125D0 5.284257349558175D-4 2.1865079402923584D0)) (list (list 40.0D0 1334.893310546875D0 3.3594208071008325D-4 2.199002265930176D0)) (list (list 40.0D0 1318.6170654296875D0 2.740355266723782D-4 2.211496591567993D0)) (list (list 40.0D0 1312.58740234375D0 2.961042046081275D-4 2.2489795684814453D0)) (list (list 40.0D0 1331.9744873046875D0 3.227856068406254D-4 2.2864625453948975D0)) (list (list 40.0D0 1352.404541015625D0 2.761525975074619D-4 2.298956871032715D0)) (list (list 40.0D0 1360.427490234375D0 0.0013982098316773773D0 2.3239455223083496D0)) (list (list 40.0D0 1374.1793212890625D0 0.0038475659675896168D0 2.3489341735839844D0)) (list (list 40.0D0 1349.6019287109375D0 1.9852875266224146D-4 2.3614284992218018D0)) (list (list 40.0D0 1329.4249267578125D0 1.8249190179631114D-4 2.373922824859619D0)) (list (list 40.0D0 1359.133544921875D0 7.528733112849295D-4 2.3864171504974366D0)) (list (list 40.0D0 1333.254638671875D0 3.6287453258410096D-4 2.398911476135254D0)) (list (list 40.0D0 1336.1607666015625D0 5.885374266654253D-4 2.4114058017730713D0)) (list (list 40.0D0 1341.754638671875D0 7.847708184272051D-4 2.4239001274108887D0)) (list (list 40.0D0 1331.9456787109375D0 6.949904491193593D-4 2.436394453048706D0)) (list (list 40.0D0 1325.947265625D0 5.83367538638413D-4 2.4488887786865235D0)) (list (list 40.0D0 1323.3482666015625D0 5.412313039414585D-4 2.461383104324341D0)) (list (list 40.0D0 1323.46875D0 5.259293247945607D-4 2.4738776683807373D0)) (list (list 40.0D0 1327.287841796875D0 4.676500102505088D-4 2.4863719940185547D0)) (list (list 40.0D0 1332.488525390625D0 3.92524350900203D-4 2.498866319656372D0)) (list (list 40.0D0 1321.8946533203125D0 1.5268209972418845D-4 2.5113606452941895D0)) (list (list 40.0D0 1344.8443603515625D0 3.741397522389889D-4 2.523854970932007D0)) (list (list 40.0D0 1336.3436279296875D0 2.828366996254772D-4 2.536349296569824D0)) (list (list 40.0D0 1328.2294921875D0 2.799521025735885D-4 2.5488436222076416D0)) (list (list 40.0D0 1326.66259765625D0 3.1624853727407754D-4 2.561337947845459D0)) (list (list 40.0D0 1328.24462890625D0 3.0784221598878503D-4 2.5738322734832764D0)) (list (list 40.0D0 1366.240234375D0 9.711359161883593D-4 2.598820924758911D0)) (list (list 40.0D0 1336.90283203125D0 2.025537396548316D-4 2.6113152503967285D0)) (list (list 40.0D0 1319.4102783203125D0 1.0915163875324652D-4 2.623809576034546D0)) (list (list 40.0D0 1320.927490234375D0 1.4842314703855664D-4 2.6363039016723633D0)) (list (list 40.0D0 1325.56689453125D0 2.1609450050164014D-4 2.6487982273101807D0)) (list (list 40.0D0 1339.556884765625D0 3.3377352519892156D-4 2.661292552947998D0)) (list (list 40.0D0 1343.20556640625D0 3.1251818290911615D-4 2.6737868785858155D0)) (list (list 40.0D0 1357.1358642578125D0 4.941866500303149D-4 2.686281204223633D0)) (list (list 40.0D0 1348.370849609375D0 3.120008623227477D-4 2.69877552986145D0)) (list (list 40.0D0 1352.7552490234375D0 2.264277427457273D-4 2.7112698554992676D0)) (list (list 40.0D0 1322.6285400390625D0 1.9465330115053803D-4 2.723764181137085D0)) (list (list 40.0D0 1323.9783935546875D0 1.717942941468209D-4 2.7362585067749024D0)) (list (list 40.0D0 1326.795166015625D0 1.7994926020037383D-4 2.7487528324127198D0)) (list (list 40.0D0 1357.6451416015625D0 6.922727334313095D-4 2.761247158050537D0)) (list (list 40.0D0 1351.680908203125D0 5.48665935639292D-4 2.7737414836883545D0)) (list (list 40.0D0 1345.692138671875D0 5.089232581667602D-4 2.786235809326172D0)) (list (list 40.0D0 1348.45166015625D0 5.251148832030594D-4 2.7987301349639893D0)) (list (list 40.0D0 1345.469970703125D0 6.309267482720315D-4 2.8112244606018067D0)) (list (list 40.0D0 1344.6695556640625D0 7.564671686850488D-4 2.823718786239624D0)) (list (list 40.0D0 1349.219482421875D0 6.692681345157325D-4 2.8362131118774414D0)) (list (list 40.0D0 1350.3453369140625D0 5.790690775029361D-4 2.848707437515259D0)) (list (list 40.0D0 1354.0245361328125D0 4.544281109701842D-4 2.861201763153076D0)) (list (list 40.0D0 1355.72216796875D0 5.587358609773219D-4 2.8736960887908936D0)) (list (list 40.0D0 1352.2747802734375D0 6.619069026783109D-4 2.886190414428711D0)) (list (list 40.0D0 1352.6746826171875D0 0.0011967984028160572D0 2.8986847400665283D0)) (list (list 40.0D0 1350.366455078125D0 0.0014492456102743745D0 2.9111790657043457D0)) (list (list 40.0D0 1371.4295654296875D0 0.003204614855349064D0 2.923673391342163D0)) (list (list 40.0D0 1332.1475830078125D0 5.905655561946332D-4 2.9361677169799805D0)) (list (list 40.0D0 1332.9970703125D0 4.353782569523901D-4 2.948662042617798D0)) (list (list 40.0D0 1343.156494140625D0 4.327092319726944D-4 2.9611563682556153D0)) (list (list 40.0D0 1340.7757568359375D0 3.7726288428530097D-4 2.9736506938934326D0)) (list (list 40.0D0 1335.08056640625D0 4.1983791743405163D-4 2.98614501953125D0)) (list (list 40.0D0 1334.3643798828125D0 5.299636977724731D-4 2.9986393451690674D0)) (list (list 40.0D0 1337.457275390625D0 5.338358459994197D-4 3.0111336708068848D0)) (list (list 40.0D0 1342.01708984375D0 5.680644535459578D-4 3.0236282348632813D0)) (list (list 40.0D0 1345.8155517578125D0 6.49726833216846D-4 3.0361225605010987D0)) (list (list 40.0D0 1351.922607421875D0 0.0010411703260615468D0 3.048616886138916D0)) (list (list 40.0D0 1348.7957763671875D0 0.0013566340785473586D0 3.0611112117767334D0)) (list (list 40.0D0 1353.0130615234375D0 0.001362608396448195D0 3.073605537414551D0)) (list (list 40.0D0 1341.66015625D0 0.0011778685729950667D0 3.086099863052368D0)) (list (list 40.0D0 1340.8758544921875D0 8.973883814178407D-4 3.0985941886901856D0)) (list (list 40.0D0 1348.9609375D0 6.050286465324462D-4 3.111088514328003D0)) (list (list 40.0D0 1351.9150390625D0 7.638489478267729D-4 3.1235828399658203D0)) (list (list 40.0D0 1328.241943359375D0 5.48014766536653D-4 3.1360771656036377D0)) (list (list 40.0D0 1336.2867431640625D0 4.5802403474226594D-4 3.148571491241455D0)) (list (list 40.0D0 1337.162841796875D0 2.785456890705973D-4 3.1610658168792725D0)) (list (list 40.0D0 1320.6016845703125D0 1.929561112774536D-4 3.17356014251709D0)) (list (list 40.0D0 1322.9197998046875D0 2.1117323194630444D-4 3.1860544681549073D0)) (list (list 40.0D0 1320.30029296875D0 2.783753734547645D-4 3.1985487937927246D0)) (list (list 40.0D0 1322.40673828125D0 3.4157559275627136D-4 3.211043119430542D0)) (list (list 40.0D0 1340.207275390625D0 6.076886784285307D-4 3.2235374450683594D0)) (list (list 40.0D0 1338.2855224609375D0 6.314557394944131D-4 3.2360317707061768D0)) (list (list 40.0D0 1331.0018310546875D0 4.8159182188101113D-4 3.248526096343994D0)) (list (list 40.0D0 1327.07275390625D0 4.0842266753315926D-4 3.2610204219818116D0)) (list (list 40.0D0 1326.871337890625D0 3.5322734038345516D-4 3.273514747619629D0)) (list (list 40.0D0 1324.663330078125D0 2.760747156571597D-4 3.2860090732574463D0)) (list (list 40.0D0 1325.109375D0 2.1756382193416357D-4 3.2985033988952637D0)) (list (list 40.0D0 1355.2467041015625D0 4.244691226631403D-4 3.310997724533081D0)) (list (list 40.0D0 1323.60791015625D0 1.5835209342185408D-4 3.3234920501708985D0)) (list (list 40.0D0 1323.5037841796875D0 1.6783976752776653D-4 3.335986375808716D0)) (list (list 40.0D0 1328.228515625D0 2.1034496603533626D-4 3.348480701446533D0)) (list (list 40.0D0 1345.8468017578125D0 6.079828017391264D-4 3.3609750270843506D0)) (list (list 40.0D0 1341.0301513671875D0 4.6490092063322664D-4 3.373469352722168D0)) (list (list 40.0D0 1342.284423828125D0 4.853157442994416D-4 3.3859636783599854D0)) (list (list 40.0D0 1344.6400146484375D0 4.769813094753772D-4 3.3984580039978028D0)) (list (list 40.0D0 1353.8529052734375D0 6.03247550316155D-4 3.41095232963562D0)) (list (list 40.0D0 1347.6846923828125D0 5.918494425714016D-4 3.4234466552734375D0)) (list (list 40.0D0 1347.0269775390625D0 6.74563052598387D-4 3.435940980911255D0)) (list (list 40.0D0 1341.6151123046875D0 7.075750036165118D-4 3.4484353065490723D0)) (list (list 40.0D0 1342.1536865234375D0 9.67393396422267D-4 3.4609296321868897D0)) (list (list 40.0D0 1345.3399658203125D0 0.001302029239013791D0 3.473423957824707D0)) (list (list 40.0D0 1319.459228515625D0 2.628470538184047D-4 3.4859182834625244D0)) (list (list 40.0D0 1359.938720703125D0 0.001471613417379558D0 3.510906934738159D0)) (list (list 40.0D0 1365.1121826171875D0 8.10184283182025D-4 3.5234012603759766D0)) (list (list 40.0D0 1368.51953125D0 9.33188246563077D-4 3.535895586013794D0)) (list (list 40.0D0 1353.899169921875D0 8.196341805160046D-4 3.5483899116516114D0)) (list (list 40.0D0 1346.54296875D0 8.075846708379686D-4 3.5608842372894287D0)) (list (list 40.0D0 1353.8616943359375D0 7.776360143907368D-4 3.573378801345825D0)) (list (list 40.0D0 1359.4588623046875D0 4.889460396952927D-4 3.5858731269836426D0)) (list (list 40.0D0 1351.0897216796875D0 6.707692518830299D-4 3.59836745262146D0)) (list (list 40.0D0 1347.57080078125D0 8.290078840218484D-4 3.6108617782592774D0)) (list (list 40.0D0 1345.58740234375D0 8.999028941616416D-4 3.6233561038970948D0)) (list (list 40.0D0 1352.560302734375D0 6.996918236836791D-4 3.635850429534912D0)) (list (list 40.0D0 1332.3265380859375D0 3.8645585300400853D-4 3.6483447551727295D0)) (list (list 40.0D0 1351.94140625D0 3.111381083726883D-4 3.660839080810547D0)) (list (list 40.0D0 1354.3687744140625D0 3.7866405909880996D-4 3.6733334064483643D0)) (list (list 40.0D0 1360.64404296875D0 4.1956276982091367D-4 3.6858277320861817D0)) (list (list 40.0D0 1363.3092041015625D0 7.324197795242071D-4 3.698322057723999D0)) (list (list 40.0D0 1334.594970703125D0 4.805776698049158D-4 3.7108163833618164D0)) (list (list 40.0D0 1348.0101318359375D0 4.8389824223704636D-4 3.723310708999634D0)) (list (list 40.0D0 1347.154296875D0 6.005617324262857D-4 3.735805034637451D0)) (list (list 40.0D0 1322.547119140625D0 2.9546875157393515D-4 3.7482993602752686D0)) (list (list 40.0D0 1337.9876708984375D0 4.1326030623167753D-4 3.760793685913086D0)) (list (list 40.0D0 1337.8258056640625D0 3.937243891414255D-4 3.7732880115509033D0)) (list (list 40.0D0 1312.7711181640625D0 1.6308974591083825D-4 3.7857823371887207D0)) (list (list 40.0D0 1293.8980712890625D0 1.5250578871928156D-4 3.798276662826538D0)) (list (list 40.0D0 1323.46142578125D0 3.125560178887099D-4 3.8357596397399903D0)) (list (list 40.0D0 1323.4508056640625D0 2.623072941787541D-4 3.8482539653778076D0)) (list (list 40.0D0 1339.0482177734375D0 2.9438987257890403D-4 3.8732426166534424D0)) (list (list 40.0D0 1324.7490234375D0 2.3210405197460205D-4 3.8857369422912598D0)) (list (list 40.0D0 1326.072509765625D0 3.15837882226333D-4 3.898231267929077D0)) (list (list 40.0D0 1332.358154296875D0 5.059930845163763D-4 3.9107255935668946D0)) (list (list 40.0D0 1332.230712890625D0 5.721860215999186D-4 3.923219919204712D0)) (list (list 40.0D0 1331.4549560546875D0 4.621861153282225D-4 3.9357142448425293D0)) (list (list 40.0D0 1340.0361328125D0 3.084467025473714D-4 3.9482085704803467D0)) (list (list 40.0D0 1341.2337646484375D0 2.1659581398125738D-4 3.960702896118164D0)) (list (list 40.0D0 1338.31640625D0 2.517570392228663D-4 3.9731972217559815D0)) (list (list 40.0D0 1340.1617431640625D0 3.716088249348104D-4 3.985691547393799D0)) (list (list 40.0D0 1339.83154296875D0 4.6371371718123555D-4 3.998185873031616D0)) (list (list 40.0D0 1334.4671630859375D0 5.335351452231407D-4 4.010680198669434D0)) (list (list 40.0D0 1334.8131103515625D0 5.112250219099224D-4 4.02317476272583D0)) (list (list 40.0D0 1342.7618408203125D0 4.594147903844714D-4 4.035668849945068D0)) (list (list 40.0D0 1346.6690673828125D0 5.564434104599059D-4 4.048163414001465D0)) (list (list 40.0D0 1351.861083984375D0 7.141976966522634D-4 4.060657501220703D0)) (list (list 40.0D0 1350.6092529296875D0 7.241076091304421D-4 4.0731520652771D0)) (list (list 40.0D0 1351.689453125D0 8.908518357202411D-4 4.085646152496338D0)) (list (list 40.0D0 1352.482177734375D0 9.228653507307172D-4 4.098140716552734D0)) (list (list 40.0D0 1357.2242431640625D0 9.323859121650457D-4 4.110634803771973D0)) (list (list 40.0D0 1335.429931640625D0 3.468445793259889D-4 4.123129367828369D0)) (list (list 40.0D0 1370.016357421875D0 0.0018727313727140427D0 4.135623455047607D0)) (list (list 40.0D0 1332.935791015625D0 1.1130317579954863D-4 4.148118019104004D0)) (list (list 40.0D0 1356.6925048828125D0 7.035313174128532D-4 4.160612106323242D0)) (list (list 40.0D0 1354.313232421875D0 6.722339894622564D-4 4.173106670379639D0)) (list (list 40.0D0 1350.0118408203125D0 7.747217314317822D-4 4.185600757598877D0)) (list (list 40.0D0 1345.8388671875D0 8.611649391241372D-4 4.198095321655273D0)) (list (list 40.0D0 1346.9742431640625D0 8.843353716656566D-4 4.210589408874512D0)) (list (list 40.0D0 1355.3740234375D0 9.761765832081437D-4 4.223083972930908D0)) (list (list 40.0D0 1361.0621337890625D0 0.0011825450928881765D0 4.2355780601501465D0)) (list (list 40.0D0 1364.192138671875D0 0.0013049535918980837D0 4.248072624206543D0)) (list (list 40.0D0 1365.5108642578125D0 0.0012013423256576062D0 4.285555362701416D0)) (list (list 40.0D0 1360.073486328125D0 0.001057773013599217D0 4.2980499267578125D0)) (list (list 40.0D0 1359.4013671875D0 0.0013003480853512884D0 4.310544013977051D0)) (list (list 40.0D0 1375.59521484375D0 0.004240774549543858D0 4.3355326652526856D0)) (list (list 40.0D0 1356.8157958984375D0 0.001306011457927525D0 4.348027229309082D0)) (list (list 40.0D0 1354.84716796875D0 0.0016395632410421968D0 4.36052131652832D0)) (list (list 40.0D0 1358.50927734375D0 0.00225140992552042D0 4.373015880584717D0)) (list (list 40.0D0 1359.21044921875D0 0.0025268392637372017D0 4.385509967803955D0)) (list (list 40.0D0 1362.2891845703125D0 0.0021067706402391196D0 4.398004531860352D0)) (list (list 40.0D0 1372.3831787109375D0 0.001739391591399908D0 4.410499095916748D0)) (list (list 40.0D0 1354.9783935546875D0 5.229691741988063D-4 4.422993183135986D0)) (list (list 40.0D0 1337.423828125D0 3.7436169805005193D-4 4.435487747192383D0)) (list (list 40.0D0 1338.0909423828125D0 3.9647522498853505D-4 4.447981834411621D0)) (list (list 40.0D0 1344.4356689453125D0 4.555249179247767D-4 4.460476398468018D0)) (list (list 40.0D0 1353.07568359375D0 7.241983548738062D-4 4.472970485687256D0)) (list (list 40.0D0 1361.0860595703125D0 9.611124405637384D-4 4.485465049743652D0)) (list (list 40.0D0 1358.5308837890625D0 9.427084005437791D-4 4.497959136962891D0)) (list (list 40.0D0 1362.5928955078125D0 9.151326958090067D-4 4.510453701019287D0)) (list (list 40.0D0 1326.5618896484375D0 1.258931151824072D-4 4.522947788238525D0)) (list (list 40.0D0 1369.689697265625D0 0.0013545914553105832D0 4.535442352294922D0)) (list (list 40.0D0 1348.153564453125D0 2.265356306452304D-4 4.54793643951416D0)) (list (list 40.0D0 1345.96484375D0 4.3809294584207237D-4 4.560431003570557D0)) (list (list 40.0D0 1342.6588134765625D0 5.849084700457752D-4 4.572925090789795D0)) (list (list 40.0D0 1339.2791748046875D0 6.8480713525787D-4 4.585419654846191D0)) (list (list 40.0D0 1338.0413818359375D0 6.796504021622241D-4 4.59791374206543D0)) (list (list 40.0D0 1336.860107421875D0 6.436456460505724D-4 4.610408306121826D0)) (list (list 40.0D0 1335.943603515625D0 5.948186735622585D-4 4.6229023933410645D0)) (list (list 40.0D0 1332.9178466796875D0 5.142997833900154D-4 4.635396957397461D0)) (list (list 40.0D0 1331.2265625D0 4.925978719256818D-4 4.647891044616699D0)) (list (list 40.0D0 1332.3189697265625D0 5.533898365683854D-4 4.660385608673096D0)) (list (list 40.0D0 1335.990234375D0 6.57538534142077D-4 4.672879695892334D0)) (list (list 40.0D0 1338.5767822265625D0 6.555435829795897D-4 4.6853742599487305D0)) (list (list 40.0D0 1341.946533203125D0 4.8106751637533307D-4 4.697868347167969D0)) (list (list 40.0D0 1367.8919677734375D0 0.001059703528881073D0 4.710362911224365D0)) (list (list 40.0D0 1368.547607421875D0 9.881982114166022D-4 4.7228569984436035D0)) (list (list 40.0D0 1356.393310546875D0 7.224851869978011D-4 4.7353515625D0)) (list (list 40.0D0 1374.72412109375D0 7.478886400349438D-4 4.747845649719238D0)) (list (list 40.0D0 1327.65576171875D0 2.77059618383646D-4 4.760340213775635D0)) (list (list 40.0D0 1324.4180908203125D0 2.399573422735557D-4 4.772834300994873D0)) (list (list 40.0D0 1323.0897216796875D0 1.9772657833527774D-4 4.7853288650512695D0)) (list (list 40.0D0 1348.45947265625D0 1.7751117411535233D-4 4.797822952270508D0)) (list (list 40.0D0 1323.446533203125D0 1.329295482719317D-4 4.822811603546143D0)) (list (list 40.0D0 1344.8251953125D0 4.4647781760431826D-4 4.835306167602539D0)) (list (list 40.0D0 1348.7698974609375D0 4.0673662442713976D-4 4.847800254821777D0)) (list (list 40.0D0 1360.6807861328125D0 6.234417087398469D-4 4.860294818878174D0)) (list (list 40.0D0 1360.26708984375D0 6.532884435728192D-4 4.872788906097412D0)) (list (list 40.0D0 1329.9598388671875D0 3.6262517096474767D-4 4.897777557373047D0)) (list (list 40.0D0 1333.7291259765625D0 4.0346934110857547D-4 4.910272121429443D0)) (list (list 40.0D0 1340.37939453125D0 5.885158898308873D-4 4.922766208648682D0)) (list (list 40.0D0 1342.5723876953125D0 7.211709162220359D-4 4.935260772705078D0)) (list (list 40.0D0 1344.78955078125D0 7.598906522616744D-4 4.947755336761475D0)) (list (list 40.0D0 1343.316162109375D0 6.564592476934195D-4 4.960249423980713D0)) (list (list 40.0D0 1344.0D0 5.426802672445774D-4 4.972743988037109D0)) (list (list 40.0D0 1345.9097900390625D0 5.089729093015194D-4 4.985238075256348D0)) (list (list 40.0D0 1354.985595703125D0 3.354056098032743D-4 5.010226726531982D0)) (list (list 40.0D0 1354.985595703125D0 0.0D0 5.022721290588379D0)) (list (list 41.0D0 1376.3031005859375D0 0.005733124446123838D0 2.523854970932007D0)) (list (list 41.0D0 1369.092041015625D0 8.30214936286211D-4 2.561337947845459D0)) (list (list 41.0D0 1350.4251708984375D0 2.9542366974055767D-4 2.5738322734832764D0)) (list (list 41.0D0 1362.56005859375D0 6.8194221239537D-4 2.5863265991210938D0)) (list (list 41.0D0 1370.2818603515625D0 0.0022766096517443657D0 2.623809576034546D0)) (list (list 41.0D0 1370.423583984375D0 0.002030987059697509D0 2.6363039016723633D0)) (list (list 41.0D0 1370.423583984375D0 0.0D0 2.6487982273101807D0)) (list (list 42.0D0 3715.387451171875D0 0.0014391863951459527D0 2.661292552947998D0)) (list (list 42.0D0 3719.86181640625D0 0.0012793480418622494D0 2.6737868785858155D0)) (list (list 42.0D0 3699.31884765625D0 8.236747817136347D-4 2.7112698554992676D0)) (list (list 42.0D0 3705.70654296875D0 7.565891137346625D-4 2.723764181137085D0)) (list (list 42.0D0 3691.84375D0 7.477090694010258D-4 2.7362585067749024D0)) (list (list 42.0D0 3690.58740234375D0 9.515635319985449D-4 2.7487528324127198D0)) (list (list 42.0D0 3694.643310546875D0 0.0011320828925818205D0 2.761247158050537D0)) (list (list 42.0D0 3691.902587890625D0 0.0010288552148267627D0 2.7737414836883545D0)) (list (list 42.0D0 3691.707763671875D0 9.288790170103312D-4 2.786235809326172D0)) (list (list 42.0D0 3696.511474609375D0 9.017925476655364D-4 2.7987301349639893D0)) (list (list 42.0D0 3687.9453125D0 4.2064100853167474D-4 2.823718786239624D0)) (list (list 42.0D0 3675.97900390625D0 5.311878048814833D-4 2.8362131118774414D0)) (list (list 42.0D0 3678.34521484375D0 6.027663475833833D-4 2.848707437515259D0)) (list (list 42.0D0 3683.548095703125D0 6.034321268089116D-4 2.861201763153076D0)) (list (list 42.0D0 3655.053955078125D0 6.109037203714252D-4 2.886190414428711D0)) (list (list 42.0D0 3662.615478515625D0 7.794085540808737D-4 2.8986847400665283D0)) (list (list 42.0D0 3664.132080078125D0 8.569631027057767D-4 2.9111790657043457D0)) (list (list 42.0D0 3661.398681640625D0 7.636323571205139D-4 2.923673391342163D0)) (list (list 42.0D0 3659.526611328125D0 6.413324153982103D-4 2.9361677169799805D0)) (list (list 42.0D0 3659.844970703125D0 5.146073526702821D-4 2.948662042617798D0)) (list (list 42.0D0 3692.474609375D0 6.99290307238698D-4 2.9611563682556153D0)) (list (list 42.0D0 3687.878662109375D0 6.932978867553175D-4 2.9736506938934326D0)) (list (list 42.0D0 3686.41064453125D0 8.547822362743318D-4 2.98614501953125D0)) (list (list 42.0D0 3683.364501953125D0 8.119144476950169D-4 2.9986393451690674D0)) (list (list 42.0D0 3670.74072265625D0 6.624731468036771D-4 3.0111336708068848D0)) (list (list 42.0D0 3668.34765625D0 6.679959478788078D-4 3.0236282348632813D0)) (list (list 42.0D0 3671.950439453125D0 6.938287406228483D-4 3.0361225605010987D0)) (list (list 42.0D0 3676.491943359375D0 8.56783299241215D-4 3.048616886138916D0)) (list (list 42.0D0 3676.736328125D0 9.931008098646999D-4 3.0611112117767334D0)) (list (list 42.0D0 3679.001953125D0 0.0012284682597965002D0 3.073605537414551D0)) (list (list 42.0D0 3682.399658203125D0 0.0015136395813897252D0 3.086099863052368D0)) (list (list 42.0D0 3687.397705078125D0 0.001685555325821042D0 3.0985941886901856D0)) (list (list 42.0D0 3693.06982421875D0 0.0011900132521986962D0 3.1235828399658203D0)) (list (list 42.0D0 3697.22705078125D0 8.835397311486304D-4 3.1360771656036377D0)) (list (list 42.0D0 3680.0751953125D0 7.251063943840563D-4 3.148571491241455D0)) (list (list 42.0D0 3684.876953125D0 0.0015016170218586922D0 3.1860544681549073D0)) (list (list 42.0D0 3679.968017578125D0 0.001438861363567412D0 3.1985487937927246D0)) (list (list 42.0D0 3679.978271484375D0 0.0014401256339624525D0 3.211043119430542D0)) (list (list 42.0D0 3707.291259765625D0 0.0044722780585289D0 3.2235374450683594D0)) (list (list 42.0D0 3688.365234375D0 9.046471095643938D-4 3.2610204219818116D0)) (list (list 42.0D0 3703.35400390625D0 0.0018896486144512892D0 3.273514747619629D0)) (list (list 42.0D0 3681.361328125D0 7.204992580227554D-4 3.2860090732574463D0)) (list (list 42.0D0 3677.311279296875D0 7.988279103301466D-4 3.2985033988952637D0)) (list (list 42.0D0 3668.819091796875D0 9.123916388489306D-4 3.310997724533081D0)) (list (list 42.0D0 3694.485595703125D0 0.001215473166666925D0 3.335986375808716D0)) (list (list 42.0D0 3682.512939453125D0 0.001036431873217225D0 3.3609750270843506D0)) (list (list 42.0D0 3684.97412109375D0 0.0012789139291271568D0 3.373469352722168D0)) (list (list 42.0D0 3688.891357421875D0 6.554823485203087D-4 3.41095232963562D0)) (list (list 42.0D0 3672.84375D0 8.358452760148794D-5 3.4234466552734375D0)) (list (list 42.0D0 3654.831787109375D0 1.8872201326303184D-4 3.435940980911255D0)) (list (list 42.0D0 3695.34619140625D0 7.395724533125758D-4 3.4609296321868897D0)) (list (list 42.0D0 3671.103759765625D0 6.369719048961997D-4 3.473423957824707D0)) (list (list 42.0D0 3708.00439453125D0 9.594716248102486D-4 3.498412609100342D0)) (list (list 42.0D0 3682.647705078125D0 5.246417131274939D-4 3.5234012603759766D0)) (list (list 42.0D0 3679.635498046875D0 5.258482415229082D-4 3.535895586013794D0)) (list (list 42.0D0 3661.1826171875D0 4.2572920210659504D-4 3.5483899116516114D0)) (list (list 42.0D0 3662.051513671875D0 3.0411581974476576D-4 3.5608842372894287D0)) (list (list 42.0D0 3684.0166015625D0 5.603727768175304D-4 3.573378801345825D0)) (list (list 42.0D0 3681.38427734375D0 5.783671513199806D-4 3.5858731269836426D0)) (list (list 42.0D0 3686.958251953125D0 5.543680163100362D-4 3.59836745262146D0)) (list (list 42.0D0 3686.635986328125D0 4.8130491632036865D-4 3.6108617782592774D0)) (list (list 42.0D0 3688.01806640625D0 3.9923982694745064D-4 3.6233561038970948D0)) (list (list 42.0D0 3697.28955078125D0 3.871600783895701D-4 3.635850429534912D0)) (list (list 42.0D0 3697.28955078125D0 0.0D0 3.6483447551727295D0)) (list (list 43.0D0 3753.1552734375D0 0.002000248059630394D0 2.9986393451690674D0)) (list (list 43.0D0 3764.548583984375D0 9.25443135201931D-4 3.0111336708068848D0)) (list (list 43.0D0 3770.177734375D0 9.539701277390122D-4 3.0236282348632813D0)) (list (list 43.0D0 3760.68212890625D0 0.001638860092498362D0 3.048616886138916D0)) (list (list 43.0D0 3760.78173828125D0 0.0017065691063180566D0 3.0611112117767334D0)) (list (list 43.0D0 3760.89697265625D0 0.0012398672988638282D0 3.0985941886901856D0)) (list (list 43.0D0 3756.95751953125D0 0.0014167107874527574D0 3.111088514328003D0)) (list (list 43.0D0 3779.193603515625D0 5.865950370207429D-4 3.1235828399658203D0)) (list (list 43.0D0 3755.541748046875D0 0.0022569550201296807D0 3.1360771656036377D0)) (list (list 43.0D0 3762.78955078125D0 0.0021730021107941866D0 3.148571491241455D0)) (list (list 43.0D0 3760.622314453125D0 0.0024533672258257866D0 3.1610658168792725D0)) (list (list 43.0D0 3738.087890625D0 0.006242816336452961D0 3.17356014251709D0)) (list (list 43.0D0 3768.826171875D0 0.0019439348252490163D0 3.1860544681549073D0)) (list (list 43.0D0 3771.086669921875D0 0.002432552631944418D0 3.1985487937927246D0)) (list (list 43.0D0 3760.654052734375D0 0.0038331064861267805D0 3.2235374450683594D0)) (list (list 43.0D0 3762.784912109375D0 0.0027602622285485268D0 3.2360317707061768D0)) (list (list 43.0D0 3761.9853515625D0 0.0014166317414492369D0 3.248526096343994D0)) (list (list 43.0D0 3767.7041015625D0 5.015480564907193D-4 3.2610204219818116D0)) (list (list 43.0D0 3758.2568359375D0 9.274707408621907D-4 3.2985033988952637D0)) (list (list 43.0D0 3766.27783203125D0 0.0011675520800054074D0 3.310997724533081D0)) (list (list 43.0D0 3777.80126953125D0 6.448944332078099D-4 3.3234920501708985D0)) (list (list 43.0D0 3803.469482421875D0 8.196819107979536D-4 3.335986375808716D0)) (list (list 43.0D0 3815.463623046875D0 6.244721007533371D-4 3.3609750270843506D0)) (list (list 43.0D0 3767.747314453125D0 0.0017844896065071226D0 3.373469352722168D0)) (list (list 43.0D0 3748.314697265625D0 0.001415470615029335D0 3.3859636783599854D0)) (list (list 43.0D0 3770.109619140625D0 8.438794175162911D-4 3.3984580039978028D0)) (list (list 43.0D0 3772.05029296875D0 8.157693664543331D-4 3.41095232963562D0)) (list (list 43.0D0 3775.9384765625D0 8.223699987865984D-4 3.4234466552734375D0)) (list (list 43.0D0 3777.937744140625D0 8.552368963137269D-4 3.435940980911255D0)) (list (list 43.0D0 3786.68017578125D0 8.708039531484246D-4 3.4484353065490723D0)) (list (list 43.0D0 3756.41064453125D0 0.0011352574219927192D0 3.4609296321868897D0)) (list (list 43.0D0 3755.65771484375D0 0.001328823622316122D0 3.473423957824707D0)) (list (list 43.0D0 3756.39404296875D0 0.0014877179637551308D0 3.498412609100342D0)) (list (list 43.0D0 3756.39404296875D0 0.0D0 3.510906934738159D0)) (list (list 44.0D0 1844.160400390625D0 0.0023927781730890274D0 3.0236282348632813D0)) (list (list 44.0D0 1843.55859375D0 0.00228976015932858D0 3.0361225605010987D0)) (list (list 44.0D0 1833.2237548828125D0 0.0017711269902065397D0 3.048616886138916D0)) (list (list 44.0D0 1829.1748046875D0 0.0020080895628780127D0 3.0611112117767334D0)) (list (list 44.0D0 1827.2830810546875D0 0.002202801639214158D0 3.073605537414551D0)) (list (list 44.0D0 1829.422119140625D0 0.0021868476178497076D0 3.086099863052368D0)) (list (list 44.0D0 1835.9947509765625D0 0.0024096376728266478D0 3.0985941886901856D0)) (list (list 44.0D0 1839.3424072265625D0 0.0038830144330859185D0 3.1235828399658203D0)) (list (list 44.0D0 1836.908447265625D0 0.004311299417167902D0 3.1360771656036377D0)) (list (list 44.0D0 1842.8114013671875D0 0.007706496398895979D0 3.1610658168792725D0)) (list (list 44.0D0 1842.8114013671875D0 0.0D0 3.17356014251709D0) (list 45.0D0 5621.3974609375D0 0.0019792807288467884D0 3.0611112117767334D0) (list 45.0D0 5625.09716796875D0 0.001472854521125555D0 3.073605537414551D0) (list 45.0D0 5627.712890625D0 0.0013581401435658336D0 3.086099863052368D0) (list 45.0D0 5598.12353515625D0 0.004346848931163549D0 3.111088514328003D0) (list 45.0D0 5621.57421875D0 0.0017764572985470295D0 3.1235828399658203D0) (list 45.0D0 5627.59716796875D0 0.0014402024680748582D0 3.1360771656036377D0) (list 45.0D0 5633.3076171875D0 0.0016588495345786214D0 3.148571491241455D0) (list 45.0D0 5631.0830078125D0 0.001863829675130546D0 3.1610658168792725D0) (list 45.0D0 5598.134765625D0 0.014725246466696263D0 3.17356014251709D0) (list 45.0D0 5576.8427734375D0 0.004819249734282494D0 3.1860544681549073D0) (list 45.0D0 5574.77490234375D0 0.003850604174658656D0 3.1985487937927246D0) (list 45.0D0 5547.873046875D0 0.0014598240377381444D0 3.211043119430542D0) (list 45.0D0 5563.1142578125D0 0.0021052740048617125D0 3.2235374450683594D0) (list 45.0D0 5596.24169921875D0 0.016335688531398773D0 3.2360317707061768D0) (list 45.0D0 5627.76318359375D0 0.0017836735351011157D0 3.248526096343994D0) (list 45.0D0 5636.84619140625D0 0.0016937322216108442D0 3.2610204219818116D0) (list 45.0D0 5638.162109375D0 0.00144837680272758D0 3.273514747619629D0) (list 45.0D0 5634.63427734375D0 0.0014171319780871273D0 3.2860090732574463D0) (list 45.0D0 5628.310546875D0 0.0019324366003274918D0 3.2985033988952637D0) (list 45.0D0 5622.51171875D0 0.0025301212444901467D0 3.310997724533081D0) (list 45.0D0 5622.3955078125D0 0.002711482346057892D0 3.3234920501708985D0) (list 45.0D0 5625.904296875D0 0.002539378358051181D0 3.335986375808716D0) (list 45.0D0 5626.20947265625D0 0.0025629187002778054D0 3.348480701446533D0) (list 45.0D0 5624.12744140625D0 0.0026926298160105944D0 3.3609750270843506D0) (list 45.0D0 5621.9091796875D0 0.002569701988250017D0 3.373469352722168D0) (list 45.0D0 5621.9091796875D0 0.0D0 3.3859636783599854D0)) (list (list 46.0D0 5579.48486328125D0 0.0028841933235526085D0 3.0985941886901856D0)) (list (list 46.0D0 5580.53662109375D0 0.004449058324098587D0 3.111088514328003D0)) (list (list 46.0D0 5588.2578125D0 0.007816596888005734D0 3.1235828399658203D0)) (list (list 46.0D0 5589.84619140625D0 0.010740341618657112D0 3.1360771656036377D0)) (list (list 46.0D0 5592.9765625D0 0.012515728361904621D0 3.148571491241455D0)) (list (list 46.0D0 5595.84326171875D0 0.014064854942262173D0 3.1610658168792725D0)) (list (list 46.0D0 5600.46875D0 0.014533513225615025D0 3.1860544681549073D0)) (list (list 46.0D0 5601.89013671875D0 0.01478331908583641D0 3.1985487937927246D0)) (list (list 46.0D0 5601.62109375D0 0.01560941431671381D0 3.211043119430542D0)) (list (list 46.0D0 5598.97509765625D0 0.0161863025277853D0 3.2235374450683594D0)) (list (list 46.0D0 5594.76513671875D0 0.01587865687906742D0 3.248526096343994D0)) (list (list 46.0D0 5593.80908203125D0 0.01512000523507595D0 3.2610204219818116D0)) (list (list 46.0D0 5591.74609375D0 0.014532321132719517D0 3.273514747619629D0)) (list (list 46.0D0 5588.0537109375D0 0.014407012611627579D0 3.2860090732574463D0)) (list (list 46.0D0 5585.556640625D0 0.01368626393377781D0 3.2985033988952637D0)) (list (list 46.0D0 5587.24365234375D0 0.011030720546841622D0 3.310997724533081D0)) (list (list 46.0D0 5591.89990234375D0 0.008965346030890942D0 3.3234920501708985D0)) (list (list 46.0D0 5595.068359375D0 0.009265760891139508D0 3.335986375808716D0)) (list (list 46.0D0 5594.9365234375D0 0.01068705040961504D0 3.348480701446533D0)) (list (list 46.0D0 5593.1435546875D0 0.012640507891774178D0 3.3609750270843506D0)) (list (list 46.0D0 5592.2294921875D0 0.014444214291870594D0 3.373469352722168D0)) (list (list 46.0D0 5593.01123046875D0 0.015406234189867974D0 3.3859636783599854D0)) (list (list 46.0D0 5594.6015625D0 0.015775267034769058D0 3.3984580039978028D0)) (list (list 46.0D0 5595.4501953125D0 0.015730267390608788D0 3.41095232963562D0)) (list (list 46.0D0 5595.765625D0 0.015142632648348809D0 3.4234466552734375D0)) (list (list 46.0D0 5596.6630859375D0 0.014271136373281479D0 3.435940980911255D0)) (list (list 46.0D0 5597.3251953125D0 0.013624992221593857D0 3.4484353065490723D0)) (list (list 46.0D0 5596.68798828125D0 0.01335320994257927D0 3.4609296321868897D0)) (list (list 46.0D0 5594.89453125D0 0.013255801983177662D0 3.473423957824707D0)) (list (list 46.0D0 5593.6708984375D0 0.012939116917550564D0 3.4859182834625244D0)) (list (list 46.0D0 5593.6533203125D0 0.01222130935639143D0 3.498412609100342D0)) (list (list 46.0D0 5595.2958984375D0 0.01096243318170309D0 3.510906934738159D0)) (list (list 46.0D0 5599.953125D0 0.009773925878107548D0 3.5234012603759766D0)) (list (list 46.0D0 5601.86328125D0 0.00979260727763176D0 3.535895586013794D0)) (list (list 46.0D0 5599.02587890625D0 0.010246345773339272D0 3.5483899116516114D0)) (list (list 46.0D0 5592.66015625D0 0.012554436922073365D0 3.5608842372894287D0)) (list (list 46.0D0 5590.8974609375D0 0.014968644827604294D0 3.573378801345825D0)) (list (list 46.0D0 5591.0576171875D0 0.016652364283800125D0 3.5858731269836426D0)) (list (list 46.0D0 5591.4697265625D0 0.018545614555478096D0 3.59836745262146D0)) (list (list 46.0D0 5591.84521484375D0 0.02020188421010971D0 3.6108617782592774D0)) (list (list 46.0D0 5592.77294921875D0 0.020449567586183548D0 3.6233561038970948D0)) (list (list 46.0D0 5594.28857421875D0 0.018968865275382996D0 3.635850429534912D0)) (list (list 46.0D0 5595.63623046875D0 0.01636528968811035D0 3.6483447551727295D0)) (list (list 46.0D0 5596.6884765625D0 0.0134438406676054D0 3.660839080810547D0)) (list (list 46.0D0 5597.82763671875D0 0.011128307320177555D0 3.6733334064483643D0)) (list (list 46.0D0 5598.42626953125D0 0.009909163229167462D0 3.6858277320861817D0)) (list (list 46.0D0 5597.8193359375D0 0.009592099115252495D0 3.698322057723999D0)) (list (list 46.0D0 5596.814453125D0 0.009737893007695675D0 3.7108163833618164D0)) (list (list 46.0D0 5596.4150390625D0 0.009744048118591309D0 3.723310708999634D0)) (list (list 46.0D0 5596.419921875D0 0.009401341900229454D0 3.735805034637451D0)) (list (list 46.0D0 5595.814453125D0 0.00902931671589613D0 3.7482993602752686D0)) (list (list 46.0D0 5594.31640625D0 0.009035109542310238D0 3.760793685913086D0)) (list (list 46.0D0 5593.20654296875D0 0.009248215705156327D0 3.7732880115509033D0)) (list (list 46.0D0 5593.94140625D0 0.008940989151597023D0 3.7857823371887207D0)) (list (list 46.0D0 5595.7763671875D0 0.008174650371074677D0 3.798276662826538D0)) (list (list 46.0D0 5597.4189453125D0 0.007276835851371288D0 3.8107709884643555D0)) (list (list 46.0D0 5598.45703125D0 0.00632601510733366D0 3.823265314102173D0)) (list (list 46.0D0 5599.12451171875D0 0.005469389259815216D0 3.8357596397399903D0)) (list (list 46.0D0 5599.689453125D0 0.005152297206223011D0 3.8482539653778076D0)) (list (list 46.0D0 5599.1923828125D0 0.0054753669537603855D0 3.860748291015625D0)) (list (list 46.0D0 5596.5732421875D0 0.006088376045227051D0 3.8732426166534424D0)) (list (list 46.0D0 5594.18505859375D0 0.006771293934434652D0 3.8857369422912598D0)) (list (list 46.0D0 5593.27978515625D0 0.0071901497431099415D0 3.898231267929077D0)) (list (list 46.0D0 5593.38232421875D0 0.007186276372522116D0 3.9107255935668946D0)) (list (list 46.0D0 5593.87939453125D0 0.006709471810609102D0 3.923219919204712D0)) (list (list 46.0D0 5594.390625D0 0.005892383866012096D0 3.9357142448425293D0)) (list (list 46.0D0 5594.59814453125D0 0.004970846697688103D0 3.9482085704803467D0)) (list (list 46.0D0 5593.60986328125D0 0.004014355130493641D0 3.960702896118164D0)) (list (list 46.0D0 5590.875D0 0.0031809352803975344D0 3.9731972217559815D0)) (list (list 46.0D0 5589.39111328125D0 0.0027178688906133175D0 3.985691547393799D0)) (list (list 46.0D0 5589.55126953125D0 0.0026104983408004046D0 3.998185873031616D0)) (list (list 46.0D0 5589.57373046875D0 0.002729819156229496D0 4.010680198669434D0)) (list (list 46.0D0 5588.53955078125D0 0.002995127812027931D0 4.02317476272583D0)) (list (list 46.0D0 5588.53662109375D0 0.0034394904505461455D0 4.035668849945068D0)) (list (list 46.0D0 5590.56298828125D0 0.0040003531612455845D0 4.048163414001465D0)) (list (list 46.0D0 5592.03564453125D0 0.004490979947149754D0 4.060657501220703D0)) (list (list 46.0D0 5592.0537109375D0 0.0043969592079520226D0 4.0731520652771D0)) (list (list 46.0D0 5594.56396484375D0 0.003360350616276264D0 4.085646152496338D0)) (list (list 46.0D0 5578.28955078125D0 0.002475257497280836D0 4.098140716552734D0)) (list (list 46.0D0 5580.06494140625D0 0.002023644745349884D0 4.110634803771973D0)) (list (list 46.0D0 5598.953125D0 0.0035950473975390196D0 4.123129367828369D0)) (list (list 46.0D0 5597.36865234375D0 0.0043980395421385765D0 4.135623455047607D0)) (list (list 46.0D0 5597.88623046875D0 0.004370405338704586D0 4.148118019104004D0)) (list (list 46.0D0 5600.40380859375D0 0.0035712390672415495D0 4.160612106323242D0)) (list (list 46.0D0 5602.37841796875D0 0.002671566791832447D0 4.173106670379639D0)) (list (list 46.0D0 5601.919921875D0 0.0020798095501959324D0 4.185600757598877D0)) (list (list 46.0D0 5600.4619140625D0 0.0019240122055634857D0 4.198095321655273D0)) (list (list 46.0D0 5599.86083984375D0 0.0020283269695937634D0 4.210589408874512D0)) (list (list 46.0D0 5597.87841796875D0 0.0023002726957201958D0 4.223083972930908D0)) (list (list 46.0D0 5591.41357421875D0 0.0026376128662377596D0 4.2355780601501465D0)) (list (list 46.0D0 5584.826171875D0 0.0027428288012742997D0 4.248072624206543D0)) (list (list 46.0D0 5579.8759765625D0 0.002418255666270852D0 4.260566711425781D0)) (list (list 46.0D0 5572.7939453125D0 0.0025865170173346997D0 4.273061275482178D0)) (list (list 46.0D0 5569.11181640625D0 0.0029745486099272967D0 4.285555362701416D0)) (list (list 46.0D0 5600.66943359375D0 0.0034810579381883145D0 4.2980499267578125D0)) (list (list 46.0D0 5595.92529296875D0 0.004463710822165012D0 4.310544013977051D0)) (list (list 46.0D0 5594.68408203125D0 0.0049930657260119915D0 4.323038578033447D0)) (list (list 46.0D0 5594.91552734375D0 0.004838606342673302D0 4.3355326652526856D0)) (list (list 46.0D0 5596.041015625D0 0.004287558142095804D0 4.348027229309082D0)) (list (list 46.0D0 5595.4189453125D0 0.004053005017340183D0 4.36052131652832D0)) (list (list 46.0D0 5593.5771484375D0 0.0048415628261864185D0 4.373015880584717D0)) (list (list 46.0D0 5592.564453125D0 0.006403482519090176D0 4.385509967803955D0)) (list (list 46.0D0 5592.63818359375D0 0.007975144311785698D0 4.398004531860352D0)) (list (list 46.0D0 5592.8779296875D0 0.009297291748225689D0 4.410499095916748D0)) (list (list 46.0D0 5593.2080078125D0 0.010218223556876183D0 4.422993183135986D0)) (list (list 46.0D0 5593.67431640625D0 0.010294932872056961D0 4.435487747192383D0)) (list (list 46.0D0 5594.5966796875D0 0.009167522192001343D0 4.447981834411621D0)) (list (list 46.0D0 5596.00732421875D0 0.007162604946643114D0 4.460476398468018D0)) (list (list 46.0D0 5597.21435546875D0 0.005109361372888088D0 4.472970485687256D0)) (list (list 46.0D0 5596.580078125D0 0.003692489815875888D0 4.485465049743652D0)) (list (list 46.0D0 5594.74609375D0 0.0034467189107090235D0 4.497959136962891D0)) (list (list 46.0D0 5593.38134765625D0 0.004357210826128721D0 4.510453701019287D0)) (list (list 46.0D0 5593.6826171875D0 0.005806038621813059D0 4.522947788238525D0)) (list (list 46.0D0 5595.1142578125D0 0.007165311370044947D0 4.535442352294922D0)) (list (list 46.0D0 5596.6083984375D0 0.008148114196956158D0 4.54793643951416D0)) (list (list 46.0D0 5597.068359375D0 0.008735534735023976D0 4.560431003570557D0)) (list (list 46.0D0 5596.11767578125D0 0.00896520633250475D0 4.572925090789795D0)) (list (list 46.0D0 5594.39208984375D0 0.00902316253632307D0 4.585419654846191D0)) (list (list 46.0D0 5593.412109375D0 0.008912651799619198D0 4.59791374206543D0)) (list (list 46.0D0 5593.9541015625D0 0.00850700307637453D0 4.610408306121826D0)) (list (list 46.0D0 5595.69921875D0 0.007965032942593098D0 4.6229023933410645D0)) (list (list 46.0D0 5597.34716796875D0 0.007440826389938593D0 4.635396957397461D0)) (list (list 46.0D0 5597.99755859375D0 0.006908466573804617D0 4.647891044616699D0)) (list (list 46.0D0 5597.67578125D0 0.0063283322378993035D0 4.660385608673096D0)) (list (list 46.0D0 5596.37451171875D0 0.005666820332407951D0 4.672879695892334D0)) (list (list 46.0D0 5594.62109375D0 0.005016881972551346D0 4.6853742599487305D0)) (list (list 46.0D0 5593.46728515625D0 0.0044634356163442135D0 4.697868347167969D0)) (list (list 46.0D0 5592.875D0 0.003980023320764303D0 4.710362911224365D0)) (list (list 46.0D0 5592.09716796875D0 0.0035698432475328446D0 4.7228569984436035D0)) (list (list 46.0D0 5591.49853515625D0 0.0032060560770332814D0 4.7353515625D0)) (list (list 46.0D0 5592.109375D0 0.002751536201685667D0 4.747845649719238D0)) (list (list 46.0D0 5593.78076171875D0 0.0021996397990733385D0 4.760340213775635D0)) (list (list 46.0D0 5594.4443359375D0 0.0017011234303936363D0 4.772834300994873D0)) (list (list 46.0D0 5594.16015625D0 0.001411835546605289D0 4.7853288650512695D0)) (list (list 46.0D0 5593.76416015625D0 0.001311539439484477D0 4.797822952270508D0)) (list (list 46.0D0 5593.9736328125D0 0.0012565196957439185D0 4.810317516326904D0)) (list (list 46.0D0 5594.99169921875D0 0.001179983257316053D0 4.822811603546143D0)) (list (list 46.0D0 5596.88720703125D0 0.0010770763037726283D0 4.835306167602539D0)) (list (list 46.0D0 5598.93212890625D0 9.400226990692318D-4 4.847800254821777D0)) (list (list 46.0D0 5601.05517578125D0 7.883759681135416D-4 4.860294818878174D0)) (list (list 46.0D0 5602.80859375D0 7.031472050584853D-4 4.872788906097412D0)) (list (list 46.0D0 5602.88134765625D0 7.052495493553579D-4 4.885283470153809D0)) (list (list 46.0D0 5600.53125D0 7.615179056301713D-4 4.897777557373047D0)) (list (list 46.0D0 5598.15380859375D0 8.501543779857457D-4 4.910272121429443D0)) (list (list 46.0D0 5597.43310546875D0 8.945282315835357D-4 4.922766208648682D0)) (list (list 46.0D0 5597.7646484375D0 8.321324712596834D-4 4.935260772705078D0)) (list (list 46.0D0 5599.58154296875D0 6.319040548987687D-4 4.947755336761475D0)) (list (list 46.0D0 5605.2880859375D0 4.1792410775087774D-4 4.960249423980713D0)) (list (list 46.0D0 5604.29443359375D0 3.209043061360717D-4 4.972743988037109D0)) (list (list 46.0D0 5597.74267578125D0 4.950853181071579D-4 4.985238075256348D0)) (list (list 46.0D0 5597.40087890625D0 8.651385433040559D-4 4.997732639312744D0)) (list (list 46.0D0 5598.72216796875D0 0.0011668452061712742D0 5.010226726531982D0)) (list (list 46.0D0 5598.677734375D0 0.0012442810693755746D0 5.022721290588379D0)) (list (list 46.0D0 5599.1806640625D0 0.0010402877815067769D0 5.035215377807617D0)) (list (list 46.0D0 5602.79931640625D0 7.856003358028829D-4 5.047709941864014D0)) (list (list 46.0D0 5581.88720703125D0 6.074900738894939D-4 5.060204029083252D0)) (list (list 46.0D0 5599.73046875D0 0.0011358488118276D0 5.072698593139648D0)) (list (list 46.0D0 5595.86181640625D0 0.0016916054300963879D0 5.085192680358887D0)) (list (list 46.0D0 5595.27490234375D0 0.0021453164517879486D0 5.097687244415283D0)) (list (list 46.0D0 5594.853515625D0 0.0025338861159980297D0 5.1101813316345215D0)) (list (list 46.0D0 5594.537109375D0 0.0028696362860500813D0 5.122675895690918D0)) (list (list 46.0D0 5594.33056640625D0 0.002986598527058959D0 5.135169982910156D0)) (list (list 46.0D0 5594.0078125D0 0.0028216652572155D0 5.147664546966553D0)) (list (list 46.0D0 5593.6181640625D0 0.0026371392887085677D0 5.160158634185791D0)) (list (list 46.0D0 5593.3974609375D0 0.002745171543210745D0 5.1726531982421875D0)) (list (list 46.0D0 5593.8828125D0 0.003125902730971575D0 5.185147285461426D0)) (list (list 46.0D0 5594.9326171875D0 0.003527818014845252D0 5.197641849517822D0)) (list (list 46.0D0 5595.60595703125D0 0.0036776838824152947D0 5.2101359367370606D0)) (list (list 46.0D0 5595.65087890625D0 0.003345804987475276D0 5.222630500793457D0)) (list (list 46.0D0 5596.77783203125D0 0.002470087492838502D0 5.235124588012695D0)) (list (list 46.0D0 5584.0771484375D0 0.0012882851297035814D0 5.247619152069092D0)) (list (list 46.0D0 5583.20068359375D0 8.913359488360584D-4 5.26011323928833D0)) (list (list 46.0D0 5600.7958984375D0 0.0014615703839808703D0 5.272607803344727D0)) (list (list 46.0D0 5595.70751953125D0 0.00199427199549973D0 5.285101890563965D0)) (list (list 46.0D0 5594.30517578125D0 0.002330321352928877D0 5.297596454620361D0)) (list (list 46.0D0 5594.8173828125D0 0.0024313118774443865D0 5.3100905418396D0)) (list (list 46.0D0 5596.39697265625D0 0.0024644872173666954D0 5.322585105895996D0)) (list (list 46.0D0 5597.83203125D0 0.002437654649838805D0 5.335079193115234D0)) (list (list 46.0D0 5597.6279296875D0 0.002103182254359126D0 5.347573757171631D0)) (list (list 46.0D0 5594.4833984375D0 0.0014469738816842437D0 5.360067844390869D0)) (list (list 46.0D0 5606.39697265625D0 7.482324726879597D-4 5.372562408447266D0)) (list (list 46.0D0 5623.1328125D0 9.808860486373306D-4 5.385056495666504D0)) (list (list 46.0D0 5592.345703125D0 0.002187067875638604D0 5.3975510597229D0)) (list (list 46.0D0 5594.974609375D0 0.0029939489904791117D0 5.410045146942139D0)) (list (list 46.0D0 5595.09033203125D0 0.003326889593154192D0 5.422539710998535D0)) (list (list 46.0D0 5595.3798828125D0 0.0034554286394268275D0 5.435033798217773D0)) (list (list 46.0D0 5595.3095703125D0 0.0035615661181509495D0 5.44752836227417D0)) (list (list 46.0D0 5594.1787109375D0 0.00351947289891541D0 5.460022449493408D0)) (list (list 46.0D0 5593.38818359375D0 0.003236351767554879D0 5.472517013549805D0)) (list (list 46.0D0 5594.21337890625D0 0.0027390532195568085D0 5.485011100769043D0)) (list (list 46.0D0 5595.68603515625D0 0.0022620034869760275D0 5.4975056648254395D0)) (list (list 46.0D0 5595.6484375D0 0.001971531892195344D0 5.510000228881836D0)) (list (list 46.0D0 5594.49462890625D0 0.0019394770497456193D0 5.522494316101074D0)) (list (list 46.0D0 5593.95068359375D0 0.0020059007219970227D0 5.534988880157471D0)) (list (list 46.0D0 5595.15869140625D0 0.001859938958659768D0 5.547482967376709D0)) (list (list 46.0D0 5597.9462890625D0 0.001498403144069016D0 5.5599775314331055D0)) (list (list 46.0D0 5598.41748046875D0 0.001200223108753562D0 5.572471618652344D0)) (list (list 46.0D0 5597.89111328125D0 0.0012226977851241827D0 5.58496618270874D0)) (list (list 46.0D0 5597.84375D0 0.0014784856466576457D0 5.5974602699279785D0)) (list (list 46.0D0 5597.4365234375D0 0.0017053830670192838D0 5.609954833984375D0)) (list (list 46.0D0 5596.3916015625D0 0.0018530584638938308D0 5.622448921203613D0)) (list (list 46.0D0 5594.96533203125D0 0.0019425700884312392D0 5.63494348526001D0)) (list (list 46.0D0 5593.720703125D0 0.0019732497166842223D0 5.647437572479248D0)) (list (list 46.0D0 5593.45556640625D0 0.0020210992079228163D0 5.6599321365356445D0)) (list (list 46.0D0 5593.9345703125D0 0.0021289412397891283D0 5.672426223754883D0)) (list (list 46.0D0 5594.25146484375D0 0.002170680556446314D0 5.684920787811279D0)) (list (list 46.0D0 5593.49267578125D0 0.0020183466840535403D0 5.697414875030518D0)) (list (list 46.0D0 5592.59130859375D0 0.001718798652291298D0 5.709909439086914D0)) (list (list 46.0D0 5593.74169921875D0 0.0012856500688940287D0 5.722403526306152D0)) (list (list 46.0D0 5601.39599609375D0 0.001003409968689084D0 5.734898090362549D0)) (list (list 46.0D0 5605.111328125D0 0.00127256172709167D0 5.747392177581787D0)) (list (list 46.0D0 5603.39990234375D0 0.0016175898490473628D0 5.759886741638184D0)) (list (list 46.0D0 5597.92919921875D0 0.0018606126541271806D0 5.772380828857422D0)) (list (list 46.0D0 5595.06787109375D0 0.0018300008960068226D0 5.784875392913818D0)) (list (list 46.0D0 5594.11572265625D0 0.0016240861732512713D0 5.797369480133057D0)) (list (list 46.0D0 5594.701171875D0 0.0014891226310282946D0 5.809864044189453D0)) (list (list 46.0D0 5595.24609375D0 0.0014375363243743778D0 5.822358131408691D0)) (list (list 46.0D0 5591.923828125D0 0.0013259460683912039D0 5.834852695465088D0)) (list (list 46.0D0 5589.86376953125D0 0.0013639904791489244D0 5.847346782684326D0)) (list (list 46.0D0 5591.373046875D0 0.0016117297345772386D0 5.859841346740723D0)) (list (list 46.0D0 5595.68798828125D0 0.002181741176173091D0 5.872335433959961D0)) (list (list 46.0D0 5596.78173828125D0 0.002881695982068777D0 5.884829998016357D0)) (list (list 46.0D0 5595.9794921875D0 0.0035328606609255076D0 5.897324085235596D0)) (list (list 46.0D0 5594.50244140625D0 0.004132857546210289D0 5.909818649291992D0)) (list (list 46.0D0 5593.865234375D0 0.0044913035817444325D0 5.9223127365112305D0)) (list (list 46.0D0 5594.3271484375D0 0.004436715040355921D0 5.934807300567627D0)) (list (list 46.0D0 5594.51708984375D0 0.004147311206907034D0 5.947301387786865D0)) (list (list 46.0D0 5594.21142578125D0 0.003994628321379423D0 5.959795951843262D0)) (list (list 46.0D0 5594.697265625D0 0.00426067691296339D0 5.9722900390625D0)) (list (list 46.0D0 5595.869140625D0 0.004915106110274792D0 5.9847846031188965D0)) (list (list 46.0D0 5595.7744140625D0 0.005618385970592499D0 5.997278690338135D0)) (list (list 46.0D0 5594.763671875D0 0.006156902760267258D0 6.009773254394531D0)) (list (list 46.0D0 5594.5703125D0 0.00653839809820056D0 6.0222673416137695D0)) (list (list 46.0D0 5595.43408203125D0 0.006853505037724972D0 6.034761905670166D0)) (list (list 46.0D0 5596.2646484375D0 0.007245396263897419D0 6.0472564697265625D0)) (list (list 46.0D0 5596.59814453125D0 0.007706873118877411D0 6.059750556945801D0)) (list (list 46.0D0 5596.47119140625D0 0.008138768374919892D0 6.072245121002197D0)) (list (list 46.0D0 5595.63818359375D0 0.008334187790751458D0 6.0847392082214356D0)) (list (list 46.0D0 5594.384765625D0 0.008088395930826664D0 6.097233772277832D0)) (list (list 46.0D0 5593.5107421875D0 0.0072396378964185715D0 6.10972785949707D0)) (list (list 46.0D0 5593.3544921875D0 0.0060583846643567085D0 6.122222423553467D0)) (list (list 46.0D0 5593.4130859375D0 0.005319634452462196D0 6.134716510772705D0)) (list (list 46.0D0 5593.47607421875D0 0.005464598536491394D0 6.147211074829102D0)) (list (list 46.0D0 5593.9130859375D0 0.006236453074961901D0 6.15970516204834D0)) (list (list 46.0D0 5594.76171875D0 0.00722971698269248D0 6.172199726104736D0)) (list (list 46.0D0 5595.3046875D0 0.008182967081665993D0 6.184693813323975D0)) (list (list 46.0D0 5594.5654296875D0 0.008781762793660164D0 6.197188377380371D0)) (list (list 46.0D0 5593.11767578125D0 0.009008300490677357D0 6.209682464599609D0)) (list (list 46.0D0 5592.66943359375D0 0.008992057293653489D0 6.222177028656006D0)) (list (list 46.0D0 5593.736328125D0 0.008827847428619862D0 6.234671115875244D0)) (list (list 46.0D0 5595.34326171875D0 0.00874658115208149D0 6.247165679931641D0)) (list (list 46.0D0 5596.458984375D0 0.008795855566859246D0 6.259659767150879D0)) (list (list 46.0D0 5596.82421875D0 0.008952640928328038D0 6.272154331207275D0)) (list (list 46.0D0 5596.505859375D0 0.009137471206486225D0 6.284648418426514D0)) (list (list 46.0D0 5595.97705078125D0 0.009202372282743454D0 6.29714298248291D0)) (list (list 46.0D0 5595.60791015625D0 0.009047341533005238D0 6.309637069702148D0)) (list (list 46.0D0 5595.361328125D0 0.008739549666643143D0 6.322131633758545D0)) (list (list 46.0D0 5595.09130859375D0 0.00845460407435894D0 6.334625720977783D0)) (list (list 46.0D0 5594.81298828125D0 0.00833811890333891D0 6.34712028503418D0)) (list (list 46.0D0 5594.58935546875D0 0.008522898890078068D0 6.359614372253418D0)) (list (list 46.0D0 5594.56298828125D0 0.009015852585434914D0 6.3721089363098145D0)) (list (list 46.0D0 5594.8623046875D0 0.009539141319692135D0 6.384603023529053D0)) (list (list 46.0D0 5595.34912109375D0 0.009716394357383252D0 6.397097587585449D0)) (list (list 46.0D0 5595.60595703125D0 0.009391333907842636D0 6.4095916748046875D0)) (list (list 46.0D0 5595.23974609375D0 0.008671559393405915D0 6.422086238861084D0)) (list (list 46.0D0 5594.3740234375D0 0.007863360457122326D0 6.434580326080322D0)) (list (list 46.0D0 5593.88623046875D0 0.007275138050317764D0 6.447074890136719D0)) (list (list 46.0D0 5594.0908203125D0 0.006995548959821463D0 6.459568977355957D0)) (list (list 46.0D0 5594.45068359375D0 0.006877837236970663D0 6.4720635414123535D0)) (list (list 46.0D0 5594.45556640625D0 0.006620585918426514D0 6.484557628631592D0)) (list (list 46.0D0 5594.06787109375D0 0.006093130446970463D0 6.497052192687988D0)) (list (list 46.0D0 5593.4169921875D0 0.00545371463522315D0 6.509546279907227D0)) (list (list 46.0D0 5593.04638671875D0 0.004952081944793463D0 6.522040843963623D0)) (list (list 46.0D0 5593.59228515625D0 0.004671248607337475D0 6.534534931182861D0)) (list (list 46.0D0 5594.83251953125D0 0.004554891027510166D0 6.547029495239258D0)) (list (list 46.0D0 5596.17041015625D0 0.004429429303854704D0 6.559523582458496D0)) (list (list 46.0D0 5597.39453125D0 0.004127224441617727D0 6.572018146514893D0)) (list (list 46.0D0 5597.8330078125D0 0.003590382868424058D0 6.584512233734131D0)) (list (list 46.0D0 5597.0498046875D0 0.002871435135602951D0 6.597006797790527D0)) (list (list 46.0D0 5595.642578125D0 0.00209435960277915D0 6.609501361846924D0)) (list (list 46.0D0 5594.4130859375D0 0.0013236574595794082D0 6.621995449066162D0)) (list (list 46.0D0 5593.43017578125D0 6.786190206184983D-4 6.634490013122559D0)) (list (list 46.0D0 5592.2041015625D0 2.9020692454651D-4 6.646984100341797D0)) (list (list 46.0D0 5591.6103515625D0 1.3449002290144563D-4 6.659478664398193D0)) (list (list 46.0D0 5590.74755859375D0 9.921861055772752D-5 6.671972751617432D0)) (list (list 46.0D0 5589.75244140625D0 9.566362859914079D-5 6.684467315673828D0)) (list (list 46.0D0 5590.44189453125D0 8.977550896815956D-5 6.696961402893066D0)) (list (list 46.0D0 5590.9580078125D0 8.185684419004247D-5 6.709455966949463D0)) (list (list 46.0D0 5591.16552734375D0 7.701175491092727D-5 6.721950054168701D0)) (list (list 46.0D0 5591.63720703125D0 7.63944408390671D-5 6.734444618225098D0)) (list (list 46.0D0 5592.63427734375D0 7.633656787220389D-5 6.746938705444336D0)) (list (list 46.0D0 5593.7236328125D0 7.21866890671663D-5 6.759433269500732D0)) (list (list 46.0D0 5594.02294921875D0 6.19515631115064D-5 6.771927356719971D0)) (list (list 46.0D0 5594.0283203125D0 4.789277954841964D-5 6.784421920776367D0)) (list (list 46.0D0 5594.7861328125D0 3.227095658075996D-5 6.7969160079956055D0)) (list (list 46.0D0 5594.7861328125D0 0.0D0 6.809410572052002D0)) (list (list 47.0D0 3316.05322265625D0 5.037892260588706D-4 3.1610658168792725D0)) (list (list 47.0D0 3316.52978515625D0 6.149316322989762D-4 3.17356014251709D0)) (list (list 47.0D0 3287.162109375D0 5.086560267955065D-4 3.211043119430542D0)) (list (list 47.0D0 3288.063232421875D0 4.5593795948661864D-4 3.2235374450683594D0)) (list (list 47.0D0 3276.048828125D0 6.950082606635988D-4 3.248526096343994D0)) (list (list 47.0D0 3277.920166015625D0 5.168857169337571D-4 3.2610204219818116D0)) (list (list 47.0D0 3283.35546875D0 5.757416947744787D-4 3.2985033988952637D0)) (list (list 47.0D0 3283.295654296875D0 6.565301446244121D-4 3.310997724533081D0)) (list (list 47.0D0 3281.0771484375D0 7.369537488557398D-4 3.3234920501708985D0)) (list (list 47.0D0 3279.236572265625D0 7.589657325297594D-4 3.335986375808716D0)) (list (list 47.0D0 3277.458984375D0 7.142949616536498D-4 3.348480701446533D0)) (list (list 47.0D0 3277.863525390625D0 7.105341646820307D-4 3.3609750270843506D0)) (list (list 47.0D0 3276.633056640625D0 8.597892010584474D-4 3.373469352722168D0)) (list (list 47.0D0 3254.6279296875D0 0.0018638914916664362D0 3.3859636783599854D0)) (list (list 47.0D0 3260.18017578125D0 0.0020374164450913668D0 3.3984580039978028D0)) (list (list 47.0D0 3264.1904296875D0 0.0017572414362803102D0 3.41095232963562D0)) (list (list 47.0D0 3266.235595703125D0 0.00143776077311486D0 3.4234466552734375D0)) (list (list 47.0D0 3265.912353515625D0 0.0015376220690086484D0 3.435940980911255D0)) (list (list 47.0D0 3263.092529296875D0 0.002154008485376835D0 3.4484353065490723D0)) (list (list 47.0D0 3260.84765625D0 0.0030298400670289994D0 3.4609296321868897D0)) (list (list 47.0D0 3260.60595703125D0 0.0037526509258896113D0 3.473423957824707D0)) (list (list 47.0D0 3261.544677734375D0 0.004199784714728594D0 3.4859182834625244D0)) (list (list 47.0D0 3262.9814453125D0 0.004499771166592836D0 3.498412609100342D0)) (list (list 47.0D0 3263.982177734375D0 0.004799784626811743D0 3.510906934738159D0)) (list (list 47.0D0 3263.961181640625D0 0.00517073692753911D0 3.5234012603759766D0)) (list (list 47.0D0 3263.049072265625D0 0.005638587288558483D0 3.535895586013794D0)) (list (list 47.0D0 3261.792236328125D0 0.00621470483019948D0 3.5483899116516114D0)) (list (list 47.0D0 3260.835693359375D0 0.006795224267989397D0 3.5608842372894287D0)) (list (list 47.0D0 3260.462890625D0 0.007162449881434441D0 3.573378801345825D0)) (list (list 47.0D0 3260.811279296875D0 0.007127523422241211D0 3.5858731269836426D0)) (list (list 47.0D0 3261.465576171875D0 0.006726231426000595D0 3.59836745262146D0)) (list (list 47.0D0 3262.249755859375D0 0.00604867422953248D0 3.6108617782592774D0)) (list (list 47.0D0 3263.527587890625D0 0.0051698386669158936D0 3.6233561038970948D0)) (list (list 47.0D0 3265.174072265625D0 0.004326410125941038D0 3.635850429534912D0)) (list (list 47.0D0 3266.268310546875D0 0.003785325912758708D0 3.6483447551727295D0)) (list (list 47.0D0 3266.368408203125D0 0.0036839591339230538D0 3.660839080810547D0)) (list (list 47.0D0 3265.663818359375D0 0.004013881087303162D0 3.6733334064483643D0)) (list (list 47.0D0 3264.529541015625D0 0.004640789702534676D0 3.6858277320861817D0)) (list (list 47.0D0 3263.490966796875D0 0.005398469045758247D0 3.698322057723999D0)) (list (list 47.0D0 3262.859130859375D0 0.006133412942290306D0 3.7108163833618164D0)) (list (list 47.0D0 3262.967041015625D0 0.0067069074138998985D0 3.723310708999634D0)) (list (list 47.0D0 3263.6826171875D0 0.007107074838131666D0 3.735805034637451D0)) (list (list 47.0D0 3263.980712890625D0 0.0074968342669308186D0 3.7482993602752686D0)) (list (list 47.0D0 3263.418701171875D0 0.008024743758141995D0 3.760793685913086D0)) (list (list 47.0D0 3262.77978515625D0 0.008697706274688244D0 3.7732880115509033D0)) (list (list 47.0D0 3262.795166015625D0 0.009253695607185364D0 3.7857823371887207D0)) (list (list 47.0D0 3263.28662109375D0 0.009489606134593487D0 3.798276662826538D0)) (list (list 47.0D0 3263.796142578125D0 0.009451604448258877D0 3.8107709884643555D0)) (list (list 47.0D0 3263.903076171875D0 0.0094246044754982D0 3.823265314102173D0)) (list (list 47.0D0 3263.5478515625D0 0.009690857492387295D0 3.8357596397399903D0)) (list (list 47.0D0 3263.06103515625D0 0.010196133516728878D0 3.8482539653778076D0)) (list (list 47.0D0 3262.73583984375D0 0.010594411753118039D0 3.860748291015625D0)) (list (list 47.0D0 3262.634033203125D0 0.010737339034676552D0 3.8732426166534424D0)) (list (list 47.0D0 3262.605224609375D0 0.010837951675057412D0 3.8857369422912598D0)) (list (list 47.0D0 3262.457275390625D0 0.011118673719465733D0 3.898231267929077D0)) (list (list 47.0D0 3262.281982421875D0 0.011519587598741055D0 3.9107255935668946D0)) (list (list 47.0D0 3262.328125D0 0.011825977824628353D0 3.923219919204712D0)) (list (list 47.0D0 3262.4873046875D0 0.011972339823842049D0 3.9357142448425293D0)) (list (list 47.0D0 3262.4765625D0 0.012087204493582249D0 3.9482085704803467D0)) (list (list 47.0D0 3262.37646484375D0 0.012279683724045754D0 3.960702896118164D0)) (list (list 47.0D0 3262.508544921875D0 0.012474470771849156D0 3.9731972217559815D0)) (list (list 47.0D0 3262.84619140625D0 0.012544582597911358D0 3.985691547393799D0)) (list (list 47.0D0 3263.039794921875D0 0.01246162224560976D0 3.998185873031616D0)) (list (list 47.0D0 3263.064208984375D0 0.012253430671989918D0 4.010680198669434D0)) (list (list 47.0D0 3263.145751953125D0 0.011946101672947407D0 4.02317476272583D0)) (list (list 47.0D0 3263.1826171875D0 0.01161929965019226D0 4.035668849945068D0)) (list (list 47.0D0 3262.859130859375D0 0.011444182135164738D0 4.048163414001465D0)) (list (list 47.0D0 3262.142578125D0 0.01154323946684599D0 4.060657501220703D0)) (list (list 47.0D0 3261.28857421875D0 0.01174405962228775D0 4.0731520652771D0)) (list (list 47.0D0 3260.80419921875D0 0.011538300663232804D0 4.085646152496338D0)) (list (list 47.0D0 3261.255615234375D0 0.010513468645513058D0 4.098140716552734D0)) (list (list 47.0D0 3262.523193359375D0 0.008912498131394387D0 4.110634803771973D0)) (list (list 47.0D0 3263.983642578125D0 0.007317778654396534D0 4.123129367828369D0)) (list (list 47.0D0 3265.5166015625D0 0.006109626032412052D0 4.135623455047607D0)) (list (list 47.0D0 3267.044921875D0 0.005489223636686802D0 4.148118019104004D0)) (list (list 47.0D0 3267.726318359375D0 0.0055060917511582375D0 4.160612106323242D0)) (list (list 47.0D0 3266.902099609375D0 0.006011761724948883D0 4.173106670379639D0)) (list (list 47.0D0 3265.257080078125D0 0.006876710336655378D0 4.185600757598877D0)) (list (list 47.0D0 3264.1533203125D0 0.007813184522092343D0 4.198095321655273D0)) (list (list 47.0D0 3264.093017578125D0 0.008502484299242497D0 4.210589408874512D0)) (list (list 47.0D0 3264.393798828125D0 0.00901803094893694D0 4.223083972930908D0)) (list (list 47.0D0 3263.939453125D0 0.00966345053166151D0 4.2355780601501465D0)) (list (list 47.0D0 3262.769775390625D0 0.010516827926039696D0 4.248072624206543D0)) (list (list 47.0D0 3261.893310546875D0 0.01110481284558773D0 4.260566711425781D0)) (list (list 47.0D0 3262.029052734375D0 0.010756862349808216D0 4.273061275482178D0)) (list (list 47.0D0 3263.181396484375D0 0.009453685022890568D0 4.285555362701416D0)) (list (list 47.0D0 3264.879150390625D0 0.007854527793824673D0 4.2980499267578125D0)) (list (list 47.0D0 3266.06640625D0 0.006522868759930134D0 4.310544013977051D0)) (list (list 47.0D0 3266.594482421875D0 0.005712660029530525D0 4.323038578033447D0)) (list (list 47.0D0 3266.569091796875D0 0.0055582174099981785D0 4.3355326652526856D0)) (list (list 47.0D0 3265.517822265625D0 0.005986982956528664D0 4.348027229309082D0)) (list (list 47.0D0 3263.6943359375D0 0.006680627819150686D0 4.36052131652832D0)) (list (list 47.0D0 3262.763916015625D0 0.007040496449917555D0 4.373015880584717D0)) (list (list 47.0D0 3262.747802734375D0 0.006775062996894121D0 4.385509967803955D0)) (list (list 47.0D0 3262.664306640625D0 0.006167468149214983D0 4.398004531860352D0)) (list (list 47.0D0 3262.3330078125D0 0.005569692235440016D0 4.410499095916748D0)) (list (list 47.0D0 3262.380859375D0 0.005189463961869478D0 4.422993183135986D0)) (list (list 47.0D0 3263.26806640625D0 0.005164111033082008D0 4.435487747192383D0)) (list (list 47.0D0 3264.19775390625D0 0.005579122342169285D0 4.447981834411621D0)) (list (list 47.0D0 3264.60205078125D0 0.0062913135625422D0 4.460476398468018D0)) (list (list 47.0D0 3264.555908203125D0 0.007053836714476347D0 4.472970485687256D0)) (list (list 47.0D0 3264.25439453125D0 0.007627462036907673D0 4.485465049743652D0)) (list (list 47.0D0 3263.75830078125D0 0.007806137669831514D0 4.497959136962891D0)) (list (list 47.0D0 3263.393798828125D0 0.0075048524886369705D0 4.510453701019287D0)) (list (list 47.0D0 3263.246337890625D0 0.006822784431278706D0 4.522947788238525D0)) (list (list 47.0D0 3262.979248046875D0 0.005910003092139959D0 4.535442352294922D0)) (list (list 47.0D0 3262.447998046875D0 0.004793747328221798D0 4.54793643951416D0)) (list (list 47.0D0 3262.2978515625D0 0.0034787633921951056D0 4.560431003570557D0)) (list (list 47.0D0 3263.241943359375D0 0.0021928693167865277D0 4.572925090789795D0)) (list (list 47.0D0 3264.950927734375D0 0.001227375352755189D0 4.585419654846191D0)) (list (list 47.0D0 3267.75927734375D0 6.329708267003298D-4 4.59791374206543D0)) (list (list 47.0D0 3273.047119140625D0 3.8483834941871464D-4 4.610408306121826D0)) (list (list 47.0D0 3272.797607421875D0 4.127516585867852D-4 4.6229023933410645D0)) (list (list 47.0D0 3267.108154296875D0 7.20444368198514D-4 4.635396957397461D0)) (list (list 47.0D0 3265.623291015625D0 0.0013250014744699002D0 4.647891044616699D0)) (list (list 47.0D0 3264.685791015625D0 0.002196679590269923D0 4.660385608673096D0)) (list (list 47.0D0 3263.098876953125D0 0.003258438315242529D0 4.672879695892334D0)) (list (list 47.0D0 3262.42431640625D0 0.004158889874815941D0 4.6853742599487305D0)) (list (list 47.0D0 3262.606689453125D0 0.004618918523192406D0 4.697868347167969D0)) (list (list 47.0D0 3262.52392578125D0 0.004730984102934599D0 4.710362911224365D0)) (list (list 47.0D0 3262.03515625D0 0.0046606422401964665D0 4.7228569984436035D0)) (list (list 47.0D0 3262.02490234375D0 0.004553946200758219D0 4.7353515625D0)) (list (list 47.0D0 3262.494140625D0 0.004680612590163946D0 4.747845649719238D0)) (list (list 47.0D0 3262.740234375D0 0.005201561376452446D0 4.760340213775635D0)) (list (list 47.0D0 3262.736328125D0 0.005917048081755638D0 4.772834300994873D0)) (list (list 47.0D0 3262.509033203125D0 0.0065289149060845375D0 4.7853288650512695D0)) (list (list 47.0D0 3261.8515625D0 0.006790598388761282D0 4.797822952270508D0)) (list (list 47.0D0 3261.328857421875D0 0.006452419329434633D0 4.810317516326904D0)) (list (list 47.0D0 3262.2158203125D0 0.005508181173354387D0 4.822811603546143D0)) (list (list 47.0D0 3263.37548828125D0 0.0046129655092954636D0 4.835306167602539D0)) (list (list 47.0D0 3263.4853515625D0 0.004177673254162073D0 4.847800254821777D0)) (list (list 47.0D0 3262.90087890625D0 0.003969978075474501D0 4.860294818878174D0)) (list (list 47.0D0 3262.79052734375D0 0.0034949060063809157D0 4.872788906097412D0)) (list (list 47.0D0 3263.8154296875D0 0.002672814065590501D0 4.885283470153809D0)) (list (list 47.0D0 3265.689453125D0 0.002003584522753954D0 4.897777557373047D0)) (list (list 47.0D0 3266.209716796875D0 0.0019929136615246535D0 4.910272121429443D0)) (list (list 47.0D0 3264.611083984375D0 0.002748779719695449D0 4.922766208648682D0)) (list (list 47.0D0 3263.271484375D0 0.0041499692015349865D0 4.935260772705078D0)) (list (list 47.0D0 3263.2099609375D0 0.0058309477753937245D0 4.947755336761475D0)) (list (list 47.0D0 3263.275390625D0 0.0075392392463982105D0 4.960249423980713D0)) (list (list 47.0D0 3263.030029296875D0 0.009111878462135792D0 4.972743988037109D0)) (list (list 47.0D0 3262.775390625D0 0.010408383794128895D0 4.985238075256348D0)) (list (list 47.0D0 3262.963134765625D0 0.011229380033910275D0 4.997732639312744D0)) (list (list 47.0D0 3263.525146484375D0 0.011508241295814515D0 5.010226726531982D0)) (list (list 47.0D0 3263.872802734375D0 0.011428885161876679D0 5.022721290588379D0)) (list (list 47.0D0 3263.684814453125D0 0.011138182133436203D0 5.035215377807617D0)) (list (list 47.0D0 3263.17138671875D0 0.010608913376927376D0 5.047709941864014D0)) (list (list 47.0D0 3262.809326171875D0 0.009746908210217953D0 5.060204029083252D0)) (list (list 47.0D0 3262.81884765625D0 0.00864887423813343D0 5.072698593139648D0)) (list (list 47.0D0 3263.1171875D0 0.007569483481347561D0 5.085192680358887D0)) (list (list 47.0D0 3263.33056640625D0 0.006711481139063835D0 5.097687244415283D0)) (list (list 47.0D0 3263.1162109375D0 0.006072201766073704D0 5.1101813316345215D0)) (list (list 47.0D0 3263.061279296875D0 0.005550357047468424D0 5.122675895690918D0)) (list (list 47.0D0 3263.644287109375D0 0.005248703062534332D0 5.135169982910156D0)) (list (list 47.0D0 3263.693359375D0 0.005387916695326567D0 5.147664546966553D0)) (list (list 47.0D0 3262.86669921875D0 0.005824815481901169D0 5.160158634185791D0)) (list (list 47.0D0 3262.4423828125D0 0.006024859845638275D0 5.1726531982421875D0)) (list (list 47.0D0 3263.028564453125D0 0.005711068399250507D0 5.185147285461426D0)) (list (list 47.0D0 3263.67529296875D0 0.0052851177752017975D0 5.197641849517822D0)) (list (list 47.0D0 3263.489990234375D0 0.005329846870154142D0 5.2101359367370606D0)) (list (list 47.0D0 3262.547607421875D0 0.0061166537925601006D0 5.222630500793457D0)) (list (list 47.0D0 3261.93017578125D0 0.007400192320346832D0 5.235124588012695D0)) (list (list 47.0D0 3262.582275390625D0 0.00861030351370573D0 5.247619152069092D0)) (list (list 47.0D0 3263.823974609375D0 0.00956449843943119D0 5.26011323928833D0)) (list (list 47.0D0 3264.380126953125D0 0.010428695008158684D0 5.272607803344727D0)) (list (list 47.0D0 3263.885986328125D0 0.011225634254515171D0 5.285101890563965D0)) (list (list 47.0D0 3263.25244140625D0 0.011801732704043389D0 5.297596454620361D0)) (list (list 47.0D0 3263.53515625D0 0.011937378905713559D0 5.3100905418396D0)) (list (list 47.0D0 3264.194091796875D0 0.011952470056712628D0 5.322585105895996D0)) (list (list 47.0D0 3264.296142578125D0 0.012180124409496785D0 5.335079193115234D0)) (list (list 47.0D0 3263.8818359375D0 0.012459395453333855D0 5.347573757171631D0)) (list (list 47.0D0 3263.721923828125D0 0.012335238046944142D0 5.360067844390869D0)) (list (list 47.0D0 3264.127685546875D0 0.011567272245883942D0 5.372562408447266D0)) (list (list 47.0D0 3264.716064453125D0 0.010453782975673676D0 5.385056495666504D0)) (list (list 47.0D0 3264.82275390625D0 0.009515381418168545D0 5.3975510597229D0)) (list (list 47.0D0 3264.165283203125D0 0.008954569697380066D0 5.410045146942139D0)) (list (list 47.0D0 3263.16015625D0 0.008418097160756588D0 5.422539710998535D0)) (list (list 47.0D0 3263.045654296875D0 0.007387900725007057D0 5.435033798217773D0)) (list (list 47.0D0 3263.939208984375D0 0.006137722637504339D0 5.44752836227417D0)) (list (list 47.0D0 3264.114013671875D0 0.005492507014423609D0 5.460022449493408D0)) (list (list 47.0D0 3263.2978515625D0 0.005795486271381378D0 5.472517013549805D0)) (list (list 47.0D0 3262.809814453125D0 0.00666631106287241D0 5.485011100769043D0)) (list (list 47.0D0 3263.18603515625D0 0.007382894400507212D0 5.4975056648254395D0)) (list (list 47.0D0 3263.742431640625D0 0.00760950893163681D0 5.510000228881836D0)) (list (list 47.0D0 3263.919189453125D0 0.007437373977154493D0 5.522494316101074D0)) (list (list 47.0D0 3263.58154296875D0 0.007299230434000492D0 5.534988880157471D0)) (list (list 47.0D0 3263.204345703125D0 0.007639450952410698D0 5.547482967376709D0)) (list (list 47.0D0 3263.17236328125D0 0.008425538428127766D0 5.5599775314331055D0)) (list (list 47.0D0 3263.534423828125D0 0.009081053547561169D0 5.572471618652344D0)) (list (list 47.0D0 3264.35888671875D0 0.009097596630454064D0 5.58496618270874D0)) (list (list 47.0D0 3265.04296875D0 0.008642378263175488D0 5.5974602699279785D0)) (list (list 47.0D0 3264.757568359375D0 0.008135578595101834D0 5.609954833984375D0)) (list (list 47.0D0 3263.596435546875D0 0.007791053969413042D0 5.622448921203613D0)) (list (list 47.0D0 3262.764404296875D0 0.007512914948165417D0 5.63494348526001D0)) (list (list 47.0D0 3262.594970703125D0 0.007177415303885937D0 5.647437572479248D0)) (list (list 47.0D0 3262.666015625D0 0.006934921722859144D0 5.6599321365356445D0)) (list (list 47.0D0 3262.791015625D0 0.007008347660303116D0 5.672426223754883D0)) (list (list 47.0D0 3262.64599609375D0 0.007486007176339626D0 5.684920787811279D0)) (list (list 47.0D0 3262.053955078125D0 0.008186347782611847D0 5.697414875030518D0)) (list (list 47.0D0 3261.563232421875D0 0.008839436806738377D0 5.709909439086914D0)) (list (list 47.0D0 3261.48583984375D0 0.009469076991081238D0 5.722403526306152D0)) (list (list 47.0D0 3261.861328125D0 0.010374764911830426D0 5.734898090362549D0)) (list (list 47.0D0 3262.6376953125D0 0.011705614626407624D0 5.747392177581787D0)) (list (list 47.0D0 3263.453369140625D0 0.013231377117335797D0 5.759886741638184D0)) (list (list 47.0D0 3263.8779296875D0 0.014536084607243538D0 5.772380828857422D0)) (list (list 47.0D0 3263.803466796875D0 0.015445875003933907D0 5.784875392913818D0)) (list (list 47.0D0 3263.407470703125D0 0.016083192080259323D0 5.797369480133057D0)) (list (list 47.0D0 3263.114013671875D0 0.016492823138833046D0 5.809864044189453D0)) (list (list 47.0D0 3263.4794921875D0 0.016383733600378037D0 5.822358131408691D0)) (list (list 47.0D0 3264.467041015625D0 0.015648281201720238D0 5.834852695465088D0)) (list (list 47.0D0 3265.234130859375D0 0.014510396867990494D0 5.847346782684326D0)) (list (list 47.0D0 3265.23046875D0 0.013227837160229683D0 5.859841346740723D0)) (list (list 47.0D0 3264.7236328125D0 0.011924167163670063D0 5.872335433959961D0)) (list (list 47.0D0 3264.071044921875D0 0.010329185985028744D0 5.884829998016357D0)) (list (list 47.0D0 3263.310791015625D0 0.007975141517817974D0 5.897324085235596D0)) (list (list 47.0D0 3257.659423828125D0 0.004823342896997929D0 5.909818649291992D0)) (list (list 47.0D0 3273.541748046875D0 0.0030739905778318644D0 5.9223127365112305D0)) (list (list 47.0D0 3272.117431640625D0 0.0030773261096328497D0 5.934807300567627D0)) (list (list 47.0D0 3263.12158203125D0 0.004886307287961245D0 5.947301387786865D0)) (list (list 47.0D0 3263.005859375D0 0.006434442009776831D0 5.959795951843262D0)) (list (list 47.0D0 3263.19384765625D0 0.00694794999435544D0 5.9722900390625D0)) (list (list 47.0D0 3263.47216796875D0 0.006539557129144669D0 5.9847846031188965D0)) (list (list 47.0D0 3263.40283203125D0 0.005503764376044273D0 5.997278690338135D0)) (list (list 47.0D0 3263.53271484375D0 0.0042948536574840546D0 6.009773254394531D0)) (list (list 47.0D0 3264.3134765625D0 0.003362791845574975D0 6.0222673416137695D0)) (list (list 47.0D0 3264.86767578125D0 0.00293708685785532D0 6.034761905670166D0)) (list (list 47.0D0 3264.323974609375D0 0.0029021641239523888D0 6.0472564697265625D0)) (list (list 47.0D0 3263.056640625D0 0.0028794289100915194D0 6.059750556945801D0)) (list (list 47.0D0 3254.61865234375D0 0.0024738614447414875D0 6.072245121002197D0)) (list (list 47.0D0 3273.42529296875D0 0.0016429316019639373D0 6.0847392082214356D0)) (list (list 47.0D0 3271.788818359375D0 0.001865379512310028D0 6.097233772277832D0)) (list (list 47.0D0 3260.01171875D0 0.003818159457296133D0 6.10972785949707D0)) (list (list 47.0D0 3261.671630859375D0 0.005815419834107161D0 6.122222423553467D0)) (list (list 47.0D0 3262.446533203125D0 0.007063145283609629D0 6.134716510772705D0)) (list (list 47.0D0 3263.080810546875D0 0.007411877159029245D0 6.147211074829102D0)) (list (list 47.0D0 3263.1611328125D0 0.007041523698717356D0 6.15970516204834D0)) (list (list 47.0D0 3262.916259765625D0 0.006132239941507578D0 6.172199726104736D0)) (list (list 47.0D0 3263.087890625D0 0.004876031540334225D0 6.184693813323975D0)) (list (list 47.0D0 3263.341552734375D0 0.0036802145186811686D0 6.197188377380371D0)) (list (list 47.0D0 3263.030029296875D0 0.0029060239903628826D0 6.209682464599609D0)) (list (list 47.0D0 3262.878662109375D0 0.002643115818500519D0 6.222177028656006D0)) (list (list 47.0D0 3263.625732421875D0 0.0027548614889383316D0 6.234671115875244D0)) (list (list 47.0D0 3264.682373046875D0 0.0031314524821937085D0 6.247165679931641D0)) (list (list 47.0D0 3264.86474609375D0 0.0036526231560856104D0 6.259659767150879D0)) (list (list 47.0D0 3264.21826171875D0 0.004202466458082199D0 6.272154331207275D0)) (list (list 47.0D0 3263.6025390625D0 0.004692503251135349D0 6.284648418426514D0)) (list (list 47.0D0 3263.45947265625D0 0.00510426564142108D0 6.29714298248291D0)) (list (list 47.0D0 3263.5166015625D0 0.005487891845405102D0 6.309637069702148D0)) (list (list 47.0D0 3263.547607421875D0 0.005840485915541649D0 6.322131633758545D0)) (list (list 47.0D0 3263.48095703125D0 0.006080357823520899D0 6.334625720977783D0)) (list (list 47.0D0 3263.258544921875D0 0.006102465558797121D0 6.34712028503418D0)) (list (list 47.0D0 3262.793701171875D0 0.005740683060139418D0 6.359614372253418D0)) (list (list 47.0D0 3261.932861328125D0 0.004793250933289528D0 6.3721089363098145D0)) (list (list 47.0D0 3259.883056640625D0 0.003285734448581934D0 6.384603023529053D0)) (list (list 47.0D0 3255.043701171875D0 0.0018620576011016965D0 6.397097587585449D0)) (list (list 47.0D0 3274.5888671875D0 0.0010355084668844939D0 6.4095916748046875D0)) (list (list 47.0D0 3237.69970703125D0 0.0010933424346148968D0 6.422086238861084D0)) (list (list 47.0D0 3260.637939453125D0 0.0025902381166815758D0 6.434580326080322D0)) (list (list 47.0D0 3260.552734375D0 0.0028669177554547787D0 6.447074890136719D0)) (list (list 47.0D0 3262.03857421875D0 0.002411468420177698D0 6.459568977355957D0)) (list (list 47.0D0 3263.117431640625D0 0.0018724112305790186D0 6.4720635414123535D0)) (list (list 47.0D0 3262.28271484375D0 0.0017532819183543325D0 6.484557628631592D0)) (list (list 47.0D0 3260.0625D0 0.0020349440164864064D0 6.497052192687988D0)) (list (list 47.0D0 3260.33544921875D0 0.0023066624999046326D0 6.509546279907227D0)) (list (list 47.0D0 3261.20703125D0 0.0023935630451887846D0 6.522040843963623D0)) (list (list 47.0D0 3260.64990234375D0 0.0022648200392723084D0 6.534534931182861D0)) (list (list 47.0D0 3258.25634765625D0 0.001956379506736994D0 6.547029495239258D0)) (list (list 47.0D0 3255.79248046875D0 0.0015999297611415387D0 6.559523582458496D0)) (list (list 47.0D0 3254.7587890625D0 0.0012916839914396406D0 6.572018146514893D0)) (list (list 47.0D0 3255.55126953125D0 0.0010306785115972162D0 6.584512233734131D0)) (list (list 47.0D0 3229.78955078125D0 8.792275912128389D-4 6.597006797790527D0)) (list (list 47.0D0 3227.3486328125D0 7.837627781555057D-4 6.609501361846924D0)) (list (list 47.0D0 3225.150146484375D0 6.241684895940125D-4 6.621995449066162D0)) (list (list 47.0D0 3224.6572265625D0 4.092779417987913D-4 6.634490013122559D0)) (list (list 47.0D0 3225.330322265625D0 2.106779720634222D-4 6.646984100341797D0)) (list (list 47.0D0 3254.583251953125D0 1.046584511641413D-4 6.659478664398193D0)) (list (list 47.0D0 3260.0869140625D0 1.281084114452824D-4 6.671972751617432D0)) (list (list 47.0D0 3259.39306640625D0 1.093308164854534D-4 6.696961402893066D0)) (list (list 47.0D0 3259.15673828125D0 8.416674972977489D-5 6.709455966949463D0)) (list (list 47.0D0 3262.440673828125D0 7.471723074559123D-5 6.721950054168701D0)) (list (list 47.0D0 3265.142578125D0 8.306308154715225D-5 6.734444618225098D0)) (list (list 47.0D0 3260.8369140625D0 8.024716953514144D-5 6.746938705444336D0)) (list (list 47.0D0 3259.107666015625D0 7.003827340668068D-5 6.759433269500732D0)) (list (list 47.0D0 3261.233154296875D0 5.423900074674748D-5 6.771927356719971D0)) (list (list 47.0D0 3264.807373046875D0 4.093396637472324D-5 6.784421920776367D0)) (list (list 47.0D0 3264.807373046875D0 0.0D0 6.7969160079956055D0)) (list (list 48.0D0 1364.6395263671875D0 0.002899487968534231D0 3.1610658168792725D0)) (list (list 48.0D0 1382.17333984375D0 0.006972944363951683D0 3.17356014251709D0)) (list (list 48.0D0 1350.9501953125D0 7.314084796234965D-4 3.1985487937927246D0)) (list (list 48.0D0 1371.7467041015625D0 0.0028185201808810234D0 3.211043119430542D0)) (list (list 48.0D0 1371.7467041015625D0 0.0D0 3.2235374450683594D0)) (list (list 49.0D0 6003.52001953125D0 9.316224022768438D-4 3.211043119430542D0)) (list (list 49.0D0 6019.71728515625D0 7.358440198004246D-4 3.248526096343994D0)) (list (list 49.0D0 6019.037109375D0 8.916634251363576D-4 3.2610204219818116D0)) (list (list 49.0D0 6021.013671875D0 0.0011447543511167169D0 3.273514747619629D0)) (list (list 49.0D0 5996.166015625D0 0.001162180327810347D0 3.2985033988952637D0)) (list (list 49.0D0 5994.4150390625D0 0.0013883247738704086D0 3.310997724533081D0)) (list (list 49.0D0 5990.54541015625D0 0.0013142911484465003D0 3.3234920501708985D0)) (list (list 49.0D0 5987.16796875D0 0.0010862279450520873D0 3.335986375808716D0)) (list (list 49.0D0 6024.8330078125D0 9.658397175371647D-4 3.348480701446533D0)) (list (list 49.0D0 5999.5439453125D0 6.45503168925643D-4 3.3609750270843506D0)) (list (list 49.0D0 6018.60888671875D0 0.0018394702346995473D0 3.3859636783599854D0)) (list (list 49.0D0 6014.4560546875D0 0.0016370874363929034D0 3.3984580039978028D0)) (list (list 49.0D0 6012.57958984375D0 0.001247478649020195D0 3.41095232963562D0)) (list (list 49.0D0 6010.89111328125D0 9.98741714283824D-4 3.4234466552734375D0)) (list (list 49.0D0 6008.6337890625D0 9.98599804006517D-4 3.435940980911255D0)) (list (list 49.0D0 6005.89794921875D0 0.0010175089119002223D0 3.4484353065490723D0)) (list (list 49.0D0 6003.44921875D0 8.536889217793942D-4 3.4609296321868897D0)) (list (list 49.0D0 5988.77490234375D0 7.165551069192588D-4 3.473423957824707D0)) (list (list 49.0D0 5992.20068359375D0 7.384634809568524D-4 3.498412609100342D0)) (list (list 49.0D0 5998.78125D0 8.241517934948206D-4 3.510906934738159D0)) (list (list 49.0D0 5997.39013671875D0 6.42611354123801D-4 3.5234012603759766D0)) (list (list 49.0D0 6034.8515625D0 5.175881669856608D-4 3.535895586013794D0)) (list (list 49.0D0 6012.98388671875D0 5.325980600900948D-4 3.5483899116516114D0)) (list (list 49.0D0 6006.95947265625D0 7.263391744345427D-4 3.5608842372894287D0)) (list (list 49.0D0 5992.02783203125D0 9.532558615319431D-4 3.573378801345825D0)) (list (list 49.0D0 5979.662109375D0 0.0011158392298966647D0 3.5858731269836426D0)) (list (list 49.0D0 5975.52978515625D0 0.0011495102662593127D0 3.59836745262146D0)) (list (list 49.0D0 5970.0947265625D0 0.0012161260237917304D0 3.6108617782592774D0)) (list (list 49.0D0 5962.6357421875D0 0.0014220218872651458D0 3.6233561038970948D0)) (list (list 49.0D0 5960.2119140625D0 0.00136961555108428D0 3.635850429534912D0)) (list (list 49.0D0 5961.44775390625D0 0.0011341116623952985D0 3.6483447551727295D0)) (list (list 49.0D0 5966.14306640625D0 0.0010681769344955683D0 3.660839080810547D0)) (list (list 49.0D0 5991.18603515625D0 0.0012433540541678667D0 3.6733334064483643D0)) (list (list 49.0D0 6002.68115234375D0 0.001314136665314436D0 3.6858277320861817D0)) (list (list 49.0D0 6006.18896484375D0 0.001485117245465517D0 3.698322057723999D0)) (list (list 49.0D0 6009.92138671875D0 0.0013408036902546883D0 3.7108163833618164D0)) (list (list 49.0D0 6016.427734375D0 0.001314233522862196D0 3.723310708999634D0)) (list (list 49.0D0 6027.74560546875D0 0.00220542773604393D0 3.735805034637451D0)) (list (list 49.0D0 6028.92138671875D0 0.0029612567741423846D0 3.7482993602752686D0)) (list (list 49.0D0 5990.82958984375D0 8.622232126072049D-4 3.7732880115509033D0)) (list (list 49.0D0 5964.39794921875D0 8.188819629140198D-4 3.7857823371887207D0)) (list (list 49.0D0 5992.4921875D0 9.939627489075065D-4 3.798276662826538D0)) (list (list 49.0D0 5988.77294921875D0 9.900975273922086D-4 3.8107709884643555D0)) (list (list 49.0D0 5985.02587890625D0 9.156606392934918D-4 3.823265314102173D0)) (list (list 49.0D0 5983.45361328125D0 7.349253864958882D-4 3.8357596397399903D0)) (list (list 49.0D0 5985.13623046875D0 5.046581500209868D-4 3.8482539653778076D0)) (list (list 49.0D0 5991.546875D0 4.137147916480899D-4 3.860748291015625D0)) (list (list 49.0D0 6022.640625D0 0.0010411737021058798D0 3.8732426166534424D0)) (list (list 49.0D0 6027.86767578125D0 6.91042747348547D-4 3.8857369422912598D0)) (list (list 49.0D0 6010.9052734375D0 2.327711263205856D-4 3.898231267929077D0)) (list (list 49.0D0 5988.4140625D0 9.001199505291879D-4 3.9107255935668946D0)) (list (list 49.0D0 5995.2626953125D0 9.279096848331392D-4 3.923219919204712D0)) (list (list 49.0D0 6000.87841796875D0 0.0010386662324890495D0 3.9357142448425293D0)) (list (list 49.0D0 6001.27001953125D0 9.234216995537281D-4 3.9482085704803467D0)) (list (list 49.0D0 5999.5888671875D0 7.154011982493103D-4 3.960702896118164D0)) (list (list 49.0D0 5999.55322265625D0 5.894803325645626D-4 3.9731972217559815D0)) (list (list 49.0D0 6001.63671875D0 5.850018351338804D-4 3.985691547393799D0)) (list (list 49.0D0 6028.94482421875D0 8.372585871256888D-4 3.998185873031616D0)) (list (list 49.0D0 6004.21142578125D0 7.652887143194675D-4 4.010680198669434D0)) (list (list 49.0D0 6004.6162109375D0 8.541671559214592D-4 4.02317476272583D0)) (list (list 49.0D0 6007.74267578125D0 0.0010534058092162013D0 4.035668849945068D0)) (list (list 49.0D0 6011.419921875D0 0.0012755787465721369D0 4.048163414001465D0)) (list (list 49.0D0 6015.47900390625D0 0.001203048974275589D0 4.060657501220703D0)) (list (list 49.0D0 6024.00537109375D0 8.080714615061879D-4 4.0731520652771D0)) (list (list 49.0D0 6029.69384765625D0 4.927885602228344D-4 4.085646152496338D0)) (list (list 49.0D0 5992.21142578125D0 5.916854133829474D-4 4.098140716552734D0)) (list (list 49.0D0 6006.9482421875D0 7.991995080374181D-4 4.110634803771973D0)) (list (list 49.0D0 6002.8935546875D0 8.235587156377733D-4 4.123129367828369D0)) (list (list 49.0D0 5999.97119140625D0 7.092104642651975D-4 4.135623455047607D0)) (list (list 49.0D0 5998.09912109375D0 6.573264836333692D-4 4.148118019104004D0)) (list (list 49.0D0 5993.86376953125D0 6.82761543430388D-4 4.160612106323242D0)) (list (list 49.0D0 5991.4794921875D0 6.846933392807841D-4 4.173106670379639D0)) (list (list 49.0D0 5991.31640625D0 5.886031431145966D-4 4.185600757598877D0)) (list (list 49.0D0 5991.67529296875D0 4.909074050374329D-4 4.198095321655273D0)) (list (list 49.0D0 5993.63671875D0 4.3443645699881017D-4 4.210589408874512D0)) (list (list 49.0D0 5995.22412109375D0 4.1512848110869527D-4 4.223083972930908D0)) (list (list 49.0D0 5992.0751953125D0 3.5677108098752797D-4 4.248072624206543D0)) (list (list 49.0D0 5992.76904296875D0 3.4798868000507355D-4 4.260566711425781D0)) (list (list 49.0D0 6020.32421875D0 4.180027754046023D-4 4.273061275482178D0)) (list (list 49.0D0 5997.39404296875D0 4.650529008358717D-4 4.285555362701416D0)) (list (list 49.0D0 5998.00927734375D0 4.087539855390787D-4 4.2980499267578125D0)) (list (list 49.0D0 5996.74072265625D0 2.524424926377833D-4 4.310544013977051D0)) (list (list 49.0D0 5994.18017578125D0 1.1197967251064256D-4 4.323038578033447D0)) (list (list 49.0D0 5987.013671875D0 4.036864993395284D-5 4.3355326652526856D0)) (list (list 49.0D0 6015.42041015625D0 1.0558231588220224D-4 4.36052131652832D0)) (list (list 49.0D0 6013.9482421875D0 1.0113306052517146D-4 4.373015880584717D0)) (list (list 49.0D0 6015.31201171875D0 1.1003620602423325D-4 4.385509967803955D0)) (list (list 49.0D0 6018.8369140625D0 1.0639090760378167D-4 4.398004531860352D0)) (list (list 49.0D0 6023.251953125D0 9.499836596660316D-5 4.410499095916748D0)) (list (list 49.0D0 6024.8251953125D0 8.564867312088609D-5 4.422993183135986D0)) (list (list 49.0D0 6018.4697265625D0 6.132348789833486D-5 4.435487747192383D0)) (list (list 49.0D0 5983.50390625D0 9.880266588879749D-5 4.447981834411621D0)) (list (list 49.0D0 5986.58935546875D0 1.0187600128119812D-4 4.460476398468018D0)) (list (list 49.0D0 5987.96435546875D0 1.0765487968456D-4 4.472970485687256D0)) (list (list 49.0D0 5986.28173828125D0 1.1145304597448558D-4 4.485465049743652D0)) (list (list 49.0D0 5983.01123046875D0 1.1522600834723562D-4 4.497959136962891D0)) (list (list 49.0D0 5979.46435546875D0 1.2169543333584443D-4 4.510453701019287D0)) (list (list 49.0D0 5976.6201171875D0 1.1800742504419759D-4 4.522947788238525D0)) (list (list 49.0D0 5975.79833984375D0 9.393988875672221D-5 4.535442352294922D0)) (list (list 49.0D0 6006.89404296875D0 1.0386600479250774D-4 4.54793643951416D0)) (list (list 49.0D0 6029.98095703125D0 2.7040368877351284D-4 4.572925090789795D0)) (list (list 49.0D0 6027.68505859375D0 2.4235817545559257D-4 4.585419654846191D0)) (list (list 49.0D0 6050.74462890625D0 2.125673636328429D-4 4.59791374206543D0)) (list (list 49.0D0 6057.134765625D0 2.0360309281386435D-4 4.610408306121826D0)) (list (list 49.0D0 6059.4931640625D0 3.1415215926244855D-4 4.6229023933410645D0)) (list (list 49.0D0 6059.9990234375D0 4.335852572694421D-4 4.635396957397461D0)) (list (list 49.0D0 6061.5029296875D0 6.59141514915973D-4 4.647891044616699D0)) (list (list 49.0D0 6061.9189453125D0 0.0010742605663836003D0 4.660385608673096D0)) (list (list 49.0D0 6060.89501953125D0 0.001601388561539352D0 4.672879695892334D0)) (list (list 49.0D0 6059.63720703125D0 0.002012401120737195D0 4.6853742599487305D0)) (list (list 49.0D0 6059.0400390625D0 0.002131563611328602D0 4.697868347167969D0)) (list (list 49.0D0 6058.4345703125D0 0.0020342045463621617D0 4.710362911224365D0)) (list (list 49.0D0 6057.4345703125D0 0.0019058118341490627D0 4.7228569984436035D0)) (list (list 49.0D0 6057.1748046875D0 0.0018092526588588953D0 4.7353515625D0)) (list (list 49.0D0 6058.63623046875D0 0.0017559629632160068D0 4.747845649719238D0)) (list (list 49.0D0 6060.13916015625D0 0.0018553533591330052D0 4.760340213775635D0)) (list (list 49.0D0 6060.62451171875D0 0.0020857108756899834D0 4.772834300994873D0)) (list (list 49.0D0 6059.99560546875D0 0.0022952451836317778D0 4.7853288650512695D0)) (list (list 49.0D0 6058.81494140625D0 0.002307833870872855D0 4.797822952270508D0)) (list (list 49.0D0 6058.05517578125D0 0.002020317129790783D0 4.810317516326904D0)) (list (list 49.0D0 6059.4228515625D0 0.0014939727261662484D0 4.822811603546143D0)) (list (list 49.0D0 6061.8203125D0 0.0010313093662261963D0 4.835306167602539D0)) (list (list 49.0D0 6062.5458984375D0 7.86936900112778D-4 4.847800254821777D0)) (list (list 49.0D0 6062.31787109375D0 7.111045997589827D-4 4.860294818878174D0)) (list (list 49.0D0 6063.17578125D0 6.531943799927831D-4 4.872788906097412D0)) (list (list 49.0D0 6065.93359375D0 5.24182221852243D-4 4.885283470153809D0)) (list (list 49.0D0 6065.3388671875D0 3.8088642759248615D-4 4.897777557373047D0)) (list (list 49.0D0 6043.60400390625D0 2.925287408288568D-4 4.910272121429443D0)) (list (list 49.0D0 6060.7109375D0 5.542091093957424D-4 4.922766208648682D0)) (list (list 49.0D0 6061.85498046875D0 7.474056328646839D-4 4.935260772705078D0)) (list (list 49.0D0 6062.7099609375D0 8.64364264998585D-4 4.947755336761475D0)) (list (list 49.0D0 6062.78125D0 9.027146152220666D-4 4.960249423980713D0)) (list (list 49.0D0 6062.41650390625D0 8.835794287733734D-4 4.972743988037109D0)) (list (list 49.0D0 6062.1044921875D0 7.993903709575534D-4 4.985238075256348D0)) (list (list 49.0D0 6062.873046875D0 6.619723280891776D-4 4.997732639312744D0)) (list (list 49.0D0 6064.16162109375D0 5.507611786015332D-4 5.010226726531982D0)) (list (list 49.0D0 6063.98828125D0 5.174347315914929D-4 5.022721290588379D0)) (list (list 49.0D0 6061.8759765625D0 5.523267318494618D-4 5.035215377807617D0)) (list (list 49.0D0 6060.49462890625D0 6.085943314246833D-4 5.047709941864014D0)) (list (list 49.0D0 6060.6884765625D0 6.428141496144235D-4 5.060204029083252D0)) (list (list 49.0D0 6061.54736328125D0 6.679495563730598D-4 5.072698593139648D0)) (list (list 49.0D0 6062.2978515625D0 6.946384673938155D-4 5.085192680358887D0)) (list (list 49.0D0 6062.24755859375D0 7.121366797946394D-4 5.097687244415283D0)) (list (list 49.0D0 6061.71240234375D0 7.079267525114119D-4 5.1101813316345215D0)) (list (list 49.0D0 6061.38134765625D0 6.931809475645423D-4 5.122675895690918D0)) (list (list 49.0D0 6061.015625D0 7.01903598383069D-4 5.135169982910156D0)) (list (list 49.0D0 6060.3505859375D0 7.559405057691038D-4 5.147664546966553D0)) (list (list 49.0D0 6060.00244140625D0 8.270523976534605D-4 5.160158634185791D0)) (list (list 49.0D0 6060.3857421875D0 8.747958927415311D-4 5.1726531982421875D0)) (list (list 49.0D0 6061.13720703125D0 8.984966552816331D-4 5.185147285461426D0)) (list (list 49.0D0 6061.54443359375D0 9.374090586788952D-4 5.197641849517822D0)) (list (list 49.0D0 6061.025390625D0 0.001041626208461821D0 5.2101359367370606D0)) (list (list 49.0D0 6059.9638671875D0 0.001234264811500907D0 5.222630500793457D0)) (list (list 49.0D0 6059.51953125D0 0.0014707698719576002D0 5.235124588012695D0)) (list (list 49.0D0 6060.41943359375D0 0.0016605602577328682D0 5.247619152069092D0)) (list (list 49.0D0 6062.08251953125D0 0.0017735331784933806D0 5.26011323928833D0)) (list (list 49.0D0 6062.96826171875D0 0.001806142390705645D0 5.272607803344727D0)) (list (list 49.0D0 6062.34130859375D0 0.0017738514579832554D0 5.285101890563965D0)) (list (list 49.0D0 6061.4931640625D0 0.0017653844552114606D0 5.297596454620361D0)) (list (list 49.0D0 6061.8076171875D0 0.001810665475204587D0 5.3100905418396D0)) (list (list 49.0D0 6062.72021484375D0 0.001906858989968896D0 5.322585105895996D0)) (list (list 49.0D0 6062.822265625D0 0.002049681032076478D0 5.335079193115234D0)) (list (list 49.0D0 6062.50732421875D0 0.0022597203496843577D0 5.347573757171631D0)) (list (list 49.0D0 6063.0673828125D0 0.0025025326758623124D0 5.360067844390869D0)) (list (list 49.0D0 6064.4765625D0 0.002693320158869028D0 5.372562408447266D0)) (list (list 49.0D0 6065.04296875D0 0.0027606228832155466D0 5.385056495666504D0)) (list (list 49.0D0 6063.982421875D0 0.002719663782045245D0 5.3975510597229D0)) (list (list 49.0D0 6062.4501953125D0 0.002704472513869405D0 5.410045146942139D0)) (list (list 49.0D0 6061.61865234375D0 0.002652351511642337D0 5.422539710998535D0)) (list (list 49.0D0 6061.63720703125D0 0.0024384409189224243D0 5.435033798217773D0)) (list (list 49.0D0 6061.39599609375D0 0.002168839331716299D0 5.44752836227417D0)) (list (list 49.0D0 6060.5166015625D0 0.0021276911720633507D0 5.460022449493408D0)) (list (list 49.0D0 6060.140625D0 0.002437669550999999D0 5.472517013549805D0)) (list (list 49.0D0 6061.13916015625D0 0.00289500062353909D0 5.485011100769043D0)) (list (list 49.0D0 6062.02587890625D0 0.0032616127282381058D0 5.4975056648254395D0)) (list (list 49.0D0 6061.57763671875D0 0.0034058582969009877D0 5.510000228881836D0)) (list (list 49.0D0 6060.28955078125D0 0.0033873221836984158D0 5.522494316101074D0)) (list (list 49.0D0 6059.47021484375D0 0.003297168528661132D0 5.534988880157471D0)) (list (list 49.0D0 6060.11181640625D0 0.0032070321030914784D0 5.547482967376709D0)) (list (list 49.0D0 6061.49853515625D0 0.003267161315307021D0 5.5599775314331055D0)) (list (list 49.0D0 6062.6259765625D0 0.0034349090419709683D0 5.572471618652344D0)) (list (list 49.0D0 6063.4873046875D0 0.003523122053593397D0 5.58496618270874D0)) (list (list 49.0D0 6064.298828125D0 0.0034893767442554236D0 5.5974602699279785D0)) (list (list 49.0D0 6063.9443359375D0 0.003390536643564701D0 5.609954833984375D0)) (list (list 49.0D0 6061.87060546875D0 0.0033655252773314715D0 5.622448921203613D0)) (list (list 49.0D0 6059.7001953125D0 0.003539677243679762D0 5.63494348526001D0)) (list (list 49.0D0 6058.66259765625D0 0.003733506891876459D0 5.647437572479248D0)) (list (list 49.0D0 6058.7509765625D0 0.003820316633209586D0 5.6599321365356445D0)) (list (list 49.0D0 6058.9541015625D0 0.0039002480916678906D0 5.672426223754883D0)) (list (list 49.0D0 6058.63525390625D0 0.00406345259398222D0 5.684920787811279D0)) (list (list 49.0D0 6058.06982421875D0 0.00424288772046566D0 5.697414875030518D0)) (list (list 49.0D0 6057.810546875D0 0.004328316543251276D0 5.709909439086914D0)) (list (list 49.0D0 6057.6337890625D0 0.004359522368758917D0 5.722403526306152D0)) (list (list 49.0D0 6057.498046875D0 0.004300168249756098D0 5.734898090362549D0)) (list (list 49.0D0 6058.43359375D0 0.003913256339728832D0 5.747392177581787D0)) (list (list 49.0D0 6061.6474609375D0 0.0032749788369983435D0 5.759886741638184D0)) (list (list 49.0D0 6063.92724609375D0 0.0029975909274071455D0 5.772380828857422D0)) (list (list 49.0D0 6063.4326171875D0 0.003209208371117711D0 5.784875392913818D0)) (list (list 49.0D0 6060.75341796875D0 0.0037758201360702515D0 5.797369480133057D0)) (list (list 49.0D0 6060.169921875D0 0.004212062805891037D0 5.809864044189453D0)) (list (list 49.0D0 6062.51904296875D0 0.004255049861967564D0 5.822358131408691D0)) (list (list 49.0D0 6065.26318359375D0 0.0044161067344248295D0 5.834852695465088D0)) (list (list 49.0D0 6066.107421875D0 0.004710391629487276D0 5.847346782684326D0)) (list (list 49.0D0 6064.79052734375D0 0.004899759776890278D0 5.859841346740723D0)) (list (list 49.0D0 6063.02099609375D0 0.004879329353570938D0 5.872335433959961D0)) (list (list 49.0D0 6061.8310546875D0 0.004342557396739721D0 5.884829998016357D0)) (list (list 49.0D0 6060.9033203125D0 0.0030510080978274346D0 5.897324085235596D0)) (list (list 49.0D0 6071.115234375D0 0.001958690583705902D0 5.909818649291992D0)) (list (list 49.0D0 6070.62841796875D0 0.0017107587773352862D0 5.9223127365112305D0)) (list (list 49.0D0 6057.4755859375D0 0.002567658666521311D0 5.934807300567627D0)) (list (list 49.0D0 6059.47607421875D0 0.00348948547616601D0 5.947301387786865D0)) (list (list 49.0D0 6059.6240234375D0 0.0037485663779079914D0 5.959795951843262D0)) (list (list 49.0D0 6059.83349609375D0 0.0034122078213840723D0 5.9722900390625D0)) (list (list 49.0D0 6060.17919921875D0 0.002639865269884467D0 5.9847846031188965D0)) (list (list 49.0D0 6060.982421875D0 0.0016933720326051116D0 5.997278690338135D0)) (list (list 49.0D0 6062.3623046875D0 9.45347361266613D-4 6.009773254394531D0)) (list (list 49.0D0 6036.9423828125D0 7.46941368561238D-4 6.0222673416137695D0)) (list (list 49.0D0 6036.29296875D0 7.00902659446001D-4 6.034761905670166D0)) (list (list 49.0D0 6035.68798828125D0 7.215694640763104D-4 6.0472564697265625D0)) (list (list 49.0D0 6036.83251953125D0 8.359116618521512D-4 6.059750556945801D0)) (list (list 49.0D0 6040.92041015625D0 0.001006059581413865D0 6.072245121002197D0)) (list (list 49.0D0 6047.7587890625D0 0.001076453598216176D0 6.0847392082214356D0)) (list (list 49.0D0 6053.83740234375D0 0.0012399978004395962D0 6.097233772277832D0)) (list (list 49.0D0 6058.49462890625D0 0.0017655717674642802D0 6.10972785949707D0)) (list (list 49.0D0 6060.4638671875D0 0.0022154580801725388D0 6.122222423553467D0)) (list (list 49.0D0 6062.3662109375D0 0.002452948596328497D0 6.134716510772705D0)) (list (list 49.0D0 6063.27490234375D0 0.002499818103387952D0 6.147211074829102D0)) (list (list 49.0D0 6063.0078125D0 0.0023406106047332287D0 6.15970516204834D0)) (list (list 49.0D0 6062.484375D0 0.002001129789277911D0 6.172199726104736D0)) (list (list 49.0D0 6062.2373046875D0 0.0015564605128020049D0 6.184693813323975D0)) (list (list 49.0D0 6061.009765625D0 0.001180184306576848D0 6.197188377380371D0)) (list (list 49.0D0 6059.24462890625D0 0.0010643495479598642D0 6.209682464599609D0)) (list (list 49.0D0 6059.24609375D0 0.0012258171336725355D0 6.222177028656006D0)) (list (list 49.0D0 6060.873046875D0 0.0016009478131309152D0 6.234671115875244D0)) (list (list 49.0D0 6062.27197265625D0 0.0021030239295214415D0 6.247165679931641D0)) (list (list 49.0D0 6063.0068359375D0 0.002607598202303052D0 6.259659767150879D0)) (list (list 49.0D0 6062.990234375D0 0.003048691898584366D0 6.272154331207275D0)) (list (list 49.0D0 6062.35498046875D0 0.0034476008731871844D0 6.284648418426514D0)) (list (list 49.0D0 6061.775390625D0 0.003894635709002614D0 6.29714298248291D0)) (list (list 49.0D0 6061.57177734375D0 0.004404798150062561D0 6.309637069702148D0)) (list (list 49.0D0 6061.5166015625D0 0.0048832674510777D0 6.322131633758545D0)) (list (list 49.0D0 6061.48974609375D0 0.00519352313131094D0 6.334625720977783D0)) (list (list 49.0D0 6061.4248046875D0 0.005207813810557127D0 6.34712028503418D0)) (list (list 49.0D0 6061.162109375D0 0.004776549991220236D0 6.359614372253418D0)) (list (list 49.0D0 6060.59423828125D0 0.0037287482991814614D0 6.3721089363098145D0)) (list (list 49.0D0 6053.7802734375D0 0.0022655054926872254D0 6.384603023529053D0)) (list (list 49.0D0 6072.7529296875D0 0.0014077178202569485D0 6.397097587585449D0)) (list (list 49.0D0 6053.91455078125D0 0.0013624342391267419D0 6.4095916748046875D0)) (list (list 49.0D0 6059.9482421875D0 0.002259802306070924D0 6.422086238861084D0)) (list (list 49.0D0 6060.00830078125D0 0.002955493750050664D0 6.434580326080322D0)) (list (list 49.0D0 6060.470703125D0 0.0029091837350279093D0 6.447074890136719D0)) (list (list 49.0D0 6060.70751953125D0 0.002134230686351657D0 6.459568977355957D0)) (list (list 49.0D0 6059.5322265625D0 0.001353665255010128D0 6.4720635414123535D0)) (list (list 49.0D0 6058.94384765625D0 0.0012920707231387496D0 6.484557628631592D0)) (list (list 49.0D0 6059.3017578125D0 0.0018066358752548695D0 6.497052192687988D0)) (list (list 49.0D0 6059.2001953125D0 0.0022739393170922995D0 6.509546279907227D0)) (list (list 49.0D0 6058.4912109375D0 0.0023394296877086163D0 6.522040843963623D0)) (list (list 49.0D0 6057.78466796875D0 0.002032633638009429D0 6.534534931182861D0)) (list (list 49.0D0 6056.41796875D0 0.0015082714380696416D0 6.547029495239258D0)) (list (list 49.0D0 6053.87841796875D0 0.0010116193443536759D0 6.559523582458496D0)) (list (list 49.0D0 6052.68603515625D0 7.237924728542566D-4 6.572018146514893D0)) (list (list 49.0D0 6053.05810546875D0 5.804953398182988D-4 6.584512233734131D0)) (list (list 49.0D0 6055.5546875D0 4.3821477447636426D-4 6.597006797790527D0)) (list (list 49.0D0 6056.91259765625D0 2.523362636566162D-4 6.609501361846924D0)) (list (list 49.0D0 6055.7099609375D0 1.051547224051319D-4 6.621995449066162D0)) (list (list 49.0D0 6052.8193359375D0 4.611008625943214D-5 6.634490013122559D0)) (list (list 49.0D0 6048.484375D0 3.994989674538374D-5 6.646984100341797D0)) (list (list 49.0D0 6043.74267578125D0 4.5230219257064164D-5 6.659478664398193D0)) (list (list 49.0D0 6043.61181640625D0 4.264223753125407D-5 6.671972751617432D0)) (list (list 49.0D0 6043.61181640625D0 0.0D0 6.684467315673828D0)) (list (list 50.0D0 2359.392578125D0 0.002977038500830531D0 3.2360317707061768D0)) (list (list 50.0D0 2358.40625D0 0.0027724045794457198D0 3.248526096343994D0)) (list (list 50.0D0 2366.790771484375D0 0.0012742538237944246D0 3.273514747619629D0)) (list (list 50.0D0 2390.616943359375D0 4.027757386211306D-4 3.310997724533081D0)) (list (list 50.0D0 2363.599365234375D0 0.001094718580134213D0 3.335986375808716D0)) (list (list 50.0D0 2356.25D0 0.0032768340315669775D0 3.373469352722168D0)) (list (list 50.0D0 2356.25D0 0.0D0 3.3859636783599854D0)) (list (list 51.0D0 1892.5352783203125D0 5.990873905830085D-4 3.2860090732574463D0)) (list (list 51.0D0 1872.018798828125D0 0.00711024971678853D0 3.2985033988952637D0)) (list (list 51.0D0 1893.32373046875D0 0.0017965639708563686D0 3.335986375808716D0)) (list (list 51.0D0 1894.5341796875D0 0.0017341743223369122D0 3.348480701446533D0)) (list (list 51.0D0 1894.21337890625D0 0.001040368340909481D0 3.373469352722168D0)) (list (list 51.0D0 1913.7547607421875D0 4.4871249701827765D-4 3.3984580039978028D0)) (list (list 51.0D0 1913.7547607421875D0 0.0D0 3.41095232963562D0)) (list (list 52.0D0 6985.45556640625D0 0.0012383704306557775D0 3.2985033988952637D0)) (list (list 52.0D0 7002.826171875D0 0.002558743581175804D0 3.3234920501708985D0)) (list (list 52.0D0 7001.3837890625D0 0.0031454837881028653D0 3.335986375808716D0)) (list (list 52.0D0 6998.36572265625D0 0.003632771549746394D0 3.348480701446533D0)) (list (list 52.0D0 6998.36572265625D0 0.0D0 3.3609750270843506D0)) (list (list 53.0D0 7420.9443359375D0 4.419334582053125D-4 3.3234920501708985D0)) (list (list 53.0D0 7438.48974609375D0 3.261388628743589D-4 3.335986375808716D0)) (list (list 53.0D0 7438.134765625D0 2.8617182397283614D-4 3.348480701446533D0)) (list (list 53.0D0 7434.06591796875D0 3.9698107866570354D-4 3.3859636783599854D0)) (list (list 53.0D0 7434.21240234375D0 3.531324618961662D-4 3.3984580039978028D0)) (list (list 53.0D0 7424.3046875D0 2.101056306855753D-4 3.41095232963562D0)) (list (list 53.0D0 7445.5478515625D0 3.762018750421703D-4 3.435940980911255D0)) (list (list 53.0D0 7447.6962890625D0 4.097890923731029D-4 3.4484353065490723D0)) (list (list 53.0D0 7457.46484375D0 5.542843719013035D-4 3.4859182834625244D0)) (list (list 53.0D0 7453.5693359375D0 5.367647390812635D-4 3.498412609100342D0)) (list (list 53.0D0 7451.78125D0 5.854779738001525D-4 3.510906934738159D0)) (list (list 53.0D0 7451.9921875D0 6.043516914360225D-4 3.5234012603759766D0)) (list (list 53.0D0 7452.23876953125D0 5.515003576874733D-4 3.535895586013794D0)) (list (list 53.0D0 7451.77099609375D0 4.3950765393674374D-4 3.5483899116516114D0)) (list (list 53.0D0 7450.943359375D0 3.320098330732435D-4 3.5608842372894287D0)) (list (list 53.0D0 7447.90771484375D0 2.6768521638587117D-4 3.573378801345825D0)) (list (list 53.0D0 7445.482421875D0 2.9684766195714474D-4 3.5858731269836426D0)) (list (list 53.0D0 7474.14697265625D0 3.6481686402112246D-4 3.59836745262146D0)) (list (list 53.0D0 7455.6630859375D0 7.230625487864018D-4 3.6108617782592774D0)) (list (list 53.0D0 7458.3095703125D0 0.0010059193009510637D0 3.6233561038970948D0)) (list (list 53.0D0 7460.73046875D0 0.001010492560453713D0 3.635850429534912D0)) (list (list 53.0D0 7464.732421875D0 8.407491259276867D-4 3.6483447551727295D0)) (list (list 53.0D0 7465.03271484375D0 6.3082086853683D-4 3.660839080810547D0)) (list (list 53.0D0 7459.767578125D0 4.990556044504046D-4 3.6733334064483643D0)) (list (list 53.0D0 7455.04736328125D0 6.022223387844861D-4 3.6858277320861817D0)) (list (list 53.0D0 7457.76513671875D0 7.095019100233913D-4 3.698322057723999D0)) (list (list 53.0D0 7464.49267578125D0 9.72323352470994D-4 3.7108163833618164D0)) (list (list 53.0D0 7468.7275390625D0 0.0015196072636172176D0 3.723310708999634D0)) (list (list 53.0D0 7468.00244140625D0 0.002063000574707985D0 3.735805034637451D0)) (list (list 53.0D0 7463.88037109375D0 0.0024942730087786913D0 3.7482993602752686D0)) (list (list 53.0D0 7459.32177734375D0 0.003030854044482112D0 3.760793685913086D0)) (list (list 53.0D0 7457.2314453125D0 0.0034319162368774414D0 3.7732880115509033D0)) (list (list 53.0D0 7456.9814453125D0 0.0033512855879962445D0 3.7857823371887207D0)) (list (list 53.0D0 7457.14111328125D0 0.0028578205965459347D0 3.798276662826538D0)) (list (list 53.0D0 7456.57373046875D0 0.002225087955594063D0 3.8107709884643555D0)) (list (list 53.0D0 7455.4287109375D0 0.001745541230775416D0 3.823265314102173D0)) (list (list 53.0D0 7453.8349609375D0 0.0014538528630509973D0 3.8357596397399903D0)) (list (list 53.0D0 7451.2294921875D0 0.0011995999375358224D0 3.8482539653778076D0)) (list (list 53.0D0 7450.39306640625D0 9.325602441094816D-4 3.860748291015625D0)) (list (list 53.0D0 7452.0869140625D0 8.035927312448621D-4 3.8732426166534424D0)) (list (list 53.0D0 7453.693359375D0 0.0010352941462770105D0 3.8857369422912598D0)) (list (list 53.0D0 7454.5693359375D0 0.0016436465084552765D0 3.898231267929077D0)) (list (list 53.0D0 7456.376953125D0 0.0024910224601626397D0 3.9107255935668946D0)) (list (list 53.0D0 7458.39111328125D0 0.0033009625039994717D0 3.923219919204712D0)) (list (list 53.0D0 7459.1630859375D0 0.0037309464532881976D0 3.9357142448425293D0)) (list (list 53.0D0 7458.9111328125D0 0.0037486902438104153D0 3.9482085704803467D0)) (list (list 53.0D0 7457.82080078125D0 0.003556093666702509D0 3.960702896118164D0)) (list (list 53.0D0 7455.79541015625D0 0.0033215137664228678D0 3.9731972217559815D0)) (list (list 53.0D0 7454.0712890625D0 0.0031797979027032853D0 3.985691547393799D0)) (list (list 53.0D0 7453.99951171875D0 0.003139226697385311D0 3.998185873031616D0)) (list (list 53.0D0 7455.0498046875D0 0.00309845432639122D0 4.010680198669434D0)) (list (list 53.0D0 7454.92138671875D0 0.0027805964928120375D0 4.02317476272583D0)) (list (list 53.0D0 7451.3486328125D0 0.002203364158049226D0 4.035668849945068D0)) (list (list 53.0D0 7449.1162109375D0 0.0018277806229889393D0 4.048163414001465D0)) (list (list 53.0D0 7449.73486328125D0 0.0016752899391576648D0 4.060657501220703D0)) (list (list 53.0D0 7450.1923828125D0 0.0016256292583420873D0 4.0731520652771D0)) (list (list 53.0D0 7448.046875D0 0.0014824445825070143D0 4.085646152496338D0)) (list (list 53.0D0 7449.33544921875D0 0.0011699076276272536D0 4.098140716552734D0)) (list (list 53.0D0 7469.994140625D0 0.0010433938587084413D0 4.110634803771973D0)) (list (list 53.0D0 7465.04736328125D0 0.0015644272789359093D0 4.123129367828369D0)) (list (list 53.0D0 7462.59326171875D0 0.0019900398328900338D0 4.135623455047607D0)) (list (list 53.0D0 7460.298828125D0 0.0027735622134059668D0 4.148118019104004D0)) (list (list 53.0D0 7460.5654296875D0 0.0037152862641960383D0 4.160612106323242D0)) (list (list 53.0D0 7463.2080078125D0 0.00427722092717886D0 4.173106670379639D0)) (list (list 53.0D0 7465.22998046875D0 0.004160746466368437D0 4.185600757598877D0)) (list (list 53.0D0 7464.55126953125D0 0.0034524898510426283D0 4.198095321655273D0)) (list (list 53.0D0 7462.0234375D0 0.002888929331675172D0 4.210589408874512D0)) (list (list 53.0D0 7459.787109375D0 0.0028165499679744244D0 4.223083972930908D0)) (list (list 53.0D0 7459.49658203125D0 0.002777446759864688D0 4.2355780601501465D0)) (list (list 53.0D0 7461.19384765625D0 0.0024262447841465474D0 4.248072624206543D0)) (list (list 53.0D0 7464.33154296875D0 0.0018939300207421184D0 4.260566711425781D0)) (list (list 53.0D0 7465.60986328125D0 0.0015389551408588887D0 4.273061275482178D0)) (list (list 53.0D0 7464.68896484375D0 0.0015704259276390076D0 4.285555362701416D0)) (list (list 53.0D0 7462.45361328125D0 0.0018562681507319212D0 4.2980499267578125D0)) (list (list 53.0D0 7458.83837890625D0 0.0019216671353206039D0 4.310544013977051D0)) (list (list 53.0D0 7449.52099609375D0 0.001598280156031251D0 4.323038578033447D0)) (list (list 53.0D0 7442.95361328125D0 0.0012126825749874115D0 4.3355326652526856D0)) (list (list 53.0D0 7441.08740234375D0 8.116231765598059D-4 4.348027229309082D0)) (list (list 53.0D0 7443.49462890625D0 5.289221880957484D-4 4.36052131652832D0)) (list (list 53.0D0 7446.75732421875D0 4.7137768706306815D-4 4.373015880584717D0)) (list (list 53.0D0 7450.8955078125D0 6.538187735714018D-4 4.385509967803955D0)) (list (list 53.0D0 7461.109375D0 0.001257804804481566D0 4.398004531860352D0)) (list (list 53.0D0 7459.11865234375D0 0.0016929792473092676D0 4.410499095916748D0)) (list (list 53.0D0 7458.3916015625D0 0.001897202106192708D0 4.422993183135986D0)) (list (list 53.0D0 7458.42626953125D0 0.0018119211308658123D0 4.435487747192383D0)) (list (list 53.0D0 7460.35595703125D0 0.0014042272232472897D0 4.447981834411621D0)) (list (list 53.0D0 7466.9052734375D0 8.994489326141775D-4 4.460476398468018D0)) (list (list 53.0D0 7471.64453125D0 6.324375863187015D-4 4.472970485687256D0)) (list (list 53.0D0 7474.548828125D0 4.627235175576061D-4 4.485465049743652D0)) (list (list 53.0D0 7450.11572265625D0 3.8668891647830606D-4 4.497959136962891D0)) (list (list 53.0D0 7451.59326171875D0 5.154858808964491D-4 4.510453701019287D0)) (list (list 53.0D0 7455.01708984375D0 7.228957838378847D-4 4.522947788238525D0)) (list (list 53.0D0 7460.640625D0 0.0010533153545111418D0 4.535442352294922D0)) (list (list 53.0D0 7462.70361328125D0 0.0013971524313092232D0 4.54793643951416D0)) (list (list 53.0D0 7463.265625D0 0.0017193282255902887D0 4.560431003570557D0)) (list (list 53.0D0 7461.8720703125D0 0.0019497370813041926D0 4.572925090789795D0)) (list (list 53.0D0 7459.63818359375D0 0.002089437795802951D0 4.585419654846191D0)) (list (list 53.0D0 7458.708984375D0 0.002168940380215645D0 4.59791374206543D0)) (list (list 53.0D0 7459.80712890625D0 0.002222434151917696D0 4.610408306121826D0)) (list (list 53.0D0 7461.95703125D0 0.0023373698350042105D0 4.6229023933410645D0)) (list (list 53.0D0 7463.5390625D0 0.0024557358119636774D0 4.635396957397461D0)) (list (list 53.0D0 7463.978515625D0 0.0024595391005277634D0 4.647891044616699D0)) (list (list 53.0D0 7463.431640625D0 0.002320078667253256D0 4.660385608673096D0)) (list (list 53.0D0 7461.384765625D0 0.0020813781302422285D0 4.672879695892334D0)) (list (list 53.0D0 7458.88720703125D0 0.0019086792599409819D0 4.6853742599487305D0)) (list (list 53.0D0 7457.42822265625D0 0.0018441802822053433D0 4.697868347167969D0)) (list (list 53.0D0 7456.58056640625D0 0.0018323644762858749D0 4.710362911224365D0)) (list (list 53.0D0 7455.796875D0 0.001867057872004807D0 4.7228569984436035D0)) (list (list 53.0D0 7455.7197265625D0 0.0019178049406036735D0 4.7353515625D0)) (list (list 53.0D0 7456.87744140625D0 0.0018603128846734763D0 4.747845649719238D0)) (list (list 53.0D0 7458.48291015625D0 0.001614919165149331D0 4.760340213775635D0)) (list (list 53.0D0 7458.97216796875D0 0.0012646454852074385D0 4.772834300994873D0)) (list (list 53.0D0 7458.46142578125D0 0.0010168601293116808D0 4.7853288650512695D0)) (list (list 53.0D0 7457.15283203125D0 0.001010859734378755D0 4.797822952270508D0)) (list (list 53.0D0 7457.24658203125D0 0.0012923077447339893D0 4.810317516326904D0)) (list (list 53.0D0 7459.3095703125D0 0.0018013666849583388D0 4.822811603546143D0)) (list (list 53.0D0 7461.6923828125D0 0.0023768427781760693D0 4.835306167602539D0)) (list (list 53.0D0 7462.27392578125D0 0.0027610810939222575D0 4.847800254821777D0)) (list (list 53.0D0 7462.2509765625D0 0.0029948013834655285D0 4.860294818878174D0)) (list (list 53.0D0 7462.3427734375D0 0.0032807139214128256D0 4.872788906097412D0)) (list (list 53.0D0 7462.744140625D0 0.0036499809939414263D0 4.885283470153809D0)) (list (list 53.0D0 7463.03271484375D0 0.003914077300578356D0 4.897777557373047D0)) (list (list 53.0D0 7462.7080078125D0 0.0038107605651021004D0 4.910272121429443D0)) (list (list 53.0D0 7462.28564453125D0 0.0032129643950611353D0 4.922766208648682D0)) (list (list 53.0D0 7465.4326171875D0 0.0022037802264094353D0 4.935260772705078D0)) (list (list 53.0D0 7448.83935546875D0 0.0013043890940025449D0 4.947755336761475D0)) (list (list 53.0D0 7450.53271484375D0 0.0014386132825165987D0 4.960249423980713D0)) (list (list 53.0D0 7460.4169921875D0 0.0027134870178997517D0 4.972743988037109D0)) (list (list 53.0D0 7459.12255859375D0 0.003909638617187738D0 4.985238075256348D0)) (list (list 53.0D0 7459.5556640625D0 0.004677072167396545D0 4.997732639312744D0)) (list (list 53.0D0 7460.74560546875D0 0.004966587293893099D0 5.010226726531982D0)) (list (list 53.0D0 7461.55810546875D0 0.004810969345271587D0 5.022721290588379D0)) (list (list 53.0D0 7461.24951171875D0 0.004252479877322912D0 5.035215377807617D0)) (list (list 53.0D0 7459.9541015625D0 0.0034168807324022055D0 5.047709941864014D0)) (list (list 53.0D0 7458.470703125D0 0.0024084539618343115D0 5.060204029083252D0)) (list (list 53.0D0 7456.658203125D0 0.0013290777569636703D0 5.072698593139648D0)) (list (list 53.0D0 7467.52978515625D0 7.116158376447856D-4 5.085192680358887D0)) (list (list 53.0D0 7467.35498046875D0 6.311276811175048D-4 5.097687244415283D0)) (list (list 53.0D0 7460.80810546875D0 9.566343505866826D-4 5.1101813316345215D0)) (list (list 53.0D0 7459.77490234375D0 0.0013886070810258389D0 5.122675895690918D0)) (list (list 53.0D0 7458.65673828125D0 0.0016121952794492245D0 5.135169982910156D0)) (list (list 53.0D0 7456.93798828125D0 0.0014740615151822567D0 5.147664546966553D0)) (list (list 53.0D0 7456.8291015625D0 0.001094954670406878D0 5.160158634185791D0)) (list (list 53.0D0 7458.0283203125D0 8.964459411799908D-4 5.1726531982421875D0)) (list (list 53.0D0 7460.10009765625D0 0.0011484657879918814D0 5.185147285461426D0)) (list (list 53.0D0 7461.4365234375D0 0.0016275770030915738D0 5.197641849517822D0)) (list (list 53.0D0 7462.0986328125D0 0.001812776899896562D0 5.2101359367370606D0)) (list (list 53.0D0 7466.84912109375D0 0.0015819516265764833D0 5.222630500793457D0)) (list (list 53.0D0 7445.30615234375D0 0.0013463667128235102D0 5.235124588012695D0)) (list (list 53.0D0 7450.86181640625D0 0.001595386303961277D0 5.247619152069092D0)) (list (list 53.0D0 7463.6240234375D0 0.0031681349501013756D0 5.26011323928833D0)) (list (list 53.0D0 7462.51611328125D0 0.004019561689347029D0 5.272607803344727D0)) (list (list 53.0D0 7460.900390625D0 0.004476114641875029D0 5.285101890563965D0)) (list (list 53.0D0 7459.18310546875D0 0.004746092949062586D0 5.297596454620361D0)) (list (list 53.0D0 7459.2001953125D0 0.004746582824736834D0 5.3100905418396D0)) (list (list 53.0D0 7460.7744140625D0 0.004521924536675215D0 5.322585105895996D0)) (list (list 53.0D0 7461.8525390625D0 0.004290015436708927D0 5.335079193115234D0)) (list (list 53.0D0 7461.55810546875D0 0.0040396396070718765D0 5.347573757171631D0)) (list (list 53.0D0 7460.8505859375D0 0.003682236187160015D0 5.360067844390869D0)) (list (list 53.0D0 7460.357421875D0 0.003001627279445529D0 5.372562408447266D0)) (list (list 53.0D0 7457.572265625D0 0.002012846292927861D0 5.385056495666504D0)) (list (list 53.0D0 7452.13037109375D0 0.001264114398509264D0 5.3975510597229D0)) (list (list 53.0D0 7450.5234375D0 8.256961591541767D-4 5.410045146942139D0)) (list (list 53.0D0 7458.0986328125D0 6.90090237185359D-4 5.422539710998535D0)) (list (list 53.0D0 7460.306640625D0 0.0010049646953120828D0 5.435033798217773D0)) (list (list 53.0D0 7458.87451171875D0 0.0014423294924199582D0 5.44752836227417D0)) (list (list 53.0D0 7456.2763671875D0 0.0017586611211299897D0 5.460022449493408D0)) (list (list 53.0D0 7454.82080078125D0 0.001654158579185605D0 5.472517013549805D0)) (list (list 53.0D0 7453.935546875D0 0.001146918279118836D0 5.485011100769043D0)) (list (list 53.0D0 7459.09423828125D0 5.81810949370265D-4 5.4975056648254395D0)) (list (list 53.0D0 7440.71435546875D0 3.8789669633843005D-4 5.510000228881836D0)) (list (list 53.0D0 7456.75048828125D0 4.924567765556276D-4 5.522494316101074D0)) (list (list 53.0D0 7453.03173828125D0 7.524546235799789D-4 5.534988880157471D0)) (list (list 53.0D0 7450.169921875D0 8.304154616780579D-4 5.547482967376709D0)) (list (list 53.0D0 7447.02978515625D0 7.921805372461677D-4 5.5599775314331055D0)) (list (list 53.0D0 7446.28076171875D0 7.130781305022538D-4 5.572471618652344D0)) (list (list 53.0D0 7447.0556640625D0 6.325531285256147D-4 5.58496618270874D0)) (list (list 53.0D0 7448.388671875D0 5.304620717652142D-4 5.5974602699279785D0)) (list (list 53.0D0 7453.84130859375D0 4.2198688606731594D-4 5.609954833984375D0)) (list (list 53.0D0 7457.82763671875D0 4.5108635094948113D-4 5.622448921203613D0)) (list (list 53.0D0 7457.5390625D0 4.967268323525786D-4 5.63494348526001D0)) (list (list 53.0D0 7454.90185546875D0 5.086945020593703D-4 5.647437572479248D0)) (list (list 53.0D0 7454.3994140625D0 4.931840812787414D-4 5.6599321365356445D0)) (list (list 53.0D0 7454.65087890625D0 4.7592492774128914D-4 5.672426223754883D0)) (list (list 53.0D0 7455.1357421875D0 4.440765187609941D-4 5.684920787811279D0)) (list (list 53.0D0 7455.06494140625D0 3.6603049375116825D-4 5.697414875030518D0)) (list (list 53.0D0 7453.181640625D0 2.672791597433388D-4 5.709909439086914D0)) (list (list 53.0D0 7447.35888671875D0 2.1757010836154223D-4 5.722403526306152D0)) (list (list 53.0D0 7445.65966796875D0 2.712557034101337D-4 5.734898090362549D0)) (list (list 53.0D0 7450.3974609375D0 4.041086358483881D-4 5.747392177581787D0)) (list (list 53.0D0 7459.6064453125D0 7.339347503148019D-4 5.759886741638184D0)) (list (list 53.0D0 7460.97705078125D0 0.0010826203506439925D0 5.772380828857422D0)) (list (list 53.0D0 7460.19384765625D0 0.0012744155246764422D0 5.784875392913818D0)) (list (list 53.0D0 7458.646484375D0 0.0013611166505143047D0 5.797369480133057D0)) (list (list 53.0D0 7458.0234375D0 0.001464431406930089D0 5.809864044189453D0)) (list (list 53.0D0 7459.2724609375D0 0.0015532951802015305D0 5.822358131408691D0)) (list (list 53.0D0 7462.58935546875D0 0.0014971054624766112D0 5.834852695465088D0)) (list (list 53.0D0 7469.7236328125D0 0.0012273278553038836D0 5.847346782684326D0)) (list (list 53.0D0 7473.36328125D0 9.371849591843784D-4 5.859841346740723D0)) (list (list 53.0D0 7471.11767578125D0 7.393165724352002D-4 5.872335433959961D0)) (list (list 53.0D0 7465.4970703125D0 9.723296971060336D-4 5.884829998016357D0)) (list (list 53.0D0 7461.833984375D0 0.0014812260633334518D0 5.897324085235596D0)) (list (list 53.0D0 7459.38134765625D0 0.0019415203714743257D0 5.909818649291992D0)) (list (list 53.0D0 7457.740234375D0 0.002159547759220004D0 5.9223127365112305D0)) (list (list 53.0D0 7457.54931640625D0 0.002018178580328822D0 5.934807300567627D0)) (list (list 53.0D0 7458.095703125D0 0.0017025552224367857D0 5.947301387786865D0)) (list (list 53.0D0 7458.57080078125D0 0.0015279666986316443D0 5.959795951843262D0)) (list (list 53.0D0 7459.30126953125D0 0.001670444500632584D0 5.9722900390625D0)) (list (list 53.0D0 7460.4619140625D0 0.0021049606148153544D0 5.9847846031188965D0)) (list (list 53.0D0 7460.74951171875D0 0.00262657948769629D0 5.997278690338135D0)) (list (list 53.0D0 7460.08837890625D0 0.0030163018964231015D0 6.009773254394531D0)) (list (list 53.0D0 7459.865234375D0 0.0032000632490962744D0 6.0222673416137695D0)) (list (list 53.0D0 7460.6328125D0 0.0032466917764395476D0 6.034761905670166D0)) (list (list 53.0D0 7461.634765625D0 0.003289514221251011D0 6.0472564697265625D0)) (list (list 53.0D0 7462.16064453125D0 0.003343744669109583D0 6.059750556945801D0)) (list (list 53.0D0 7461.90380859375D0 0.0033381402026861906D0 6.072245121002197D0)) (list (list 53.0D0 7460.55615234375D0 0.003197489771991968D0 6.0847392082214356D0)) (list (list 53.0D0 7458.33203125D0 0.0028721040580421687D0 6.097233772277832D0)) (list (list 53.0D0 7455.72119140625D0 0.002249795710667968D0 6.10972785949707D0)) (list (list 53.0D0 7456.54150390625D0 0.001388671575114131D0 6.122222423553467D0)) (list (list 53.0D0 7481.00439453125D0 6.362689309753478D-4 6.134716510772705D0)) (list (list 53.0D0 7458.76513671875D0 0.0010513777378946543D0 6.147211074829102D0)) (list (list 53.0D0 7458.98779296875D0 0.0016942815855145455D0 6.15970516204834D0)) (list (list 53.0D0 7460.33642578125D0 0.0024854731746017933D0 6.172199726104736D0)) (list (list 53.0D0 7460.60986328125D0 0.0032052004244178534D0 6.184693813323975D0)) (list (list 53.0D0 7459.025390625D0 0.0036372262984514237D0 6.197188377380371D0)) (list (list 53.0D0 7457.044921875D0 0.0037864490877836943D0 6.209682464599609D0)) (list (list 53.0D0 7456.5732421875D0 0.003705475712195039D0 6.222177028656006D0)) (list (list 53.0D0 7458.04931640625D0 0.003471825737506151D0 6.234671115875244D0)) (list (list 53.0D0 7460.640625D0 0.0032098654191941023D0 6.247165679931641D0)) (list (list 53.0D0 7462.76025390625D0 0.0029181356076151133D0 6.259659767150879D0)) (list (list 53.0D0 7463.453125D0 0.002632240066304803D0 6.272154331207275D0)) (list (list 53.0D0 7462.84130859375D0 0.0024590585380792618D0 6.284648418426514D0)) (list (list 53.0D0 7461.99609375D0 0.002399875782430172D0 6.29714298248291D0)) (list (list 53.0D0 7461.744140625D0 0.0022855382412672043D0 6.309637069702148D0)) (list (list 53.0D0 7461.95947265625D0 0.002032327698543668D0 6.322131633758545D0)) (list (list 53.0D0 7462.0830078125D0 0.0017364321975037456D0 6.334625720977783D0)) (list (list 53.0D0 7461.8505859375D0 0.001548310276120901D0 6.34712028503418D0)) (list (list 53.0D0 7461.40771484375D0 0.0015575705328956247D0 6.359614372253418D0)) (list (list 53.0D0 7461.65576171875D0 0.0017365801613777876D0 6.3721089363098145D0)) (list (list 53.0D0 7462.5966796875D0 0.0019904826767742634D0 6.384603023529053D0)) (list (list 53.0D0 7462.9541015625D0 0.002232779748737812D0 6.397097587585449D0)) (list (list 53.0D0 7462.40478515625D0 0.002405022270977497D0 6.4095916748046875D0)) (list (list 53.0D0 7461.369140625D0 0.002493608044460416D0 6.422086238861084D0)) (list (list 53.0D0 7460.50439453125D0 0.002548293210566044D0 6.434580326080322D0)) (list (list 53.0D0 7460.15966796875D0 0.0027171510737389326D0 6.447074890136719D0)) (list (list 53.0D0 7459.78271484375D0 0.0030918049160391093D0 6.459568977355957D0)) (list (list 53.0D0 7459.1923828125D0 0.0035444172099232674D0 6.4720635414123535D0)) (list (list 53.0D0 7458.857421875D0 0.0038182337302714587D0 6.484557628631592D0)) (list (list 53.0D0 7458.43017578125D0 0.003773948410525918D0 6.497052192687988D0)) (list (list 53.0D0 7457.0166015625D0 0.0035567590966820717D0 6.509546279907227D0)) (list (list 53.0D0 7455.89453125D0 0.0034964815713465214D0 6.522040843963623D0)) (list (list 53.0D0 7456.96875D0 0.0036552869714796543D0 6.534534931182861D0)) (list (list 53.0D0 7459.6865234375D0 0.004026355687528849D0 6.547029495239258D0)) (list (list 53.0D0 7462.0849609375D0 0.004275673534721136D0 6.559523582458496D0)) (list (list 53.0D0 7463.65771484375D0 0.0040260120294988156D0 6.572018146514893D0)) (list (list 53.0D0 7464.1552734375D0 0.003304059384390712D0 6.584512233734131D0)) (list (list 53.0D0 7463.37890625D0 0.002375859534367919D0 6.597006797790527D0)) (list (list 53.0D0 7462.01220703125D0 0.00150066870264709D0 6.609501361846924D0)) (list (list 53.0D0 7462.6484375D0 7.766229682601988D-4 6.621995449066162D0)) (list (list 53.0D0 7470.9736328125D0 3.344353463035077D-4 6.634490013122559D0)) (list (list 53.0D0 7487.37255859375D0 1.4896158245392144D-4 6.646984100341797D0))) (list (list (list 53.0D0 7490.99609375D0 5.873016925761476D-5 6.659478664398193D0)) (list (list 53.0D0 7453.34765625D0 3.4439810406183824D-5 6.671972751617432D0)) (list (list 53.0D0 7453.98388671875D0 3.546940570231527D-5 6.684467315673828D0)) (list (list 53.0D0 7456.76904296875D0 4.071543298778124D-5 6.696961402893066D0)) (list (list 53.0D0 7456.66015625D0 4.279499262338504D-5 6.709455966949463D0)) (list (list 53.0D0 7454.50341796875D0 4.0611816075397655D-5 6.721950054168701D0)) (list (list 53.0D0 7453.244140625D0 3.690152152557857D-5 6.734444618225098D0)) (list (list 53.0D0 7453.4228515625D0 3.3330023143207654D-5 6.746938705444336D0)) (list (list 53.0D0 7453.4228515625D0 0.0D0 6.759433269500732D0)) (list (list 54.0D0 2768.755126953125D0 4.617780796252191D-4 3.635850429534912D0)) (list (list 54.0D0 2771.6748046875D0 4.5972157386131585D-4 3.6733334064483643D0)) (list (list 54.0D0 2770.632568359375D0 3.55284137185663D-4 3.6858277320861817D0)) (list (list 54.0D0 2744.033447265625D0 6.131061818450689D-4 3.7108163833618164D0)) (list (list 54.0D0 2719.854248046875D0 2.590108779259026D-4 3.7482993602752686D0)) (list (list 54.0D0 2738.14111328125D0 6.124324281699956D-4 3.7857823371887207D0)) (list (list 54.0D0 2765.58349609375D0 7.476694881916046D-4 3.798276662826538D0)) (list (list 54.0D0 2761.369873046875D0 0.0015351580223068595D0 3.8107709884643555D0)) (list (list 54.0D0 2762.72900390625D0 0.0028334956150501967D0 3.823265314102173D0)) (list (list 54.0D0 2766.41796875D0 0.003843313781544566D0 3.8357596397399903D0)) (list (list 54.0D0 2768.00927734375D0 0.0038359854370355606D0 3.8482539653778076D0)) (list (list 54.0D0 2767.5361328125D0 0.002826752606779337D0 3.860748291015625D0)) (list (list 54.0D0 2741.885986328125D0 4.286775947548449D-4 3.8732426166534424D0)) (list (list 54.0D0 2741.885986328125D0 0.0D0 3.8857369422912598D0)) (list (list 55.0D0 7020.55322265625D0 2.4134074919857085D-4 4.173106670379639D0)) (list (list 55.0D0 7000.54638671875D0 0.001747884787619114D0 4.185600757598877D0)) (list (list 55.0D0 6983.45166015625D0 0.0011593210510909558D0 4.198095321655273D0)) (list (list 55.0D0 6994.92333984375D0 0.0022772967349737883D0 4.210589408874512D0)) (list (list 55.0D0 6994.2666015625D0 0.002581566572189331D0 4.223083972930908D0)) (list (list 55.0D0 6994.32177734375D0 0.0027336422353982926D0 4.2355780601501465D0)) (list (list 55.0D0 6993.66064453125D0 0.0029825170058757067D0 4.248072624206543D0)) (list (list 55.0D0 6993.30908203125D0 0.003286495339125395D0 4.260566711425781D0)) (list (list 55.0D0 6994.77197265625D0 0.003406562376767397D0 4.273061275482178D0)) (list (list 55.0D0 6996.66943359375D0 0.003294618334621191D0 4.285555362701416D0)) (list (list 55.0D0 6998.0966796875D0 0.0029300672467797995D0 4.2980499267578125D0)) (list (list 55.0D0 6999.78076171875D0 0.00246862112544477D0 4.310544013977051D0)) (list (list 55.0D0 7000.72509765625D0 0.0022282765712589026D0 4.323038578033447D0)) (list (list 55.0D0 6999.3974609375D0 0.0022838800214231015D0 4.3355326652526856D0)) (list (list 55.0D0 6995.97314453125D0 0.002582590328529477D0 4.348027229309082D0)) (list (list 55.0D0 6994.07177734375D0 0.0028630769811570645D0 4.36052131652832D0)) (list (list 55.0D0 6993.83349609375D0 0.002908674767240882D0 4.373015880584717D0)) (list (list 55.0D0 6994.19677734375D0 0.002775027649477124D0 4.385509967803955D0)) (list (list 55.0D0 6994.17529296875D0 0.0025224185083061457D0 4.398004531860352D0)) (list (list 55.0D0 6993.32763671875D0 0.002202828647568822D0 4.410499095916748D0)) (list (list 55.0D0 6992.27880859375D0 0.0019383735489100218D0 4.422993183135986D0)) (list (list 55.0D0 6992.21728515625D0 0.001837612478993833D0 4.435487747192383D0)) (list (list 55.0D0 6993.39111328125D0 0.0019230347825214267D0 4.447981834411621D0)) (list (list 55.0D0 6995.19677734375D0 0.0021041121799498797D0 4.460476398468018D0)) (list (list 55.0D0 6996.46337890625D0 0.002256048144772649D0 4.472970485687256D0)) (list (list 55.0D0 6996.54833984375D0 0.0023409605491906405D0 4.485465049743652D0)) (list (list 55.0D0 6995.369140625D0 0.0023818332701921463D0 4.497959136962891D0)) (list (list 55.0D0 6993.6396484375D0 0.0023840388748794794D0 4.510453701019287D0)) (list (list 55.0D0 6992.89697265625D0 0.0022793253883719445D0 4.522947788238525D0)) (list (list 55.0D0 6993.44140625D0 0.0020198978018015623D0 4.535442352294922D0)) (list (list 55.0D0 6994.87841796875D0 0.0016226458828896285D0 4.54793643951416D0)) (list (list 55.0D0 6997.25244140625D0 0.0011115873930975795D0 4.560431003570557D0)) (list (list 55.0D0 7002.7646484375D0 6.364472210407257D-4 4.572925090789795D0)) (list (list 55.0D0 7005.95654296875D0 3.5355761065147817D-4 4.585419654846191D0)) (list (list 55.0D0 7001.27685546875D0 2.049587928922847D-4 4.59791374206543D0)) (list (list 55.0D0 6995.13818359375D0 2.3908163711894304D-4 4.610408306121826D0)) (list (list 55.0D0 6995.9931640625D0 3.051480161957443D-4 4.6229023933410645D0)) (list (list 55.0D0 6997.107421875D0 4.2563804890960455D-4 4.635396957397461D0)) (list (list 55.0D0 6996.76171875D0 6.262636743485928D-4 4.647891044616699D0)) (list (list 55.0D0 6995.26904296875D0 9.20075224712491D-4 4.660385608673096D0)) (list (list 55.0D0 6992.76416015625D0 0.0012627593241631985D0 4.672879695892334D0)) (list (list 55.0D0 6991.001953125D0 0.001521026249974966D0 4.6853742599487305D0)) (list (list 55.0D0 6990.48779296875D0 0.001589343068189919D0 4.697868347167969D0)) (list (list 55.0D0 6989.81201171875D0 0.0015360618708655239D0 4.710362911224365D0)) (list (list 55.0D0 6988.79541015625D0 0.0014767376706004143D0 4.7228569984436035D0)) (list (list 55.0D0 6989.3525390625D0 0.0014580864226445556D0 4.7353515625D0)) (list (list 55.0D0 6991.49755859375D0 0.0015516150742769242D0 4.747845649719238D0)) (list (list 55.0D0 6993.1767578125D0 0.0017929229652509094D0 4.760340213775635D0)) (list (list 55.0D0 6993.31298828125D0 0.002029211027547717D0 4.772834300994873D0)) (list (list 55.0D0 6992.22119140625D0 0.002137435832992196D0 4.7853288650512695D0)) (list (list 55.0D0 6990.83837890625D0 0.0020877874922007323D0 4.797822952270508D0)) (list (list 55.0D0 6990.30322265625D0 0.0018525439081713558D0 4.810317516326904D0)) (list (list 55.0D0 6992.1708984375D0 0.001460192957893014D0 4.822811603546143D0)) (list (list 55.0D0 6994.96142578125D0 0.0011298831086605788D0 4.835306167602539D0)) (list (list 55.0D0 6995.984375D0 9.726600837893784D-4 4.847800254821777D0)) (list (list 55.0D0 6995.3955078125D0 9.34661366045475D-4 4.860294818878174D0)) (list (list 55.0D0 6994.82177734375D0 8.604836766608059D-4 4.872788906097412D0)) (list (list 55.0D0 6996.73095703125D0 6.613730220124126D-4 4.885283470153809D0)) (list (list 55.0D0 6997.330078125D0 4.998481017537415D-4 4.897777557373047D0)) (list (list 55.0D0 6978.19140625D0 4.29417792474851D-4 4.910272121429443D0)) (list (list 55.0D0 6993.20849609375D0 8.852767059579492D-4 4.922766208648682D0)) (list (list 55.0D0 6993.630859375D0 0.001216963748447597D0 4.935260772705078D0)) (list (list 55.0D0 6994.38720703125D0 0.001408519921824336D0 4.947755336761475D0)) (list (list 55.0D0 6994.87109375D0 0.0014368926640599966D0 4.960249423980713D0)) (list (list 55.0D0 6994.763671875D0 0.001348465564660728D0 4.972743988037109D0)) (list (list 55.0D0 6994.50390625D0 0.0012158898171037436D0 4.985238075256348D0)) (list (list 55.0D0 6995.03369140625D0 0.0010903696529567242D0 4.997732639312744D0)) (list (list 55.0D0 6996.03173828125D0 0.001006334088742733D0 5.010226726531982D0)) (list (list 55.0D0 6995.7021484375D0 9.701615781523287D-4 5.022721290588379D0)) (list (list 55.0D0 6993.39013671875D0 0.0010023069335147739D0 5.035215377807617D0)) (list (list 55.0D0 6991.115234375D0 0.0011524014407768846D0 5.047709941864014D0)) (list (list 55.0D0 6990.90185546875D0 0.001345425029285252D0 5.060204029083252D0)) (list (list 55.0D0 6992.43505859375D0 0.0014989248011261225D0 5.072698593139648D0)) (list (list 55.0D0 6993.7666015625D0 0.0015876905526965857D0 5.085192680358887D0)) (list (list 55.0D0 6993.92333984375D0 0.0015926299383863807D0 5.097687244415283D0)) (list (list 55.0D0 6993.267578125D0 0.0015434911474585534D0 5.1101813316345215D0)) (list (list 55.0D0 6992.47021484375D0 0.0014872406609356404D0 5.122675895690918D0)) (list (list 55.0D0 6992.1953125D0 0.0014814211754128337D0 5.135169982910156D0)) (list (list 55.0D0 6992.29248046875D0 0.001573032233864069D0 5.147664546966553D0)) (list (list 55.0D0 6992.2119140625D0 0.0017272717086598278D0 5.160158634185791D0)) (list (list 55.0D0 6992.08935546875D0 0.0018495697295293212D0 5.1726531982421875D0)) (list (list 55.0D0 6992.63232421875D0 0.0019130713772028685D0 5.185147285461426D0)) (list (list 55.0D0 6993.40380859375D0 0.00201472663320601D0 5.197641849517822D0)) (list (list 55.0D0 6993.20703125D0 0.0022422857582569123D0 5.2101359367370606D0)) (list (list 55.0D0 6992.05126953125D0 0.002573793288320303D0 5.222630500793457D0)) (list (list 55.0D0 6991.3779296875D0 0.002856341190636158D0 5.235124588012695D0)) (list (list 55.0D0 6992.31884765625D0 0.0028771343640983105D0 5.247619152069092D0)) (list (list 55.0D0 6994.7021484375D0 0.002678491873666644D0 5.26011323928833D0)) (list (list 55.0D0 6996.34130859375D0 0.0024586115032434464D0 5.272607803344727D0)) (list (list 55.0D0 6995.36328125D0 0.002245399635285139D0 5.285101890563965D0)) (list (list 55.0D0 6992.755859375D0 0.00217617629095912D0 5.297596454620361D0)) (list (list 55.0D0 6992.2392578125D0 0.002178729511797428D0 5.3100905418396D0)) (list (list 55.0D0 6994.32421875D0 0.002205151366069913D0 5.322585105895996D0)) (list (list 55.0D0 6995.5830078125D0 0.002415949711576104D0 5.335079193115234D0)) (list (list 55.0D0 6995.10888671875D0 0.002752683823928237D0 5.347573757171631D0)) (list (list 55.0D0 6995.06591796875D0 0.003092071507126093D0 5.360067844390869D0)) (list (list 55.0D0 6996.48291015625D0 0.003299957374110818D0 5.372562408447266D0)) (list (list 55.0D0 6997.39501953125D0 0.003433194709941745D0 5.385056495666504D0)) (list (list 55.0D0 6996.45703125D0 0.0035342515911906958D0 5.3975510597229D0)) (list (list 55.0D0 6994.60302734375D0 0.003673449158668518D0 5.410045146942139D0)) (list (list 55.0D0 6993.51806640625D0 0.0036618956364691258D0 5.422539710998535D0)) (list (list 55.0D0 6993.5478515625D0 0.0032797467429190874D0 5.435033798217773D0)) (list (list 55.0D0 6993.5966796875D0 0.0027035092934966088D0 5.44752836227417D0)) (list (list 55.0D0 6992.99853515625D0 0.0023740087635815144D0 5.460022449493408D0)) (list (list 55.0D0 6992.796875D0 0.0025423041079193354D0 5.472517013549805D0)) (list (list 55.0D0 6993.8642578125D0 0.0029992430936545134D0 5.485011100769043D0)) (list (list 55.0D0 6994.7646484375D0 0.003392655635252595D0 5.4975056648254395D0)) (list (list 55.0D0 6994.48193359375D0 0.003518281737342477D0 5.510000228881836D0)) (list (list 55.0D0 6993.4619140625D0 0.003447926137596369D0 5.522494316101074D0)) (list (list 55.0D0 6992.45947265625D0 0.003313697874546051D0 5.534988880157471D0)) (list (list 55.0D0 6992.65380859375D0 0.003176750848069787D0 5.547482967376709D0)) (list (list 55.0D0 6994.10546875D0 0.003138297703117132D0 5.5599775314331055D0)) (list (list 55.0D0 6995.59814453125D0 0.0032404016237705946D0 5.572471618652344D0)) (list (list 55.0D0 6996.5517578125D0 0.0033200213219970465D0 5.58496618270874D0)) (list (list 55.0D0 6997.20703125D0 0.0033033760264515877D0 5.5974602699279785D0)) (list (list 55.0D0 6996.67529296875D0 0.003190843854099512D0 5.609954833984375D0)) (list (list 55.0D0 6994.2783203125D0 0.0030584470368921757D0 5.622448921203613D0)) (list (list 55.0D0 6991.84619140625D0 0.0030206695664674044D0 5.63494348526001D0)) (list (list 55.0D0 6991.04541015625D0 0.002937945770099759D0 5.647437572479248D0)) (list (list 55.0D0 6991.369140625D0 0.0028296627569943667D0 5.6599321365356445D0)) (list (list 55.0D0 6992.15869140625D0 0.0028188738506287337D0 5.672426223754883D0)) (list (list 55.0D0 6992.6162109375D0 0.0029427751433104277D0 5.684920787811279D0)) (list (list 55.0D0 6991.8251953125D0 0.0030691935680806637D0 5.697414875030518D0)) (list (list 55.0D0 6990.09423828125D0 0.0030518732964992524D0 5.709909439086914D0)) (list (list 55.0D0 6989.01953125D0 0.0027916941326111555D0 5.722403526306152D0)) (list (list 55.0D0 6989.52392578125D0 0.0022570332512259484D0 5.734898090362549D0)) (list (list 55.0D0 6992.66357421875D0 0.0016176255885511637D0 5.747392177581787D0)) (list (list 55.0D0 6996.111328125D0 0.0012230180436745286D0 5.759886741638184D0)) (list (list 55.0D0 6996.1259765625D0 0.0012067635543644429D0 5.772380828857422D0)) (list (list 55.0D0 6993.869140625D0 0.0015754338819533587D0 5.784875392913818D0)) (list (list 55.0D0 6991.9951171875D0 0.0020423713140189648D0 5.797369480133057D0)) (list (list 55.0D0 6992.4638671875D0 0.0022025329526513815D0 5.809864044189453D0)) (list (list 55.0D0 6994.7763671875D0 0.002050323411822319D0 5.822358131408691D0)) (list (list 55.0D0 6997.72900390625D0 0.001916823093779385D0 5.834852695465088D0)) (list (list 55.0D0 6999.13330078125D0 0.0019430307438597084D0 5.847346782684326D0)) (list (list 55.0D0 6997.94677734375D0 0.0020069475285708905D0 5.859841346740723D0)) (list (list 55.0D0 6996.17333984375D0 0.002065286273136735D0 5.872335433959961D0)) (list (list 55.0D0 6995.6201171875D0 0.0019416953437030316D0 5.884829998016357D0)) (list (list 55.0D0 6997.41162109375D0 0.0015020439168438316D0 5.897324085235596D0)) (list (list 55.0D0 7003.611328125D0 0.0010425527580082417D0 5.909818649291992D0)) (list (list 55.0D0 7003.76416015625D0 8.131352951750159D-4 5.9223127365112305D0)) (list (list 55.0D0 6996.91259765625D0 9.039696305990219D-4 5.934807300567627D0)) (list (list 55.0D0 6992.373046875D0 0.0012852606596425176D0 5.947301387786865D0)) (list (list 55.0D0 6992.5283203125D0 0.0013978601200506092D0 5.959795951843262D0)) (list (list 55.0D0 6993.16748046875D0 0.0012853927910327912D0 5.9722900390625D0)) (list (list 55.0D0 6993.89697265625D0 0.0010162398684769869D0 5.9847846031188965D0)) (list (list 55.0D0 6993.8955078125D0 6.774700595997274D-4 5.997278690338135D0)) (list (list 55.0D0 6994.6123046875D0 3.8377815508283675D-4 6.009773254394531D0)) (list (list 55.0D0 6997.92724609375D0 2.3624146706424654D-4 6.0222673416137695D0)) (list (list 55.0D0 7001.45263671875D0 2.538849366828799D-4 6.034761905670166D0)) (list (list 55.0D0 6998.8662109375D0 3.1380000291392207D-4 6.0472564697265625D0)) (list (list 55.0D0 6998.8173828125D0 3.66492778994143D-4 6.059750556945801D0)) (list (list 55.0D0 7005.298828125D0 4.05718048568815D-4 6.072245121002197D0)) (list (list 55.0D0 7005.5439453125D0 4.451744898688048D-4 6.0847392082214356D0)) (list (list 55.0D0 6998.80078125D0 5.126505275256932D-4 6.097233772277832D0)) (list (list 55.0D0 6992.62939453125D0 8.471048204228282D-4 6.10972785949707D0)) (list (list 55.0D0 6992.83349609375D0 0.001193277072161436D0 6.122222423553467D0)) (list (list 55.0D0 6994.2626953125D0 0.0014685463393107057D0 6.134716510772705D0)) (list (list 55.0D0 6995.3544921875D0 0.001640563365072012D0 6.147211074829102D0)) (list (list 55.0D0 6995.677734375D0 0.0016411098185926676D0 6.15970516204834D0)) (list (list 55.0D0 6995.6201171875D0 0.0014495552750304342D0 6.172199726104736D0)) (list (list 55.0D0 6995.52392578125D0 0.0011268630623817444D0 6.184693813323975D0)) (list (list 55.0D0 6994.45849609375D0 7.88710021879524D-4 6.197188377380371D0)) (list (list 55.0D0 6991.57666015625D0 5.684162024408579D-4 6.209682464599609D0)) (list (list 55.0D0 6989.98193359375D0 5.272842827253044D-4 6.222177028656006D0)) (list (list 55.0D0 6991.76806640625D0 5.941994022578001D-4 6.234671115875244D0)) (list (list 55.0D0 6995.16796875D0 7.399196620099247D-4 6.247165679931641D0)) (list (list 55.0D0 6996.5458984375D0 8.885488496161997D-4 6.259659767150879D0)) (list (list 55.0D0 6996.36181640625D0 9.95694543235004D-4 6.272154331207275D0)) (list (list 55.0D0 6995.46630859375D0 0.0010861328337341547D0 6.284648418426514D0)) (list (list 55.0D0 6994.8759765625D0 0.0012007085606455803D0 6.29714298248291D0)) (list (list 55.0D0 6995.03466796875D0 0.0013581381645053626D0 6.309637069702148D0)) (list (list 55.0D0 6995.56103515625D0 0.0015365167055279017D0 6.322131633758545D0)) (list (list 55.0D0 6995.984375D0 0.0016649579629302025D0 6.334625720977783D0)) (list (list 55.0D0 6996.0966796875D0 0.0016696267994120717D0 6.34712028503418D0)) (list (list 55.0D0 6995.7236328125D0 0.001506942673586309D0 6.359614372253418D0)) (list (list 55.0D0 6994.265625D0 0.0011644756887108088D0 6.3721089363098145D0)) (list (list 55.0D0 6988.54541015625D0 7.555691991001368D-4 6.384603023529053D0)) (list (list 55.0D0 6985.2939453125D0 4.8733476432971657D-4 6.397097587585449D0)) (list (list 55.0D0 6988.25146484375D0 3.75270436052233D-4 6.4095916748046875D0)) (list (list 55.0D0 6992.08349609375D0 5.038526724092662D-4 6.422086238861084D0)) (list (list 55.0D0 6992.37158203125D0 6.458510761149228D-4 6.434580326080322D0)) (list (list 55.0D0 6990.99853515625D0 6.166337407194078D-4 6.447074890136719D0)) (list (list 55.0D0 6991.05859375D0 4.1874637827277184D-4 6.459568977355957D0)) (list (list 55.0D0 6992.91259765625D0 3.055601555388421D-4 6.4720635414123535D0)) (list (list 55.0D0 6976.06787109375D0 4.605026915669441D-4 6.484557628631592D0)) (list (list 55.0D0 6993.1201171875D0 0.001018904964439571D0 6.497052192687988D0)) (list (list 55.0D0 6991.349609375D0 0.0014759082114323974D0 6.509546279907227D0)) (list (list 55.0D0 6990.65185546875D0 0.0016885425429791212D0 6.522040843963623D0)) (list (list 55.0D0 6989.80615234375D0 0.0015568881062790752D0 6.534534931182861D0)) (list (list 55.0D0 6986.16357421875D0 0.0011740262852981687D0 6.547029495239258D0)) (list (list 55.0D0 6983.87451171875D0 8.544857846572995D-4 6.559523582458496D0)) (list (list 55.0D0 6985.39794921875D0 6.502796895802021D-4 6.572018146514893D0)) (list (list 55.0D0 6997.90380859375D0 5.900290561839938D-4 6.584512233734131D0)) (list (list 55.0D0 7000.048828125D0 4.4879503548145294D-4 6.597006797790527D0)) (list (list 55.0D0 7003.41943359375D0 2.360528742428869D-4 6.609501361846924D0)) (list (list 55.0D0 6980.93212890625D0 5.1573897508205846D-5 6.621995449066162D0)) (list (list 55.0D0 6971.50830078125D0 4.0819541027303785D-5 6.634490013122559D0)) (list (list 55.0D0 6946.7958984375D0 5.0480462959967554D-5 6.646984100341797D0)) (list (list 55.0D0 6946.7958984375D0 0.0D0 6.659478664398193D0)) (list (list 56.0D0 6548.30224609375D0 2.448894956614822D-4 4.485465049743652D0)) (list (list 56.0D0 6544.982421875D0 2.0967131422366947D-4 4.497959136962891D0)) (list (list 56.0D0 6529.05029296875D0 4.5551423681899905D-4 4.510453701019287D0)) (list (list 56.0D0 6526.9619140625D0 8.759034099057317D-4 4.522947788238525D0)) (list (list 56.0D0 6527.88818359375D0 0.0013125197729095817D0 4.535442352294922D0)) (list (list 56.0D0 6529.25146484375D0 0.0017060290556401015D0 4.54793643951416D0)) (list (list 56.0D0 6529.83447265625D0 0.0020514109637588263D0 4.560431003570557D0)) (list (list 56.0D0 6529.0224609375D0 0.0023008871357887984D0 4.572925090789795D0)) (list (list 56.0D0 6527.3525390625D0 0.00244192685931921D0 4.585419654846191D0)) (list (list 56.0D0 6526.267578125D0 0.002481121802702546D0 4.59791374206543D0)) (list (list 56.0D0 6526.71337890625D0 0.0024096232373267413D0 4.610408306121826D0)) (list (list 56.0D0 6528.61279296875D0 0.002289963886141777D0 4.6229023933410645D0)) (list (list 56.0D0 6530.47509765625D0 0.0021935889963060618D0 4.635396957397461D0)) (list (list 56.0D0 6531.19873046875D0 0.002080623060464859D0 4.647891044616699D0)) (list (list 56.0D0 6530.9072265625D0 0.0019230530597269535D0 4.660385608673096D0)) (list (list 56.0D0 6529.494140625D0 0.0017186789773404599D0 4.672879695892334D0)) (list (list 56.0D0 6527.46875D0 0.0015395465306937695D0 4.6853742599487305D0)) (list (list 56.0D0 6525.8544921875D0 0.001428658957593143D0 4.697868347167969D0)) (list (list 56.0D0 6524.65625D0 0.001352642779238522D0 4.710362911224365D0)) (list (list 56.0D0 6523.6513671875D0 0.0013117416528984905D0 4.7228569984436035D0)) (list (list 56.0D0 6523.38818359375D0 0.0013114132452756167D0 4.7353515625D0)) (list (list 56.0D0 6524.20458984375D0 0.0012854294618591667D0 4.747845649719238D0)) (list (list 56.0D0 6525.39453125D0 0.0011771931312978268D0 4.760340213775635D0)) (list (list 56.0D0 6525.90625D0 0.001031245687045157D0 4.772834300994873D0)) (list (list 56.0D0 6525.70947265625D0 9.653320885263383D-4 4.7853288650512695D0)) (list (list 56.0D0 6524.9111328125D0 0.001044898759573698D0 4.797822952270508D0)) (list (list 56.0D0 6525.361328125D0 0.0012751634931191802D0 4.810317516326904D0)) (list (list 56.0D0 6527.4521484375D0 0.0016395810525864363D0 4.822811603546143D0)) (list (list 56.0D0 6529.27978515625D0 0.0020669063087552786D0 4.835306167602539D0)) (list (list 56.0D0 6529.53759765625D0 0.0023997784592211247D0 4.847800254821777D0)) (list (list 56.0D0 6529.39697265625D0 0.002647898392751813D0 4.860294818878174D0)) (list (list 56.0D0 6529.44775390625D0 0.0028889214154332877D0 4.872788906097412D0)) (list (list 56.0D0 6529.68896484375D0 0.00311608100309968D0 4.885283470153809D0)) (list (list 56.0D0 6529.7470703125D0 0.003229378256946802D0 4.897777557373047D0)) (list (list 56.0D0 6529.22998046875D0 0.0031281057745218277D0 4.910272121429443D0)) (list (list 56.0D0 6528.4150390625D0 0.002795423148199916D0 4.922766208648682D0)) (list (list 56.0D0 6527.64208984375D0 0.002211802639067173D0 4.935260772705078D0)) (list (list 56.0D0 6522.419921875D0 0.001393232261762023D0 4.947755336761475D0)) (list (list 56.0D0 6538.859375D0 8.837640634737909D-4 4.960249423980713D0)) (list (list 56.0D0 6536.39794921875D0 7.535633048973978D-4 4.972743988037109D0)) (list (list 56.0D0 6523.91748046875D0 0.0013112633023411036D0 4.985238075256348D0)) (list (list 56.0D0 6526.138671875D0 0.0016985064139589668D0 4.997732639312744D0)) (list (list 56.0D0 6527.79296875D0 0.001935890526510775D0 5.010226726531982D0)) (list (list 56.0D0 6528.8642578125D0 0.0019666252192109824D0 5.022721290588379D0)) (list (list 56.0D0 6529.29150390625D0 0.001659073051996529D0 5.035215377807617D0)) (list (list 56.0D0 6532.1806640625D0 0.001137110055424273D0 5.047709941864014D0)) (list (list 56.0D0 6512.15478515625D0 6.519863964058459D-4 5.060204029083252D0)) (list (list 56.0D0 6517.21240234375D0 6.149305845610797D-4 5.072698593139648D0)) (list (list 56.0D0 6529.71240234375D0 0.0013123241951689125D0 5.085192680358887D0)) (list (list 56.0D0 6527.82666015625D0 0.0016988995485007763D0 5.097687244415283D0)) (list (list 56.0D0 6526.47314453125D0 0.0020438830833882094D0 5.1101813316345215D0)) (list (list 56.0D0 6525.98046875D0 0.002323112217709422D0 5.122675895690918D0)) (list (list 56.0D0 6526.32666015625D0 0.002364661078900099D0 5.135169982910156D0)) (list (list 56.0D0 6526.0966796875D0 0.0021359671372920275D0 5.147664546966553D0)) (list (list 56.0D0 6525.2060546875D0 0.0019189961021766067D0 5.160158634185791D0)) (list (list 56.0D0 6524.9794921875D0 0.001997252693399787D0 5.1726531982421875D0)) (list (list 56.0D0 6526.39404296875D0 0.00228366837836802D0 5.185147285461426D0)) (list (list 56.0D0 6527.8466796875D0 0.0025322092697024346D0 5.197641849517822D0)) (list (list 56.0D0 6527.765625D0 0.0025103935040533543D0 5.2101359367370606D0)) (list (list 56.0D0 6526.09521484375D0 0.002135917544364929D0 5.222630500793457D0)) (list (list 56.0D0 6519.2861328125D0 0.0015354764182120562D0 5.235124588012695D0)) (list (list 56.0D0 6515.52880859375D0 0.0011678964365273714D0 5.247619152069092D0)) (list (list 56.0D0 6519.1689453125D0 9.408985497429967D-4 5.26011323928833D0)) (list (list 56.0D0 6527.5810546875D0 0.0012867394834756852D0 5.272607803344727D0)) (list (list 56.0D0 6527.10791015625D0 0.0015777630032971502D0 5.285101890563965D0)) (list (list 56.0D0 6526.8955078125D0 0.0016956848558038474D0 5.297596454620361D0)) (list (list 56.0D0 6527.7470703125D0 0.001796998898498714D0 5.3100905418396D0)) (list (list 56.0D0 6528.673828125D0 0.0019387105712667108D0 5.322585105895996D0)) (list (list 56.0D0 6529.54638671875D0 0.001994537655264139D0 5.335079193115234D0)) (list (list 56.0D0 6530.12939453125D0 0.0018351908074691892D0 5.347573757171631D0)) (list (list 56.0D0 6530.4296875D0 0.0014741838676854968D0 5.360067844390869D0)) (list (list 56.0D0 6536.11572265625D0 0.001017358503304422D0 5.372562408447266D0)) (list (list 56.0D0 6516.2998046875D0 9.471591329202056D-4 5.385056495666504D0)) (list (list 56.0D0 6518.4111328125D0 0.001241955440491438D0 5.3975510597229D0)) (list (list 56.0D0 6527.48779296875D0 0.0018355190986767412D0 5.410045146942139D0)) (list (list 56.0D0 6527.46435546875D0 0.0022369506768882275D0 5.422539710998535D0)) (list (list 56.0D0 6527.759765625D0 0.002479406539350748D0 5.435033798217773D0)) (list (list 56.0D0 6527.4375D0 0.002681846497580409D0 5.44752836227417D0)) (list (list 56.0D0 6526.0478515625D0 0.002745406236499548D0 5.460022449493408D0)) (list (list 56.0D0 6525.18212890625D0 0.0025794687680900097D0 5.472517013549805D0)) (list (list 56.0D0 6525.91943359375D0 0.002196102635934949D0 5.485011100769043D0)) (list (list 56.0D0 6527.4560546875D0 0.0018174172146245838D0 5.4975056648254395D0)) (list (list 56.0D0 6527.8369140625D0 0.0016448275418952108D0 5.510000228881836D0)) (list (list 56.0D0 6526.76123046875D0 0.0017061412800103426D0 5.522494316101074D0)) (list (list 56.0D0 6525.01318359375D0 0.0018155404832214117D0 5.534988880157471D0)) (list (list 56.0D0 6524.1298828125D0 0.001669265446253121D0 5.547482967376709D0)) (list (list 56.0D0 6526.521484375D0 0.0012136136647313834D0 5.5599775314331055D0)) (list (list 56.0D0 6529.9951171875D0 8.466534782201052D-4 5.572471618652344D0)) (list (list 56.0D0 6531.7802734375D0 8.048343588598073D-4 5.58496618270874D0)) (list (list 56.0D0 6532.87548828125D0 9.85445687547326D-4 5.5974602699279785D0)) (list (list 56.0D0 6531.0830078125D0 0.0011207466013729573D0 5.609954833984375D0)) (list (list 56.0D0 6528.32763671875D0 0.0011391047155484558D0 5.622448921203613D0)) (list (list 56.0D0 6525.5224609375D0 0.0011097361566498876D0 5.63494348526001D0)) (list (list 56.0D0 6524.38720703125D0 0.001070961239747703D0 5.647437572479248D0)) (list (list 56.0D0 6524.74658203125D0 0.0010532777523621917D0 5.6599321365356445D0)) (list (list 56.0D0 6526.2001953125D0 0.0010449893306940794D0 5.672426223754883D0)) (list (list 56.0D0 6527.3330078125D0 9.868268389254809D-4 5.684920787811279D0)) (list (list 56.0D0 6526.59130859375D0 8.45796603243798D-4 5.697414875030518D0)) (list (list 56.0D0 6524.43896484375D0 6.698009092360735D-4 5.709909439086914D0)) (list (list 56.0D0 6518.732421875D0 4.7253715456463397D-4 5.722403526306152D0)) (list (list 56.0D0 6515.3486328125D0 3.8455709000118077D-4 5.734898090362549D0)) (list (list 56.0D0 6539.1259765625D0 5.368959391489625D-4 5.747392177581787D0)) (list (list 56.0D0 6535.43798828125D0 8.37302824947983D-4 5.759886741638184D0)) (list (list 56.0D0 6533.427734375D0 0.0010481664212420583D0 5.772380828857422D0)) (list (list 56.0D0 6532.185546875D0 9.902248857542873D-4 5.784875392913818D0)) (list (list 56.0D0 6529.466796875D0 7.95117870438844D-4 5.797369480133057D0)) (list (list 56.0D0 6527.21142578125D0 6.900816224515438D-4 5.809864044189453D0)) (list (list 56.0D0 6526.85400390625D0 6.543194758705795D-4 5.822358131408691D0)) (list (list 56.0D0 6529.80126953125D0 5.436129285953939D-4 5.834852695465088D0)) (list (list 56.0D0 6541.78466796875D0 4.593159828800708D-4 5.847346782684326D0)) (list (list 56.0D0 6541.478515625D0 4.079132340848446D-4 5.859841346740723D0)) (list (list 56.0D0 6534.5615234375D0 4.6424372703768313D-4 5.872335433959961D0)) (list (list 56.0D0 6530.0439453125D0 6.778299575671554D-4 5.884829998016357D0)) (list (list 56.0D0 6528.9296875D0 8.12919344753027D-4 5.897324085235596D0)) (list (list 56.0D0 6527.123046875D0 8.803962846286595D-4 5.909818649291992D0)) (list (list 56.0D0 6525.42724609375D0 8.959080441854894D-4 5.9223127365112305D0)) (list (list 56.0D0 6525.28271484375D0 8.504491415806115D-4 5.934807300567627D0)) (list (list 56.0D0 6526.77734375D0 7.778787985444069D-4 5.947301387786865D0)) (list (list 56.0D0 6528.4091796875D0 7.506550173275173D-4 5.959795951843262D0)) (list (list 56.0D0 6529.08203125D0 7.992819882929325D-4 5.9722900390625D0)) (list (list 56.0D0 6529.0283203125D0 9.090612875297666D-4 5.9847846031188965D0)) (list (list 56.0D0 6528.2998046875D0 0.0010253405198454857D0 5.997278690338135D0)) (list (list 56.0D0 6527.533203125D0 0.0011161472648382187D0 6.009773254394531D0)) (list (list 56.0D0 6527.82470703125D0 0.0011796917533501983D0 6.0222673416137695D0)) (list (list 56.0D0 6529.1953125D0 0.0012348768068477512D0 6.034761905670166D0)) (list (list 56.0D0 6530.3994140625D0 0.0012942652683705092D0 6.0472564697265625D0)) (list (list 56.0D0 6530.6298828125D0 0.0013503998052328825D0 6.059750556945801D0)) (list (list 56.0D0 6529.82275390625D0 0.0013984341640025378D0 6.072245121002197D0)) (list (list 56.0D0 6527.84130859375D0 0.00140656647272408D0 6.0847392082214356D0)) (list (list 56.0D0 6525.35205078125D0 0.001320481882430613D0 6.097233772277832D0)) (list (list 56.0D0 6523.1513671875D0 0.0010792558314278722D0 6.10972785949707D0)) (list (list 56.0D0 6523.66845703125D0 7.440826739184558D-4 6.122222423553467D0)) (list (list 56.0D0 6526.0869140625D0 5.492747877724469D-4 6.134716510772705D0)) (list (list 56.0D0 6527.78857421875D0 6.285549607127905D-4 6.147211074829102D0)) (list (list 56.0D0 6527.58740234375D0 8.72638716828078D-4 6.15970516204834D0)) (list (list 56.0D0 6527.38134765625D0 0.0011522982968017459D0 6.172199726104736D0)) (list (list 56.0D0 6527.0341796875D0 0.0013537583872675896D0 6.184693813323975D0)) (list (list 56.0D0 6525.41015625D0 0.0014216538984328509D0 6.197188377380371D0)) (list (list 56.0D0 6523.9306640625D0 0.001431247335858643D0 6.209682464599609D0)) (list (list 56.0D0 6524.08447265625D0 0.001444690627977252D0 6.222177028656006D0)) (list (list 56.0D0 6526.3037109375D0 0.0014628299977630377D0 6.234671115875244D0)) (list (list 56.0D0 6529.4453125D0 0.0014582057483494282D0 6.247165679931641D0)) (list (list 56.0D0 6531.46728515625D0 0.0013677615206688643D0 6.259659767150879D0)) (list (list 56.0D0 6531.48291015625D0 0.0011759295593947173D0 6.272154331207275D0)) (list (list 56.0D0 6529.50537109375D0 9.551708353683353D-4 6.284648418426514D0)) (list (list 56.0D0 6526.396484375D0 7.777763530611992D-4 6.29714298248291D0)) (list (list 56.0D0 6523.7919921875D0 6.518322043120861D-4 6.309637069702148D0)) (list (list 56.0D0 6523.322265625D0 5.669481470249593D-4 6.322131633758545D0)) (list (list 56.0D0 6524.9951171875D0 5.319577176123858D-4 6.334625720977783D0)) (list (list 56.0D0 6527.19970703125D0 5.535435047931969D-4 6.34712028503418D0)) (list (list 56.0D0 6527.4775390625D0 5.938792019151151D-4 6.359614372253418D0)) (list (list 56.0D0 6526.6083984375D0 6.218149210326374D-4 6.3721089363098145D0)) (list (list 56.0D0 6526.02001953125D0 6.021382287144661D-4 6.384603023529053D0)) (list (list 56.0D0 6525.80322265625D0 5.061554256826639D-4 6.397097587585449D0)) (list (list 56.0D0 6523.49755859375D0 3.702772955875844D-4 6.4095916748046875D0)) (list (list 56.0D0 6520.81201171875D0 3.126857918687165D-4 6.422086238861084D0)) (list (list 56.0D0 6521.8984375D0 3.641068178694695D-4 6.434580326080322D0)) (list (list 56.0D0 6526.2431640625D0 5.564257153309882D-4 6.447074890136719D0)) (list (list 56.0D0 6527.55810546875D0 8.620216394774616D-4 6.459568977355957D0)) (list (list 56.0D0 6527.8505859375D0 0.0011823499808087945D0 6.4720635414123535D0)) (list (list 56.0D0 6528.40185546875D0 0.0013828955125063658D0 6.484557628631592D0)) (list (list 56.0D0 6528.51123046875D0 0.0013321851147338748D0 6.497052192687988D0)) (list (list 56.0D0 6526.56201171875D0 0.00107191049028188D0 6.509546279907227D0)) (list (list 56.0D0 6524.0703125D0 8.609922369942069D-4 6.522040843963623D0)) (list (list 56.0D0 6523.62109375D0 7.753131212666631D-4 6.534534931182861D0)) (list (list 56.0D0 6526.35400390625D0 7.356268470175564D-4 6.547029495239258D0)) (list (list 56.0D0 6529.060546875D0 6.915175472386181D-4 6.559523582458496D0)) (list (list 56.0D0 6530.341796875D0 6.115853320807219D-4 6.572018146514893D0)) (list (list 56.0D0 6530.7412109375D0 5.257677403278649D-4 6.584512233734131D0)) (list (list 56.0D0 6530.28466796875D0 4.3327981256879866D-4 6.597006797790527D0)) (list (list 56.0D0 6529.451171875D0 3.193750453647226D-4 6.609501361846924D0)) (list (list 56.0D0 6529.98388671875D0 1.893609151011333D-4 6.621995449066162D0)) (list (list 56.0D0 6535.71240234375D0 8.885600254870951D-5 6.634490013122559D0)) (list (list 56.0D0 6508.37109375D0 4.202195486868732D-5 6.646984100341797D0)) (list (list 56.0D0 6508.37109375D0 0.0D0 6.659478664398193D0)) (list (list 57.0D0 4216.759765625D0 1.257796975551173D-4 4.522947788238525D0)) (list (list 57.0D0 4208.4833984375D0 4.167021834291518D-4 4.54793643951416D0)) (list (list 57.0D0 4212.23828125D0 4.5624678023159504D-4 4.560431003570557D0)) (list (list 57.0D0 4209.32763671875D0 4.77464753203094D-4 4.572925090789795D0)) (list (list 57.0D0 4203.61083984375D0 5.978040862828493D-4 4.585419654846191D0)) (list (list 57.0D0 4201.6806640625D0 6.597332539968193D-4 4.59791374206543D0)) (list (list 57.0D0 4199.8369140625D0 5.71057025808841D-4 4.610408306121826D0)) (list (list 57.0D0 4194.49658203125D0 4.1232185321860016D-4 4.6229023933410645D0)) (list (list 57.0D0 4192.7763671875D0 3.7243193946778774D-4 4.635396957397461D0)) (list (list 57.0D0 4194.62353515625D0 5.56002021767199D-4 4.647891044616699D0)) (list (list 57.0D0 4196.62353515625D0 9.987765224650503D-4 4.660385608673096D0)) (list (list 57.0D0 4196.93896484375D0 0.0014686004724353552D0 4.672879695892334D0)) (list (list 57.0D0 4196.73681640625D0 0.0017272498225793243D0 4.6853742599487305D0)) (list (list 57.0D0 4195.7158203125D0 0.001746110268868506D0 4.697868347167969D0)) (list (list 57.0D0 4194.0986328125D0 0.0016997919883579016D0 4.710362911224365D0)) (list (list 57.0D0 4192.82763671875D0 0.001673394232057035D0 4.7228569984436035D0)) (list (list 57.0D0 4193.21728515625D0 0.001675695413723588D0 4.7353515625D0)) (list (list 57.0D0 4194.20703125D0 0.0018632776336744428D0 4.747845649719238D0)) (list (list 57.0D0 4195.54345703125D0 0.002330313203856349D0 4.760340213775635D0)) (list (list 57.0D0 4196.80078125D0 0.002913318807259202D0 4.772834300994873D0)) (list (list 57.0D0 4196.8115234375D0 0.003267987398430705D0 4.7853288650512695D0)) (list (list 57.0D0 4196.10400390625D0 0.003206286346539855D0 4.797822952270508D0)) (list (list 57.0D0 4195.74853515625D0 0.002788651268929243D0 4.810317516326904D0)) (list (list 57.0D0 4195.63037109375D0 0.002278148429468274D0 4.822811603546143D0)) (list (list 57.0D0 4194.82958984375D0 0.001949978992342949D0 4.835306167602539D0)) (list (list 57.0D0 4194.470703125D0 0.001832681940868497D0 4.847800254821777D0)) (list (list 57.0D0 4196.70361328125D0 0.0017260361928492785D0 4.860294818878174D0)) (list (list 57.0D0 4200.1748046875D0 0.0015760425012558699D0 4.872788906097412D0)) (list (list 57.0D0 4201.2744140625D0 0.0012952904216945172D0 4.885283470153809D0)) (list (list 57.0D0 4218.77880859375D0 7.539850194007158D-4 4.897777557373047D0)) (list (list 57.0D0 4245.833984375D0 1.1820255167549476D-4 4.910272121429443D0)) (list (list 57.0D0 4226.7021484375D0 1.8890629871748388D-4 4.947755336761475D0)) (list (list 57.0D0 4226.7021484375D0 0.0D0 4.960249423980713D0)) (list (list 58.0D0 1401.55712890625D0 0.004188994877040386D0 4.647891044616699D0)) (list (list 58.0D0 1400.2196044921875D0 0.006636483129113913D0 4.660385608673096D0)) (list (list 58.0D0 1399.1051025390625D0 0.009399596601724625D0 4.672879695892334D0)) (list (list 58.0D0 1398.2589111328125D0 0.011418826878070832D0 4.6853742599487305D0)) (list (list 58.0D0 1397.9254150390625D0 0.011968826875090599D0 4.697868347167969D0)) (list (list 58.0D0 1397.807861328125D0 0.011418196372687817D0 4.710362911224365D0)) (list (list 58.0D0 1397.69970703125D0 0.01051967404782772D0 4.7228569984436035D0)) (list (list 58.0D0 1397.8709716796875D0 0.00988022331148386D0 4.7353515625D0)) (list (list 58.0D0 1398.513427734375D0 0.010262083262205124D0 4.747845649719238D0)) (list (list 58.0D0 1399.26904296875D0 0.01218937523663044D0 4.760340213775635D0)) (list (list 58.0D0 1399.5384521484375D0 0.01497736107558012D0 4.772834300994873D0)) (list (list 58.0D0 1399.11328125D0 0.017225397750735283D0 4.7853288650512695D0)) (list (list 58.0D0 1398.457275390625D0 0.017987782135605812D0 4.797822952270508D0)) (list (list 58.0D0 1397.901611328125D0 0.016906199976801872D0 4.810317516326904D0)) (list (list 58.0D0 1397.828125D0 0.014304043725132943D0 4.822811603546143D0)) (list (list 58.0D0 1398.10302734375D0 0.011463149450719357D0 4.835306167602539D0)) (list (list 58.0D0 1398.0919189453125D0 0.009761796332895756D0 4.847800254821777D0)) (list (list 58.0D0 1397.6507568359375D0 0.009200123138725758D0 4.860294818878174D0)) (list (list 58.0D0 1396.858154296875D0 0.008494675159454346D0 4.872788906097412D0)) (list (list 58.0D0 1396.274169921875D0 0.006868358701467514D0 4.885283470153809D0)) (list (list 58.0D0 1398.0311279296875D0 0.005073378793895245D0 4.897777557373047D0)) (list (list 58.0D0 1400.6312255859375D0 0.00507851829752326D0 4.910272121429443D0)) (list (list 58.0D0 1401.513916015625D0 0.007612054236233234D0 4.922766208648682D0)) (list (list 58.0D0 1400.037841796875D0 0.012152896262705326D0 4.935260772705078D0)) (list (list 58.0D0 1399.1971435546875D0 0.01815297082066536D0 4.947755336761475D0)) (list (list 58.0D0 1398.9776611328125D0 0.02457786723971367D0 4.960249423980713D0)) (list (list 58.0D0 1398.828857421875D0 0.030457375571131706D0 4.972743988037109D0)) (list (list 58.0D0 1398.654052734375D0 0.03508477285504341D0 4.985238075256348D0)) (list (list 58.0D0 1398.6199951171875D0 0.03803686797618866D0 4.997732639312744D0)) (list (list 58.0D0 1398.7703857421875D0 0.03901815041899681D0 5.010226726531982D0)) (list (list 58.0D0 1398.89404296875D0 0.038005728274583817D0 5.022721290588379D0)) (list (list 58.0D0 1398.8084716796875D0 0.035312142223119736D0 5.035215377807617D0)) (list (list 58.0D0 1398.5565185546875D0 0.0315178744494915D0 5.047709941864014D0)) (list (list 58.0D0 1398.3310546875D0 0.027353577315807343D0 5.060204029083252D0)) (list (list 58.0D0 1398.2921142578125D0 0.023489302024245262D0 5.072698593139648D0)) (list (list 58.0D0 1398.4697265625D0 0.02028103731572628D0 5.085192680358887D0)) (list (list 58.0D0 1398.60546875D0 0.017712397500872612D0 5.097687244415283D0)) (list (list 58.0D0 1398.4033203125D0 0.015591413713991642D0 5.1101813316345215D0)) (list (list 58.0D0 1398.171875D0 0.013850186951458454D0 5.122675895690918D0)) (list (list 58.0D0 1398.4857177734375D0 0.012776543386280537D0 5.135169982910156D0)) (list (list 58.0D0 1398.9244384765625D0 0.012828599661588669D0 5.147664546966553D0)) (list (list 58.0D0 1398.866455078125D0 0.013678953982889653D0 5.160158634185791D0)) (list (list 58.0D0 1398.359375D0 0.014202053658664227D0 5.1726531982421875D0)) (list (list 58.0D0 1397.975830078125D0 0.013749762438237667D0 5.185147285461426D0)) (list (list 58.0D0 1397.9638671875D0 0.012955550104379654D0 5.197641849517822D0)) (list (list 58.0D0 1398.214599609375D0 0.013187435455620289D0 5.2101359367370606D0)) (list (list 58.0D0 1398.4024658203125D0 0.015393886715173722D0 5.222630500793457D0)) (list (list 58.0D0 1398.44287109375D0 0.01952466182410717D0 5.235124588012695D0)) (list (list 58.0D0 1398.599609375D0 0.024608569219708443D0 5.247619152069092D0)) (list (list 58.0D0 1398.9027099609375D0 0.029266737401485443D0 5.26011323928833D0)) (list (list 58.0D0 1399.0479736328125D0 0.0325368270277977D0 5.272607803344727D0)) (list (list 58.0D0 1398.8533935546875D0 0.03429454565048218D0 5.285101890563965D0)) (list (list 58.0D0 1398.5341796875D0 0.0350867323577404D0 5.297596454620361D0)) (list (list 58.0D0 1398.498779296875D0 0.035486381500959396D0 5.3100905418396D0)) (list (list 58.0D0 1398.7940673828125D0 0.035797927528619766D0 5.322585105895996D0)) (list (list 58.0D0 1399.0400390625D0 0.035960711538791657D0 5.335079193115234D0)) (list (list 58.0D0 1399.009033203125D0 0.03571970388293266D0 5.347573757171631D0)) (list (list 58.0D0 1398.9327392578125D0 0.03495219349861145D0 5.360067844390869D0)) (list (list 58.0D0 1399.0364990234375D0 0.033285897225141525D0 5.372562408447266D0)) (list (list 58.0D0 1399.2154541015625D0 0.030269205570220948D0 5.385056495666504D0)) (list (list 58.0D0 1399.19873046875D0 0.026396924629807472D0 5.3975510597229D0)) (list (list 58.0D0 1398.9276123046875D0 0.02299310825765133D0 5.410045146942139D0)) (list (list 58.0D0 1398.435546875D0 0.020380668342113495D0 5.422539710998535D0)) (list (list 58.0D0 1397.86669921875D0 0.017626985907554627D0 5.435033798217773D0)) (list (list 58.0D0 1397.8143310546875D0 0.014494404196739197D0 5.44752836227417D0)) (list (list 58.0D0 1398.442138671875D0 0.012432508170604706D0 5.460022449493408D0)) (list (list 58.0D0 1399.13671875D0 0.012879472225904465D0 5.472517013549805D0)) (list (list 58.0D0 1399.3114013671875D0 0.015393252484500409D0 5.485011100769043D0)) (list (list 58.0D0 1399.019287109375D0 0.0181156937032938D0 5.4975056648254395D0)) (list (list 58.0D0 1398.8603515625D0 0.01931983232498169D0 5.510000228881836D0)) (list (list 58.0D0 1399.0335693359375D0 0.01868583634495735D0 5.522494316101074D0)) (list (list 58.0D0 1399.187255859375D0 0.017611490562558174D0 5.534988880157471D0)) (list (list 58.0D0 1399.015869140625D0 0.018025144934654236D0 5.547482967376709D0)) (list (list 58.0D0 1398.7198486328125D0 0.02036861702799797D0 5.5599775314331055D0)) (list (list 58.0D0 1398.5435791015625D0 0.02282686159014702D0 5.572471618652344D0)) (list (list 58.0D0 1398.63525390625D0 0.023320194333791733D0 5.58496618270874D0)) (list (list 58.0D0 1398.8609619140625D0 0.021774470806121826D0 5.5974602699279785D0)) (list (list 58.0D0 1398.8914794921875D0 0.019641317427158356D0 5.609954833984375D0)) (list (list 58.0D0 1398.5067138671875D0 0.017997197806835175D0 5.622448921203613D0)) (list (list 58.0D0 1398.197265625D0 0.01697416976094246D0 5.63494348526001D0)) (list (list 58.0D0 1398.39013671875D0 0.016286442056298256D0 5.647437572479248D0)) (list (list 58.0D0 1398.6865234375D0 0.01594521850347519D0 5.6599321365356445D0)) (list (list 58.0D0 1398.6759033203125D0 0.016323618590831757D0 5.672426223754883D0)) (list (list 58.0D0 1398.56787109375D0 0.017548637464642525D0 5.684920787811279D0)) (list (list 58.0D0 1398.40283203125D0 0.01905832625925541D0 5.697414875030518D0)) (list (list 58.0D0 1398.0738525390625D0 0.02040015533566475D0 5.709909439086914D0)) (list (list 58.0D0 1397.709716796875D0 0.02222689613699913D0 5.722403526306152D0)) (list (list 58.0D0 1397.6181640625D0 0.025744715705513954D0 5.734898090362549D0)) (list (list 58.0D0 1397.8988037109375D0 0.03116297908127308D0 5.747392177581787D0)) (list (list 58.0D0 1398.3394775390625D0 0.03692585974931717D0 5.759886741638184D0)) (list (list 58.0D0 1398.6588134765625D0 0.04069041833281517D0 5.772380828857422D0)) (list (list 58.0D0 1398.7601318359375D0 0.04147017002105713D0 5.784875392913818D0)) (list (list 58.0D0 1398.7064208984375D0 0.04061673954129219D0 5.797369480133057D0)) (list (list 58.0D0 1398.6539306640625D0 0.04009702429175377D0 5.809864044189453D0)) (list (list 58.0D0 1398.8316650390625D0 0.03999730199575424D0 5.822358131408691D0)) (list (list 58.0D0 1399.321044921875D0 0.038641832768917084D0 5.834852695465088D0)) (list (list 58.0D0 1399.747802734375D0 0.03506942838430405D0 5.847346782684326D0)) (list (list 58.0D0 1399.75927734375D0 0.03034362941980362D0 5.859841346740723D0)) (list (list 58.0D0 1399.5731201171875D0 0.02605416253209114D0 5.872335433959961D0)) (list (list 58.0D0 1399.6859130859375D0 0.022038381546735764D0 5.884829998016357D0)) (list (list 58.0D0 1401.1317138671875D0 0.01685490645468235D0 5.897324085235596D0)) (list (list 58.0D0 1406.2666015625D0 0.011759034357964993D0 5.909818649291992D0)) (list (list 58.0D0 1407.7330322265625D0 0.009783969260752201D0 5.9223127365112305D0)) (list (list 58.0D0 1404.576171875D0 0.011009838432073594D0 5.934807300567627D0)) (list (list 58.0D0 1399.781494140625D0 0.015558968298137188D0 5.947301387786865D0)) (list (list 58.0D0 1398.9803466796875D0 0.018892711028456688D0 5.959795951843262D0)) (list (list 58.0D0 1398.9132080078125D0 0.01950695365667343D0 5.9722900390625D0)) (list (list 58.0D0 1399.0013427734375D0 0.017585454508662224D0 5.9847846031188965D0)) (list (list 58.0D0 1398.843017578125D0 0.014072869904339314D0 5.997278690338135D0)) (list (list 58.0D0 1398.58056640625D0 0.010473384521901608D0 6.009773254394531D0)) (list (list 58.0D0 1399.22412109375D0 0.007981173694133759D0 6.0222673416137695D0)) (list (list 58.0D0 1400.805908203125D0 0.006963006220757961D0 6.034761905670166D0)) (list (list 58.0D0 1400.9483642578125D0 0.006902262568473816D0 6.0472564697265625D0)) (list (list 58.0D0 1400.2091064453125D0 0.006949737202376127D0 6.059750556945801D0)) (list (list 58.0D0 1403.9866943359375D0 0.006192941218614578D0 6.072245121002197D0)) (list (list 58.0D0 1408.3497314453125D0 0.006384836044162512D0 6.0847392082214356D0)) (list (list 58.0D0 1406.239013671875D0 0.007825382985174656D0 6.097233772277832D0)) (list (list 58.0D0 1400.2325439453125D0 0.012572572566568852D0 6.10972785949707D0)) (list (list 58.0D0 1398.6429443359375D0 0.01864418387413025D0 6.122222423553467D0)) (list (list 58.0D0 1398.4635009765625D0 0.022267477586865425D0 6.134716510772705D0)) (list (list 58.0D0 1398.4283447265625D0 0.022558780387043953D0 6.147211074829102D0)) (list (list 58.0D0 1398.407470703125D0 0.020181525498628617D0 6.15970516204834D0)) (list (list 58.0D0 1398.431884765625D0 0.01639460399746895D0 6.172199726104736D0)) (list (list 58.0D0 1398.5040283203125D0 0.01220962405204773D0 6.184693813323975D0)) (list (list 58.0D0 1398.4300537109375D0 0.008670302107930184D0 6.197188377380371D0)) (list (list 58.0D0 1398.2139892578125D0 0.006720507517457008D0 6.209682464599609D0)) (list (list 58.0D0 1398.277099609375D0 0.006566647440195084D0 6.222177028656006D0)) (list (list 58.0D0 1398.897216796875D0 0.0075454371981322766D0 6.234671115875244D0)) (list (list 58.0D0 1399.691162109375D0 0.008883071132004261D0 6.247165679931641D0)) (list (list 58.0D0 1399.9990234375D0 0.010221443139016629D0 6.259659767150879D0)) (list (list 58.0D0 1399.715576171875D0 0.011524847708642483D0 6.272154331207275D0)) (list (list 58.0D0 1399.1116943359375D0 0.012767402455210686D0 6.284648418426514D0)) (list (list 58.0D0 1398.653564453125D0 0.013928563334047795D0 6.29714298248291D0)) (list (list 58.0D0 1398.49267578125D0 0.01507038064301014D0 6.309637069702148D0)) (list (list 58.0D0 1398.5108642578125D0 0.016190877184271813D0 6.322131633758545D0)) (list (list 58.0D0 1398.5501708984375D0 0.017035027965903282D0 6.334625720977783D0)) (list (list 58.0D0 1398.563232421875D0 0.017193350940942765D0 6.34712028503418D0)) (list (list 58.0D0 1398.6583251953125D0 0.01605803146958351D0 6.359614372253418D0)) (list (list 58.0D0 1399.24365234375D0 0.012909937649965287D0 6.3721089363098145D0)) (list (list 58.0D0 1405.193603515625D0 0.008422408252954483D0 6.384603023529053D0)) (list (list 58.0D0 1385.8330078125D0 0.004872199613600969D0 6.397097587585449D0)) (list (list 58.0D0 1390.1776123046875D0 0.00433150352910161D0 6.4095916748046875D0)) (list (list 58.0D0 1399.959228515625D0 0.008218507282435894D0 6.422086238861084D0)) (list (list 58.0D0 1399.2431640625D0 0.010558499954640866D0 6.434580326080322D0)) (list (list 58.0D0 1399.2294921875D0 0.010615475475788117D0 6.447074890136719D0)) (list (list 58.0D0 1398.8802490234375D0 0.008367386646568776D0 6.459568977355957D0)) (list (list 58.0D0 1398.082763671875D0 0.0061760349199175835D0 6.4720635414123535D0)) (list (list 58.0D0 1397.5897216796875D0 0.006732758600264788D0 6.484557628631592D0)) (list (list 58.0D0 1397.5733642578125D0 0.009741654619574547D0 6.497052192687988D0)) (list (list 58.0D0 1398.0867919921875D0 0.012610596604645253D0 6.509546279907227D0)) (list (list 58.0D0 1398.375244140625D0 0.013420140370726586D0 6.522040843963623D0)) (list (list 58.0D0 1398.3258056640625D0 0.011980238370597363D0 6.534534931182861D0)) (list (list 58.0D0 1396.4581298828125D0 0.008914122357964516D0 6.547029495239258D0)) (list (list 58.0D0 1391.797607421875D0 0.006338486447930336D0 6.559523582458496D0)) (list (list 58.0D0 1390.9833984375D0 0.005426996387541294D0 6.572018146514893D0)) (list (list 58.0D0 1396.246826171875D0 0.0057558324187994D0 6.584512233734131D0)) (list (list 58.0D0 1400.82421875D0 0.007338530849665403D0 6.597006797790527D0)) (list (list 58.0D0 1400.387939453125D0 0.0077619790099561215D0 6.609501361846924D0)) (list (list 58.0D0 1399.2330322265625D0 0.007260976359248161D0 6.621995449066162D0)) (list (list 58.0D0 1399.3798828125D0 0.0060347202233970165D0 6.634490013122559D0)) (list (list 58.0D0 1401.5430908203125D0 0.004459964577108622D0 6.646984100341797D0)) (list (list 58.0D0 1403.525634765625D0 0.0030954834073781967D0 6.659478664398193D0)) (list (list 58.0D0 1403.9593505859375D0 0.0020327845122665167D0 6.671972751617432D0)) (list (list 58.0D0 1404.2427978515625D0 0.0012818508548662067D0 6.684467315673828D0)) (list (list 58.0D0 1405.358154296875D0 8.401655941270292D-4 6.696961402893066D0)) (list (list 58.0D0 1404.7987060546875D0 6.561505142599344D-4 6.709455966949463D0)) (list (list 58.0D0 1400.91943359375D0 6.322076660580933D-4 6.721950054168701D0)) (list (list 58.0D0 1398.0880126953125D0 6.453592795878649D-4 6.734444618225098D0)) (list (list 58.0D0 1397.62060546875D0 5.949401529505849D-4 6.746938705444336D0)) (list (list 58.0D0 1397.6646728515625D0 5.251290858723223D-4 6.759433269500732D0)) (list (list 58.0D0 1397.360107421875D0 4.736779083032161D-4 6.771927356719971D0)) (list (list 58.0D0 1397.03466796875D0 4.3402472510933876D-4 6.784421920776367D0)) (list (list 58.0D0 1397.1878662109375D0 3.779157705139369D-4 6.7969160079956055D0)) (list (list 58.0D0 1397.1607666015625D0 2.985368191730231D-4 6.809410572052002D0)) (list (list 58.0D0 1396.156005859375D0 2.2215634817257524D-4 6.82190465927124D0)) (list (list 58.0D0 1394.6868896484375D0 1.740070292726159D-4 6.834399223327637D0)) (list (list 58.0D0 1393.907958984375D0 1.4427264977712184D-4 6.846893310546875D0)) (list (list 58.0D0 1395.7451171875D0 1.1375853500794619D-4 6.8593878746032715D0)) (list (list 58.0D0 1398.4739990234375D0 8.75911646289751D-5 6.87188196182251D0)) (list (list 58.0D0 1400.6864013671875D0 6.756161747034639D-5 6.884376525878906D0)) (list (list 58.0D0 1404.9178466796875D0 5.000587771064602D-5 6.8968706130981445D0)) (list (list 58.0D0 1406.489990234375D0 3.929872764274478D-5 6.909365177154541D0)) (list (list 58.0D0 1404.1099853515625D0 3.6265075323171914D-5 6.921859264373779D0)) (list (list 58.0D0 1396.9736328125D0 4.349190567154437D-5 6.934353828430176D0)) (list (list 58.0D0 1397.578125D0 4.398591408971697D-5 6.946847915649414D0)) (list (list 58.0D0 1399.1346435546875D0 3.720212771440856D-5 6.9593424797058106D0)) (list (list 58.0D0 1399.1346435546875D0 0.0D0 6.971836566925049D0)) (list (list 59.0D0 4197.71826171875D0 0.0010483270743861795D0 4.897777557373047D0)) (list (list 59.0D0 4196.04736328125D0 0.0012662636581808329D0 4.910272121429443D0)) (list (list 59.0D0 4196.73095703125D0 0.00197118753567338D0 4.922766208648682D0)) (list (list 59.0D0 4197.26123046875D0 0.0030569168739020825D0 4.935260772705078D0)) (list (list 59.0D0 4197.052734375D0 0.004330697935074568D0 4.947755336761475D0)) (list (list 59.0D0 4196.85302734375D0 0.005641643889248371D0 4.960249423980713D0)) (list (list 59.0D0 4196.5439453125D0 0.006779291667044163D0 4.972743988037109D0)) (list (list 59.0D0 4196.18408203125D0 0.007568943779915571D0 4.985238075256348D0)) (list (list 59.0D0 4196.13818359375D0 0.007986297830939293D0 4.997732639312744D0)) (list (list 59.0D0 4196.431640625D0 0.008112815208733082D0 5.010226726531982D0)) (list (list 59.0D0 4196.58642578125D0 0.008002323098480702D0 5.022721290588379D0)) (list (list 59.0D0 4196.22119140625D0 0.007657068315893412D0 5.035215377807617D0)) (list (list 59.0D0 4195.5595703125D0 0.007168796379119158D0 5.047709941864014D0)) (list (list 59.0D0 4195.13671875D0 0.006691975053399801D0 5.060204029083252D0)) (list (list 59.0D0 4195.19580078125D0 0.006323717534542084D0 5.072698593139648D0)) (list (list 59.0D0 4195.619140625D0 0.006032640114426613D0 5.085192680358887D0)) (list (list 59.0D0 4195.9462890625D0 0.005708031356334686D0 5.097687244415283D0)) (list (list 59.0D0 4195.9052734375D0 0.0052673607133328915D0 5.1101813316345215D0)) (list (list 59.0D0 4195.802734375D0 0.004794923588633537D0 5.122675895690918D0)) (list (list 59.0D0 4195.89794921875D0 0.004534818232059479D0 5.135169982910156D0)) (list (list 59.0D0 4195.94482421875D0 0.004664634820073843D0 5.147664546966553D0)) (list (list 59.0D0 4195.74169921875D0 0.005002861376851797D0 5.160158634185791D0)) (list (list 59.0D0 4195.41650390625D0 0.005150052718818188D0 5.1726531982421875D0)) (list (list 59.0D0 4195.2646484375D0 0.004951651208102703D0 5.185147285461426D0)) (list (list 59.0D0 4195.37451171875D0 0.004670179449021816D0 5.197641849517822D0)) (list (list 59.0D0 4195.44287109375D0 0.004744286183267832D0 5.2101359367370606D0)) (list (list 59.0D0 4195.2451171875D0 0.0054367356933653355D0 5.222630500793457D0)) (list (list 59.0D0 4195.283203125D0 0.006678977515548468D0 5.235124588012695D0)) (list (list 59.0D0 4196.1064453125D0 0.008122737519443035D0 5.247619152069092D0)) (list (list 59.0D0 4197.28955078125D0 0.009410910308361054D0 5.26011323928833D0)) (list (list 59.0D0 4197.74658203125D0 0.010202642530202866D0 5.272607803344727D0)) (list (list 59.0D0 4196.99462890625D0 0.010333463549613953D0 5.285101890563965D0)) (list (list 59.0D0 4195.88427734375D0 0.010124539025127888D0 5.297596454620361D0)) (list (list 59.0D0 4195.765625D0 0.009910078719258309D0 5.3100905418396D0)) (list (list 59.0D0 4196.63916015625D0 0.009917555376887322D0 5.322585105895996D0)) (list (list 59.0D0 4197.3486328125D0 0.0101786432787776D0 5.335079193115234D0)) (list (list 59.0D0 4197.33251953125D0 0.010452073998749257D0 5.347573757171631D0)) (list (list 59.0D0 4197.29296875D0 0.010553252883255482D0 5.360067844390869D0)) (list (list 59.0D0 4197.85107421875D0 0.010273522697389126D0 5.372562408447266D0)) (list (list 59.0D0 4198.58984375D0 0.009530766867101193D0 5.385056495666504D0)) (list (list 59.0D0 4198.45654296875D0 0.008501513861119748D0 5.3975510597229D0)) (list (list 59.0D0 4197.4501953125D0 0.007609679829329252D0 5.410045146942139D0)) (list (list 59.0D0 4196.39404296875D0 0.006950508337467909D0 5.422539710998535D0)) (list (list 59.0D0 4195.94580078125D0 0.006108532659709454D0 5.435033798217773D0)) (list (list 59.0D0 4196.00341796875D0 0.005046146456152201D0 5.44752836227417D0)) (list (list 59.0D0 4196.013671875D0 0.004401053301990032D0 5.460022449493408D0)) (list (list 59.0D0 4196.173828125D0 0.004756113514304161D0 5.472517013549805D0)) (list (list 59.0D0 4196.7158203125D0 0.00592433474957943D0 5.485011100769043D0)) (list (list 59.0D0 4197.0712890625D0 0.007091999985277653D0 5.4975056648254395D0)) (list (list 59.0D0 4196.87646484375D0 0.007573638577014208D0 5.510000228881836D0)) (list (list 59.0D0 4196.2724609375D0 0.007330678403377533D0 5.522494316101074D0)) (list (list 59.0D0 4195.54443359375D0 0.006866455543786287D0 5.534988880157471D0)) (list (list 59.0D0 4195.37744140625D0 0.00676148384809494D0 5.547482967376709D0)) (list (list 59.0D0 4196.05126953125D0 0.0072281877510249615D0 5.5599775314331055D0)) (list (list 59.0D0 4197.08056640625D0 0.007933598011732102D0 5.572471618652344D0)) (list (list 59.0D0 4197.97509765625D0 0.008226081728935242D0 5.58496618270874D0)) (list (list 59.0D0 4198.6142578125D0 0.007875223644077778D0 5.5974602699279785D0)) (list (list 59.0D0 4198.544921875D0 0.007171541452407837D0 5.609954833984375D0)) (list (list 59.0D0 4197.2392578125D0 0.006513300817459822D0 5.622448921203613D0)) (list (list 59.0D0 4195.47314453125D0 0.0062039936892688275D0 5.63494348526001D0)) (list (list 59.0D0 4194.5068359375D0 0.006168054882436991D0 5.647437572479248D0)) (list (list 59.0D0 4194.47802734375D0 0.006253344938158989D0 5.6599321365356445D0)) (list (list 59.0D0 4195.0322265625D0 0.006475670263171196D0 5.672426223754883D0)) (list (list 59.0D0 4195.40869140625D0 0.006946643348783255D0 5.684920787811279D0)) (list (list 59.0D0 4194.990234375D0 0.007600085344165564D0 5.697414875030518D0)) (list (list 59.0D0 4193.99658203125D0 0.008240765891969204D0 5.709909439086914D0)) (list (list 59.0D0 4193.4658203125D0 0.008778524585068226D0 5.722403526306152D0)) (list (list 59.0D0 4193.94970703125D0 0.009279916994273663D0 5.734898090362549D0)) (list (list 59.0D0 4195.28515625D0 0.009846072643995285D0 5.747392177581787D0)) (list (list 59.0D0 4196.80517578125D0 0.010431472212076188D0 5.759886741638184D0)) (list (list 59.0D0 4197.6357421875D0 0.010925197042524815D0 5.772380828857422D0)) (list (list 59.0D0 4197.45947265625D0 0.011363819241523743D0 5.784875392913818D0)) (list (list 59.0D0 4196.56005859375D0 0.011793052777647972D0 5.797369480133057D0)) (list (list 59.0D0 4195.79296875D0 0.011988885700702668D0 5.809864044189453D0)) (list (list 59.0D0 4196.11376953125D0 0.011454983614385128D0 5.822358131408691D0)) (list (list 59.0D0 4197.7763671875D0 0.01020791009068489D0 5.834852695465088D0)) (list (list 59.0D0 4199.49072265625D0 0.008897654712200165D0 5.847346782684326D0)) (list (list 59.0D0 4199.83251953125D0 0.007872236892580986D0 5.859841346740723D0)) (list (list 59.0D0 4198.82763671875D0 0.007160739507526159D0 5.872335433959961D0)) (list (list 59.0D0 4197.26025390625D0 0.006382868159562349D0 5.884829998016357D0)) (list (list 59.0D0 4195.3544921875D0 0.00495411641895771D0 5.897324085235596D0)) (list (list 59.0D0 4186.58837890625D0 0.003249557688832283D0 5.909818649291992D0)) (list (list 59.0D0 4206.12158203125D0 0.001965430099517107D0 5.9223127365112305D0)) (list (list 59.0D0 4201.46044921875D0 0.0021712209563702345D0 5.934807300567627D0)) (list (list 59.0D0 4193.7744140625D0 0.003615974448621273D0 5.947301387786865D0)) (list (list 59.0D0 4194.45556640625D0 0.004139104392379522D0 5.959795951843262D0)) (list (list 59.0D0 4194.88037109375D0 0.003941952716559172D0 5.9722900390625D0)) (list (list 59.0D0 4195.40283203125D0 0.0032567065209150315D0 5.9847846031188965D0)) (list (list 59.0D0 4195.65625D0 0.0023326785303652287D0 5.997278690338135D0)) (list (list 59.0D0 4198.83251953125D0 0.0014365286333486438D0 6.009773254394531D0)) (list (list 59.0D0 4202.00732421875D0 0.0010301246074959636D0 6.0222673416137695D0)) (list (list 59.0D0 4168.59521484375D0 0.0013695957604795695D0 6.034761905670166D0)) (list (list 59.0D0 4192.64794921875D0 0.001288478379137814D0 6.0472564697265625D0)) (list (list 59.0D0 4223.2783203125D0 5.550557398237288D-4 6.059750556945801D0)) (list (list 59.0D0 4225.06201171875D0 4.1442597284913063D-4 6.097233772277832D0)) (list (list 59.0D0 4190.89453125D0 0.0028021286707371474D0 6.10972785949707D0)) (list (list 59.0D0 4192.9619140625D0 0.0032148128375411034D0 6.122222423553467D0)) (list (list 59.0D0 4194.515625D0 0.003079407848417759D0 6.134716510772705D0)) (list (list 59.0D0 4196.3671875D0 0.0024987945798784495D0 6.147211074829102D0)) (list (list 59.0D0 4198.4560546875D0 0.0018553455593064428D0 6.15970516204834D0)) (list (list 59.0D0 4200.46142578125D0 0.0013673638459295035D0 6.172199726104736D0)) (list (list 59.0D0 4199.69384765625D0 9.801039705052972D-4 6.184693813323975D0)) (list (list 59.0D0 4196.10888671875D0 7.667468162253499D-4 6.197188377380371D0)) (list (list 59.0D0 4193.29833984375D0 7.804432534612715D-4 6.209682464599609D0)) (list (list 59.0D0 4194.083984375D0 8.393072057515383D-4 6.222177028656006D0)) (list (list 59.0D0 4197.46923828125D0 8.573338855057955D-4 6.234671115875244D0)) (list (list 59.0D0 4200.677734375D0 8.455848437733948D-4 6.247165679931641D0)) (list (list 59.0D0 4201.6083984375D0 7.639935938641429D-4 6.259659767150879D0)) (list (list 59.0D0 4199.458984375D0 6.018017302267253D-4 6.272154331207275D0)) (list (list 59.0D0 4195.8984375D0 4.5613583642989397D-4 6.284648418426514D0)) (list (list 59.0D0 4195.04638671875D0 3.9106811163946986D-4 6.29714298248291D0)) (list (list 59.0D0 4196.3671875D0 4.3876501149497926D-4 6.309637069702148D0)) (list (list 59.0D0 4199.0947265625D0 5.584300379268825D-4 6.322131633758545D0)) (list (list 59.0D0 4200.38330078125D0 6.769037572667003D-4 6.334625720977783D0)) (list (list 59.0D0 4200.5673828125D0 7.57221772801131D-4 6.34712028503418D0)) (list (list 59.0D0 4200.546875D0 7.986426935531199D-4 6.359614372253418D0)) (list (list 59.0D0 4201.05517578125D0 7.877177558839321D-4 6.3721089363098145D0)) (list (list 59.0D0 4203.32666015625D0 6.907800561748445D-4 6.384603023529053D0)) (list (list 59.0D0 4207.91796875D0 5.917885573580861D-4 6.397097587585449D0)) (list (list 59.0D0 4207.70947265625D0 5.341593641787767D-4 6.4095916748046875D0)) (list (list 59.0D0 4201.212890625D0 5.925271543674171D-4 6.422086238861084D0)) (list (list 59.0D0 4197.5029296875D0 8.255505235865712D-4 6.434580326080322D0)) (list (list 59.0D0 4198.970703125D0 9.063707548193634D-4 6.447074890136719D0)) (list (list 59.0D0 4203.69384765625D0 8.097173413261771D-4 6.459568977355957D0)) (list (list 59.0D0 4210.2060546875D0 6.967823137529194D-4 6.4720635414123535D0)) (list (list 59.0D0 4211.81884765625D0 6.294782506301999D-4 6.484557628631592D0)) (list (list 59.0D0 4210.326171875D0 6.337352097034454D-4 6.497052192687988D0)) (list (list 59.0D0 4205.63916015625D0 6.929552182555199D-4 6.509546279907227D0)) (list (list 59.0D0 4198.25341796875D0 8.073060307651758D-4 6.522040843963623D0)) (list (list 59.0D0 4193.77978515625D0 9.476608829572797D-4 6.534534931182861D0)) (list (list 59.0D0 4191.97216796875D0 8.684118511155248D-4 6.547029495239258D0)) (list (list 59.0D0 4187.708984375D0 6.645102403126657D-4 6.559523582458496D0)) (list (list 59.0D0 4185.6767578125D0 5.386892007663846D-4 6.572018146514893D0)) (list (list 59.0D0 4187.025390625D0 4.8139336286112666D-4 6.584512233734131D0)) (list (list 59.0D0 4192.05908203125D0 4.3286647996865213D-4 6.597006797790527D0)) (list (list 59.0D0 4203.181640625D0 3.0589723610319197D-4 6.609501361846924D0)) (list (list 59.0D0 4205.2666015625D0 1.986341376323253D-4 6.621995449066162D0)) (list (list 59.0D0 4184.69140625D0 1.566750433994457D-4 6.634490013122559D0)) (list (list 59.0D0 4191.52294921875D0 1.8472973897587508D-4 6.646984100341797D0)) (list (list 59.0D0 4190.875D0 1.6661759582348168D-4 6.659478664398193D0)) (list (list 59.0D0 4191.33251953125D0 1.1876887583639473D-4 6.671972751617432D0)) (list (list 59.0D0 4193.94970703125D0 7.667911268072203D-5 6.684467315673828D0)) (list (list 59.0D0 4195.4052734375D0 5.9362580941524357D-5 6.696961402893066D0)) (list (list 59.0D0 4194.38671875D0 6.500026938738302D-5 6.709455966949463D0)) (list (list 59.0D0 4193.236328125D0 8.488600724376738D-5 6.721950054168701D0)) (list (list 59.0D0 4193.3701171875D0 9.85686929197982D-5 6.734444618225098D0)) (list (list 59.0D0 4193.59130859375D0 9.294279152527452D-5 6.746938705444336D0)) (list (list 59.0D0 4193.19384765625D0 6.933311669854447D-5 6.759433269500732D0)) (list (list 59.0D0 4189.0810546875D0 3.964973075198941D-5 6.771927356719971D0)) (list (list 59.0D0 4189.0810546875D0 0.0D0 6.784421920776367D0)) (list (list 60.0D0 4661.52294921875D0 4.514210158959031D-4 5.197641849517822D0)) (list (list 60.0D0 4669.37109375D0 6.830054917372763D-4 5.2101359367370606D0)) (list (list 60.0D0 4668.7802734375D0 8.502794080413878D-4 5.222630500793457D0)) (list (list 60.0D0 4667.08984375D0 9.915701812133193D-4 5.235124588012695D0)) (list (list 60.0D0 4664.11572265625D0 0.0011650444939732552D0 5.26011323928833D0)) (list (list 60.0D0 4663.74365234375D0 0.0010808863444253803D0 5.272607803344727D0)) (list (list 60.0D0 4663.0361328125D0 9.322569239884615D-4 5.285101890563965D0)) (list (list 60.0D0 4662.08203125D0 7.394554559141398D-4 5.297596454620361D0)) (list (list 60.0D0 4662.6015625D0 5.493911448866129D-4 5.3100905418396D0)) (list (list 60.0D0 4693.47021484375D0 4.5162258902564645D-4 5.322585105895996D0)) (list (list 60.0D0 4676.7568359375D0 5.384000833146274D-4 5.335079193115234D0)) (list (list 60.0D0 4676.0849609375D0 6.944440538063645D-4 5.347573757171631D0)) (list (list 60.0D0 4671.2314453125D0 7.986825075931847D-4 5.360067844390869D0)) (list (list 60.0D0 4667.35791015625D0 0.0012064038310199976D0 5.372562408447266D0)) (list (list 60.0D0 4665.7705078125D0 0.0019407744985073805D0 5.385056495666504D0)) (list (list 60.0D0 4664.5087890625D0 0.0026956014335155487D0 5.3975510597229D0)) (list (list 60.0D0 4663.26171875D0 0.003109036013484001D0 5.410045146942139D0)) (list (list 60.0D0 4662.54248046875D0 0.00323776388540864D0 5.422539710998535D0)) (list (list 60.0D0 4662.35107421875D0 0.0033312374725937844D0 5.435033798217773D0)) (list (list 60.0D0 4661.8564453125D0 0.00342370243743062D0 5.44752836227417D0)) (list (list 60.0D0 4660.8212890625D0 0.003442829241976142D0 5.460022449493408D0)) (list (list 60.0D0 4660.86669921875D0 0.003386599011719227D0 5.472517013549805D0)) (list (list 60.0D0 4662.30810546875D0 0.003286622930318117D0 5.485011100769043D0)) (list (list 60.0D0 4663.0869140625D0 0.003178881946951151D0 5.4975056648254395D0)) (list (list 60.0D0 4661.98046875D0 0.0031154686585068703D0 5.510000228881836D0)) (list (list 60.0D0 4660.57421875D0 0.003292498644441366D0 5.522494316101074D0)) (list (list 60.0D0 4660.314453125D0 0.003511475631967187D0 5.534988880157471D0)) (list (list 60.0D0 4661.67236328125D0 0.0033857054077088833D0 5.547482967376709D0)) (list (list 60.0D0 4663.44580078125D0 0.002937746001407504D0 5.5599775314331055D0)) (list (list 60.0D0 4664.0361328125D0 0.002619055099785328D0 5.572471618652344D0)) (list (list 60.0D0 4664.44287109375D0 0.002823775867000222D0 5.58496618270874D0)) (list (list 60.0D0 4664.76416015625D0 0.003384695388376713D0 5.5974602699279785D0)) (list (list 60.0D0 4663.57958984375D0 0.003797178855165839D0 5.609954833984375D0)) (list (list 60.0D0 4661.6484375D0 0.003917507361620665D0 5.622448921203613D0)) (list (list 60.0D0 4659.7294921875D0 0.0038384408690035344D0 5.63494348526001D0)) (list (list 60.0D0 4659.009765625D0 0.003718588501214981D0 5.647437572479248D0)) (list (list 60.0D0 4659.75146484375D0 0.003739047795534134D0 5.6599321365356445D0)) (list (list 60.0D0 4661.2646484375D0 0.003945234697312117D0 5.672426223754883D0)) (list (list 60.0D0 4661.63037109375D0 0.004066540393978357D0 5.684920787811279D0)) (list (list 60.0D0 4660.3427734375D0 0.0038935060147196055D0 5.697414875030518D0)) (list (list 60.0D0 4658.5205078125D0 0.0034950398840010166D0 5.709909439086914D0)) (list (list 60.0D0 4656.45263671875D0 0.0028177080675959587D0 5.722403526306152D0)) (list (list 60.0D0 4652.39990234375D0 0.002098008058965206D0 5.734898090362549D0)) (list (list 60.0D0 4651.0087890625D0 0.001749632298015058D0 5.747392177581787D0)) (list (list 60.0D0 4652.88134765625D0 0.001629406469874084D0 5.759886741638184D0)) (list (list 60.0D0 4672.71630859375D0 0.0017688298830762506D0 5.772380828857422D0)) (list (list 60.0D0 4673.85546875D0 0.0015071521047502757D0 5.784875392913818D0)) (list (list 60.0D0 4675.10986328125D0 0.0010967871639877558D0 5.797369480133057D0)) (list (list 60.0D0 4679.32470703125D0 6.983099156059325D-4 5.809864044189453D0)) (list (list 60.0D0 4685.28076171875D0 6.363437860272825D-4 5.822358131408691D0)) (list (list 60.0D0 4683.8857421875D0 8.29204625915736D-4 5.834852695465088D0)) (list (list 60.0D0 4668.30029296875D0 0.0014769044937565923D0 5.847346782684326D0)) (list (list 60.0D0 4666.01220703125D0 0.0021395711228251458D0 5.859841346740723D0)) (list (list 60.0D0 4664.4296875D0 0.002528407610952854D0 5.872335433959961D0)) (list (list 60.0D0 4663.478515625D0 0.002648489084094763D0 5.884829998016357D0)) (list (list 60.0D0 4662.44921875D0 0.002634290838614106D0 5.897324085235596D0)) (list (list 60.0D0 4661.5283203125D0 0.00247581978328526D0 5.909818649291992D0)) (list (list 60.0D0 4661.79541015625D0 0.0021166664082556963D0 5.9223127365112305D0)) (list (list 60.0D0 4662.4169921875D0 0.0016926382668316365D0 5.934807300567627D0)) (list (list 60.0D0 4661.806640625D0 0.001416560960933566D0 5.947301387786865D0)) (list (list 60.0D0 4661.27001953125D0 0.0014144852757453919D0 5.959795951843262D0)) (list (list 60.0D0 4662.73388671875D0 0.0016300680581480265D0 5.9722900390625D0)) (list (list 60.0D0 4664.888671875D0 0.001928755664266646D0 5.9847846031188965D0)) (list (list 60.0D0 4665.45703125D0 0.0020376353058964014D0 5.997278690338135D0)) (list (list 60.0D0 4664.38134765625D0 0.0018460872815921903D0 6.009773254394531D0)) (list (list 60.0D0 4662.75634765625D0 0.0015286363195627928D0 6.0222673416137695D0)) (list (list 60.0D0 4661.45166015625D0 0.0012724403059110046D0 6.034761905670166D0)) (list (list 60.0D0 4660.6259765625D0 0.001130947726778686D0 6.0472564697265625D0)) (list (list 60.0D0 4660.27734375D0 0.0010732829105108977D0 6.059750556945801D0)) (list (list 60.0D0 4659.44287109375D0 0.0010314064566046D0 6.072245121002197D0)) (list (list 60.0D0 4656.69384765625D0 9.438471752218902D-4 6.0847392082214356D0)) (list (list 60.0D0 4653.45068359375D0 8.217195863835514D-4 6.097233772277832D0)) (list (list 60.0D0 4652.87353515625D0 6.300352397374809D-4 6.10972785949707D0)) (list (list 60.0D0 4661.6240234375D0 5.344039527699351D-4 6.122222423553467D0)) (list (list 60.0D0 4639.09619140625D0 6.142411730252206D-4 6.134716510772705D0)) (list (list 60.0D0 4664.25537109375D0 0.0013198954984545708D0 6.147211074829102D0)) (list (list 60.0D0 4663.2255859375D0 0.0017854234902188182D0 6.15970516204834D0)) (list (list 60.0D0 4663.447265625D0 0.002113926224410534D0 6.172199726104736D0)) (list (list 60.0D0 4663.296875D0 0.0022336493711918593D0 6.184693813323975D0)) (list (list 60.0D0 4661.3720703125D0 0.00209994544275105D0 6.197188377380371D0)) (list (list 60.0D0 4658.7880859375D0 0.0018842890858650208D0 6.209682464599609D0)) (list (list 60.0D0 4658.048828125D0 0.001774876844137907D0 6.222177028656006D0)) (list (list 60.0D0 4659.68798828125D0 0.0018078892026096583D0 6.234671115875244D0)) (list (list 60.0D0 4662.57275390625D0 0.0019764003809541464D0 6.247165679931641D0)) (list (list 60.0D0 4663.9404296875D0 0.0021944972686469555D0 6.259659767150879D0)) (list (list 60.0D0 4663.66064453125D0 0.0024652935098856688D0 6.272154331207275D0)) (list (list 60.0D0 4662.6552734375D0 0.0028485909570008517D0 6.284648418426514D0)) (list (list 60.0D0 4662.14892578125D0 0.003275277093052864D0 6.29714298248291D0)) (list (list 60.0D0 4662.361328125D0 0.0036077876575291157D0 6.309637069702148D0)) (list (list 60.0D0 4662.80224609375D0 0.0037941092159599066D0 6.322131633758545D0)) (list (list 60.0D0 4663.0390625D0 0.003854195587337017D0 6.334625720977783D0)) (list (list 60.0D0 4662.86962890625D0 0.003866057377308607D0 6.34712028503418D0)) (list (list 60.0D0 4662.56005859375D0 0.003959102090448141D0 6.359614372253418D0)) (list (list 60.0D0 4662.6015625D0 0.0041646454483270645D0 6.3721089363098145D0)) (list (list 60.0D0 4662.837890625D0 0.004349497612565756D0 6.384603023529053D0)) (list (list 60.0D0 4662.7138671875D0 0.004344623070210218D0 6.397097587585449D0)) (list (list 60.0D0 4662.1552734375D0 0.004099071491509676D0 6.4095916748046875D0)) (list (list 60.0D0 4661.5D0 0.0036771404556930065D0 6.422086238861084D0)) (list (list 60.0D0 4661.12255859375D0 0.0032235877588391304D0 6.434580326080322D0)) (list (list 60.0D0 4661.15478515625D0 0.0029277049470692873D0 6.447074890136719D0)) (list (list 60.0D0 4661.236328125D0 0.002879177685827017D0 6.459568977355957D0)) (list (list 60.0D0 4661.2392578125D0 0.002965311985462904D0 6.4720635414123535D0)) (list (list 60.0D0 4661.31201171875D0 0.0029929818119853735D0 6.484557628631592D0)) (list (list 60.0D0 4661.14111328125D0 0.0029028081335127354D0 6.497052192687988D0)) (list (list 60.0D0 4660.51513671875D0 0.002768952865153551D0 6.509546279907227D0)) (list (list 60.0D0 4660.40283203125D0 0.0026516770012676716D0 6.522040843963623D0)) (list (list 60.0D0 4661.69970703125D0 0.0025261188857257367D0 6.534534931182861D0)) (list (list 60.0D0 4663.5869140625D0 0.002396192867308855D0 6.547029495239258D0)) (list (list 60.0D0 4664.91552734375D0 0.0021998591255396605D0 6.559523582458496D0)) (list (list 60.0D0 4665.49560546875D0 0.0018983017653226853D0 6.572018146514893D0)) (list (list 60.0D0 4665.30078125D0 0.0015230865683406592D0 6.584512233734131D0)) (list (list 60.0D0 4664.57080078125D0 0.0011312311980873347D0 6.597006797790527D0)) (list (list 60.0D0 4664.3291015625D0 7.656401139684022D-4 6.609501361846924D0)) (list (list 60.0D0 4665.50927734375D0 4.5497698010876775D-4 6.621995449066162D0)) (list (list 60.0D0 4668.34130859375D0 2.3734490969218314D-4 6.634490013122559D0)) (list (list 60.0D0 4670.267578125D0 1.253391819773242D-4 6.646984100341797D0)) (list (list 60.0D0 4669.4873046875D0 9.032752859639004D-5 6.659478664398193D0)) (list (list 60.0D0 4665.62109375D0 9.368052997160703D-5 6.671972751617432D0)) (list (list 60.0D0 4662.951171875D0 9.933843102771789D-5 6.684467315673828D0)) (list (list 60.0D0 4661.34130859375D0 9.068467625183985D-5 6.696961402893066D0)) (list (list 60.0D0 4660.04541015625D0 7.363058830378577D-5 6.709455966949463D0)) (list (list 60.0D0 4658.8681640625D0 5.9300949942553416D-5 6.721950054168701D0)) (list (list 60.0D0 4658.076171875D0 5.5173029977595434D-5 6.734444618225098D0)) (list (list 60.0D0 4658.38037109375D0 5.919015166000463D-5 6.746938705444336D0)) (list (list 60.0D0 4658.88671875D0 6.554841093020514D-5 6.759433269500732D0)) (list (list 60.0D0 4658.86962890625D0 6.819749251008034D-5 6.771927356719971D0)) (list (list 60.0D0 4658.8486328125D0 6.506049248855561D-5 6.784421920776367D0)) (list (list 60.0D0 4659.08544921875D0 5.8729638112708926D-5 6.7969160079956055D0)) (list (list 60.0D0 4659.0087890625D0 5.232556941336952D-5 6.809410572052002D0)) (list (list 60.0D0 4658.28271484375D0 4.6925801143515855D-5 6.82190465927124D0)) (list (list 60.0D0 4657.5517578125D0 4.280894427211024D-5 6.834399223327637D0)) (list (list 60.0D0 4657.37646484375D0 3.979364555561915D-5 6.846893310546875D0)) (list (list 60.0D0 4657.4677734375D0 3.7026547943241894D-5 6.8593878746032715D0)) (list (list 60.0D0 4657.40283203125D0 3.332710548420437D-5 6.87188196182251D0)) (list (list 60.0D0 4657.40283203125D0 0.0D0 6.884376525878906D0)) (list (list 61.0D0 1364.774169921875D0 6.076387362554669D-4 5.9847846031188965D0)) (list (list 61.0D0 1361.94140625D0 3.493363328743726D-4 5.997278690338135D0)) (list (list 61.0D0 1336.5137939453125D0 4.8381794476881623D-4 6.034761905670166D0)) (list (list 61.0D0 1334.332275390625D0 4.899417981505394D-4 6.0472564697265625D0)) (list (list 61.0D0 1333.445556640625D0 6.725190905854106D-4 6.059750556945801D0)) (list (list 61.0D0 1383.9688720703125D0 0.004939634818583727D0 6.0847392082214356D0)) (list (list 61.0D0 1312.84716796875D0 2.3709605738986284D-4 6.122222423553467D0)) (list (list 61.0D0 1316.2091064453125D0 3.326234291307628D-4 6.134716510772705D0)) (list (list 61.0D0 1329.9957275390625D0 6.811055936850607D-4 6.15970516204834D0)) (list (list 61.0D0 1324.3270263671875D0 4.924837849102914D-4 6.184693813323975D0)) (list (list 61.0D0 1322.794921875D0 3.888929495587945D-4 6.197188377380371D0)) (list (list 61.0D0 1322.434326171875D0 3.557783202268183D-4 6.209682464599609D0)) (list (list 61.0D0 1357.933349609375D0 5.961071001365781D-4 6.222177028656006D0)) (list (list 61.0D0 1357.933349609375D0 0.0D0 6.234671115875244D0))))) nil "Extraindo Parciais de SDIF"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 180 52) (quote "( ( (i f a) (i f a))((i f a) (i f a)))") "" (om-make-point 66 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "0 - Index$1 - Frequencia$2 - Amplitude$3 - Fase") "" (om-make-point 45 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIFINFO" (quote sdifinfo) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 615 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Vc-pont-A#4-mf-1c.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 488 21) (om-make-point 180 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "Vc-pont-A#4-mf-1c" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 0 nil 0) (0 0 1 0 nil 0) (8 0 2 0 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (8 0 7 0 nil 0) (10 0 8 0 nil 0) (14 0 10 0 nil 0) (9 0 10 1 nil 0) (13 0 11 1 nil 0) (12 0 13 0 nil 0) (14 0 13 1 nil 0) (18 0 14 0 nil 0) (18 0 17 0 nil 0))) nil 6.16))
