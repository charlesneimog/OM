; OM File Header - Saved 2020/04/16 16:06:59
; (6.16 :patc (om-make-point 118 10) (om-make-point 0 47) (om-make-point 1920 943) "" 183 0 "2020/04/16 15:30:35" "2020/04/16 16:06:59")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"Steper.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Calculater" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Main Processor") nil (om-make-point 579 549) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Set Difference$only Positive$Values") nil (om-make-point 596 367) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 106) (quote "Calculation$Intervall$in$MidiCent Difference Value") nil (om-make-point 663 143) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 484 673) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "Steper" (quote ("elements" "Steper")) (quote ((om-load-inputfun (quote input-funbox) "" "RoothNote" nil) (om-load-inputfun (quote input-funbox) "" "Intervall" nil) (om-load-inputfun (quote input-funbox) "" "lastNote" nil))) (om-make-point 485 532) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 526 352) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 536 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 582 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 459 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Rooth Intervall" 1 (om-make-point 427 55) "" "Rooth Intervall" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Rooth Note" 0 (om-make-point 123 59) "" "Rooth Note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (10 0 4 0 nil 0) (5 0 4 1 nil 0) (10 0 4 2 nil 0) (6 0 5 0 nil 0) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (9 0 7 0 nil 0) (9 0 8 0 nil 0))) nil 6.16))