; OM File Header - Saved 2020/04/17 11:46:38
; (6.16 :patc (om-make-point 10 260) (om-make-point 0 47) (om-make-point 1920 943) "" 183 0 "2020/04/17 9:59:37" "2020/04/17 11:46:38")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"partEnergeticWriter.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "partEnergeticWriter" (quote ((let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 574 560) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 761 521) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 759 451) (om-make-point 47 30) (list -1 1) "(-1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 553 621) (om-make-point 86 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "LastNote" 2 (om-make-point 633 145) "" "LastNote" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Build$List$of Pitch") "" (om-make-point 273 749) nil (om-make-color 0.8497597 0.053467613 0.053467613) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Calculate$more$Energy to Pitch") "" (om-make-point 751 695) nil (om-make-color 0.9144274 0.05331502 0.05331502) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 117 74) (quote "translate$Energy$to$Pitch") "" (om-make-point 431 578) nil (om-make-color 0.8602121 0.026886397 0.026886397) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Check$Energy out of$Seq") "" (om-make-point 586 251) nil (om-make-color 0.9075608 0.02792401 0.02792401) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Extract$rem first Value") "" (om-make-point 329 129) nil (om-make-color 0.89127946 0.07646296 0.07646296) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Prove$are there more$Values of Eneg") "" (om-make-point 44 345) nil (om-make-color 0.8844129 0.051071946 0.051071946) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Calculate$Remainded$EnergSeq") "" (om-make-point 128 202) nil (om-make-color 0.84513617 0.058091097 0.058091097) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 131 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 533 807) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 553 731) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "partEnergeticWriter" (quote ("elements" "partEnergeticWriter")) (quote ((om-load-inputfun (quote input-funbox) "" "RemaindedEnergeticSeq" nil) (om-load-inputfun (quote input-funbox) "" "EnergeticScale" nil) (om-load-inputfun (quote input-funbox) "" "LastNote" nil))) (om-make-point 652 725) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 369 743) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "PitchSeq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 369 743) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>= 2" (quote om>=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 139 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REST" (quote rest) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 222 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 552 457) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 466 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 467 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>=" (quote om>=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 365 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 306 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 424 399) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 493 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "EnergeticScale" 1 (om-make-point 528 68) "" "EnergeticScale" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "RemaindedEnergeticSeq" 0 (om-make-point 173 75) "" "RemaindedEnergeticSeq" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 1 0 nil 0) (0 0 3 0 nil 0) (4 0 3 1 nil 0) (19 0 12 0 nil 0) (14 0 13 0 nil 0) (15 0 13 1 nil 0) (3 0 14 0 nil 0) (19 0 15 0 nil 0) (27 0 15 1 nil 0) (3 0 15 2 nil 0) (17 0 16 0 nil 0) (18 0 17 0 nil 0) (13 0 17 1 nil 0) (14 0 17 2 nil 0) (12 0 18 0 nil 0) (28 0 19 0 nil 0) (25 0 20 0 nil 0) (27 0 20 1 nil 0) (22 0 21 0 nil 0) (26 0 22 1 nil 0) (24 0 23 0 nil 0) (26 0 23 1 nil 0) (28 0 24 0 nil 0) (23 0 25 0 nil 0) (21 0 25 1 nil 0) (24 0 25 2 nil 0) (27 0 26 0 nil 0))) nil 6.16))