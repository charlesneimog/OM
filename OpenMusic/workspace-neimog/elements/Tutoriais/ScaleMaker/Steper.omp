; OM File Header - Saved 2020/04/16 16:06:55
; (6.16 :patc (om-make-point 10 60) (om-make-point 0 35) (om-make-point 1920 967) "" 183 0 "2020/04/16 15:39:06" "2020/04/16 16:06:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"Steper.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Steper" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Check is$Cycle Closed") nil (om-make-point 334 600) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Add Ofset to$last Pitch") nil (om-make-point 505 438) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Calculate new Ofset") nil (om-make-point 539 240) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Recursion$self Call") nil (om-make-point 862 344) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 435 531) (om-make-point 89 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 767 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "Steper" (quote ("elements" "Steper")) (quote ((om-load-inputfun (quote input-funbox) "" "RoothNote" nil) (om-load-inputfun (quote input-funbox) "" "Intervall" nil) (om-load-inputfun (quote input-funbox) "" "lastNote" nil))) (om-make-point 796 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 599 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 601 446) (om-make-point 45 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 600 694) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 550 785) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "PreBuildScale" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1200))) (om-make-point 496 268) (om-make-point 43 59) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 494 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lastNote" 2 (om-make-point 546 64) "" "lastNote" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Intervall" 1 (om-make-point 395 68) "" "Intervall" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "RoothNote" 0 (om-make-point 208 66) "" "RoothNote" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 4 0 nil 0) (8 0 4 1 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (15 0 6 0 nil 0) (14 0 6 1 ((om-make-point 415 125) (om-make-point 413 206) (om-make-point 842 166) (om-make-point 816 330)) 0) (8 0 6 2 nil 0) (8 0 7 0 nil 0) (15 0 8 0 nil 0) (11 1 8 1 nil 0) (4 0 9 0 nil 0) (7 0 9 1 nil 0) (5 0 9 2 nil 0) (9 0 10 0 nil 0) (12 0 11 0 nil 0) (14 0 12 0 nil 0) (13 0 12 1 nil 0))) nil 6.16))