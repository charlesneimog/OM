; OM File Header - Saved 2020/04/17 9:48:30
; (6.16 :patc (om-make-point 118 60) (om-make-point 0 131) (om-make-point 1920 775) "" 183 0 "2020/04/17 7:55:46" "2020/04/17 9:48:30")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"Finder.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "scalereader auto" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 123 81) (quote "Search for$Key $in$Energetic-Key_Seq") nil (om-make-point 257 402) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Pre-Process$Intervall-Value") nil (om-make-point 933 434) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 447 707) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Position" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Intervall" 1 (om-make-point 840 138) "" "Intervall" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ScaleSeq" 0 (om-make-point 346 157) "" "ScaleSeq" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 352 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 583 339) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1200))) (om-make-point 859 537) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "Finder" (quote ("elements" "Finder")) (quote ((om-load-inputfun (quote input-funbox) "" "Scale" nil) (om-load-inputfun (quote input-funbox) "" "Note" nil) (om-load-inputfun (quote input-funbox) "" "lastValue" -1))) (om-make-point 436 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 864 630) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 847 456) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Input Intervall") "" (om-make-point 857 35) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Given Scale") "" (om-make-point 412 33) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 2 0 nil 0) (4 0 5 0 nil 0) (5 0 6 0 nil 0) (10 0 7 0 nil 0) (5 0 8 0 nil 0) (9 0 8 1 nil 0) (7 1 9 0 nil 0) (6 0 9 1 nil 0) (3 0 10 0 nil 0))) nil 6.16))