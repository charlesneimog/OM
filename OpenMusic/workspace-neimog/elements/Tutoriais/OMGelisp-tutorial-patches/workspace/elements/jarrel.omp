; OM File Header - Saved 2020/03/01 21:14:59
; (6.16 :patc (om-make-point 44 28) (om-make-point 429 76) (om-make-point 932 679) "" 183 0 nil "2020/02/26 20:06:02")
; End File Header
(in-package :om)(load-lib-for (quote ("OMGelisp")))(setf *om-current-persistent* (om-load-patch1 "jarrel" (quote ((om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 149 275) (om-make-point 51 28) (list 10 10) "(10 10)" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 3 177) (om-make-point 165 28) (list (list (list 3 1) (list 7)) (list (list 2 1) (list 4) (list 7))) "(((3 1) (7)) ((2 1) (4) (7)))" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 89 240) (om-make-point 91 28) (list (list 1 1) (list 1 1 1)) "((1 1) (1 1 1))" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 255 266) (om-make-point 43 28) (list 14 6) "(14 6)" nil) (om-load-boxcall (quote lispfun) "LIST3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 191 171) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP11" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 236 101) nil nil nil (list (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 100))) (om-make-point 185 205) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 198 249) nil nil nil nil 3) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 151 97) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 324 262) (om-make-point 31 58) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 113 307) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (2 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "omloop11" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 147 105) nil nil nil (list (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 100))) (om-make-point 185 205) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 198 249) nil nil nil nil 3) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 151 97) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 324 262) (om-make-point 31 58) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 113 307) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (2 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "omloop1" nil) (om-load-editor-box1 "CHORD1" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000 6100 6200 6300 6800 6700)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 231 11) (om-make-point 100 83) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6100 6200 6300 6800 6700)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode microplay)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 427 387) (om-make-point 406 174) 0 1 (quote t) nil 0 nil)) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 142 11) (om-make-point 72 79) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 8000)) :ldur (quote (1000 1000)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode microplay)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 785 478) (om-make-point 694 229) 0 1 (quote t) nil 0 nil)) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 231 480) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 198 249) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 177 189) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 151 97) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 324 262) (om-make-point 31 58) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 113 307) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "omloop" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 450)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 57 562) (om-make-point 495 138) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (6300) (6000) (6000) (6000) (6000) (6000) (6300) (6200) (6900) (6000) (6000) (6000) (6200) (6100) (6800) (7200) (6100) (7200) (8000))) :lonset (quote (0 450 900 1350 1800 2250 2700 3150 3600 4050 4500 4950 5400 5850 6300 6750 7200 7650 8100 8550 9000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode microplay)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 1356 326) (om-make-point 487 211) 0 1 (quote t) nil 0 nil)) t nil nil nil) (om-load-boxcall (quote genfun) "OMSEARCH-NEXT" (quote omsearch-next) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 215 396) nil nil nil nil 1) (let ((newbox (om-load-boxcall (quote genfun) "JARRELL6" (quote jarrell6) (quote ((om-load-inputfun (quote input-funbox) "list of the intervals for each partition" "CELLS" (list (list (list 3 1) (list 7)) (list (list 2 1) (list 4) (list 7)))) (om-load-inputfun (quote input-funbox) "quantity desired for each interval, partition" "PERCENTAGES" (list (list 1 1) (list 1 1 1))) (om-load-inputfunmenu1 (quote input-funmenu) "allow octaviation for the intervals" "INTERVAL-OCTAVIATION" (quote t) (list (list "true" (quote t)) (list "false" nil))) (om-load-inputfun (quote input-funbox) "partition where each interval constraint is post" "CELL-DURATIONS" (list 10 10)) (om-load-inputfun (quote input-funbox) "list of the chords" "CHORDS" (list (list 0 2 4 7 11) (list 1 3 5 8 0))) (om-load-inputfunmenu1 (quote input-funmenu) "allow octaviations for the chord notes" "CHORD-OCTAVIATION" (quote t) (list (list "true" (quote t)) (list "false" nil))) (om-load-inputfun (quote input-funbox) "partition where each chord constraint is post" "CHORD-DURATIONS" (list 14 6)) (om-load-inputfun (quote input-funbox) "increase = 1, decrease = 2, N/A = 0" "INCREASE" 0) (om-load-inputfun (quote input-funbox) "using absolute intervals true or false" "ABSOLUTE-INTERVALS" (quote t)) (om-load-inputfun (quote input-funbox) "defining the first and last note, nil for none" "LIMITS" (list 74 80)) (om-load-inputfunmenu1 (quote input-funmenu) "using octaviation for defining the first and last note (true or false)" "LIMITS-OCTAVIATION" nil (list (list "true" (quote t)) (list "false" nil))) (om-load-inputfun (quote input-funbox) "time limit in milliseconds" "TIME_LIMIT" 0))) (om-make-point 37 323) (om-make-point 438 58) nil nil nil 1))) (setf (frame-position newbox) (om-make-point 37 323)) newbox))) (quote ((6 0 4 0 nil 0) (5 0 4 1 nil 0) (7 1 5 0 nil 0) (8 1 6 0 nil 0) (11 0 9 0 nil 0) (9 0 10 1 nil 0) (12 0 11 0 nil 0) (1 0 12 0 nil 1) (2 0 12 1 nil 2) (0 0 12 3 nil 3) (4 0 12 4 nil 4) (3 0 12 6 nil 0))) nil 6.0401))
