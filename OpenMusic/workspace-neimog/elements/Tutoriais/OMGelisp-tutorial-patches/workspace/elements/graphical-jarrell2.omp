; OM File Header - Saved 2020/02/26 20:06:02
; (6.0401 :patc (om-make-point 19 285) (om-make-point 50 50) (om-make-point 800 769) "" 183 0 nil "2020/02/26 20:06:02")
; End File Header
(in-package :om)(load-lib-for (quote ("OMGelisp")))(setf *om-current-persistent* (om-load-patch1 "graphical-jarrell2" (quote ((om-load-boxcomment "comment1" (om-make-point 98 55) (quote "Quantities for the motives (upper bound)") "" (om-make-point 608 216) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 608 281) (om-make-point 91 28) (list (list 1 1) (list 2 2 1)) "((1 1) (2 2 1))" nil) (om-load-boxcomment "comment" (om-make-point 444 40) (quote "Developed by Mauricio Toro Bermudez - mauriciotorob at  gmail.com . $Special thanks to Serge Lemouton for his valuable comments.") "" (om-make-point 121 670) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 145 105) (quote "Graphical representation for the CSP proposed by Michael Jarrell") "" (om-make-point 349 462) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "Domain of $the notes") "" (om-make-point 305 362) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "First and Last$Note") "" (om-make-point 510 294) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "Segmentation$for the chords") "" (om-make-point 425 211) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 92 69) (quote "Chords or ambitus for each segment") "" (om-make-point 369 43) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "Segmentation$for the motives") "" (om-make-point 179 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 122 73) (quote "Type of intervals:$0: Non-absolute$1: Absolute$2: Modulo 12") "" (om-make-point 35 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 91 55) (quote "Quantities for the motives$(lower bound)") "" (om-make-point 0 261) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 60 34) (quote "Motives") "" (om-make-point 26 337) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 116 66) (quote "Block this box to obtain multiple solutions.") "" (om-make-point 117 370) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 85 54) (quote "Time limit (currently unavailable)") "" (om-make-point 503 395) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list5" (quote list) (quote nil) (om-make-point 497 361) (om-make-point 76 32) 0 "0" nil) (om-load-boxcall (quote bastype) "list4" (quote list) (quote nil) (om-make-point 159 84) (om-make-point 25 25) 1 "1" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 481 279) (om-make-point 51 24) (list 74 80) "(74 80)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 450)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 77 576) (om-make-point 506 90) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6000) (6100) (6000) (6100) (6000) (6100) (6000) (6100) (7300) (6100) (6000) (6200) (6100) (6000) (6100) (6000) (6100) (6000) (6800))) :lonset (quote (0 450 900 1350 1800 2250 2700 3150 3600 4050 4500 4950 5400 5850 6300 6750 7200 7650 8100 8550 9000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 1356 326) (om-make-point 487 211) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 251 500) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 198 249) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 177 189) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 151 97) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 324 262) (om-make-point 31 58) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 113 307) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote genfun) "OMSEARCH-NEXT" (quote omsearch-next) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 230 428) nil nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 285 38) (om-make-point 72 79) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 8000)) :ldur (quote (1000 1000)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) thechord) "x" nil (pairlis (quote (microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 785 478) (om-make-point 694 229) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD1" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000 6100 6200 6300 6800 6700)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 474 40) (om-make-point 100 83) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6100 6200 6300 6800 6700)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 427 387) (om-make-point 406 174) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 328 137) nil nil nil (list (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 100))) (om-make-point 185 205) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 198 249) nil nil nil nil 3) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 151 97) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 324 262) (om-make-point 31 58) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 113 307) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (2 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "omloop1" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP11" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 417 136) nil nil nil (list (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 100))) (om-make-point 185 205) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 198 249) nil nil nil nil 3) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 151 97) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 324 262) (om-make-point 31 58) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 113 307) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (2 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "omloop11" nil) (om-load-boxcall (quote lispfun) "LIST3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 383 219) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 422 249) (om-make-point 43 28) (list 14 6) "(14 6)" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 57 241) (om-make-point 91 28) (list (list 0 0) (list 0 0 0)) "((0 0) (0 0 0))" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 19 317) (om-make-point 165 28) (list (list (list 3 1) (list 7)) (list (list 2 1) (list 4) (list 7))) "(((3 1) (7)) ((2 1) (4) (7)))" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 212 200) (om-make-point 51 28) (list 10 10) "(10 10)" nil) (om-load-boxwithed1 (quote box-with-win) "OMCSP" (quote omcsp) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" (quote t)) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" (quote t)) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" 0) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" (quote t)) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" 23) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" 21) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" 108) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 201 349) nil nil "x" (list (om-load-seqbox "constraint4" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "A constraint is connected here" "X" nil))) (om-make-point 1022 650) nil nil nil 0) (om-load-boxcall (quote lispfun) "MAPCAR3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1030 585) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MOTIVES-OCCURS>=" (quote motives-occurs>=) (quote ((om-load-inputfun (quote input-funbox) "List of variables" "VARIABLES" nil) (om-load-inputfun (quote input-funbox) "List of motives" "MOTIVESLIST" nil) (om-load-inputfun (quote input-funbox) "Quantity for each motive" "QUANTITY" nil))) (om-make-point 753 384) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "MOTIVES-OCCURS<=" (quote motives-occurs<=) (quote ((om-load-inputfun (quote input-funbox) "List of variables" "VARIABLES" nil) (om-load-inputfun (quote input-funbox) "List of motives" "MOTIVESLIST" nil) (om-load-inputfun (quote input-funbox) "Quantity for each motive" "QUANTITY" nil))) (om-make-point 934 529) nil nil "l" nil 1) (om-load-boxin "input13" 13 (om-make-point 1068 457) "no documentation" "quantities2" nil nil) (om-load-boxcomment "comment" (om-make-point 115 39) (quote "Order to $choose variables") "" (om-make-point 926 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "Order to choose values") "" (om-make-point 727 71) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "CSP proposed by Michael Jarrell") "" (om-make-point 590 9) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 132 74) (quote "Warning:$Using optimization takes forever...") "" (om-make-point 335 595) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "optimal-criterion" (quote optimal-criterion) (quote ((om-load-inputfun (quote input-funbox) "integer variables" "VAR" nil))) (om-make-point 328 540) nil nil nil nil 0) (om-load-boxcall (quote genfun) "VARIABLE_HEURISTICS" (quote variable_heuristics) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "The criterion to choose a FD variable during the search" "CRITERION" 4 (list (list "First unassigned" 0) (list "Min" 1) (list "Max" 2) (list "Domain size" 3) (list "Degree" 4) (list "Domain size/degree" 5))) (om-load-inputfunmenu1 (quote input-funmenu) "Applying that criterion to the largest or the smalles?" "SMALLESTORLARGEST" 1 (list (list "smallest" 0) (list "largest" 1))))) (om-make-point 929 18) nil nil nil nil 0) (om-load-boxcall (quote genfun) "VARIABLES-SUM" (quote variables-sum) (quote ((om-load-inputfun (quote input-funbox) "List of variables" "THELIST" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Increasing parameter" "INCREASING" 0 (list (list "None" 0) (list "Increasing" 1) (list "Decreasing" 2))))) (om-make-point 329 461) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 77 274) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 163 277) nil nil nil nil 1) (om-load-boxin "input12" 12 (om-make-point 379 130) "no documentation" "maximum" nil nil) (om-load-boxin "input11" 11 (om-make-point 319 119) "no documentation" "minimum" nil nil) (om-load-boxcall (quote genfun) "VALUE_HEURISTICS" (quote value_heuristics) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "The heuristic to choose a value for a FD variable during the search" "VALUE" 0 (list (list "Minimum" (quote |gelisp|::bval_min)) (list "Medium" (quote |gelisp|::bval_med)) (list "Maximum" (quote |gelisp|::bval_max)) (list "Lower half" (quote |gelisp|::bval_split_min)) (list "Upper half" (quote |gelisp|::bval_split_max)))))) (om-make-point 733 12) nil nil nil nil 0) (om-load-boxin "input10" 10 (om-make-point 27 66) "no documentation" "timelimit" nil nil) (om-load-boxin "input9" 9 (om-make-point 92 336) "no documentation" "limitsoctaviation" nil nil) (om-load-boxin "input8" 8 (om-make-point 127 180) "no documentation" "limits" nil nil) (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 863 196) (om-make-point 21 24) 12 "12" nil) (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 741 198) (om-make-point 16 23) 0 "0" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 528 369) (om-make-point 43 31) 1 "1" nil) (om-load-boxcall (quote genfun) "X-->DX1" (quote x-->dx) (quote ((om-load-inputfun (quote input-funbox) "integer variables" "VARS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "constraint" "CONSTRAINTED" 0 (list (list "non-constrainted" 0) (list "distinct" 1))) (om-load-inputfunmenu1 (quote input-funmenu) "Intervals type" "ABSOLUTE" 2 (list (list "Non-absolute" 0) (list "Absolute" 1) (list "Modulo n" 2))) (om-load-inputfun (quote input-funbox) "modulo n" "N" 12))) (om-make-point 786 251) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "X-->DX2" (quote x-->dx) (quote ((om-load-inputfun (quote input-funbox) "integer variables" "VARS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "constraint" "CONSTRAINTED" 0 (list (list "non-constrainted" 0) (list "distinct" 1))) (om-load-inputfunmenu1 (quote input-funmenu) "Intervals type" "ABSOLUTE" 0 (list (list "Non-absolute" 0) (list "Absolute" 1) (list "Modulo n" 2))))) (om-make-point 309 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 839 358) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 229 78) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 270 119) nil nil nil nil 1) (om-load-seqbox "constraint3" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 815 539) nil nil nil 0) (om-load-seqbox "constraint2" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 531 517) nil nil nil 0) (om-load-seqbox "constraint1" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 128 469) (om-make-point 57 58) nil nil 0) (om-load-seqbox "constraint" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 68 470) nil nil nil 0) (om-load-boxcall (quote genfun) "MEMBEROF" (quote memberof) (quote ((om-load-inputfun (quote input-funbox) "variable" "VARIABLE" nil) (om-load-inputfun (quote input-funbox) "list of values" "THELIST" nil) (om-load-inputfunmenu1 (quote input-funmenu) "octaviation" "OCTAVIATION" 0 (list (list "no" 0) (list "yes" 1))) (om-load-inputfunmenu1 (quote input-funmenu) "Allowing ambitus" "ALLOWAMBITUS" 1 (list (list "no" 0) (list "yes" 1))))) (om-make-point 458 401) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "LOWERLIMIT" (quote lowerlimit) (quote ((om-load-inputfun (quote input-funbox) "list of variables" "THELIST" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" 0) (om-load-inputfun (quote input-funbox) "octaviation" "OCTAVIATION" 0))) (om-make-point 195 411) nil nil nil nil 1) (om-load-boxcall (quote genfun) "UPPERLIMIT" (quote upperlimit) (quote ((om-load-inputfun (quote input-funbox) "list of variables" "THELIST" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" 0) (om-load-inputfun (quote input-funbox) "octaviation" "OCTAVIATION" 0))) (om-make-point 0 411) nil nil nil nil 1) (om-load-boxcall (quote genfun) "TIMELIMIT" (quote timelimit) (quote ((om-load-inputfun (quote input-funbox) "time" "TIME" 0))) (om-make-point 28 143) nil nil nil nil 0) (om-load-boxcall (quote lispfun) "MAPCAR1" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 830 486) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 536 463) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CREATE-PARTITION1" (quote create-partition) (quote ((om-load-inputfun (quote input-funbox) "The list" "THELIST" nil) (om-load-inputfun (quote input-funbox) "intervals" "INTERVALS" nil))) (om-make-point 589 335) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CREATE-PARTITION" (quote create-partition) (quote ((om-load-inputfun (quote input-funbox) "The list" "THELIST" nil) (om-load-inputfun (quote input-funbox) "intervals" "INTERVALS" nil))) (om-make-point 953 181) nil nil nil nil 1) (om-load-boxcall (quote genfun) "createIntegerVars" (quote createintegervars) (quote ((om-load-inputfun (quote input-funbox) "number of variables" "N" 10) (om-load-inputfun (quote input-funbox) "low val" "FROM" 21) (om-load-inputfun (quote input-funbox) "high val" "TO" 108) (om-load-inputfunmenu1 (quote input-funmenu) "constraint" "CONSTRAINTED" 0 (list (list "non-constrainted" 0) (list "distinct" 1))))) (om-make-point 243 190) nil nil nil nil 1) (om-load-boxin "input7" 7 (om-make-point 357 397) "no documentation" "increase" nil nil) (om-load-boxin "input6" 6 (om-make-point 639 274) "no documentation" "Chrd.-segment." nil (om-make-point 79 58)) (om-load-boxin "input5" 5 (om-make-point 459 309) "no documentation" "chords-octaviation" nil nil) (om-load-boxin "input4" 4 (om-make-point 673 380) "no documentation" "chords" nil nil) (om-load-boxin "input3" 3 (om-make-point 487 53) "no documentation" "motives-segmentation" nil nil) (om-load-boxin "input2" 2 (om-make-point 772 174) "no documentation" "intervals-type" nil nil) (om-load-boxin "input1" 1 (om-make-point 887 367) "no documentation" "quantities" nil nil) (om-load-boxin "input0" 0 (om-make-point 936 382) "no documentation" "motives" nil nil) (om-load-seqbox "output" (quote g-output) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 269 545) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (25 0 1 1 nil 0) (48 0 1 2 nil 0) (4 0 1 3 nil 0) (11 0 9 0 nil 0) (24 0 11 0 nil 0) (19 0 12 0 nil 0) (19 0 13 0 nil 0) (21 0 23 1 nil 0) (46 0 23 2 nil 0) (20 0 23 3 nil 0) (40 0 24 0 nil 0) (23 0 25 0 nil 0) (39 0 25 1 nil 0) (26 0 27 0 nil 0) (45 0 27 1 nil 0) (36 0 28 0 nil 0) (37 0 29 0 nil 0) (33 0 30 0 nil 0) (34 0 31 0 nil 0) (43 0 32 2 nil 0) (22 0 32 3 nil 0) (40 0 33 0 nil 0) (13 0 33 1 nil 0) (18 0 33 2 nil 0) (40 0 34 0 nil 0) (12 0 34 1 nil 0) (18 0 34 2 nil 0) (17 0 35 0 nil 0) (2 0 36 0 nil 0) (25 0 36 1 nil 0) (48 0 36 2 nil 0) (47 0 36 3 nil 0) (32 0 37 0 nil 0) (38 0 37 1 nil 0) (44 0 37 2 nil 0) (40 0 38 0 nil 0) (42 0 38 1 nil 0) (40 0 39 0 nil 0) (45 0 39 1 nil 0) (27 0 40 0 nil 0) (15 0 40 1 nil 0) (14 0 40 2 nil 0) (40 0 49 0 nil 0))) 1 "jarrell-csp" nil))) (quote ((18 0 17 1 nil 0) (19 0 18 0 nil 0) (29 0 19 0 nil 0) (20 1 22 0 nil 0) (21 1 23 0 nil 0) (22 0 24 0 nil 0) (23 0 24 1 nil 0) (27 0 29 0 nil 1) (26 0 29 1 nil 2) (15 0 29 2 nil 0) (28 0 29 3 nil 3) (24 0 29 4 nil 4) (25 0 29 6 nil 0) (16 0 29 8 nil 0) (14 0 29 10 nil 0) (1 0 29 13 ((om-make-point 652 307) (om-make-point 652 329) (om-make-point 327 328) (om-make-point 327 349)) 1))) nil 6.0401))
