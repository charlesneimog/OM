; OM File Header - Saved 2020/02/26 20:06:02
; (6.0401 :patc (om-make-point 18 253) (om-make-point 50 50) (om-make-point 514 433) "" 183 0 nil "2020/02/26 20:06:02")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Gecode")))(setf *om-current-persistent* (om-load-patch1 "forallxi+ni!=xj+nj" (quote ((om-load-boxcomment "comment11" (om-make-point 344 44) (quote "This method can only be used inside a OMCSP box") "" (om-make-point 80 371) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 145 39) (quote "FOXALLXI+NI!=XJ+NJ") "" (om-make-point 172 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OMSEARCH-NEXT" (quote omsearch-next) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 174 292) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMCSP1" (quote omcsp) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" 8))) (om-make-point 190 209) nil nil nil (list (om-load-boxcomment "comment1" (om-make-point 132 82) (quote "Using the forallxi+ni!=xj+nj we can post a constraint for the right side diagonals") "" (om-make-point 1 376) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 132 82) (quote "Using the forallxi+ni!=xj+nj we can post a constraint for the left  side diagonals") "" (om-make-point 289 376) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 119 101) (quote "The variables are distinct, therefore the queens are in different columns.") "" (om-make-point 145 367) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "N-queens") "" (om-make-point 244 47) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "-1" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 189 105) nil nil nil nil 1) (om-load-seqbox "constraint1" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 274 305) nil nil nil 0) (om-load-boxcall (quote genfun) "forallxi+ni!=xj+nj1" (quote forallxi+ni!=xj+nj) (quote ((om-load-inputfun (quote input-funbox) "x" "X" 0) (om-load-inputfun (quote input-funbox) "n" "N" 10))) (om-make-point 262 238) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 289 104) nil nil nil nil 1) (om-load-boxcall (quote genfun) "createIntegerConstants1" (quote createintegerconstants) (quote ((om-load-inputfun (quote input-funbox) "from" "FROM" 0) (om-load-inputfun (quote input-funbox) "to" "TO" 0) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 269 151) nil nil nil nil 1) (om-load-boxcall (quote genfun) "forallxi+ni!=xj+nj" (quote forallxi+ni!=xj+nj) (quote ((om-load-inputfun (quote input-funbox) "x" "X" 0) (om-load-inputfun (quote input-funbox) "n" "N" 10))) (om-make-point 8 238) nil nil nil nil 1) (om-load-seqbox "constraint" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 16 306) nil nil nil 0) (om-load-boxcall (quote genfun) "createIntegerConstants" (quote createintegerconstants) (quote ((om-load-inputfun (quote input-funbox) "from" "FROM" 0) (om-load-inputfun (quote input-funbox) "to" "TO" 0) (om-load-inputfun (quote input-funbox) "step" "STEP" -1))) (om-make-point 7 147) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "createIntegerVars" (quote createintegervars) (quote ((om-load-inputfun (quote input-funbox) "number of variables" "N" 10) (om-load-inputfun (quote input-funbox) "low val" "FROM" 0) (om-load-inputfun (quote input-funbox) "high val" "TO" 9) (om-load-inputfunmenu1 (quote input-funmenu) "constraint" "CONSTRAINTED" 1 (list (list "non-constrainted" 0) (list "distinct" 1))))) (om-make-point 145 149) nil nil nil nil 1) (om-load-seqbox "output" (quote g-output) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 171 303) nil nil nil 0)) (quote ((12 0 4 0 nil 0) (6 0 5 0 nil 0) (13 0 6 0 nil 0) (8 0 6 1 nil 0) (12 0 7 0 nil 0) (7 0 8 0 nil 0) (13 0 9 0 nil 0) (11 0 9 1 nil 0) (9 0 10 0 nil 0) (12 0 11 0 nil 0) (12 0 13 0 nil 0) (4 0 13 2 nil 0) (13 0 14 0 nil 0))) 1 "nqueens" nil))) (quote ((3 0 2 0 nil 0))) nil 6.0401))
