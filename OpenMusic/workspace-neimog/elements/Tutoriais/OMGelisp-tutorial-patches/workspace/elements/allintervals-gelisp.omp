; OM File Header - Saved 2020/02/26 20:06:02
; (6.0401 :patc (om-make-point 14 146) (om-make-point 784 94) (om-make-point 1136 699) "" 183 0 nil "2020/02/26 20:06:02")
; End File Header
(in-package :om)(load-lib-for (quote ("OMGelisp")))(setf *om-current-persistent* (om-load-patch1 "allintervals-gelisp" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 618 164) (om-make-point 127 30) "/Users/mtoro/Desktop/24-all-interval.txt" "\"/Users/mtoro/Desktop/24-all-interval.txt\"" nil) (om-load-boxcall (quote genfun) "OMSEARCH-ALL-FILE" (quote omsearch-all-file) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NAME" nil))) (om-make-point 535 247) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMSEARCH-ALL" (quote omsearch-all) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 418 247) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 111 406) (om-make-point 403 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7000) (7100) (6200) (6900) (6300) (6800) (6400) (6100) (6500) (6700) (6600))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (microplay palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil 0 nil (quote t) 1 0 (om-make-point 487 211) (om-make-point 1356 326) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 182 320) nil nil nil (list (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 60))) (om-make-point 133 173) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 198 249) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 177 189) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 151 97) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 324 262) (om-make-point 31 58) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 113 307) nil nil nil 0)) (quote ((4 0 0 0 nil 0) (2 0 1 0 nil 0) (0 0 2 0 nil 0) (3 0 4 0 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "omloop" nil) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "Answer$") "" (om-make-point 526 418) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OMSEARCH-NEXT1" (quote omsearch-next) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 106 247) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMCSP" (quote omcsp) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" 12))) (om-make-point 174 149) nil nil "&" (list (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 266) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST1" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 334 319) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 261 277) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GETVARS" (quote getvars) (quote ((om-load-inputfun (quote input-funbox) "integer variables" "VARS" nil) (om-load-inputfun (quote input-funbox) "constraint" "VARS" 0))) (om-make-point 424 215) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 122 44) (quote "All Interval Series. 1928 solutions") "" (om-make-point 337 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 93 39) (quote "Breaking the simetries$") "" (om-make-point 299 216) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "GELISP<" (quote gelisp<) (quote ((om-load-inputfun (quote input-funbox) "variable" "VAR1" nil) (om-load-inputfun (quote input-funbox) "variable" "VAR2" nil))) (om-make-point 283 371) nil nil nil nil 1) (om-load-seqbox "constraint2" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 272 434) nil nil nil 0) (om-load-seqbox "constraint1" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 416 332) nil nil nil 0) (om-load-boxcall (quote genfun) "GELISP=" (quote gelisp=) (quote ((om-load-inputfun (quote input-funbox) "variable" "VAR1" nil) (om-load-inputfun (quote input-funbox) "variable" "VAR2" 0))) (om-make-point 427 270) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-->DX1" (quote x-->dx) (quote ((om-load-inputfun (quote input-funbox) "integer variables" "VARS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "constraint" "CONSTRAINTED" 1 (list (list "non-constrainted" 0) (list "distinct" 1))) (om-load-inputfunmenu1 (quote input-funmenu) "Intervals type" "ABSOLUTE" 2 (list (list "Non-absolute" 0) (list "Absolute" 1) (list "Modulo n" 2))) (om-load-inputfun (quote input-funbox) "modulo n" "N" 0))) (om-make-point 28 205) nil nil nil nil 1) (om-load-seqbox "constraint" (quote g-constraint) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 19 297) nil nil nil 0) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 131 102) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "createIntegerVars" (quote createintegervars) (quote ((om-load-inputfun (quote input-funbox) "number of variables" "N" 10) (om-load-inputfun (quote input-funbox) "low val" "FROM" 0) (om-load-inputfun (quote input-funbox) "high val" "TO" 9) (om-load-inputfunmenu1 (quote input-funmenu) "constraint" "CONSTRAINTED" 1 (list (list "non-constrainted" 0) (list "distinct" 1))))) (om-make-point 87 145) nil nil nil nil 1) (om-load-seqbox "output" (quote g-output) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 113 288) nil nil nil 0)) (quote ((10 0 0 0 nil 0) (0 0 1 0 nil 0) (10 0 2 0 nil 0) (14 0 3 0 nil 0) (2 0 6 0 nil 0) (1 0 6 1 nil 0) (6 0 7 0 nil 0) (9 0 8 0 nil 0) (3 0 9 0 nil 0) (14 0 10 0 nil 0) (13 0 10 3 nil 0) (10 0 11 0 nil 0) (13 0 12 0 nil 0) (13 0 14 0 nil 0) (12 0 14 2 nil 0) (14 0 15 0 nil 0))) 1 "omcsp" nil))) (quote ((7 0 1 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (4 0 3 1 nil 0) (6 0 4 0 nil 0) (7 0 6 0 nil 0))) nil 6.0401))
