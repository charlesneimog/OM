; OM File Header - Saved 2020/07/10 15:10:41
; (6.120003 :patc (om-make-point 243 334) (om-make-point 959 255) (om-make-point 788 639) "" 183 0 nil "2020/07/10 15:10:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "mouse" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 385 480) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Synth" (om-load-patch-abs1 "Synth" (quote ((let ((box (om-load-boxin "input" 0 (om-make-point 60 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 249 346) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COSC_AR" (quote omsc::cosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "BUFNUM" 1) (om-load-inputfun (quote input-funbox) "" "FREQ" (quote freq)) (om-load-inputfun (quote input-funbox) "" "BEATS" 0.5) (om-load-inputfun (quote input-funbox) "" "MUL" 0.5) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 90 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 128 85) (om-make-point 422 30) "Buffer.alloc(s, 512, 1, {arg buf; buf.sine1Msg(1.0/[1,2,3,4,5,6,7,8])})" "\"Buffer.alloc(s, 512, 1, {arg buf; buf.sine1Msg(1.0/[1,2,3,4,5,6,7,8])})\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HPF_AR" (quote omsc::hpf_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 234 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 4 0 nil 0))) 6.120003 nil "" (om-make-point -1067 385) (om-make-point 670 446)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 328 134) nil (list (list "HPF.ar(" (list "COsc.ar(" "Buffer.alloc(s, 512, 1, {arg buf; buf.sine1Msg(1.0/[1,2,3,4,5,6,7,8])})" "," (list "(DegreeToKey.kr(Scale." (list (quote omsc::hirajoshi)) ".as(LocalBuf),MouseX.kr(" 12 "),Scale." (list (quote omsc::hirajoshi)) ".stepsPerOctave," 1 "," 60 ")).midicps") "," 0.5 "," 0.5 "," 0 ")") "," (list 440) "," (list 1) "," (list 0) ")")) nil "Synth"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 254 50) (quote "Select scale from scale_data object") "" (om-make-point 474 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-SCALE" (quote omsc::mouse-scale) (quote ((om-load-inputfun (quote input-funbox) "" "RANGE" 12) (om-load-inputfun (quote input-funbox) "" "STEP" 1) (om-load-inputfun (quote input-funbox) "" "BASENOTE" 60) (om-load-inputfun (quote input-funbox) "" "SCALE" "major"))) (om-make-point 419 99) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCALE_DATA" (quote omsc::scale_data) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "LISTA" (quote omsc::hirajoshi) (list (list "aeolian" (quote (quote omsc::aeolian))) (list "ahirbhairav" (quote (quote omsc::ahirbhairav))) (list "ajam" (quote (quote omsc::ajam))) (list "atharKurd" (quote (quote omsc::atharkurd))) (list "augmented" (quote (quote omsc::augmented))) (list "augmented2" (quote (quote omsc::augmented2))) (list "bartok" (quote (quote omsc::bartok))) (list "bastanikar" (quote (quote omsc::bastanikar))) (list "bayati" (quote (quote omsc::bayati))) (list "bhairav" (quote (quote omsc::bhairav))) (list "chinese" (quote (quote omsc::chinese))) (list "chromatic" (quote (quote omsc::chromatic))) (list "chromatic24" (quote (quote omsc::chromatic24))) (list "diminished" (quote (quote omsc::diminished))) (list "diminished2" (quote (quote omsc::diminished2))) (list "dorian" (quote (quote omsc::dorian))) (list "egyptian" (quote (quote omsc::egyptian))) (list "enigmatic" (quote (quote omsc::enigmatic))) (list "farahfaza" (quote (quote omsc::farahfaza))) (list "gong" (quote (quote omsc::gong))) (list "harmonicMajor" (quote (quote omsc::harmonicmajor))) (list "harmonicMinor" (quote (quote omsc::harmonicminor))) (list "hexAeolian" (quote (quote omsc::hexaeolian))) (list "hexDorian" (quote (quote omsc::hexdorian))) (list "hexMajor6" (quote (quote omsc::hexmajor6))) (list "hexMajor7" (quote (quote omsc::hexmajor7))) (list "hexPhrygian" (quote (quote omsc::hexphrygian))) (list "hexSus" (quote (quote omsc::hexsus))) (list "hijaz" (quote (quote omsc::hijaz))) (list "hijazDesc" (quote (quote omsc::hijazdesc))) (list "hindu" (quote (quote omsc::hindu))) (list "hirajoshi" (quote (quote omsc::hirajoshi))) (list "hungarianMinor" (quote (quote omsc::hungarianminor))) (list "husseini" (quote (quote omsc::husseini))) (list "huzam" (quote (quote omsc::huzam))) (list "indian" (quote (quote omsc::indian))) (list "ionian" (quote (quote omsc::ionian))) (list "iraq" (quote (quote omsc::iraq))) (list "iwato" (quote (quote omsc::iwato))) (list "jiao" (quote (quote omsc::jiao))) (list "jiharkah" (quote (quote omsc::jiharkah))) (list "karjighar" (quote (quote omsc::karjighar))) (list "kijazKarKurd" (quote (quote omsc::kijazkarkurd))) (list "kumoi" (quote (quote omsc::kumoi))) (list "kurd" (quote (quote omsc::kurd))) (list "leadingWhole" (quote (quote omsc::leadingwhole))) (list "locrian" (quote (quote omsc::locrian))) (list "locrianMajor" (quote (quote omsc::locrianmajor))) (list "lydian" (quote (quote omsc::lydian))) (list "lydianMinor" (quote (quote omsc::lydianminor))) (list "mahur" (quote (quote omsc::mahur))) (list "major" (quote (quote omsc::major))) (list "majorPentatonic" (quote (quote omsc::majorpentatonic))) (list "marva" (quote (quote omsc::marva))) (list "melodicMajor" (quote (quote omsc::melodicmajor))) (list "melodicMinor" (quote (quote omsc::melodicminor))) (list "melodicMinorDesc" (quote (quote omsc::melodicminordesc))) (list "minor" (quote (quote omsc::minor))) (list "minorPentatonic" (quote (quote omsc::minorpentatonic))) (list "mixolydian" (quote (quote omsc::mixolydian))) (list "murassah" (quote (quote omsc::murassah))) (list "mustar" (quote (quote omsc::mustar))) (list "nahawand" (quote (quote omsc::nahawand))) (list "nahawandDesc" (quote (quote omsc::nahawanddesc))) (list "nairuz" (quote (quote omsc::nairuz))) (list "nawaAthar" (quote (quote omsc::nawaathar))) (list "neapolitanMajor" (quote (quote omsc::neapolitanmajor))) (list "neapolitanMinor" (quote (quote omsc::neapolitanminor))) (list "nikriz" (quote (quote omsc::nikriz))) (list "partch_o1" (quote (quote omsc::partch_o1))) (list "partch_o2" (quote (quote omsc::partch_o2))) (list "partch_o3" (quote (quote omsc::partch_o3))) (list "partch_o4" (quote (quote omsc::partch_o4))) (list "partch_o5" (quote (quote omsc::partch_o5))) (list "partch_o6" (quote (quote omsc::partch_o6))) (list "partch_u1" (quote (quote omsc::partch_u1))) (list "partch_u2" (quote (quote omsc::partch_u2))) (list "partch_u3" (quote (quote omsc::partch_u3))) (list "partch_u4" (quote (quote omsc::partch_u4))) (list "partch_u5" (quote (quote omsc::partch_u5))) (list "partch_u6" (quote (quote omsc::partch_u6))) (list "pelog" (quote (quote omsc::pelog))) (list "phrygian" (quote (quote omsc::phrygian))) (list "prometheus" (quote (quote omsc::prometheus))) (list "purvi" (quote (quote omsc::purvi))) (list "rast" (quote (quote omsc::rast))) (list "rastDesc" (quote (quote omsc::rastdesc))) (list "ritusen" (quote (quote omsc::ritusen))) (list "romanianMinor" (quote (quote omsc::romanianminor))) (list "saba" (quote (quote omsc::saba))) (list "scriabin" (quote (quote omsc::scriabin))) (list "shang" (quote (quote omsc::shang))) (list "shawqAfza" (quote (quote omsc::shawqafza))) (list "sikah" (quote (quote omsc::sikah))) (list "sikahDesc" (quote (quote omsc::sikahdesc))) (list "spanish" (quote (quote omsc::spanish))) (list "superLocrian" (quote (quote omsc::superlocrian))) (list "suznak" (quote (quote omsc::suznak))) (list "todi" (quote (quote omsc::todi))) (list "ushaqMashri" (quote (quote omsc::ushaqmashri))) (list "whole" (quote (quote omsc::whole))) (list "yakah" (quote (quote omsc::yakah))) (list "yakahDesc" (quote (quote omsc::yakahdesc))) (list "yu" (quote (quote omsc::yu))) (list "zamzam" (quote (quote omsc::zamzam))) (list "zanjaran" (quote (quote omsc::zanjaran))) (list "zhi" (quote (quote omsc::zhi))))))) (om-make-point 572 57) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 300 380) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 127 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUT 2" (quote omsc::out) (quote ((om-load-inputfun (quote input-funbox) "" "BUS" 0) (om-load-inputfun (quote input-funbox) "" "IN" 0))) (om-make-point 224 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY 2" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 216 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 96 95) (om-make-point 35 28) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 3 nil 0) (8 0 5 0 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (1 0 7 1 nil 0) (7 0 8 0 nil 0))) nil 6.120003))
