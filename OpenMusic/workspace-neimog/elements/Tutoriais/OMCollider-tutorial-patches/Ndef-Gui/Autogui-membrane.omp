; OM File Header - Saved 2020/07/10 15:10:41
; (6.120003 :patc (om-make-point 198 445) (om-make-point 632 26) (om-make-point 966 927) "" 183 0 nil "2020/07/10 15:10:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Autogui-membrane" (quote ((let ((box (om-load-boxcall (quote genfun) "HPF_AR" (quote omsc::hpf_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 775 480) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 492 803) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 434 605) (om-make-point 41 30) "test" "\"test\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NDEF" (quote omsc::ndef) (quote ((om-load-inputfun (quote input-funbox) "" "ARG" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 392 648) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 101 25) (quote "Initials values") "" (om-make-point 65 574) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 746 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 861 172) (om-make-point 38 30) "rev" "\"rev\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GVERB" (quote omsc::gverb) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "ROOM" 10) (om-load-inputfun (quote input-funbox) "" "REVTIME" 3) (om-load-inputfun (quote input-funbox) "" "DAMP" 0.5) (om-load-inputfun (quote input-funbox) "" "INPUTBW" 0.5) (om-load-inputfun (quote input-funbox) "" "SPREAD" 15) (om-load-inputfun (quote input-funbox) "" "DRYLEVEL" 0.3) (om-load-inputfun (quote input-funbox) "" "EARLYREF" 0.7) (om-load-inputfun (quote input-funbox) "" "TAILLEVEL" 0.5) (om-load-inputfun (quote input-funbox) "" "MAXROOM" 300) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 814 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 770 200) (om-make-point 41 30) 243 "243" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "Room size (cathedral)") "" (om-make-point 739 125) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 66 609) (om-make-point 272 30) "rate=1.0,tension=0.02,loss=0.999,rev=0.5" "\"rate=1.0,tension=0.02,loss=0.999,rev=0.5\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 71 28) (om-make-point 42 30) "rate" "\"rate\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 457 200) (om-make-point 41 30) "loss" "\"loss\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 378 200) (om-make-point 60 30) "tension" "\"tension\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DUST_KR" (quote omsc::dust_kr) (quote ((om-load-inputfun (quote input-funbox) "" "DENSITY" 4) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 37 77) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 89 29) (quote "excitation") "" (om-make-point 460 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WHITENOISE_AR" (quote omsc::whitenoise_ar) (quote ((om-load-inputfun (quote input-funbox) "" "MUL" 0.8) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 451 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 124 24) (quote "timescales") "" (om-make-point 156 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 182 59) (om-make-point 38 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENV-PERC" (quote omsc::env-perc) (quote ((om-load-inputfun (quote input-funbox) "" "ATTACK" 0.01) (om-load-inputfun (quote input-funbox) "" "RELEASE" 0.5) (om-load-inputfun (quote input-funbox) "" "LEVEL" 0.1) (om-load-inputfun (quote input-funbox) "" "CURVE" -4))) (om-make-point 273 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 380 740) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENVGEN" (quote omsc::envgen) (quote ((om-load-inputfun (quote input-funbox) "" "ENVELOPE" nil) (om-load-inputfun (quote input-funbox) "" "GATE" 0.1) (om-load-inputfun (quote input-funbox) "" "LEVELSCALE" 1) (om-load-inputfun (quote input-funbox) "" "LEVELBIAS" 0) (om-load-inputfun (quote input-funbox) "" "TIMESCALE" 0.1) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 0))) (om-make-point 165 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 144 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MEMBRANE-CIRCLE" (quote omsc::membrane-circle) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "TENSION" 0.01) (om-load-inputfun (quote input-funbox) "" "LOSS" 0.99) (om-load-inputfun (quote input-funbox) "" "MUL" 0.5) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 380 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 601 520) (om-make-point 35 28) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 2" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 630 554) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUT" (quote omsc::out) (quote ((om-load-inputfun (quote input-funbox) "" "BUS" (list (quote omsc::bus))) (om-load-inputfun (quote input-funbox) "" "IN" (list (quote omsc::in))))) (om-make-point 679 599) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (20 0 1 0 nil 0) (10 0 3 0 nil 0) (26 0 3 1 nil 0) (2 0 3 2 nil 0) (23 0 5 0 nil 0) (7 0 5 1 nil 0) (23 0 7 0 nil 0) (8 0 7 1 nil 0) (6 0 7 10 nil 0) (11 0 14 0 nil 0) (3 0 20 0 nil 0) (19 0 21 0 nil 0) (14 0 21 1 nil 0) (18 0 21 4 nil 0) (21 0 22 0 nil 0) (16 0 22 1 nil 0) (22 0 23 0 nil 0) (13 0 23 1 nil 0) (12 0 23 2 nil 0) (24 0 25 0 nil 0) (25 0 26 0 nil 0) (0 0 26 1 nil 0))) nil 6.120003))
