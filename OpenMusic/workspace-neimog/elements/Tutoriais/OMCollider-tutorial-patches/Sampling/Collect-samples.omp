; OM File Header - Saved 2020/07/10 15:10:41
; (6.120003 :patc (om-make-point 199 515) (om-make-point 900 101) (om-make-point 866 832) "" 183 0 nil "2020/07/10 15:10:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Collect-samples" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 606 720) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ONEPOLE_AR" (quote omsc::onepole_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" (list 0)) (om-load-inputfun (quote input-funbox) "" "COEF" (list 0.5)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 449 369) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 86 23) (quote "Autopan") "" (om-make-point 257 465) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 86 23) (quote "Level") "" (om-make-point 706 443) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 720 473) (om-make-point 21 30) 0.5 ".5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFDNOISE3_KR" (quote omsc::lfdnoise3_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 2) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 258 493) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 83 24) (quote "N. elements") "" (om-make-point 232 115) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 86 23) (quote "Position ") "" (om-make-point 723 90) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 736 135) (om-make-point 28 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 248 151) (om-make-point 41 30) 850 "850" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 31) (quote "random samples around the folder.") "" (om-make-point 11 37) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-Y" (quote omsc::mouse-y) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 0.5) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 2) (om-load-inputfun (quote input-funbox) "" "WARP" 0) (om-load-inputfun (quote input-funbox) "" "LAG" 0))) (om-make-point 428 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-X 2" (quote omsc::mouse-x) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 0) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 70) (om-load-inputfun (quote input-funbox) "" "WARP" 0) (om-load-inputfun (quote input-funbox) "" "LAG" 0))) (om-make-point 236 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 161 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 17 80) (om-make-point 125 30) "/pwcs/samples/*" "\"/pwcs/samples/*\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUNDFILE" (quote omsc::soundfile) (quote ((om-load-inputfun (quote input-funbox) "" "FILENAME" nil))) (om-make-point 70 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 614 135) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Loop = 1 (normal playback)") "" (om-make-point 587 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 504 652) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAN2_AR" (quote omsc::pan2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "POS" 0) (om-load-inputfun (quote input-funbox) "" "LEVEL" 0.5))) (om-make-point 455 490) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 62 29) (quote "rate") "" (om-make-point 434 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 430 575) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLAYBUF" (quote omsc::playbuf) (quote ((om-load-inputfun (quote input-funbox) "" "NUMCHANNELS" 1) (om-load-inputfun (quote input-funbox) "" "BUFNUM" "k") (om-load-inputfun (quote input-funbox) "" "RATE" 1) (om-load-inputfun (quote input-funbox) "" "TRIGGER" 1) (om-load-inputfun (quote input-funbox) "" "STARTPOS" 0) (om-load-inputfun (quote input-funbox) "" "LOOP" 1) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 423 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 0 0 0 nil 0) (22 0 1 0 nil 0) (9 0 12 1 nil 0) (15 0 13 0 nil 0) (12 0 13 1 nil 0) (14 0 15 0 nil 0) (21 0 18 0 nil 0) (1 0 19 0 nil 0) (5 0 19 1 nil 0) (4 0 19 2 nil 0) (19 0 21 0 nil 0) (13 0 22 1 nil 0) (11 0 22 2 nil 0) (8 0 22 4 nil 0) (16 0 22 5 nil 0))) nil 6.120003))
