; OM File Header - Saved 2020/05/24 22:46:49
; (6.16 :patc (om-make-point 10 10) (om-make-point 252 82) (om-make-point 1079 715) "" 183 0 nil "2020/05/24 22:46:49")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../resources/pict/image\"" "#P\"../../resources/pict/teste\""))
(in-package :om)(load-lib-for (quote ("OM-Partch" "Pixels")))(setf *om-current-persistent* (om-load-patch1 "05-picture-lib" (quote ((let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list (list 6000 6530) (list 7203 5049))) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "CHORD-N" (list 2)))) (om-make-point 206 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE 4" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 376 375) (om-make-point 60 154) (make-instance (quote picture) :name "teste" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "teste" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 310 292))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 146 520) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE 3" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 12 388) (om-make-point 60 154) (make-instance (quote picture) :name "teste" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "teste" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point -8 -8) (om-make-point 1366 725))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-BITMAP" (quote get-bitmap) (quote ((om-load-inputfun (quote input-funbox) "a picture of pixmap" "PIXMAP" nil) (om-load-inputfun (quote input-funbox) "a threshold value" "SEUIL" nil))) (om-make-point 132 288) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 137 30) (quote "2) OMLOOP") "" (om-make-point 585 141) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 135 30) (quote "1) MAPCAR") "" (om-make-point 43 121) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE 2" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 616 184) (om-make-point 83 88) (make-instance (quote picture) :name "image" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 310 292))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE-LIB 2" (quote picture-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "pict-list" nil))) (om-make-point 703 380) (om-make-point 109 99) (make-instance (quote picture-lib)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 940 575) (om-make-point 150 100))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PICTURE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THRESHOLD-MIN" 0) (om-load-inputfun (quote input-funbox) "no documentation" "THRESHOLD-MAX" 1) (om-load-inputfun (quote input-funbox) "no documentation" "NB-STEPS" 100))) (om-make-point 698 305) (om-make-point 122 59) nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 99 516) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 103 408) (om-make-point 80 80) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (c 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "NB-STEPS" 3 (om-make-point 479 188) "no documentation" "NB-STEPS" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 393 256) (om-make-point 93 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 400 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 374 141) (om-make-point 107 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low val" "FROM" 0) (om-load-inputfun (quote input-funbox) "high val" "TO" 10) (om-load-inputfun (quote input-funbox) "step" "BY" 1))) (om-make-point 243 196) (om-make-point 105 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "THRESHOLD-MAX" 2 (om-make-point 260 51) "no documentation" "THRESHOLD-MAX" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "THRESHOLD-MIN" 1 (om-make-point 127 50) "no documentation" "THRESHOLD-MIN" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-BITMAP" (quote get-bitmap) (quote ((om-load-inputfun (quote input-funbox) "a picture of pixmap" "PIXMAP" nil) (om-load-inputfun (quote input-funbox) "a threshold value" "SEUIL" nil))) (om-make-point 110 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "PICTURE" 0 (om-make-point 5 40) "no documentation" "PICTURE" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 179 607) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 49 610) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (9 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (8 0 5 0 nil 0) (7 0 5 1 nil 0) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (3 0 6 2 nil 0) (10 0 9 0 nil 0) (6 0 9 1 nil 0) (0 1 11 0 nil 0) (0 0 12 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 798 258) (om-make-point 28 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 732 258) (om-make-point 32 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1 2" (quote t) (quote nil) (om-make-point 765 258) (om-make-point 32 30) 0.9 "0.9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 511 62) (quote "Right-click and use the contexual menu of the picture-lib box in order to choose whether or not you wish to save the pixel values in the patch (large pictures may consume time and disk space if stored in the patch).") "" (om-make-point 254 577) nil (om-make-color 0.52046806 0.38441038 0.37212315) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 360 30) (quote "A simple example with GET-BIPMAP threshold variation") "" (om-make-point 47 77) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 195 89) (quote "PICTURE-LIB :$collection of PICTURE objects$$Open the editor and visualize the picture sequence with TAB") "" (om-make-point 496 354) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE-LIB" (quote picture-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "pict-list" nil))) (om-make-point 168 387) (om-make-point 162 107) (make-instance (quote picture-lib)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 766 480) (om-make-point 10 40))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 44) (quote "ARITHM-SER generates a list of threshold values") "" (om-make-point 276 169) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 366 242) (om-make-point 39 30) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 327 223) (om-make-point 32 30) 0.9 "0.9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 291 223) (om-make-point 32 30) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 307 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 260 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 487 51) (quote "PICTURE-LIB :$Generate collections of pictures") "" (om-make-point 90 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 148 159) (om-make-point 46 111) (make-instance (quote picture) :name "teste" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "teste" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 310 292))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (16 1 2 0 nil 0) (2 0 3 0 nil 0) (24 0 4 0 nil 0) (9 0 8 1 nil 0) (7 0 9 0 nil 0) (11 0 9 1 nil 0) (12 0 9 2 nil 0) (10 0 9 3 nil 0) (22 0 16 1 nil 0) (20 0 21 0 nil 0) (19 0 21 1 nil 0) (18 0 21 2 nil 0) (4 0 22 0 nil 0) (21 0 22 1 nil 0))) nil 6.16))
