; OM File Header - Saved 2020/04/27 13:08:16
; (6.16 :patc (om-make-point 140 158) (om-make-point -8 -8) (om-make-point 1366 685) "non documentation" 183 0 nil "2020/04/27 13:08:15")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"C:../../out-files/tes22t.sdif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "07-sdif-write-1" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 119 32) (quote "(eval here)") "" (om-make-point 330 560) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 157 86) (quote "Here is a simplified example of how to write data in an SDIF file using the OM SDIF classes") "" (om-make-point 69 104) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 724 4) (om-make-point 32 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10.0))) (om-make-point 713 36) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-SDIF-FILE 2" (quote save-sdif-file) (quote ((om-load-inputfun (quote input-funbox) "an SDIF-buffer" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "format options" "out" (quote :out) nil nil))) (om-make-point 218 470) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 47) (quote "random time tags... :(") "" (om-make-point 275 119) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIF-BUFFER" (quote sdif-buffer) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of SDIFType" "types" nil) (om-load-inputfun (quote input-funbox) "list of SDIFNVT" "nvts" nil) (om-load-inputfun (quote input-funbox) "list of SDIFStream or SDIFFrame" "lframes" nil))) (om-make-point 143 345) (om-make-point 129 61) (when (find-class (quote sdif-buffer) nil) (make-instance (quote sdif-buffer))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 119 32) (quote "Save in an SDIF file") "" (om-make-point 448 500) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 158 62) (quote "Store the SDIF frames + types declarations in an SDIF buffer") "" (om-make-point 425 395) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 117 32) (quote "Repeat n times") "" (om-make-point 392 312) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 132 32) (quote "Create 1 SDIF frame") "" (om-make-point 474 258) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 147 32) (quote "Create 2 SDIF Matrices") "" (om-make-point 671 122) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 152 32) (quote "Declare 3 new types") "" (om-make-point 46 226) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 200 32) (quote "Write an SDIF File") "" (om-make-point 149 28) nil (om-make-color 0.19215687 0.2627451 0.42352942) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 328 398) (om-make-point 82 28) "tes22t.sdif" "\"tes22t.sdif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 317 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "tes22t.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 192 533) (om-make-point 130 66) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host "C" :name "tes22t" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 845 364) (om-make-point 2386 310) 0 0 (quote t))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10.0))) (om-make-point 315 163.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 60))) (om-make-point 328 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 124 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XMAT") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "par1" "par2" "par3")))) (om-make-point 206 255) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 507 78) (om-make-point 56 30) "XMAT" "\"XMAT\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XNFO") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "Info")))) (om-make-point 128 255) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XNFO" :description (list "Info") :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote f) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XFRA") (om-load-inputfun (quote input-funbox) "description du type" "description" (list (list "XNFO" "InfoMat") (list "XMAT" "datamat"))))) (om-make-point 49 255) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote f) :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 431 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 383 84) (om-make-point 55 30) "XNFO" "\"XNFO\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 444 84) (om-make-point 21 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 1) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :k0) nil nil))) (om-make-point 380 116) (om-make-point 72 60) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XNFO") (setf (lcontrols array) (list (list (quote :k0) 4))) (setf (data array) (list (list 4))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) (list (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t))) (list "All close" (list 0 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SIGNATURE" "XFRA") (om-load-inputfun (quote input-funbox) "no documentation" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "no documentation" "LMATRIX" nil))) (om-make-point 326 232) (om-make-point 138 63) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature "XFRA" :ftime 2.4122358 :streamid 0 :lmatrix (list (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XNFO") (setf (lcontrols array) (list (list (quote :k0) 4))) (setf (data array) (list (list 4))) array)) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 30))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XMAT") (setf (lcontrols array) (list (list (quote :par1) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (quote :par2) (list 0.9045061 1.4727769 0.46533 3.6752262 3.4122296 0.034491778 0.62432504 4.952074 7.708085 1.7610431 2.4030385 0.83585215 5.985428 11.91574 11.723791 1.703867 10.018593 12.23518 14.090768 4.7750735 7.9950504 17.662144 14.339071 15.97019 20.120886 18.39888 13.958963 0.39478207 14.376603 6.5198207)) (list (quote :par3) 5))) (setf (data array) (list (list 0.0 11.494252 22.988505 34.482758 45.97701 57.471264 58.84729 57.369454 55.891625 54.413796 40.344826 21.379309 33.448277 40.493794 36.21793 31.94207 27.666207 23.390345 19.114483 14.83862 17.645768 25.796238 33.94671 39.327588 40.189656 41.051724 41.91379 42.77586 67.24138 100.0) (list 0.29591954 1.6836953 1.4842111 2.124773 0.52530885 4.24868 2.3105152 5.339733 4.642393 5.8455744 5.417776 5.88836 11.200222 4.6814523 2.5321074 5.1012135 0.4277476 16.457222 1.2165732 0.07183313 3.8919032 7.4151125 8.086897 8.2888155 9.224444 0.7404349 25.583447 14.033695 20.816039 19.324326) (list 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5))) array))) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 633 80) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX1" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 30) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par1) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par2) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par3) nil nil))) (om-make-point 485 116) (om-make-point 180 111) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 30))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XMAT") (setf (lcontrols array) (list (list (quote :par1) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (quote :par2) (list 0.8668636 0.54461194 2.0125809 1.5410576 0.635224 0.6627188 2.4088159 5.26025 4.0274797 0.86022377 3.0491448 10.811643 8.23978 8.702852 8.701821 14.719151 0.43561065 10.4552355 10.736277 3.876617 20.686663 15.674155 15.423645 18.41118 4.420307 10.588473 14.590116 1.2838378 22.994072 10.495963)) (list (quote :par3) 5))) (setf (data array) (list (list 0.0 11.494252 22.988505 34.482758 45.97701 57.471264 58.84729 57.369454 55.891625 54.413796 40.344826 21.379309 33.448277 40.493794 36.21793 31.94207 27.666207 23.390345 19.114483 14.83862 17.645768 25.796238 33.94671 39.327588 40.189656 41.051724 41.91379 42.77586 67.24138 100.0) (list 0.29591954 1.6836953 1.4842111 2.124773 0.52530885 4.24868 2.3105152 5.339733 4.642393 5.8455744 5.417776 5.88836 11.200222 4.6814523 2.5321074 5.1012135 0.4277476 16.457222 1.2165732 0.07183313 3.8919032 7.4151125 8.086897 8.2888155 9.224444 0.7404349 25.583447 14.033695 20.816039 19.324326) (list 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 534 9) (om-make-point 172 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list nil 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (6 0 4 0 nil 0) (15 0 4 1 nil 0) (23 0 6 1 nil 0) (18 0 6 3 nil 0) (14 0 15 0 nil 0) (4 0 16 0 nil 0) (28 0 18 0 nil 0) (23 0 19 0 nil 0) (22 0 19 1 nil 0) (20 0 19 2 nil 0) (27 0 24 0 nil 0) (30 0 24 1 nil 0) (25 0 27 2 nil 0) (26 0 27 3 nil 0) (17 0 28 2 nil 0) (24 0 28 4 nil 0) (21 0 30 2 nil 0) (31 0 30 3 nil 0) (3 0 30 4 nil 0) (29 0 30 5 nil 0))) nil 6.16))
