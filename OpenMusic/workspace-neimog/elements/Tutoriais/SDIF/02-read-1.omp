; OM File Header - Saved 2020/04/26 13:03:52
; (6.16 :patc (om-make-point 72 98) (om-make-point 43 77) (om-make-point 762 680) "non documentation" 183 0 nil "2020/04/26 13:03:52")
; End File Header
; External resources 
; (list (list (quote :sdif) "../../in-files/file01.sdif"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "02-read-1" (quote ((om-load-boxcomment "comment" (om-make-point 69 32) (quote "stream ID") "" (om-make-point 582 201) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 558 214) (om-make-point 21 30) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 156 65) (quote "Get a full or partial stream description as an SDIFSTREAM instance") "" (om-make-point 500 305) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "GETSDIFSTREAM" (quote getsdifstream) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number" "SID" 0) (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 532 244) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 222 32) (quote "Using the position in the file...") "" (om-make-point 103 44) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 398 42) (quote "Accessing info and data from SDIF files (II)") "" (om-make-point 104 10) nil (om-make-color 0.19215687 0.2627451 0.42352942) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 233 89) (quote "Access by VALUE :$get one value in matrix j from frame i$(i. e. the value one element for one desciption field in this matrix)") "" (om-make-point 182 463) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 231 98) (quote "Access by ELEMENT :$get one row in matrix j from frame i$(i. e. the values of the different description fields for this element in this matrix)") "" (om-make-point 14 301) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 261 62) (quote "Use these functions if you know exactly which data you want in the file (i.e. its exact position in the file)") "" (om-make-point 305 106) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "file01.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 126 93) (om-make-point 78 72) (let ((newobj (load-sdif-file (search-file-for-load (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "file01" :type "sdif"))))) newobj) "x" nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport palette-mode obj-mode)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 0 0)) nil nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "DECIMALS" "DECIMALS" 6))) (om-make-point 330 316) (om-make-point 87 82) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0)) (quote (1.838241 1.11899 -1.407601 1.501187 -1.806989 1.643844 -0.12954 -3.095587 -0.471561 -2.158832 0.898635 2.669712 1.145227 2.356162 2.76483 0.782424 -0.107131 -2.64834 2.289742 1.399109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport palette-mode obj-mode)) (list nil (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 0 0)) t nil nil nil) (om-load-boxcall (quote genfun) "GETVAL" (quote getval) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FNUM" 0) (om-load-inputfun (quote input-funbox) "no documentation" "MNUM" 0) (om-load-inputfun (quote input-funbox) "no documentation" "RNUM" 0) (om-load-inputfun (quote input-funbox) "no documentation" "CNUM" 0))) (om-make-point 241 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GETCOL" (quote getcol) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FNUM" 0) (om-load-inputfun (quote input-funbox) "no documentation" "MNUM" 0) (om-load-inputfun (quote input-funbox) "no documentation" "CNUM" 3))) (om-make-point 340 242) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GETROW" (quote getrow) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MNUM" 0) (om-load-inputfun (quote input-funbox) "no documentation" "RNUM" 0))) (om-make-point 73 242) nil nil nil nil 1))) (quote ((9 0 3 0 nil 0) (1 0 3 1 nil 0) (12 0 10 2 nil 0) (9 0 11 0 nil 0) (9 0 12 0 nil 0) (9 0 13 0 nil 0))) nil 6.0501))
