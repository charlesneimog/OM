; OM File Header - Saved 2020/05/27 22:39:11
; (6.16 :patc (om-make-point 121 221) (om-make-point -8 -8) (om-make-point 1366 725) "" 183 0 nil "2020/05/27 22:39:09")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../in-files/africa.aiff\""))
(in-package :om)(load-lib-for (quote ("OMPrisma" "OMChroma")))(setf *om-current-persistent* (om-load-patch1 "6-omchroma-omprisma-merging" (quote ((let ((box (om-load-editor-box1 "VIMIC.DISCRETE" (quote vimic.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 737 325) (om-make-point 138 73) (let ((rep (if (find-class (quote vimic.discrete) nil) (let ((rep (make-instance (quote vimic.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) nil)) (when (member (quote gain) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) 0)) (when (member (quote ypos) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote yaw) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote yaw)) 0)) (when (member (quote directivity-fun) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote directivity-fun)) 0)) (when (member (quote mic-params) (get-init-slots-of-class (quote vimic.discrete)) :key (quote car)) (setf (slot-value rep (quote mic-params)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 0) (list nil) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 0) (list 1) (list 0) (list 0) (list 1) (list 0) (list 0) (list 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t)) (list 15 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil) (list 15 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)))))) (om-make-point 586 453) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SMPL-1" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) (list (quote infile) "santuri_96.aif" (quote :subdirs) (list (quote list) "Snd")) nil))) (om-make-point 68 160) (om-make-point 82 64) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2 2" (om-make-point 158 28) (quote "specify loudspeaker setup") "" (om-make-point 656 477) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DBAP.DISCRETE" (quote dbap.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 600 240) (om-make-point 127 84) (let ((rep (if (find-class (quote dbap.discrete) nil) (let ((rep (make-instance (quote dbap.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) nil)) (when (member (quote gain) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) 0)) (when (member (quote ypos) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote blur) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote blur)) 0)) (when (member (quote speaker-weights) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote speaker-weights)) 0)) (when (member (quote mode) (get-init-slots-of-class (quote dbap.discrete)) :key (quote car)) (setf (slot-value rep (quote mode)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 0) (list nil) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 0) (list 1) (list 0) (list 0) (list 1) (list 0) (list 0) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BABO.DISCRETE" (quote babo.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 460 240) (om-make-point 122 86) (let ((rep (if (find-class (quote babo.discrete) nil) (let ((rep (make-instance (quote babo.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) nil)) (when (member (quote gain) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) 0)) (when (member (quote ypos) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote reso-params) (get-init-slots-of-class (quote babo.discrete)) :key (quote car)) (setf (slot-value rep (quote reso-params)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 0) (list nil) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 0) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RVBAP.DISCRETE" (quote rvbap.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 740 240) (om-make-point 134 82) (let ((rep (if (find-class (quote rvbap.discrete) nil) (let ((rep (make-instance (quote rvbap.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) nil)) (when (member (quote gain) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) 0)) (when (member (quote ypos) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote spread)) 0)) (when (member (quote reverb-params) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote reverb-params)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 0) (list nil) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 0) (list 1) (list 0) (list 0) (list 1) (list 0) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VBAP.DISCRETE" (quote vbap.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 740 160) (om-make-point 124 79) (let ((rep (if (find-class (quote vbap.discrete) nil) (let ((rep (make-instance (quote vbap.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) nil)) (when (member (quote gain) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) 0)) (when (member (quote ypos) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 0)) (when (member (quote air-fun) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote spread)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 0) (list nil) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 0) (list 0) (list 0) (list 0) (list 1) (list 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AMBI.DISCRETE" (quote ambi.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 600 160) (om-make-point 129 78) (let ((rep (if (find-class (quote ambi.discrete) nil) (let ((rep (make-instance (quote ambi.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) nil)) (when (member (quote gain) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) 0)) (when (member (quote ypos) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote order) (get-init-slots-of-class (quote ambi.discrete)) :key (quote car)) (setf (slot-value rep (quote order)) 3)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 0) (list nil) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 0) (list 1) (list 0) (list 0) (list 1) (list 3))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PAN.DISCRETE" (quote pan.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 460 160) (om-make-point 119 79) (let ((rep (if (find-class (quote pan.discrete) nil) (let ((rep (make-instance (quote pan.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) nil)) (when (member (quote gain) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) 0)) (when (member (quote ypos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote pan-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote pan-fun)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 0) (list nil) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 0) (list 1) (list 0) (list 0) (list 1) (list 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHROMA-PRISMA" (quote chroma-prisma) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SYNTH" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SPAT" nil))) (om-make-point 324 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 160 160) (om-make-point 72 69) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment13" (om-make-point 695 42) (quote "Merging OMchroma- and OMPrisma-Classes into classes for Spatial-Sound-Synthesis") "" (om-make-point 95 12) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 18 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 173 58) (quote "connect one of the spatialization classes to the right input of 'chroma-spat'") "" (om-make-point 425 355) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 216 45) (quote "$Spatialization-Classes (OMPrisma)") "" (om-make-point 560 100) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 173 58) (quote "connect one of the synthesis classes to the left input of 'chroma-spat'") "" (om-make-point 158 359) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 196 45) (quote "$Synthesis-Classes (OMchroma)") "" (om-make-point 160 100) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BUZZ-1" (quote buzz-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 240 160) (om-make-point 80 72) (let ((rep (if (find-class (quote buzz-1) nil) (let ((rep (make-instance (quote buzz-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote aenv) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote bzl) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzl)) 1)) (when (member (quote bzh) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzh)) 1.0)) (when (member (quote bzm) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzm)) 0.95)) (when (member (quote bzmenv) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzmenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 1) (list 1.0) (list 0.95) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PLUCK-1" (quote pluck-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 200 240) (om-make-point 70 70) (let ((rep (if (find-class (quote pluck-1) nil) (let ((rep (make-instance (quote pluck-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 0.8))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FOF-1" (quote fof-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 120 240) (om-make-point 69 69) (let ((rep (if (find-class (quote fof-1) nil) (let ((rep (make-instance (quote fof-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 609)) (when (member (quote bw) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 77)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 80.0 3600.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list 609) (list 77) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 80.0 3600.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 313 609) (om-make-point 249 73) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 78 168) (om-make-point 660 539) 0 1000 nil 1 (quote :multiplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :globals :patch :sound :duration)" "Keyword input" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 347 543) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 421 462) (om-make-point 167 30) "Chroma-Prisma-example" "\"Chroma-Prisma-example\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 76 94) (om-make-point 80 60) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :multiplayer) 1 nil 1000 0 (om-make-point 715 283) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((23 0 2 4 nil 0) (21 0 20 0 nil 0) (10 0 21 0 nil 0) (22 0 21 1 nil 0) (1 0 21 2 nil 0))) nil 6.16))
