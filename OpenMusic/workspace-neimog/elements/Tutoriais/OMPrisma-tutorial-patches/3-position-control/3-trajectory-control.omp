; OM File Header - Saved 2020/05/27 14:48:37
; (6.100008 :patc (om-make-point 91 91) (om-make-point 233 166) (om-make-point 858 708) "" 183 0 nil "2020/05/27 14:48:36")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../../Research/OMPrisma/OMPrisma/resources/sounds/africa.aiff\""))
(in-package :om)(load-lib-for (quote ("OMPrisma" "OMChroma")))(setf *om-current-persistent* (om-load-patch1 "3-trajectory-control" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 184 282) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)) (list "Kubus-insonic.14" (quote *prisma-lsconfig_kubus-insonic-14_2d*)))))) (om-make-point 192 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment14 2" (om-make-point 198 42) (quote "use the function 'get-full-trajectory' $to visualize the 'sampled' trajectory") "" (om-make-point 482 299) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-TRAJECTORY 2" (quote 3d-trajectory) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" nil) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" nil) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" nil) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0) (om-load-inputfun (quote input-funbox) "time for each point (list)" "times" nil) (om-load-inputfun (quote input-funbox) "optional computation of actual trajectory points" "sample-params" nil) (om-load-inputfunmenu1 (quote input-funmenu) "optional autmatic time comptation mode" "interpol-mode" (quote points) (list (list "points (constant time)" (quote (quote points))) (list "distance (constant speed)" (quote (quote dist))))))) (om-make-point 439 378) (om-make-point 64 60) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 2.375 2.75 3.125 3.5 3.875 4.25 4.625 5.0 4.625 4.25 3.875 3.5 3.125 2.75 2.375 2.0 1.375 0.75 0.125 -0.5 -1.125 -1.75 -2.375 -3.0 -3.0 -3.0 -3.0 -3.0 -3.0 -3.0 -3.0 -2.85714 -2.71429 -2.57143 -2.42857 -2.28571 -2.14286 -2.0)) (quote (-2.0 -1.625 -1.25 -0.875 -0.5 -0.125 0.25 0.625 1.0 1.375 1.75 2.125 2.5 2.875 3.25 3.625 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 3.42857 2.85714 2.28571 1.71429 1.14286 0.57143 0.0 -0.14286 -0.28571 -0.42857 -0.57143 -0.71429 -0.85714 -1.0)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.70000005 0.8 0.90000004 1.0 1.1 1.2 1.3000001 1.4000001 1.5000001 1.6 1.7 1.8000001 1.9000001 2.0 2.1 2.1999998 2.2999997 2.4 2.5 2.6 2.6999998 2.7999997 2.8999996 2.9999996 3.2 3.3 3.3999999 3.4999998 3.5999997 3.6999996 3.7999995 4.0)) (quote 3d-trajectory) 5 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.70000005 0.8 0.90000004 1.0 1.1 1.2 1.3000001 1.4000001 1.5000001 1.6 1.7 1.8000001 1.9000001 2.0 2.1 2.1999998 2.2999997 2.4 2.5 2.6 2.6999998 2.7999997 2.8999996 2.9999996 3.2 3.3 3.3999999 3.4999998 3.5999997 3.6999996 3.7999995 4.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) nil nil (pairlis (quote (picture mode winpos winsize)) (list nil 0 (om-make-point 600 200) (om-make-point 800 800))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-FULL-TRAJECTORY" (quote get-full-trajectory) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 394 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VBAP.TRAJECTORY" (quote vbap.trajectory) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "pos-env" (quote :pos-env) (list (quote traject-from-list) (list (quote list) 0) (list (quote list) 0) (list (quote list) 0) (list (quote list) 0) (quote (quote 3d-trajectory))) nil) (om-load-inputkeyword (quote editor-keyword) "" "atten-fun" (quote :atten-fun) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "air-fun" (quote :air-fun) 0 nil))) (om-make-point 59 319) (om-make-point 157 77) (let ((rep (if (find-class (quote vbap.trajectory) nil) (let ((rep (make-instance (quote vbap.trajectory) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote soundfile)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote gain) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote pos-env) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote pos-env)) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 2.0 -3.0 -3.0 -2.0)) (quote (-2.0 1.0 4.0 4.0 0.0 -1.0)) (quote (0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil nil 4.0)) (quote 3d-trajectory) 5 (quote 0.1) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) 0.1) (setf (times newobj) (list 0.0 nil nil nil nil 4.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0))) newobj))) (when (member (quote atten-fun) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 2)) (when (member (quote air-fun) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 2)) (when (member (quote time-fun) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread-env) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote spread-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 5.2302947) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 2.0 -3.0 -3.0 -2.0)) (quote (-2.0 1.0 4.0 4.0 0.0 -1.0)) (quote (0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil nil 4.0)) (quote 3d-trajectory) 5 (quote 0.1) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) 0.1) (setf (times newobj) (list 0.0 nil nil nil nil 4.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0))) newobj)) (list 2) (list 2) (list 0) (list 1) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "group 1" (list 0 nil) (list 1 nil) (list 2 (quote t)) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 (quote t)) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil)) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 538 449) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-TRAJECTORY" (quote 3d-trajectory) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" nil) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" nil) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" nil) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0) (om-load-inputfun (quote input-funbox) "time for each point (list)" "times" nil) (om-load-inputfun (quote input-funbox) "optional computation of actual trajectory points" "sample-params" nil) (om-load-inputfunmenu1 (quote input-funmenu) "optional autmatic time comptation mode" "interpol-mode" (quote points) (list (list "points (constant time)" (quote (quote points))) (list "distance (constant speed)" (quote (quote dist))))))) (om-make-point 280 154) (om-make-point 116 83) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 2.0 -3.0 -3.0 -2.0)) (quote (-2.0 1.0 4.0 4.0 0.0 -1.0)) (quote (0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil nil 4.0)) (quote 3d-trajectory) 5 (quote 0.1) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) 0.1) (setf (times newobj) (list 0.0 nil nil nil nil 4.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) "x" nil (pairlis (quote (room-size show-room show-axes bg-color color-max color-min color-mode line-width picture mode winpos winsize)) (list 2 1 1 nil (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0 1.0 nil 0 (om-make-point 600 74) (om-make-point 800 800))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 66 568) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :multiplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 91 420) (om-make-point 151 30) "OMprisma-trajectories" "\"OMprisma-trajectories\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :globals :patch :sound :duration)" "Keyword input" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 58 489) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 47 198) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment14" (om-make-point 80 28) (quote "3D-trajectory") "" (om-make-point 294 121) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment13" (om-make-point 259 42) (quote "Position-control (3D-trajectory)") "" (om-make-point 67 7) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 18 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment12112" (om-make-point 380 70) (quote "'3D-trajectory' offers two modes of interpreting a spatial morphology: $a) points: equal time of travel between points$b) distance: constant speed of travel along the trajectory$...see doc for further information") "" (om-make-point 413 161) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 353 28) (quote "spatial trajectories can be specified via the 3D-trajectroy-object:") "" (om-make-point 67 50) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (6 0 4 0 nil 0) (10 0 5 4 nil 0) (6 0 5 5 nil 0) (0 0 5 6 nil 0) (0 0 5 7 nil 0) (9 0 7 0 nil 0) (5 0 9 0 nil 0) (8 0 9 1 nil 0) (1 0 9 2 nil 0))) nil 6.100008))
