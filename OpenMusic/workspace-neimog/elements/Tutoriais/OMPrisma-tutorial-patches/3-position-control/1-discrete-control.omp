; OM File Header - Saved 2020/05/27 22:39:11
; (6.16 :patc (om-make-point 91 91) (om-make-point -8 -8) (om-make-point 1366 725) "" 183 0 nil "2020/05/27 22:39:11")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../in-files/africa.aiff\""))
(in-package :om)(load-lib-for (quote ("OMPrisma" "OMChroma")))(setf *om-current-persistent* (om-load-patch1 "1-discrete-control" (quote ((let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1 0)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 5))) (om-make-point 193 238) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0)) (quote (0.0 1.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)) (list "Kubus-insonic.14" (quote *prisma-lsconfig_kubus-insonic-14_2d*)))))) (om-make-point 431 463) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-TRAJECTORY" (quote 3d-trajectory) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" nil) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" nil) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" nil) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0) (om-load-inputfun (quote input-funbox) "time for each point (list)" "times" nil) (om-load-inputfun (quote input-funbox) "optional computation of actual trajectory points" "sample-params" nil) (om-load-inputfunmenu1 (quote input-funmenu) "optional autmatic time comptation mode" "interpol-mode" (quote points) (list (list "points (constant time)" (quote (quote points))) (list "distance (constant speed)" (quote (quote dist))))))) (om-make-point 782 271) (om-make-point 80 60) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0 -3 -3 -4 -2 1 3 4)) (quote (6 4 1 0 -3 -2 -5 -5)) (quote (1 0 0 -2 -1 0 2 0)) (quote (nil nil nil nil nil nil nil nil)) (quote 3d-trajectory) 0 (quote nil) (quote nil)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) nil) (setf (sample-params newobj) nil) (setf (times newobj) (list nil nil nil nil nil nil nil nil)) (setf (z-points newobj) (list 1 0 0 -2 -1 0 2 0))) newobj) "x" nil (pairlis (quote (winsize winpos mode picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PAN.DISCRETE" (quote pan.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "gain-env" (quote :gain-env) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) nil) (om-load-inputkeyword (quote editor-keyword) "" "xpos" (quote :xpos) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "ypos" (quote :ypos) 0 nil))) (om-make-point 73 325) (om-make-point 182 97) (let ((rep (if (find-class (quote pan.discrete) nil) (let ((rep (make-instance (quote pan.discrete) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5))) (when (member (quote durs) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote gain) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0)) (quote (0.0 1.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) 0)) (when (member (quote ypos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote pan-fun) (get-init-slots-of-class (quote pan.discrete)) :key (quote car)) (setf (slot-value rep (quote pan-fun)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4) (list 5.2302947 5.2302947 5.2302947 5.2302947 5.2302947) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0 0 0 0 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0)) (quote (0.0 1.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0)) (quote (0.0 1.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0)) (quote (0.0 1.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0)) (quote (0.0 1.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0)) (quote (0.0 1.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0 0 0 0 0) (list 0 0 0 0 0) (list 0 0 0 0 0) (list 0 0 0 0 0) (list 1 1 1 1 1) (list 0 0 0 0 0) (list 0 0 0 0 0) (list 1 1 1 1 1) (list 0 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "group 1" (list 0 nil) (list 1 nil) (list 2 (quote t)) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 (quote t)) (list 7 (quote t)) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil)) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 529 314) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "Z-POINTS" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "DECIMALS" 0))) (om-make-point 655 241) (om-make-point 50 61) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0 -3 -3 -4 -2 1 3 4)) (quote (6 4 1 0 -3 -2 -5 -5)) (quote (1 0 0 -2 -1 0 2 0)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 1 0 0 -2 -1 0 2 0))) newobj) "x" nil (pairlis (quote (picture mode winpos winsize)) (list nil 0 (om-make-point 600 200) (om-make-point 800 800))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 602 242) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 -3.0 -3.0 -4.0 -2.0 1.0 3.0 4.0)) (quote (3.0 4.0 1.0 -2.0 -4.0 -2.0 -5.0 -5.0)) (quote bpc) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 682 542))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 114 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 101 214) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment12111 2" (om-make-point 126 42) (quote "4. via 3D-Trajectories$(using the x/y points)") "" (om-make-point 771 230) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 392 142) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 343 142) (om-make-point 26 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 235 566) (om-make-point 237 82) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 768 335) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 328 425) (om-make-point 186 30) "OMprisma-positions-discrete" "\"OMprisma-positions-discrete\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :globals :patch :sound :duration)" "Keyword input" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 284 500) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 163 184) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment13" (om-make-point 259 42) (quote "Position-control (discrete)") "" (om-make-point 63 8) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 18 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment12111" (om-make-point 122 42) (quote "3. via BPCs/3DCs $(using the x/y points)") "" (om-make-point 593 199) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment121" (om-make-point 239 28) (quote "2. via BPFs (for each cartesian dimension)") "" (om-make-point 478 137) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment12" (om-make-point 111 51) (quote "1. via a number for each cartesian dimension") "" (om-make-point 341 87) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 250 28) (quote "spatial positions can be specified as follows:") "" (om-make-point 64 56) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -1 1)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 5))) (om-make-point 482 162) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0)) (quote (-1.0 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 3 1 nil 0) (6 0 3 4 nil 0) (14 0 3 5 nil 0) (0 0 3 6 nil 0) (7 0 6 1 nil 0) (13 0 11 0 nil 0) (3 0 13 0 nil 0) (12 0 13 1 nil 0) (1 0 13 2 nil 0))) nil 6.16))
