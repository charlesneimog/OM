; OM File Header - Saved 2020/05/27 14:48:36
; (6.100008 :patc (om-make-point 88 390) (om-make-point 15 23) (om-make-point 1425 788) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../Research/OMPrisma/OMPrisma/resources/sounds/africa.aiff\""))
(in-package :om)(load-lib-for (quote ("OMPrisma" "OMChroma")))(setf *om-current-persistent* (om-load-patch1 "rvbap" (quote ((let ((box (om-load-boxout "output 3" 2 (om-make-point 990 425) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "rvbap.trajectory" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 554 424) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "rvbap.continuous" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 197 426) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "rvbap.discrete" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)))) (om-load-inputfun (quote input-funbox) "" "OSC" (quote t)))) (om-make-point 1111 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)))) (om-load-inputfun (quote input-funbox) "" "OSC" (quote t)))) (om-make-point 646 488) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)))) (om-load-inputfun (quote input-funbox) "" "OSC" (quote t)))) (om-make-point 276 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RVBAP-REVERB 3" (quote rvbap-reverb) (quote ((om-load-inputfun (quote input-funbox) "GEN-table-id" "ID" "?") (om-load-inputfun (quote input-funbox) "level of reverb in db" "LEVEL" -6) (om-load-inputfun (quote input-funbox) "spatial spread of loval reverb in percent" "SPREAD" 30) (om-load-inputfun (quote input-funbox) "feedback factor (linear)" "FEEDBACKFACTOR" 1) (om-load-inputfun (quote input-funbox) "factor for cutoff-frequency (linear)" "CUTOFF-FACTOR" 1) (om-load-inputfun (quote input-funbox) "pitchmodulation-factor (linear)" "PITCHMOD-FACTOR" 1))) (om-make-point 1213 477) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RVBAP-REVERB 3" (quote rvbap-reverb) (quote ((om-load-inputfun (quote input-funbox) "GEN-table-id" "ID" "?") (om-load-inputfun (quote input-funbox) "level of reverb in db" "LEVEL" -6) (om-load-inputfun (quote input-funbox) "spatial spread of loval reverb in percent" "SPREAD" 30) (om-load-inputfun (quote input-funbox) "feedback factor (linear)" "FEEDBACKFACTOR" 1) (om-load-inputfun (quote input-funbox) "factor for cutoff-frequency (linear)" "CUTOFF-FACTOR" 1) (om-load-inputfun (quote input-funbox) "pitchmodulation-factor (linear)" "PITCHMOD-FACTOR" 1))) (om-make-point 760 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-TRAJECTORY 2" (quote 3d-trajectory) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" nil) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" nil) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" nil) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0) (om-load-inputfun (quote input-funbox) "time for each point (list)" "times" nil) (om-load-inputfun (quote input-funbox) "optional computation of actual trajectory points" "sample-params" nil) (om-load-inputfunmenu1 (quote input-funmenu) "optional autmatic time comptation mode" "interpol-mode" (quote points) (list (list "points (constant time)" (quote (quote points))) (list "distance (constant speed)" (quote (quote dist))))))) (om-make-point 1070 199) (om-make-point 64 80) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 3.0 -3.0 -5.0)) (quote (-3.0 2.0 4.0 2.0 -2.0)) (quote (0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil 5.0)) (quote 3d-trajectory) 5 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.0 nil nil nil 5.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0))) newobj) "x" nil (pairlis (quote (winsize winpos mode picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2 7" (om-make-point 112 22) (quote "local room-parameters") "" (om-make-point 750 194) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 10 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2 6" (om-make-point 119 22) (quote "global room-parameters") "" (om-make-point 1243 409) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 10 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment5" (om-make-point 249 42) (quote "Reverberated VBAP (RVBAP)") "" (om-make-point 531 11) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 18 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2 3" (om-make-point 60 32) (quote "discrete") "" (om-make-point 227 119) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2 2" (om-make-point 79 32) (quote "continuous") "" (om-make-point 624 120) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 69 32) (quote "trajectory") "" (om-make-point 1035 125) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 823 218) (om-make-point 28 30) 85 "85" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 743 218) (om-make-point 28 30) 45 "45" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 784 218) (om-make-point 28 30) 35 "35" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1150 304) (om-make-point 35 30) 455 "455" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1310 445) (om-make-point 28 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1282 439) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1234 433) (om-make-point 28 30) 85 "85" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 952 219) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 963 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 953 611) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 435 0) (om-make-point 646 282) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RVBAP.TRAJECTORY" (quote rvbap.trajectory) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "pos-env" (quote :pos-env) (list (quote traject-from-list) (list (quote list) 0) (list (quote list) 0) (list (quote list) 0) (list (quote list) 0) (quote (quote 3d-trajectory))) nil) (om-load-inputkeyword (quote editor-keyword) "" "reverb-params" (quote :reverb-params) 1 nil))) (om-make-point 961 339) (om-make-point 151 77) (let ((rep (if (find-class (quote rvbap.trajectory) nil) (let ((rep (make-instance (quote rvbap.trajectory) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote soundfile)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote gain) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote pos-env) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote pos-env)) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 3.0 -3.0 -5.0)) (quote (-3.0 2.0 4.0 2.0 -2.0)) (quote (0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil 5.0)) (quote 3d-trajectory) 5 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.0 nil nil nil 5.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0))) newobj))) (when (member (quote atten-fun) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread-env) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote spread-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote reverb-params) (get-init-slots-of-class (quote rvbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote reverb-params)) 455)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 5.2302947) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 3.0 -3.0 -5.0)) (quote (-3.0 2.0 4.0 2.0 -2.0)) (quote (0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil 5.0)) (quote 3d-trajectory) 5 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.0 nil nil nil 5.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0))) newobj)) (list 1) (list 0) (list 0) (list 1) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 455))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 737 889) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 699 289) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 524 597) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 435 23) (om-make-point 646 282) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 542 222) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -3 3)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 5))) (om-make-point 677 215) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0)) (quote (-3.0 3.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1082 712) (om-make-point 10 23) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 526 519) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RVBAP.CONTINUOUS" (quote rvbap.continuous) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "xpos-env" (quote :xpos-env) (list (quote make-cs-table) (quote (quote gen-07)) (list (quote list) 0 512) (list (quote list) 0 0) 5 "?" 513) nil) (om-load-inputkeyword (quote editor-keyword) "" "atten-fun" (quote :atten-fun) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "reverb-params" (quote :reverb-params) 1 nil))) (om-make-point 521 327) (om-make-point 243 84) (let ((rep (if (find-class (quote rvbap.continuous) nil) (let ((rep (make-instance (quote rvbap.continuous) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote soundfile)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote gain) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos-env) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote xpos-env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0)) (quote (-3.0 3.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote ypos-env) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote ypos-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote zpos-env) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote zpos-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote xpos-freqenv) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote xpos-freqenv)) 0)) (when (member (quote ypos-freqenv) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote ypos-freqenv)) 0)) (when (member (quote zpos-freqenv) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote zpos-freqenv)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 2)) (when (member (quote air-fun) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread-env) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote spread-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote spread-freqenv) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote spread-freqenv)) 0)) (when (member (quote reverb-params) (get-init-slots-of-class (quote rvbap.continuous)) :key (quote car)) (setf (slot-value rep (quote reverb-params)) (if (find-class (quote gen-cs-table) nil) (make-instance (quote gen-cs-table) :id "?" :size 512 :stime 0 :gen-num -2 :param-list (list 35 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6) :from-file t)))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 5.2302947) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0)) (quote (-3.0 3.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 2) (list 0) (list 0) (list 1) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list (if (find-class (quote gen-cs-table) nil) (make-instance (quote gen-cs-table) :id "?" :size 512 :stime 0 :gen-num -2 :param-list (list 35 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6 0.5011872 0.59999997 7000 0.6) :from-file t))))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t)) (list 15 (quote t)) (list 16 (quote t)) (list 17 (quote t)) (list 18 (quote t)) (list 19 (quote t)) (list 20 (quote t)) (list 21 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil) (list 15 nil) (list 16 nil) (list 17 nil) (list 18 nil) (list 19 nil) (list 20 nil) (list 21 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RVBAP.DISCRETE" (quote rvbap.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "xpos" (quote :xpos) 0 nil))) (om-make-point 152 323) (om-make-point 166 91) (let ((rep (if (find-class (quote rvbap.discrete) nil) (let ((rep (make-instance (quote rvbap.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote gain) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) -5)) (when (member (quote ypos) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote spread)) 0)) (when (member (quote reverb-params) (get-init-slots-of-class (quote rvbap.discrete)) :key (quote car)) (setf (slot-value rep (quote reverb-params)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 5.2302947) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list -5) (list 0) (list 0) (list 1) (list 0) (list 0) (list 1) (list 0) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "group 1" (list 0 nil) (list 1 nil) (list 2 (quote t)) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 (quote t)) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil)) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 285 264) (om-make-point 26 30) -5 "-5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 173 219) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE 3" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 154 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 139 579) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 435 0) (om-make-point 646 282) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((25 0 0 0 nil 0) (31 0 1 0 nil 0) (32 0 2 0 nil 0) (18 0 6 0 nil 0) (21 0 6 1 nil 0) (20 0 6 2 nil 0) (19 0 6 3 nil 0) (16 0 7 1 nil 0) (17 0 7 2 nil 0) (15 0 7 3 nil 0) (25 0 23 0 nil 0) (3 0 23 1 nil 0) (6 0 23 2 nil 0) (23 0 24 0 nil 0) (22 0 25 4 nil 0) (8 0 25 5 nil 0) (18 0 25 6 nil 0) (30 0 27 0 nil 0) (31 0 30 0 nil 0) (4 0 30 1 nil 0) (28 0 31 4 nil 0) (29 0 31 5 nil 0) (26 0 31 6 nil 0) (7 0 31 7 nil 0) (34 0 32 4 nil 0) (33 0 32 5 nil 0) (32 0 35 0 nil 0) (5 0 35 1 nil 0) (35 0 36 0 nil 0))) nil 6.100008))
