; OM File Header - Saved 2020/05/27 22:39:05
; (6.100008 :patc (om-make-point 184 351) (om-make-point -8 -8) (om-make-point 1366 725) "" 183 0 nil "2020/05/27 22:39:05")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../Research/OMPrisma/OMPrisma/resources/sounds/africa.aiff\""))
(in-package :om)(load-lib-for (quote ("OMPrisma" "OMChroma")))(setf *om-current-persistent* (om-load-patch1 "vbap" (quote ((let ((box (om-load-boxcomment "comment2 5" (om-make-point 224 56) (quote "* Pulkki, Ville. \"Virtual sound source positioning using vector base amplitude panning.\" Journal of the Audio Engineering Society 45.6 (1997): 456-466.") "" (om-make-point 104 646) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Helvetica" 10.0 :family "Helvetica" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)))))) (om-make-point 1066 399) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)))))) (om-make-point 643 402) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 945 381) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "vbap.trajectory" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 552 386) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "vbap.continuous" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRISMA-SETUP" (quote prisma-setup) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "SETUP-DATA" (list (list -0.5 0.8660254) (list 0.5 0.8660254)) (list (list "stereo" (quote *prisma-lsconfig-stereo*)) (list "3.0" (quote *prisma-lsconfig-3.0*)) (list "quad" (quote *prisma-lsconfig-quad*)) (list "5.0" (quote *prisma-lsconfig-5.0*)) (list "hexagon.1" (quote *prisma-lsconfig-hexa1*)) (list "hexagon.2" (quote *prisma-lsconfig-hexa2*)) (list "7.0" (quote *prisma-lsconfig-7.0*)) (list "octagon.1" (quote *prisma-lsconfig-octo1*)) (list "octagon.2" (quote *prisma-lsconfig-octo2*)) (list "cube.1" (quote *prisma-lsconfig-cube*)))))) (om-make-point 264 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 160 382) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "vbap.discrete" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-TRAJECTORY 2" (quote 3d-trajectory) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" nil) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" nil) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" nil) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0) (om-load-inputfun (quote input-funbox) "time for each point (list)" "times" nil) (om-load-inputfun (quote input-funbox) "optional computation of actual trajectory points" "sample-params" nil) (om-load-inputfunmenu1 (quote input-funmenu) "optional autmatic time comptation mode" "interpol-mode" (quote points) (list (list "points (constant time)" (quote (quote points))) (list "distance (constant speed)" (quote (quote dist))))))) (om-make-point 1037 169) (om-make-point 64 80) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 3.0 -3.0 -5.0)) (quote (-3.0 2.0 4.0 2.0 -2.0)) (quote (0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil 5.0)) (quote 3d-trajectory) 5 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.0 nil nil nil 5.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0))) newobj) "x" nil (pairlis (quote (winsize winpos mode picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2 4" (om-make-point 160 44) (quote "====> create second inlet$to prisma-setup ('option'+ '->') $to sync the MultiPlayer") "" (om-make-point 718 414) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 10 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment5" (om-make-point 341 44) (quote "Vector-base Amplitude Panning (VBAP)*") "" (om-make-point 471 12) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 18 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2 3" (om-make-point 69 32) (quote "trajectory") "" (om-make-point 1002 128) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2 2" (om-make-point 79 32) (quote "continuous") "" (om-make-point 591 123) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 60 32) (quote "discrete") "" (om-make-point 194 122) nil (om-make-color 0.02832079 0.0 1.0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 256 230) (om-make-point 26 30) -2 "-2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 154 177) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE 3" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 130 462) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 132 542) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 646 282) (om-make-point 435 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VBAP.DISCRETE" (quote vbap.discrete) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "xpos" (quote :xpos) 0 nil))) (om-make-point 129 282) (om-make-point 159 84) (let ((rep (if (find-class (quote vbap.discrete) nil) (let ((rep (make-instance (quote vbap.discrete) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote soundfile)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote gain) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote xpos)) -2)) (when (member (quote ypos) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote ypos)) 0)) (when (member (quote zpos) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote zpos)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread) (get-init-slots-of-class (quote vbap.discrete)) :key (quote car)) (setf (slot-value rep (quote spread)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 5.2302947) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list -2) (list 0) (list 0) (list 1) (list 0) (list 0) (list 1) (list 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "group 1" (list 0 nil) (list 1 nil) (list 2 (quote t)) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 (quote t)) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil)) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 916 174) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 910 480) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 908 560) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 646 282) (om-make-point 435 0) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VBAP.TRAJECTORY" (quote vbap.trajectory) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "pos-env" (quote :pos-env) (list (quote traject-from-list) (list (quote list) 0) (list (quote list) 0) (list (quote list) 0) (list (quote list) 0) (quote (quote 3d-trajectory))) nil))) (om-make-point 910 280) (om-make-point 152 82) (let ((rep (if (find-class (quote vbap.trajectory) nil) (let ((rep (make-instance (quote vbap.trajectory) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote soundfile)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote gain) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote pos-env) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote pos-env)) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 3.0 -3.0 -5.0)) (quote (-3.0 2.0 4.0 2.0 -2.0)) (quote (0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil 5.0)) (quote 3d-trajectory) 5 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.0 nil nil nil 5.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0))) newobj))) (when (member (quote atten-fun) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 1)) (when (member (quote air-fun) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 0)) (when (member (quote time-fun) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread-env) (get-init-slots-of-class (quote vbap.trajectory)) :key (quote car)) (setf (slot-value rep (quote spread-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 5.2302947) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.0 5.0 3.0 -3.0 -5.0)) (quote (-3.0 2.0 4.0 2.0 -2.0)) (quote (0.0 0.0 0.0 0.0 0.0)) (quote (0.0 nil nil nil 5.0)) (quote 3d-trajectory) 5 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.0 nil nil nil 5.0)) (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0))) newobj)) (list 1) (list 0) (list 0) (list 1) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 414 987) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 712 253) (om-make-point 21 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 519 554) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 646 282) (om-make-point 435 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 601 168) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -10 10)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 5))) (om-make-point 688 171) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0)) (quote (-10.0 10.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 0) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VBAP.CONTINUOUS" (quote vbap.continuous) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "soundfile" (quote :soundfile) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "xpos-env" (quote :xpos-env) (list (quote make-cs-table) (quote (quote gen-07)) (list (quote list) 0 512) (list (quote list) 0 0) 5 "?" 513) nil) (om-load-inputkeyword (quote editor-keyword) "" "atten-fun" (quote :atten-fun) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "air-fun" (quote :air-fun) 0 nil))) (om-make-point 524 285) (om-make-point 168 88) (let ((rep (if (find-class (quote vbap.continuous) nil) (let ((rep (make-instance (quote vbap.continuous) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote durs)) 0)) (when (member (quote soundfile) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote soundfile)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote gain) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote gain)) 0)) (when (member (quote gain-env) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote gain-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote startpos) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote startpos)) 0)) (when (member (quote xpos-env) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote xpos-env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0)) (quote (-10.0 10.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote ypos-env) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote ypos-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote zpos-env) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote zpos-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote xpos-freqenv) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote xpos-freqenv)) 0)) (when (member (quote ypos-freqenv) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote ypos-freqenv)) 0)) (when (member (quote zpos-freqenv) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote zpos-freqenv)) 0)) (when (member (quote atten-fun) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote atten-fun)) 2)) (when (member (quote air-fun) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote air-fun)) 2)) (when (member (quote time-fun) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote time-fun)) 0)) (when (member (quote reference-distance) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote reference-distance)) 1)) (when (member (quote spread-env) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote spread-env)) (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote spread-freqenv) (get-init-slots-of-class (quote vbap.continuous)) :key (quote car)) (setf (slot-value rep (quote spread-freqenv)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 5.2302947) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OMPrisma" "OMPrisma" "resources" "sounds")) :device nil :host nil :name "africa" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0)) (quote (-10.0 10.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0) (list 0) (list 0) (list 2) (list 2) (list 0) (list 1) (list (let ((newobj (when (find-class (quote gen-07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (0.0 0.0)) (quote gen-07) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "group 1" (list 0 nil) (list 1 nil) (list 2 (quote t)) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 (quote t)) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 (quote t)) (list 15 (quote t)) (list 16 (quote t)) (list 17 nil)) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t)) (list 15 (quote t)) (list 16 (quote t)) (list 17 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil) (list 15 nil) (list 16 nil) (list 17 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 495 752) (om-make-point 9 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "inits" (quote :inits) nil nil))) (om-make-point 521 474) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((21 0 3 0 nil 0) (26 0 4 0 nil 0) (17 0 6 0 nil 0) (17 0 15 0 nil 0) (5 0 15 1 nil 0) (15 0 16 0 nil 0) (14 0 17 4 nil 0) (13 0 17 5 nil 0) (21 0 19 0 nil 0) (1 0 19 1 nil 0) (19 0 20 0 nil 0) (18 0 21 4 nil 0) (7 0 21 5 nil 0) (27 0 23 0 nil 0) (24 0 26 4 nil 0) (25 0 26 5 nil 0) (22 0 26 6 nil 0) (22 0 26 7 nil 0) (26 0 27 0 nil 0) (2 0 27 1 nil 0))) nil 6.100008))
