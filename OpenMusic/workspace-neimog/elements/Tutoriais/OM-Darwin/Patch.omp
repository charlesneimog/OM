; OM File Header - Saved 2020/06/25 15:20:40
; (6.16 :patc (om-make-point 226 110) (om-make-point 103 0) (om-make-point 1101 729) "" 183 0 "2015/06/03 15:46:10" "2020/06/25 15:20:40")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-boxcall (quote genfun) "C-VOICES" (quote c-voices) (quote ((om-load-inputfun (quote input-funbox) "" "EVAL" nil) (om-load-inputfun (quote input-funbox) "" "TEST" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 359 566) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 940 425) (om-make-point 43 28) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 854 365) (om-make-point 82 28) (list 6000 8400) "(6000 8400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 640 487) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 2))) (om-make-point 615 568) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 769 391) (om-make-point 32 28) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 161 705) (om-make-point 749 138) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 209 162 16 32 39 123 225 102 69 164 81 207 196 77 211 146 205 64 156 190 27 16 86 155 247 35 35 207 190 200 23 5 132 127 46 68 228 191 72 12 56 113 244 60 134 63 187 249 44 21 14 182 137 56 214 38 143 78 107 97 160 174 81 222) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 209 162 16 32 39 123 225 102 69 164 81 207 196 77 211 146 205 64 156 190 27 16 86 155 247 35 35 207 190 200 23 5 132 127 46 68 228 191 72 12 56 113 244 60 134 63 187 249 44 21 14 182 137 56 214 38 143 78 107 97 160 174 81 222)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 46.81288 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 194 195 2 211 18 77 200 108 179 204 211 155 142 113 31 180 115 60 31 106 197 86 98 65 241 70 185 209 149 212 166 36 192 15 33 205 46 26 224 136 74 213 243 253 44 138 210 65 179 26 115 67 39 134 232 133 19 244 223 123 226 76 59 22) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 194 195 2 211 18 77 200 108 179 204 211 155 142 113 31 180 115 60 31 106 197 86 98 65 241 70 185 209 149 212 166 36 192 15 33 205 46 26 224 136 74 213 243 253 44 138 210 65 179 26 115 67 39 134 232 133 19 244 223 123 226 76 59 22)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 45.254837 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 168 142 139 159 169 134 180 239 57 223 10 127 234 43 120 91 175 178 18 184 244 97 216 185 175 90 207 197 104 62 57 16 210 7 173 116 253 185 14 201 39 87 225 122 75 93 206 165 59 76 167 182 123 81 184 98 148 78 31 133 111 255 2 6) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 168 142 139 159 169 134 180 239 57 223 10 127 234 43 120 91 175 178 18 184 244 97 216 185 175 90 207 197 104 62 57 16 210 7 173 116 253 185 14 201 39 87 225 122 75 93 206 165 59 76 167 182 123 81 184 98 148 78 31 133 111 255 2 6)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 46.81288 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 97 96 100 118 213 41 86 239 94 97 170 220 43 115 19 240 29 228 237 173 58 20 218 106 15 218 117 144 57 31 22 181 66 36 39 138 65 186 43 105 141 163 40 139 204 60 0 93 249 250 255 58 35 28 24 162 138 159 95 108 16 26 201 238) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 97 96 100 118 213 41 86 239 94 97 170 220 43 115 19 240 29 228 237 173 58 20 218 106 15 218 117 144 57 31 22 181 66 36 39 138 65 186 43 105 141 163 40 139 204 60 0 93 249 250 255 58 35 28 24 162 138 159 95 108 16 26 201 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 43.701657 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 79 6 184 65 79 240 124 223 233 174 116 55 246 130 179 100 20 241 167 47 48 126 48 115 47 66 132 11 27 231 110 142 216 1 5 52 130 16 95 16 242 225 84 78 150 212 255 208 163 240 27 55 176 92 221 224 185 70 133 116 142 62 251 160) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 79 6 184 65 79 240 124 223 233 174 116 55 246 130 179 100 20 241 167 47 48 126 48 115 47 66 132 11 27 231 110 142 216 1 5 52 130 16 95 16 242 225 84 78 150 212 255 208 163 240 27 55 176 92 221 224 185 70 133 116 142 62 251 160)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 45.254837 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 85 141 70 26 135 99 228 148 153 76 105 48 142 82 17 251 204 144 145 117 172 137 122 88 146 122 158 153 194 246 134 122 160 183 200 98 81 225 160 190 171 200 39 10 104 90 17 218 1 18 39 2 241 40 209 45 255 226 235 180 199 52 87 247) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 141 70 26 135 99 228 148 153 76 105 48 142 82 17 251 204 144 145 117 172 137 122 88 146 122 158 153 194 246 134 122 160 183 200 98 81 225 160 190 171 200 39 10 104 90 17 218 1 18 39 2 241 40 209 45 255 226 235 180 199 52 87 247)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 43.701657 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 49 87 152 186 107 14 166 145 165 158 176 124 162 41 193 123 130 132 120 189 188 211 153 234 31 252 11 76 174 100 62 109 199 186 228 252 60 155 124 150 173 122 176 230 164 200 233 3 231 193 19 228 189 55 160 30 84 158 105 76 67 13 59 77) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 49 87 152 186 107 14 166 145 165 158 176 124 162 41 193 123 130 132 120 189 188 211 153 234 31 252 11 76 174 100 62 109 199 186 228 252 60 155 124 150 173 122 176 230 164 200 233 3 231 193 19 228 189 55 160 30 84 158 105 76 67 13 59 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 45.254837 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 44 44 138 207 137 100 135 107 57 210 162 144 208 138 63 80 171 181 252 169 75 170 20 232 18 136 13 38 224 29 26 181 130 136 54 154 117 68 55 108 202 224 102 130 74 50 60 178 241 91 105 239 90 103 227 176 18 5 35 217 203 164 167 156) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 44 138 207 137 100 135 107 57 210 162 144 208 138 63 80 171 181 252 169 75 170 20 232 18 136 13 38 224 29 26 181 130 136 54 154 117 68 55 108 202 224 102 130 74 50 60 178 241 91 105 239 90 103 227 176 18 5 35 217 203 164 167 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 42.153477 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 132 248 84 214 115 140 93 166 87 20 58 4 123 203 194 154 20 73 187 234 192 94 32 12 46 238 75 185 197 203 112 57 124 190 80 175 7 118 139 111 180 170 70 39 65 208 32 51 17 38 132 107 116 14 189 116 18 38 36 149 213 51 200 202) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 132 248 84 214 115 140 93 166 87 20 58 4 123 203 194 154 20 73 187 234 192 94 32 12 46 238 75 185 197 203 112 57 124 190 80 175 7 118 139 111 180 170 70 39 65 208 32 51 17 38 132 107 116 14 189 116 18 38 36 149 213 51 200 202)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 37.540512 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 230 74 164 12 148 188 73 92 227 112 45 210 46 203 162 0 115 221 92 162 165 1 70 164 156 85 19 10 73 184 18 143 182 86 21 254 235 215 19 155 97 201 22 179 192 186 184 196 121 170 225 124 130 222 117 2 250 33 148 169 32 113 126 211) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 230 74 164 12 148 188 73 92 227 112 45 210 46 203 162 0 115 221 92 162 165 1 70 164 156 85 19 10 73 184 18 143 182 86 21 254 235 215 19 155 97 201 22 179 192 186 184 196 121 170 225 124 130 222 117 2 250 33 148 169 32 113 126 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 43.701657 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8100) (list 1/16 1/16 1 6900) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7900) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 7100) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6800) (list 15/16 1/16 1 6400) (list 1 1/16 1 6400) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7700) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 6800) (list 21/16 1/16 1 7300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 8000) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 7000) (list 15/8 1/16 1 7000) (list 31/16 1/16 1 6700)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6) :decoder (list (list 6000 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7900) (list 3/16 1/16 1 8400) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 8300) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 8400) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7700) (list 11/16 1/16 1 8400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7600) (list 7/8 1/16 1 8000) (list 15/16 1/16 1 6700) (list 1 1/16 1 7900) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7200) (list 19/16 1/16 1 7200) (list 5/4 1/16 1 6500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6600)) :range (list 6000 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 234 225 139 94 184 55 86 6 131 33 133 36 27 158 79 54 160 242 218 133 13 137 76 255 225 120 53 205 210 185 207 155 214 69 224 211 98 202 224 129 110 92 99 130 141 70 32 119 33 87 62 80 140 197 133 183 210 62 139 155 32 230 6)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote ggff) (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 260) (om-make-point 840 73) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 611 198) (om-make-point 85 30) (quote :pitch-class) ":pitch-class" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 461 607) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 724 489) (om-make-point 274 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 778 178) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 706 97) (om-make-point 68 28) (list (quote :set) 3 4) "(:set 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 672 284) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "keynum evenp" (om-load-patch-abs1 "keynum evenp" (quote ((let ((box (om-load-boxcall (quote lispfun) "/" (quote /) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 100))) (om-make-point 112 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 226 295) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVENP" (quote evenp) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 178 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 699 507)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 321 102) nil (list nil) "l" "keynum evenp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 411 127) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 371 267) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 88 465) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "num notes multiple of 4" (om-load-lisp-abspatch "num notes multiple of 4" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (evenp (/ (length arr) 2)))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 141 23) nil (list nil) "l" "num notes multiple of 4"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 201 132) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make-predictable-test-subject" (om-load-patch-abs1 "make-predictable-test-subject" (quote ((let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 383 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 436 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 41) (om-make-point 34 30) 61 "61" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 502 25) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 50 635) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 573 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 613 50) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 12))) (om-make-point 637 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 731 176) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 658 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 549 175) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" nil) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 375 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 61) (om-load-inputfun (quote input-funbox) "end " "END" 72) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 308 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 477 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (5 0 4 0 nil 0) (13 0 5 0 nil 0) (9 0 5 1 nil 0) (6 0 7 0 nil 0) (3 0 7 1 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 11 0 nil 0) (2 0 12 0 nil 0) (0 0 12 1 nil 0) (11 0 13 0 nil 0) (10 0 13 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 856 729)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 32 543) nil (list (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6200) (list 1/8 1/16 1 6300) (list 3/16 1/16 1 6400) (list 1/4 1/16 1 6500) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6700) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6900) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7100) (list 11/16 1/16 1 7200) (list 0 1/16 1 6000) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 6000) (list 1/4 1/16 1 6000) (list 5/16 1/16 1 6000) (list 3/8 1/16 1 6000) (list 7/16 1/16 1 6000) (list 1/2 1/16 1 6000) (list 9/16 1/16 1 6000) (list 5/8 1/16 1 6000) (list 11/16 1/16 1 6000))) nil "make-predictable-test-subject"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 38 724) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "even midi notes" (om-load-lisp-abspatch "even midi notes" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (loop for region in arr$        sum (if (evenp (/ (d::region-pitch region) 100)) 1 0)))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 14 58) nil (list nil) "l" "even midi notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 47 164) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 4 0 nil 0) (3 0 4 1 nil 0) (8 0 6 1 nil 0) (15 0 6 2 nil 0) (4 0 8 0 nil 0) (5 0 9 0 nil 0) (2 0 9 1 nil 0) (1 0 9 2 nil 0) (7 0 12 1 nil 0) (11 0 12 2 nil 0) (10 0 12 3 nil 0) (13 0 15 0 nil 0) (14 0 15 1 nil 0) (17 0 18 0 nil 0) (16 0 19 0 nil 0) (19 0 20 0 nil 0) (21 0 22 0 nil 0))) nil 6.16))
