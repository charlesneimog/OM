; OM File Header - Saved 2020/03/06 18:08:50
; (6.16 :patc (om-make-point 212 139) (om-make-point 50 50) (om-make-point 461 400) "No documentation " 183 0 nil "2020/03/06 18:08:50")
; End File Header
(in-package :om)(load-lib-for (quote ("Morphologie")))(setf *om-current-persistent* (om-load-patch1 "ptrn-recogn" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 328 71) (quote "Evaluation of some fonctions \"ptrn-xx\" display ugly results as:$(common-lisp-user::c ....);$In order to ameliorate the display, please select the listener window,type : (in-package :common-lisp-user) then return.") "" (om-make-point 49 314) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 122 46) (quote "It creates a random list of elements") "" (om-make-point 191 70) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 181 133) (om-make-point 26 28) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 133 161) nil (list (list (quote c) (quote b) (quote b) (quote c) (quote f) (quote e) (quote a) (quote b) (quote f) (quote f) (quote d) (quote a) (quote e) (quote f) (quote d) (quote c) (quote e) (quote c) (quote b) (quote a) (quote d) (quote c) (quote f) (quote b) (quote f) (quote c) (quote f) (quote d) (quote d) (quote e) (quote b) (quote c) (quote d) (quote b) (quote a) (quote b) (quote f) (quote b) (quote b) (quote d) (quote c) (quote a) (quote c) (quote d) (quote f) (quote c) (quote f) (quote c) (quote e) (quote c))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 82 31) (om-make-point 77 28) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f)) "(a b c d e f)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 106 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PTRN-RECOGN" (quote morph::ptrn-recogn) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list 1 2 3 1 2 3 1 2 1 2)))) (om-make-point 112 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (2 0 3 1 nil 0) (4 0 5 0 nil 0) (3 0 6 0 nil 0))) nil 6.16))
