; OM File Header - Saved 2020/02/25 13:16:36
; (6.16 :patc (om-make-point 210 21) (om-make-point 50 50) (om-make-point 500 360) "No documentation " 183 0 nil "2020/02/25 13:16:36")
; End File Header
(in-package :om)(load-lib-for (quote ("Morphologie")))(setf *om-current-persistent* (om-load-patch1 "ptrn-smooth" (quote ((let ((box (om-load-boxcall (quote genfun) "PTRN-SMOOTH" (quote morph::ptrn-smooth) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list (quote morph::a) (quote morph::b) (quote morph::b) (quote morph::b) (quote morph::c) (quote morph::c) (quote morph::c) (quote morph::d) (quote morph::a) (quote morph::a) (quote morph::b) (quote morph::b) (quote morph::c) (quote morph::c) (quote morph::d) (quote morph::e) (quote morph::d) (quote morph::d) (quote morph::d) (quote morph::b) (quote morph::b))))) (om-make-point 106 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 107 44) (quote "it removes the local repetitions") "" (om-make-point 189 247) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 116 46) (quote "It creates a random list of elements") "" (om-make-point 213 51) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 188 132) (om-make-point 26 28) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 133 161) nil (list (list (quote d) (quote e) (quote b) (quote a) (quote f) (quote c) (quote e) (quote f) (quote a) (quote f) (quote e) (quote d) (quote e) (quote d) (quote f) (quote b) (quote b) (quote c) (quote c) (quote b) (quote b) (quote b) (quote c) (quote f) (quote c) (quote a) (quote a) (quote f) (quote e) (quote b) (quote d) (quote d) (quote f) (quote c) (quote e) (quote c) (quote d) (quote e) (quote e) (quote f) (quote f) (quote e) (quote c) (quote c) (quote d) (quote d) (quote a) (quote b) (quote e) (quote f))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 77 47) (om-make-point 77 28) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f)) "(a b c d e f)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 87 85) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (5 0 6 0 nil 0))) nil 6.16))
