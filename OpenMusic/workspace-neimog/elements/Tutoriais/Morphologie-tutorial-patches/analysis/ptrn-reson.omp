; OM File Header - Saved 2020/03/06 18:08:50
; (6.16 :patc (om-make-point 42 141) (om-make-point 50 50) (om-make-point 500 360) "No documentation " 183 0 nil "2020/03/06 18:08:50")
; End File Header
(in-package :om)(load-lib-for (quote ("Morphologie")))(setf *om-current-persistent* (om-load-patch1 "ptrn-reson" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 146 55) (quote "it makes an analysis with a window size corresponding to the same window step") "" (om-make-point 215 276) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 177 235) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PTRN-RESON" (quote morph::ptrn-reson) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list (quote morph::a) (quote morph::b) (quote morph::c) (quote morph::a) (quote morph::b) (quote morph::c) (quote morph::a) (quote morph::b) (quote morph::a) (quote morph::b) (quote morph::a) (quote morph::a) (quote morph::a) (quote morph::a) (quote morph::b) (quote morph::a) (quote morph::b) (quote morph::a) (quote morph::a) (quote morph::a) (quote morph::a) (quote morph::a) (quote morph::b) (quote morph::b) (quote morph::b) (quote morph::b) (quote morph::b) (quote morph::b) (quote morph::a) (quote morph::a))) (om-load-inputfun (quote input-funbox) "no documentation" "WINDW" 5))) (om-make-point 108 280) nil nil nil "ptrn-reson" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 98 50) (quote "It creates a random list of elements") "" (om-make-point 210 46) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 177 137) (om-make-point 18 20) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 133 161) nil (list (list 6702 6969 6969 6000 6969 6386 6000 6969 6000 6969 6969 6969 6969 6386 6702 6000 6702 6969 6969 6000 6386 6969 6386 6702 6000 6702 6702 6000 6000 6969 6969 6386 6000 6386 6000 6969 6702 6000 6000 6702 6702 6000 6969 6969 6702 6969 6000 6000 6969 6702)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 77 47) (om-make-point 138 28) (list 6000 6386 6702 6969) "(6000 6386 6702 6969)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 87 85) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 2 0 nil 0) (1 0 2 1 nil 0) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (6 0 7 0 nil 0))) nil 6.16))
