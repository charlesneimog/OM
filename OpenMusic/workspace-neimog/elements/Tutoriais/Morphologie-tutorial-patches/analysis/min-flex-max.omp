; OM File Header - Saved 2020/03/06 18:08:50
; (6.16 :patc (om-make-point 127 221) (om-make-point 50 50) (om-make-point 554 398) "No documentation " 183 0 nil "2020/03/06 18:08:50")
; End File Header
(in-package :om)(load-lib-for (quote ("Morphologie")))(setf *om-current-persistent* (om-load-patch1 "min-flex-max" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 167 76) (quote "it makes the analysis of the given profile with 4 different criteria : pripitive, depth, value and position") "" (om-make-point 200 273) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 40) (quote "given profile") "" (om-make-point 150 141) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 50 34) (om-make-point 394 76) (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900) "(6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 51 136) (om-make-point 95 111) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale microplay inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t) (quote :midishare))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MIN-FLEX-MAX" (quote morph::min-flex-max) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 1 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))))) (om-make-point 113 284) nil nil nil "min-flex-max" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 1 nil 0) (3 1 4 0 nil 0))) nil 6.16))
