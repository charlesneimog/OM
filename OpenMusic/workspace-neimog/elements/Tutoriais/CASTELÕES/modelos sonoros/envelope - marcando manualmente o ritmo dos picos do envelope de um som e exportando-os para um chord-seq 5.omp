; OM File Header - Saved 2013/10/16 18:38:40
; (6.0602 :patc (om-make-point 10 10) (om-make-point 21 22) (om-make-point 1155 674) "" 183 0 "2013/10/11 10:35:33" "2013/10/16 17:02:05")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../../Music/iTunes/iTunes Media/Music/Unknown Artist/Unknown Album/Baden - Consolação.wav"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "envelope - marcando manualmente o ritmo dos picos do envelope de um som e exportando-os para um chord-seq 5" (quote ((om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 176 478) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 72 470) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 10" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 33 424) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 89 377) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 30 328) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 251 278) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 123 305) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 1136 86) (om-make-point 233 30) (list 1 2 3 4 5 6 7 8 9 11 12 13 14 15 16) "(1 2 3 4 5 6 7 8 9 11 12 13 14 15 16)" nil) (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>15ch." (om-load-patch-abs1 "Orq. 5 reg.=>15ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1 a 3") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro sub-grave) aos midi chs 4 a 6") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 7 a 9") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 14 a 16") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 11 e 13") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 34 30) 13 "13" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 34 30) 16 "16" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 14 "14" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 929 482) nil (list (list 6 6 4 6 4 5 15 5 5 1 15 12 1 3 5 4 6 3 5 8 6 2 3 5 1 5 9 4 5 3 2 2 3 1 6 5 3 5 6 1 4 5 1 3 2 11 4 2 2 6 5 5 3 7 1 4 4 5 2 3 3 2 4 2 12 3 3 8 1 3 5 11 4 4 3 5 5 1 1 5 5 5 3 2 6 4 6 15 4 6 6 2 1 2 6 1 4 2 5 2 1 5 2 2 1 4 1 2 6 6 1 7 3 2 5 6 3 4 2 3 1 4 5 3 3 5 3 6 4 4 5 3 5 6 6 5 6 4 5 4 3 3 5 2 6 5 6 1 4 5 1 1 5 4 3 6 5 6 2 1 2 9 8 8 5 3 8 6 6 5 8 4 4 3 5 8 5 6 1 11 6 6 3 6 1 3 6 9 9 5 5 1 1 6 6 4 3 5 4 1 5 4 6 8 5 3 3 1 2 5 1 3 5 2 5 2 1 4 5)) nil "Orq. 5 reg.=>15ch.") (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>8 ch." (om-load-patch-abs1 "Orq. 3 reg.=>8 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1 a 2") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 6 a 8") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 3 a 5") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1070 491) nil (list (list 6 7 5 7 8 9 7 4 5 6 5 7 7 6 5 5 6 7 7 7 5 7 6 5 7 5 5 7 6 5 6 5 5 6 6 6 7 5 7 6 5 5 6 5 8 5 5 7 5 7 6 1 6 6 1 7 6 5 5 5 7 7 6 6 5 5 7 6 5 5 5 7 6 5 6 5 7 6 6 6 5 7 6 7 5 6 8 6 6 5 5 5 7 6 7 6 6 6 5 7 6 5 6 7 5 7 5 6 7 5 7 6 5 5 7 6 7 5 6 6 5 6 7 6 5 5 5 5 5 5 3 5 6 5 6 7 6 6 6 5 6 7 7 5 6 7 5 6 7 6 6 6 5 7 6 6 6 5 7 5 6 7 7 6 6 5 5 6 6 6 5 7 7 7 1 6 6 7 6 6 9 7 5 6 9 7 7 6 6 7 7 7 7 5 5 6 6 6 7 5 7 7 5 6 5 6 6 6 5 5 7 6 6 7 5 6 7 6 7 6 6 5 6 5 7 7 5 7 9 7 7 7 6 5 6 5 7 6 5 6 5 5 7 5 7 5 7 7 7 6 5 5 6 7 6 5 5 7 5 5 7 6 3 5 7 5 6 6 5 5 6 5 5 1 6 6 5 6 7 7 7 7 7 6 5 5 6 7 6 6 5 6 5 7 5 5 5 6 5 5 5 6 6 8 7 7 7 7 6 6 7 5 6 5 5 6 5 5 7 5 7 6 5 5 7 6 5 5 5 5 7 7 5 6 7 5 7 6 6 5 6 6 6 5 6 6 5 6 6 5 5 6 5 7 7 6 7 8 7 6 5 9 6 7 5 6 6 6 6 6 6 6 7 5 5 6 7 7 5 5 7 7 6 5 7 5 7 6 5 6 9 7 7 6 7 5 6 5 7 5 7 6 6 7 7 7 5 6 7 5 5 7 5 6 7 7 7 6 5 7 9 9 6 5 7 7 6 7 7 6 5 6 5 5 6 7 7 7 6 7 5 6 7 7)) nil "Orq. 3 reg.=>8 ch.") (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>8ch." (om-load-patch-abs1 "Orq. 5 reg.=>8ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro grave) aos midi chs 2") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 3 a 4") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 7 a 8") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 5 a 6") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1074 559) nil (list (list 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 7 1 1 2 1 1 1 1 1 2 1 1 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 2 1 1 1 2 2 2 2 1 2 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 1 1 2 1 2 3 2 1 1 1 3 1 2 2 1 1 2 1 1 2 1 1 2 1 1 2 4 2 4 1 2 2 1 1 1 2 1 1 1 2 2 2 2 2 1 2 2 1 1 1 1 1 1 1 1 1 2 1 4 1 2 4 1 2 1 2 2 1 1 1 1 1 1 2 3 6 3 4 1 2 2 1 1 2 2 1 1 1 2 1 7 2 1 2 2 1 1 2 2 1 4 6 2 1 2 1 2 2 3 2 2 2 1 1 1 1 1 2 2 1 2 2 1 2 1 1 4 4 2 1 2 2 1 8 8 2 2 1 2 2 2 1 2)) nil "Orq. 5 reg.=>8ch.") (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 1104 277) (om-make-point 34 30) 15 "15" nil) (om-load-boxcall (quote abstraction) "Instrumentacao ALEA" (om-load-patch-abs1 "Instrumentacao ALEA" (quote ((om-load-boxout "output" 0 (om-make-point 381 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 424 76) "" nil nil nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 373 304) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 259 219) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 223 150) (om-make-point 41 30) 128 "128" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 187 157) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 199 191) nil nil nil nil 1))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 944 296) nil (list (list 49 68 69 25 22 66 53 120 51 39 110 114 97 90 78)) nil "Instrumentacao ALEA") (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= No. de instrumentos") "" (om-make-point 1135 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 1132 111) (om-make-point 119 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 983 155) (om-make-point 182 30) (list 40 44 45 24 40 44 24 40 24) "(40 44 45 24 40 44 24 40 24)" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1120 189) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>9 ch." (om-load-patch-abs1 "Orq. 3 reg.=>9 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1, 2, 3 e 4") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 8 e 9") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 5, 6 e 7") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 7 "7" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 8 "8" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1079 419) nil (list (list 6 1 7 7 8 6 5 8 4 6 3 2 7 1 4 9 5 8 5 9 1 6 7 1 6 6 8 5 6 7 6 9 5 8 7 3 8 2 3 9 6 5 5 8 5 5 3 3 2 5 5 5 8 9 7 7 4 6 2 5 5 1 3 2 5 5 6 7 1 8 6 3 8 6 6 7 6 5 1 9 4 7 8 7 5 4 7 5 9 5 6 2 4 5 6)) nil "Orq. 3 reg.=>9 ch.") (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 578 488) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 147 30) (quote "<= Dyns mín. e máx.") "" (om-make-point 779 445) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 743 449) (om-make-point 34 30) 90 "90" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 706 450) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 687 495) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 207 49) (quote "<= Fator de multiplicação para onsets e durs") "" (om-make-point 641 376) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 611 379) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 431 433) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 509 521) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 458 486) nil nil nil nil 1) (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 90 178) (om-make-point 65 96) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 8800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 300 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 17 172) (om-make-point 65 96) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 2800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 300 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcomment "comment 2" (om-make-point 368 58) (quote "<= atenção: na caixa sound, a unidade de tempo é seg.; pra traduzir pr'um chord-seq, precisa passar pra miliseg., ou seja, multiplicar por 1000.") "" (om-make-point 584 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 504 55) (quote "<= atenção: os onsets da caixa sound saem com decimais (e os retêm mesmo depois da multiplicação por 1000); pra traduzir pr'um chord-seq, precisa eliminar esses decimais, através de um om//, por ex.") "" (om-make-point 491 258) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 454 243) nil nil nil nil 2) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 420 360) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 429 320) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 468 353) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 37 562) (om-make-point 1017 131) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3901) (3956) (3736) (4231) (3626) (3626) (8580) (4121) (3571) (3350) (8800) (7424) (3350) (2965) (4011) (3681) (3956) (3461) (4286) (6213) (3791) (3406) (3516) (3571) (3295) (3736) (5057) (4231) (3956) (3240) (3461) (3406) (3516) (3185) (4451) (3846) (3075) (4176) (3846) (3020) (3901) (4341) (3350) (3350) (3516) (7259) (3791) (3020) (3185) (3681) (3901) (3571) (3295) (5552) (3295) (4231) (4782) (3681) (2800) (2965) (3295) (3240) (4121) (3240) (7094) (3516) (3130) (5662) (3075) (2910) (3846) (6598) (3956) (3736) (3406) (3681) (5002) (3130) (3516) (4231) (3791) (3571) (3406) (3461) (4011) (4011) (3571) (8800) (3791) (3681) (4561) (3295) (3240) (3240) (3956) (3350) (4947) (3020) (3571) (3461) (3516) (4396) (3185) (3295) (3130) (3626) (3130) (2965) (3956) (3681) (3130) (5332) (3130) (3295) (3846) (4011) (3406) (3956) (2965) (3350) (3461) (3846) (3626) (3406) (2910) (5002) (3516) (3736) (4121) (3571) (4121) (3185) (4341) (4011) (3846) (4121) (4066) (4066) (3571) (4451) (3516) (3240) (3901) (3350) (4617) (3901) (4286) (3185) (3846) (3736) (3020) (3020) (4066) (3626) (3020) (3736) (4947) (4286) (3350) (3295) (3295) (6103) (5167) (6433) (4451) (3516) (5717) (3626) (4947) (4121) (5167) (3846) (3791) (3350) (4837) (5387) (4121) (3736) (3240) (7479) (4506) (4617) (3406) (4286) (3130) (3461) (4451) (6323) (5993) (3736) (3846) (2965) (3406) (3681) (3736) (3791) (3075) (4066) (4837) (3240) (3791) (3846) (4947) (5277) (4121) (3130) (3461) (2855) (3461) (3736) (3295) (2965) (3626) (3295) (3846) (2800) (3406) (3846) (4892) (4892) (4892))) :lonset (quote (0 386 432 480 520 578 614 650 866 920 954 980 1204 1378 1404 1416 1466 1504 1552 1582 1642 1772 1814 1842 1874 1908 1932 1972 2060 2118 2166 2188 2218 2246 2278 2298 2364 2408 2424 2480 2524 2538 2584 2646 2672 2698 2730 2898 2940 2954 2974 3012 3058 3092 3116 3222 3246 3304 3382 3420 3426 3438 3462 3484 3538 3560 3722 3754 3772 3882 3898 3908 3952 4096 4144 4184 4212 4250 4336 4354 4386 4444 4486 4520 4548 4578 4628 4678 4712 4936 4978 5016 5086 5110 5132 5154 5202 5228 5312 5326 5360 5390 5422 5486 5506 5530 5548 5584 5602 5614 5662 5700 5718 5816 5834 5858 5902 5952 5980 6028 6040 6066 6096 6140 6176 6204 6214 6300 6332 6372 6426 6460 6514 6534 6596 6646 6690 6744 6796 6848 6882 6948 6980 7002 7048 7074 7146 7192 7252 7272 7316 7356 7370 7384 7436 7472 7486 7526 7610 7670 7696 7720 7744 7870 7962 8100 8166 8198 8310 8346 8430 8484 8576 8620 8662 8688 8768 8868 8922 8962 8984 9160 9228 9300 9328 9388 9406 9436 9502 9636 9758 9798 9842 9854 9882 9920 9960 10002 10018 10070 10150 10172 10214 10258 10342 10438 10492 10510 10540 10548 10578 10618 10642 10654 10690 10714 10758 10764 10792 10836 10918 11304)) :ldur (quote ((82) (44) (28) (6) (44) (24) (36) (12) (24) (40) (30) (8) (30) (18) (54) (96) (84) (44) (42) (22) (80) (52) (16) (42) (40) (38) (28) (12) (44) (40) (122) (134) (66) (30) (18) (60) (28) (72) (68) (176) (22) (40) (54) (100) (80) (26) (42) (44) (92) (54) (84) (36) (112) (32) (66) (138) (92) (126) (24) (24) (26) (60) (84) (40) (14) (36) (52) (14) (14) (40) (44) (20) (60) (46) (72) (26) (46) (22) (32) (66) (34) (52) (52) (54) (44) (50) (62) (20) (54) (34) (54) (40) (32) (86) (10) (28) (36) (44) (30) (26) (12) (48) (28) (50) (44) (24) (18) (98) (18) (38) (48) (12) (18) (36) (18) (24) (20) (64) (32) (30) (34) (14) (84) (26) (48) (22) (22) (24) (70) (38) (42) (224) (34) (50) (50) (30) (28) (34) (42) (58) (32) (18) (86) (38) (28) (40) (48) (144) (44) (10) (16) (110) (18) (32) (162) (22) (54) (22) (24) (12) (6) (38) (78) (58) (24) (106) (24) (34) (46) (38) (20) (14) (42) (168) (32) (26) (26) (62) (46) (14) (44) (56) (16) (44) (66) (20) (32) (28) (30) (22) (48) (58) (88) (40) (24) (34) (32) (28) (42) (130) (60) (30) (48) (38) (50) (12) (26) (174) (224) (26) (34) (54) (216) (36) (36) (58) (40) (48) (46) (386) (386))) :lvel (quote ((23) (85) (14) (64) (38) (89) (49) (31) (23) (56) (79) (88) (41) (59) (58) (44) (21) (17) (19) (48) (41) (54) (62) (64) (36) (55) (59) (28) (89) (83) (57) (61) (56) (89) (27) (88) (86) (26) (56) (32) (43) (29) (71) (63) (67) (58) (54) (44) (43) (27) (48) (80) (49) (20) (86) (74) (34) (48) (13) (47) (74) (54) (89) (33) (77) (55) (65) (41) (26) (20) (81) (88) (79) (73) (25) (51) (39) (60) (54) (76) (66) (88) (73) (14) (30) (14) (70) (51) (46) (57) (39) (57) (32) (33) (35) (34) (54) (53) (35) (20) (34) (21) (28) (30) (23) (87) (39) (40) (26) (15) (49) (83) (73) (45) (10) (64) (28) (75) (43) (62) (87) (24) (17) (40) (22) (51) (51) (68) (49) (29) (13) (37) (85) (62) (53) (46) (66) (50) (71) (87) (22) (59) (14) (24) (50) (69) (30) (17) (16) (78) (47) (79) (84) (42) (90) (38) (38) (53) (55) (87) (42) (67) (63) (48) (76) (61) (82) (35) (82) (85) (88) (64) (35) (63) (55) (32) (65) (89) (60) (21) (66) (52) (72) (75) (82) (82) (26) (52) (78) (47) (58) (70) (83) (24) (35) (32) (36) (72) (32) (53) (60) (44) (65) (42) (27) (78) (51) (50) (26) (43) (51) (29) (28) (84) (61) (82) (68) (83) (36) (24) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (4) (6) (4) (5) (15) (5) (5) (1) (15) (12) (1) (3) (5) (4) (6) (3) (5) (8) (6) (2) (3) (5) (1) (5) (9) (4) (5) (3) (2) (2) (3) (1) (6) (5) (3) (5) (6) (1) (4) (5) (1) (3) (2) (11) (4) (2) (2) (6) (5) (5) (3) (7) (1) (4) (4) (5) (2) (3) (3) (2) (4) (2) (12) (3) (3) (8) (1) (3) (5) (11) (4) (4) (3) (5) (5) (1) (1) (5) (5) (5) (3) (2) (6) (4) (6) (15) (4) (6) (6) (2) (1) (2) (6) (1) (4) (2) (5) (2) (1) (5) (2) (2) (1) (4) (1) (2) (6) (6) (1) (7) (3) (2) (5) (6) (3) (4) (2) (3) (1) (4) (5) (3) (3) (5) (3) (6) (4) (4) (5) (3) (5) (6) (6) (5) (6) (4) (5) (4) (3) (3) (5) (2) (6) (5) (6) (1) (4) (5) (1) (1) (5) (4) (3) (6) (5) (6) (2) (1) (2) (9) (8) (8) (5) (3) (8) (6) (6) (5) (8) (4) (4) (3) (5) (8) (5) (6) (1) (11) (6) (6) (3) (6) (1) (3) (6) (9) (9) (5) (5) (1) (1) (6) (6) (4) (3) (5) (4) (1) (5) (4) (6) (8) (5) (3) (3) (1) (2) (5) (1) (3) (5) (2) (5) (2) (1) (4) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1/100 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 511 167) (om-make-point 34 30) 36 "36" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 560 203) nil nil nil nil 1) (om-load-editor-box1 "Baden - Consolação.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 62 3) (om-make-point 1062 154) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Music" "iTunes" "iTunes Media" "Music" "Unknown Artist" "Unknown Album")) :device nil :host nil :name "Baden - Consolação" :type "wav") 1))) (when thesound (setf (markers thesound) (quote (5.371 6.025 6.677 7.244 8.032 8.536 9.038 12.048 12.803 13.257 13.628 16.748 19.16 19.51 19.692 20.37 20.908 21.579 21.984 22.809 24.627 25.212 25.607 26.03 26.503 26.853 27.4 28.619 29.417 30.088 30.411 30.82 31.207 31.666 31.917 32.852 33.46 33.675 34.464 35.073 35.272 35.898 36.772 37.118 37.476 37.933 40.274 40.847 41.029 41.314 41.852 42.497 42.965 43.286 44.757 45.093 45.904 46.98 47.518 47.609 47.769 48.093 48.415 49.158 49.455 51.714 52.16 52.395 53.938 54.143 54.295 54.905 56.901 57.579 58.132 58.527 59.03 60.24 60.499 60.917 61.74 62.329 62.795 63.191 63.584 64.304 64.982 65.449 68.562 69.143 69.674 70.649 70.981 71.294 71.61 72.263 72.626 73.805 73.981 74.464 74.881 75.311 76.208 76.497 76.817 77.068 77.57 77.822 77.996 78.646 79.184 79.435 80.803 81.048 81.371 81.981 82.691 83.078 83.738 83.901 84.276 84.675 85.304 85.782 86.175 86.32 87.504 87.965 88.508 89.271 89.727 90.48 90.771 91.628 92.319 92.919 93.674 94.39 95.126 95.609 96.506 96.964 97.254 97.904 98.271 99.267 99.913 100.738 101.024 101.634 102.172 102.383 102.566 103.302 103.786 103.98 104.539 105.722 106.544 106.906 107.229 107.56 109.309 110.6 112.501 113.417 113.862 115.44 115.933 117.09 117.843 119.126 119.744 120.318 120.674 121.788 123.19 123.94 124.496 124.801 127.239 128.172 129.19 129.577 130.395 130.641 131.077 131.973 133.835 135.528 136.109 136.707 136.883 137.27 137.802 138.334 138.93 139.157 139.883 140.996 141.286 141.866 142.481 143.657 144.998 145.737 145.983 146.414 146.511 146.926 147.479 147.816 147.978 148.495 148.813 149.433 149.511 149.891 150.511 151.64)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Baden - Consolação.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1267 456) (om-make-point 13 97) 0 1 (quote t) nil 0)) t nil nil t))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (32 0 5 0 nil 0) (5 0 6 0 nil 0) (29 1 6 1 nil 0) (28 1 6 2 nil 0) (0 0 8 0 nil 2) (11 0 12 0 nil 0) (12 0 16 0 nil 0) (7 0 16 1 nil 0) (22 0 18 0 nil 0) (25 0 22 0 nil 0) (21 0 22 1 nil 0) (20 0 22 2 nil 0) (33 0 25 0 nil 0) (24 0 25 1 nil 0) (27 0 26 0 nil 0) (25 0 27 0 nil 0) (38 0 32 0 nil 0) (35 0 33 0 nil 0) (34 0 35 0 nil 0) (32 0 35 1 nil 0) (0 0 36 1 nil 0) (25 0 36 2 nil 0) (26 0 36 3 nil 0) (18 0 36 4 nil 0) (8 0 36 6 nil 0) (37 0 38 0 nil 0) (39 2 38 1 nil 0))) nil 6.0602))
