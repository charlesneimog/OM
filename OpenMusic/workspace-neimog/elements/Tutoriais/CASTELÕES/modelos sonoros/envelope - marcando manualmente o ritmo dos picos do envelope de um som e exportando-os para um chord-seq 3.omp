; OM File Header - Saved 2013/10/16 18:38:40
; (6.0602 :patc (om-make-point 10 10) (om-make-point 1 22) (om-make-point 1221 689) "" 183 0 "2013/10/10 22:11:18" "2013/10/16 18:38:40")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../../Music/iTunes/iTunes Media/Music/Unknown Artist/Unknown Album/16 Ben - jorge da capadocia-sem intro.wav"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "envelope - marcando manualmente o ritmo dos picos do envelope de um som e exportando-os para um chord-seq 3" (quote ((om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 1136 86) (om-make-point 233 30) (list 1 2 3 4 5 6 7 8 9 11 12 13 14 15 16) "(1 2 3 4 5 6 7 8 9 11 12 13 14 15 16)" nil) (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>15ch." (om-load-patch-abs1 "Orq. 5 reg.=>15ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1 a 3") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro sub-grave) aos midi chs 4 a 6") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 7 a 9") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 14 a 16") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 11 e 13") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 34 30) 13 "13" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 34 30) 16 "16" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 14 "14" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 929 482) nil (list (list 14 4 5 7 15 3 7 15 9 12 12 9 11 13 14 13 6 4 12 16 14 11 9 11 6 8 7 12 13 5 15 1 2 13 8 4 4 4 12 8 5 8 12 1 4 12 15 8 8 13 13 14 7 13 15 6 5 1 3 9 1 8 15 5 6 4 15 5 9 12 12 12 11 15 14 9 6 12 8 9 8 13 6 6 9 16 4 6 14 1 7 16 7 8 4 5 12 2 16 15 11 4 2 6 12 1 3 5 14 9 4 15 5 3 3 1 5 7 9 4 16 4 9 8 5 2 5 12 2 7 12 11 4 3 9 16 4 8 12 4 15 12 1 3 11 11 14 12 8 6 8 6 7 9 7 9 4 1 11 7 9 5 5 12 6 5 4 15 16 1 15 15 14 11 6 13 6 2 14 4 5 7 8 1 12 2 16 5 16 9 6 8 13 5 13 11 12 5 8 3 15 8 11 13 4 11 12 9 12 12 7 15 6 11 2 15 13 9 2 2 11 9 1 16 9 12 9 14 15 6 14 13 7 12 4 11 5 2 11 11 9 8 14 4 13 9 12 16 11 7 12 8 16 2 11)) nil "Orq. 5 reg.=>15ch.") (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>8 ch." (om-load-patch-abs1 "Orq. 3 reg.=>8 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1 a 2") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 6 a 8") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 3 a 5") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1070 491) nil (list (list 6 7 5 7 8 9 7 4 5 6 5 7 7 6 5 5 6 7 7 7 5 7 6 5 7 5 5 7 6 5 6 5 5 6 6 6 7 5 7 6 5 5 6 5 8 5 5 7 5 7 6 1 6 6 1 7 6 5 5 5 7 7 6 6 5 5 7 6 5 5 5 7 6 5 6 5 7 6 6 6 5 7 6 7 5 6 8 6 6 5 5 5 7 6 7 6 6 6 5 7 6 5 6 7 5 7 5 6 7 5 7 6 5 5 7 6 7 5 6 6 5 6 7 6 5 5 5 5 5 5 3 5 6 5 6 7 6 6 6 5 6 7 7 5 6 7 5 6 7 6 6 6 5 7 6 6 6 5 7 5 6 7 7 6 6 5 5 6 6 6 5 7 7 7 1 6 6 7 6 6 9 7 5 6 9 7 7 6 6 7 7 7 7 5 5 6 6 6 7 5 7 7 5 6 5 6 6 6 5 5 7 6 6 7 5 6 7 6 7 6 6 5 6 5 7 7 5 7 9 7 7 7 6 5 6 5 7 6 5 6 5 5 7 5 7 5 7 7 7 6 5 5 6 7 6 5 5 7 5 5 7 6 3 5 7 5 6 6 5 5 6 5 5 1 6 6 5 6 7 7 7 7 7 6 5 5 6 7 6 6 5 6 5 7 5 5 5 6 5 5 5 6 6 8 7 7 7 7 6 6 7 5 6 5 5 6 5 5 7 5 7 6 5 5 7 6 5 5 5 5 7 7 5 6 7 5 7 6 6 5 6 6 6 5 6 6 5 6 6 5 5 6 5 7 7 6 7 8 7 6 5 9 6 7 5 6 6 6 6 6 6 6 7 5 5 6 7 7 5 5 7 7 6 5 7 5 7 6 5 6 9 7 7 6 7 5 6 5 7 5 7 6 6 7 7 7 5 6 7 5 5 7 5 6 7 7 7 6 5 7 9 9 6 5 7 7 6 7 7 6 5 6 5 5 6 7 7 7 6 7 5 6 7 7)) nil "Orq. 3 reg.=>8 ch.") (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>8ch." (om-load-patch-abs1 "Orq. 5 reg.=>8ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro grave) aos midi chs 2") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 3 a 4") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 7 a 8") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 5 a 6") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1074 559) nil (list (list 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 7 1 1 2 1 1 1 1 1 2 1 1 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 2 1 1 1 2 2 2 2 1 2 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 1 1 2 1 2 3 2 1 1 1 3 1 2 2 1 1 2 1 1 2 1 1 2 1 1 2 4 2 4 1 2 2 1 1 1 2 1 1 1 2 2 2 2 2 1 2 2 1 1 1 1 1 1 1 1 1 2 1 4 1 2 4 1 2 1 2 2 1 1 1 1 1 1 2 3 6 3 4 1 2 2 1 1 2 2 1 1 1 2 1 7 2 1 2 2 1 1 2 2 1 4 6 2 1 2 1 2 2 3 2 2 2 1 1 1 1 1 2 2 1 2 2 1 2 1 1 4 4 2 1 2 2 1 8 8 2 2 1 2 2 2 1 2)) nil "Orq. 5 reg.=>8ch.") (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 1104 277) (om-make-point 34 30) 15 "15" nil) (om-load-boxcall (quote abstraction) "Instrumentacao ALEA" (om-load-patch-abs1 "Instrumentacao ALEA" (quote ((om-load-boxout "output" 0 (om-make-point 381 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 424 76) "" nil nil nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 373 304) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 259 219) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 223 150) (om-make-point 41 30) 128 "128" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 187 157) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 199 191) nil nil nil nil 1))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 960 291) nil (list (list 55 91 69 83 14 18 113 26 114 28 73 21 90 110 27)) "x" "Instrumentacao ALEA") (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= No. de instrumentos") "" (om-make-point 1135 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 1132 111) (om-make-point 119 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 983 155) (om-make-point 182 30) (list 40 44 45 24 40 44 24 40 24) "(40 44 45 24 40 44 24 40 24)" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1120 189) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>9 ch." (om-load-patch-abs1 "Orq. 3 reg.=>9 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1, 2, 3 e 4") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 8 e 9") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 5, 6 e 7") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 7 "7" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 8 "8" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1079 419) nil (list (list 6 1 7 7 8 6 5 8 4 6 3 2 7 1 4 9 5 8 5 9 1 6 7 1 6 6 8 5 6 7 6 9 5 8 7 3 8 2 3 9 6 5 5 8 5 5 3 3 2 5 5 5 8 9 7 7 4 6 2 5 5 1 3 2 5 5 6 7 1 8 6 3 8 6 6 7 6 5 1 9 4 7 8 7 5 4 7 5 9 5 6 2 4 5 6)) nil "Orq. 3 reg.=>9 ch.") (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 578 488) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 147 30) (quote "<= Dyns mín. e máx.") "" (om-make-point 779 445) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 743 449) (om-make-point 34 30) 90 "90" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 706 450) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 687 495) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 207 49) (quote "<= Fator de multiplicação para onsets e durs") "" (om-make-point 574 366) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 544 369) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 417 400) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 509 521) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 458 486) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 179 316) nil nil nil nil 1) (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 90 178) (om-make-point 65 96) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 8800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 300 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 17 172) (om-make-point 65 96) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 2800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 300 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 57 290) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 267 184) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 368 58) (quote "<= atenção: na caixa sound, a unidade de tempo é seg.; pra traduzir pr'um chord-seq, precisa passar pra miliseg., ou seja, multiplicar por 1000.") "" (om-make-point 584 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 504 55) (quote "<= atenção: os onsets da caixa sound saem com decimais (e os retêm mesmo depois da multiplicação por 1000); pra traduzir pr'um chord-seq, precisa eliminar esses decimais, através de um om//, por ex.") "" (om-make-point 441 298) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 399 295) nil nil nil nil 2) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 461 232) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 485 192) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 509 225) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 37 562) (om-make-point 1017 131) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4780) (4590) (6646) (2982) (7058) (7863) (7839) (8526) (6396) (8484) (5442) (6922) (4941) (3903) (6603) (5953) (6107) (4995) (4398) (5908) (5126) (5929) (7847) (5440) (6946) (3444) (7385) (3652) (4035) (8353) (4777) (6069) (5889) (5545) (8043) (6563) (3809) (8029) (5879) (6426) (8437) (8620) (7591) (4978) (6808) (4449) (6335) (4790) (4638) (6881) (3558) (7948) (6971) (7652) (8689) (7679) (3390) (8225) (4820) (2871) (7707) (6244) (4661) (8120) (5261) (5712) (7119) (7911) (2891) (3487) (8097) (6833) (3118) (7306) (4913) (4099) (7338) (5328) (6464) (4034) (6809) (5672) (4106) (7259) (8221) (8570) (5848) (8646) (5594) (4881) (3559) (8760) (7206) (6362) (6469) (3577) (6096) (7091) (8107) (3626) (3502) (8454) (5872) (5529) (7070) (3893) (5429) (7072) (8458) (5366) (3235) (5018) (7541) (3630) (7666) (4649) (8223) (6428) (6678) (3647) (6049) (7857) (3717) (4189) (7750) (4544) (5847) (6215) (6006) (6728) (5609) (4985) (3669) (5109) (3666) (5052) (5576) (6764) (4709) (7992) (4115) (6523) (6441) (8770) (8616) (4316) (3234) (5951) (8213) (6624) (4150) (4296) (6674) (6435) (5687) (3322) (2820) (6395) (3961) (7309) (3392) (2980) (7649) (6681) (7598) (3298) (7510) (4085) (3181) (5083) (5373) (6480) (4501) (4997) (8185) (5730) (7992) (7716) (2911) (4564) (4081) (7376) (5154) (7960) (6429) (4473) (7550) (3906) (4164) (4401) (6861) (7145) (6992) (4564) (7795) (2863) (3277) (8154) (6185) (3507) (8150) (6062) (4616) (8545) (8726) (7290) (6473) (4703) (8000) (8712) (4566) (8399) (5562) (6009) (8377) (7812) (4052) (5675) (7661) (4415) (7503) (7470) (4528) (5072) (3274) (8296) (4885) (5562) (6674) (3402) (4534) (6915) (3462) (6330) (4319) (4777) (8363) (7536) (6080) (6365) (5064) (3406) (5779) (3103) (6170) (3512) (3903) (5678) (7930) (5588) (6679) (6027) (7427) (5881) (6904))) :lonset (quote (0 10 22 26 66 76 78 82 82 84 94 96 106 114 118 122 128 130 132 134 136 138 140 144 152 156 160 166 168 170 174 180 186 188 194 198 200 202 208 212 216 220 224 238 244 248 254 258 260 264 268 270 272 276 278 292 296 306 308 312 318 320 324 326 328 334 336 340 342 346 354 354 356 360 364 368 372 374 378 384 388 390 392 398 400 402 406 410 416 422 428 432 436 438 446 448 452 458 464 466 468 472 476 478 486 494 498 502 506 508 510 516 518 518 520 524 526 528 530 536 536 540 542 546 548 552 554 556 558 560 564 566 568 572 576 578 582 586 590 592 594 598 600 604 606 608 612 614 618 624 630 632 640 642 646 652 654 660 662 666 668 672 676 686 690 696 700 704 708 712 712 714 718 722 726 728 734 738 738 742 746 752 756 760 764 766 766 770 774 780 784 788 792 796 796 804 806 810 814 818 822 824 828 830 832 834 842 844 846 850 852 852 856 858 862 862 868 868 872 874 876 878 880 882 884 886 888 892 894 898 900 902 904 906 910 912 916 918 920 924 926 928 930 932 934 936 940 940 942 944 948 950 952 956 958 988)) :ldur (quote ((2) (4) (2) (2) (4) (2) (2) (0) (4) (2) (2) (2) (2) (2) (2) (4) (2) (2) (4) (2) (4) (2) (2) (2) (2) (4) (2) (4) (2) (2) (2) (2) (2) (2) (2) (2) (4) (0) (6) (0) (4) (2) (4) (0) (2) (4) (2) (2) (8) (2) (2) (2) (4) (2) (4) (4) (4) (4) (2) (8) (0) (4) (4) (4) (4) (6) (4) (4) (0) (2) (4) (4) (4) (6) (4) (4) (0) (4) (6) (2) (4) (4) (4) (2) (0) (4) (4) (4) (4) (6) (4) (10) (4) (4) (2) (4) (2) (6) (2) (6) (4) (2) (8) (2) (6) (6) (4) (2) (4) (2) (2) (4) (2) (4) (2) (2) (4) (4) (4) (2) (4) (4) (2) (2) (4) (2) (2) (2) (2) (4) (2) (4) (2) (4) (0) (6) (2) (2) (2) (4) (2) (0) (2) (6) (2) (2) (4) (4) (4) (8) (8) (2) (4) (4) (2) (2) (6) (6) (4) (2) (8) (2) (4) (4) (6) (6) (6) (4) (4) (2) (2) (6) (2) (2) (4) (6) (4) (2) (4) (4) (4) (4) (2) (0) (8) (4) (2) (4) (2) (6) (2) (2) (4) (2) (6) (4) (2) (10) (4) (14) (2) (4) (2) (2) (4) (4) (2) (4) (6) (4) (6) (14) (4) (4) (4) (4) (6) (2) (2) (4) (6) (2) (6) (6) (4) (2) (2) (6) (4) (4) (8) (4) (2) (2) (2) (2) (2) (2) (6) (4) (4) (8) (10) (2) (10) (2) (0) (4) (2) (10) (40) (4) (12) (10) (10))) :lvel (quote ((28) (43) (43) (55) (32) (89) (40) (38) (70) (81) (38) (66) (72) (53) (49) (52) (42) (59) (56) (60) (17) (71) (18) (66) (77) (50) (20) (87) (85) (88) (68) (16) (37) (12) (65) (56) (37) (44) (83) (78) (31) (87) (84) (27) (17) (36) (21) (24) (69) (53) (16) (24) (86) (57) (59) (33) (85) (88) (81) (51) (57) (44) (28) (63) (28) (53) (51) (67) (84) (27) (11) (73) (27) (40) (33) (42) (23) (35) (12) (49) (34) (72) (36) (30) (71) (46) (52) (41) (68) (88) (62) (59) (75) (41) (37) (10) (63) (22) (76) (40) (66) (78) (60) (60) (29) (64) (76) (59) (19) (87) (30) (58) (37) (76) (24) (85) (47) (45) (74) (87) (36) (89) (83) (84) (55) (69) (38) (86) (89) (65) (61) (82) (73) (88) (63) (21) (25) (68) (56) (54) (54) (74) (26) (55) (69) (33) (48) (85) (33) (81) (86) (27) (18) (17) (74) (88) (37) (87) (31) (69) (20) (89) (77) (79) (78) (90) (32) (65) (26) (40) (43) (22) (21) (84) (79) (89) (46) (50) (82) (26) (54) (74) (82) (58) (49) (73) (84) (20) (57) (79) (75) (61) (76) (70) (53) (61) (56) (47) (52) (61) (82) (54) (83) (82) (21) (83) (49) (43) (81) (41) (58) (45) (52) (66) (80) (44) (21) (46) (62) (22) (47) (48) (72) (83) (57) (71) (79) (39) (32) (40) (88) (39) (56) (53) (64) (55) (80) (75) (25) (86) (70) (81) (64) (60) (79) (85) (90) (72) (57) (23) (80) (42) (17) (32) (23))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((14) (4) (5) (7) (15) (3) (7) (15) (9) (12) (12) (9) (11) (13) (14) (13) (6) (4) (12) (16) (14) (11) (9) (11) (6) (8) (7) (12) (13) (5) (15) (1) (2) (13) (8) (4) (4) (4) (12) (8) (5) (8) (12) (1) (4) (12) (15) (8) (8) (13) (13) (14) (7) (13) (15) (6) (5) (1) (3) (9) (1) (8) (15) (5) (6) (4) (15) (5) (9) (12) (12) (12) (11) (15) (14) (9) (6) (12) (8) (9) (8) (13) (6) (6) (9) (16) (4) (6) (14) (1) (7) (16) (7) (8) (4) (5) (12) (2) (16) (15) (11) (4) (2) (6) (12) (1) (3) (5) (14) (9) (4) (15) (5) (3) (3) (1) (5) (7) (9) (4) (16) (4) (9) (8) (5) (2) (5) (12) (2) (7) (12) (11) (4) (3) (9) (16) (4) (8) (12) (4) (15) (12) (1) (3) (11) (11) (14) (12) (8) (6) (8) (6) (7) (9) (7) (9) (4) (1) (11) (7) (9) (5) (5) (12) (6) (5) (4) (15) (16) (1) (15) (15) (14) (11) (6) (13) (6) (2) (14) (4) (5) (7) (8) (1) (12) (2) (16) (5) (16) (9) (6) (8) (13) (5) (13) (11) (12) (5) (8) (3) (15) (8) (11) (13) (4) (11) (12) (9) (12) (12) (7) (15) (6) (11) (2) (15) (13) (9) (2) (2) (11) (9) (1) (16) (9) (12) (9) (14) (15) (6) (14) (13) (7) (12) (4) (11) (5) (2) (11) (11) (9) (8) (14) (4) (13) (9) (12) (16) (11) (7) (12) (8) (16) (2) (11))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1/100 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 511 167) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 560 203) nil nil nil nil 1) (om-load-editor-box1 "16 Ben - jorge da capadocia-sem intro.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 62 3) (om-make-point 1062 154) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Music" "iTunes" "iTunes Media" "Music" "Unknown Artist" "Unknown Album")) :device nil :host nil :name "16 Ben - jorge da capadocia-sem intro" :type "wav") 1))) (when thesound (setf (markers thesound) (quote (1.976 3.751 4.354 11.321 12.695 13.264 13.699 13.833 14.068 15.676 16.111 17.987 19.327 19.829 20.398 21.403 21.705 22.107 22.475 22.743 23.145 23.547 24.183 25.423 26.193 26.963 27.7 28.203 28.538 29.074 30.045 31.083 31.519 32.49 33.227 33.562 33.964 34.967 35.436 36.006 36.91 37.446 39.791 40.729 41.666 42.504 43.107 43.475 44.078 44.748 45.183 45.485 46.322 46.657 48.801 49.638 51.011 51.547 52.083 53.122 53.39 54.093 54.562 54.964 55.801 56.203 56.84 57.275 57.71 59.084 59.318 59.653 60.089 60.858 61.461 62.031 62.365 63.236 64.141 64.744 65.179 65.581 66.619 66.854 67.289 67.825 68.663 69.366 70.371 71.443 72.146 72.682 73.285 74.625 74.893 75.629 76.4 77.539 77.974 78.309 78.778 79.448 79.816 81.089 82.63 83.132 83.836 84.472 84.841 85.175 86.046 86.381 86.649 86.884 87.386 87.853 88.289 88.59 89.36 89.662 90.064 90.633 91.169 91.404 92.208 92.509 92.743 93.078 93.447 94.15 94.485 94.753 95.624 96.16 96.595 97.198 97.734 98.505 98.773 99.174 99.844 100.28 100.715 101.017 101.452 102.022 102.356 103.06 104.266 105.204 105.605 106.778 107.247 107.783 108.72 109.256 110.094 110.529 111.166 111.635 112.237 112.807 114.381 115.018 116.089 116.926 117.428 118.098 118.667 118.969 119.27 119.706 120.376 121.046 121.582 122.586 123.055 123.323 123.859 124.429 125.433 126.237 126.74 127.41 127.711 127.946 128.348 129.252 130.123 130.86 131.63 132.032 132.668 132.936 134.008 134.611 135.147 135.816 136.66 137.163 137.571 138.137 138.451 138.891 139.268 140.462 140.965 141.311 141.719 142.065 142.253 142.725 143.29 143.73 143.919 144.673 144.956 145.364 145.898 146.15 146.464 146.873 147.218 147.564 147.972 148.287 148.852 149.135 149.701 150.046 150.423 150.863 151.303 151.743 152.152 152.686 153.252 153.566 154.006 154.509 154.823 155.011 155.357 155.86 156.048 156.677 156.96 157.242 157.62 158.154 158.405 158.688 159.442 159.882)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "16 Ben - jorge da capadocia-sem intro.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1267 456) (om-make-point 13 97) 0 1 (quote t) nil 0)) t nil nil t))) (quote ((21 0 1 0 nil 0) (4 0 5 0 nil 0) (5 0 9 0 nil 0) (0 0 9 1 nil 0) (15 0 11 0 nil 0) (18 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0) (28 0 18 0 nil 0) (17 0 18 1 nil 0) (20 0 19 0 nil 0) (18 0 20 0 nil 0) (24 0 21 0 nil 0) (25 0 21 1 nil 0) (23 1 24 0 nil 0) (22 1 24 1 nil 0) (28 0 25 0 nil 0) (29 0 28 0 nil 0) (31 0 29 0 nil 0) (30 0 31 0 nil 0) (34 0 31 1 nil 0) (21 0 32 1 nil 0) (18 0 32 2 nil 0) (19 0 32 3 nil 0) (11 0 32 4 nil 0) (1 0 32 6 nil 0) (33 0 34 0 nil 0) (35 2 34 1 nil 0))) nil 6.0602))
