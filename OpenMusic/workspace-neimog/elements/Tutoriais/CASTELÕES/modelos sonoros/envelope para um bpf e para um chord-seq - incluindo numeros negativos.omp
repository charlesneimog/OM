; OM File Header - Saved 2013/10/16 18:38:40
; (6.0602 :patc (om-make-point 10 10) (om-make-point 30 22) (om-make-point 1250 696) "" 183 0 "2013/10/04 22:27:44" "2013/10/09 12:46:13")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../../Documents/scores (partituras originais)/Acusmatica & video/Estudo de plagio # 5 - 2011/samples editados/percussão/perc Chico Science - Maracatu Atômico.aiff"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "envelope - extraindo o envelope de um som para um bpf e depois para um chord-seq" (quote ((om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 1067 180) (om-make-point 233 30) (list 1 2 3 4 5 6 7 8 9 11 12 13 14 15 16) "(1 2 3 4 5 6 7 8 9 11 12 13 14 15 16)" nil) (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>15ch." (om-load-patch-abs1 "Orq. 5 reg.=>15ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1 a 3") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro sub-grave) aos midi chs 4 a 6") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 7 a 9") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 14 a 16") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 11 e 13") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 34 30) 13 "13" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 34 30) 16 "16" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 14 "14" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 683 516)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1062 489) nil (list (list 2 1 2 3 1 1 7 5 8 1 5 11 8 8 4 1 5 6 4 6 5 1 2 2 3 6 1 5 3 6 3 2 2 1 1 3 1 3 5 4 2 1 3 1 1 3 5 4 4 1 6 5 3 2 3 2 2 3 3 1 4 1 3 2 3 3 3 3 1 3 3 3 6 3 3 3 3 1 1 6 3 2 5 3 3 1 3 4 9 9 5 3 6 1 1 2 2 3 3 6 5 6 1 3 2 6 7 6 9 4 1 2 1 3 1 1 3 2 4 1 2 2 2 6 4 3 1 1 8 6 3 4 1 1 1 6 5 6 4 5 5 4 4 5 1 4 5 5 3 2 2 1 3 1 2 2 1 3 3 1 5 6 5 5 3 1 3 6 1 2 3 1 5 2 2 1 6 7 5 3 4 4 2 4 2 1 4 3 5 8 1 7 1 6 9 5 1 1 1 2 1 2 2 1 1 6 3 5 6 5 4 3 4 4 3 3 3 1 3 1 3 3 6 7 4 6 2 2 4 6 3 6 6 2 2 2 2 3 1 5 1 2 1 6 5 1 2 2 2 2 6 3 5 1 1 1 3 8 4 4 6 5 4 2 4 5 6 5 3 1 1 2 5 2 2 6 5 2 5 1 3 3 4 7 1 1 1 2 1 6 1 2 4 3 5 2 2 1 4 2 3 2 2 1 1 1 3 1 1 1 1 2 1 3 3 2 9 3 2 4 5 5 1 3 2 3 1 2 2 5 5 2 1 1 1 3 1 3 6 3 3 3 1 1 3 2 6 1 5 2 8 2 5 3 1 2 6 1 3 1 2 6 7 4 5 4 1 6 7 7 3 3 6 3 3 3 3 3 6 6 1 1 2 2 3 1 3 4 6 3 2 3 6 2 6 2 3 3 2 1 2 3 1 2 3 3 2 2 5 1 1 2 2 2 1 3 6 1 1 1 3 3 1 2 2 3 5 5 2 5 1 5 6 1 5 2 6 2 2 6 6 3 5 4 1 3 3 3 1 4 1 1 2 5 4 4 11 3 1 4 9 3 4 3 3 5 6 5 4 6 3 1 2 1 3 1 1 6 3 3 3 2 3 3 3 3 2 3 1 1 1 1 3 3 3 1 2 4 1 3 1 5 3 5 2 3 1 3 3 3 3 3 1 2 3 2 3 4 3 1 6 2 2 6 5 5 2 5 2 1 3 1 12 2 4 2 4 2 6 9 5 2 1 3 2 5 6 13 6 2 3 6 1 2 1 3 1 2 4 3 2 5 5 6 1 6 3 3 1 2 2 3 1 3 1 2 3 2 3 3 3 1 1 2 2 1 3 2 1 1 3 2 2 3 2 2 3 3 4 1 2 2 1 1 6 2 5 3 5 2 2 2 4 4 3 1 4 3 2 2 4 2 1 3 3 3 1 5 2 3 2 2 6 15 6 5 5 7 4 5 6 3 4 2 1 2 1 5 1 2 1 1 2 2 3 6 1 1 2 3 2 1 3 5 5 3 4 2 6 1 1 4 3 2 2 5 2 2 1 3 1 3 1 1 2 1 3 1 3 3 4 1 2 3 1 4 3 3 4 3 2 2 3 2 3 1 2 3 4 1 1 3 5 9 7 4 2 4 5 5 13 6 3 2 4 4 6 8 4 4 1 1 1 3 4 3 4 2 5 2 4 2 1 4 3 3 3 6 2 2 3 1 3 3 5 6 2 1 2 2 3 2 1 6 2 3 2 4 1 6 2 1 3 1 3 3 2 3 3 4 4 6 3 3 2 6 6 1 5 4 2 2 3 3 2 1 1 1 2 1 2 3 1 2 1 3 2 1 9 5 2 9 13 9 1 6 4 3 4 6 6 5 1 2 1 1 6 1 2 1 2 4 2 1 2 3 6 3 5 3 1 2 11 2 5 5 5 3 4 1 1 2 2 2 2 1 5 3 3 1 6 2 1 3 3 2 3 2 2 1 2 1 2 3 3 3 5 3 6 1 3 3 2 1 3 1 1 3 3 2)) nil "Orq. 5 reg.=>15ch.") (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>8ch." (om-load-patch-abs1 "Orq. 5 reg.=>8ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro grave) aos midi chs 2") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 3 a 4") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 7 a 8") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 5 a 6") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 673 525)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1025 414) nil (list (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7 2 4 2 2 2 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 3 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 4 2 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 4 4 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 2 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 4 4 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 4 3 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 3 2 1 1 1 1 1 1 1 1 1 5 1 2 2 2 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 2 3 1 4 1 4 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 2 1 2 1 1 1 1 1 1 4 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) nil "Orq. 5 reg.=>8ch.") (om-load-boxcall (quote bastype) "aux31 2" (quote t) (quote nil) (om-make-point 831 200) (om-make-point 184 30) (list 105 106 99 32 12 11 9 112) "(105 106 99 32 12 11 9 112)" nil) (om-load-boxcall (quote genfun) "OM-ROUND 4" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 669 487) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND 3" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 162 475) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 439 287) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 372 494) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 540 440) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 456 465) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 456 353) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM-SCALE 4" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 438 392) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 326 386) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 333 446) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 164 33) (quote "<= onsets min. e max.") "" (om-make-point 520 282) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 476 286) (om-make-point 41 30) 222 "222" nil) (om-load-boxcall (quote genfun) "OM-SCALE 3" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 345 313) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 228 70) (quote "<= Número de amostras do envelope do som original (equivalente ao número de notas geradas no chord-seq)") "" (om-make-point 564 171) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 40 432) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 374 151) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 521 176) (om-make-point 41 30) 444 "444" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 11 188) (om-make-point 418 111) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0 2100.0 2200.0 2300.0 2400.0 2500.0 2600.0 2700.0 2800.0 2900.0 3000.0 3100.0 3200.0 3300.0 3400.0 3500.0 3600.0 3700.0 3800.0 3900.0 4000.0 4100.0 4200.0 4300.0 4400.0 4500.0 4600.0 4700.0 4800.0 4900.0 5000.0 5100.0 5200.0 5300.0 5400.0 5500.0 5600.0 5700.0 5800.0 5900.0 6000.0 6100.0 6200.0 6300.0 6400.0 6500.0 6600.0 6700.0 6800.0 6900.0 7000.0 7100.0 7200.0 7300.0 7400.0 7500.0 7600.0 7700.0 7800.0 7900.0 8000.0 8100.0 8200.0 8300.0 8400.0 8500.0 8600.0 8700.0 8800.0 8900.0 9000.0 9100.0 9200.0 9300.0 9400.0 9500.0 9600.0 9700.0 9800.0 9900.0 10000.0 10100.0 10200.0 10300.0 10400.0 10500.0 10600.0 10700.0 10800.0 10900.0 11000.0 11100.0 11200.0 11300.0 11400.0 11500.0 11600.0 11700.0 11800.0 11900.0 12000.0 12100.0 12200.0 12300.0 12400.0 12500.0 12600.0 12700.0 12800.0 12900.0 13000.0 13100.0 13200.0 13300.0 13400.0 13500.0 13600.0 13700.0 13800.0 13900.0 14000.0 14100.0 14200.0 14300.0 14400.0 14500.0 14600.0 14700.0 14800.0 14900.0 15000.0 15100.0 15200.0 15300.0 15400.0 15500.0 15600.0 15700.0 15800.0 15900.0 16000.0 16100.0 16200.0 16300.0 16400.0 16500.0 16600.0 16700.0 16800.0 16900.0 17000.0 17100.0 17200.0 17300.0 17400.0 17500.0 17600.0 17700.0 17800.0 17900.0 18000.0 18100.0 18200.0 18300.0 18400.0 18500.0 18600.0 18700.0 18800.0 18900.0 19000.0 19100.0 19200.0 19300.0 19400.0 19500.0 19600.0 19700.0 19800.0 19900.0 20000.0 20100.0 20200.0 20300.0 20400.0 20500.0 20600.0 20700.0 20800.0 20900.0 21000.0 21100.0 21200.0 21300.0 21400.0 21500.0 21600.0 21700.0 21800.0 21900.0 22000.0 22100.0 22200.0 22300.0 22400.0 22500.0 22600.0 22700.0 22800.0 22900.0 23000.0 23100.0 23200.0 23300.0 23400.0 23500.0 23600.0 23700.0 23800.0 23900.0 24000.0 24100.0 24200.0 24300.0 24400.0 24500.0 24600.0 24700.0 24800.0 24900.0 25000.0 25100.0 25200.0 25300.0 25400.0 25500.0 25600.0 25700.0 25800.0 25900.0 26000.0 26100.0 26200.0 26300.0 26400.0 26500.0 26600.0 26700.0 26800.0 26900.0 27000.0 27100.0 27200.0 27300.0 27400.0 27500.0 27600.0 27700.0 27800.0 27900.0 28000.0 28100.0 28200.0 28300.0 28400.0 28500.0 28600.0 28700.0 28800.0 28900.0 29000.0 29100.0 29200.0 29300.0 29400.0 29500.0 29600.0 29700.0 29800.0 29900.0 30000.0 30100.0 30200.0 30300.0 30400.0 30500.0 30600.0 30700.0 30800.0 30900.0 31000.0 31100.0 31200.0 31300.0 31400.0 31500.0 31600.0 31700.0 31800.0 31900.0 32000.0 32100.0 32200.0 32300.0 32400.0 32500.0 32600.0 32700.0 32800.0 32900.0 33000.0 33100.0 33200.0 33300.0 33400.0 33500.0 33600.0 33700.0 33800.0 33900.0 34000.0 34100.0 34200.0 34300.0 34400.0 34500.0 34600.0 34700.0 34800.0 34900.0 35000.0 35100.0 35200.0 35300.0 35400.0 35500.0 35600.0 35700.0 35800.0 35900.0 36000.0 36100.0 36200.0 36300.0 36400.0 36500.0 36600.0 36700.0 36800.0 36900.0 37000.0 37100.0 37200.0 37300.0 37400.0 37500.0 37600.0 37700.0 37800.0 37900.0 38000.0 38100.0 38200.0 38300.0 38400.0 38500.0 38600.0 38700.0 38800.0 38900.0 39000.0 39100.0 39200.0 39300.0 39400.0 39500.0 39600.0 39700.0 39800.0 39900.0 40000.0 40100.0 40200.0 40300.0 40400.0 40500.0 40600.0 40700.0 40800.0 40900.0 41000.0 41100.0 41200.0 41300.0 41400.0 41500.0 41600.0 41700.0 41800.0 41900.0 42000.0 42100.0 42200.0 42300.0 42400.0 42500.0 42600.0 42700.0 42800.0 42900.0 43000.0 43100.0 43200.0 43300.0 43400.0 43500.0 43600.0 43700.0 43800.0 43900.0 44000.0 44100.0 44200.0 44300.0)) (quote (0.0 0.003 -0.002 0.027 0.122 0.145 0.01 -0.2 -0.001 -0.106 -0.014 -0.041 -0.017 -0.019 0.061 0.044 -0.019 0.003 0.021 0.03 -0.036 -0.017 -0.005 -0.034 0.052 -0.006 -0.015 0.051 0.001 -0.011 -0.023 0.007 0.006 -0.017 0.015 -0.001 -0.033 -0.038 -0.037 -0.029 0.023 -0.022 0.081 0.02 0.094 0.039 -0.086 -0.069 -0.003 -0.017 -0.038 -0.198 -0.078 0.051 -0.137 -0.033 0.063 -0.033 -0.019 0.034 -0.027 0.022 0.011 -0.006 -0.051 -0.011 -0.028 0.015 0.04 0.033 0.023 0.019 -0.032 -0.025 0.021 -0.037 0.01 -0.014 -0.001 0.025 -0.058 0.034 0.062 0.074 -0.034 0.062 0.145 -0.003 -0.01 -0.064 0.009 -0.066 -0.033 0.026 0.006 -0.029 0.049 -0.063 -0.028 -0.05 -0.03 0.007 0.057 0.025 -0.013 0.044 -0.025 0.029 0.014 0.013 -0.03 -0.047 0.001 -0.07 -0.012 0.009 -0.021 -0.059 -0.021 0.025 0.005 -0.045 -0.046 0.043 0.025 -0.042 0.022 0.032 -0.071 0.009 -0.206 -0.03 0.039 -0.001 -0.003 -0.016 0.046 0.023 0.05 -0.047 0.032 0.022 0.014 0.04 0.034 -0.005 -0.091 -0.032 0.046 -0.046 -0.004 -0.041 -0.023 0.002 0.006 0.003 -0.003 -0.012 -0.092 -0.013 -0.1 0.024 -0.02 -0.045 -0.003 -0.017 0.014 0.026 0.056 0.008 0.021 0.007 0.033 -0.023 -0.128 -0.011 -0.04 0.023 -0.004 0.003 0.145 0.033 0.021 0.078 0.095 -0.01 -0.107 -0.009 -0.004 -0.024 0.025 -0.031 -0.063 -0.022 0.035 0.002 -0.025 0.017 -0.016 -0.025 0.003 0.004 0.07 0.04 0.023 -0.026 -0.02 -0.028 -0.053 0.042 0.003 -0.019 -0.094 -0.06 -0.092 0.024 0.035 -0.103 0.018 -0.012 -0.013 0.017 0.032 0.029 0.011 0.033 -0.038 0.017 0.1 -0.017 -0.027 0.061 0.036 0.003 -0.065 -0.016 -0.005 -0.012 -0.008 -0.033 -0.013 -0.041 0.017 0.01 0.08 0.015 -0.029 0.028 -0.038 0.023 -0.006 -0.05 0.038 -0.001 0.007 -0.015 -0.003 -0.004 0.031 -0.012 0.009 -0.053 -0.109 -0.084 -0.009 -0.038 -0.065 -0.082 -0.024 0.016 0.048 -0.006 -0.011 -0.144 0.04 -0.078 -0.013 0.0 0.022 0.0 -0.03 0.033 -0.007 0.035 0.025 0.01 0.001 0.027 0.014 -0.009 0.013 -0.029 0.021 -0.025 0.003 -0.036 0.008 0.029 0.076 0.002 -0.079 0.0 0.01 0.099 0.045 -0.003 0.0 -0.016 0.019 -0.01 -0.025 -0.03 0.001 -0.044 0.006 0.061 -0.101 -0.025 -0.051 0.073 -0.011 -0.001 -0.037 0.017 0.021 0.0 -0.028 -0.046 -0.002 -0.037 0.018 0.012 -0.013 0.009 -0.036 -0.028 -0.019 -0.049 -0.003 0.013 -0.01 -0.012 -0.063 -0.022 -0.024 -0.013 0.009 0.034 0.009 -0.035 -0.006 -0.014 0.035 -0.023 -0.016 -0.016 0.042 0.186 0.042 -0.077 -0.099 0.1 0.068 -0.07 -0.004 -0.081 -0.022 -0.046 0.006 -0.014 0.008 -0.006 0.013 0.02 -0.008 0.017 0.012 0.011 0.01 -0.001 -0.027 -0.058 0.008 -0.036 0.01 -0.002 0.015 -0.005 0.071 0.057 0.092 0.039 0.042 -0.04 -0.004 0.025 0.003 0.016 -0.011 0.042 -0.004 0.03 0.035 0.043 0.031 -0.009 0.002 -0.019 0.005 -0.026 0.046 -0.006 -0.027 -0.047 0.015 0.001 -0.027 0.046 -0.002 -0.013 0.091 0.096 0.008 0.006 -0.041 0.043 -0.015 -0.022 0.012 -0.006 0.009 0.018 0.019 -0.006 -0.03 0.015 -0.023 -0.061 -0.067 0.002 -0.027 0.033 0.022 -0.015)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 954 392))) t nil nil nil) (om-load-boxcall (quote genfun) "SOUND-POINTS" (quote sound-points) (quote ((om-load-inputfun (quote input-funbox) "a sound object" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of points" "NUM" 1000))) (om-make-point 436 193) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 1099 277) (om-make-point 27 30) 9 "9" nil) (om-load-boxcall (quote abstraction) "Instrumentacao ALEA" (om-load-patch-abs1 "Instrumentacao ALEA" (quote ((om-load-boxout "output" 0 (om-make-point 381 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 424 76) "" nil nil nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 373 304) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 259 219) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 223 150) (om-make-point 41 30) 128 "128" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 187 157) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 199 191) nil nil nil nil 1))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 993 297) nil (list (list 73 100 110 9 70 34 108 88 54)) nil "Instrumentacao ALEA") (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= No. de instrumentos") "" (om-make-point 1124 275) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 1079 160) (om-make-point 114 30) (list 1 2 3 4 5 6 7 8) "(1 2 3 4 5 6 7 8)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 842 167) (om-make-point 182 30) (list 40 44 45 24 40 44 24 40 24) "(40 44 45 24 40 44 24 40 24)" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1018 207) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>8 ch." (om-load-patch-abs1 "Orq. 3 reg.=>8 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1 a 2") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 6 a 8") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 3 a 5") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 670 518)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 938 476) nil (list (list 6 7 5 7 8 9 7 4 5 6 5 7 7 6 5 5 6 7 7 7 5 7 6 5 7 5 5 7 6 5 6 5 5 6 6 6 7 5 7 6 5 5 6 5 8 5 5 7 5 7 6 1 6 6 1 7 6 5 5 5 7 7 6 6 5 5 7 6 5 5 5 7 6 5 6 5 7 6 6 6 5 7 6 7 5 6 8 6 6 5 5 5 7 6 7 6 6 6 5 7 6 5 6 7 5 7 5 6 7 5 7 6 5 5 7 6 7 5 6 6 5 6 7 6 5 5 5 5 5 5 3 5 6 5 6 7 6 6 6 5 6 7 7 5 6 7 5 6 7 6 6 6 5 7 6 6 6 5 7 5 6 7 7 6 6 5 5 6 6 6 5 7 7 7 1 6 6 7 6 6 9 7 5 6 9 7 7 6 6 7 7 7 7 5 5 6 6 6 7 5 7 7 5 6 5 6 6 6 5 5 7 6 6 7 5 6 7 6 7 6 6 5 6 5 7 7 5 7 9 7 7 7 6 5 6 5 7 6 5 6 5 5 7 5 7 5 7 7 7 6 5 5 6 7 6 5 5 7 5 5 7 6 3 5 7 5 6 6 5 5 6 5 5 1 6 6 5 6 7 7 7 7 7 6 5 5 6 7 6 6 5 6 5 7 5 5 5 6 5 5 5 6 6 8 7 7 7 7 6 6 7 5 6 5 5 6 5 5 7 5 7 6 5 5 7 6 5 5 5 5 7 7 5 6 7 5 7 6 6 5 6 6 6 5 6 6 5 6 6 5 5 6 5 7 7 6 7 8 7 6 5 9 6 7 5 6 6 6 6 6 6 6 7 5 5 6 7 7 5 5 7 7 6 5 7 5 7 6 5 6 9 7 7 6 7 5 6 5 7 5 7 6 6 7 7 7 5 6 7 5 5 7 5 6 7 7 7 6 5 7 9 9 6 5 7 7 6 7 7 6 5 6 5 5 6 7 7 7 6 7 5 6 7 7)) nil "Orq. 3 reg.=>8 ch.") (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 742 475) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 207 49) (quote "<= Dyns mín. e máx.") "" (om-make-point 760 339) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 724 343) (om-make-point 34 30) 90 "90" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 687 344) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 668 389) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 207 49) (quote "<= durs min. e max.") "" (om-make-point 521 351) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 485 352) (om-make-point 34 30) 15 "15" nil) (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 137 334) (om-make-point 69 80) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 8800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 22) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 70 333) (om-make-point 65 77) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 2800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 22) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 37 562) (om-make-point 1017 131) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5953) (5999) (5922) (6366) (7820) (8172) (6106) (2892) (5938) (4331) (5739) (5326) (5693) (5662) (6887) (6627) (5662) (5999) (6274) (6412) (5402) (5693) (5877) (5433) (6749) (5861) (5723) (6734) (5968) (5785) (5601) (6060) (6045) (5693) (6183) (5938) (5448) (5371) (5387) (5509) (6305) (5616) (7193) (6259) (7392) (6550) (4637) (4897) (5907) (5693) (5371) (2922) (4759) (6734) (3856) (5448) (6917) (5448) (5662) (6473) (5540) (6290) (6121) (5861) (5172) (5785) (5524) (6183) (6565) (6458) (6305) (6244) (5463) (5570) (6274) (5387) (6106) (5739) (5938) (6336) (5065) (6473) (6902) (7086) (5433) (6902) (8172) (5907) (5800) (4973) (6091) (4943) (5448) (6351) (6045) (5509) (6703) (4989) (5524) (5188) (5494) (6060) (6826) (6336) (5754) (6627) (5570) (6397) (6167) (6152) (5494) (5234) (5968) (4882) (5769) (6091) (5632) (5050) (5632) (6336) (6030) (5264) (5249) (6611) (6336) (5310) (6290) (6443) (4866) (6091) (2800) (5494) (6550) (5938) (5907) (5708) (6657) (6305) (6718) (5234) (6443) (6290) (6167) (6565) (6473) (5877) (4560) (5463) (6657) (5249) (5892) (5326) (5601) (5984) (6045) (5999) (5907) (5769) (4545) (5754) (4422) (6320) (5647) (5264) (5907) (5693) (6167) (6351) (6810) (6076) (6274) (6060) (6458) (5601) (3994) (5785) (5341) (6305) (5892) (5999) (8172) (6458) (6274) (7147) (7407) (5800) (4315) (5815) (5892) (5586) (6336) (5479) (4989) (5616) (6489) (5984) (5570) (6213) (5708) (5570) (5999) (6014) (7024) (6565) (6305) (5555) (5647) (5524) (5142) (6596) (5999) (5662) (4514) (5035) (4545) (6320) (6489) (4377) (6229) (5769) (5754) (6213) (6443) (6397) (6121) (6458) (5371) (6213) (7484) (5693) (5540) (6887) (6504) (5999) (4958) (5708) (5877) (5769) (5831) (5448) (5754) (5326) (6213) (6106) (7178) (6183) (5509) (6382) (5371) (6305) (5861) (5188) (6535) (5938) (6060) (5723) (5907) (5892) (6428) (5769) (6091) (5142) (4285) (4667) (5815) (5371) (4958) (4698) (5586) (6198) (6688) (5861) (5785) (3749) (6565) (4759) (5754) (5953) (6290) (5953) (5494) (6458) (5846) (6489) (6336) (6106) (5968) (6366) (6167) (5815) (6152) (5509) (6274) (5570) (5999) (5402) (6076) (6397) (7116) (5984) (4744) (5953) (6106) (7468) (6642) (5907) (5953) (5708) (6244) (5800) (5570) (5494) (5968) (5280) (6045) (6887) (4407) (5570) (5172) (7070) (5785) (5938) (5387) (6213) (6274) (5953) (5524) (5249) (5922) (5387) (6229) (6137) (5754) (6091) (5402) (5524) (5662) (5203) (5907) (6152) (5800) (5769) (4989) (5616) (5586) (5754) (6091) (6473) (6091) (5417) (5861) (5739) (6489) (5601) (5708) (5708) (6596) (8800) (6596) (4774) (4438) (7484) (6994) (4882) (5892) (4713) (5616) (5249) (6045) (5739) (6076) (5861) (6152) (6259) (5831) (6213) (6137) (6121) (6106) (5938) (5540) (5065) (6076) (5402) (6106) (5922) (6183) (5877) (7040) (6826) (7361) (6550) (6596) (5341) (5892) (6336) (5999) (6198) (5785) (6596) (5892) (6412) (6489) (6611) (6428) (5815) (5984) (5662) (6030) (5555) (6657) (5861) (5540) (5234) (6183) (5968) (5540) (6657) (5922) (5754) (7346) (7422) (6076) (6045) (5326) (6611) (5723) (5616) (6137) (5861) (6091) (6229) (6244) (5861) (5494) (6183) (5601) (5019) (4928) (5984) (5540) (6458) (6290) (5723))) :lonset (quoteldur (quote ((8) (8) (5) (9) (7) (10) (8) (8) (8) (8) (9) (9) (7) (7) (11) (9) (8) (8) (8) (8) (8) (9) (10) (8) (10) (10) (12) (10) (9) (9) (6) (9) (9) (9) (9) (10) (6) (8) (9) (8) (9) (2) (11) (9) (8) (9) (7) (8) (9) (10) (8) (9) (8) (9) (11) (6) (9) (10) (8) (10) (14) (9) (8) (8) (9) (9) (7) (15) (9) (10) (8) (10) (8) (8) (9) (13) (10) (11) (9) (11) (9) (8) (8) (9) (9) (8) (9) (9) (8) (9) (8) (9) (10) (9) (10) (5) (9) (10) (9) (10) (8) (10) (8) (8) (8) (10) (10) (9) (7) (9) (9) (9) (10) (9) (9) (9) (9) (8) (10) (9) (10) (10) (7) (12) (9) (8) (10) (10) (10) (9) (7) (10) (7) (8) (9) (9) (7) (8) (10) (6) (6) (10) (7) (9) (10) (12) (9) (9) (10) (9) (10) (9) (9) (8) (6) (5) (14) (10) (9) (10) (9) (10) (9) (8) (7) (8) (8) (10) (8) (9) (9) (9) (10) (8) (8) (7) (10) (7) (10) (7) (7) (6) (8) (9) (9) (8) (6) (9) (9) (8) (8) (10) (9) (8) (8) (10) (8) (10) (9) (9) (9) (11) (10) (8) (10) (7) (7) (10) (10) (4) (8) (8) (10) (8) (9) (8) (12) (8) (7) (9) (10) (9) (8) (9) (11) (10) (9) (9) (9) (9) (9) (9) (10) (8) (8) (9) (8) (9) (10) (8) (9) (7) (9) (8) (8) (11) (10) (9) (10) (12) (9) (10) (9) (7) (8) (9) (8) (8) (6) (7) (9) (9) (8) (9) (8) (9) (8) (8) (8) (9) (7) (8) (8) (8) (8) (7) (10) (8) (10) (8) (8) (12) (11) (9) (8) (10) (7) (9) (9) (9) (9) (9) (10) (10) (12) (9) (9) (10) (7) (9) (8) (9) (8) (9) (6) (7) (8) (11) (9) (8) (11) (9) (9) (8) (9) (6) (7) (7) (8) (10) (8) (10) (9) (6) (7) (6) (9) (9) (10) (9) (6) (9) (10) (9) (11) (8) (9) (9) (9) (9) (8) (8) (10) (10) (8) (7) (10) (11) (9) (9) (9) (8) (11) (10) (8) (7) (10) (12) (10) (8) (7) (9) (8) (8) (11) (8) (8) (8) (7) (10) (8) (8) (9) (9) (8) (10) (10) (8) (2) (8) (9) (9) (8) (10) (9) (4) (8) (11) (8) (7) (8) (9) (10) (9) (11) (10) (9) (14) (9) (8) (2) (10) (9) (9) (8) (10) (11) (9) (5) (8) (8) (12) (11) (10) (9) (10) (9) (9) (5) (7) (9) (11) (9) (8) (9) (8) (8) (10) (8) (6) (5) (9) (9) (9) (9) (10) (7) (8) (9) (8) (10) (7) (9) (8))) :lvel (quote ((46) (48) (50) (61) (47) (50) (61) (40) (46) (48) (57) (68) (53) (71) (52) (57) (59) (48) (57) (61) (44) (57) (44) (39) (46) (44) (49) (49) (62) (59) (55) (52) (57) (68) (59) (26) (54) (57) (59) (59) (55) (50) (48) (49) (45) (42) (45) (50) (43) (56) (51) (36) (30) (52) (60) (60) (46) (52) (51) (48) (60) (53) (57) (54) (57) (42) (47) (52) (54) (51) (48) (46) (47) (56) (46) (50) (55) (51) (61) (59) (47) (56) (32) (61) (57) (42) (49) (54) (54) (61) (49) (53) (56) (58) (44) (49) (71) (51) (12) (67) (51) (47) (43) (56) (50) (10) (33) (47) (50) (57) (58) (49) (45) (58) (50) (47) (53) (51) (42) (58) (47) (59) (44) (49) (58) (38) (54) (39) (57) (54) (72) (51) (47) (38) (62) (52) (53) (51) (56) (53) (49) (55) (32) (45) (51) (49) (57) (72) (55) (55) (54) (38) (55) (55) (44) (54) (46) (33) (48) (59) (51) (61) (56) (59) (49) (49) (46) (30) (51) (57) (50) (56) (52) (52) (46) (64) (49) (52) (56) (56) (42) (49) (60) (44) (43) (48) (52) (44) (59) (56) (65) (39) (46) (53) (50) (47) (51) (47) (57) (45) (47) (53) (60) (59) (47) (53) (58) (24) (39) (61) (51) (45) (59) (52) (47) (69) (50) (61) (45) (51) (51) (52) (54) (82) (51) (82) (47) (56) (41) (54) (50) (52) (49) (58) (43) (54) (50) (49) (59) (57) (47) (72) (56) (47) (53) (48) (44) (23) (52) (45) (49) (58) (51) (52) (54) (31) (47) (55) (44) (49) (36) (72) (50) (35) (52) (50) (51) (11) (50) (31) (53) (56) (61) (38) (64) (39) (54) (60) (60) (53) (54) (51) (33) (45) (56) (56) (54) (46) (47) (58) (53) (42) (66) (71) (33) (47) (59) (50) (46) (53) (55) (45) (56) (30) (59) (48) (54) (40) (53) (50) (48) (64) (55) (60) (57) (36) (41) (43) (61) (55) (59) (49) (52) (63) (53) (57) (49) (44) (36) (53) (44) (46) (77) (82) (57) (71) (40) (52) (51) (38) (52) (35) (57) (36) (53) (68) (54) (47) (52) (52) (53) (67) (53) (48) (52) (46) (42) (51) (52) (48) (59) (62) (54) (61) (51) (54) (65) (49) (50) (43) (54) (50) (39) (57) (48) (34) (47) (46) (58) (51) (49) (50) (64) (51) (42) (45) (55) (56) (51) (66) (90) (46) (44) (55) (48) (44) (52) (61) (54) (53) (51) (65) (54) (57) (54) (40) (62) (51) (47) (55) (56) (59) (44) (46) (49) (59) (67) (61) (56) (52) (52) (49) (64) (49) (43) (39) (63) (50) (53) (46) (54) (55) (40) (49) (45) (43) (51) (61) (49) (52) (54) (57) (62) (49))) :loffset (quotelchan (quote ((6) (7) (5) (7) (8) (9) (7) (4) (5) (6) (5) (7) (7) (6) (5) (5) (6) (7) (7) (7) (5) (7) (6) (5) (7) (5) (5) (7) (6) (5) (6) (5) (5) (6) (6) (6) (7) (5) (7) (6) (5) (5) (6) (5) (8) (5) (5) (7) (5) (7) (6) (1) (6) (6) (1) (7) (6) (5) (5) (5) (7) (7) (6) (6) (5) (5) (7) (6) (5) (5) (5) (7) (6) (5) (6) (5) (7) (6) (6) (6) (5) (7) (6) (7) (5) (6) (8) (6) (6) (5) (5) (5) (7) (6) (7) (6) (6) (6) (5) (7) (6) (5) (6) (7) (5) (7) (5) (6) (7) (5) (7) (6) (5) (5) (7) (6) (7) (5) (6) (6) (5) (6) (7) (6) (5) (5) (5) (5) (5) (5) (3) (5) (6) (5) (6) (7) (6) (6) (6) (5) (6) (7) (7) (5) (6) (7) (5) (6) (7) (6) (6) (6) (5) (7) (6) (6) (6) (5) (7) (5) (6) (7) (7) (6) (6) (5) (5) (6) (6) (6) (5) (7) (7) (7) (1) (6) (6) (7) (6) (6) (9) (7) (5) (6) (9) (7) (7) (6) (6) (7) (7) (7) (7) (5) (5) (6) (6) (6) (7) (5) (7) (7) (5) (6) (5) (6) (6) (6) (5) (5) (7) (6) (6) (7) (5) (6) (7) (6) (7) (6) (6) (5) (6) (5) (7) (7) (5) (7) (9) (7) (7) (7) (6) (5) (6) (5) (7) (6) (5) (6) (5) (5) (7) (5) (7) (5) (7) (7) (7) (6) (5) (5) (6) (7) (6) (5) (5) (7) (5) (5) (7) (6) (3) (5) (7) (5) (6) (6) (5) (5) (6) (5) (5) (1) (6) (6) (5) (6) (7) (7) (7) (7) (7) (6) (5) (5) (6) (7) (6) (6) (5) (6) (5) (7) (5) (5) (5) (6) (5) (5) (5) (6) (6) (8) (7) (7) (7) (7) (6) (6) (7) (5) (6) (5) (5) (6) (5) (5) (7) (5) (7) (6) (5) (5) (7) (6) (5) (5) (5) (5) (7) (7) (5) (6) (7) (5) (7) (6) (6) (5) (6) (6) (6) (5) (6) (6) (5) (6) (6) (5) (5) (6) (5) (7) (7) (6) (7) (8) (7) (6) (5) (9) (6) (7) (5) (6) (6) (6) (6) (6) (6) (6) (7) (5) (5) (6) (7) (7) (5) (5) (7) (7) (6) (5) (7) (5) (7) (6) (5) (6) (9) (7) (7) (6) (7) (5) (6) (5) (7) (5) (7) (6) (6) (7) (7) (7) (5) (6) (7) (5) (5) (7) (5) (6) (7) (7) (7) (6) (5) (7) (9) (9) (6) (5) (7) (7) (6) (7) (7) (6) (5) (6) (5) (5) (6) (7) (7) (7) (6) (7) (5) (6) (7) (7))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 88 70) (om-make-point 1143 312) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "perc Chico Science - Maracatu Atômico.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 62 3) (om-make-point 1062 154) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Documents" "scores (partituras originais)" "Acusmatica & video" "Estudo de plagio # 5 - 2011" "samples editados" "percussão")) :device nil :host nil :name "perc Chico Science - Maracatu Atômico" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "perc Chico Science - Maracatu Atômico.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 13 97) (om-make-point 1267 456) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil t))) (quote ((30 0 4 0 nil 0) (18 0 5 0 nil 0) (13 0 7 0 nil 0) (11 0 8 0 nil 0) (8 0 9 0 nil 0) (16 0 11 0 nil 0) (10 0 11 1 nil 0) (36 0 11 2 nil 0) (16 0 12 0 nil 0) (12 0 13 1 nil 0) (21 2 16 0 nil 0) (6 0 16 1 nil 0) (15 0 16 2 nil 0) (21 2 18 0 nil 0) (38 1 18 1 nil 0) (37 1 18 2 nil 0) (22 0 21 2 nil 2) (19 0 21 3 nil 0) (40 0 22 0 nil 0) (20 0 22 1 nil 0) (23 0 24 0 nil 0) (3 0 28 0 nil 0) (26 0 28 1 nil 0) (21 2 29 0 ((om-make-point 261 297) (om-make-point 261 388) (om-make-point 967 489) (om-make-point 996 476)) 2) (34 0 30 0 nil 0) (21 2 34 0 nil 0) (33 0 34 1 nil 0) (32 0 34 2 nil 0) (5 0 39 1 nil 0) (7 0 39 2 nil 0) (9 0 39 3 nil 0) (4 0 39 4 nil 0) (29 0 39 6 nil 0))) nil 6.0602))
