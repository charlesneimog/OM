; OM File Header - Saved 2020/05/24 22:46:51
; (6.16 :patc (om-make-point 20 20) (om-make-point -8 -8) (om-make-point 1366 725) "" 183 0 "2013/08/01 19:27:41" "2020/05/24 22:46:51")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "sintese aditiva a partir de um chord + BPF de envelope" (quote ((let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 323 287) (om-make-point 46 30) 610.5 "610.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 249 278) (om-make-point 39 30) 30.5 "30.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 229 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 392 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 108 356) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 127 312) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 48 352) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 64 330) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 226 36) (quote "<= chord-seq inicial") "" (om-make-point 612 132) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11 3" (quote t) (quote nil) (om-make-point 1365 18) (om-make-point 21 23) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1269 122) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1300 19) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3 2" (quote t) (quote nil) (om-make-point 1178 17) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1245 66) (om-make-point 163 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1301 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1251 169) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1303 143) (om-make-point 59 24) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 199 40) (quote "<= Resultado da síntese") "" (om-make-point 737 567) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 19 129) (om-make-point 595 111) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5732) (5738) (6590) (6598) (7036) (7654) (7934) (8480) (8636) (9028) (9166))) :lonset (quote (0 0 0 0 0 0 0 0 0 0 0 5000)) :ldur (quote ((5000) (4500) (3250) (2750) (1625) (1750) (1250) (1000) (750) (500) (375))) :lvel (quote ((58) (53) (58) (83) (110) (79) (73) (31) (31) (30) (31))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 1070 557) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 199 40) (quote "<= Envelope") "" (om-make-point 652 362) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 9 567) (om-make-point 391 62) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 2 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 525 476) (om-make-point 145 30) "Risset-Bell_adapt.aiff" "\"Risset-Bell_adapt.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 107 60) (quote "add-1$") "" (om-make-point 423 454) nil (om-make-color 0 0 0) (om-make-font "Arial Black" 24 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 455 349) (om-make-point 190 68) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode picture)) (list (quote t) 0 0 (om-make-point 326 95) (om-make-point 936 435) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 25 434) (om-make-point 387 86) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 11))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 0 0 0 0 0 0 0 0 0 0 5))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list (list 5) (list 9/2) (list 13/4) (list 11/4) (list 13/8) (list 7/4) (list 5/4) (list 1) (list 3/4) (list 1/2) (list 3/8)))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (list 233.5) (list 197.25) (list 233.5) (list 414.75) (list 610.5) (list 385.75) (list 342.25) (list 37.75) (list 37.75) (list 30.5) (list 37.75)))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (list 224.10428) (list 224.88233) (list 367.8634) (list 369.56723) (list 475.95883) (list 680.1424) (list 799.54004) (list 1095.9957) (list 1199.3412) (list 1504.1087) (list 1628.9121)))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0 0 0 0 0 0 0) (list (list 5) (list 9/2) (list 13/4) (list 11/4) (list 13/8) (list 7/4) (list 5/4) (list 1) (list 3/4) (list 1/2) (list 3/8)) (list (list 233.5) (list 197.25) (list 233.5) (list 414.75) (list 610.5) (list 385.75) (list 342.25) (list 37.75) (list 37.75) (list 30.5) (list 37.75)) (list (list 224.10428) (list 224.88233) (list 367.8634) (list 369.56723) (list 475.95883) (list 680.1424) (list 799.54004) (list 1095.9957) (list 1199.3412) (list 1504.1087) (list 1628.9121)) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.581 9.771 10.181 10.447 10.737 10.978 11.123 11.292 11.461 11.582 11.727 11.872 12.016 12.234 12.403 12.572 12.644 12.765 12.886 13.417 13.876 14.383 14.673 14.963 15.18 15.349 15.518 15.784 15.88 16.001 16.218 16.387 16.605 16.798 16.943 17.112 17.209 17.378 17.523 17.692 17.812 17.957 18.102 18.271 18.416 18.561 18.682 18.802 20.0)) (quote (0.0 14.069 13.123 14.562 16.002 17.729 19.456 20.607 22.047 23.774 25.213 26.652 27.804 28.667 30.395 31.834 33.273 34.712 34.712 35.576 38.454 41.333 45.075 47.378 49.393 51.408 53.135 54.574 56.877 58.316 60.331 63.786 66.376 68.967 70.982 72.134 73.861 75.876 78.179 79.906 81.345 82.496 83.648 85.087 85.663 85.951 85.951 85.951 85.951 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 398 135) (om-make-point 1007 456) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 83 33) (quote ": name") "" (om-make-point 671 468) nil (om-make-color 0 0 0) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 409 545) (om-make-point 322 95) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay palette-mode scale player)) (list (quote t) 1 0 (om-make-point 40 10) (om-make-point 1309 718) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil 0 nil (quote :midishare))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 670 67) (quote "La cloche de Risset (données adaptées à partir des <chromorials> de M. Stroppa)") "" (om-make-point 69 58) nil (om-make-color 0 0 0) (om-make-font "Arial Black" 18 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 878 83) (quote "Síntese aditiva, a partir de um chord-seq") "" (om-make-point 69 0) nil (om-make-color 0 0 0) (om-make-font "Arial Black" 36 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 4 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (18 1 3 0 ((om-make-point 149 238) (om-make-point 394 369) (om-make-point 414 372) (om-make-point 414 360)) 1) (18 3 4 0 nil 0) (5 0 4 1 nil 0) (18 2 6 0 nil 0) (7 0 6 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (9 0 13 2 nil 0) (15 0 14 0 nil 0) (16 0 14 1 nil 0) (25 0 20 0 nil 0) (22 0 20 1 nil 0) (18 1 21 0 nil 0) (21 0 25 1 ((om-make-point 22 387) (om-make-point 23 531) (om-make-point 99 531) (om-make-point 103 434)) 0) (6 0 25 4 ((om-make-point 56 386) (om-make-point 54 517) (om-make-point 201 533) (om-make-point 220 434)) 0) (4 0 25 5 ((om-make-point 116 390) (om-make-point 137 496) (om-make-point 225 529) (om-make-point 259 434)) 0) (2 0 25 6 nil 0) (3 0 25 7 nil 0) (24 0 25 8 nil 0) (20 0 27 0 nil 0))) nil 6.16))
