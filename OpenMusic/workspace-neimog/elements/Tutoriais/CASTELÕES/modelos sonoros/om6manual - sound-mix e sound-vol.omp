; OM File Header - Saved 2013/10/16 18:38:40
; (6.0602 :patc (om-make-point 712 10) (om-make-point 98 22) (om-make-point 1041 687) "" 183 0 "2013/10/08 21:20:52" "2013/10/08 21:50:35")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../out-files/som3-gain.aif" "../../../../out-files/som2-gain.aif" "../../../../../../Documents/scores (partituras originais)/Acusmatica & video/Estudo de plágio no. 4 - colagem harmônica e espectral (2009)/samples - editados/fala/fala I. Assumpcao - Girando.aiff" "../../../../out-files/sound-mix2.aif" "../../../../out-files/sound-mix1.aif" "../../../../../../Documents/scores (partituras originais)/Acusmatica & video/Estudo de plágio no. 4 - colagem harmônica e espectral (2009)/samples - editados/fala/fala Jorge Ben - menina mulher - fala.aiff" "../../../../../../Documents/UFJF - IAD/2) PESQUISA e bolsas/COMUS/materiais de pesquisa/SONS para analise/Todo mundo gosta da Grazi-out.wav"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "om6manual - sound-mix" (quote ((om-load-editor-box1 "som3-gain.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 326 298) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "som3-gain" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "som3-gain.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 662 296) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 713 349) (om-make-point 108 30) "som3-gain.aif" "\"som3-gain.aif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE 2" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 638 364) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND 2" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 547 387) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-VOL 2" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 529 315) nil nil nil nil 1) (om-load-editor-box1 "som2-gain.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 451 131) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "som2-gain" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "som2-gain.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 746 157) (om-make-point 108 30) "som2-gain.aif" "\"som2-gain.aif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 671 172) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 580 195) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 695 104) (om-make-point 38 30) 5.0 "5.0" nil) (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 562 123) nil nil nil nil 1) (om-load-editor-box1 "fala I. Assumpcao - Girando.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 498 258) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Documents" "scores (partituras originais)" "Acusmatica & video" "Estudo de plágio no. 4 - colagem harmônica e espectral (2009)" "samples - editados" "fala")) :device nil :host nil :name "fala I. Assumpcao - Girando" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fala I. Assumpcao - Girando.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "mixa 2 sons 2" (om-load-patch-abs1 "mixa 2 sons" (quote ((om-load-boxout "output" 0 (om-make-point 214 326) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 281 183) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 196 236) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-MIX" (quote sound-mix) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S2" nil))) (om-make-point 124 188) nil nil nil nil 1) (om-load-boxin "input 3" 2 (om-make-point 298 42) "" nil nil nil) (om-load-boxin "input 2" 1 (om-make-point 199 52) "" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (5 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 282 375) nil (list (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Desktop" "OM 662" "out-files")) :device :unspecific :host :unspecific :name "sound-mix2" :type "aif")) nil "mixa 2 sons") (om-load-boxcall (quote abstraction) "mixa 2 sons" (om-load-patch-abs1 "mixa 2 sons" (quote ((om-load-boxout "output" 0 (om-make-point 214 326) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 281 183) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 196 236) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-MIX" (quote sound-mix) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S2" nil))) (om-make-point 124 188) nil nil nil nil 1) (om-load-boxin "input 3" 2 (om-make-point 298 42) "" nil nil nil) (om-load-boxin "input 2" 1 (om-make-point 199 52) "" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (5 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 473 198) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 134 196) nil (list (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Desktop" "OM 662" "out-files")) :device :unspecific :host :unspecific :name "sound-mix1" :type "aif")) nil "mixa 2 sons") (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 366 371) (om-make-point 115 30) "sound-mix2.aif" "\"sound-mix2.aif\"" nil) (om-load-editor-box1 "sound-mix2.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 290 451) (om-make-point 128 89) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "sound-mix2" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sound-mix2.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 273 200) (om-make-point 115 30) "sound-mix1.aif" "\"sound-mix1.aif\"" nil) (om-load-editor-box1 "sound-mix1.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 141 270) (om-make-point 128 89) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "sound-mix1" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sound-mix1.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "fala Jorge Ben - menina mulher - fala.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 558 13) (om-make-point 128 89) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Documents" "scores (partituras originais)" "Acusmatica & video" "Estudo de plágio no. 4 - colagem harmônica e espectral (2009)" "samples - editados" "fala")) :device nil :host nil :name "fala Jorge Ben - menina mulher - fala" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fala Jorge Ben - menina mulher - fala.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "Todo mundo gosta da Grazi-out.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 84 18) (om-make-point 128 89) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Documents" "UFJF - IAD" "2) PESQUISA e bolsas" "COMUS" "materiais de pesquisa" "SONS para analise")) :device nil :host nil :name "Todo mundo gosta da Grazi-out" :type "wav") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Todo mundo gosta da Grazi-out.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (quote ((4 0 0 0 ((om-make-point 582 446) (om-make-point 488 446) (om-make-point 489 294) (om-make-point 346 293) (om-make-point 346 298)) 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (12 0 5 0 nil 0) (1 0 5 1 nil 0) (9 0 6 0 nil 0) (7 0 8 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (19 0 11 0 nil 0) (10 0 11 1 nil 0) (18 0 13 0 nil 0) (0 0 13 1 nil 0) (15 0 13 2 ((om-make-point 422 399) (om-make-point 359 425) (om-make-point 355 372) (om-make-point 339 370) (om-make-point 339 375)) 0) (20 0 14 0 nil 0) (6 0 14 1 nil 0) (17 0 14 2 nil 0) (13 0 16 0 nil 0) (14 0 18 0 nil 0))) nil 6.0602))
