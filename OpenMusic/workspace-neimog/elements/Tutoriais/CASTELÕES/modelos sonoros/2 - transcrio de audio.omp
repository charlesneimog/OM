; OM File Header - Saved 2013/10/16 18:38:40
; (6.0602 :patc (om-make-point 145 41) (om-make-point 25 59) (om-make-point 1226 662) "" 183 0 "2013/07/05 20:01:06" "2013/08/03 14:56:06")
; End File Header
; External resources 
; (list (list (quote :sdif) "../../../../in-files/Chord Sequence analyses/perc J. Hendrix - Voodoo Chile-cs.sdif"))
(in-package :om)(load-lib-for (quote ("RepMus")))(setf *om-current-persistent* (om-load-patch1 "1) transcrição de áudio" (quote ((om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 888 577) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 831 641) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "dragged 8" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1147 454) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 7475 6275 6750 6225 5325 6800 6250 5575 5375 7200 7175 3375 5825 4250 3425 3350 3325 7500 5600 5500 3750 7550 9750)) :ldur (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :lvel (quote (113 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 676 406) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil) (om-load-editor-box1 "dragged 7" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1041 425) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 7025 6825 5375 4375 7500 5525 4300 7225 7750 6075 4450 7450 5900 7075 6625 7200 5425 5925 5500 7550 7100 6775 6225)) :ldur (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :lvel (quote (120 119 119 119 117 117 116 115 115 115 115 114 114 113 113 113 113 113 113 113 113 113 112 112)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 613 435) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil) (om-load-editor-box1 "dragged 6" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 931 411) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6875 6850 5550 4975 5725 4725 4375 6225 4750 6300 5700 4450 7075 7725 7350 9125 5600 6200 7700 4500 6950 5350 7225 5900)) :ldur (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :lvel (quote (121 116 116 116 115 115 114 114 113 113 112 112 112 112 111 111 111 111 111 111 111 111 110 110)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 612 433) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil) (om-load-editor-box1 "dragged 5" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 820 411) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5975 6675 6725 5950 7075 6825 7100 7025 7225 7050 5225 7525 7500 6700 6375 7275 7125 5025 8075 8050 7675 7425 7300)) :ldur (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :lvel (quote (124 121 121 118 118 117 116 115 115 114 114 112 111 111 111 111 111 111 111 111 111 111 111 111)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 634 429) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil) (om-load-editor-box1 "dragged 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1138 308) (om-make-point 100 129) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150 7600 7650 7925 7000 7200 8325 7625 7525 7500 7400 7375 6800 5375 8275 7300 6925 6900 6875 3300 3350 4900 6400 6250)) :ldur (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :lvel (quote (121 119 119 117 116 115 115 111 111 111 111 111 111 111 111 110 110 110 110 110 110 110 110 110)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 570 427) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "dragged 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1032 315) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6825 5575 6300 7025 5900 7050 6500 5600 7525 4250 5850 5325 7075 4350 7550 6275 7250 5475 7225 3950 4225 6375 4900)) :ldur (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :lvel (quote (124 121 118 118 117 117 115 115 115 115 114 114 114 113 113 113 113 113 112 112 112 112 112 112)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 537 402) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 175 32) (quote "Seleção de acordes") "" (om-make-point 832 284) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "dragged 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 924 315) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6875 7075 5825 5725 5475 5700 4300 5400 7200 4425 5925 5875 5750 6350 5550 4325 6275 6300 4450 7225 5775 7150 6575)) :ldur (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :lvel (quote (121 119 115 115 114 114 114 113 113 113 113 112 112 112 112 112 112 112 112 111 111 111 111 111)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 597 453) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "dragged" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 816 316) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850 5900 6725 6650 6425 5850 5350 5650 6950 6700 4275 5575 5950 5800 5325 6075 5425 4325 7575 6975 5500 4300 7275 5550)) :ldur (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :lvel (quote (121 121 121 119 118 117 117 116 116 116 116 115 115 115 115 115 115 115 114 114 114 114 114 114)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 578 400) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 89 491) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 98 398) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0) (om-load-inputfun (quote input-funbox) "divisor" "DIVISOR" 1))) (om-make-point 26 429) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 186 473) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 107 505) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 404 495) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 355 507) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 316 485) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 268 500) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 534 477) (om-make-point 35 30) 127 "127" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 481 476) (om-make-point 35 30) 110 "110" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 424 531) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 100 264) (om-make-point 683 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5898 6716 6638 6418 5856 5344 5652 6948 6690 4272 5570 5938 5802 5332 6068 5424 4326 7564 6964 5492 4304 7280 5548) (6894 6870 7064 5834 5720 5470 5708 4300 5390 7202 4420 5914 5864 5752 6348 5560 4320 6264 6290 4448 7220 5770 7142 6576) (6870 5866 6846 5360 4316 6490 5368 6214 6894 6256 5824 5674 7580 7266 4372 7510 7220 6292 5300 3426 3402 7474 7262 5758) (6788 6816 5574 6300 7022 5898 7040 6494 5588 7520 4248 5858 5332 7070 4344 7550 6272 7240 5476 7236 3958 4232 6386 4902) (7244 7012 7026 6728 6424 7550 5990 5526 7692 5396 6862 6864 5334 4378 5384 7490 6228 4282 3436 6208) (7084 7696 7266 7250 7216 6768 6866 7094 6414 6996 6848 5630 7316 7210 6980 6892 7668 5404 5338 5306 7056 6466 5918 5866) (7280 6904 7010 6958 6850 7322 7024 7538 7694 7254 6434 7502 7298 5368 5342 3354 3304 3370 7896 6476 5916 5314 4452 3836) (8152 7588 7652 7930 6994 7194 8332 7626 7530 7496 7410 7374 6798 5372 8282 7290 6920 6888 6880 3310 3358 4908 6392 6244) (8158 7698 5922 7458 6920 7218 7584 7950 8338 9842 5856 8198 7642 9806 8182 8124 6208 10098 9644 9220 7678 6944 5344 7936) (9758 9666 9320 6978 6014 6466 7210 9250 10004 7228 8094 7636 7474 7938 8142 8426 5940 7690 7180 5378 7496) (9130 9264 9790 5084 9990 5444 4256 9964 8054 9288 7204 7218 8336 8340 8024 5842 4286 9654 6952 9322 8182 9230 7566 5372) (5990 5976 6670 6730 5938 7080 6828 7094 7034 7216 7054 5232 7516 7488 6700 6364 7282 7122 5024 8064 8046 7680 7426 7296) (6866 6844 5538 4964 5722 4732 4372 6234 4754 6288 5692 4456 7068 7718 7348 9122 5610 6208 7702 4508 6944 5340 7220 5898) (6644 6666 7002 5318 5942 5524 4540 5562 4598 5972 4498 6920 5462 4582 7524 6886 5402 5348 6822 7930 5508 6766 8020 6186) (6826 5338 8044 6896 6858 5318 6370 5800 6612 6200 5920 6332 7550 7218 3426 3402 7516 6268 4774 4688 3378 7496) (6790 7020 6818 5366 4368 7506 5514 4290 7214 7746 6070 4460 7440 5894 7084 6618 7190 5428 5918 5498 7556 7088 6770 6222) (6778 7050 5798 6612 6302 6818 6632 6282 6054 5830 5526 5408 4800 6384 7714 7474 6240 5878 7944 6326 6012 4314 6554 6234) (5966 5944 7134 6684 7164 6690 6742 6790 6270 7492 6884 6202 6992 5852 5382 4386 7728 7750 6772 7888 7524 6394 5414 4164) (5896 6614 5878 6612 5272 7030 5254 7214 7200 6670 5838 6216 5918 7468 7458 7166 5372 6648 6884 5340 5296 3390 3374 6980) (9754 9216 10328 9776 9964 7538 7536 9660 6918 6856 6388 8146 10070 9864 9366 9808 5966 5894 6900 6286 6202 5352 10010 9940) (9750 9226 10752 9968 5374 10342 9238 5356 9296 6186 5802 9962 3410 3348 10590 10106 9858 3430 3384) (7508 7120 6320 7144 6732 5976 5562 7734 5468 5370 10332 9866 3354 3332 9750 9296 9214 9614 9602 6918 6880 9972 9150) (6300 7466 6268 6756 6234 5314 6794 6238 5566 5372 7190 7182 3382 5832 4240 3428 3338 3336 7506 5594 5488 3754 7538 9756))) :lonset (quote (0 100 200 310 440 550 660 760 890 990 1120 1240 1340 1470 1570 1670 1800 1910 2030 2140 2280 2400 2540 2680)) :ldur (quote ((60 60 120 140 60 60 60 120 140 120 140 140 120 180 60 140 140 180 60 140 120 180 120 180) (100 120 120 0 120 0 100 0 80 100 120 100 0 120 120 100 0 120 100 120 80 80 0 100) (140 60 60 60 0 60 140 140 140 0 60 140 60 140 0 140 0 140 140 60 140 0 60 0) (120 100 120 100 80 20 20 20 100 0 100 20 20 120 120 20 120 80 20 80 80 100 80 80) (100 100 100 100 100 100 100 100 100 100 0 0 0 0 0 0 0 0 0 0) (0 80 80 100 120 0 180 0 0 40 180 0 180 180 40 80 40 80 180 0 120 0 100 100) (80 80 80 160 0 160 80 80 160 0 80 160 160 160 80 80 160 0 0 0 160 0 160 0) (140 140 140 140 140 140 140 120 120 120 120 120 120 120 120 120 120 120 0 120 0 120 120 0) (0 0 0 0 0 0 0 0 180 180 0 180 0 180 0 180 0 180 180 180 180 0 0 0) (140 0 0 0 140 0 140 0 140 0 140 140 140 140 140 140 140 140 140 140 140) (120 160 0 0 160 0 120 0 0 0 0 120 120 120 120 120 120 160 160 160 120 160 160 160) (140 80 160 140 160 80 80 80 140 140 140 140 0 80 0 0 0 0 140 160 140 160 160 0) (0 80 0 0 80 60 180 80 60 60 60 80 60 0 0 180 80 80 60 180 180 180 180 180) (120 120 20 20 180 100 120 120 100 120 120 120 100 120 20 120 120 180 180 20 120 120 20 120) (180 180 180 0 80 180 180 0 0 0 180 180 180 0 180 80 180 80 0 80 80 80) (100 120 0 160 160 20 140 140 20 140 20 100 140 0 0 0 100 0 100 100 0 0 160 160) (0 120 0 120 0 120 120 0 120 0 120 120 0 120 0 120 120 120 0 120 120 120 120 120) (160 160 160 160 160 160 40 20 20 160 0 40 0 0 0 40 160 40 80 160 80 80 20 20) (140 0 20 0 0 0 0 140 140 20 140 140 20 20 0 20 140 20 140 140 20 140 140 140) (160 160 160 20 20 20 20 20 160 140 140 140 140 20 140 140 140 160 0 0 160 160 160 0) (160 160 160 0 160 60 0 60 160 0 0 160 0 160 160 160 60 0 60) (160 160 160 160 160 160 160 160 160 40 20 40 40 20 40 20 40 0 20 20 0 40 40) (0 100 140 0 100 100 140 140 120 140 140 120 140 0 0 0 120 100 120 100 140 140 140 120))) :lvel (quote ((81 81 80 66 61 51 50 47 45 45 43 41 40 39 39 35 35 35 34 34 33 31 30 29) (84 70 37 36 30 29 28 26 25 24 21 19 19 18 17 17 17 15 13 12 10 10 9 9) (27 24 23 17 14 13 13 11 9 8 8 8 6 6 6 5 5 5 4 4 4 3 3 3) (108 83 62 61 51 51 40 37 36 35 31 29 29 24 23 22 22 21 19 17 17 16 15 15) (109 74 58 36 36 29 28 28 27 21 10 5 5 5 4 3 3 3 3 1) (18 17 15 14 14 14 13 12 11 10 8 8 7 7 7 7 6 6 6 6 5 5 5 5) (33 20 17 13 9 8 8 7 6 6 6 5 5 5 5 4 4 3 2 2 2 2 2 2) (79 67 65 54 48 40 37 6 6 6 6 6 6 6 5 4 4 4 4 4 3 2 1 1) (62 54 30 25 24 21 20 18 17 9 9 8 8 7 7 7 7 6 6 6 6 6 5 4) (47 46 43 35 35 26 25 24 23 23 22 22 21 20 15 14 10 9 9 7 5) (43 29 25 22 21 21 20 19 19 18 18 17 15 13 11 10 10 8 8 7 7 6 6 5) (103 86 84 63 59 51 49 41 36 32 31 17 10 10 10 9 8 8 8 7 7 6 6 6) (81 46 46 44 39 39 32 30 21 20 19 16 14 13 9 8 8 7 6 6 5 5 3 3) (127 122 113 60 54 45 42 40 38 37 34 33 29 28 27 25 24 24 21 20 20 18 17 17) (32 15 11 10 10 9 8 8 7 7 7 6 5 5 5 5 4 4 4 3 2 1) (74 68 67 65 56 53 47 38 37 36 36 32 28 26 24 24 22 22 21 21 20 20 18 18) (103 83 43 38 38 37 34 32 29 28 28 28 28 26 23 21 21 20 19 18 17 12 10 8) (112 73 61 58 52 40 20 18 18 12 11 11 10 10 10 10 9 8 8 7 7 7 7 7) (66 52 35 34 30 20 18 15 13 11 11 9 9 8 8 8 7 6 5 5 5 5 5 4) (71 54 52 48 47 47 44 42 42 41 34 33 31 31 29 23 20 14 8 8 7 7 6 6) (11 10 8 8 8 7 7 7 6 6 6 5 5 5 4 4 4 4 4) (59 43 32 31 23 19 17 11 10 7 6 6 6 6 5 5 5 4 4 4 4 2 2) (26 18 13 11 9 8 7 7 7 7 6 6 6 5 5 5 5 5 4 4 4 4 3 2))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 12 382) (om-make-point 1086 244) 0 1000 nil 10 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "" "LEGATO" 0))) (om-make-point 77 579) (om-make-point 681 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5900 6725 6650 6425 5850 5350 5650 6950 6700 4275 5575 5950 5800 5325 6075 5425 4325 7575 6975 5500 4300 7275 5550) (6900 6875 7075 5825 5725 5475 5700 4300 5400 7200 4425 5925 5875 5750 6350 5550 4325 6275 6300 4450 7225 5775 7150 6575) (6875 5875 6850 5350 4325 6500 5375 6225 6900 6250 5825 5675 7575 7275 4375 7500 7225 6300 5300 3425 3400 7475 7250 5750) (6800 6825 5575 6300 7025 5900 7050 6500 5600 7525 4250 5850 5325 7075 4350 7550 6275 7250 5475 7225 3950 4225 6375 4900) (7250 7000 7025 6725 6425 7550 6000 5525 7700 5400 6850 6875 5325 4375 5375 7500 6225 4275 3425 6200) (7075 7700 7275 7250 7225 6775 6875 7100 6425 7000 6850 5625 7325 7200 6975 6900 7675 5400 5350 5300 7050 6475 5925 5875) (7275 6900 7000 6950 6850 7325 7025 7550 7700 7250 6425 7500 7300 5375 5350 3350 3300 3375 7900 6475 5925 5325 4450 3825) (8150 7600 7650 7925 7000 7200 8325 7625 7525 7500 7400 7375 6800 5375 8275 7300 6925 6900 6875 3300 3350 4900 6400 6250) (8150 7700 5925 7450 6925 7225 7575 7950 8350 9850 5850 8200 7650 9800 8175 8125 6200 10100 9650 9225 7675 6950 5350 7925) (9750 9675 9325 6975 6025 6475 7200 9250 10000 7225 8100 7625 7475 7950 8150 8425 5950 7700 7175 5375 7500) (9125 9275 9800 5075 10000 5450 4250 9975 8050 9300 7200 7225 8325 8350 8025 5850 4275 9650 6950 9325 8175 9225 7575 5375) (6000 5975 6675 6725 5950 7075 6825 7100 7025 7225 7050 5225 7525 7500 6700 6375 7275 7125 5025 8075 8050 7675 7425 7300) (6875 6850 5550 4975 5725 4725 4375 6225 4750 6300 5700 4450 7075 7725 7350 9125 5600 6200 7700 4500 6950 5350 7225 5900) (6650 6675 7000 5325 5950 5525 4550 5550 4600 5975 4500 6925 5450 4575 7525 6875 5400 5350 6825 7925 5500 6775 8025 6175) (6825 5350 8050 6900 6850 5325 6375 5800 6600 6200 5925 6325 7550 7225 3425 3400 7525 6275 4775 4700 3375 7500) (6800 7025 6825 5375 4375 7500 5525 4300 7225 7750 6075 4450 7450 5900 7075 6625 7200 5425 5925 5500 7550 7100 6775 6225) (6775 7050 5800 6600 6300 6825 6625 6275 6050 5825 5525 5400 4800 6375 7725 7475 6250 5875 7950 6325 6000 4325 6550 6225) (5975 5950 7125 6675 7175 6700 6750 6800 6275 7500 6875 6200 7000 5850 5375 4375 7725 7750 6775 7900 7525 6400 5425 4175) (5900 6625 5875 6600 5275 7025 5250 7225 7200 6675 5850 6225 5925 7475 7450 7175 5375 6650 6875 5350 5300 3400 3375 6975) (9750 9225 10325 9775 9975 7550 7525 9650 6925 6850 6400 8150 10075 9875 9375 9800 5975 5900 6900 6275 6200 5350 10000 9950) (9750 9225 10750 9975 5375 10350 9250 5350 9300 6175 5800 9950 3400 3350 10600 10100 9850 3425 3375) (7500 7125 6325 7150 6725 5975 5550 7725 5475 5375 10325 9875 3350 3325 9750 9300 9225 9625 9600 6925 6875 9975 9150) (6300 7475 6275 6750 6225 5325 6800 6250 5575 5375 7200 7175 3375 5825 4250 3425 3350 3325 7500 5600 5500 3750 7550 9750))) :lonset (quote (0 1100 2200 3410 4840 6050 7260 8360 9790 10890 12320 13640 14740 16170 17270 18370 19800 21010 22330 23540 25080 26400 27940 28040)) :ldur (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100))) :lvel (quote ((121 121 121 119 118 117 117 116 116 116 116 115 115 115 115 115 115 115 114 114 114 114 114 114) (121 119 115 115 114 114 114 113 113 113 113 112 112 112 112 112 112 112 112 111 111 111 111 111) (114 113 113 112 112 112 112 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110) (124 121 118 118 117 117 115 115 115 115 114 114 114 113 113 113 113 113 112 112 112 112 112 112) (125 120 118 115 115 114 114 114 114 113 111 111 111 111 110 110 110 110 110 110) (112 112 112 112 112 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111) (114 113 112 112 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110 110 110 110) (121 119 119 117 116 115 115 111 111 111 111 111 111 111 111 110 110 110 110 110 110 110 110 110) (118 117 114 113 113 113 113 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110) (116 116 116 115 115 113 113 113 113 113 113 113 113 113 112 112 111 111 111 111 111) (116 114 113 113 113 113 113 112 112 112 112 112 112 112 111 111 111 111 111 111 111 111 111 111) (124 121 121 118 118 117 116 115 115 114 114 112 111 111 111 111 111 111 111 111 111 111 111 111) (121 116 116 116 115 115 114 114 113 113 112 112 112 112 111 111 111 111 111 111 111 111 110 110) (127 126 125 118 117 116 116 115 115 115 114 114 114 114 114 113 113 113 113 113 113 112 112 112) (114 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110) (120 119 119 119 117 117 116 115 115 115 115 114 114 113 113 113 113 113 113 113 113 113 112 112) (124 121 116 115 115 115 114 114 114 114 114 114 114 113 113 113 113 113 112 112 112 111 111 111) (125 120 118 118 117 115 113 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111) (119 117 115 114 114 113 112 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110) (119 117 117 116 116 116 116 116 116 115 114 114 114 114 114 113 113 112 111 111 111 111 111 111) (111 111 111 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110) (118 116 114 114 113 112 112 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110) (113 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 36 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 117/100 nil 1000 0 (om-make-point 1255 375) (om-make-point 25 125) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "perc J. Hendrix - Voodoo Chile-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 39 27) (om-make-point 460 82) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files" "Chord Sequence analyses")) :device :unspecific :host :unspecific :name "perc J. Hendrix - Voodoo Chile-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t) (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 1))) (om-make-point 328 187) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list11" (quote list) (quote nil) (om-make-point 574 115) (om-make-point 26 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 606 116) (om-make-point 34 30) 127 "127" nil) (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 647 116) (om-make-point 34 30) 100 "100" nil) (om-load-boxcall (quote bastype) "list3" (quote list) (quote nil) (om-make-point 687 116) (om-make-point 34 30) 300 "300" nil) (om-load-boxcall (quote bastype) "list4" (quote list) (quote nil) (om-make-point 724 117) (om-make-point 49 30) 20000 "20000" nil) (om-load-boxcall (quote bastype) "list5" (quote list) (quote nil) (om-make-point 780 125) (om-make-point 21 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list6" (quote list) (quote nil) (om-make-point 809 135) (om-make-point 28 30) 24 "24" nil) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1315 41) (om-make-point 21 23) 0 "0" nil) (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1219 145) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1250 42) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 1128 40) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1195 89) (om-make-point 163 53) nil nil nil 1) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1251 226) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1201 192) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1253 166) (om-make-point 59 24) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcomment "comment1" (om-make-point 253 55) (quote "HARMONICITY OF EACH CHORD measured by means of virtual fundamentals: the closer the virtual fundamental is from the actual fundamentals, the more harmonic the chord will be") "" (om-make-point 875 182) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 73 59) (quote "Fineberg punha 10 (dens.)") "" (om-make-point 808 74) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 73 86) (quote "Fineberg punha 10000 (midic max.)") "" (om-make-point 725 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (quote ((13 0 11 0 nil 0) (12 0 11 1 nil 0) (23 1 13 0 nil 2) (12 0 13 2 nil 0) (11 0 15 0 nil 0) (14 0 15 2 nil 0) (23 3 17 0 nil 0) (23 2 19 0 nil 0) (18 0 19 1 nil 0) (23 4 22 0 nil 0) (21 0 22 1 nil 0) (20 0 22 2 nil 0) (26 0 23 0 nil 0) (15 0 24 1 nil 0) (19 0 24 2 nil 0) (16 0 24 3 nil 0) (22 0 24 4 nil 0) (23 6 24 6 nil 0) (25 0 26 0 nil 0) (27 0 26 1 nil 0) (28 0 26 2 nil 0) (29 0 26 3 nil 0) (30 0 26 4 nil 0) (31 0 26 5 nil 0) (32 0 26 6 nil 0) (33 0 26 7 nil 0) (37 0 38 0 nil 0) (36 0 38 1 nil 0) (34 0 38 2 nil 0) (40 0 39 0 nil 0) (41 0 39 1 nil 0))) nil 6.0602))
