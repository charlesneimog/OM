; OM File Header - Saved 2020/05/24 22:46:51
; (6.16 :patc (om-make-point 118 60) (om-make-point 50 50) (om-make-point 1064 638) "" 183 0 "2013/10/08 22:49:53" "2013/10/16 17:29:45")
; End File Header
; External resources 
; (list (list (quote :sdif) "../../../../in-files/3 Bb3 Hendrix - P Haze-cs.sdif"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "om6manual - sdif-chord-seq" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 270 318) (om-make-point 34 30) 14 "14" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 74 452) (om-make-point 521 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4114 5914 6514 7700 4132 5828 6506) (4116 5196 5566 6384 4072 5566 5972 6396) (3978 5214 5792 9036 5800 3976 5214 9036) (3946 5196 5812 6998 3940 5194 5808 6998) (3932 5192 5808 9028 3930 5190 5808 9028) (4002 5178 6976 9030 9030 4000 5180 6976) (3896 5188 5810 9032 3888 5188 5804 9032) (3988 5194 5848 9026 9026 3982 5194 5848) (4052 5220 5854 9034 4050 5222 5856 9034) (3998 5848 9042 9170 9170 3970 5838 9042) (3926 9034 9158 10022 3930 5894 9034 10024) (4022 5836 9022 9802 4018 5848 9022 9802) (4190 5814 9034 9158 9034 4178 5824 9158) (4022 5824 9038 9170 9170 5804 9038 4024) (4288 5776 8742 9024 4234 5772 8742 9024) (4538 5796 8740 9038 9038 4592 5786 8740) (3748 4766 5812 9050 3774 4720 5798 9048) (4428 5780 8738 9068 8740 4440 5778 6990) (4086 5788 9038 9174 4090 5796 7690 9036) (3928 9044 9166 9860 9166 3916 5830 9044) (3818 5200 9038 9866 3790 5172 9038 9866))) :lonset (quote (0 602 672 2198 3066 3808 3934 4074 4536 5082 5404 5740 6216 6272 6552 7084 7350 7420 7616 8008 8484 8524)) :ldur (quote ((43 43 43 43 43 43 43) (5 5 5 5 5 5 5 5) (110 110 110 110 110 110 110 110) (62 62 62 62 62 62 62 62) (52 52 52 52 52 52 52 52) (10 10 10 10 10 10 10 10) (10 10 10 10 10 10 10 10) (33 33 33 33 33 33 33 33) (38 38 38 38 38 38 38 38) (24 24 24 24 24 24 24 24) (24 24 24 24 24 24 24 24) (33 33 33 33 33 33 33 33) (5 5 5 5 5 5 5 5) (19 19 19 19 19 19 19 19) (38 38 38 38 38 38 38 38) (19 19 19 19 19 19 19 19) (5 5 5 5 5 5 5 5) (14 14 14 14 14 14 14 14) (29 29 29 29 29 29 29 29) (33 33 33 33 33 33 33 33) (40 40 40 40 40 40 40 40))) :lvel (quote ((54 50 50 50 54 50 50) (60 52 51 51 60 51 51 51) (83 99 66 66 65 81 97 63) (98 127 73 67 95 123 72 65) (102 120 78 69 99 117 77 66) (103 120 65 73 69 101 116 64) (94 120 72 72 93 116 70 68) (100 115 77 60 58 98 112 76) (94 79 68 57 92 76 67 56) (76 57 55 54 53 75 56 54) (82 59 52 53 79 52 57 52) (78 54 54 52 77 54 54 52) (77 55 54 52 53 76 55 52) (67 57 54 53 52 56 54 66) (59 53 51 53 59 53 51 52) (58 53 52 53 53 57 53 51) (55 56 54 52 54 56 54 52) (58 53 52 52 51 58 53 51) (55 52 53 51 54 52 51 52) (52 51 51 51 50 52 51 51) (51 51 51 50 51 51 50 50))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 10 nil 1000 0 (om-make-point 730 357) (om-make-point 408 206) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 246 351) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 58 167) (om-make-point 521 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4114 5914 6514 7700 4132 5828 6506) (4116 5196 5566 6384 4072 5566 5972 6396) (3978 5214 5792 9036 5800 3976 5214 9036) (3946 5196 5812 6998 3940 5194 5808 6998) (3932 5192 5808 9028 3930 5190 5808 9028) (4002 5178 6976 9030 9030 4000 5180 6976) (3896 5188 5810 9032 3888 5188 5804 9032) (3988 5194 5848 9026 9026 3982 5194 5848) (4052 5220 5854 9034 4050 5222 5856 9034) (3998 5848 9042 9170 9170 3970 5838 9042) (3926 9034 9158 10022 3930 5894 9034 10024) (4022 5836 9022 9802 4018 5848 9022 9802) (4190 5814 9034 9158 9034 4178 5824 9158) (4022 5824 9038 9170 9170 5804 9038 4024) (4288 5776 8742 9024 4234 5772 8742 9024) (4538 5796 8740 9038 9038 4592 5786 8740) (3748 4766 5812 9050 3774 4720 5798 9048) (4428 5780 8738 9068 8740 4440 5778 6990) (4086 5788 9038 9174 4090 5796 7690 9036) (3928 9044 9166 9860 9166 3916 5830 9044) (3818 5200 9038 9866 3790 5172 9038 9866))) :lonset (quote (0 43 48 157 219 272 281 291 324 363 386 410 444 448 468 506 525 530 544 572 606 646)) :ldur (quote ((43 43 43 43 43 43 43) (5 5 5 5 5 5 5 5) (110 110 110 110 110 110 110 110) (62 62 62 62 62 62 62 62) (52 52 52 52 52 52 52 52) (10 10 10 10 10 10 10 10) (10 10 10 10 10 10 10 10) (33 33 33 33 33 33 33 33) (38 38 38 38 38 38 38 38) (24 24 24 24 24 24 24 24) (24 24 24 24 24 24 24 24) (33 33 33 33 33 33 33 33) (5 5 5 5 5 5 5 5) (19 19 19 19 19 19 19 19) (38 38 38 38 38 38 38 38) (19 19 19 19 19 19 19 19) (5 5 5 5 5 5 5 5) (14 14 14 14 14 14 14 14) (29 29 29 29 29 29 29 29) (33 33 33 33 33 33 33 33) (40 40 40 40 40 40 40 40))) :lvel (quote ((54 50 50 50 54 50 50) (60 52 51 51 60 51 51 51) (83 99 66 66 65 81 97 63) (98 127 73 67 95 123 72 65) (102 120 78 69 99 117 77 66) (103 120 65 73 69 101 116 64) (94 120 72 72 93 116 70 68) (100 115 77 60 58 98 112 76) (94 79 68 57 92 76 67 56) (76 57 55 54 53 75 56 54) (82 59 52 53 79 52 57 52) (78 54 54 52 77 54 54 52) (77 55 54 52 53 76 55 52) (67 57 54 53 52 56 54 66) (59 53 51 53 59 53 51 52) (58 53 52 53 53 57 53 51) (55 56 54 52 54 56 54 52) (58 53 52 52 51 58 53 51) (55 52 53 51 54 52 51 52) (52 51 51 51 50 52 51 51) (51 51 51 50 51 51 50 50))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 10 nil 1000 0 (om-make-point 730 357) (om-make-point 408 206) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "an SDIF file" "SELF" nil))) (om-make-point 104 101) nil nil nil nil 1) (om-load-editor-box1 "3 Bb3 Hendrix - P Haze-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 87 11) (om-make-point 212 82) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "3 Bb3 Hendrix - P Haze-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) t nil nil t))) (quote ((3 1 1 1 nil 0) (2 0 1 2 nil 0) (3 3 1 3 nil 0) (3 4 1 4 nil 0) (3 2 2 0 nil 0) (0 0 2 1 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0))) nil 6.0602))
