; OM File Header - Saved 2013/10/16 18:38:40
; (6.0602 :patc (om-make-point 10 10) (om-make-point 38 22) (om-make-point 1217 699) "" 183 0 "2013/10/10 21:50:00" "2013/10/16 18:38:40")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../in-files/01-tonedrum"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "envelope - marcando manualmente o ritmo dos picos do envelope de um som e exportando-os para um chord-seq 2" (quote ((om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 1136 86) (om-make-point 233 30) (list 1 2 3 4 5 6 7 8 9 11 12 13 14 15 16) "(1 2 3 4 5 6 7 8 9 11 12 13 14 15 16)" nil) (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>15ch." (om-load-patch-abs1 "Orq. 5 reg.=>15ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1 a 3") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro sub-grave) aos midi chs 4 a 6") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 7 a 9") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 14 a 16") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 11 e 13") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 34 30) 13 "13" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 34 30) 16 "16" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 14 "14" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 929 482) nil (list (list 3 16 8 6 15 8 4 9 9 6 12 9 2 4 9 4 11 9 11 8 8 11 6 11 7 13 6 1 12 14 14 9 6 2 7 7 4 4 8 7 2 7 9 12 4 8 6 12 3 9 5 9 2 9 7 5 8 12 7 11 8 14 5 5 9 6 13 8 2 7 8 13 5 11 4 13 14 6 7 7 6 8 9 9 14 16 12 9 12 4 13 6 1 4 14)) nil "Orq. 5 reg.=>15ch.") (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>8 ch." (om-load-patch-abs1 "Orq. 3 reg.=>8 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1 a 2") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 6 a 8") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 3 a 5") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 644 501)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1070 491) nil (list (list 6 7 5 7 8 9 7 4 5 6 5 7 7 6 5 5 6 7 7 7 5 7 6 5 7 5 5 7 6 5 6 5 5 6 6 6 7 5 7 6 5 5 6 5 8 5 5 7 5 7 6 1 6 6 1 7 6 5 5 5 7 7 6 6 5 5 7 6 5 5 5 7 6 5 6 5 7 6 6 6 5 7 6 7 5 6 8 6 6 5 5 5 7 6 7 6 6 6 5 7 6 5 6 7 5 7 5 6 7 5 7 6 5 5 7 6 7 5 6 6 5 6 7 6 5 5 5 5 5 5 3 5 6 5 6 7 6 6 6 5 6 7 7 5 6 7 5 6 7 6 6 6 5 7 6 6 6 5 7 5 6 7 7 6 6 5 5 6 6 6 5 7 7 7 1 6 6 7 6 6 9 7 5 6 9 7 7 6 6 7 7 7 7 5 5 6 6 6 7 5 7 7 5 6 5 6 6 6 5 5 7 6 6 7 5 6 7 6 7 6 6 5 6 5 7 7 5 7 9 7 7 7 6 5 6 5 7 6 5 6 5 5 7 5 7 5 7 7 7 6 5 5 6 7 6 5 5 7 5 5 7 6 3 5 7 5 6 6 5 5 6 5 5 1 6 6 5 6 7 7 7 7 7 6 5 5 6 7 6 6 5 6 5 7 5 5 5 6 5 5 5 6 6 8 7 7 7 7 6 6 7 5 6 5 5 6 5 5 7 5 7 6 5 5 7 6 5 5 5 5 7 7 5 6 7 5 7 6 6 5 6 6 6 5 6 6 5 6 6 5 5 6 5 7 7 6 7 8 7 6 5 9 6 7 5 6 6 6 6 6 6 6 7 5 5 6 7 7 5 5 7 7 6 5 7 5 7 6 5 6 9 7 7 6 7 5 6 5 7 5 7 6 6 7 7 7 5 6 7 5 5 7 5 6 7 7 7 6 5 7 9 9 6 5 7 7 6 7 7 6 5 6 5 5 6 7 7 7 6 7 5 6 7 7)) nil "Orq. 3 reg.=>8 ch.") (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>8ch." (om-load-patch-abs1 "Orq. 5 reg.=>8ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro grave) aos midi chs 2") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 3 a 4") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 7 a 8") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 5 a 6") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1074 559) nil (list (list 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 7 1 1 2 1 1 1 1 1 2 1 1 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 2 1 1 1 2 2 2 2 1 2 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 1 1 2 1 2 3 2 1 1 1 3 1 2 2 1 1 2 1 1 2 1 1 2 1 1 2 4 2 4 1 2 2 1 1 1 2 1 1 1 2 2 2 2 2 1 2 2 1 1 1 1 1 1 1 1 1 2 1 4 1 2 4 1 2 1 2 2 1 1 1 1 1 1 2 3 6 3 4 1 2 2 1 1 2 2 1 1 1 2 1 7 2 1 2 2 1 1 2 2 1 4 6 2 1 2 1 2 2 3 2 2 2 1 1 1 1 1 2 2 1 2 2 1 2 1 1 4 4 2 1 2 2 1 8 8 2 2 1 2 2 2 1 2)) nil "Orq. 5 reg.=>8ch.") (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 1104 277) (om-make-point 34 30) 15 "15" nil) (om-load-boxcall (quote abstraction) "Instrumentacao ALEA" (om-load-patch-abs1 "Instrumentacao ALEA" (quote ((om-load-boxout "output" 0 (om-make-point 381 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 424 76) "" nil nil nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 373 304) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 259 219) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 223 150) (om-make-point 41 30) 128 "128" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 187 157) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 199 191) nil nil nil nil 1))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 960 291) nil (list (list 35 42 65 50 78 40 80 25 85 66 39 34 95 2 16)) "x" "Instrumentacao ALEA") (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= No. de instrumentos") "" (om-make-point 1135 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 1132 111) (om-make-point 119 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 983 155) (om-make-point 182 30) (list 40 44 45 24 40 44 24 40 24) "(40 44 45 24 40 44 24 40 24)" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1163 188) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>9 ch." (om-load-patch-abs1 "Orq. 3 reg.=>9 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1, 2, 3 e 4") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 8 e 9") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 5, 6 e 7") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 7 "7" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 8 "8" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 700 500)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1079 419) nil (list (list 6 1 7 7 8 6 5 8 4 6 3 2 7 1 4 9 5 8 5 9 1 6 7 1 6 6 8 5 6 7 6 9 5 8 7 3 8 2 3 9 6 5 5 8 5 5 3 3 2 5 5 5 8 9 7 7 4 6 2 5 5 1 3 2 5 5 6 7 1 8 6 3 8 6 6 7 6 5 1 9 4 7 8 7 5 4 7 5 9 5 6 2 4 5 6)) nil "Orq. 3 reg.=>9 ch.") (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 578 488) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 147 30) (quote "<= Dyns mín. e máx.") "" (om-make-point 779 445) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 743 449) (om-make-point 34 30) 90 "90" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 706 450) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 687 495) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 207 49) (quote "<= Fator de multiplicação para onsets e durs") "" (om-make-point 574 366) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 544 369) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 417 400) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 509 521) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 458 486) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 179 316) nil nil nil nil 1) (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 90 178) (om-make-point 65 96) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 8800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 300 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 17 172) (om-make-point 65 96) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 2800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 300 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 57 290) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 267 184) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 368 58) (quote "<= atenção: na caixa sound, a unidade de tempo é seg.; pra traduzir pr'um chord-seq, precisa passar pra miliseg., ou seja, multiplicar por 1000.") "" (om-make-point 584 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 504 55) (quote "<= atenção: os onsets da caixa sound saem com decimais (e os retêm mesmo depois da multiplicação por 1000); pra traduzir pr'um chord-seq, precisa eliminar esses decimais, através de um om//, por ex.") "" (om-make-point 441 298) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 399 295) nil nil nil nil 2) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 461 232) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 485 192) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 509 225) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 37 562) (om-make-point 1017 131) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6288) (3675) (7108) (3834) (8554) (8775) (8270) (5409) (6004) (7467) (5221) (4669) (5704) (8149) (5668) (6872) (3966) (4782) (7455) (8041) (3804) (2910) (7807) (5314) (4158) (6938) (2842) (7290) (7908) (3275) (3039) (6645) (8384) (3320) (2837) (8097) (8053) (5005) (7208) (7228) (5563) (4806) (4105) (7142) (3630) (7714) (4371) (8200) (2878) (6098) (5748) (4600) (3394) (7855) (4772) (3898) (7628) (3871) (8490) (8667) (5114) (3816) (5071) (4229) (7867) (5974) (4685) (3618) (5221) (3082) (3365) (5500) (4752) (4988) (6244) (4144) (6861) (7926) (5256) (5765) (3913) (7619) (8414) (5589) (4055) (2915) (4452) (8387) (6651) (4621) (3510) (7426) (7490) (8433) (8263))) :lonset (quote (0 16 102 198 316 498 708 936 1200 1876 1908 2066 2086 2166 2324 2402 2568 2782 2964 3128 3328 3456 3632 3830 3914 4060 4300 4486 4686 5146 5700 6012 6236 6292 6688 6772 6856 6948 7046 7128 7272 7448 7582 7624 7756 7908 8384 8490 8550 8656 8748 8838 8938 8992 9060 9208 9356 9394 9520 9578 9828 10014 10172 10366 10546 10814 11070 11322 11580 11808 12008 12300 12406 12632 12870 13108 13172 14000 14260 14344 14616 14646 14774 14890 15066 15094 15290 15346 15404 15642 15806 15914 15930 16072 16082 16098)) :ldur (quote ((10) (142) (16) (108) (164) (238) (58) (56) (196) (28) (176) (116) (128) (30) (272) (84) (260) (828) (64) (238) (238) (226) (106) (292) (200) (228) (258) (252) (256) (268) (180) (194) (158) (186) (250) (58) (126) (38) (148) (148) (68) (54) (100) (90) (92) (106) (60) (106) (476) (152) (132) (42) (134) (176) (144) (82) (98) (92) (84) (84) (396) (56) (224) (312) (554) (460) (200) (186) (240) (146) (84) (198) (176) (128) (200) (164) (182) (214) (166) (78) (158) (80) (20) (158) (32) (676) (264) (228) (210) (182) (118) (96) (86) (16) (16))) :lvel (quote ((54) (41) (83) (86) (36) (68) (52) (66) (74) (10) (64) (15) (57) (41) (45) (29) (75) (83) (46) (21) (20) (70) (89) (49) (32) (27) (86) (30) (20) (49) (11) (90) (19) (87) (12) (23) (76) (45) (40) (60) (80) (22) (85) (48) (24) (29) (52) (10) (33) (19) (16) (55) (25) (44) (55) (31) (81) (54) (54) (44) (38) (62) (72) (11) (65) (47) (73) (48) (83) (58) (45) (61) (71) (85) (22) (56) (89) (28) (59) (88) (89) (26) (43) (53) (90) (57) (84) (27) (69) (62) (53) (12) (57) (81) (14))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (16) (8) (6) (15) (8) (4) (9) (9) (6) (12) (9) (2) (4) (9) (4) (11) (9) (11) (8) (8) (11) (6) (11) (7) (13) (6) (1) (12) (14) (14) (9) (6) (2) (7) (7) (4) (4) (8) (7) (2) (7) (9) (12) (4) (8) (6) (12) (3) (9) (5) (9) (2) (9) (7) (5) (8) (12) (7) (11) (8) (14) (5) (5) (9) (6) (13) (8) (2) (7) (8) (13) (5) (11) (4) (13) (14) (6) (7) (7) (6) (8) (9) (9) (14) (16) (12) (9) (12) (4) (13) (6) (1) (4) (14))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 511 167) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 560 203) nil nil nil nil 1) (om-load-editor-box1 "01-tonedrum" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 62 3) (om-make-point 1062 154) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "01-tonedrum" :type :unspecific) 1))) (when thesound (setf (markers thesound) (quote (0.008 0.051 0.099 0.158 0.249 0.354 0.468 0.6 0.938 0.954 1.033 1.043 1.083 1.162 1.201 1.284 1.391 1.482 1.564 1.664 1.728 1.816 1.915 1.957 2.031 2.15 2.243 2.343 2.573 2.85 3.006 3.118 3.146 3.344 3.386 3.428 3.474 3.523 3.564 3.636 3.724 3.791 3.812 3.878 3.954 4.192 4.245 4.275 4.328 4.374 4.419 4.469 4.496 4.53 4.604 4.678 4.697 4.76 4.789 4.914 5.007 5.086 5.183 5.273 5.407 5.535 5.661 5.79 5.904 6.004 6.15 6.203 6.316 6.435 6.554 6.586 7.0 7.13 7.172 7.308 7.323 7.387 7.445 7.533 7.547 7.645 7.673 7.702 7.821 7.903 7.957 7.965 8.036 8.041)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "01-tonedrum") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1267 456) (om-make-point 13 97) 0 1 (quote t) nil 0)) t nil nil t))) (quote ((21 0 1 0 nil 0) (4 0 5 0 nil 0) (5 0 9 0 nil 0) (0 0 9 1 nil 0) (15 0 11 0 nil 0) (18 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0) (28 0 18 0 nil 0) (17 0 18 1 nil 0) (20 0 19 0 nil 0) (18 0 20 0 nil 0) (24 0 21 0 nil 0) (25 0 21 1 nil 0) (23 1 24 0 nil 0) (22 1 24 1 nil 0) (28 0 25 0 nil 0) (29 0 28 0 nil 0) (31 0 29 0 nil 0) (30 0 31 0 nil 0) (34 0 31 1 nil 0) (21 0 32 1 nil 0) (18 0 32 2 nil 0) (19 0 32 3 nil 0) (11 0 32 4 nil 0) (1 0 32 6 nil 0) (33 0 34 0 nil 0) (35 2 34 1 nil 0))) nil 6.0602))
