; OM File Header - Saved 2013/10/16 18:38:40
; (6.0602 :patc (om-make-point 10 10) (om-make-point 87 22) (om-make-point 1249 697) "" 183 0 "2013/10/11 17:31:54" "2013/10/16 17:05:24")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../../Music/iTunes/iTunes Media/Music/Unknown Artist/Unknown Album/Gil - One o'clock last morning, 20th April, 1970 (1971).wav") (list (quote :midi) "../../../../out-files/Envelope 7.aif"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "envelope - marcando manualmente o ritmo dos picos etc. - com mixer e save-midi acoplados" (quote ((om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 965 510) (om-make-point 111 30) "Envelope 7.aif" "\"Envelope 7.aif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 900 512) nil nil nil nil 1) (om-load-editor-box1 "Envelope 7.aif" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 958 579) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "Envelope 7" :type "aif")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Envelope 7.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t) (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "" "FILENAME" nil))) (om-make-point 844 582) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 13" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 858 522) nil nil nil nil 1) (om-load-editor-box1 "MIDI-MIX-CONSOLE" (quote midi-mix-console) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "output port number" "midiport" 0) (om-load-inputfun (quote input-funbox) "number of tracks" "nbtracks" 1))) (om-make-point 975 366) (om-make-point 102 82) (let ((rep (make-instance (quote midi-mix-console) :midiport 0 :nbtracks 15))) (setf (channels-ctrl rep) (list (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 1 :program 37 :pan-ctrl 0 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 2 :program 96 :pan-ctrl 8 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 3 :program 99 :pan-ctrl 16 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 4 :program 66 :pan-ctrl 24 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 5 :program 58 :pan-ctrl 32 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 6 :program 84 :pan-ctrl 40 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 7 :program 6 :pan-ctrl 62 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 8 :program 59 :pan-ctrl 70 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 9 :program 102 :pan-ctrl 78 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 10 :program 30 :pan-ctrl 86 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 11 :program 113 :pan-ctrl 95 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 12 :program 106 :pan-ctrl 103 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 13 :program 77 :pan-ctrl 111 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 14 :program 98 :pan-ctrl 119 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)) (if (find-class (quote channel-ctrl) nil) (make-instance (quote channel-ctrl) :midiport 0 :midichannel 15 :program 92 :pan-ctrl 127 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)))) (setf (miditrack rep) (quote 0)) rep) "x" nil (pairlis (quote (scale show-stems mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom player inport outport deltapict winpos winsize)) (list nil (quote t) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 (quote :midishare) 0 0 (om-make-point 0 0) (om-make-point 300 22) (om-make-point 800 560))) t nil nil t) (om-load-boxcomment "comment" (om-make-point 311 86) (quote "Essa versão equaliza o número de onsets e durs e inclui o mixer") "" (om-make-point 596 280) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 441 486) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 12" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 393 488) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 260 427) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 260 460) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 366 433) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 284 396) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 176 478) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 72 470) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 10" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 33 424) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 89 377) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 30 328) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 175 241) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 123 305) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 1136 86) (om-make-point 233 30) (list 1 2 3 4 5 6 7 8 9 11 12 13 14 15 16) "(1 2 3 4 5 6 7 8 9 11 12 13 14 15 16)" nil) (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>15ch." (om-load-patch-abs1 "Orq. 5 reg.=>15ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1 a 3") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro sub-grave) aos midi chs 4 a 6") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 7 a 9") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 14 a 16") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 11 e 13") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 34 30) 13 "13" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 34 30) 16 "16" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 34 30) 14 "14" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 704 483) nil (list (list 15 9 4 12 6 5 4 2 2 7 6 3 6 6 1 2 8 5 6 4 4 6 5 5 7 4 5 4 4 3 1 4 8 4 2 1 6 4 3 3 3 6 4 5 13 4 5 8 7 5 4 2 5 2 5 5 4 1 5 8 4 5 4 6 5 2 4 5 5 6 2 4 4 9 4 9 9 8 4 4 3 5 12 5 6 2 4 5 4 7 4 3 8 8 6 6 4 5 3 5 4 3 6 2 8 4 12 2 5 8 5 3 1 4 3 5 7 5 4 6 5 4 2 7 4 6 4 5 4 6 4 4 8 5 4 2 1 2 1 6 1 3 6 4 4 4 6 1 5 3 5 8 5 9 8 4 15 16 9 4 8 8 4 6 7 4 4 4 5 4 8 7 7 14 6 12 13 6 9 6 4 12 8 8 6 4 13 4 4 5 4 4 3 4 4 8 6 6 8 4 5 7 4 2 5 5 5 4 4 2 4 3 4 4 5 6 3 3 6 6 6 5 5 3 8 13 8 5 7 7 3 9 4 1 4 9 4 5 9 16 7 7 11 4 7 5 7 4 1 5 4 6 4 12 4 6 6 6 5 7 9 3 4 6 1 7 4 5 2 2 4 5 11)) nil "Orq. 5 reg.=>15ch.") (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>8 ch." (om-load-patch-abs1 "Orq. 3 reg.=>8 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1 a 2") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 6 a 8") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 3 a 5") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1105 416) nil (list (list 6 7 5 7 8 9 7 4 5 6 5 7 7 6 5 5 6 7 7 7 5 7 6 5 7 5 5 7 6 5 6 5 5 6 6 6 7 5 7 6 5 5 6 5 8 5 5 7 5 7 6 1 6 6 1 7 6 5 5 5 7 7 6 6 5 5 7 6 5 5 5 7 6 5 6 5 7 6 6 6 5 7 6 7 5 6 8 6 6 5 5 5 7 6 7 6 6 6 5 7 6 5 6 7 5 7 5 6 7 5 7 6 5 5 7 6 7 5 6 6 5 6 7 6 5 5 5 5 5 5 3 5 6 5 6 7 6 6 6 5 6 7 7 5 6 7 5 6 7 6 6 6 5 7 6 6 6 5 7 5 6 7 7 6 6 5 5 6 6 6 5 7 7 7 1 6 6 7 6 6 9 7 5 6 9 7 7 6 6 7 7 7 7 5 5 6 6 6 7 5 7 7 5 6 5 6 6 6 5 5 7 6 6 7 5 6 7 6 7 6 6 5 6 5 7 7 5 7 9 7 7 7 6 5 6 5 7 6 5 6 5 5 7 5 7 5 7 7 7 6 5 5 6 7 6 5 5 7 5 5 7 6 3 5 7 5 6 6 5 5 6 5 5 1 6 6 5 6 7 7 7 7 7 6 5 5 6 7 6 6 5 6 5 7 5 5 5 6 5 5 5 6 6 8 7 7 7 7 6 6 7 5 6 5 5 6 5 5 7 5 7 6 5 5 7 6 5 5 5 5 7 7 5 6 7 5 7 6 6 5 6 6 6 5 6 6 5 6 6 5 5 6 5 7 7 6 7 8 7 6 5 9 6 7 5 6 6 6 6 6 6 6 7 5 5 6 7 7 5 5 7 7 6 5 7 5 7 6 5 6 9 7 7 6 7 5 6 5 7 5 7 6 6 7 7 7 5 6 7 5 5 7 5 6 7 7 7 6 5 7 9 9 6 5 7 7 6 7 7 6 5 6 5 5 6 7 7 7 6 7 5 6 7 7)) nil "Orq. 3 reg.=>8 ch.") (om-load-boxcall (quote abstraction) "Orq. 5 reg.=>8ch." (om-load-patch-abs1 "Orq. 5 reg.=>8ch." (quote ((om-load-boxcomment "comment 5" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 1 (correspondente ao registro sub-grave) aos midi chs 1") "" (om-make-point 118 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 403) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop5" nil) (om-load-boxcomment "comment 4" (om-make-point 423 52) (quote "<= o 4o omloop encaminha o midi ch 2 (correspondente ao registro grave) aos midi chs 2") "" (om-make-point 150 336) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "omloop4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 330) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop4" nil) (om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 396 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 3 (correspondente ao registro médio-grave) aos midi chs 3 a 4") "" (om-make-point 153 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 5 (correspondente ao registro mais agudo) aos midi chs 7 a 8") "" (om-make-point 155 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 4 (correspondente ao registro médio) aos midi chs 5 a 6") "" (om-make-point 150 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 257) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 91 182) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 90 275) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 35 467) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 98 102) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 277) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 410 62) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((3 1 1 0 nil 0) (10 1 3 0 nil 0) (12 0 8 0 nil 0) (17 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 9 2 nil 0) (11 1 10 0 nil 0) (13 1 11 0 nil 0) (1 1 12 0 nil 0) (16 0 13 0 nil 0) (9 0 16 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1109 484) nil (list (list 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 7 1 1 2 1 1 1 1 1 2 1 1 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 2 1 1 1 2 2 2 2 1 2 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 1 1 2 1 2 3 2 1 1 1 3 1 2 2 1 1 2 1 1 2 1 1 2 1 1 2 4 2 4 1 2 2 1 1 1 2 1 1 1 2 2 2 2 2 1 2 2 1 1 1 1 1 1 1 1 1 2 1 4 1 2 4 1 2 1 2 2 1 1 1 1 1 1 2 3 6 3 4 1 2 2 1 1 2 2 1 1 1 2 1 7 2 1 2 2 1 1 2 2 1 4 6 2 1 2 1 2 2 3 2 2 2 1 1 1 1 1 2 2 1 2 2 1 2 1 1 4 4 2 1 2 2 1 8 8 2 2 1 2 2 2 1 2)) nil "Orq. 5 reg.=>8ch.") (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 1104 277) (om-make-point 34 30) 15 "15" nil) (om-load-boxcall (quote abstraction) "Instrumentacao ALEA" (om-load-patch-abs1 "Instrumentacao ALEA" (quote ((om-load-boxout "output" 0 (om-make-point 381 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 424 76) "" nil nil nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 373 304) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 259 219) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 223 150) (om-make-point 41 30) 128 "128" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 187 157) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 199 191) nil nil nil nil 1))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 954 268) nil (list (list 37 96 99 66 58 84 6 59 102 30 113 106 77 98 92)) "x" "Instrumentacao ALEA") (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= No. de instrumentos") "" (om-make-point 1135 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 1132 111) (om-make-point 119 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 983 155) (om-make-point 182 30) (list 40 44 45 24 40 44 24 40 24) "(40 44 45 24 40 44 24 40 24)" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1120 189) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "Orq. 3 reg.=>9 ch." (om-load-patch-abs1 "Orq. 3 reg.=>9 ch." (quote ((om-load-boxcomment "comment" (om-make-point 577 65) (quote "Atenção: os omloops devem ser encadeados SEMPRE do midi ch mais alto para o mais baixo, de forma a não alterar a divisão em registros original (e pretendida para a orquestração)") "" (om-make-point 163 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 423 52) (quote "<= o 3o omloop encaminha o midi ch 1 (correspondente ao registro grave) aos midi chs 1, 2, 3 e 4") "" (om-make-point 167 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 423 52) (quote "<= o 1o omloop encaminha o midi ch 3 (correspondente ao registro mais agudo) aos midi chs 8 e 9") "" (om-make-point 156 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 52) (quote "<= o 2o omloop encaminha o midi ch 2 (correspondente ao registro médio) aos midi chs 5, 6 e 7") "" (om-make-point 163 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 26 516) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midich - conecte no input de midich do chord-seq" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 495 59) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 347) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop3" nil) (om-load-boxwithed1 (quote box-with-win) "omloop2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 100 247) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 7 "7" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop2" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 438) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 148) nil nil nil (list (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 238 104) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 237 138) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 173 182) (om-make-point 93 59) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 446 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 129 240) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 77 283) (om-make-point 21 30) 9 "9" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 49 280) (om-make-point 21 30) 8 "8" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 313) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBST" (quote subst) (quote ((om-load-inputfun (quote input-funbox) "NEW" "NEW" nil) (om-load-inputfun (quote input-funbox) "OLD" "OLD" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 82 383) (om-make-point 127 43) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 374 54) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 429 469) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 355 305) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (9 0 2 0 ((om-make-point 390 111) (om-make-point 390 150) (om-make-point 230 72) (om-make-point 204 182)) 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (2 0 8 2 nil 0) (8 0 10 0 nil 0) (3 1 10 1 nil 0) (3 0 11 0 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 575 19) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 554 19) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 409 75) nil nil nil nil 1) (om-load-boxin "midics - ponha aqui o output de midics da secao A" 0 (om-make-point 108 2) "" "midics - ponha aqui o output de midics da secao A" nil nil))) (quote ((8 0 4 0 nil 0) (13 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 5 2 nil 0) (7 1 6 0 nil 0) (9 1 7 0 nil 0) (6 1 8 0 nil 0) (12 0 9 0 nil 0) (5 0 12 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "midics - ponha aqui o output de midics da secao A" nil))) (om-make-point 1114 344) nil (list (list 6 1 7 7 8 6 5 8 4 6 3 2 7 1 4 9 5 8 5 9 1 6 7 1 6 6 8 5 6 7 6 9 5 8 7 3 8 2 3 9 6 5 5 8 5 5 3 3 2 5 5 5 8 9 7 7 4 6 2 5 5 1 3 2 5 5 6 7 1 8 6 3 8 6 6 7 6 5 1 9 4 7 8 7 5 4 7 5 9 5 6 2 4 5 6)) nil "Orq. 3 reg.=>9 ch.") (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 502 488) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 147 30) (quote "<= Dyns mín. e máx.") "" (om-make-point 703 445) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 667 449) (om-make-point 34 30) 90 "90" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 630 450) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 611 495) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 207 49) (quote "<= Fator de multiplicação para onsets e durs") "" (om-make-point 641 376) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 611 379) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 425 332) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 505 431) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 469 360) nil nil nil nil 1) (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 90 178) (om-make-point 65 96) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 8800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 22) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 17 172) (om-make-point 65 96) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 2100 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 524 311) (om-make-point 300 22) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 2" (om-make-point 368 58) (quote "<= atenção: na caixa sound, a unidade de tempo é seg.; pra traduzir pr'um chord-seq, precisa passar pra miliseg., ou seja, multiplicar por 1000.") "" (om-make-point 563 164) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 504 55) (quote "<= atenção: os onsets da caixa sound saem com decimais (e os retêm mesmo depois da multiplicação por 1000); pra traduzir pr'um chord-seq, precisa eliminar esses decimais, através de um om//, por ex.") "" (om-make-point 515 220) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 480 213) nil nil nil nil 2) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 212 341) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 221 301) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 260 334) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 37 562) (om-make-point 797 126) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6710) (3762) (4458) (2797) (2314) (2958) (3708) (4726) (2636) (3279) (3869) (2582) (4941) (5048) (3815) (3226) (3976) (4351) (3118) (7353) (3172) (3869) (3547) (3386) (2743) (4083) (4619) (3815) (4994) (4083) (7138) (6227) (4673) (8264) (4780) (4137) (3708) (5959) (4351) (2690) (3601) (5155) (2690) (6120) (4941) (3869) (6120) (7728) (4619) (2636) (4298) (2958) (4405) (3333) (3011) (2529) (2582) (3386) (3708) (3226) (3762) (2636) (4190) (2904) (4351) (3333) (4190) (3922) (3279) (2475) (4405) (5102) (3011) (4083) (4941) (3065) (3333) (4726) (3708) (3976) (2904) (3226) (3386) (3654) (3279) (4566) (7514) (3976) (3011) (5370) (5852) (7835) (4405) (3226) (6227) (2958) (7085) (6549) (3065) (8103) (5316) (4994) (6066) (3226) (4566) (3226) (4137) (3976) (6013) (3172) (4405) (4834) (5584) (4566) (4726) (8800) (8586) (3869) (5959) (5691) (3601) (5638) (3976) (2529) (3815) (2261) (3494) (4512) (4190) (3065) (3172) (2582) (2904) (3386) (2475) (2636) (2904) (2797) (4566) (4244) (4619) (4566) (4405) (3172) (3226) (3494) (3440) (4083) (3869) (5423) (2422) (4190) (3065) (4566) (3601) (4030) (5691) (4030) (2314) (3333) (2475) (2850) (3654) (5316) (3333) (2368) (7728) (3011) (5959) (2207) (4405) (2690) (3654) (3011) (2797) (3279) (4137) (3226) (4190) (4834) (6227) (2368) (3708) (4780) (4083) (3708) (3440) (2582) (4030) (4351) (6334) (3815) (2314) (4566) (3976) (4887) (4887) (6120) (3654) (4619) (4458) (3011) (2475) (4351) (3815) (4566) (3386) (2690) (3226) (3226) (3601) (3011) (3922) (4726) (3547) (2582) (4190) (3922) (3226) (2529) (3226) (2850) (3815) (4512) (5530) (5262) (4566) (4244) (7299) (4351) (4190) (3065) (2904) (2743) (2314) (3654) (3118) (2314) (2850) (3172) (4780) (3440) (2636) (2529) (3172) (3279) (3601) (3011) (5370) (3654) (3011) (3762) (3333) (3226) (3011) (3011) (5691) (2368) (2636) (4190) (3011) (2100) (3815) (5155) (2850) (2850) (3922) (3118) (3011) (6870) (3440) (5316) (7996) (7996) (7996))) :lonset (quote (0 526 714 792 896 938 962 1010 1086 1200 1236 1296 1378 1412 1534 1660 1740 1798 1884 1984 2038 2250 2306 2388 2458 2522 2562 2652 2762 2842 2966 3056 3260 3430 3542 3788 3904 3996 4072 4232 4332 4370 4442 4572 4610 4776 4898 4980 5146 5372 5482 5518 5616 5664 5766 5828 5878 5910 5944 6008 6084 6142 6220 6256 6350 6396 6496 6558 6652 6736 6796 6826 6928 7056 7106 7196 7318 7370 7432 7546 7622 7708 7754 7812 7876 7950 8010 8118 8336 8422 8472 8610 8766 8996 9098 9156 9326 9374 9576 9758 9810 10050 10186 10310 10474 10532 10640 10698 10790 10876 11038 11094 11196 11314 11460 11568 11682 11948 12206 12288 12448 12598 12670 12818 12904 12936 13016 13038 13106 13212 13306 13358 13414 13448 13494 13558 13588 13624 13670 13712 13820 13916 14026 14134 14236 14292 14350 14418 14484 14574 14656 14796 14824 14918 14970 15078 15150 15238 15388 15476 15500 15562 15592 15636 15710 15846 15908 15934 16160 16210 16370 16390 16492 16530 16604 16654 16696 16756 16848 16906 17000 17118 17288 17314 17390 17506 17596 17672 17738 17772 17860 17960 18134 18214 18238 18346 18432 18552 18672 18838 18912 19022 19126 19176 19206 19306 19386 19494 19558 19596 19654 19712 19784 19834 19918 20032 20102 20136 20230 20314 20372 20404 20462 20506 20586 20692 20836 20970 21078 21174 21384 21484 21578 21630 21676 21716 21740 21814 21868 21892 21936 21992 22108 22174 22210 22242 22298 22358 22430 22480 22618 22692 22742 22820 22882 22940 22990 23040 23190 23216 23252 23346 23396 23412 23492 23622 23666 23710 23794 23848 23898 24092 24158 24294 24530 24638)) :ldur (quote ((236) (136) (66) (194) (50) (54) (84) (44) (44) (130) (80) (16) (50) (94) (36) (26) (150) (50) (50) (58) (62) (78) (50) (74) (138) (50) (72) (60) (56) (32) (36) (66) (116) (56) (44) (24) (54) (74) (24) (40) (46) (52) (94) (100) (210) (96) (108) (134) (144) (106) (80) (44) (58) (32) (58) (84) (94) (34) (70) (114) (84) (50) (72) (58) (58) (38) (64) (108) (80) (100) (30) (50) (104) (110) (74) (166) (120) (120) (86) (108) (24) (80) (174) (100) (88) (34) (66) (76) (90) (116) (76) (26) (170) (118) (94) (58) (92) (60) (42) (50) (74) (38) (102) (20) (160) (50) (226) (26) (62) (136) (74) (44) (30) (62) (24) (88) (150) (88) (72) (108) (52) (94) (28) (140) (82) (90) (66) (68) (58) (56) (102) (108) (110) (96) (108) (42) (46) (36) (30) (64) (46) (34) (56) (52) (94) (106) (68) (22) (80) (32) (86) (148) (72) (150) (160) (82) (258) (266) (114) (108) (146) (118) (102) (56) (162) (86) (92) (58) (108) (58) (164) (124) (136) (240) (52) (182) (202) (48) (170) (58) (102) (230) (156) (138) (50) (86) (218) (108) (60) (74) (64) (58) (46) (86) (76) (114) (62) (52) (122) (90) (50) (128) (102) (30) (60) (84) (94) (62) (100) (46) (94) (36) (78) (58) (76) (64) (34) (32) (50) (62) (102) (48) (98) (36) (110) (226) (166) (82) (122) (166) (38) (130) (72) (38) (100) (160) (76) (92) (116) (246) (112) (170) (204) (90) (124) (80) (110) (90) (40) (64) (70) (82) (56) (212) (54) (100) (86) (58) (80) (126) (122) (34) (82) (60) (36) (114) (76) (48) (24) (42) (104) (78) (188) (88) (108))) :lvel (quote ((84) (45) (21) (74) (57) (61) (27) (80) (36) (83) (65) (28) (88) (17) (27) (30) (89) (39) (23) (44) (16) (44) (28) (86) (31) (83) (35) (58) (27) (80) (50) (85) (54) (63) (75) (27) (43) (74) (60) (37) (72) (11) (34) (64) (46) (82) (30) (24) (62) (28) (71) (14) (20) (47) (30) (56) (80) (13) (66) (86) (64) (89) (55) (42) (22) (73) (53) (32) (87) (67) (54) (72) (11) (21) (44) (11) (76) (12) (40) (69) (83) (88) (64) (84) (88) (64) (31) (16) (33) (53) (73) (81) (17) (34) (77) (52) (12) (10) (28) (82) (87) (60) (75) (31) (47) (49) (56) (43) (70) (73) (67) (77) (15) (24) (89) (53) (68) (81) (70) (83) (34) (39) (31) (25) (76) (29) (51) (39) (61) (59) (74) (12) (81) (29) (16) (46) (76) (70) (48) (67) (50) (61) (18) (52) (35) (62) (11) (82) (81) (23) (57) (11) (85) (46) (54) (86) (85) (60) (36) (23) (72) (12) (15) (86) (80) (29) (63) (78) (81) (68) (32) (78) (39) (14) (50) (14) (25) (17) (75) (13) (65) (58) (58) (28) (66) (34) (65) (45) (20) (60) (19) (58) (69) (60) (59) (60) (54) (53) (18) (58) (67) (42) (57) (54) (18) (35) (22) (17) (27) (29) (82) (49) (32) (51) (41) (76) (63) (84) (30) (22) (85) (15) (13) (72) (63) (55) (86) (79) (51) (26) (69) (67) (77) (73) (66) (74) (34) (56) (82) (74) (71) (36) (43) (25) (33) (29) (52) (81) (80) (44) (13) (87) (56) (23) (75) (53) (69) (64) (61) (53) (52) (38) (76) (90) (41) (84) (33) (87) (78) (33) (86) (16) (37) (55) (55))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((15) (9) (4) (12) (6) (5) (4) (2) (2) (7) (6) (3) (6) (6) (1) (2) (8) (5) (6) (4) (4) (6) (5) (5) (7) (4) (5) (4) (4) (3) (1) (4) (8) (4) (2) (1) (6) (4) (3) (3) (3) (6) (4) (5) (13) (4) (5) (8) (7) (5) (4) (2) (5) (2) (5) (5) (4) (1) (5) (8) (4) (5) (4) (6) (5) (2) (4) (5) (5) (6) (2) (4) (4) (9) (4) (9) (9) (8) (4) (4) (3) (5) (12) (5) (6) (2) (4) (5) (4) (7) (4) (3) (8) (8) (6) (6) (4) (5) (3) (5) (4) (3) (6) (2) (8) (4) (12) (2) (5) (8) (5) (3) (1) (4) (3) (5) (7) (5) (4) (6) (5) (4) (2) (7) (4) (6) (4) (5) (4) (6) (4) (4) (8) (5) (4) (2) (1) (2) (1) (6) (1) (3) (6) (4) (4) (4) (6) (1) (5) (3) (5) (8) (5) (9) (8) (4) (15) (16) (9) (4) (8) (8) (4) (6) (7) (4) (4) (4) (5) (4) (8) (7) (7) (14) (6) (12) (13) (6) (9) (6) (4) (12) (8) (8) (6) (4) (13) (4) (4) (5) (4) (4) (3) (4) (4) (8) (6) (6) (8) (4) (5) (7) (4) (2) (5) (5) (5) (4) (4) (2) (4) (3) (4) (4) (5) (6) (3) (3) (6) (6) (6) (5) (5) (3) (8) (13) (8) (5) (7) (7) (3) (9) (4) (1) (4) (9) (4) (5) (9) (16) (7) (7) (11) (4) (7) (5) (7) (4) (1) (5) (4) (6) (4) (12) (4) (6) (6) (6) (5) (7) (9) (3) (4) (6) (1) (7) (4) (5) (2) (2) (4) (5) (11) (11) (11))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1/100 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 485 151) (om-make-point 34 30) 33 "33" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 543 166) nil nil nil nil 1) (om-load-editor-box1 "Gil - One o'clock last morning, 20th April, 1970 (1971).wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 62 3) (om-make-point 1062 154) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "luizcasteloes" "Music" "iTunes" "iTunes Media" "Music" "Unknown Artist" "Unknown Album")) :device nil :host nil :name "Gil - One o'clock last morning, 20th April, 1970 (1971)" :type "wav") 1))) (when thesound (setf (markers thesound) (quote (5.99 8.122 9.001 10.192 10.663 10.945 11.478 12.356 13.642 14.05 14.74 15.68 16.057 17.437 18.879 19.789 20.447 21.419 22.548 23.176 25.59 26.217 27.158 27.942 28.664 29.134 30.138 31.392 32.301 33.713 34.748 37.068 38.981 40.267 43.058 44.375 45.41 46.288 48.108 49.237 49.676 50.491 51.965 52.404 54.286 55.666 56.606 58.488 61.06 62.314 62.722 63.819 64.384 65.544 66.234 66.799 67.175 67.551 68.273 69.151 69.809 70.687 71.095 72.161 72.694 73.823 74.544 75.611 76.551 77.241 77.586 78.747 80.189 80.754 81.789 83.169 83.765 84.455 85.772 86.619 87.591 88.124 88.783 89.504 90.351 91.041 92.264 94.741 95.713 96.278 97.846 99.633 102.236 103.397 104.055 105.999 106.532 108.822 110.891 111.487 114.216 115.752 117.164 119.045 119.704 120.927 121.585 122.62 123.592 125.443 126.07 127.23 128.579 130.241 131.464 132.75 135.792 138.709 139.649 141.469 143.162 143.978 145.671 146.644 147.02 147.929 148.18 148.933 150.156 151.222 151.818 152.445 152.822 153.355 154.076 154.421 154.829 155.362 155.832 157.055 158.153 159.407 160.63 161.791 162.418 163.076 163.86 164.613 165.617 166.557 168.157 168.47 169.537 170.133 171.356 172.171 173.175 174.868 175.872 176.154 176.844 177.189 177.69 178.537 180.073 180.795 181.077 183.649 184.213 186.032 186.251 187.412 187.851 188.698 189.262 189.733 190.422 191.457 192.116 193.182 194.531 196.475 196.757 197.635 198.953 199.956 200.834 201.587 201.964 202.967 204.096 206.072 206.982 207.264 208.487 209.459 210.839 212.187 214.069 214.916 216.17 217.362 217.926 218.271 219.4 220.31 221.533 222.254 222.693 223.352 224.01 224.826 225.39 226.363 227.648 228.432 228.84 229.906 230.847 231.506 231.882 232.541 233.042 233.952 235.144 236.774 238.311 239.534 240.632 243.015 244.144 245.21 245.806 246.339 246.778 247.061 247.907 248.503 248.786 249.287 249.915 251.232 251.984 252.392 252.768 253.396 254.086 254.901 255.465 257.033 257.88 258.445 259.323 260.044 260.703 261.267 261.832 263.525 263.839 264.246 265.313 265.877 266.065 266.975 268.449 268.951 269.452 270.393 271.02 271.585 273.78 274.533 276.069 278.766)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gil - One o'clock last morning, 20th April, 1970 (1971).wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 13 97) (om-make-point 1267 456) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil t))) (quote ((0 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (1 0 3 1 nil 0) (49 0 4 0 nil 0) (5 0 4 1 nil 0) (24 0 5 2 nil 0) (8 0 7 0 nil 0) (39 0 8 0 nil 0) (11 0 8 1 nil 2) (11 0 8 2 nil 0) (9 0 10 0 nil 0) (12 0 10 1 nil 0) (10 0 11 0 nil 0) (39 0 11 1 nil 0) (39 0 12 0 nil 0) (14 0 13 0 nil 0) (15 0 14 0 nil 0) (17 0 15 0 nil 0) (16 0 15 1 nil 0) (17 0 16 0 nil 0) (19 0 17 0 nil 0) (45 0 18 0 nil 0) (18 0 19 0 nil 0) (42 1 19 1 nil 0) (41 1 19 2 nil 0) (13 0 21 0 nil 2) (24 0 25 0 nil 0) (25 0 29 0 nil 0) (20 0 29 1 nil 0) (35 0 31 0 nil 0) (38 0 35 0 nil 0) (34 0 35 1 nil 0) (33 0 35 2 nil 0) (45 0 38 0 nil 0) (37 0 38 1 nil 0) (40 0 39 0 nil 0) (38 0 40 0 nil 0) (51 0 45 0 nil 0) (48 0 46 0 nil 0) (47 0 48 0 nil 0) (38 0 48 1 nil 0) (13 0 49 1 nil 0) (46 0 49 2 ((om-make-point 223 398) (om-make-point 273 474) (om-make-point 273 550) (om-make-point 304 562)) 0) (7 0 49 3 nil 0) (31 0 49 4 nil 0) (21 0 49 6 nil 0) (50 0 51 0 nil 0) (52 2 51 1 nil 0))) nil 6.0602))
