; OM File Header - Saved 2013/10/16 18:38:40
; (6.0602 :patc (om-make-point 10 60) (om-make-point 15 50) (om-make-point 1265 625) "" 183 0 "2013/08/01 9:22:52" "2013/10/16 17:22:18")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Hendrix Bb3" (quote ((om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 573 313) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 554 343) nil nil nil nil 1) (om-load-boxcomment "comment 6" (om-make-point 106 82) (quote "<= 2a versão com onsets, durs e dyns saindo das alturas") "" (om-make-point 908 518) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 198 28) (quote "<= dyns min. e max.") "" (om-make-point 744 306) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 198 28) (quote "<= onsets e durs min. e max.") "" (om-make-point 541 230) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 709 310) (om-make-point 35 30) 127 "127" nil) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 672 311) (om-make-point 28 30) 15 "15" nil) (om-load-boxcall (quote genfun) "OM-SCALE 3" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 660 344) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM 3" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 657 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 556 417) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X 2" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 506 415) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 439 337) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 500 235) (om-make-point 35 30) 333 "333" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 450 235) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 438 268) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 106 82) (quote "<= 1a versão com modo rítmico do 2o corte em loop") "" (om-make-point 263 524) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 385 284) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 145 354) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 7" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 428 503) (om-make-point 475 112) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850) (5898) (6716) (6638) (6418) (5856) (5344) (5652) (6948) (6690) (4272) (5570) (5938) (5802) (5332) (6068) (5424) (4326) (7564) (6964) (5492) (4304) (7280) (5548) (6788) (6816) (5574) (6300) (7022) (5898) (7040) (6494) (5588) (7520) (4248) (5858) (5332) (7070) (4344) (7550) (6272) (7240) (5476) (7236) (3958) (4232) (6386) (4902) (7244) (7012) (7026) (6728) (6424) (7550) (5990) (5526) (7692) (5396) (6862) (6864) (5334) (4378) (5384) (7490) (6228) (4282) (3436) (6208) (7280) (6904) (7010) (6958) (6850) (7322) (7024) (7538) (7694) (7254) (6434) (7502) (7298) (5368) (5342) (3354) (3304) (3370) (7896) (6476) (5916) (5314) (4452) (3836) (8152) (7588) (7652) (7930) (6994) (7194) (8332) (7626) (7530) (7496) (7410) (7374) (6798) (5372) (8282) (7290) (6920) (6888) (6880) (3310) (3358) (4908) (6392) (6244) (9758) (9666) (9320) (6978) (6014) (6466) (7210) (9250) (10004) (7228) (8094) (7636) (7474) (7938) (8142) (8426) (5940) (7690) (7180) (5378) (7496) (5990) (5976) (6670) (6730) (5938) (7080) (6828) (7094) (7034) (7216) (7054) (5232) (7516) (7488) (6700) (6364) (7282) (7122) (5024) (8064) (8046) (7680) (7426) (7296) (6644) (6666) (7002) (5318) (5942) (5524) (4540) (5562) (4598) (5972) (4498) (6920) (5462) (4582) (7524) (6886) (5402) (5348) (6822) (7930) (5508) (6766) (8020) (6186) (6778) (7050) (5798) (6612) (6302) (6818) (6632) (6282) (6054) (5830) (5526) (5408) (4800) (6384) (7714) (7474) (6240) (5878) (7944) (6326) (6012) (4314) (6554) (6234) (5896) (6614) (5878) (6612) (5272) (7030) (5254) (7214) (7200) (6670) (5838) (6216) (5918) (7468) (7458) (7166) (5372) (6648) (6884) (5340) (5296) (3390) (3374) (6980) (9750) (9226) (10752) (9968) (5374) (10342) (9238) (5356) (9296) (6186) (5802) (9962) (3410) (3348) (10590) (10106) (9858) (3430) (3384) (6300) (7466) (6268) (6756) (6234) (5314) (6794) (6238) (5566) (5372) (7190) (7182) (3382) (5832) (4240) (3428) (3338) (3336) (7506) (5594) (5488) (3754) (7538) (9756))) :lonset (quote (0 185 334 514 691 859 1006 1134 1273 1461 1640 1727 1863 2013 2158 2285 2440 2571 2660 2872 3061 3194 3282 3483 3618 3800 3983 4119 4283 4474 4623 4815 4986 5123 5333 5419 5566 5693 5886 5976 6187 6350 6550 6683 6882 6957 7042 7209 7320 7520 7711 7902 8082 8251 8462 8614 8748 8965 9094 9279 9464 9591 9682 9811 10020 10181 10268 10323 10483 10684 10871 11062 11251 11436 11639 11830 12041 12258 12458 12627 12837 13039 13167 13294 13346 13396 13449 13673 13844 13993 14119 14213 14283 14517 14730 14945 15171 15361 15559 15800 16014 16225 16434 16640 16845 17028 17157 17396 17597 17784 17970 18156 18206 18258 18369 18536 18698 18993 19285 19564 19754 19907 20077 20275 20551 20856 21055 21287 21502 21710 21936 22170 22415 22565 22782 22979 23108 23317 23469 23621 23799 23979 24129 24322 24506 24700 24892 25091 25283 25406 25616 25825 26004 26170 26371 26566 26681 26912 27142 27358 27565 27767 27944 28122 28313 28440 28590 28724 28821 28957 29056 29207 29302 29489 29621 29720 29930 30116 30246 30374 30558 30784 30918 31100 31329 31489 31671 31863 32008 32184 32348 32532 32708 32871 33025 33171 33305 33435 33542 33709 33927 34135 34297 34445 34671 34836 34989 35077 35250 35411 35559 35735 35883 36059 36184 36376 36500 36699 36897 37075 37221 37382 37531 37739 37947 38144 38273 38450 38636 38763 38889 38942 38995 39185 39480 39755 40088 40391 40520 40837 41112 41240 41518 41678 41823 42126 42180 42232 42559 42867 43166 43221 43274 43438 43646 43809 43990 44151 44277 44460 44621 44757 44886 45084 45281 45334 45480 45566 45621 45672 45723 45933 46070 46203 46270 46481 46851)) :ldur (quote ((584) (432) (102) (110) (194) (374) (304) (254) (324) (104) (330) (354) (416) (268) (322) (434) (332) (306) (420) (108) (326) (290) (354) (352) (402) (104) (300) (370) (422) (336) (364) (298) (384) (106) (106) (268) (398) (214) (380) (460) (368) (268) (378) (100) (254) (106) (394) (188) (254) (430) (366) (258) (422) (374) (550) (378) (362) (482) (418) (252) (300) (304) (434) (634) (328) (254) (464) (150) (292) (590) (258) (274) (254) (552) (258) (296) (298) (412) (106) (416) (434) (360) (272) (654) (254) (458) (420) (414) (256) (338) (140) (272) (610) (404) (558) (420) (252) (398) (386) (340) (396) (416) (364) (170) (398) (304) (376) (356) (346) (320) (172) (398) (358) (322) (222) (258) (372) (364) (292) (368) (296) (322) (616) (400) (382) (302) (388) (396) (104) (372) (258) (462) (294) (420) (384) (290) (416) (306) (322) (396) (590) (258) (410) (248) (382) (396) (416) (320) (250) (406) (334) (190) (468) (366) (180) (178) (374) (268) (394) (296) (426) (198) (272) (322) (262) (176) (468) (300) (606) (256) (478) (264) (666) (422) (382) (372) (402) (102) (372) (134) (356) (418) (352) (452) (110) (436) (298) (352) (384) (380) (358) (366) (100) (490) (256) (452) (256) (334) (368) (402) (404) (342) (298) (182) (278) (418) (418) (382) (326) (272) (590) (266) (176) (174) (400) (422) (294) (230) (382) (310) (320) (422) (390) (328) (356) (326) (380) (420) (270) (428) (352) (384) (386) (360) (266) (382) (424) (606) (598) (342) (334) (274) (402) (328) (370) (260) (324) (384) (308) (266) (550) (354) (394) (448) (260) (452) (106) (360) (290) (258) (292) (198) (400) (172) (452) (370) (252) (174) (338) (246) (300) (110) (430) (556) (222) (370))) :lvel (quote ((74) (47) (85) (59) (60) (30) (71) (46) (54) (66) (117) (55) (78) (74) (45) (69) (48) (121) (81) (81) (55) (62) (61) (55) (59) (65) (49) (78) (53) (15) (75) (75) (74) (74) (62) (65) (16) (45) (61) (45) (53) (68) (104) (49) (60) (73) (29) (45) (91) (81) (59) (71) (46) (17) (66) (68) (68) (75) (23) (59) (71) (74) (29) (29) (62) (63) (30) (74) (15) (87) (104) (16) (112) (79) (70) (68) (66) (46) (62) (71) (79) (78) (75) (44) (70) (74) (48) (75) (74) (55) (125) (56) (74) (71) (60) (38) (79) (59) (77) (46) (70) (106) (78) (79) (15) (111) (47) (22) (55) (47) (68) (80) (72) (78) (84) (127) (53) (65) (116) (61) (49) (46) (16) (16) (71) (69) (69) (41) (39) (54) (64) (46) (70) (72) (48) (78) (67) (54) (48) (87) (74) (80) (49) (68) (71) (71) (48) (16) (54) (112) (45) (55) (56) (85) (17) (80) (67) (78) (66) (46) (104) (46) (78) (65) (39) (77) (30) (46) (48) (53) (61) (92) (78) (72) (60) (69) (31) (73) (45) (55) (34) (105) (65) (17) (65) (86) (67) (68) (16) (66) (78) (31) (47) (81) (45) (49) (25) (53) (16) (45) (30) (59) (57) (69) (66) (78) (50) (53) (90) (66) (78) (75) (69) (78) (71) (59) (32) (34) (67) (79) (33) (115) (69) (81) (114) (66) (79) (45) (53) (68) (48) (34) (44) (54) (59) (68) (61) (49) (86) (76) (74) (88) (54) (59) (45) (46) (71) (71) (56) (30) (68) (65) (80) (53) (72) (85) (70) (112) (115) (15) (73) (16) (63) (59) (60) (54) (49) (88) (70) (85) (46) (78) (17) (76) (60) (55))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 9/10 nil 1000 0 (om-make-point 1263 368) (om-make-point 5 196) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 217 285) (om-make-point 32 30) 1.8 "1.8" nil) (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 191 324) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 310 396) (om-make-point 35 30) 127 "127" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 273 395) (om-make-point 28 30) 40 "40" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 251 434) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 133 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 158 273) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 90 427) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 81 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 46 394) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 40 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 90 341) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 22 330) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 9 508) (om-make-point 247 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850) (5898) (6716) (6638) (6418) (5856) (5344) (5652) (6948) (6690) (4272) (5570) (5938) (5802) (5332) (6068) (5424) (4326) (7564) (6964) (5492) (4304) (7280) (5548) (6788) (6816) (5574) (6300) (7022) (5898) (7040) (6494) (5588) (7520) (4248) (5858) (5332) (7070) (4344) (7550) (6272) (7240) (5476) (7236) (3958) (4232) (6386) (4902) (7244) (7012) (7026) (6728) (6424) (7550) (5990) (5526) (7692) (5396) (6862) (6864) (5334) (4378) (5384) (7490) (6228) (4282) (3436) (6208) (7280) (6904) (7010) (6958) (6850) (7322) (7024) (7538) (7694) (7254) (6434) (7502) (7298) (5368) (5342) (3354) (3304) (3370) (7896) (6476) (5916) (5314) (4452) (3836) (8152) (7588) (7652) (7930) (6994) (7194) (8332) (7626) (7530) (7496) (7410) (7374) (6798) (5372) (8282) (7290) (6920) (6888) (6880) (3310) (3358) (4908) (6392) (6244) (9758) (9666) (9320) (6978) (6014) (6466) (7210) (9250) (10004) (7228) (8094) (7636) (7474) (7938) (8142) (8426) (5940) (7690) (7180) (5378) (7496) (5990) (5976) (6670) (6730) (5938) (7080) (6828) (7094) (7034) (7216) (7054) (5232) (7516) (7488) (6700) (6364) (7282) (7122) (5024) (8064) (8046) (7680) (7426) (7296) (6644) (6666) (7002) (5318) (5942) (5524) (4540) (5562) (4598) (5972) (4498) (6920) (5462) (4582) (7524) (6886) (5402) (5348) (6822) (7930) (5508) (6766) (8020) (6186) (6778) (7050) (5798) (6612) (6302) (6818) (6632) (6282) (6054) (5830) (5526) (5408) (4800) (6384) (7714) (7474) (6240) (5878) (7944) (6326) (6012) (4314) (6554) (6234) (5896) (6614) (5878) (6612) (5272) (7030) (5254) (7214) (7200) (6670) (5838) (6216) (5918) (7468) (7458) (7166) (5372) (6648) (6884) (5340) (5296) (3390) (3374) (6980) (9750) (9226) (10752) (9968) (5374) (10342) (9238) (5356) (9296) (6186) (5802) (9962) (3410) (3348) (10590) (10106) (9858) (3430) (3384) (6300) (7466) (6268) (6756) (6234) (5314) (6794) (6238) (5566) (5372) (7190) (7182) (3382) (5832) (4240) (3428) (3338) (3336) (7506) (5594) (5488) (3754) (7538) (9756))) :lonset (quote (0 172 244 366 422 550 689 817 1000 1128 1267 1411 1489 1661 1733 1855 1911 2039 2178 2306 2489 2617 2756 2900 2978 3150 3222 3344 3400 3528 3667 3795 3978 4106 4245 4389 4467 4639 4711 4833 4889 5017 5156 5284 5467 5595 5734 5878 5956 6128 6200 6322 6378 6506 6645 6773 6956 7084 7223 7367 7445 7617 7689 7811 7867 7995 8134 8262 8445 8573 8712 8856 8934 9106 9178 9300 9356 9484 9623 9751 9934 10062 10201 10345 10423 10595 10667 10789 10845 10973 11112 11240 11423 11551 11690 11834 11912 12084 12156 12278 12334 12462 12601 12729 12912 13040 13179 13323 13401 13573 13645 13767 13823 13951 14090 14218 14401 14529 14668 14812 14890 15062 15134 15256 15312 15440 15579 15707 15890 16018 16157 16301 16379 16551 16623 16745 16801 16929 17068 17196 17379 17507 17646 17790 17868 18040 18112 18234 18290 18418 18557 18685 18868 18996 19135 19279 19357 19529 19601 19723 19779 19907 20046 20174 20357 20485 20624 20768 20846 21018 21090 21212 21268 21396 21535 21663 21846 21974 22113 22257 22335 22507 22579 22701 22757 22885 23024 23152 23335 23463 23602 23746 23824 23996 24068 24190 24246 24374 24513 24641 24824 24952 25091 25235 25313 25485 25557 25679 25735 25863 26002 26130 26313 26441 26580 26724 26802 26974 27046 27168 27224 27352 27491 27619 27802 27930 28069 28213 28291 28463 28535 28657 28713 28841 28980 29108 29291 29419 29558 29702 29780 29952 30024 30146 30202 30330 30469 30597 30780 30908 31047 31191 31269 31441 31513 31635 31691 31819 31958 32086 32269 32397 32536 32680 32758 32930 33002 33124 33180 33308 33447 33575 33758 33886 34025 34169 34297)) :ldur (quote ((144) (128) (72) (139) (78) (144) (183) (139) (128) (128) (72) (128) (78) (183) (172) (122) (172) (78) (72) (139) (172) (128) (144) (144) (139) (72) (144) (139) (128) (78) (78) (128) (144) (128) (78) (139) (139) (128) (56) (128) (144) (139) (144) (122) (139) (144) (128) (128) (139) (144) (128) (183) (56) (139) (122) (128) (56) (144) (128) (183) (78) (172) (78) (128) (128) (72) (139) (183) (183) (128) (144) (172) (139) (183) (122) (128) (72) (56) (128) (128) (56) (128) (56) (183) (72) (72) (139) (183) (144) (122) (78) (183) (72) (56) (122) (128) (183) (172) (144) (139) (183) (72) (183) (122) (183) (122) (139) (72) (122) (56) (72) (122) (172) (56) (128) (128) (128) (128) (139) (72) (183) (139) (139) (128) (128) (56) (72) (139) (128) (172) (183) (56) (56) (128) (78) (78) (139) (183) (78) (144) (78) (72) (128) (72) (128) (128) (56) (139) (139) (56) (122) (122) (128) (78) (128) (72) (128) (172) (128) (144) (122) (139) (144) (56) (56) (139) (122) (128) (128) (122) (172) (56) (139) (139) (128) (122) (122) (128) (139) (56) (172) (144) (139) (72) (56) (72) (128) (122) (172) (139) (144) (72) (78) (128) (128) (128) (139) (144) (72) (172) (128) (128) (78) (78) (172) (139) (172) (183) (139) (183) (122) (56) (172) (139) (78) (183) (183) (78) (128) (56) (128) (128) (128) (172) (122) (122) (56) (139) (183) (128) (139) (128) (183) (122) (172) (72) (128) (128) (56) (139) (144) (128) (139) (128) (139) (78) (139) (139) (139) (122) (139) (128) (78) (172) (128) (172) (72) (128) (144) (139) (139) (128) (128) (172) (172) (172) (128) (128) (144) (78) (128) (139) (128) (128) (78) (128))) :lvel (quote ((89) (40) (89) (40) (40) (100) (119) (89) (89) (89) (51) (51) (55) (97) (89) (97) (97) (89) (100) (55) (85) (97) (40) (100) (100) (89) (51) (127) (127) (127) (119) (89) (40) (40) (119) (97) (119) (89) (85) (100) (100) (89) (85) (119) (89) (119) (100) (97) (119) (40) (85) (40) (51) (89) (85) (127) (40) (89) (51) (89) (119) (100) (100) (127) (100) (55) (89) (89) (97) (89) (100) (55) (89) (97) (89) (85) (119) (40) (89) (89) (89) (89) (89) (97) (55) (89) (85) (89) (51) (40) (89) (55) (97) (51) (97) (97) (97) (89) (89) (55) (85) (40) (119) (89) (100) (85) (97) (97) (40) (85) (40) (55) (89) (89) (51) (89) (89) (127) (97) (89) (40) (89) (100) (119) (97) (89) (89) (127) (51) (89) (97) (97) (127) (89) (55) (89) (119) (97) (97) (85) (55) (89) (89) (55) (89) (55) (119) (97) (97) (55) (100) (97) (127) (55) (85) (97) (51) (85) (89) (97) (119) (55) (100) (97) (119) (127) (89) (89) (51) (127) (55) (100) (85) (55) (119) (89) (51) (97) (40) (40) (97) (97) (89) (89) (89) (97) (89) (89) (55) (40) (51) (40) (85) (97) (100) (85) (119) (89) (97) (85) (89) (97) (97) (97) (85) (97) (85) (97) (100) (97) (119) (89) (55) (89) (85) (127) (51) (40) (127) (51) (51) (89) (89) (89) (51) (89) (100) (40) (89) (89) (55) (97) (127) (89) (51) (127) (100) (119) (89) (97) (127) (89) (100) (51) (85) (127) (97) (127) (97) (100) (127) (85) (97) (89) (97) (85) (119) (55) (51) (119) (127) (127) (51) (127) (89) (127) (40) (51) (55) (51) (119) (119) (97) (40) (55) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 9/10 nil 1000 0 (om-make-point 1263 368) (om-make-point 5 196) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 9 266) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= 2o corte (em 1/8 de tom)$") "" (om-make-point 901 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 666 141) (om-make-point 235 80) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5898 6716 6638 6418 5856 5344 5652 6948 6690 4272 5570 5938 5802 5332 6068 5424 4326 7564 6964 5492 4304 7280 5548) (6788 6816 5574 6300 7022 5898 7040 6494 5588 7520 4248 5858 5332 7070 4344 7550 6272 7240 5476 7236 3958 4232 6386 4902) (7244 7012 7026 6728 6424 7550 5990 5526 7692 5396 6862 6864 5334 4378 5384 7490 6228 4282 3436 6208) (7280 6904 7010 6958 6850 7322 7024 7538 7694 7254 6434 7502 7298 5368 5342 3354 3304 3370 7896 6476 5916 5314 4452 3836) (8152 7588 7652 7930 6994 7194 8332 7626 7530 7496 7410 7374 6798 5372 8282 7290 6920 6888 6880 3310 3358 4908 6392 6244) (9758 9666 9320 6978 6014 6466 7210 9250 10004 7228 8094 7636 7474 7938 8142 8426 5940 7690 7180 5378 7496) (5990 5976 6670 6730 5938 7080 6828 7094 7034 7216 7054 5232 7516 7488 6700 6364 7282 7122 5024 8064 8046 7680 7426 7296) (6644 6666 7002 5318 5942 5524 4540 5562 4598 5972 4498 6920 5462 4582 7524 6886 5402 5348 6822 7930 5508 6766 8020 6186) (6778 7050 5798 6612 6302 6818 6632 6282 6054 5830 5526 5408 4800 6384 7714 7474 6240 5878 7944 6326 6012 4314 6554 6234) (5896 6614 5878 6612 5272 7030 5254 7214 7200 6670 5838 6216 5918 7468 7458 7166 5372 6648 6884 5340 5296 3390 3374 6980) (9750 9226 10752 9968 5374 10342 9238 5356 9296 6186 5802 9962 3410 3348 10590 10106 9858 3430 3384) (6300 7466 6268 6756 6234 5314 6794 6238 5566 5372 7190 7182 3382 5832 4240 3428 3338 3336 7506 5594 5488 3754 7538 9756))) :lonset (quote (0 310 440 660 760 990 1240 1470 1800 2030 2280 2540 2680)) :ldur (quote ((60 60 120 140 60 60 60 120 140 120 140 140 120 180 60 140 140 180 60 140 120 180 120 180) (120 100 120 100 80 20 20 20 100 0 100 20 20 120 120 20 120 80 20 80 80 100 80 80) (100 100 100 100 100 100 100 100 100 100 0 0 0 0 0 0 0 0 0 0) (80 80 80 160 0 160 80 80 160 0 80 160 160 160 80 80 160 0 0 0 160 0 160 0) (140 140 140 140 140 140 140 120 120 120 120 120 120 120 120 120 120 120 0 120 0 120 120 0) (91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91) (140 80 160 140 160 80 80 80 140 140 140 140 0 80 0 0 0 0 140 160 140 160 160 0) (120 120 20 20 180 100 120 120 100 120 120 120 100 120 20 120 120 180 180 20 120 120 20 120) (0 120 0 120 0 120 120 0 120 0 120 120 0 120 0 120 120 120 0 120 120 120 120 120) (140 0 20 0 0 0 0 140 140 20 140 140 20 20 0 20 140 20 140 140 20 140 140 140) (160 160 160 0 160 60 0 60 160 0 0 160 0 160 160 160 60 0 60) (0 100 140 0 100 100 140 140 120 140 140 120 140 0 0 0 120 100 120 100 140 140 140 120))) :lvel (quote ((81 81 80 66 61 51 50 47 45 45 43 41 40 39 39 35 35 35 34 34 33 31 30 29) (108 83 62 61 51 51 40 37 36 35 31 29 29 24 23 22 22 21 19 17 17 16 15 15) (109 74 58 36 36 29 28 28 27 21 10 5 5 5 4 3 3 3 3 1) (33 20 17 13 9 8 8 7 6 6 6 5 5 5 5 4 4 3 2 2 2 2 2 2) (79 67 65 54 48 40 37 6 6 6 6 6 6 6 5 4 4 4 4 4 3 2 1 1) (47 46 43 35 35 26 25 24 23 23 22 22 21 20 15 14 10 9 9 7 5) (103 86 84 63 59 51 49 41 36 32 31 17 10 10 10 9 8 8 8 7 7 6 6 6) (127 122 113 60 54 45 42 40 38 37 34 33 29 28 27 25 24 24 21 20 20 18 17 17) (103 83 43 38 38 37 34 32 29 28 28 28 28 26 23 21 21 20 19 18 17 12 10 8) (66 52 35 34 30 20 18 15 13 11 11 9 9 8 8 8 7 6 5 5 5 5 5 4) (11 10 8 8 8 7 7 7 6 6 6 5 5 5 4 4 4 4 4) (26 18 13 11 9 8 7 7 7 7 6 6 6 5 5 5 5 5 4 4 4 4 3 2))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 10 nil 1000 0 (om-make-point 1263 368) (om-make-point 5 196) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= 2o corte (em 1/4 de tom)$") "" (om-make-point 576 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 379 141) (om-make-point 198 80) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5898 6716 6638 6418 5856 5344 5652 6948 6690 4272 5570 5938 5802 5332 6068 5424 4326 7564 6964 5492 4304 7280 5548) (6788 6816 5574 6300 7022 5898 7040 6494 5588 7520 4248 5858 5332 7070 4344 7550 6272 7240 5476 7236 3958 4232 6386 4902) (7244 7012 7026 6728 6424 7550 5990 5526 7692 5396 6862 6864 5334 4378 5384 7490 6228 4282 3436 6208) (7280 6904 7010 6958 6850 7322 7024 7538 7694 7254 6434 7502 7298 5368 5342 3354 3304 3370 7896 6476 5916 5314 4452 3836) (8152 7588 7652 7930 6994 7194 8332 7626 7530 7496 7410 7374 6798 5372 8282 7290 6920 6888 6880 3310 3358 4908 6392 6244) (9758 9666 9320 6978 6014 6466 7210 9250 10004 7228 8094 7636 7474 7938 8142 8426 5940 7690 7180 5378 7496) (5990 5976 6670 6730 5938 7080 6828 7094 7034 7216 7054 5232 7516 7488 6700 6364 7282 7122 5024 8064 8046 7680 7426 7296) (6644 6666 7002 5318 5942 5524 4540 5562 4598 5972 4498 6920 5462 4582 7524 6886 5402 5348 6822 7930 5508 6766 8020 6186) (6778 7050 5798 6612 6302 6818 6632 6282 6054 5830 5526 5408 4800 6384 7714 7474 6240 5878 7944 6326 6012 4314 6554 6234) (5896 6614 5878 6612 5272 7030 5254 7214 7200 6670 5838 6216 5918 7468 7458 7166 5372 6648 6884 5340 5296 3390 3374 6980) (9750 9226 10752 9968 5374 10342 9238 5356 9296 6186 5802 9962 3410 3348 10590 10106 9858 3430 3384) (6300 7466 6268 6756 6234 5314 6794 6238 5566 5372 7190 7182 3382 5832 4240 3428 3338 3336 7506 5594 5488 3754 7538 9756))) :lonset (quote (0 310 440 660 760 990 1240 1470 1800 2030 2280 2540 2680)) :ldur (quote ((60 60 120 140 60 60 60 120 140 120 140 140 120 180 60 140 140 180 60 140 120 180 120 180) (120 100 120 100 80 20 20 20 100 0 100 20 20 120 120 20 120 80 20 80 80 100 80 80) (100 100 100 100 100 100 100 100 100 100 0 0 0 0 0 0 0 0 0 0) (80 80 80 160 0 160 80 80 160 0 80 160 160 160 80 80 160 0 0 0 160 0 160 0) (140 140 140 140 140 140 140 120 120 120 120 120 120 120 120 120 120 120 0 120 0 120 120 0) (91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91) (140 80 160 140 160 80 80 80 140 140 140 140 0 80 0 0 0 0 140 160 140 160 160 0) (120 120 20 20 180 100 120 120 100 120 120 120 100 120 20 120 120 180 180 20 120 120 20 120) (0 120 0 120 0 120 120 0 120 0 120 120 0 120 0 120 120 120 0 120 120 120 120 120) (140 0 20 0 0 0 0 140 140 20 140 140 20 20 0 20 140 20 140 140 20 140 140 140) (160 160 160 0 160 60 0 60 160 0 0 160 0 160 160 160 60 0 60) (0 100 140 0 100 100 140 140 120 140 140 120 140 0 0 0 120 100 120 100 140 140 140 120))) :lvel (quote ((81 81 80 66 61 51 50 47 45 45 43 41 40 39 39 35 35 35 34 34 33 31 30 29) (108 83 62 61 51 51 40 37 36 35 31 29 29 24 23 22 22 21 19 17 17 16 15 15) (109 74 58 36 36 29 28 28 27 21 10 5 5 5 4 3 3 3 3 1) (33 20 17 13 9 8 8 7 6 6 6 5 5 5 5 4 4 3 2 2 2 2 2 2) (79 67 65 54 48 40 37 6 6 6 6 6 6 6 5 4 4 4 4 4 3 2 1 1) (47 46 43 35 35 26 25 24 23 23 22 22 21 20 15 14 10 9 9 7 5) (103 86 84 63 59 51 49 41 36 32 31 17 10 10 10 9 8 8 8 7 7 6 6 6) (127 122 113 60 54 45 42 40 38 37 34 33 29 28 27 25 24 24 21 20 20 18 17 17) (103 83 43 38 38 37 34 32 29 28 28 28 28 26 23 21 21 20 19 18 17 12 10 8) (66 52 35 34 30 20 18 15 13 11 11 9 9 8 8 8 7 6 5 5 5 5 5 4) (11 10 8 8 8 7 7 7 6 6 6 5 5 5 4 4 4 4 4) (26 18 13 11 9 8 7 7 7 7 6 6 6 5 5 5 5 5 4 4 4 4 3 2))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 10 nil 1000 0 (om-make-point 1263 368) (om-make-point 5 196) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= 1o corte (rítmico)$") "" (om-make-point 638 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 21 133) (om-make-point 232 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5898 6716 6638 6418 5856 5344 5652 6948 6690 4272 5570 5938 5802 5332 6068 5424 4326 7564 6964 5492 4304 7280 5548) (6788 6816 5574 6300 7022 5898 7040 6494 5588 7520 4248 5858 5332 7070 4344 7550 6272 7240 5476 7236 3958 4232 6386 4902) (7244 7012 7026 6728 6424 7550 5990 5526 7692 5396 6862 6864 5334 4378 5384 7490 6228 4282 3436 6208) (7280 6904 7010 6958 6850 7322 7024 7538 7694 7254 6434 7502 7298 5368 5342 3354 3304 3370 7896 6476 5916 5314 4452 3836) (8152 7588 7652 7930 6994 7194 8332 7626 7530 7496 7410 7374 6798 5372 8282 7290 6920 6888 6880 3310 3358 4908 6392 6244) (9758 9666 9320 6978 6014 6466 7210 9250 10004 7228 8094 7636 7474 7938 8142 8426 5940 7690 7180 5378 7496) (5990 5976 6670 6730 5938 7080 6828 7094 7034 7216 7054 5232 7516 7488 6700 6364 7282 7122 5024 8064 8046 7680 7426 7296) (6644 6666 7002 5318 5942 5524 4540 5562 4598 5972 4498 6920 5462 4582 7524 6886 5402 5348 6822 7930 5508 6766 8020 6186) (6778 7050 5798 6612 6302 6818 6632 6282 6054 5830 5526 5408 4800 6384 7714 7474 6240 5878 7944 6326 6012 4314 6554 6234) (5896 6614 5878 6612 5272 7030 5254 7214 7200 6670 5838 6216 5918 7468 7458 7166 5372 6648 6884 5340 5296 3390 3374 6980) (9750 9226 10752 9968 5374 10342 9238 5356 9296 6186 5802 9962 3410 3348 10590 10106 9858 3430 3384) (6300 7466 6268 6756 6234 5314 6794 6238 5566 5372 7190 7182 3382 5832 4240 3428 3338 3336 7506 5594 5488 3754 7538 9756))) :lonset (quote (0 310 440 660 760 990 1240 1470 1800 2030 2280 2540 2680)) :ldur (quote ((60 60 120 140 60 60 60 120 140 120 140 140 120 180 60 140 140 180 60 140 120 180 120 180) (120 100 120 100 80 20 20 20 100 0 100 20 20 120 120 20 120 80 20 80 80 100 80 80) (100 100 100 100 100 100 100 100 100 100 0 0 0 0 0 0 0 0 0 0) (80 80 80 160 0 160 80 80 160 0 80 160 160 160 80 80 160 0 0 0 160 0 160 0) (140 140 140 140 140 140 140 120 120 120 120 120 120 120 120 120 120 120 0 120 0 120 120 0) (91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91) (140 80 160 140 160 80 80 80 140 140 140 140 0 80 0 0 0 0 140 160 140 160 160 0) (120 120 20 20 180 100 120 120 100 120 120 120 100 120 20 120 120 180 180 20 120 120 20 120) (0 120 0 120 0 120 120 0 120 0 120 120 0 120 0 120 120 120 0 120 120 120 120 120) (140 0 20 0 0 0 0 140 140 20 140 140 20 20 0 20 140 20 140 140 20 140 140 140) (160 160 160 0 160 60 0 60 160 0 0 160 0 160 160 160 60 0 60) (0 100 140 0 100 100 140 140 120 140 140 120 140 0 0 0 120 100 120 100 140 140 140 120))) :lvel (quote ((81 81 80 66 61 51 50 47 45 45 43 41 40 39 39 35 35 35 34 34 33 31 30 29) (108 83 62 61 51 51 40 37 36 35 31 29 29 24 23 22 22 21 19 17 17 16 15 15) (109 74 58 36 36 29 28 28 27 21 10 5 5 5 4 3 3 3 3 1) (33 20 17 13 9 8 8 7 6 6 6 5 5 5 5 4 4 3 2 2 2 2 2 2) (79 67 65 54 48 40 37 6 6 6 6 6 6 6 5 4 4 4 4 4 3 2 1 1) (47 46 43 35 35 26 25 24 23 23 22 22 21 20 15 14 10 9 9 7 5) (103 86 84 63 59 51 49 41 36 32 31 17 10 10 10 9 8 8 8 7 7 6 6 6) (127 122 113 60 54 45 42 40 38 37 34 33 29 28 27 25 24 24 21 20 20 18 17 17) (103 83 43 38 38 37 34 32 29 28 28 28 28 26 23 21 21 20 19 18 17 12 10 8) (66 52 35 34 30 20 18 15 13 11 11 9 9 8 8 8 7 6 5 5 5 5 5 4) (11 10 8 8 8 7 7 7 6 6 6 5 5 5 4 4 4 4 4) (26 18 13 11 9 8 7 7 7 7 6 6 6 5 5 5 5 5 4 4 4 4 3 2))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 10 nil 1000 0 (om-make-point 1263 368) (om-make-point 5 196) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 107 59) (quote "<= 2o corte (durs); em 1/2 tom: melhor$$") "" (om-make-point 254 141) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1099 143) (om-make-point 59 24) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1047 169) (om-make-point 28 30) 0 "00" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1097 203) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1041 66) (om-make-point 163 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 974 17) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1096 19) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1065 122) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1161 18) (om-make-point 21 23) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= transcrição original") "" (om-make-point 301 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 405 8) (om-make-point 232 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5898 6716 6638 6418 5856 5344 5652 6948 6690 4272 5570 5938 5802 5332 6068 5424 4326 7564 6964 5492 4304 7280 5548) (6788 6816 5574 6300 7022 5898 7040 6494 5588 7520 4248 5858 5332 7070 4344 7550 6272 7240 5476 7236 3958 4232 6386 4902) (7244 7012 7026 6728 6424 7550 5990 5526 7692 5396 6862 6864 5334 4378 5384 7490 6228 4282 3436 6208) (7280 6904 7010 6958 6850 7322 7024 7538 7694 7254 6434 7502 7298 5368 5342 3354 3304 3370 7896 6476 5916 5314 4452 3836) (8152 7588 7652 7930 6994 7194 8332 7626 7530 7496 7410 7374 6798 5372 8282 7290 6920 6888 6880 3310 3358 4908 6392 6244) (9758 9666 9320 6978 6014 6466 7210 9250 10004 7228 8094 7636 7474 7938 8142 8426 5940 7690 7180 5378 7496) (5990 5976 6670 6730 5938 7080 6828 7094 7034 7216 7054 5232 7516 7488 6700 6364 7282 7122 5024 8064 8046 7680 7426 7296) (6644 6666 7002 5318 5942 5524 4540 5562 4598 5972 4498 6920 5462 4582 7524 6886 5402 5348 6822 7930 5508 6766 8020 6186) (6778 7050 5798 6612 6302 6818 6632 6282 6054 5830 5526 5408 4800 6384 7714 7474 6240 5878 7944 6326 6012 4314 6554 6234) (5896 6614 5878 6612 5272 7030 5254 7214 7200 6670 5838 6216 5918 7468 7458 7166 5372 6648 6884 5340 5296 3390 3374 6980) (9750 9226 10752 9968 5374 10342 9238 5356 9296 6186 5802 9962 3410 3348 10590 10106 9858 3430 3384) (6300 7466 6268 6756 6234 5314 6794 6238 5566 5372 7190 7182 3382 5832 4240 3428 3338 3336 7506 5594 5488 3754 7538 9756))) :lonset (quote (0 310 440 660 760 990 1240 1470 1800 2030 2280 2540 2680)) :ldur (quote ((60 60 120 140 60 60 60 120 140 120 140 140 120 180 60 140 140 180 60 140 120 180 120 180) (120 100 120 100 80 20 20 20 100 0 100 20 20 120 120 20 120 80 20 80 80 100 80 80) (100 100 100 100 100 100 100 100 100 100 0 0 0 0 0 0 0 0 0 0) (80 80 80 160 0 160 80 80 160 0 80 160 160 160 80 80 160 0 0 0 160 0 160 0) (140 140 140 140 140 140 140 120 120 120 120 120 120 120 120 120 120 120 0 120 0 120 120 0) (140 0 0 0 140 0 140 0 140 0 140 140 140 140 140 140 140 140 140 140 140) (140 80 160 140 160 80 80 80 140 140 140 140 0 80 0 0 0 0 140 160 140 160 160 0) (120 120 20 20 180 100 120 120 100 120 120 120 100 120 20 120 120 180 180 20 120 120 20 120) (0 120 0 120 0 120 120 0 120 0 120 120 0 120 0 120 120 120 0 120 120 120 120 120) (140 0 20 0 0 0 0 140 140 20 140 140 20 20 0 20 140 20 140 140 20 140 140 140) (160 160 160 0 160 60 0 60 160 0 0 160 0 160 160 160 60 0 60) (0 100 140 0 100 100 140 140 120 140 140 120 140 0 0 0 120 100 120 100 140 140 140 120))) :lvel (quote ((81 81 80 66 61 51 50 47 45 45 43 41 40 39 39 35 35 35 34 34 33 31 30 29) (108 83 62 61 51 51 40 37 36 35 31 29 29 24 23 22 22 21 19 17 17 16 15 15) (109 74 58 36 36 29 28 28 27 21 10 5 5 5 4 3 3 3 3 1) (33 20 17 13 9 8 8 7 6 6 6 5 5 5 5 4 4 3 2 2 2 2 2 2) (79 67 65 54 48 40 37 6 6 6 6 6 6 6 5 4 4 4 4 4 3 2 1 1) (47 46 43 35 35 26 25 24 23 23 22 22 21 20 15 14 10 9 9 7 5) (103 86 84 63 59 51 49 41 36 32 31 17 10 10 10 9 8 8 8 7 7 6 6 6) (127 122 113 60 54 45 42 40 38 37 34 33 29 28 27 25 24 24 21 20 20 18 17 17) (103 83 43 38 38 37 34 32 29 28 28 28 28 26 23 21 21 20 19 18 17 12 10 8) (66 52 35 34 30 20 18 15 13 11 11 9 9 8 8 8 7 6 5 5 5 5 5 4) (11 10 8 8 8 7 7 7 6 6 6 5 5 5 4 4 4 4 4) (26 18 13 11 9 8 7 7 7 7 6 6 6 5 5 5 5 5 4 4 4 4 3 2))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 10 nil 1000 0 (om-make-point 1263 368) (om-make-point 5 196) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 84 7) (om-make-point 210 112) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5898 6716 6638 6418 5856 5344 5652 6948 6690 4272 5570 5938 5802 5332 6068 5424 4326 7564 6964 5492 4304 7280 5548) (6894 6870 7064 5834 5720 5470 5708 4300 5390 7202 4420 5914 5864 5752 6348 5560 4320 6264 6290 4448 7220 5770 7142 6576) (6870 5866 6846 5360 4316 6490 5368 6214 6894 6256 5824 5674 7580 7266 4372 7510 7220 6292 5300 3426 3402 7474 7262 5758) (6788 6816 5574 6300 7022 5898 7040 6494 5588 7520 4248 5858 5332 7070 4344 7550 6272 7240 5476 7236 3958 4232 6386 4902) (7244 7012 7026 6728 6424 7550 5990 5526 7692 5396 6862 6864 5334 4378 5384 7490 6228 4282 3436 6208) (7084 7696 7266 7250 7216 6768 6866 7094 6414 6996 6848 5630 7316 7210 6980 6892 7668 5404 5338 5306 7056 6466 5918 5866) (7280 6904 7010 6958 6850 7322 7024 7538 7694 7254 6434 7502 7298 5368 5342 3354 3304 3370 7896 6476 5916 5314 4452 3836) (8152 7588 7652 7930 6994 7194 8332 7626 7530 7496 7410 7374 6798 5372 8282 7290 6920 6888 6880 3310 3358 4908 6392 6244) (8158 7698 5922 7458 6920 7218 7584 7950 8338 9842 5856 8198 7642 9806 8182 8124 6208 10098 9644 9220 7678 6944 5344 7936) (9758 9666 9320 6978 6014 6466 7210 9250 10004 7228 8094 7636 7474 7938 8142 8426 5940 7690 7180 5378 7496) (9130 9264 9790 5084 9990 5444 4256 9964 8054 9288 7204 7218 8336 8340 8024 5842 4286 9654 6952 9322 8182 9230 7566 5372) (5990 5976 6670 6730 5938 7080 6828 7094 7034 7216 7054 5232 7516 7488 6700 6364 7282 7122 5024 8064 8046 7680 7426 7296) (6866 6844 5538 4964 5722 4732 4372 6234 4754 6288 5692 4456 7068 7718 7348 9122 5610 6208 7702 4508 6944 5340 7220 5898) (6644 6666 7002 5318 5942 5524 4540 5562 4598 5972 4498 6920 5462 4582 7524 6886 5402 5348 6822 7930 5508 6766 8020 6186) (6826 5338 8044 6896 6858 5318 6370 5800 6612 6200 5920 6332 7550 7218 3426 3402 7516 6268 4774 4688 3378 7496) (6790 7020 6818 5366 4368 7506 5514 4290 7214 7746 6070 4460 7440 5894 7084 6618 7190 5428 5918 5498 7556 7088 6770 6222) (6778 7050 5798 6612 6302 6818 6632 6282 6054 5830 5526 5408 4800 6384 7714 7474 6240 5878 7944 6326 6012 4314 6554 6234) (5966 5944 7134 6684 7164 6690 6742 6790 6270 7492 6884 6202 6992 5852 5382 4386 7728 7750 6772 7888 7524 6394 5414 4164) (5896 6614 5878 6612 5272 7030 5254 7214 7200 6670 5838 6216 5918 7468 7458 7166 5372 6648 6884 5340 5296 3390 3374 6980) (9754 9216 10328 9776 9964 7538 7536 9660 6918 6856 6388 8146 10070 9864 9366 9808 5966 5894 6900 6286 6202 5352 10010 9940) (9750 9226 10752 9968 5374 10342 9238 5356 9296 6186 5802 9962 3410 3348 10590 10106 9858 3430 3384) (7508 7120 6320 7144 6732 5976 5562 7734 5468 5370 10332 9866 3354 3332 9750 9296 9214 9614 9602 6918 6880 9972 9150) (6300 7466 6268 6756 6234 5314 6794 6238 5566 5372 7190 7182 3382 5832 4240 3428 3338 3336 7506 5594 5488 3754 7538 9756))) :lonset (quote (0 100 200 310 440 550 660 760 890 990 1120 1240 1340 1470 1570 1670 1800 1910 2030 2140 2280 2400 2540 2680)) :ldur (quote ((60 60 120 140 60 60 60 120 140 120 140 140 120 180 60 140 140 180 60 140 120 180 120 180) (100 120 120 0 120 0 100 0 80 100 120 100 0 120 120 100 0 120 100 120 80 80 0 100) (140 60 60 60 0 60 140 140 140 0 60 140 60 140 0 140 0 140 140 60 140 0 60 0) (120 100 120 100 80 20 20 20 100 0 100 20 20 120 120 20 120 80 20 80 80 100 80 80) (100 100 100 100 100 100 100 100 100 100 0 0 0 0 0 0 0 0 0 0) (0 80 80 100 120 0 180 0 0 40 180 0 180 180 40 80 40 80 180 0 120 0 100 100) (80 80 80 160 0 160 80 80 160 0 80 160 160 160 80 80 160 0 0 0 160 0 160 0) (140 140 140 140 140 140 140 120 120 120 120 120 120 120 120 120 120 120 0 120 0 120 120 0) (0 0 0 0 0 0 0 0 180 180 0 180 0 180 0 180 0 180 180 180 180 0 0 0) (140 0 0 0 140 0 140 0 140 0 140 140 140 140 140 140 140 140 140 140 140) (120 160 0 0 160 0 120 0 0 0 0 120 120 120 120 120 120 160 160 160 120 160 160 160) (140 80 160 140 160 80 80 80 140 140 140 140 0 80 0 0 0 0 140 160 140 160 160 0) (0 80 0 0 80 60 180 80 60 60 60 80 60 0 0 180 80 80 60 180 180 180 180 180) (120 120 20 20 180 100 120 120 100 120 120 120 100 120 20 120 120 180 180 20 120 120 20 120) (180 180 180 0 80 180 180 0 0 0 180 180 180 0 180 80 180 80 0 80 80 80) (100 120 0 160 160 20 140 140 20 140 20 100 140 0 0 0 100 0 100 100 0 0 160 160) (0 120 0 120 0 120 120 0 120 0 120 120 0 120 0 120 120 120 0 120 120 120 120 120) (160 160 160 160 160 160 40 20 20 160 0 40 0 0 0 40 160 40 80 160 80 80 20 20) (140 0 20 0 0 0 0 140 140 20 140 140 20 20 0 20 140 20 140 140 20 140 140 140) (160 160 160 20 20 20 20 20 160 140 140 140 140 20 140 140 140 160 0 0 160 160 160 0) (160 160 160 0 160 60 0 60 160 0 0 160 0 160 160 160 60 0 60) (160 160 160 160 160 160 160 160 160 40 20 40 40 20 40 20 40 0 20 20 0 40 40) (0 100 140 0 100 100 140 140 120 140 140 120 140 0 0 0 120 100 120 100 140 140 140 120))) :lvel (quote ((81 81 80 66 61 51 50 47 45 45 43 41 40 39 39 35 35 35 34 34 33 31 30 29) (84 70 37 36 30 29 28 26 25 24 21 19 19 18 17 17 17 15 13 12 10 10 9 9) (27 24 23 17 14 13 13 11 9 8 8 8 6 6 6 5 5 5 4 4 4 3 3 3) (108 83 62 61 51 51 40 37 36 35 31 29 29 24 23 22 22 21 19 17 17 16 15 15) (109 74 58 36 36 29 28 28 27 21 10 5 5 5 4 3 3 3 3 1) (18 17 15 14 14 14 13 12 11 10 8 8 7 7 7 7 6 6 6 6 5 5 5 5) (33 20 17 13 9 8 8 7 6 6 6 5 5 5 5 4 4 3 2 2 2 2 2 2) (79 67 65 54 48 40 37 6 6 6 6 6 6 6 5 4 4 4 4 4 3 2 1 1) (62 54 30 25 24 21 20 18 17 9 9 8 8 7 7 7 7 6 6 6 6 6 5 4) (47 46 43 35 35 26 25 24 23 23 22 22 21 20 15 14 10 9 9 7 5) (43 29 25 22 21 21 20 19 19 18 18 17 15 13 11 10 10 8 8 7 7 6 6 5) (103 86 84 63 59 51 49 41 36 32 31 17 10 10 10 9 8 8 8 7 7 6 6 6) (81 46 46 44 39 39 32 30 21 20 19 16 14 13 9 8 8 7 6 6 5 5 3 3) (127 122 113 60 54 45 42 40 38 37 34 33 29 28 27 25 24 24 21 20 20 18 17 17) (32 15 11 10 10 9 8 8 7 7 7 6 5 5 5 5 4 4 4 3 2 1) (74 68 67 65 56 53 47 38 37 36 36 32 28 26 24 24 22 22 21 21 20 20 18 18) (103 83 43 38 38 37 34 32 29 28 28 28 28 26 23 21 21 20 19 18 17 12 10 8) (112 73 61 58 52 40 20 18 18 12 11 11 10 10 10 10 9 8 8 7 7 7 7 7) (66 52 35 34 30 20 18 15 13 11 11 9 9 8 8 8 7 6 5 5 5 5 5 4) (71 54 52 48 47 47 44 42 42 41 34 33 31 31 29 23 20 14 8 8 7 7 6 6) (11 10 8 8 8 7 7 7 6 6 6 5 5 5 4 4 4 4 4) (59 43 32 31 23 19 17 11 10 7 6 6 6 6 5 5 5 4 4 4 4 2 2) (26 18 13 11 9 8 7 7 7 7 6 6 6 5 5 5 5 5 4 4 4 4 3 2))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 10 nil 1000 0 (om-make-point 1086 244) (om-make-point 12 382) 0 1 (quote t) nil 0)) t nil nil nil))) (quote ((11 0 1 0 nil 0) (0 0 1 1 nil 0) (11 0 7 0 ((om-make-point 469 394) (om-make-point 572 394) (om-make-point 614 371) (om-make-point 675 339) (om-make-point 675 344)) 2) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (7 0 8 0 nil 0) (1 0 9 0 nil 0) (11 0 10 1 nil 0) (14 0 11 0 nil 0) (16 0 14 0 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (39 1 16 0 nil 0) (20 0 17 0 nil 0) (16 0 18 1 ((om-make-point 396 341) (om-make-point 396 422) (om-make-point 420 490) (om-make-point 534 503)) 0) (10 0 18 2 nil 0) (9 0 18 3 nil 0) (8 0 18 4 nil 0) (25 0 20 0 nil 0) (19 0 20 1 nil 0) (24 0 23 0 nil 0) (22 0 23 1 nil 0) (21 0 23 2 nil 0) (17 0 24 0 nil 0) (30 0 25 0 nil 0) (17 0 26 1 nil 0) (39 2 27 0 nil 0) (31 0 28 0 nil 0) (29 0 28 1 nil 0) (39 3 29 0 nil 1) (27 0 30 0 nil 0) (28 0 30 1 ((om-make-point 54 428) (om-make-point 73 428) (om-make-point 90 339) (om-make-point 127 339) (om-make-point 128 341)) 0) (33 0 31 0 nil 0) (33 0 32 1 ((om-make-point 20 323) (om-make-point 20 385) (om-make-point 22 489) (om-make-point 63 508)) 0) (26 0 32 2 nil 0) (24 0 32 3 nil 0) (23 0 32 4 nil 0) (39 1 33 0 nil 0) (42 0 43 0 nil 0) (41 0 43 1 nil 0) (45 0 44 0 nil 0) (46 0 44 1 nil 0) (48 0 44 2 nil 0))) nil 6.0602))
