; OM File Header - Saved 2020/02/11 21:09:42
; (6.16 :patc (om-make-point 20 20) (om-make-point 16 25) (om-make-point 1264 666) "" 183 0 "2013/08/01 19:26:54" "2020/02/11 21:09:42")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "sintese aditiva a partir de listas de numeros" (quote ((let ((box (om-load-boxcomment "comment 8" (om-make-point 312 60) (quote "<= Visualizador chord-seq (OBS.: não contém os envelopes)") "" (om-make-point 238 428) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 415 311) (om-make-point 35 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 364 307) (om-make-point 28 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 339 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 304 278) (om-make-point 35 30) 250 "250" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 251 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11 3" (quote t) (quote nil) (om-make-point 1155 12) (om-make-point 21 23) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1059 116) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1090 13) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3 2" (quote t) (quote nil) (om-make-point 968 11) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1035 60) (om-make-point 163 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1091 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1041 163) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1093 137) (om-make-point 59 24) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 149 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 267 183) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 221 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 178 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 199 40) (quote "<= Resultado da síntese") "" (om-make-point 886 646) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 114 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 96 396) (om-make-point 136 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5732) (5738) (6590) (6598) (7036) (7654) (7934) (8480) (8636) (9028) (9166))) :lonset (quote (0 0 0 0 0 0 0 0 0 0 0 5000)) :ldur (quote ((5000) (4500) (3250) (2750) (1625) (1750) (1250) (1000) (750) (500) (375))) :lvel (quote ((58) (53) (58) (83) (110) (79) (73) (31) (31) (30) (31))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 1070 557) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 199 40) (quote "<= Onsets (em seg.)") "" (om-make-point 88 145) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 199 40) (quote "<= Envelope") "" (om-make-point 947 472) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 56 148) (om-make-point 31 43) (list 0) "(0)$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 658 270) (om-make-point 160 56) (list 224 225 368 369.7 476 680 800 1096 1200 1504 1628) "(224 225 368 369.7 476 680 800 1096 1200 1504 1628)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 565 193) (om-make-point 151 62) (list 229 192.5 229 412 610.5 381.5 335.5 30.5 30.5 23 30.5) "(229 192.5 229 412 610.5 381.5 335.5 30.5 30.5 23 30.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11 2" (quote t) (quote nil) (om-make-point 457 116) (om-make-point 151 44) (list 20 18 13 11 6.5 7 5 4 3 2 1.5) "(20 18 13 11 6.5 7 5 4 3 2 1.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 199 40) (quote "<= List of Frequencies") "" (om-make-point 820 275) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 173 35) (quote "<= List of Amplitudes") "" (om-make-point 714 192) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 249 39) (quote "<= List of Durations (em seg)") "" (om-make-point 611 114) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 25 648) (om-make-point 489 62) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 8 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 522 557) (om-make-point 96 28) "CHARLES.aiff" "\"CHARLES.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 107 60) (quote "add-1$") "" (om-make-point 421 561) nil (om-make-color 0 0 0) (om-make-font "Arial Black" 24 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 755 464) (om-make-point 190 68) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode picture)) (list (quote t) 0 0 (om-make-point 326 95) (om-make-point 936 435) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 23 541) (om-make-point 387 86) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 11))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 20 18 13 11 6.5 7 5 4 3 2 1.5))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 229 192.5 229 412 610.5 381.5 335.5 30.5 30.5 23 30.5))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 224 225 368 369.7 476 680 800 1096 1200 1504 1628))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0 0 0 0 0 0 0) (list 20 18 13 11 6.5 7 5 4 3 2 1.5) (list 229 192.5 229 412 610.5 381.5 335.5 30.5 30.5 23 30.5) (list 224 225 368 369.7 476 680 800 1096 1200 1504 1628) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.063 0.256 0.401 0.521 0.594 0.618 0.666 1.004 1.342 1.56 1.681 1.85 2.067 2.284 2.429 2.622 2.767 2.888 3.057 3.178 3.323 3.468 3.564 3.709 3.806 3.975 4.12 4.24 4.361 4.482 4.651 4.772 4.892 5.013 5.158 5.327 5.472 5.665 5.834 5.979 6.1 6.245 6.341 6.462 6.607 6.728 6.945 7.114 7.307 7.404 7.501 7.694 7.79 7.911 8.08 8.201 8.346 8.467 8.66 8.853 8.974 9.263 9.529 9.581 9.722 9.819 9.94 10.036 10.109 10.229 10.254 10.374 10.398 10.423 10.543 10.664 10.712 10.785 10.833 10.93 11.05 11.171 11.244 11.389 11.509 11.63 11.847 12.016 12.161 12.355 12.403 12.499 12.548 12.572 12.644 12.741 12.886 13.007 13.127 13.248 13.272 13.321 13.441 13.634 13.779 13.997 14.117 14.359 14.407 14.552 14.769 14.818 14.842 14.963 15.132 15.277 15.47 15.639 15.663 15.905 16.098 16.291 16.412 16.557 16.653 16.798 16.919 16.943 17.04 17.088 17.136 17.16 17.184 17.209 17.233 17.402 17.523 17.643 17.764 17.861 17.981 18.175 18.295 18.392 18.513 18.633 18.754 18.875 19.406 19.551 20.0)) (quote (2.473 2.473 3.048 3.336 6.215 4.775 6.79 6.503 7.654 8.805 22.622 10.245 10.82 11.396 11.684 12.26 12.835 13.123 13.411 13.987 14.562 15.138 16.002 16.577 17.441 18.88 19.744 19.744 19.744 19.744 19.744 20.032 20.32 20.895 21.471 22.047 22.622 23.486 24.062 24.637 25.213 26.077 26.365 26.94 27.228 27.516 28.38 29.819 30.395 30.395 30.395 30.395 30.395 30.395 30.395 30.682 30.682 30.395 30.107 30.107 30.107 30.107 30.682 14.069 30.97 47.09 31.834 42.197 32.122 39.318 33.273 33.849 38.167 33.849 34.712 37.591 35.288 37.591 35.864 38.454 36.439 39.894 36.727 37.015 37.015 37.015 37.303 37.879 39.894 45.075 40.182 46.227 40.757 48.242 46.514 41.333 41.909 42.484 43.06 43.636 46.514 44.212 45.075 46.227 47.378 48.817 49.681 50.832 52.559 53.135 54.287 52.847 54.574 55.15 55.438 55.15 55.438 57.741 55.438 56.589 57.453 58.604 58.892 59.468 59.468 60.619 61.771 66.664 63.786 61.483 64.074 58.029 64.361 52.559 64.649 65.225 65.225 65.225 65.513 66.089 66.952 68.679 70.406 71.558 72.134 72.421 72.709 72.709 29.531 28.38 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 398 135) (om-make-point 1007 456) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 83 33) (quote ": name") "" (om-make-point 668 549) nil (om-make-color 0 0 0) (om-make-font "Arial Black" 14 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 529 636) (om-make-point 351 95) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay palette-mode scale player)) (list (quote t) 1 0 (om-make-point 40 10) (om-make-point 1309 718) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil 0 nil (quote :midishare))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 670 67) (quote "La cloche de Risset (données adaptées à partir des <chromorials> de M. Stroppa)") "" (om-make-point 75 62) nil (om-make-color 0 0 0) (om-make-font "Arial Black" 18 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 878 83) (quote "Síntese aditiva, com visualizador chord-seq") "" (om-make-point 69 0) nil (om-make-color 0 0 0) (om-make-font "Arial Black" 36 :family "Arial Black" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((25 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (26 0 5 0 nil 0) (4 0 5 1 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (6 0 10 2 nil 0) (12 0 11 0 nil 0) (13 0 11 1 nil 0) (17 0 14 0 nil 0) (23 0 16 0 nil 2) (15 0 16 1 nil 0) (16 0 17 1 nil 0) (24 0 19 0 ((om-make-point 736 324) (om-make-point 600 325) (om-make-point 601 275) (om-make-point 136 275) (om-make-point 136 324)) 1) (19 0 20 1 nil 0) (14 0 20 2 nil 0) (5 0 20 3 nil 0) (3 0 20 4 nil 0) (35 0 30 0 nil 0) (32 0 30 1 ((om-make-point 568 583) (om-make-point 494 619) (om-make-point 379 643) (om-make-point 351 648)) 0) (26 0 31 0 ((om-make-point 531 158) (om-make-point 499 159) (om-make-point 27 127) (om-make-point 30 138)) 0) (31 0 35 1 ((om-make-point 28 179) (om-make-point 32 357) (om-make-point 35 521) (om-make-point 101 541)) 0) (23 0 35 4 ((om-make-point 70 189) (om-make-point 61 510) (om-make-point 217 528) (om-make-point 218 541)) 0) (26 0 35 5 ((om-make-point 531 158) (om-make-point 579 496) (om-make-point 257 494) (om-make-point 257 541)) 0) (25 0 35 6 ((om-make-point 639 253) (om-make-point 638 509) (om-make-point 295 508) (om-make-point 296 541)) 0) (24 0 35 7 ((om-make-point 736 324) (om-make-point 732 521) (om-make-point 336 520) (om-make-point 335 541)) 0) (34 0 35 8 nil 0) (30 0 37 0 ((om-make-point 267 707) (om-make-point 519 709) (om-make-point 518 629) (om-make-point 618 628) (om-make-point 617 636)) 2))) nil 6.16))
