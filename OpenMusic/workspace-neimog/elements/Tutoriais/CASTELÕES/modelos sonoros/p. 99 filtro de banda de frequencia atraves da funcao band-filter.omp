; OM File Header - Saved 2020/02/11 20:53:59
; (6.16 :patc (om-make-point 10 360) (om-make-point 51 43) (om-make-point 1164 653) "" 183 0 "2013/08/01 9:14:16" "2020/02/11 20:53:59")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "p. 99 filtro de banda de frequencia atraves da funcao band-filter" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 668 503) (om-make-point 35 28) (list 9) "(9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 74 247) (om-make-point 80 30) (list (list 220 440)) "((220 440))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 75) (quote "<= modo \"passa\" ou \"rejeita\" (as bandas de freq estipuladas)") "" (om-make-point 149 433) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 101 434) (om-make-point 47 30) (quote reject) "reject" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 70 403) (om-make-point 40 30) (quote pass) "pass" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= som original") "" (om-make-point 858 113) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 123 76) (quote "<= bandas de frequências a serem filtradas (em Hz)") "" (om-make-point 208 212) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1060 138) (om-make-point 59 24) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1008 164) (om-make-point 28 30) 78 "78" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1058 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1002 61) (om-make-point 163 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 935 12) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1057 14) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1026 117) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1122 13) (om-make-point 21 23) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 434 68) (quote "Filtro de banda de frequência (via função \"band-filter\")") "" (om-make-point 97 4) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "" "LEGATO" 0))) (om-make-point 7 533) (om-make-point 859 126) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5900 6725 6650 6425 5850 6700 5950 5800 6075) (6900 6875 5825 5725 5700 5925 5875 5750 6350 6275 6300 5775 6575) (6875 5875 6850 6500 6225 6900 6250 5825 6300 5750) (6800 6825 6300 5900 6500 5850 6275 6375) (6725 6425 6000 6850 6875 6225 6200) (6775 6875 6425 6850 6900 6475 5925 5875) (6900 6850 6425 6475 5925) (6800 6900 6875 6400 6250) (5925 5850 6200) (6025 6475 5950) (5850) (6000 5975 6675 6725 5950 6825 6700 6375) (6875 6850 5725 6225 6300 5700 6200 5900) (6650 6675 5950 5975 6875 6825 6775 6175) (6825 6900 6850 6375 5800 6600 6200 5925 6325 6275) (6800 6825 6075 5900 6625 5925 6775 6225) (6775 5800 6600 6300 6825 6625 6275 6050 5825 6375 6250 5875 6325 6000 6550 6225) (5975 5950 6675 6700 6750 6800 6275 6875 6200 5850 6775 6400) (5900 6625 5875 6600 6675 5850 6225 5925 6650 6875) (6850 6400 5975 5900 6900 6275 6200) (6175 5800) (6325 6725 5975 6875) (6300 6275 6750 6225 6800 6250 5825))) :lonset (quote (0 1100 2200 3410 4840 6050 7260 8360 9790 10890 12320 13640 14740 16170 17270 18370 19800 21010 22330 23540 25080 26400 27940 28040)) :ldur (quote ((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100) (100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100 100 100 100))) :lvel (quote ((121 121 121 119 118 117 117 116 116 116) (121 119 115 115 114 114 114 113 113 113 113 112 112) (114 113 113 112 112 112 112 111 111 111) (124 121 118 118 117 117 115 115) (125 120 118 115 115 114 114) (112 112 112 112 112 112 112 111) (114 113 112 112 111) (121 119 119 117 116) (118 117 114) (116 116 116) (116) (124 121 121 118 118 117 116 115) (121 116 116 116 115 115 114 114) (127 126 125 118 117 116 116 115) (114 112 111 111 111 111 111 111 111 111) (120 119 119 119 117 117 116 115) (124 121 116 115 115 115 114 114 114 114 114 114 114 113 113 113) (125 120 118 118 117 115 113 112 112 111 111 111) (119 117 115 114 114 113 112 112 112 111) (119 117 117 116 116 116 116) (111 111) (118 116 114 114) (113 112 112 111 111 111 111))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9) (9 9 9) (9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9) (9 9 9 9) (9 9 9 9 9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 25 125) (om-make-point 1255 375) 0 1000 nil 117/100 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 30 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "" "LEGATO" 0))) (om-make-point 54 81) (om-make-point 802 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850 5900 6725 6650 6425 5850 5350 5650 6950 6700 4275 5575 5950 5800 5325 6075 5425 4325 7575 6975 5500 4300 7275 5550) (6900 6875 7075 5825 5725 5475 5700 4300 5400 7200 4425 5925 5875 5750 6350 5550 4325 6275 6300 4450 7225 5775 7150 6575) (6875 5875 6850 5350 4325 6500 5375 6225 6900 6250 5825 5675 7575 7275 4375 7500 7225 6300 5300 3425 3400 7475 7250 5750) (6800 6825 5575 6300 7025 5900 7050 6500 5600 7525 4250 5850 5325 7075 4350 7550 6275 7250 5475 7225 3950 4225 6375 4900) (7250 7000 7025 6725 6425 7550 6000 5525 7700 5400 6850 6875 5325 4375 5375 7500 6225 4275 3425 6200) (7075 7700 7275 7250 7225 6775 6875 7100 6425 7000 6850 5625 7325 7200 6975 6900 7675 5400 5350 5300 7050 6475 5925 5875) (7275 6900 7000 6950 6850 7325 7025 7550 7700 7250 6425 7500 7300 5375 5350 3350 3300 3375 7900 6475 5925 5325 4450 3825) (8150 7600 7650 7925 7000 7200 8325 7625 7525 7500 7400 7375 6800 5375 8275 7300 6925 6900 6875 3300 3350 4900 6400 6250) (8150 7700 5925 7450 6925 7225 7575 7950 8350 9850 5850 8200 7650 9800 8175 8125 6200 10100 9650 9225 7675 6950 5350 7925) (9750 9675 9325 6975 6025 6475 7200 9250 10000 7225 8100 7625 7475 7950 8150 8425 5950 7700 7175 5375 7500) (9125 9275 9800 5075 10000 5450 4250 9975 8050 9300 7200 7225 8325 8350 8025 5850 4275 9650 6950 9325 8175 9225 7575 5375) (6000 5975 6675 6725 5950 7075 6825 7100 7025 7225 7050 5225 7525 7500 6700 6375 7275 7125 5025 8075 8050 7675 7425 7300) (6875 6850 5550 4975 5725 4725 4375 6225 4750 6300 5700 4450 7075 7725 7350 9125 5600 6200 7700 4500 6950 5350 7225 5900) (6650 6675 7000 5325 5950 5525 4550 5550 4600 5975 4500 6925 5450 4575 7525 6875 5400 5350 6825 7925 5500 6775 8025 6175) (6825 5350 8050 6900 6850 5325 6375 5800 6600 6200 5925 6325 7550 7225 3425 3400 7525 6275 4775 4700 3375 7500) (6800 7025 6825 5375 4375 7500 5525 4300 7225 7750 6075 4450 7450 5900 7075 6625 7200 5425 5925 5500 7550 7100 6775 6225) (6775 7050 5800 6600 6300 6825 6625 6275 6050 5825 5525 5400 4800 6375 7725 7475 6250 5875 7950 6325 6000 4325 6550 6225) (5975 5950 7125 6675 7175 6700 6750 6800 6275 7500 6875 6200 7000 5850 5375 4375 7725 7750 6775 7900 7525 6400 5425 4175) (5900 6625 5875 6600 5275 7025 5250 7225 7200 6675 5850 6225 5925 7475 7450 7175 5375 6650 6875 5350 5300 3400 3375 6975) (9750 9225 10325 9775 9975 7550 7525 9650 6925 6850 6400 8150 10075 9875 9375 9800 5975 5900 6900 6275 6200 5350 10000 9950) (9750 9225 10750 9975 5375 10350 9250 5350 9300 6175 5800 9950 3400 3350 10600 10100 9850 3425 3375) (7500 7125 6325 7150 6725 5975 5550 7725 5475 5375 10325 9875 3350 3325 9750 9300 9225 9625 9600 6925 6875 9975 9150) (6300 7475 6275 6750 6225 5325 6800 6250 5575 5375 7200 7175 3375 5825 4250 3425 3350 3325 7500 5600 5500 3750 7550 9750))) :lonset (quote (0 1100 2200 3410 4840 6050 7260 8360 9790 10890 12320 13640 14740 16170 17270 18370 19800 21010 22330 23540 25080 26400 27940 28040)) :ldur (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100))) :lvel (quote ((121 121 121 119 118 117 117 116 116 116 116 115 115 115 115 115 115 115 114 114 114 114 114 114) (121 119 115 115 114 114 114 113 113 113 113 112 112 112 112 112 112 112 112 111 111 111 111 111) (114 113 113 112 112 112 112 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110) (124 121 118 118 117 117 115 115 115 115 114 114 114 113 113 113 113 113 112 112 112 112 112 112) (125 120 118 115 115 114 114 114 114 113 111 111 111 111 110 110 110 110 110 110) (112 112 112 112 112 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111) (114 113 112 112 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110 110 110 110) (121 119 119 117 116 115 115 111 111 111 111 111 111 111 111 110 110 110 110 110 110 110 110 110) (118 117 114 113 113 113 113 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110) (116 116 116 115 115 113 113 113 113 113 113 113 113 113 112 112 111 111 111 111 111) (116 114 113 113 113 113 113 112 112 112 112 112 112 112 111 111 111 111 111 111 111 111 111 111) (124 121 121 118 118 117 116 115 115 114 114 112 111 111 111 111 111 111 111 111 111 111 111 111) (121 116 116 116 115 115 114 114 113 113 112 112 112 112 111 111 111 111 111 111 111 111 110 110) (127 126 125 118 117 116 116 115 115 115 114 114 114 114 114 113 113 113 113 113 113 112 112 112) (114 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110) (120 119 119 119 117 117 116 115 115 115 115 114 114 113 113 113 113 113 113 113 113 113 112 112) (124 121 116 115 115 115 114 114 114 114 114 114 114 113 113 113 113 113 112 112 112 111 111 111) (125 120 118 118 117 115 113 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111) (119 117 115 114 114 113 112 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110) (119 117 117 116 116 116 116 116 116 115 114 114 114 114 114 113 113 112 111 111 111 111 111 111) (111 111 111 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110) (118 116 114 114 113 112 112 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110) (113 112 112 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 110 110 110 110 110 110))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 25 125) (om-make-point 1255 375) 0 1000 nil 117/100 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 8)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 74 214) (om-make-point 133 30) (list (list 55 220) (list 660 880)) "((55 220) (660 880))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BAND-FILTER" (quote band-filter) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "a list of (low high) pairs" "BOUNDS" (list (list 0 2) (list 5 10))) (om-load-inputfunmenu1 (quote input-funmenu) "pass or reject" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 41 463) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 9 0 nil 0) (7 0 9 1 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0) (14 0 10 2 nil 0) (20 0 16 1 nil 0) (18 2 16 2 nil 0) (18 3 16 3 nil 0) (18 4 16 4 nil 0) (0 0 16 6 nil 0) (1 0 17 0 nil 0) (18 1 20 0 ((om-make-point 230 198) (om-make-point 15 206) (om-make-point 17 473) (om-make-point 56 463)) 0) (17 0 20 1 nil 0) (3 0 20 2 nil 0))) nil 6.16))
