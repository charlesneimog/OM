; OM File Header - Saved 2013/11/04 14:59:20
; (6.0602 :patc (om-make-point 118 210) (om-make-point 50 50) (om-make-point 1216 676) "" 183 0 "2013/11/04 14:46:53" "2013/11/04 14:51:07")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fazedor de series em ate 1 oitavo de tom 2c - incluindo p, r, i e ri para as alturas" (quote ((om-load-boxcall (quote abstraction) "Repetidor de serie de alturas (com oitavador) em P, R, I e RI" (om-load-patch-abs1 "Repetidor de serie de alturas (com oitavador) em P, R, I e RI" (quote ((om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 559 174) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Inverte melodias 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 541 88) nil nil nil (list (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= Inverte as alturas da melodia") "" (om-make-point 489 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 464 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 533 241) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= Inverte os Intervalos") "" (om-make-point 259 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= Obtém os Intervalos") "" (om-make-point 86 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 222 272) (om-make-point 32 30) -1 "-1" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 179 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 551 435) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 45 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 157) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 57) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 594 508) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 494 508) nil nil nil 0)) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (11 0 2 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 1 12 0 nil 0) (7 0 13 0 nil 0))) 1 "inverte melodias" nil) (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 587 217) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= I") nil (om-make-point 421 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= R") nil (om-make-point 274 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= P") nil (om-make-point 84 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= RI") nil (om-make-point 641 89) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 356 227) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Inverte melodias" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 337 158) nil nil nil (list (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= Inverte as alturas da melodia") "" (om-make-point 489 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 464 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 533 241) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= Inverte os Intervalos") "" (om-make-point 259 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= Obtém os Intervalos") "" (om-make-point 86 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 222 272) (om-make-point 32 30) -1 "-1" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 179 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 551 435) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 45 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 157) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 57) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 594 508) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 494 508) nil nil nil 0)) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (11 0 2 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 1 12 0 nil 0) (7 0 13 0 nil 0))) 1 "inverte melodias" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 227 347) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 207 376) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 426 398) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 264 387) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 134 299) (om-make-point 170 43) nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 216 148) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 257 87) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 840 274) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 942 381) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "numero_de_repeticoes" 1 (om-make-point 192 9) "" "numero_de_repeticoes" nil nil) (om-load-boxin "serie" 0 (om-make-point 48 44) "" "serie" nil nil) (om-load-boxwithed1 (quote box-with-win) "oitavador" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 932 274) nil nil nil (list (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 469 140) (om-make-point 48 30) 3600 "3600" nil) (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 439 191) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 480 219) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 343 197) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 373 146) (om-make-point 48 30) 2400 "2400" nil) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 384 225) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 267 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 228 360) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 290 218) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 279 139) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 249 190) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 179 287) (om-make-point 338 43) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 207 520) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 95) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 282 606) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 182 606) nil nil nil 0)) (quote ((13 0 1 0 nil 0) (0 0 1 1 nil 1) (13 0 2 0 nil 0) (0 0 2 1 nil 1) (13 0 3 0 nil 0) (4 0 3 1 nil 1) (13 0 5 0 nil 0) (4 0 5 1 nil 1) (7 0 6 0 nil 0) (11 0 7 0 nil 0) (13 0 8 0 nil 0) (9 0 8 1 nil 1) (13 0 10 0 nil 0) (9 0 10 1 nil 1) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (8 0 11 2 nil 0) (3 0 11 3 nil 0) (5 0 11 4 nil 0) (1 0 11 5 nil 0) (2 0 11 6 nil 0) (6 0 12 0 nil 0) (14 0 13 0 nil 0) (12 1 15 0 nil 0) (12 0 16 0 nil 0))) 1 "oitavador" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 23 168) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (19 0 1 0 nil 0) (0 0 2 0 nil 0) (18 0 2 1 nil 0) (8 0 7 0 nil 0) (18 0 7 1 nil 0) (19 0 8 0 nil 0) (13 0 10 0 nil 0) (9 0 10 1 nil 0) (12 0 11 0 nil 0) (18 0 11 1 ((om-make-point 260 66) (om-make-point 517 65) (om-make-point 523 377) (om-make-point 454 398)) 2) (10 0 12 0 nil 0) (21 0 13 0 nil 0) (14 0 13 1 nil 0) (7 0 13 2 nil 0) (2 0 13 3 nil 0) (15 0 14 0 nil 0) (18 0 14 1 nil 0) (19 0 15 0 nil 0) (11 0 16 0 nil 0) (20 0 17 0 nil 0) (16 0 20 0 nil 0) (19 0 21 0 nil 0) (18 0 21 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 1034 518)) (quote ((om-load-inputfun (quote input-funbox) "" "serie" nil) (om-load-inputfun (quote input-funbox) "" "numero_de_repeticoes" nil))) (om-make-point 33 288) nil (list (list 5175 8950 3300 5275 9025 5450 9525 2700 4200 8200 7350 5475 6500 6825 4175 9125 10375 4000 7375 8850 9800 9575 7950 3825 9675 3550 6350 6925 6975 9600 4625 9875 10400 7525 3625 10450 8150 8450 9725 8500 3475 9850 9275 6525 9450 4300 10025 9500 10700 6575 7500 5950 8875 7325 7950 9525 5700 4475 5750 9650 8550 4575 6675 8600 11525 3575 11800 6025 7275 4250 8250 4525 7975 7450 7025 9200 5350 5625 6600 6225 3875 6425 9775 10100 6325 6850 4800 4000 11500 9475 7550 8775 10125 3700 8850 6625 10225 6450 8500 7725 9975 5150 4675 9100 10000 10800 6850 7525 10100 3775 8825 7475 5025 10200 4425 10150 5600 3425 8650 7975 10525 4650 6650 9675 10825 7000 9575 11525 9800 6675 6975 10950 8450 6950 10475 11700 5925 5550 7325 10075 5950 5100 5375 9500 9500 10175 3900 5950 4075 9725 11550 10725 4500 6875 5750 3650 10950 6975 11475 6200 6725 3575 9400 9625 3675 5450 5850 5725 10375 3850 8225 4400 7750 4425 6600 6225 3875 8825 9775 5300 5125 8050 8400 11200 7900 8275 9950 8775 11325 6100 11250 4225 7575 8950 6900 7675 4225 4250 10725 6300 9000 4600 8550 10275 10100 8025 7775 4325 3175 2800 8575 5250 5000 3575 5550 5025 8475 3550 7550 3325 8175 9600 9425 3875 6800 3925 4825 3250 8150 4850 7325 3700 10675 5050 10475 5325 3450 6700 8825 9500 9500 6425 6700 9450 6525 6875 5050 8275 7300 7325 3650 4550 10450 9625 8725 9200 7475 10625 7200 6975 8125 7550 9550 4875 2625 3150 5975 6200 10050 3775 4000 6775 6725 7775 3225 5300 9075 2550 8200 10200 3900 9525 6650 10225 7675 9300 4150 5175 7100 10175 9900 8350 6475 6125 5550 10725 6900 5675 5750 4850 9750 11775 6675 3800 10325 7175 8200 7225 4875 7850 9450 6925 11575 8650 8225 6800 7750 11625 6600 9825 8675 6425 7375 5300 6325 6850 6000 5200 6700 5875 7550 7575 4125 3700 5250 6625)) nil "Repetidor de serie de alturas (com oitavador) em P, R, I e RI") (om-load-boxcomment "comment" (om-make-point 274 131) (quote "=> Esta versão inclui formas P, R, I e RI para as alturas") "" (om-make-point 702 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Repetidor de serie de dyns (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de dyns (com multiplicador)" (quote ((om-load-boxin "dyn_max" 4 (om-make-point 788 192) "" "dyn_max" nil nil) (om-load-boxin "dyn_min" 3 (om-make-point 707 166) "" "dyn_min" nil nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 621 315) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 197 346) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil) (om-load-boxout "output" 0 (om-make-point 65 372) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_dyns" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_dyns" 0 (om-make-point 5 45) "" "serie_de_dyns" nil nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (quote ((4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (2 0 3 0 nil 0) (9 0 4 0 nil 0) (6 0 4 1 nil 0) (3 0 5 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_dyns" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 668 385) nil (list (list 72 41 71 45 53 55 46 75 86 85 47 64 68 74 73 62 51 70 78 61 76 39 43 57 69 78 49 41 80 67 38 48 64 60 39 66 63 84 52 80 82 83 50 57 44 55 87 59 72 41 71 45 53 55 46 75 86 85 47 64 68 74 73 62 51 70 78 61 76 39 43 57 69 78 49 41 80 67 38 48 64 60 39 66 63 84 52 80 82 83 50 57 44 55 87 59 33 26 33 27 29 29 27 34 37 36 27 31 32 34 34 31 28 33 35 31 34 25 26 30 33 35 28 26 35 32 25 28 31 30 25 32 31 36 28 35 36 36 28 30 27 29 37 30 62 37 61 40 47 48 41 64 73 72 42 56 58 64 63 54 45 60 67 53 65 36 38 50 59 66 44 37 68 58 34 43 55 52 35 57 54 71 46 68 69 71 44 49 39 48 74 51 72 41 71 45 53 55 46 75 86 85 47 64 68 74 73 62 51 70 78 61 76 39 43 57 69 78 49 41 80 67 38 48 64 60 39 66 63 84 52 80 82 83 50 57 44 55 87 59 62 37 61 40 47 48 41 64 73 72 42 56 58 64 63 54 45 60 67 53 65 36 38 50 59 66 44 37 68 58 34 43 55 52 35 57 54 71 46 68 69 71 44 49 39 48 74 51 83 45 81 49 60 62 51 86 98 98 52 73 77 85 83 70 57 79 90 68 87 43 47 64 79 89 55 46 91 76 41 53 72 68 42 75 71 96 58 92 94 95 56 64 49 61 100 66)) nil "Repetidor de serie de dyns (com multiplicador)") (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1090 361) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "Repetidor de serie de durs (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de durs (com multiplicador)" (quote ((om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 276 296) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil) (om-load-boxout "output" 0 (om-make-point 167 352) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_durs" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_durs" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_durs" 0 (om-make-point 5 45) "" "serie_de_durs" nil nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 2 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 370 380) nil (list (list 470 185 500 96 137 176 284 245 146 381 225 353 116 489 234 441 312 392 333 156 411 303 323 362 431 57 254 264 165 372 461 48 204 422 38 273 342 68 401 107 450 126 87 215 293 480 77 195 313 123 333 64 91 117 189 163 97 254 150 235 77 326 156 294 208 261 222 104 274 202 215 241 287 38 169 176 110 248 307 32 136 281 25 182 228 45 267 71 300 84 58 143 195 320 51 130 313 123 333 64 91 117 189 163 97 254 150 235 77 326 156 294 208 261 222 104 274 202 215 241 287 38 169 176 110 248 307 32 136 281 25 182 228 45 267 71 300 84 58 143 195 320 51 130 313 123 333 64 91 117 189 163 97 254 150 235 77 326 156 294 208 261 222 104 274 202 215 241 287 38 169 176 110 248 307 32 136 281 25 182 228 45 267 71 300 84 58 143 195 320 51 130 235 92 250 48 68 88 142 122 73 191 113 176 58 245 117 221 156 196 167 78 206 152 161 181 215 29 127 132 83 186 230 24 102 211 19 137 171 34 200 53 225 63 44 107 146 240 38 98 313 123 333 64 91 117 189 163 97 254 150 235 77 326 156 294 208 261 222 104 274 202 215 241 287 38 169 176 110 248 307 32 136 281 25 182 228 45 267 71 300 84 58 143 195 320 51 130 313 123 333 64 91 117 189 163 97 254 150 235 77 326 156 294 208 261 222 104 274 202 215 241 287 38 169 176 110 248 307 32 136 281 25 182 228 45 267 71 300 84 58 143 195 320 51 130)) nil "Repetidor de serie de durs (com multiplicador)") (om-load-boxcall (quote abstraction) "Repetidor de serie de onsets (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de onsets (com multiplicador)" (quote ((om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 256 265) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 164 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_os_onsets" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_os_onsets" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_onsets" 0 (om-make-point 5 45) "" "serie_de_onsets" nil nil) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de onsets (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 338 214) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de onsets (com multiplicador)" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 108 297) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 116 145) nil nil nil nil 1))) (quote ((5 0 0 0 nil 0) (7 0 1 0 nil 0) (6 0 5 0 nil 0) (2 0 5 1 nil 0) (8 0 6 0 nil 0) (3 0 6 1 nil 0) (0 0 7 1 nil 0) (4 0 8 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 164 358) nil (list (list 0 574 768 1068 1694 2346 2396 2722 2824 3084 3252 3892 4426 4568 5090 5638 5792 6156 6612 6924 7432 7876 8438 8816 9036 9650 10250 10838 11072 11476 11906 12376 12858 13524 13862 13926 14278 14486 14758 14848 15344 15630 16046 16174 16250 16366 16548 16938 17198 17485 17582 17732 18045 18371 18396 18559 18610 18740 18824 19144 19411 19482 19743 20017 20094 20276 20504 20660 20914 21136 21417 21606 21716 22023 22323 22617 22734 22936 23151 23386 23627 23960 24129 24161 24337 24441 24577 24622 24870 25013 25221 25285 25323 25381 25472 25667 25797 26084 26181 26331 26644 26970 26995 27158 27209 27339 27423 27743 28010 28081 28342 28616 28693 28875 29103 29259 29513 29735 30016 30205 30315 30622 30922 31216 31333 31535 31750 31985 32226 32559 32728 32760 32936 33040 33176 33221 33469 33612 33820 33884 33922 33980 34071 34266 34396 34611 34684 34797 35032 35277 35296 35418 35456 35554 35617 35857 36057 36110 36306 36512 36570 36707 36878 36995 37186 37353 37564 37706 37789 38019 38244 38465 38553 38705 38866 39042 39223 39473 39600 39624 39756 39834 39936 39970 40156 40263 40419 40467 40496 40540 40608 40754 40852 40996 41045 41120 41277 41440 41453 41535 41561 41626 41668 41828 41962 41998 42129 42266 42305 42396 42510 42588 42715 42826 42967 43062 43117 43271 43421 43568 43627 43728 43836 43954 44075 44242 44327 44343 44431 44483 44551 44574 44698 44770 44874 44906 44925 44954 45000 45098 45163 45737 45931 46231 46857 47509 47559 47885 47987 48247 48415 49055 49589 49731 50253 50801 50955 51319 51775 52087 52595 53039 53601 53979 54199 54813 55413 56001 56235 56639 57069 57539 58021 58687 59025 59089 59441 59649 59921 60011 60507 60793 61209 61337 61413 61529 61711 62101 62361 62792 62938 63163 63633 64122 64160 64405 64482 64677 64803 65283 65684 65791 66183 66594 66710 66983 67325 67559 67940 68273 68695 68979 69144 69605 70055 70496 70672 70975 71298 71651 72013 72513 72767 72815 73079 73235 73439 73507 73879 74094 74406 74502 74559 74646 74783 75076 75271)) nil "Repetidor de serie de onsets (com multiplicador)") (om-load-boxcomment "comment" (om-make-point 245 61) (quote "<= Lista com possíveis coeficientes para os onsets, durs e dyns das ocorrências da série") "" (om-make-point 983 251) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 809 253) (om-make-point 172 30) (list 0.3 0.5 0.75 1 1.25 1.5 2) "(0.3 0.5 0.75 1 1.25 1.5 2)" nil) (om-load-boxcomment "comment 3" (om-make-point 203 59) (quote "<= no. de repetições da série") "" (om-make-point 701 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 671 198) (om-make-point 27 30) 7 "7" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 20 472) (om-make-point 1164 184) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5175) (8950) (3300) (5275) (9025) (5450) (9525) (2700) (4200) (8200) (7350) (5475) (6500) (6825) (4175) (9125) (10375) (4000) (7375) (8850) (9800) (9575) (7950) (3825) (9675) (3550) (6350) (6925) (6975) (9600) (4625) (9875) (10400) (7525) (3625) (10450) (8150) (8450) (9725) (8500) (3475) (9850) (9275) (6525) (9450) (4300) (10025) (9500) (10700) (6575) (7500) (5950) (8875) (7325) (7950) (9525) (5700) (4475) (5750) (9650) (8550) (4575) (6675) (8600) (11525) (3575) (11800) (6025) (7275) (4250) (8250) (4525) (7975) (7450) (7025) (9200) (5350) (5625) (6600) (6225) (3875) (6425) (9775) (10100) (6325) (6850) (4800) (4000) (11500) (9475) (7550) (8775) (10125) (3700) (8850) (6625) (10225) (6450) (8500) (7725) (9975) (5150) (4675) (9100) (10000) (10800) (6850) (7525) (10100) (3775) (8825) (7475) (5025) (10200) (4425) (10150) (5600) (3425) (8650) (7975) (10525) (4650) (6650) (9675) (10825) (7000) (9575) (11525) (9800) (6675) (6975) (10950) (8450) (6950) (10475) (11700) (5925) (5550) (7325) (10075) (5950) (5100) (5375) (9500) (9500) (10175) (3900) (5950) (4075) (9725) (11550) (10725) (4500) (6875) (5750) (3650) (10950) (6975) (11475) (6200) (6725) (3575) (9400) (9625) (3675) (5450) (5850) (5725) (10375) (3850) (8225) (4400) (7750) (4425) (6600) (6225) (3875) (8825) (9775) (5300) (5125) (8050) (8400) (11200) (7900) (8275) (9950) (8775) (11325) (6100) (11250) (4225) (7575) (8950) (6900) (7675) (4225) (4250) (10725) (6300) (9000) (4600) (8550) (10275) (10100) (8025) (7775) (4325) (3175) (2800) (8575) (5250) (5000) (3575) (5550) (5025) (8475) (3550) (7550) (3325) (8175) (9600) (9425) (3875) (6800) (3925) (4825) (3250) (8150) (4850) (7325) (3700) (10675) (5050) (10475) (5325) (3450) (6700) (8825) (9500) (9500) (6425) (6700) (9450) (6525) (6875) (5050) (8275) (7300) (7325) (3650) (4550) (10450) (9625) (8725) (9200) (7475) (10625) (7200) (6975) (8125) (7550) (9550) (4875) (2625) (3150) (5975) (6200) (10050) (3775) (4000) (6775) (6725) (7775) (3225) (5300) (9075) (2550) (8200) (10200) (3900) (9525) (6650) (10225) (7675) (9300) (4150) (5175) (7100) (10175) (9900) (8350) (6475) (6125) (5550) (10725) (6900) (5675) (5750) (4850) (9750) (11775) (6675) (3800) (10325) (7175) (8200) (7225) (4875) (7850) (9450) (6925) (11575) (8650) (8225) (6800) (7750) (11625) (6600) (9825) (8675) (6425) (7375) (5300) (6325) (6850) (6000) (5200) (6700) (5875) (7550) (7575) (4125) (3700) (5250) (6625))) :lonset (quoteldur (quote ((470) (185) (500) (96) (137) (176) (284) (245) (146) (381) (225) (353) (116) (489) (234) (441) (312) (392) (333) (156) (411) (303) (323) (362) (431) (57) (254) (264) (165) (372) (461) (48) (204) (422) (38) (273) (342) (68) (401) (107) (450) (126) (87) (215) (293) (480) (77) (195) (313) (123) (333) (64) (91) (117) (189) (163) (97) (254) (150) (235) (77) (326) (156) (294) (208) (261) (222) (104) (274) (202) (215) (241) (287) (38) (169) (176) (110) (248) (307) (32) (136) (281) (25) (182) (228) (45) (267) (71) (300) (84) (58) (143) (195) (320) (51) (130) (313) (123) (333) (64) (91) (117) (189) (163) (97) (254) (150) (235) (77) (326) (156) (294) (208) (261) (222) (104) (274) (202) (215) (241) (287) (38) (169) (176) (110) (248) (307) (32) (136) (281) (25) (182) (228) (45) (267) (71) (300) (84) (58) (143) (195) (320) (51) (130) (313) (123) (333) (64) (91) (117) (189) (163) (97) (254) (150) (235) (77) (326) (156) (294) (208) (261) (222) (104) (274) (202) (215) (241) (287) (38) (169) (176) (110) (248) (307) (32) (136) (281) (25) (182) (228) (45) (267) (71) (300) (84) (58) (143) (195) (320) (51) (130) (235) (92) (250) (48) (68) (88) (142) (122) (73) (191) (113) (176) (58) (245) (117) (221) (156) (196) (167) (78) (206) (152) (161) (181) (215) (29) (127) (132) (83) (186) (230) (24) (102) (211) (19) (137) (171) (34) (200) (53) (225) (63) (44) (107) (146) (240) (38) (98) (313) (123) (333) (64) (91) (117) (189) (163) (97) (254) (150) (235) (77) (326) (156) (294) (208) (261) (222) (104) (274) (202) (215) (241) (287) (38) (169) (176) (110) (248) (307) (32) (136) (281) (25) (182) (228) (45) (267) (71) (300) (84) (58) (143) (195) (320) (51) (130) (313) (123) (333) (64) (91) (117) (189) (163) (97) (254) (150) (235) (77) (326) (156) (294) (208) (261) (222) (104) (274) (202) (215) (241) (287) (38) (169) (176) (110) (248) (307) (32) (136) (281) (25) (182) (228) (45) (267) (71) (300) (84) (58) (143) (195) (320) (51) (130))) :lvel (quote ((72) (41) (71) (45) (53) (55) (46) (75) (86) (85) (47) (64) (68) (74) (73) (62) (51) (70) (78) (61) (76) (39) (43) (57) (69) (78) (49) (41) (80) (67) (38) (48) (64) (60) (39) (66) (63) (84) (52) (80) (82) (83) (50) (57) (44) (55) (87) (59) (72) (41) (71) (45) (53) (55) (46) (75) (86) (85) (47) (64) (68) (74) (73) (62) (51) (70) (78) (61) (76) (39) (43) (57) (69) (78) (49) (41) (80) (67) (38) (48) (64) (60) (39) (66) (63) (84) (52) (80) (82) (83) (50) (57) (44) (55) (87) (59) (33) (26) (33) (27) (29) (29) (27) (34) (37) (36) (27) (31) (32) (34) (34) (31) (28) (33) (35) (31) (34) (25) (26) (30) (33) (35) (28) (26) (35) (32) (25) (28) (31) (30) (25) (32) (31) (36) (28) (35) (36) (36) (28) (30) (27) (29) (37) (30) (62) (37) (61) (40) (47) (48) (41) (64) (73) (72) (42) (56) (58) (64) (63) (54) (45) (60) (67) (53) (65) (36) (38) (50) (59) (66) (44) (37) (68) (58) (34) (43) (55) (52) (35) (57) (54) (71) (46) (68) (69) (71) (44) (49) (39) (48) (74) (51) (72) (41) (71) (45) (53) (55) (46) (75) (86) (85) (47) (64) (68) (74) (73) (62) (51) (70) (78) (61) (76) (39) (43) (57) (69) (78) (49) (41) (80) (67) (38) (48) (64) (60) (39) (66) (63) (84) (52) (80) (82) (83) (50) (57) (44) (55) (87) (59) (62) (37) (61) (40) (47) (48) (41) (64) (73) (72) (42) (56) (58) (64) (63) (54) (45) (60) (67) (53) (65) (36) (38) (50) (59) (66) (44) (37) (68) (58) (34) (43) (55) (52) (35) (57) (54) (71) (46) (68) (69) (71) (44) (49) (39) (48) (74) (51) (83) (45) (81) (49) (60) (62) (51) (86) (98) (98) (52) (73) (77) (85) (83) (70) (57) (79) (90) (68) (87) (43) (47) (64) (79) (89) (55) (46) (91) (76) (41) (53) (72) (68) (42) (75) (71) (96) (58) (92) (94) (95) (56) (64) (49) (61) (100) (66))) :loffset (quotelchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 36 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 127/100 nil 250 0 (om-make-point 1024 324) (om-make-point 0 223) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 539 31) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 572 30) (om-make-point 41 30) 100 "100" nil) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= dyns mín. e máx.") "" (om-make-point 611 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= onsets e durs mín. e máx.") "" (om-make-point 325 2) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Series ALEA - de 1/2 a 1/8 de tom " (om-load-patch-abs1 "Series ALEA - de 1/2 a 1/8 de tom " (quote ((om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 717 446) nil nil nil nil 1) (om-load-boxin "input 4" 3 (om-make-point 794 244) "" nil nil nil) (om-load-boxin "input 3" 2 (om-make-point 744 244) "" nil nil nil) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 746 375) nil nil nil nil 1) (om-load-boxout "output 4" 3 (om-make-point 778 512) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 590 513) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 286 522) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 434 514) nil nil "&" nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 393 458) (om-make-point 113 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 485 411) nil nil nil nil 1) (om-load-boxin "onsetdurmax." 1 (om-make-point 571 219) "" "onsetdurmax." nil nil) (om-load-boxin "onsetdurmin." 0 (om-make-point 481 220) "" "onsetdurmin." nil nil) (om-load-boxout "output 3" 2 (om-make-point 680 533) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 2" 1 (om-make-point 122 532) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 47 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 333 231) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 242 327) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 274 280) (om-make-point 42 30) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 409 292) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 658 24) (om-make-point 28 30) 50 "50" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 332 169) nil nil nil (list (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 456 316) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 405 300) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 225 92) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 213 35) "" nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 402 163) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 133 127) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 383 410) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 126 319) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (4 1 1 0 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 ((om-make-point 229 92) (om-make-point 203 99) (om-make-point 157 110) (om-make-point 157 127)) 0) (0 0 6 0 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0))) 1 "omloop 4" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 521 330) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 454 335) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 186 466) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "fazedor de series em até 1/8 de tom" (om-load-patch-abs1 "fazedor de series em até 1/8 de tom" (quote ((om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 515 257) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 490 292) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 429 174) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 400 190) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 73 460) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 150 375) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 41 362) (om-make-point 27 30) nil "nil" nil) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 71 397) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 495 223) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 462 237) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 310 338) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote genfun) "ARITHM-SER 3" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 437 347) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM= 3" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 367 343) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 368 386) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 83 335) (om-make-point 67 43) nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 390 129) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 357 143) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 209 294) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote genfun) "ARITHM-SER 2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 327 272) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM= 2" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 257 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 258 311) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 31 197) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 162 193) (om-make-point 28 30) 11 "11" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 134 193) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 141 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 91 198) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 68 245) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 62 34) "" nil nil nil))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (16 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 4 0 nil 0) (14 0 5 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (22 0 9 0 nil 0) (8 0 9 1 nil 0) (23 0 11 0 nil 0) (1 0 11 1 nil 0) (10 0 12 0 nil 0) (27 0 12 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (26 0 14 0 nil 0) (20 0 14 1 nil 0) (13 0 14 2 nil 0) (22 0 16 0 nil 0) (15 0 16 1 nil 0) (23 0 18 0 nil 0) (3 0 18 1 nil 0) (17 0 19 0 nil 0) (27 0 19 1 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 0) (21 0 25 0 nil 0) (27 0 25 1 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 232 100) nil (list (list 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)) nil "fazedor de series em até 1/8 de tom") (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 589 20) (om-make-point 64 30) (list 2 1 0.5) "(2 1 0.5)" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 647 129) nil nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 581 56) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 455 66) nil nil "&" nil 1))) (quote ((3 0 0 0 nil 0) (16 0 3 0 nil 2) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (22 0 8 0 nil 0) (9 0 8 1 nil 0) (22 0 9 0 nil 0) (5 0 12 0 nil 0) (23 0 13 0 nil 0) (16 0 14 0 nil 0) (20 0 15 0 nil 0) (17 0 16 0 nil 0) (18 0 16 1 nil 0) (15 0 18 0 nil 0) (28 0 18 1 nil 0) (24 0 20 0 nil 0) (16 0 21 0 nil 2) (11 0 21 1 nil 0) (10 0 21 2 nil 0) (21 0 22 0 nil 0) (6 0 23 1 nil 0) (28 0 24 0 nil 0) (27 0 26 0 nil 0) (19 0 26 1 nil 0) (25 0 27 0 nil 0) (26 0 28 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 158 85) nil nil "&" "Series ALEA - de 1/2 a 1/8 de tom ") (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 286 3) (om-make-point 35 30) 333 "333" nil) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 253 4) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1082 147) (om-make-point 59 30) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1047 149) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1071 182) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1028 59) (om-make-point 126 67) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 952 7) (om-make-point 118 32) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1074 9) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1026 119) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1139 8) (om-make-point 23 28) 0 "0" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 2 171) (om-make-point 652 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6425) (6700) (7050) (6525) (6875) (6250) (7075) (6100) (6125) (6050) (6950) (6850) (6025) (6325) (6800) (6275) (7025) (6000) (6975) (6925) (6350) (7150) (6075) (6225) (6750) (7175) (6200) (6450) (6175) (6400) (6775) (6725) (6575) (6825) (6500) (6675) (6150) (7000) (6600) (6300) (7125) (6650) (6625) (6475) (6900) (6550) (6375))) :lonset (quote (0 287 384 534 847 1173 1198 1361 1412 1542 1626 1946 2213 2284 2545 2819 2896 3078 3306 3462 3716 3938 4219 4408 4518 4825 5125 5419 5536 5738 5953 6188 6429 6762 6931 6963 7139 7243 7379 7424 7672 7815 8023 8087 8125 8183 8274 8469 8599)) :ldur (quote ((313) (123) (333) (64) (91) (117) (189) (163) (97) (254) (150) (235) (77) (326) (156) (294) (208) (261) (222) (104) (274) (202) (215) (241) (287) (38) (169) (176) (110) (248) (307) (32) (136) (281) (25) (182) (228) (45) (267) (71) (300) (84) (58) (143) (195) (320) (51) (130))) :lvel (quote ((78) (30) (76) (36) (49) (52) (38) (82) (98) (97) (39) (66) (71) (81) (79) (62) (46) (74) (87) (60) (84) (28) (33) (55) (73) (86) (43) (31) (89) (70) (25) (41) (65) (59) (27) (68) (63) (95) (47) (90) (92) (94) (44) (54) (35) (51) (100) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 36 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 127/100 nil 250 0 (om-make-point 1024 324) (om-make-point 0 223) 0 1 (quote t) nil 0)) t nil nil nil))) (quote ((26 1 0 0 nil 0) (9 0 0 1 nil 0) (26 4 2 0 nil 0) (9 0 2 1 nil 0) (7 0 2 2 nil 0) (11 0 2 3 nil 0) (12 0 2 4 nil 0) (26 3 4 0 nil 0) (9 0 4 1 nil 0) (7 0 4 2 nil 0) (26 2 5 0 nil 0) (9 0 5 1 nil 0) (7 0 5 2 nil 0) (0 0 10 1 nil 0) (5 0 10 2 nil 0) (4 0 10 3 nil 0) (2 0 10 4 nil 0) (17 0 15 0 nil 0) (16 0 15 1 nil 0) (11 0 15 2 nil 0) (12 0 15 3 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (22 0 21 0 nil 0) (23 0 21 1 nil 0) (25 0 21 2 nil 0) (15 0 26 1 nil 0) (15 1 26 2 nil 0) (15 2 26 3 nil 0) (15 3 26 4 nil 0))) nil 6.0602))
