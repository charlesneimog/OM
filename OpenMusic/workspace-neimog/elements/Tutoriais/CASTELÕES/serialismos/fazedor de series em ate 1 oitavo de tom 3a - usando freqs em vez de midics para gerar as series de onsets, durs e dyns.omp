; OM File Header - Saved 2020/02/11 21:30:51
; (6.16 :patc (om-make-point 118 210) (om-make-point 48 45) (om-make-point 1216 656) "" 183 0 "2013/11/04 13:38:52" "2020/02/11 21:30:50")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fazedor de series em ate 1 oitavo de tom 3a - usando freqs em vez de midics para gerar as series de onsets, durs e dyns" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 288 110) (quote "=> Esta versão usa as freqs (em vez de midics) para gerar as séries de onsets, durs e dyns") "" (om-make-point 667 65) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Repetidor de serie de dyns (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de dyns (com multiplicador)" (quote ((let ((box (om-load-boxin "dyn_max" 4 (om-make-point 788 192) "" "dyn_max" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dyn_min" 3 (om-make-point 707 166) "" "dyn_min" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 621 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 197 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 65 372) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_dyns" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "serie_de_dyns" 0 (om-make-point 5 45) "" "serie_de_dyns" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (2 0 3 0 nil 0) (9 0 4 0 nil 0) (6 0 4 1 nil 0) (3 0 5 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_dyns" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 668 385) nil (list (list 37 32 37 26 43 31 41 28 34 39 26 35 42 39 38 41 33 25 28 44 30 40 36 38 27 42 29 29 33 30 45 34 32 44 31 27 29 30 35 40 27 26 25 35 27 32 45 36 56 46 56 33 68 44 63 38 50 61 35 51 67 60 59 65 48 32 38 69 41 62 55 57 36 66 39 40 48 43 73 49 45 71 43 35 41 42 53 62 37 33 32 52 36 47 72 54 75 60 75 40 93 57 86 48 66 82 43 67 91 80 79 88 63 39 48 95 53 84 73 77 44 89 49 51 62 55 100 65 58 97 56 44 52 54 70 84 46 41 39 69 45 61 98 71 56 46 56 33 68 44 63 38 50 61 35 51 67 60 59 65 48 32 38 69 41 62 55 57 36 66 39 40 48 43 73 49 45 71 43 35 41 42 53 62 37 33 32 52 36 47 72 54 75 60 75 40 93 57 86 48 66 82 43 67 91 80 79 88 63 39 48 95 53 84 73 77 44 89 49 51 62 55 100 65 58 97 56 44 52 54 70 84 46 41 39 69 45 61 98 71 75 60 75 40 93 57 86 48 66 82 43 67 91 80 79 88 63 39 48 95 53 84 73 77 44 89 49 51 62 55 100 65 58 97 56 44 52 54 70 84 46 41 39 69 45 61 98 71 75 60 75 40 93 57 86 48 66 82 43 67 91 80 79 88 63 39 48 95 53 84 73 77 44 89 49 51 62 55 100 65 58 97 56 44 52 54 70 84 46 41 39 69 45 61 98 71)) nil "Repetidor de serie de dyns (com multiplicador)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1090 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Repetidor de serie de durs (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de durs (com multiplicador)" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 276 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 167 352) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_durs" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_durs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "serie_de_durs" 0 (om-make-point 5 45) "" "serie_de_durs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 2 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 371 372) nil (list (list 298 333 96 211 306 234 54 44 49 169 125 119 219 265 324 144 156 39 59 183 150 131 102 190 113 281 241 137 204 90 226 273 69 85 315 74 107 197 25 80 257 34 163 176 289 249 30 64 149 167 48 106 153 117 27 22 25 85 63 60 110 133 162 72 78 20 30 92 75 66 51 95 57 141 121 69 102 45 113 137 35 43 158 37 54 99 13 40 129 17 82 88 145 125 15 32 447 500 144 317 459 351 81 66 74 254 188 179 329 398 486 216 234 59 89 275 225 197 153 285 170 422 362 206 306 135 339 410 104 128 473 111 161 296 38 120 386 51 245 264 434 374 45 96 298 333 96 211 306 234 54 44 49 169 125 119 219 265 324 144 156 39 59 183 150 131 102 190 113 281 241 137 204 90 226 273 69 85 315 74 107 197 25 80 257 34 163 176 289 249 30 64 596 666 192 422 612 468 108 88 98 338 250 238 438 530 648 288 312 78 118 366 300 262 204 380 226 562 482 274 408 180 452 546 138 170 630 148 214 394 50 160 514 68 326 352 578 498 60 128 447 500 144 317 459 351 81 66 74 254 188 179 329 398 486 216 234 59 89 275 225 197 153 285 170 422 362 206 306 135 339 410 104 128 473 111 161 296 38 120 386 51 245 264 434 374 45 96 298 333 96 211 306 234 54 44 49 169 125 119 219 265 324 144 156 39 59 183 150 131 102 190 113 281 241 137 204 90 226 273 69 85 315 74 107 197 25 80 257 34 163 176 289 249 30 64)) nil "Repetidor de serie de durs (com multiplicador)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Repetidor de serie de onsets (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de onsets (com multiplicador)" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 256 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 164 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Lista_de_possiveis_coeficientes_para_os_onsets" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_os_onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "serie_de_onsets" 0 (om-make-point 5 45) "" "serie_de_onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de onsets (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 338 214) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de onsets (com multiplicador)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 108 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 116 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (7 0 1 0 nil 0) (6 0 5 0 nil 0) (2 0 5 1 nil 0) (8 0 6 0 nil 0) (3 0 6 1 nil 0) (0 0 7 1 nil 0) (4 0 8 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 165 350) nil (list (list 0 68 536 728 888 1176 1628 1678 1756 2194 2602 2750 3362 3600 3952 4060 4482 4964 5612 5938 6026 6252 6456 6636 6974 7248 7498 8076 8214 8428 9094 9724 10104 10274 10586 10886 11014 11276 11670 12266 12812 13310 13676 13774 14304 14422 14936 14996 15124 15175 15526 15670 15790 16006 16345 16383 16442 16771 17077 17188 17647 17826 18090 18171 18488 18850 19336 19581 19647 19817 19970 20105 20359 20565 20753 21187 21291 21452 21952 22425 22710 22838 23072 23297 23393 23590 23886 24333 24743 25117 25392 25466 25864 25953 26339 26384 26480 26565 27150 27390 27590 27950 28515 28578 28676 29224 29734 29919 30684 30982 31422 31557 32085 32688 33498 33906 34016 34299 34554 34779 35202 35545 35858 36581 36754 37022 37855 38643 39118 39331 39721 40096 40256 40584 41077 41822 42505 43128 43586 43709 44372 44520 45163 45238 45398 45449 45800 45944 46064 46280 46619 46657 46716 47045 47351 47462 47921 48100 48364 48445 48762 49124 49610 49855 49921 50091 50244 50379 50633 50839 51027 51461 51565 51726 52226 52699 52984 53112 53346 53571 53667 53864 54160 54607 55017 55391 55666 55740 56138 56227 56613 56658 56754 56839 57424 57664 57864 58224 58789 58852 58950 59498 60008 60193 60958 61256 61696 61831 62359 62962 63772 64180 64290 64573 64828 65053 65476 65819 66132 66855 67028 67296 68129 68917 69392 69605 69995 70370 70530 70858 71351 72096 72779 73402 73860 73983 74646 74794 75437 75512 75672 75740 76208 76400 76560 76848 77300 77350 77428 77866 78274 78422 79034 79272 79624 79732 80154 80636 81284 81610 81698 81924 82128 82308 82646 82920 83170 83748 83886 84100 84766 85396 85776 85946 86258 86558 86686 86948 87342 87938 88484 88982 89348 89446 89976 90094 90608 90668 90796 90830 91064 91160 91240 91384 91610 91635 91674 91893 92097 92171 92477 92596 92772 92826 93037 93278 93602 93765 93809 93922 94024 94114 94283 94420 94545 94834 94903 95010 95343 95658 95848 95933 96089 96239 96303 96434 96631 96929 97202 97451 97634 97683 97948 98007 98264 98294 98358)) nil "Repetidor de serie de onsets (com multiplicador)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 245 61) (quote "<= Lista com possíveis coeficientes para os onsets, durs e dyns das ocorrências da série") "" (om-make-point 945 251) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 834 255) (om-make-point 114 30) (list 0.5 1 1.5 2 2.5) "(0.5 1 1.5 2 2.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 203 59) (quote "<= no. de repetições da série") "" (om-make-point 701 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 671 198) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Repetidor de serie de alturas (com oitavador)" (om-load-patch-abs1 "Repetidor de serie de alturas (com oitavador)" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 266 298) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "numero_de_repeticoes" 1 (om-make-point 143 47) "" "numero_de_repeticoes" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "serie" 0 (om-make-point 48 44) "" "serie" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "oitavador" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 257 160) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 469 140) (om-make-point 48 30) 3600 "3600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 439 191) (om-make-point 16 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 480 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 343 197) (om-make-point 16 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 373 146) (om-make-point 48 30) 2400 "2400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 384 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 267 442) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 228 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 290 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 279 139) (om-make-point 48 30) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 249 190) (om-make-point 16 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 179 287) (om-make-point 338 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 207 520) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 282 606) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 182 606) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((13 0 1 0 nil 0) (0 0 1 1 nil 1) (13 0 2 0 nil 0) (0 0 2 1 nil 1) (13 0 3 0 nil 0) (4 0 3 1 nil 1) (13 0 5 0 nil 0) (4 0 5 1 nil 1) (7 0 6 0 nil 0) (11 0 7 0 nil 0) (13 0 8 0 nil 0) (9 0 8 1 nil 1) (13 0 10 0 nil 0) (9 0 10 1 nil 1) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (8 0 11 2 nil 0) (3 0 11 3 nil 0) (5 0 11 4 nil 0) (1 0 11 5 nil 0) (2 0 11 6 nil 0) (6 0 12 0 nil 0) (14 0 13 0 nil 0) (12 1 15 0 nil 0) (12 0 16 0 nil 0))) 1 "oitavador" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 168 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 82 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (1 0 5 1 nil 0))) 6.16 nil "" (om-make-point 23 216) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie" nil) (om-load-inputfun (quote input-funbox) "" "numero_de_repeticoes" nil))) (om-make-point 8 293) nil (list (list 4750 8125 4950 9375 2600 3600 10175 9900 9625 2825 9400 8225 9850 5350 5325 2525 10725 4700 3025 9050 5175 6400 9775 8850 6325 4075 4900 7700 7075 3250 8100 6875 4550 9225 6725 8375 6050 6600 9075 5075 6075 3150 5025 7550 3200 9450 7975 3100 4750 10525 4950 8175 2600 2400 2975 8700 8425 4025 10600 5825 5050 7750 4125 7325 7125 10700 5425 5450 5175 5200 8575 4050 9925 4075 7300 5300 5875 10450 6900 8075 9350 4425 9125 5975 3650 4200 3075 9875 4875 10350 2625 8750 6800 9450 9175 10300 4750 9325 8550 6975 9800 8400 10175 8700 6025 8825 5800 7025 7450 5350 8925 9725 7125 8300 3025 4250 8775 5200 6175 7650 6325 6475 2500 5300 3475 8050 6900 6875 5750 6825 10325 5975 2450 5400 5475 5075 7275 4350 3825 8750 9200 5850 7975 5500 7150 10525 9750 9375 2600 9600 5375 7500 8425 7625 4600 8225 7450 8950 7725 2525 3525 4700 6625 3050 2775 5200 8575 4050 5125 8875 4900 10100 4675 3250 10500 10475 4550 4425 5525 9575 8450 5400 4275 6275 6075 6750 2625 5150 10400 8250 3175 9100 8350 6925 4950 3375 6200 6000 6575 2700 7225 6425 7000 3425 7450 8950 10125 3725 4725 5900 7825 6650 5175 10000 7375 5250 2725 2875 8500 7700 9475 4450 10500 10475 3350 8025 5525 8375 7250 4200 7875 9875 7275 5550 3825 5150 10400 3450 3175 4300 9550 4525 6150 9375 2600 9600 7775 6300 8425 6425 3400 9425 5050 8950 6525 4925 4725 7100 6625 9050 9975 5200 4975 4050 3925 6475 4900 10100 10675 8050 10500 3275 4550 4425 7925 10775 7250 4200 9075 7475 7275 10350 9825 2750 6800 10650 7975 10300 4750 3325 9750 8175 5000 4800 7775 7500 3625 7625 7000 8225 9850 6550 7725 2525 5925 10700 6625 9050 9975 4000 2575 5250 2725 4075 2500 10100 8275 9250 3300 4475 4550 9225 3125 4775 2450 5400 9075 3875 4875 6750 3825 6350 10400 8250 10375 3100)) nil "Repetidor de serie de alturas (com oitavador)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 20 472) (om-make-point 1164 184) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4750) (8125) (4950) (9375) (2600) (3600) (10175) (9900) (9625) (2825) (9400) (8225) (9850) (5350) (5325) (2525) (10725) (4700) (3025) (9050) (5175) (6400) (9775) (8850) (6325) (4075) (4900) (7700) (7075) (3250) (8100) (6875) (4550) (9225) (6725) (8375) (6050) (6600) (9075) (5075) (6075) (3150) (5025) (7550) (3200) (9450) (7975) (3100) (4750) (10525) (4950) (8175) (2600) (2400) (2975) (8700) (8425) (4025) (10600) (5825) (5050) (7750) (4125) (7325) (7125) (10700) (5425) (5450) (5175) (5200) (8575) (4050) (9925) (4075) (7300) (5300) (5875) (10450) (6900) (8075) (9350) (4425) (9125) (5975) (3650) (4200) (3075) (9875) (4875) (10350) (2625) (8750) (6800) (9450) (9175) (10300) (4750) (9325) (8550) (6975) (9800) (8400) (10175) (8700) (6025) (8825) (5800) (7025) (7450) (5350) (8925) (9725) (7125) (8300) (3025) (4250) (8775) (5200) (6175) (7650) (6325) (6475) (2500) (5300) (3475) (8050) (6900) (6875) (5750) (6825) (10325) (5975) (2450) (5400) (5475) (5075) (7275) (4350) (3825) (8750) (9200) (5850) (7975) (5500) (7150) (10525) (9750) (9375) (2600) (9600) (5375) (7500) (8425) (7625) (4600) (8225) (7450) (8950) (7725) (2525) (3525) (4700) (6625) (3050) (2775) (5200) (8575) (4050) (5125) (8875) (4900) (10100) (4675) (3250) (10500) (10475) (4550) (4425) (5525) (9575) (8450) (5400) (4275) (6275) (6075) (6750) (2625) (5150) (10400) (8250) (3175) (9100) (8350) (6925) (4950) (3375) (6200) (6000) (6575) (2700) (7225) (6425) (7000) (3425) (7450) (8950) (10125) (3725) (4725) (5900) (7825) (6650) (5175) (10000) (7375) (5250) (2725) (2875) (8500) (7700) (9475) (4450) (10500) (10475) (3350) (8025) (5525) (8375) (7250) (4200) (7875) (9875) (7275) (5550) (3825) (5150) (10400) (3450) (3175) (4300) (9550) (4525) (6150) (9375) (2600) (9600) (7775) (6300) (8425) (6425) (3400) (9425) (5050) (8950) (6525) (4925) (4725) (7100) (6625) (9050) (9975) (5200) (4975) (4050) (3925) (6475) (4900) (10100) (10675) (8050) (10500) (3275) (4550) (4425) (7925) (10775) (7250) (4200) (9075) (7475) (7275) (10350) (9825) (2750) (6800) (10650) (7975) (10300) (4750) (3325) (9750) (8175) (5000) (4800) (7775) (7500) (3625) (7625) (7000) (8225) (9850) (6550) (7725) (2525) (5925) (10700) (6625) (9050) (9975) (4000) (2575) (5250) (2725) (4075) (2500) (10100) (8275) (9250) (3300) (4475) (4550) (9225) (3125) (4775) (2450) (5400) (9075) (3875) (4875) (6750) (3825) (6350) (10400) (8250) (10375) (3100))) :lonset (quote (0 68 536 728 888 1176 1628 1678 1756 2194 2602 2750 3362 3600 3952 4060 4482 4964 5612 5938 6026 6252 6456 6636 6974 7248 7498 8076 8214 8428 9094 9724 10104 10274 10586 10886 11014 11276 11670 12266 12812 13310 13676 13774 14304 14422 14936 14996 15124 15175 15526 15670 15790 16006 16345 16383 16442 16771 17077 17188 17647 17826 18090 18171 18488 18850 19336 19581 19647 19817 19970 20105 20359 20565 20753 21187 21291 21452 21952 22425 22710 22838 23072 23297 23393 23590 23886 24333 24743 25117 25392 25466 25864 25953 26339 26384 26480 26565 27150 27390 27590 27950 28515 28578 28676 29224 29734 29919 30684 30982 31422 31557 32085 32688 33498 33906 34016 34299 34554 34779 35202 35545 35858 36581 36754 37022 37855 38643 39118 39331 39721 40096 40256 40584 41077 41822 42505 43128 43586 43709 44372 44520 45163 45238 45398 45449 45800 45944 46064 46280 46619 46657 46716 47045 47351 47462 47921 48100 48364 48445 48762 49124 49610 49855 49921 50091 50244 50379 50633 50839 51027 51461 51565 51726 52226 52699 52984 53112 53346 53571 53667 53864 54160 54607 55017 55391 55666 55740 56138 56227 56613 56658 56754 56839 57424 57664 57864 58224 58789 58852 58950 59498 60008 60193 60958 61256 61696 61831 62359 62962 63772 64180 64290 64573 64828 65053 65476 65819 66132 66855 67028 67296 68129 68917 69392 69605 69995 70370 70530 70858 71351 72096 72779 73402 73860 73983 74646 74794 75437 75512 75672 75740 76208 76400 76560 76848 77300 77350 77428 77866 78274 78422 79034 79272 79624 79732 80154 80636 81284 81610 81698 81924 82128 82308 82646 82920 83170 83748 83886 84100 84766 85396 85776 85946 86258 86558 86686 86948 87342 87938 88484 88982 89348 89446 89976 90094 90608 90668 90796 90830 91064 91160 91240 91384 91610 91635 91674 91893 92097 92171 92477 92596 92772 92826 93037 93278 93602 93765 93809 93922 94024 94114 94283 94420 94545 94834 94903 95010 95343 95658 95848 95933 96089 96239 96303 96434 96631 96929 97202 97451 97634 97683 97948 98007 98264 98294 98358)) :ldur (quote ((298) (333) (96) (211) (306) (234) (54) (44) (49) (169) (125) (119) (219) (265) (324) (144) (156) (39) (59) (183) (150) (131) (102) (190) (113) (281) (241) (137) (204) (90) (226) (273) (69) (85) (315) (74) (107) (197) (25) (80) (257) (34) (163) (176) (289) (249) (30) (64) (149) (167) (48) (106) (153) (117) (27) (22) (25) (85) (63) (60) (110) (133) (162) (72) (78) (20) (30) (92) (75) (66) (51) (95) (57) (141) (121) (69) (102) (45) (113) (137) (35) (43) (158) (37) (54) (99) (13) (40) (129) (17) (82) (88) (145) (125) (15) (32) (447) (500) (144) (317) (459) (351) (81) (66) (74) (254) (188) (179) (329) (398) (486) (216) (234) (59) (89) (275) (225) (197) (153) (285) (170) (422) (362) (206) (306) (135) (339) (410) (104) (128) (473) (111) (161) (296) (38) (120) (386) (51) (245) (264) (434) (374) (45) (96) (298) (333) (96) (211) (306) (234) (54) (44) (49) (169) (125) (119) (219) (265) (324) (144) (156) (39) (59) (183) (150) (131) (102) (190) (113) (281) (241) (137) (204) (90) (226) (273) (69) (85) (315) (74) (107) (197) (25) (80) (257) (34) (163) (176) (289) (249) (30) (64) (596) (666) (192) (422) (612) (468) (108) (88) (98) (338) (250) (238) (438) (530) (648) (288) (312) (78) (118) (366) (300) (262) (204) (380) (226) (562) (482) (274) (408) (180) (452) (546) (138) (170) (630) (148) (214) (394) (50) (160) (514) (68) (326) (352) (578) (498) (60) (128) (447) (500) (144) (317) (459) (351) (81) (66) (74) (254) (188) (179) (329) (398) (486) (216) (234) (59) (89) (275) (225) (197) (153) (285) (170) (422) (362) (206) (306) (135) (339) (410) (104) (128) (473) (111) (161) (296) (38) (120) (386) (51) (245) (264) (434) (374) (45) (96) (298) (333) (96) (211) (306) (234) (54) (44) (49) (169) (125) (119) (219) (265) (324) (144) (156) (39) (59) (183) (150) (131) (102) (190) (113) (281) (241) (137) (204) (90) (226) (273) (69) (85) (315) (74) (107) (197) (25) (80) (257) (34) (163) (176) (289) (249) (30) (64))) :lvel (quote ((37) (32) (37) (26) (43) (31) (41) (28) (34) (39) (26) (35) (42) (39) (38) (41) (33) (25) (28) (44) (30) (40) (36) (38) (27) (42) (29) (29) (33) (30) (45) (34) (32) (44) (31) (27) (29) (30) (35) (40) (27) (26) (25) (35) (27) (32) (45) (36) (56) (46) (56) (33) (68) (44) (63) (38) (50) (61) (35) (51) (67) (60) (59) (65) (48) (32) (38) (69) (41) (62) (55) (57) (36) (66) (39) (40) (48) (43) (73) (49) (45) (71) (43) (35) (41) (42) (53) (62) (37) (33) (32) (52) (36) (47) (72) (54) (75) (60) (75) (40) (93) (57) (86) (48) (66) (82) (43) (67) (91) (80) (79) (88) (63) (39) (48) (95) (53) (84) (73) (77) (44) (89) (49) (51) (62) (55) (100) (65) (58) (97) (56) (44) (52) (54) (70) (84) (46) (41) (39) (69) (45) (61) (98) (71) (56) (46) (56) (33) (68) (44) (63) (38) (50) (61) (35) (51) (67) (60) (59) (65) (48) (32) (38) (69) (41) (62) (55) (57) (36) (66) (39) (40) (48) (43) (73) (49) (45) (71) (43) (35) (41) (42) (53) (62) (37) (33) (32) (52) (36) (47) (72) (54) (75) (60) (75) (40) (93) (57) (86) (48) (66) (82) (43) (67) (91) (80) (79) (88) (63) (39) (48) (95) (53) (84) (73) (77) (44) (89) (49) (51) (62) (55) (100) (65) (58) (97) (56) (44) (52) (54) (70) (84) (46) (41) (39) (69) (45) (61) (98) (71) (75) (60) (75) (40) (93) (57) (86) (48) (66) (82) (43) (67) (91) (80) (79) (88) (63) (39) (48) (95) (53) (84) (73) (77) (44) (89) (49) (51) (62) (55) (100) (65) (58) (97) (56) (44) (52) (54) (70) (84) (46) (41) (39) (69) (45) (61) (98) (71) (75) (60) (75) (40) (93) (57) (86) (48) (66) (82) (43) (67) (91) (80) (79) (88) (63) (39) (48) (95) (53) (84) (73) (77) (44) (89) (49) (51) (62) (55) (100) (65) (58) (97) (56) (44) (52) (54) (70) (84) (46) (41) (39) (69) (45) (61) (98) (71))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 36 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 127/100 nil 250 0 (om-make-point 1024 324) (om-make-point 0 223) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 539 31) (om-make-point 28 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 572 30) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= dyns mín. e máx.") "" (om-make-point 611 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= onsets e durs mín. e máx.") "" (om-make-point 325 2) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Series ALEA - de 1/2 a 1/8 de tom - com mc->f para onsets, durs e dyns" (om-load-patch-abs1 "Series ALEA - de 1/2 a 1/8 de tom - com mc->f para onsets, durs e dyns" (quote ((let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 357 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 717 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 794 244) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 744 244) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 746 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 778 512) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "dyns" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 590 541) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 286 548) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 434 535) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 393 479) (om-make-point 113 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 485 432) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "onsetdurmax." 1 (om-make-point 571 219) "" "onsetdurmax." nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "onsetdurmin." 0 (om-make-point 481 220) "" "onsetdurmin." nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 680 561) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "durs" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 122 558) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "onsets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 47 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midics" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 333 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 242 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 198 278) (om-make-point 42 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 408 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 658 24) (om-make-point 28 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 332 156) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 456 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 405 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 225 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 213 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 402 163) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 133 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 383 410) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 126 319) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (4 1 1 0 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 ((om-make-point 229 92) (om-make-point 203 99) (om-make-point 157 110) (om-make-point 157 127)) 0) (0 0 6 0 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0))) 1 "omloop 4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 521 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 405 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 186 492) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fazedor de series em até 1/8 de tom" (om-load-patch-abs1 "fazedor de series em até 1/8 de tom" (quote ((let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 515 257) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 490 292) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 429 174) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 400 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 73 460) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 150 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 41 362) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 71 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 495 223) (om-make-point 21 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 462 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 310 338) (om-make-point 28 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER 3" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 437 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM= 3" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 367 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 368 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 83 335) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 390 129) (om-make-point 21 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 357 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 209 294) (om-make-point 28 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER 2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 327 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM= 2" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 257 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 258 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 31 197) (om-make-point 35 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 162 193) (om-make-point 28 30) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 134 193) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 141 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 91 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 68 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 62 34) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (16 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 4 0 nil 0) (14 0 5 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (22 0 9 0 nil 0) (8 0 9 1 nil 0) (23 0 11 0 nil 0) (1 0 11 1 nil 0) (10 0 12 0 nil 0) (27 0 12 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (26 0 14 0 nil 0) (20 0 14 1 nil 0) (13 0 14 2 nil 0) (22 0 16 0 nil 0) (15 0 16 1 nil 0) (23 0 18 0 nil 0) (3 0 18 1 nil 0) (17 0 19 0 nil 0) (27 0 19 1 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 0) (21 0 25 0 nil 0) (27 0 25 1 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 232 87) nil (list (list 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)) nil "fazedor de series em até 1/8 de tom"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 589 20) (om-make-point 64 30) (list 2 1 0.5) "(2 1 0.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 647 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 581 56) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 455 66) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 0 0 nil 0) (4 0 1 0 nil 0) (0 0 4 0 nil 2) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (1 0 5 0 nil 0) (8 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (23 0 9 0 nil 0) (10 0 9 1 nil 0) (23 0 10 0 nil 0) (6 0 13 0 nil 0) (24 0 14 0 nil 0) (17 0 15 0 nil 0) (21 0 16 0 nil 0) (18 0 17 0 nil 0) (19 0 17 1 nil 0) (16 0 19 0 nil 0) (29 0 19 1 nil 0) (25 0 21 0 nil 0) (0 0 22 0 nil 2) (12 0 22 1 nil 0) (11 0 22 2 nil 0) (22 0 23 0 nil 0) (7 0 24 1 nil 0) (29 0 25 0 nil 0) (28 0 27 0 nil 0) (20 0 27 1 nil 0) (26 0 28 0 nil 0) (27 0 29 0 nil 0))) 6.16 nil "" (om-make-point 189 22) (om-make-point 1091 658)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 67 80) nil nil "&" "Series ALEA - de 1/2 a 1/8 de tom - com mc->f para onsets, durs e dyns"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 286 3) (om-make-point 35 30) 333 "333" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 253 4) (om-make-point 28 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1082 147) (om-make-point 59 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1047 149) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1071 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1028 59) (om-make-point 126 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 952 7) (om-make-point 118 32) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1074 9) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1026 119) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1139 8) (om-make-point 23 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 2 171) (om-make-point 652 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7150) (6925) (6150) (6975) (6200) (6000) (6575) (6300) (6025) (6425) (7000) (7025) (6250) (6550) (6525) (6125) (7125) (7100) (6625) (6650) (6375) (6400) (6175) (6450) (6325) (6475) (6100) (6500) (7075) (6850) (6900) (6875) (6950) (6825) (6725) (7175) (6050) (6600) (6675) (6275) (6075) (6750) (6225) (6350) (6800) (7050) (6775) (6700))) :lonset (quote (0 34 268 364 444 588 814 839 878 1097 1301 1375 1681 1800 1976 2030 2241 2482 2806 2969 3013 3126 3228 3318 3487 3624 3749 4038 4107 4214 4547 4862 5052 5137 5293 5443 5507 5638 5835 6133 6406 6655 6838 6887 7152 7211 7468 7498 7562)) :ldur (quote ((298) (333) (96) (211) (306) (234) (54) (44) (49) (169) (125) (119) (219) (265) (324) (144) (156) (39) (59) (183) (150) (131) (102) (190) (113) (281) (241) (137) (204) (90) (226) (273) (69) (85) (315) (74) (107) (197) (25) (80) (257) (34) (163) (176) (289) (249) (30) (64))) :lvel (quote ((69) (51) (70) (27) (91) (48) (83) (37) (59) (78) (30) (60) (89) (76) (74) (85) (55) (25) (36) (94) (42) (80) (67) (72) (32) (87) (38) (40) (54) (45) (100) (57) (49) (96) (46) (31) (41) (44) (63) (81) (34) (28) (26) (62) (33) (52) (98) (65))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 36 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 127/100 nil 250 0 (om-make-point 1024 324) (om-make-point 0 223) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((26 4 1 0 nil 0) (8 0 1 1 nil 0) (6 0 1 2 nil 0) (11 0 1 3 nil 0) (12 0 1 4 nil 0) (26 3 3 0 nil 0) (8 0 3 1 nil 0) (6 0 3 2 nil 0) (26 2 4 0 nil 0) (8 0 4 1 nil 0) (6 0 4 2 nil 0) (26 1 9 0 nil 0) (8 0 9 1 nil 0) (9 0 10 1 nil 0) (4 0 10 2 nil 0) (3 0 10 3 nil 0) (1 0 10 4 nil 0) (17 0 15 0 nil 0) (16 0 15 1 nil 0) (11 0 15 2 nil 0) (12 0 15 3 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (22 0 21 0 nil 0) (23 0 21 1 nil 0) (25 0 21 2 nil 0) (15 0 26 1 nil 0) (15 1 26 2 nil 0) (15 2 26 3 nil 0) (15 3 26 4 nil 0))) nil 6.16))
