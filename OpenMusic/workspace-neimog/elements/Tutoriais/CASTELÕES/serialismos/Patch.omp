; OM File Header - Saved 2013/11/04 14:59:20
; (6.0602 :patc (om-make-point 766 10) (om-make-point 191 22) (om-make-point 1073 552) "" 183 0 "2013/11/04 14:24:02" "2013/11/04 14:46:41")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((om-load-boxcall (quote abstraction) "Repetidor de serie de alturas (com oitavador) em P, R, I e RI" (om-load-patch-abs1 "Repetidor de serie de alturas (com oitavador) em P, R, I e RI" (quote ((om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 559 174) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Inverte melodias 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 541 88) nil nil nil (list (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= Inverte as alturas da melodia") "" (om-make-point 489 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 464 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 533 241) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= Inverte os Intervalos") "" (om-make-point 259 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= Obtém os Intervalos") "" (om-make-point 86 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 222 272) (om-make-point 32 30) -1 "-1" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 179 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 551 435) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 45 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 157) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 57) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 594 508) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 494 508) nil nil nil 0)) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (11 0 2 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 1 12 0 nil 0) (7 0 13 0 nil 0))) 1 "inverte melodias" nil) (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 587 217) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= I") nil (om-make-point 421 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= R") nil (om-make-point 274 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= P") nil (om-make-point 84 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= RI") nil (om-make-point 641 89) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 356 227) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Inverte melodias" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 337 158) nil nil nil (list (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= Inverte as alturas da melodia") "" (om-make-point 489 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 464 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 533 241) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= Inverte os Intervalos") "" (om-make-point 259 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= Obtém os Intervalos") "" (om-make-point 86 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 222 272) (om-make-point 32 30) -1 "-1" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 179 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 551 435) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 45 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 157) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 57) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 594 508) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 494 508) nil nil nil 0)) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (11 0 2 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 1 12 0 nil 0) (7 0 13 0 nil 0))) 1 "inverte melodias" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 227 347) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 207 376) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 426 398) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 264 387) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 134 299) (om-make-point 170 43) nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 216 148) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 257 87) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 840 274) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 942 381) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "numero_de_repeticoes" 1 (om-make-point 192 9) "" "numero_de_repeticoes" nil nil) (om-load-boxin "serie" 0 (om-make-point 48 44) "" "serie" nil nil) (om-load-boxwithed1 (quote box-with-win) "oitavador" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 932 274) nil nil nil (list (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 469 140) (om-make-point 48 30) 3600 "3600" nil) (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 439 191) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 480 219) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 343 197) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 373 146) (om-make-point 48 30) 2400 "2400" nil) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 384 225) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 267 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 228 360) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 290 218) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 279 139) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 249 190) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 179 287) (om-make-point 338 43) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 207 520) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 95) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 282 606) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 182 606) nil nil nil 0)) (quote ((13 0 1 0 nil 0) (0 0 1 1 nil 1) (13 0 2 0 nil 0) (0 0 2 1 nil 1) (13 0 3 0 nil 0) (4 0 3 1 nil 1) (13 0 5 0 nil 0) (4 0 5 1 nil 1) (7 0 6 0 nil 0) (11 0 7 0 nil 0) (13 0 8 0 nil 0) (9 0 8 1 nil 1) (13 0 10 0 nil 0) (9 0 10 1 nil 1) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (8 0 11 2 nil 0) (3 0 11 3 nil 0) (5 0 11 4 nil 0) (1 0 11 5 nil 0) (2 0 11 6 nil 0) (6 0 12 0 nil 0) (14 0 13 0 nil 0) (12 1 15 0 nil 0) (12 0 16 0 nil 0))) 1 "oitavador" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 23 168) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (19 0 1 0 nil 0) (0 0 2 0 nil 0) (18 0 2 1 nil 0) (8 0 7 0 nil 0) (18 0 7 1 nil 0) (19 0 8 0 nil 0) (13 0 10 0 nil 0) (9 0 10 1 nil 0) (12 0 11 0 nil 0) (18 0 11 1 ((om-make-point 260 66) (om-make-point 517 65) (om-make-point 523 377) (om-make-point 454 398)) 2) (10 0 12 0 nil 0) (21 0 13 0 nil 0) (14 0 13 1 nil 0) (7 0 13 2 nil 0) (2 0 13 3 nil 0) (15 0 14 0 nil 0) (18 0 14 1 nil 0) (19 0 15 0 nil 0) (11 0 16 0 nil 0) (20 0 17 0 nil 0) (16 0 20 0 nil 0) (19 0 21 0 nil 0) (18 0 21 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 1022 494)) (quote ((om-load-inputfun (quote input-funbox) "" "serie" nil) (om-load-inputfun (quote input-funbox) "" "numero_de_repeticoes" nil))) (om-make-point 531 179) nil (list (list (list 7100 6600 6100 6000) (list 6000 5900 5400 4900) (list 4900 5400 5900 6000) (list 6000 6100 6600 7100) (list 6000 5900 5400 4900) (list 4900 5400 5900 6000))) nil "Repetidor de serie de alturas (com oitavador) em P, R, I e RI") (om-load-boxcall (quote abstraction) "Repetidor de serie de alturas (com oitavador) em P e R" (om-load-patch-abs1 "Repetidor de serie de alturas (com oitavador) em P e R" (quote ((om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 266 283) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 232 306) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 426 367) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 261 337) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 144 277) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 313 189) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 247 142) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 679 186) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 851 372) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "numero_de_repeticoes" 1 (om-make-point 192 9) "" "numero_de_repeticoes" nil nil) (om-load-boxin "serie" 0 (om-make-point 48 44) "" "serie" nil nil) (om-load-boxwithed1 (quote box-with-win) "oitavador" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 771 186) nil nil nil (list (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 469 140) (om-make-point 48 30) 3600 "3600" nil) (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 439 191) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 480 219) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 343 197) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 373 146) (om-make-point 48 30) 2400 "2400" nil) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 384 225) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 267 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 228 360) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 290 218) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 279 139) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 249 190) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 179 287) (om-make-point 338 43) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 207 520) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 95) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 282 606) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 182 606) nil nil nil 0)) (quote ((13 0 1 0 nil 0) (0 0 1 1 nil 1) (13 0 2 0 nil 0) (0 0 2 1 nil 1) (13 0 3 0 nil 0) (4 0 3 1 nil 1) (13 0 5 0 nil 0) (4 0 5 1 nil 1) (7 0 6 0 nil 0) (11 0 7 0 nil 0) (13 0 8 0 nil 0) (9 0 8 1 nil 1) (13 0 10 0 nil 0) (9 0 10 1 nil 1) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (8 0 11 2 nil 0) (3 0 11 3 nil 0) (5 0 11 4 nil 0) (1 0 11 5 nil 0) (2 0 11 6 nil 0) (6 0 12 0 nil 0) (14 0 13 0 nil 0) (12 1 15 0 nil 0) (12 0 16 0 nil 0))) 1 "oitavador" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 82 144) nil nil nil nil 1))) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (9 0 2 1 nil 0) (1 0 3 0 nil 0) (12 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (9 0 5 1 nil 0) (10 0 6 0 nil 0) (2 0 7 0 nil 0) (11 0 8 0 nil 0) (7 0 11 0 nil 0) (10 0 12 0 nil 0) (9 0 12 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 955 467)) (quote ((om-load-inputfun (quote input-funbox) "" "serie" nil) (om-load-inputfun (quote input-funbox) "" "numero_de_repeticoes" nil))) (om-make-point 92 177) nil (list (list 4700 7800 4900 3600 9500 6600 3700 8400 4700 9000 2500 2400 8400 9700 10200 8300)) nil "Repetidor de serie de alturas (com oitavador) em P e R") (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 82 335) (om-make-point 896 197) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4700) (7800) (4900) (3600) (9500) (6600) (3700) (8400) (4700) (9000) (2500) (2400) (8400) (9700) (10200) (8300))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 590 346) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 510 92) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 221 76) (om-make-point 154 30) (list 6000 6100 6600 7100) "(6000 6100 6600 7100)" nil))) (quote ((4 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 1 nil 0))) nil 6.0602))
