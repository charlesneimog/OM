; OM File Header - Saved 2020/02/11 21:30:50
; (6.16 :patc (om-make-point 10 160) (om-make-point 51 22) (om-make-point 1109 616) "" 183 0 "2013/08/01 23:43:20" "2020/02/11 21:30:50")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "urna com arithm-ser" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 651 395) (om-make-point 35 28) (list 9) "(9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 203 80) (quote "=> Este patch replica o objeto \"urn\" do MAX/MSP") "" (om-make-point 470 92) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 263 47) (quote "<= Altura mín. e máx. (em midics)") "" (om-make-point 204 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 966 162) (om-make-point 59 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 929 183) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 955 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 844 71) (om-make-point 163 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 777 22) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 899 24) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 868 127) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 964 23) (om-make-point 23 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 489 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 643 248) (om-make-point 28 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 601 248) (om-make-point 28 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 582 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 375 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 258 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 372 114) (om-make-point 35 30) 700 "700" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 331 113) (om-make-point 28 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 126 183) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 224 78) (om-make-point 35 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 135 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 331 249) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 311 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 109 425) (om-make-point 699 144) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (7700) (7900) (10400) (10300) (10200) (4400) (7000) (3800) (3700) (5900) (6800) (8900) (6500) (10600) (8600) (2500) (10500) (5300) (10700) (8100) (2700) (6600) (7400) (4100) (4000) (9100) (10000) (7100) (7300) (2100) (8500) (7500) (9000) (9800) (5200) (9400) (2900) (8200) (2800) (5500) (9700) (6300) (9200) (6100) (8800) (9500) (5800) (6200) (7200) (9300) (3600) (3400) (6000) (3000) (4700) (6700) (2400) (3900) (8300) (2200) (10100) (9900) (9600) (5100) (2600) (4600) (7800) (3300) (7600) (5700) (5000) (3100) (4500) (10800) (4800) (3500) (6900) (4200) (2300) (3200) (5600) (8400) (8700) (8000) (4900) (6400) (4300))) :lonset (quote (0 281 740 1215 1884 2545 3198 3401 3806 3963 4112 4432 4822 5375 5741 6425 6954 7010 7687 7960 8652 9143 9215 9589 10025 10205 10377 10945 11583 11996 12424 12449 12971 13415 13975 14597 14863 15454 15541 16039 16118 16407 17022 17373 17949 18284 18829 19428 19740 20083 20504 21088 21229 21355 21683 21778 22005 22387 22435 22600 23106 23139 23785 24415 25022 25280 25344 25563 26030 26148 26600 26904 27154 27257 27468 28168 28402 28536 28933 29121 29162 29272 29569 30083 30620 31103 31345 31704 31985)) :ldur (quote ((196) (359) (242) (483) (537) (514) (297) (110) (41) (188) (397) (134) (234) (700) (211) (103) (250) (304) (452) (118) (467) (219) (64) (258) (607) (630) (646) (33) (506) (165) (48) (382) (227) (95) (328) (126) (141) (584) (421) (343) (312) (599) (545) (335) (576) (351) (615) (289) (79) (498) (87) (591) (266) (622) (560) (444) (522) (25) (428) (413) (638) (568) (172) (180) (436) (374) (72) (491) (692) (273) (677) (56) (529) (684) (366) (553) (390) (320) (149) (157) (405) (203) (653) (661) (669) (475) (459) (281))) :lvel (quote ((55) (76) (61) (89) (48) (80) (51) (38) (50) (43) (32) (22) (23) (35) (40) (25) (87) (27) (62) (90) (60) (83) (37) (24) (75) (66) (85) (47) (53) (38) (71) (82) (84) (43) (69) (88) (67) (72) (65) (54) (70) (75) (41) (63) (74) (29) (72) (26) (81) (33) (22) (84) (58) (59) (44) (30) (26) (73) (35) (78) (49) (31) (42) (34) (46) (47) (88) (59) (56) (79) (68) (57) (86) (77) (52) (64) (55) (51) (20) (36) (28) (30) (80) (45) (67) (63) (21) (39))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1217 265) (om-make-point 43 85) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 153 9) (om-make-point 49 30) 10800 "10800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 107 9) (om-make-point 42 30) 2100 "2100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (10 0 6 2 nil 0) (15 0 11 0 nil 0) (11 0 14 0 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (22 0 15 0 nil 0) (22 0 16 1 nil 0) (21 0 19 0 nil 0) (26 0 21 0 nil 0) (25 0 21 1 nil 0) (20 0 21 2 nil 0) (23 0 22 0 nil 0) (19 0 23 0 nil 0) (18 0 23 1 nil 0) (17 0 23 2 nil 0) (19 0 24 1 nil 0) (16 0 24 2 nil 0) (15 0 24 3 nil 0) (14 0 24 4 nil 0) (0 0 24 6 nil 0))) nil 6.16))
