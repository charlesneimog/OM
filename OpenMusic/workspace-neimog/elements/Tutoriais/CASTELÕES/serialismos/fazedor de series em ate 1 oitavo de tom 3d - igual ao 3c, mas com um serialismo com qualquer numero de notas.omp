; OM File Header - Saved 2013/11/05 21:04:14
; (6.0602 :patc (om-make-point 118 210) (om-make-point 25 22) (om-make-point 1255 662) "" 183 0 "2013/11/05 15:38:45" "2013/11/05 20:36:00")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fazedor de series em ate 1 oitavo de tom 3d - igual ao 3c, mas com um serialismo com qualquer numero de notas" (quote ((om-load-boxcall (quote abstraction) "gerador de series de qualquer extensao" (om-load-patch-abs1 "gerador de series de qualquer extensao" (quote ((om-load-boxout "output 4" 3 (om-make-point 873 387) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "dyns" nil) (om-load-boxout "output 3" 2 (om-make-point 673 494) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "durs" nil) (om-load-boxout "output 2" 1 (om-make-point 251 486) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "onsets" nil) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 818 252) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 325 258) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 259 408) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 470 265) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 502 199) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 550 300) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 458 347) (om-make-point 113 43) nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 499 403) nil nil "&" nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 351 416) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 655 409) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 51 493) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midics" nil) (om-load-boxin "input 5" 6 (om-make-point 956 53) "" nil nil nil) (om-load-boxin "input 4" 5 (om-make-point 787 61) "" nil nil nil) (om-load-boxin "input 3" 4 (om-make-point 736 58) "" nil nil nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 227 276) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 156 321) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 141 253) nil nil nil nil 1) (om-load-boxin "input 2" 3 (om-make-point 357 45) "" nil nil nil) (om-load-boxin "input" 2 (om-make-point 307 45) "" nil nil nil) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 28 232) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= div. da oitava (50=semitom)") "" (om-make-point 159 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 121 89) (om-make-point 34 30) 50 "50" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 53 151) nil nil nil nil 1) (om-load-boxin "midicmax" 1 (om-make-point 55 45) "" "midicmax" nil nil) (om-load-boxin "midicmin" 0 (om-make-point 5 45) "" "midicmin" nil nil))) (quote ((3 0 0 0 nil 0) (12 0 1 0 nil 0) (5 0 2 0 nil 0) (4 0 3 0 nil 1) (16 0 3 1 nil 0) (15 0 3 2 nil 0) (17 0 4 0 nil 0) (11 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 7 0 nil 1) (21 0 7 1 nil 0) (20 0 7 2 nil 0) (6 0 8 0 nil 0) (6 0 9 0 nil 0) (8 0 9 1 nil 0) (9 0 10 0 nil 0) (10 0 11 0 nil 0) (10 0 12 0 nil 0) (17 0 13 0 nil 0) (18 0 17 0 nil 0) (14 0 17 1 nil 2) (19 0 18 0 nil 0) (22 0 19 0 nil 0) (14 0 19 1 nil 2) (25 0 22 0 nil 0) (27 0 25 0 nil 0) (26 0 25 1 nil 0) (24 0 25 2 nil 0))) 6.0602 nil "" (om-make-point 35 104) (om-make-point 1111 607)) (quote ((om-load-inputfun (quote input-funbox) "" "midicmin" nil) (om-load-inputfun (quote input-funbox) "" "midicmax" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil))) (om-make-point 72 112) (om-make-point 473 67) nil "&" "gerador de series de qualquer extensao") (om-load-boxcomment "comment 5" (om-make-point 173 31) (quote "<= no. de notas da série") "" (om-make-point 484 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 454 45) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 136 9) (om-make-point 69 84) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 7700 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 300 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 62 7) (om-make-point 69 84) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6500 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 300 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcomment "comment 4" (om-make-point 245 61) (quote "<= Lista com possíveis coeficientes para durs das ocorrências da série") "" (om-make-point 971 392) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 862 394) (om-make-point 99 30) (list 1 2 3 5 8 13) "(1 2 3 5 8 13)" nil) (om-load-boxcall (quote abstraction) "Repetidor de serie de alturas (com oitavador) em P, R, I e RI" (om-load-patch-abs1 "Repetidor de serie de alturas (com oitavador) em P, R, I e RI" (quote ((om-load-boxwithed1 (quote box-with-win) "limitador de registro (até f3)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 863 224) nil nil nil (list (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 313 180) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 154 181) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 330 131) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 181 150) (om-make-point 48 30) 5300 "5300" nil) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 142 229) (om-make-point 499 57) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 234 389) (om-make-point 116 59) nil nil nil 3) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 147 50) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 321 501) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 221 501) nil nil nil 0)) (quote ((7 0 0 0 nil 0) (2 0 0 1 nil 0) (7 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 4 0 nil 0) (0 0 4 1 nil 0) (7 0 4 2 ((om-make-point 169 107) (om-make-point 381 124) (om-make-point 517 168) (om-make-point 517 229)) 0) (4 0 5 0 nil 0) (6 0 7 0 nil 0) (5 1 8 0 nil 0) (5 0 9 0 nil 0))) 1 "limitador de registro (até f3)" nil) (om-load-boxwithed1 (quote box-with-win) "limitador de registro (até F6)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 884 142) nil nil nil (list (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 330 131) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 309 171) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 181 150) (om-make-point 48 30) 8900 "8900" nil) (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 130 177) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 142 229) (om-make-point 499 57) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 234 389) (om-make-point 116 59) nil nil nil 3) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 147 50) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 321 501) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 221 501) nil nil nil 0)) (quote ((7 0 1 0 nil 0) (0 0 1 1 nil 0) (7 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (7 0 4 2 ((om-make-point 169 107) (om-make-point 381 124) (om-make-point 517 168) (om-make-point 517 229)) 0) (4 0 5 0 nil 0) (6 0 7 0 nil 0) (5 1 8 0 nil 0) (5 0 9 0 nil 0))) 1 "limitador de registro (até f6)" nil) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 558 114) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Inverte melodias 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 540 44) nil nil nil (list (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= Inverte as alturas da melodia") "" (om-make-point 489 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 464 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 533 241) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= Inverte os Intervalos") "" (om-make-point 259 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= Obtém os Intervalos") "" (om-make-point 86 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 222 272) (om-make-point 32 30) -1 "-1" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 179 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 551 435) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 45 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 157) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 57) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 594 508) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 494 508) nil nil nil 0)) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (11 0 2 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 1 12 0 nil 0) (7 0 13 0 nil 0))) 1 "inverte melodias" nil) (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 586 157) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= I") "" (om-make-point 421 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= R") "" (om-make-point 274 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= P") "" (om-make-point 84 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= RI") "" (om-make-point 630 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 356 227) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Inverte melodias" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 337 158) nil nil nil (list (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= Inverte as alturas da melodia") "" (om-make-point 489 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 464 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 533 241) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= Inverte os Intervalos") "" (om-make-point 259 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= Obtém os Intervalos") "" (om-make-point 86 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 222 272) (om-make-point 32 30) -1 "-1" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 179 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 551 435) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 45 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 157) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 57) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 594 508) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 494 508) nil nil nil 0)) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (11 0 2 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 1 12 0 nil 0) (7 0 13 0 nil 0))) 1 "inverte melodias" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 227 347) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 207 376) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 426 398) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 281 387) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 134 299) (om-make-point 170 43) nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 216 148) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 257 87) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 851 100) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 942 381) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "numero_de_repeticoes" 1 (om-make-point 192 9) "" "numero_de_repeticoes" nil nil) (om-load-boxin "serie" 0 (om-make-point 48 44) "" "serie" nil nil) (om-load-boxwithed1 (quote box-with-win) "oitavador" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 935 57) nil nil nil (list (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 267 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 228 360) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 408 220) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 397 141) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 367 192) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 179 287) (om-make-point 338 43) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 207 520) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 95) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 282 606) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 182 606) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (7 0 2 0 nil 0) (3 0 2 1 nil 1) (7 0 4 0 nil 0) (3 0 4 1 nil 1) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (0 0 6 0 nil 0) (8 0 7 0 nil 0) (6 1 9 0 nil 0) (6 0 10 0 nil 0))) 1 "oitavador" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 23 168) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (22 0 1 0 nil 0) (3 0 2 0 nil 0) (21 0 3 0 nil 0) (2 0 4 0 nil 0) (20 0 4 1 nil 0) (10 0 9 0 nil 0) (20 0 9 1 nil 0) (21 0 10 0 nil 0) (15 0 12 0 nil 0) (11 0 12 1 nil 0) (14 0 13 0 nil 0) (20 0 13 1 ((om-make-point 260 66) (om-make-point 517 65) (om-make-point 523 377) (om-make-point 454 398)) 2) (12 0 14 0 nil 0) (23 0 15 0 nil 0) (16 0 15 1 nil 0) (9 0 15 2 nil 0) (4 0 15 3 nil 0) (17 0 16 0 nil 0) (20 0 16 1 nil 0) (21 0 17 0 nil 0) (13 0 18 0 nil 0) (0 0 19 0 nil 0) (18 0 22 0 nil 0) (21 0 23 0 nil 0) (20 0 23 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 1056 507)) (quote ((om-load-inputfun (quote input-funbox) "" "serie" nil) (om-load-inputfun (quote input-funbox) "" "numero_de_repeticoes" nil))) (om-make-point 6 305) (om-make-point 277 67) (list (list 6100 7700 6500 8500 5700 8500 8100 7300 6100 7700 8900 8500 7300 6900 8500 7700 7300 6900 6100 8100 7300 6500 6100 5700 8900 8500 8500 8100 6500 6100 6100 5700 7300 8900 5700 8500 6100 8100 6500 7300 6900 7300 6100 6500 6500 6100 8500 8100 6100 5700 8500 6500 8100 6100 8500 6500 7300 8900 7700 8500 7700 7300 8100 6100 6500 6100 6900 6100 6100 8100 8900 6100)) nil "Repetidor de serie de alturas (com oitavador) em P, R, I e RI") (om-load-boxcomment "comment" (om-make-point 324 202) (quote "=> Esta versão é igual à 3c, mas com um serialismo com qualquer número de notas (e, consequentemente, incluindo repetição de classes de altura (como no Schoenberg pré-serialismo dodecafônico, Gilberto Mendes, etc.)") "" (om-make-point 707 1) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Repetidor de serie de dyns (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de dyns (com multiplicador)" (quote ((om-load-boxin "dyn_max" 4 (om-make-point 788 192) "" "dyn_max" nil nil) (om-load-boxin "dyn_min" 3 (om-make-point 707 166) "" "dyn_min" nil nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 621 315) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 197 346) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil) (om-load-boxout "output" 0 (om-make-point 65 372) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_dyns" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_dyns" 0 (om-make-point 5 45) "" "serie_de_dyns" nil nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (quote ((4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (2 0 3 0 nil 0) (9 0 4 0 nil 0) (6 0 4 1 nil 0) (3 0 5 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_dyns" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 670 478) nil (list (list 36 27 42 29 31 26 71 36 27 25 47 30 71 36 29 26 100 43 36 27 47 30 36 27 47 30 47 30 71 36 42 29 47 30 42 29 36 27 29 26 47 30 100 43 42 29 47 30 47 30 31 26 31 26 100 43 31 26 100 43 31 26 47 30 100 43 100 43 29 26 36 27)) nil "Repetidor de serie de dyns (com multiplicador)") (om-load-boxcall (quote abstraction) "Repetidor de serie de durs (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de durs (com multiplicador)" (quote ((om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 276 296) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil) (om-load-boxout "output" 0 (om-make-point 167 352) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_durs" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_durs" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_durs" 0 (om-make-point 5 45) "" "serie_de_durs" nil nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 2 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 367 443) nil (list (list 500 100 6500 1300 1500 300 4000 800 4000 800 500 100 500 100 500 100 500 100 500 100 2500 500 1500 300 500 100 500 100 2500 500 1000 200 6500 1300 1500 300 1000 200 500 100 500 100 500 100 4000 800 500 100 1500 300 1000 200 1000 200 1000 200 500 100 4000 800 4000 800 6500 1300 1000 200 4000 800 2500 500 500 100)) nil "Repetidor de serie de durs (com multiplicador)") (om-load-boxcall (quote abstraction) "Repetidor de serie de onsets (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de onsets (com multiplicador)" (quote ((om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 256 265) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 164 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_os_onsets" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_os_onsets" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_onsets" 0 (om-make-point 5 45) "" "serie_de_onsets" nil nil) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de onsets (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 338 214) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de onsets (com multiplicador)" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 108 297) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 116 145) nil nil nil nil 1))) (quote ((5 0 0 0 nil 0) (7 0 1 0 nil 0) (6 0 5 0 nil 0) (2 0 5 1 nil 0) (8 0 6 0 nil 0) (3 0 6 1 nil 0) (0 0 7 1 nil 0) (4 0 8 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 143 406) nil (list (list 0 250 300 800 900 1000 1020 1270 1320 1820 1920 2170 2220 3920 4260 4360 4380 4630 4680 5330 5460 5960 6060 6710 6840 7340 7440 8090 8220 8720 8820 10520 10860 11360 11460 11560 11580 13280 13620 14670 14880 15530 15660 16160 16260 16310 16320 17370 17580 19280 19620 20120 20220 20870 21000 21500 21600 23300 23640 24690 24900 24950 24960 25110 25140 25190 25200 25600 25680 26180 26280 26780 26880)) nil "Repetidor de serie de onsets (com multiplicador)") (om-load-boxcomment "comment" (om-make-point 245 61) (quote "<= Lista com possíveis coeficientes para os onsets e dyns das ocorrências da série") "" (om-make-point 983 280) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 785 283) (om-make-point 202 30) (list 0.1 0.2 0.3 0.5 0.8 1.3 2.1 3.4) "(0.1 0.2 0.3 0.5 0.8 1.3 2.1 3.4)" nil) (om-load-boxcomment "comment 3" (om-make-point 203 59) (quote "<= no. de repetições da série") "" (om-make-point 700 211) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 670 215) (om-make-point 34 30) 36 "36" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 16 568) (om-make-point 1178 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (7700) (6500) (8500) (5700) (8500) (8100) (7300) (6100) (7700) (8900) (8500) (7300) (6900) (8500) (7700) (7300) (6900) (6100) (8100) (7300) (6500) (6100) (5700) (8900) (8500) (8500) (8100) (6500) (6100) (6100) (5700) (7300) (8900) (5700) (8500) (6100) (8100) (6500) (7300) (6900) (7300) (6100) (6500) (6500) (6100) (8500) (8100) (6100) (5700) (8500) (6500) (8100) (6100) (8500) (6500) (7300) (8900) (7700) (8500) (7700) (7300) (8100) (6100) (6500) (6100) (6900) (6100) (6100) (8100) (8900) (6100))) :lonset (quote (0 250 300 800 900 1000 1020 1270 1320 1820 1920 2170 2220 3920 4260 4360 4380 4630 4680 5330 5460 5960 6060 6710 6840 7340 7440 8090 8220 8720 8820 10520 10860 11360 11460 11560 11580 13280 13620 14670 14880 15530 15660 16160 16260 16310 16320 17370 17580 19280 19620 20120 20220 20870 21000 21500 21600 23300 23640 24690 24900 24950 24960 25110 25140 25190 25200 25600 25680 26180 26280 26780 31460)) :ldur (quote ((500) (100) (6500) (1300) (1500) (300) (4000) (800) (4000) (800) (500) (100) (500) (100) (500) (100) (500) (100) (500) (100) (2500) (500) (1500) (300) (500) (100) (500) (100) (2500) (500) (1000) (200) (6500) (1300) (1500) (300) (1000) (200) (500) (100) (500) (100) (500) (100) (4000) (800) (500) (100) (1500) (300) (1000) (200) (1000) (200) (1000) (200) (500) (100) (4000) (800) (4000) (800) (6500) (1300) (1000) (200) (4000) (800) (2500) (500) (500) (100))) :lvel (quote ((36) (27) (42) (29) (31) (26) (71) (36) (27) (25) (47) (30) (71) (36) (29) (26) (100) (43) (36) (27) (47) (30) (36) (27) (47) (30) (47) (30) (71) (36) (42) (29) (47) (30) (42) (29) (36) (27) (29) (26) (47) (30) (100) (43) (42) (29) (47) (30) (47) (30) (31) (26) (31) (26) (100) (43) (31) (26) (100) (43) (31) (26) (47) (30) (100) (43) (100) (43) (29) (26) (36) (27))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 36 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 127/100 nil 250 0 (om-make-point 1024 324) (om-make-point 0 223) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 382 2) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 415 1) (om-make-point 41 30) 100 "100" nil) (om-load-boxcomment "comment 2" (om-make-point 173 31) (quote "<= dyns mín. e máx.") "" (om-make-point 456 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= onsets e durs mín. e máx.") "" (om-make-point 300 1) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 262 3) (om-make-point 41 30) 500 "500" nil) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 210 3) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1128 143) (om-make-point 59 30) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1093 145) (om-make-point 34 30) 12 "12" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1117 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1074 55) (om-make-point 126 67) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 998 3) (om-make-point 118 32) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1120 5) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1072 115) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1185 4) (om-make-point 23 28) 0 "0" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1 199) (om-make-point 652 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6900))) :lonset (quote (0 500 600)) :ldur (quote ((500) (100))) :lvel (quote ((100) (25))) :loffset (quote ((0) (0))) :lchan (quote ((1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 36 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 127/100 nil 250 0 (om-make-point 1024 324) (om-make-point 0 223) 0 1 (quote t) nil 0)) t nil nil nil))) (quote ((4 1 0 0 nil 0) (3 1 0 1 nil 0) (22 0 0 2 nil 0) (21 0 0 3 nil 0) (17 0 0 4 nil 0) (18 0 0 5 nil 0) (2 0 0 6 nil 0) (31 1 7 0 nil 0) (15 0 7 1 nil 0) (31 4 9 0 nil 0) (15 0 9 1 nil 0) (13 0 9 2 nil 0) (17 0 9 3 nil 0) (18 0 9 4 nil 0) (31 3 10 0 nil 0) (15 0 10 1 nil 0) (6 0 10 2 nil 1) (31 2 11 0 nil 0) (15 0 11 1 nil 0) (13 0 11 2 nil 0) (7 0 16 1 ((om-make-point 142 370) (om-make-point 136 509) (om-make-point 278 531) (om-make-point 278 568)) 0) (11 0 16 2 nil 0) (10 0 16 3 nil 0) (9 0 16 4 nil 0) (24 0 25 0 nil 0) (23 0 25 1 nil 0) (27 0 26 0 nil 0) (28 0 26 1 nil 0) (30 0 26 2 nil 0) (0 0 31 1 nil 0) (0 1 31 2 nil 0) (0 2 31 3 nil 0) (0 3 31 4 nil 0))) nil 6.0602))
