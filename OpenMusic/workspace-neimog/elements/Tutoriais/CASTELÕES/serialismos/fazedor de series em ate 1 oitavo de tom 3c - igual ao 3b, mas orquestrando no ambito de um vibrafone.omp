; OM File Header - Saved 2013/11/05 20:36:10
; (6.0602 :patc (om-make-point 118 210) (om-make-point 53 45) (om-make-point 1216 676) "" 183 0 "2013/11/05 15:10:56" "2013/11/05 16:37:39")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fazedor de series em ate 1 oitavo de tom 3c - igual ao 3b, mas orquestrando no ambito de um vibrafone" (quote ((om-load-boxcomment "comment 4" (om-make-point 245 61) (quote "<= Lista com possíveis coeficientes para durs das ocorrências da série") "" (om-make-point 972 364) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 863 366) (om-make-point 110 30) (list 0.25 0 5 8 11) "(0.25 0. 5 8 11)" nil) (om-load-boxcall (quote abstraction) "Repetidor de serie de alturas (com oitavador) em P, R, I e RI" (om-load-patch-abs1 "Repetidor de serie de alturas (com oitavador) em P, R, I e RI" (quote ((om-load-boxwithed1 (quote box-with-win) "limitador de registro (até F6)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 868 256) nil nil nil (list (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 330 131) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 309 171) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 181 150) (om-make-point 48 30) 8900 "8900" nil) (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 130 177) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 142 229) (om-make-point 499 57) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 234 389) (om-make-point 116 59) nil nil nil 3) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 147 50) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 321 501) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 221 501) nil nil nil 0)) (quote ((7 0 1 0 nil 0) (0 0 1 1 nil 0) (7 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (7 0 4 2 ((om-make-point 169 107) (om-make-point 381 124) (om-make-point 517 168) (om-make-point 517 229)) 0) (4 0 5 0 nil 0) (6 0 7 0 nil 0) (5 1 8 0 nil 0) (5 0 9 0 nil 0))) 1 "limitador de registro (até F6)" nil) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 559 174) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Inverte melodias 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 541 88) nil nil nil (list (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= Inverte as alturas da melodia") "" (om-make-point 489 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 464 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 533 241) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= Inverte os Intervalos") "" (om-make-point 259 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= Obtém os Intervalos") "" (om-make-point 86 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 222 272) (om-make-point 32 30) -1 "-1" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 179 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 551 435) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 45 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 157) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 57) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 594 508) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 494 508) nil nil nil 0)) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (11 0 2 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 1 12 0 nil 0) (7 0 13 0 nil 0))) 1 "inverte melodias" nil) (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 587 217) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 100 60) (quote "<= I") "" (om-make-point 421 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= R") "" (om-make-point 274 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= P") "" (om-make-point 84 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= RI") "" (om-make-point 641 89) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 356 227) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Inverte melodias" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 337 158) nil nil nil (list (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= Inverte as alturas da melodia") "" (om-make-point 489 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 464 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 533 241) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= Inverte os Intervalos") "" (om-make-point 259 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= Obtém os Intervalos") "" (om-make-point 86 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 222 272) (om-make-point 32 30) -1 "-1" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 179 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 551 435) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 45 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 157) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 57) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 594 508) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 494 508) nil nil nil 0)) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (11 0 2 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 1 12 0 nil 0) (7 0 13 0 nil 0))) 1 "inverte melodias" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 227 347) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 207 376) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 426 398) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 264 387) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 134 299) (om-make-point 170 43) nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 216 148) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 257 87) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 849 142) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 942 381) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "numero_de_repeticoes" 1 (om-make-point 192 9) "" "numero_de_repeticoes" nil nil) (om-load-boxin "serie" 0 (om-make-point 48 44) "" "serie" nil nil) (om-load-boxwithed1 (quote box-with-win) "oitavador" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 941 142) nil nil nil (list (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 267 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 228 360) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 408 220) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 397 141) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 367 192) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 179 287) (om-make-point 338 43) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 207 520) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 95) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 282 606) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 182 606) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (7 0 2 0 nil 0) (3 0 2 1 nil 1) (7 0 4 0 nil 0) (3 0 4 1 nil 1) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (0 0 6 0 nil 0) (8 0 7 0 nil 0) (6 1 9 0 nil 0) (6 0 10 0 nil 0))) 1 "oitavador" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 23 168) nil nil nil nil 1))) (quote ((21 0 0 0 nil 0) (2 0 1 0 nil 0) (20 0 2 0 nil 0) (1 0 3 0 nil 0) (19 0 3 1 nil 0) (9 0 8 0 nil 0) (19 0 8 1 nil 0) (20 0 9 0 nil 0) (14 0 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (19 0 12 1 ((om-make-point 260 66) (om-make-point 517 65) (om-make-point 523 377) (om-make-point 454 398)) 2) (11 0 13 0 nil 0) (22 0 14 0 nil 0) (15 0 14 1 nil 0) (8 0 14 2 nil 0) (3 0 14 3 nil 0) (16 0 15 0 nil 0) (19 0 15 1 nil 0) (20 0 16 0 nil 0) (12 0 17 0 nil 0) (0 0 18 0 nil 0) (17 0 21 0 nil 0) (20 0 22 0 nil 0) (19 0 22 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 1046 496)) (quote ((om-load-inputfun (quote input-funbox) "" "serie" nil) (om-load-inputfun (quote input-funbox) "" "numero_de_repeticoes" nil))) (om-make-point 7 277) nil (list (list 8100 7800 5600 6400 8400 6100 6700 8200 5900 7400 5100 5300 6100 6300 8800 5500 5600 8300 6500 7800 8600 5800 8400 5700 6100 8700 6400 6700 8000 8300 7700 6600 6200 7000 8400 6900 7700 6300 5000 7100 5800 7900 7300 6000 7600 6800 7800 6900 5700 8400 5800 8600 7800 7700 5900 8000 6700 7600 8700 8500 7300 6300 7600 6700 6800 7100 6500 7800 6200 8200 7200 5700 6900 7200 8200 7400 7800 6500 5900 8000 6700 8800 8700 6100)) nil "Repetidor de serie de alturas (com oitavador) em P, R, I e RI") (om-load-boxcomment "comment" (om-make-point 284 111) (quote "=> Esta versão é igual à 3b, mas orquestra no âmbito de um vibrafone de 3 oitavas") "" (om-make-point 661 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Repetidor de serie de dyns (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de dyns (com multiplicador)" (quote ((om-load-boxin "dyn_max" 4 (om-make-point 788 192) "" "dyn_max" nil nil) (om-load-boxin "dyn_min" 3 (om-make-point 707 166) "" "dyn_min" nil nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 621 315) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 197 346) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil) (om-load-boxout "output" 0 (om-make-point 65 372) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_dyns" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_dyns" 0 (om-make-point 5 45) "" "serie_de_dyns" nil nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (quote ((4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (2 0 3 0 nil 0) (9 0 4 0 nil 0) (6 0 4 1 nil 0) (3 0 5 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_dyns" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 671 450) nil (list (list 63 45 69 59 100 93 54 87 41 49 80 74 36 30 37 34 48 45 32 43 28 31 41 39 29 26 30 28 35 34 27 33 25 26 32 30 36 30 37 34 48 45 32 43 28 31 41 39 32 28 33 31 41 40 30 38 27 29 36 35 36 30 37 34 48 45 32 43 28 31 41 39 63 45 69 59 100 93 54 87 41 49 80 74)) nil "Repetidor de serie de dyns (com multiplicador)") (om-load-boxcall (quote abstraction) "Repetidor de serie de durs (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de durs (com multiplicador)" (quote ((om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 276 296) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil) (om-load-boxout "output" 0 (om-make-point 167 352) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_durs" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_durs" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_durs" 0 (om-make-point 5 45) "" "serie_de_durs" nil nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 2 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 368 415) nil (list (list 1550 5000 1165 4420 450 2400 3350 1965 2860 3870 795 125 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 310 1000 233 884 90 480 670 393 572 774 159 25 0 0 0 0 0 0 0 0 0 0 0 0 2480 8000 1864 7072 720 3840 5360 3144 4576 6192 1272 200 3410 11000 2563 9724 990 5280 7370 4323 6292 8514 1749 275)) nil "Repetidor de serie de durs (com multiplicador)") (om-load-boxcall (quote abstraction) "Repetidor de serie de onsets (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de onsets (com multiplicador)" (quote ((om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 256 265) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 164 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_os_onsets" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_os_onsets" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_onsets" 0 (om-make-point 5 45) "" "serie_de_onsets" nil nil) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de onsets (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 338 214) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de onsets (com multiplicador)" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 108 297) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 116 145) nil nil nil nil 1))) (quote ((5 0 0 0 nil 0) (7 0 1 0 nil 0) (6 0 5 0 nil 0) (2 0 5 1 nil 0) (8 0 6 0 nil 0) (3 0 6 1 nil 0) (0 0 7 1 nil 0) (4 0 8 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 144 378) nil (list (list 0 480 1364 2138 2448 2473 2632 3632 3722 4392 4785 5357 5382 5862 6746 7520 7830 7855 8014 9014 9104 9774 10167 10739 10764 11244 12128 12902 13212 13237 13396 14396 14486 15156 15549 16121 16146 17106 18874 20422 21042 21092 21410 23410 23590 24930 25716 26860 26910 27150 27592 27979 28134 28147 28227 28727 28772 29107 29304 29590 29603 30563 32331 33879 34499 34549 34867 36867 37047 38387 39173 40317 40367 40727 41390 41971 42204 42223 42342 43092 43160 43663 43958 44387 44406)) nil "Repetidor de serie de onsets (com multiplicador)") (om-load-boxcomment "comment" (om-make-point 245 61) (quote "<= Lista com possíveis coeficientes para os onsets, durs e dyns das ocorrências da série") "" (om-make-point 949 251) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 809 255) (om-make-point 139 30) (list 0.25 0.5 0.75 1 2 3) "(0.25 0.5 0.75 1 2 3)" nil) (om-load-boxcomment "comment 3" (om-make-point 203 59) (quote "<= no. de repetições da série") "" (om-make-point 701 183) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 671 187) (om-make-point 27 30) 7 "7" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 17 540) (om-make-point 1178 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (7800) (5600) (6400) (8400) (6100) (6700) (8200) (5900) (7400) (5100) (5300) (6100) (6300) (8800) (5500) (5600) (8300) (6500) (7800) (8600) (5800) (8400) (5700) (6100) (8700) (6400) (6700) (8000) (8300) (7700) (6600) (6200) (7000) (8400) (6900) (7700) (6300) (5000) (7100) (5800) (7900) (7300) (6000) (7600) (6800) (7800) (6900) (5700) (8400) (5800) (8600) (7800) (7700) (5900) (8000) (6700) (7600) (8700) (8500) (7300) (6300) (7600) (6700) (6800) (7100) (6500) (7800) (6200) (8200) (7200) (5700) (6900) (7200) (8200) (7400) (7800) (6500) (5900) (8000) (6700) (8800) (8700) (6100))) :lonset (quote (0 480 1364 2138 2448 2473 2632 3632 3722 4392 4785 5357 5382 5862 6746 7520 7830 7855 8014 9014 9104 9774 10167 10739 10764 11244 12128 12902 13212 13237 13396 14396 14486 15156 15549 16121 16146 17106 18874 20422 21042 21092 21410 23410 23590 24930 25716 26860 26910 27150 27592 27979 28134 28147 28227 28727 28772 29107 29304 29590 29603 30563 32331 33879 34499 34549 34867 36867 37047 38387 39173 40317 40367 40727 41390 41971 42204 42223 42342 43092 43160 43663 43958 44387 52177)) :ldur (quote ((1550) (5000) (1165) (4420) (450) (2400) (3350) (1965) (2860) (3870) (795) (125) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (310) (1000) (233) (884) (90) (480) (670) (393) (572) (774) (159) (25) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (2480) (8000) (1864) (7072) (720) (3840) (5360) (3144) (4576) (6192) (1272) (200) (3410) (11000) (2563) (9724) (990) (5280) (7370) (4323) (6292) (8514) (1749) (275))) :lvel (quote ((63) (45) (69) (59) (100) (93) (54) (87) (41) (49) (80) (74) (36) (30) (37) (34) (48) (45) (32) (43) (28) (31) (41) (39) (29) (26) (30) (28) (35) (34) (27) (33) (25) (26) (32) (30) (36) (30) (37) (34) (48) (45) (32) (43) (28) (31) (41) (39) (32) (28) (33) (31) (41) (40) (30) (38) (27) (29) (36) (35) (36) (30) (37) (34) (48) (45) (32) (43) (28) (31) (41) (39) (63) (45) (69) (59) (100) (93) (54) (87) (41) (49) (80) (74))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 0 223) (om-make-point 1024 324) 0 250 nil 127/100 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 8)) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 485 15) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 518 14) (om-make-point 41 30) 100 "100" nil) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= dyns mín. e máx.") "" (om-make-point 557 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= onsets e durs mín. e máx.") "" (om-make-point 335 1) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Series ALEA - de 1/2 a 1/8 de tom - com mc->f para onsets, durs e dyns" (om-load-patch-abs1 "Series ALEA - de 1/2 a 1/8 de tom - com mc->f para onsets, durs e dyns" (quote ((om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 357 319) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 717 446) nil nil nil nil 1) (om-load-boxin "input 4" 3 (om-make-point 794 244) "" nil nil nil) (om-load-boxin "input 3" 2 (om-make-point 744 244) "" nil nil nil) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 746 375) nil nil nil nil 1) (om-load-boxout "output 4" 3 (om-make-point 778 512) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "dyns" nil) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 590 541) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 286 548) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 434 535) nil nil "&" nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 393 479) (om-make-point 113 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 485 432) nil nil nil nil 1) (om-load-boxin "onsetdurmax." 1 (om-make-point 571 219) "" "onsetdurmax." nil nil) (om-load-boxin "onsetdurmin." 0 (om-make-point 481 220) "" "onsetdurmin." nil nil) (om-load-boxout "output 3" 2 (om-make-point 680 561) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "durs" nil) (om-load-boxout "output 2" 1 (om-make-point 122 558) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "onsets" nil) (om-load-boxout "output" 0 (om-make-point 47 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midics" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 333 218) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 242 327) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 198 278) (om-make-point 48 30) 6500 "6500" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 408 247) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 658 24) (om-make-point 28 30) 50 "50" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 332 156) nil nil nil (list (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 456 316) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 405 300) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 225 92) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 213 35) "" nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 402 163) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 133 127) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 383 410) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 126 319) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (4 1 1 0 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 ((om-make-point 229 92) (om-make-point 203 99) (om-make-point 157 110) (om-make-point 157 127)) 0) (0 0 6 0 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0))) 1 "omloop 4" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 521 330) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 405 397) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 194 540) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "fazedor de series em até 1/8 de tom" (om-load-patch-abs1 "fazedor de series em até 1/8 de tom" (quote ((om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 515 257) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 490 292) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 429 174) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 400 190) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 73 460) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 150 375) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 41 362) (om-make-point 27 30) nil "nil" nil) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 71 397) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 495 223) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 462 237) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 310 338) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote genfun) "ARITHM-SER 3" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 437 347) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM= 3" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 367 343) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 368 386) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 83 335) (om-make-point 67 43) nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 390 129) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 357 143) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 209 294) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote genfun) "ARITHM-SER 2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 327 272) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM= 2" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 257 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 258 311) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 31 197) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 162 193) (om-make-point 28 30) 11 "11" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 134 193) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 141 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 91 198) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 68 245) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 62 34) "" nil nil nil))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (16 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 4 0 nil 0) (14 0 5 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (22 0 9 0 nil 0) (8 0 9 1 nil 0) (23 0 11 0 nil 0) (1 0 11 1 nil 0) (10 0 12 0 nil 0) (27 0 12 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (26 0 14 0 nil 0) (20 0 14 1 nil 0) (13 0 14 2 nil 0) (22 0 16 0 nil 0) (15 0 16 1 nil 0) (23 0 18 0 nil 0) (3 0 18 1 nil 0) (17 0 19 0 nil 0) (27 0 19 1 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 0) (21 0 25 0 nil 0) (27 0 25 1 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 232 87) nil (list (list 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)) nil "fazedor de series em até 1/8 de tom") (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 589 20) (om-make-point 64 30) (list 2 1 0.5) "(2 1 0.5)" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 647 129) nil nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 581 56) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 455 66) nil nil "&" nil 1))) (quote ((17 0 0 0 nil 0) (4 0 1 0 nil 0) (0 0 4 0 nil 2) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (1 0 5 0 nil 0) (8 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (23 0 9 0 nil 0) (10 0 9 1 nil 0) (23 0 10 0 nil 0) (6 0 13 0 nil 0) (24 0 14 0 nil 0) (17 0 15 0 nil 0) (21 0 16 0 nil 0) (18 0 17 0 nil 0) (19 0 17 1 nil 0) (16 0 19 0 nil 0) (29 0 19 1 nil 0) (25 0 21 0 nil 0) (0 0 22 0 nil 2) (12 0 22 1 nil 0) (11 0 22 2 nil 0) (22 0 23 0 nil 0) (7 0 24 1 nil 0) (29 0 25 0 nil 0) (28 0 27 0 nil 0) (20 0 27 1 nil 0) (26 0 28 0 nil 0) (27 0 29 0 nil 0))) 6.0602 nil "" (om-make-point 29 101) (om-make-point 857 471)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 67 80) nil nil "&" "Series ALEA - de 1/2 a 1/8 de tom - com mc->f para onsets, durs e dyns") (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 286 3) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 253 4) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1082 147) (om-make-point 59 30) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1047 149) (om-make-point 34 30) 12 "12" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1071 182) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1028 59) (om-make-point 126 67) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 952 7) (om-make-point 118 32) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1074 9) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1026 119) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1139 8) (om-make-point 23 28) 0 "0" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 2 171) (om-make-point 652 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7200) (7000) (7400) (6600) (6500) (7100) (6800) (6700) (7600) (7500) (7300))) :lonset (quote (0 480 1364 2138 2448 2473 2632 3632 3722 4392 4785 5357 5382)) :ldur (quote ((310) (1000) (233) (884) (90) (480) (670) (393) (572) (774) (159) (25))) :lvel (quote ((53) (30) (60) (47) (100) (91) (41) (83) (25) (35) (75) (67))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 0 223) (om-make-point 1024 324) 0 250 nil 127/100 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 8)) t nil nil nil))) (quote ((27 1 2 0 nil 0) (10 0 2 1 nil 0) (27 4 4 0 nil 0) (10 0 4 1 nil 0) (8 0 4 2 nil 0) (12 0 4 3 nil 0) (13 0 4 4 nil 0) (27 3 5 0 nil 0) (10 0 5 1 nil 0) (1 0 5 2 nil 0) (27 2 6 0 nil 0) (10 0 6 1 nil 0) (8 0 6 2 nil 0) (2 0 11 1 ((om-make-point 185 342) (om-make-point 31 509) (om-make-point 272 505) (om-make-point 279 540)) 0) (6 0 11 2 nil 0) (5 0 11 3 nil 0) (4 0 11 4 nil 0) (18 0 16 0 nil 0) (17 0 16 1 nil 0) (12 0 16 2 nil 0) (13 0 16 3 nil 0) (20 0 21 0 nil 0) (19 0 21 1 nil 0) (23 0 22 0 nil 0) (24 0 22 1 nil 0) (26 0 22 2 nil 0) (16 0 27 1 nil 0) (16 1 27 2 nil 0) (16 2 27 3 nil 0) (16 3 27 4 nil 0))) nil 6.0602))
