; OM File Header - Saved 2013/11/04 14:59:20
; (6.0602 :patc (om-make-point 118 210) (om-make-point 50 50) (om-make-point 1216 676) "" 183 0 "2013/11/04 14:34:22" "2013/11/04 14:37:16")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fazedor de series em ate 1 oitavo de tom 2b - incluindo P e R para as alturas" (quote ((om-load-boxcomment "comment" (om-make-point 288 113) (quote "=> Esta versão inclui formas P e R para as alturas") nil (om-make-point 701 62) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Repetidor de serie de alturas (com oitavador) em P e R" (om-load-patch-abs1 "Repetidor de serie de alturas (com oitavador) em P e R" (quote ((om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 266 283) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 232 306) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 426 367) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 261 337) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 144 277) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 313 189) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 247 142) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 679 186) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 851 372) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "numero_de_repeticoes" 1 (om-make-point 192 9) "" "numero_de_repeticoes" nil nil) (om-load-boxin "serie" 0 (om-make-point 48 44) "" "serie" nil nil) (om-load-boxwithed1 (quote box-with-win) "oitavador" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 771 186) nil nil nil (list (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 469 140) (om-make-point 48 30) 3600 "3600" nil) (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 439 191) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 480 219) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 343 197) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 373 146) (om-make-point 48 30) 2400 "2400" nil) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 384 225) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 267 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 228 360) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 290 218) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 279 139) (om-make-point 48 30) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 249 190) (om-make-point 16 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 179 287) (om-make-point 338 43) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 207 520) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 95) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 282 606) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 182 606) nil nil nil 0)) (quote ((13 0 1 0 nil 0) (0 0 1 1 nil 1) (13 0 2 0 nil 0) (0 0 2 1 nil 1) (13 0 3 0 nil 0) (4 0 3 1 nil 1) (13 0 5 0 nil 0) (4 0 5 1 nil 1) (7 0 6 0 nil 0) (11 0 7 0 nil 0) (13 0 8 0 nil 0) (9 0 8 1 nil 1) (13 0 10 0 nil 0) (9 0 10 1 nil 1) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (8 0 11 2 nil 0) (3 0 11 3 nil 0) (5 0 11 4 nil 0) (1 0 11 5 nil 0) (2 0 11 6 nil 0) (6 0 12 0 nil 0) (14 0 13 0 nil 0) (12 1 15 0 nil 0) (12 0 16 0 nil 0))) 1 "oitavador" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 82 144) nil nil nil nil 1))) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (9 0 2 1 nil 0) (1 0 3 0 nil 0) (12 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (9 0 5 1 nil 0) (10 0 6 0 nil 0) (2 0 7 0 nil 0) (11 0 8 0 nil 0) (7 0 11 0 nil 0) (10 0 12 0 nil 0) (9 0 12 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie" nil) (om-load-inputfun (quote input-funbox) "" "numero_de_repeticoes" nil))) (om-make-point 18 299) nil (list (list 3550 4950 8000 4250 10600 8900 6450 6100 3800 7900 8950 8800 9600 4500 3150 8250 7450 8150 2750 7800 3900 6850 3500 7250 5950 6150 10400 4250 7000 5300 10050 3700 3800 3100 8950 2800 4800 10500 7950 7050 2650 5750 2750 4200 6300 4450 4700 2450 7150 8550 10400 10250 4600 10100 7650 2500 6200 7900 6550 7600 8400 4500 4350 10650 9850 8150 8750 6600 2700 8050 10700 4850 6050 10700 8050 9900 10200 5150 3350 2650 3450 7950 5700 3600 4000 5350 10300 5000 6100 5250 7700 10600 7850 9200 4950 10750 4850 10700 9250 9900 3000 5150 4550 3850 8250 5550 5700 2400 8800 10150 7900 9800 7300 4050 7700 4600 6650 3200 3750 7150 6050 10700 5650 7500 4200 9950 9350 5050 7050 5550 10500 3600 2800 2950 9100 9800 8500 5250 7700 5800 5450 6800 8550 9550 2450 7100 5650 5100 10200 3950 9350 9850 9450 3150 10500 4800 5200 2950 9100 2600 3700 4050 7700 9400 3050 4400 9750 5950)) nil "Repetidor de serie de alturas (com oitavador) em P e R") (om-load-boxcall (quote abstraction) "Repetidor de serie de dyns (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de dyns (com multiplicador)" (quote ((om-load-boxin "dyn_max" 4 (om-make-point 788 192) "" "dyn_max" nil nil) (om-load-boxin "dyn_min" 3 (om-make-point 707 166) "" "dyn_min" nil nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 621 315) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 197 346) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil) (om-load-boxout "output" 0 (om-make-point 65 372) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_dyns" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_dyns" 0 (om-make-point 5 45) "" "serie_de_dyns" nil nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (quote ((4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (2 0 3 0 nil 0) (9 0 4 0 nil 0) (6 0 4 1 nil 0) (3 0 5 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_dyns" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista_de_possiveis_coeficientes_para_as_dyns" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 668 385) nil (list (list 63 67 47 40 69 51 71 52 72 45 65 56 38 74 54 78 49 62 59 42 43 36 58 76 80 84 57 47 88 62 90 64 92 54 82 70 44 95 67 100 60 77 74 49 52 42 72 98 63 67 47 40 69 51 71 52 72 45 65 56 38 74 54 78 49 62 59 42 43 36 58 76 63 67 47 40 69 51 71 52 72 45 65 56 38 74 54 78 49 62 59 42 43 36 58 76 30 31 27 26 32 28 32 28 32 27 31 29 25 33 29 33 28 30 30 26 26 25 29 33 39 40 32 29 41 34 42 34 42 31 39 36 28 43 35 44 33 38 37 30 31 28 36 44 47 49 37 33 50 39 51 40 52 36 48 43 32 53 42 56 38 46 45 34 35 31 44 55)) nil "Repetidor de serie de dyns (com multiplicador)") (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1090 361) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "Repetidor de serie de durs (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de durs (com multiplicador)" (quote ((om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 276 296) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de durs (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 336 234) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de durs (com multiplicador)" nil) (om-load-boxout "output" 0 (om-make-point 167 352) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_as_durs" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_as_durs" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_durs" 0 (om-make-point 5 45) "" "serie_de_durs" nil nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 2 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 370 380) nil (list (list 2240 2331 1673 175 2051 735 1302 364 1393 1862 1953 833 924 644 1771 1484 266 553 1022 2142 1113 1582 455 1204 1280 1332 956 100 1172 420 744 208 796 1064 1116 476 528 368 1012 848 152 316 584 1224 636 904 260 688 1280 1332 956 100 1172 420 744 208 796 1064 1116 476 528 368 1012 848 152 316 584 1224 636 904 260 688 1280 1332 956 100 1172 420 744 208 796 1064 1116 476 528 368 1012 848 152 316 584 1224 636 904 260 688 2240 2331 1673 175 2051 735 1302 364 1393 1862 1953 833 924 644 1771 1484 266 553 1022 2142 1113 1582 455 1204 2240 2331 1673 175 2051 735 1302 364 1393 1862 1953 833 924 644 1771 1484 266 553 1022 2142 1113 1582 455 1204 1920 1998 1434 150 1758 630 1116 312 1194 1596 1674 714 792 552 1518 1272 228 474 876 1836 954 1356 390 1032)) nil "Repetidor de serie de durs (com multiplicador)") (om-load-boxcall (quote abstraction) "Repetidor de serie de onsets (com multiplicador)" (om-load-patch-abs1 "Repetidor de serie de onsets (com multiplicador)" (quote ((om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 256 265) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 164 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "Lista_de_possiveis_coeficientes_para_os_onsets" 2 (om-make-point 500 62) "" "Lista_de_possiveis_coeficientes_para_os_onsets" nil nil) (om-load-boxin "no_de_repeticoes_da_serie" 1 (om-make-point 250 66) "" "no_de_repeticoes_da_serie" nil nil) (om-load-boxin "serie_de_onsets" 0 (om-make-point 5 45) "" "serie_de_onsets" nil nil) (om-load-boxwithed1 (quote box-with-win) "Repetidor de serie de onsets (com multiplicador)" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "coeficientes de onsets" nil))) (om-make-point 338 214) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 504 106) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 335 509) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 589 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 424 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 566 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 413 246) nil nil nil nil 1) (om-load-boxin "coeficientes de onsets" 1 (om-make-point 469 23) "" "coeficientes de onsets" nil nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 337 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 409 416) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 385 346) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 299 434) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 295) (om-make-point 207 43) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 190 153) nil nil nil nil 1) (om-load-boxin "serie_de_onsets" 0 (om-make-point 155 46) "" "serie_de_onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 355 586) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 255 586) nil nil nil 0)) (quote ((6 0 0 0 nil 0) (11 1 1 0 nil 0) (0 0 2 0 nil 0) (0 0 3 0 nil 0) (13 0 4 0 nil 0) (2 0 4 1 nil 0) (13 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 12 1 nil 0) (5 0 12 2 nil 0) (4 0 12 3 nil 0) (14 0 13 0 nil 0) (1 0 15 0 nil 0) (11 0 16 0 nil 0))) 1 "repetidor de serie de onsets (com multiplicador)" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 172) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 108 297) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 116 145) nil nil nil nil 1))) (quote ((5 0 0 0 nil 0) (7 0 1 0 nil 0) (6 0 5 0 nil 0) (2 0 5 1 nil 0) (8 0 6 0 nil 0) (3 0 6 1 nil 0) (0 0 7 1 nil 0) (4 0 8 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "serie_de_onsets" nil) (om-load-inputfun (quote input-funbox) "" "no_de_repeticoes_da_serie" nil) (om-load-inputfun (quote input-funbox) "" "Lista de possiveis coeficientes para os onsets" nil))) (om-make-point 164 358) nil (list (list 0 438 915 1833 2109 3069 3426 4224 4860 5418 5532 6531 6768 7527 7602 7758 8637 9234 10071 10749 11466 11862 12057 12372 12888 13180 13498 14110 14294 14934 15172 15704 16128 16500 16576 17242 17400 17906 17956 18060 18646 19044 19602 20054 20532 20796 20926 21136 21480 21772 22090 22702 22886 23526 23764 24296 24720 25092 25168 25834 25992 26498 26548 26652 27238 27636 28194 28646 29124 29388 29518 29728 30072 30510 30987 31905 32181 33141 33498 34296 34932 35490 35604 36603 36840 37599 37674 37830 38709 39306 40143 40821 41538 41934 42129 42444 42960 43836 44790 46626 47178 49098 49812 51408 52680 53796 54024 56022 56496 58014 58164 58476 60234 61428 63102 64458 65892 66684 67074 67704 68736 69612 70566 72402 72954 74874 75588 77184 78456 79572 79800 81798 82272 83790 83940 84252 86010 87204 88878 90234 91668 92460 92850 93480 94512 94658 94817 95123 95215 95535 95654 95920 96132 96318 96356 96689 96768 97021 97046 97098 97391 97590 97869 98095 98334 98466 98531 98636 98808)) nil "Repetidor de serie de onsets (com multiplicador)") (om-load-boxcomment "comment" (om-make-point 245 61) (quote "<= Lista com possíveis coeficientes para os onsets, durs e dyns das ocorrências da série") "" (om-make-point 924 251) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 834 255) (om-make-point 92 30) (list 2 3 4 5 6 7) "(2 3 4 5 6 7)" nil) (om-load-boxcomment "comment 3" (om-make-point 203 59) (quote "<= no. de repetições da série") "" (om-make-point 701 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 671 198) (om-make-point 27 30) 7 "7" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 20 472) (om-make-point 1164 184) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3550) (4950) (8000) (4250) (10600) (8900) (6450) (6100) (3800) (7900) (8950) (8800) (9600) (4500) (3150) (8250) (7450) (8150) (2750) (7800) (3900) (6850) (3500) (7250) (5950) (6150) (10400) (4250) (7000) (5300) (10050) (3700) (3800) (3100) (8950) (2800) (4800) (10500) (7950) (7050) (2650) (5750) (2750) (4200) (6300) (4450) (4700) (2450) (7150) (8550) (10400) (10250) (4600) (10100) (7650) (2500) (6200) (7900) (6550) (7600) (8400) (4500) (4350) (10650) (9850) (8150) (8750) (6600) (2700) (8050) (10700) (4850) (6050) (10700) (8050) (9900) (10200) (5150) (3350) (2650) (3450) (7950) (5700) (3600) (4000) (5350) (10300) (5000) (6100) (5250) (7700) (10600) (7850) (9200) (4950) (10750) (4850) (10700) (9250) (9900) (3000) (5150) (4550) (3850) (8250) (5550) (5700) (2400) (8800) (10150) (7900) (9800) (7300) (4050) (7700) (4600) (6650) (3200) (3750) (7150) (6050) (10700) (5650) (7500) (4200) (9950) (9350) (5050) (7050) (5550) (10500) (3600) (2800) (2950) (9100) (9800) (8500) (5250) (7700) (5800) (5450) (6800) (8550) (9550) (2450) (7100) (5650) (5100) (10200) (3950) (9350) (9850) (9450) (3150) (10500) (4800) (5200) (2950) (9100) (2600) (3700) (4050) (7700) (9400) (3050) (4400) (9750) (5950))) :lonset (quote (0 438 915 1833 2109 3069 3426 4224 4860 5418 5532 6531 6768 7527 7602 7758 8637 9234 10071 10749 11466 11862 12057 12372 12888 13180 13498 14110 14294 14934 15172 15704 16128 16500 16576 17242 17400 17906 17956 18060 18646 19044 19602 20054 20532 20796 20926 21136 21480 21772 22090 22702 22886 23526 23764 24296 24720 25092 25168 25834 25992 26498 26548 26652 27238 27636 28194 28646 29124 29388 29518 29728 30072 30510 30987 31905 32181 33141 33498 34296 34932 35490 35604 36603 36840 37599 37674 37830 38709 39306 40143 40821 41538 41934 42129 42444 42960 43836 44790 46626 47178 49098 49812 51408 52680 53796 54024 56022 56496 58014 58164 58476 60234 61428 63102 64458 65892 66684 67074 67704 68736 69612 70566 72402 72954 74874 75588 77184 78456 79572 79800 81798 82272 83790 83940 84252 86010 87204 88878 90234 91668 92460 92850 93480 94512 94658 94817 95123 95215 95535 95654 95920 96132 96318 96356 96689 96768 97021 97046 97098 97391 97590 97869 98095 98334 98466 98531 98636 99931)) :ldur (quote ((2240) (2331) (1673) (175) (2051) (735) (1302) (364) (1393) (1862) (1953) (833) (924) (644) (1771) (1484) (266) (553) (1022) (2142) (1113) (1582) (455) (1204) (1280) (1332) (956) (100) (1172) (420) (744) (208) (796) (1064) (1116) (476) (528) (368) (1012) (848) (152) (316) (584) (1224) (636) (904) (260) (688) (1280) (1332) (956) (100) (1172) (420) (744) (208) (796) (1064) (1116) (476) (528) (368) (1012) (848) (152) (316) (584) (1224) (636) (904) (260) (688) (1280) (1332) (956) (100) (1172) (420) (744) (208) (796) (1064) (1116) (476) (528) (368) (1012) (848) (152) (316) (584) (1224) (636) (904) (260) (688) (2240) (2331) (1673) (175) (2051) (735) (1302) (364) (1393) (1862) (1953) (833) (924) (644) (1771) (1484) (266) (553) (1022) (2142) (1113) (1582) (455) (1204) (2240) (2331) (1673) (175) (2051) (735) (1302) (364) (1393) (1862) (1953) (833) (924) (644) (1771) (1484) (266) (553) (1022) (2142) (1113) (1582) (455) (1204) (1920) (1998) (1434) (150) (1758) (630) (1116) (312) (1194) (1596) (1674) (714) (792) (552) (1518) (1272) (228) (474) (876) (1836) (954) (1356) (390) (1032))) :lvel (quote ((63) (67) (47) (40) (69) (51) (71) (52) (72) (45) (65) (56) (38) (74) (54) (78) (49) (62) (59) (42) (43) (36) (58) (76) (80) (84) (57) (47) (88) (62) (90) (64) (92) (54) (82) (70) (44) (95) (67) (100) (60) (77) (74) (49) (52) (42) (72) (98) (63) (67) (47) (40) (69) (51) (71) (52) (72) (45) (65) (56) (38) (74) (54) (78) (49) (62) (59) (42) (43) (36) (58) (76) (63) (67) (47) (40) (69) (51) (71) (52) (72) (45) (65) (56) (38) (74) (54) (78) (49) (62) (59) (42) (43) (36) (58) (76) (30) (31) (27) (26) (32) (28) (32) (28) (32) (27) (31) (29) (25) (33) (29) (33) (28) (30) (30) (26) (26) (25) (29) (33) (39) (40) (32) (29) (41) (34) (42) (34) (42) (31) (39) (36) (28) (43) (35) (44) (33) (38) (37) (30) (31) (28) (36) (44) (47) (49) (37) (33) (50) (39) (51) (40) (52) (36) (48) (43) (32) (53) (42) (56) (38) (46) (45) (34) (35) (31) (44) (55))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 0 223) (om-make-point 1024 324) 0 250 nil 127/100 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 36 8)) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 539 31) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 572 30) (om-make-point 41 30) 100 "100" nil) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "<= dyns mín. e máx.") "" (om-make-point 611 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= onsets e durs mín. e máx.") "" (om-make-point 325 2) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Series ALEA - de 1/2 a 1/8 de tom " (om-load-patch-abs1 "Series ALEA - de 1/2 a 1/8 de tom " (quote ((om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 717 446) nil nil nil nil 1) (om-load-boxin "input 4" 3 (om-make-point 794 244) "" nil nil nil) (om-load-boxin "input 3" 2 (om-make-point 744 244) "" nil nil nil) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 746 375) nil nil nil nil 1) (om-load-boxout "output 4" 3 (om-make-point 778 512) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 590 513) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 286 522) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 434 514) nil nil "&" nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 393 458) (om-make-point 113 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 485 411) nil nil nil nil 1) (om-load-boxin "onsetdurmax." 1 (om-make-point 571 219) "" "onsetdurmax." nil nil) (om-load-boxin "onsetdurmin." 0 (om-make-point 481 220) "" "onsetdurmin." nil nil) (om-load-boxout "output 3" 2 (om-make-point 680 533) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 2" 1 (om-make-point 122 532) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 47 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 333 231) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 242 327) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 274 280) (om-make-point 42 30) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 409 292) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 658 24) (om-make-point 28 30) 50 "50" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 332 169) nil nil nil (list (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 456 316) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 405 300) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 225 92) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 213 35) "" nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 402 163) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 133 127) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 383 410) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 126 319) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (4 1 1 0 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 ((om-make-point 229 92) (om-make-point 203 99) (om-make-point 157 110) (om-make-point 157 127)) 0) (0 0 6 0 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0))) 1 "omloop 4" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 521 330) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 454 335) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 186 466) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "fazedor de series em até 1/8 de tom" (om-load-patch-abs1 "fazedor de series em até 1/8 de tom" (quote ((om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 515 257) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 490 292) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 429 174) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 400 190) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 73 460) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 150 375) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 41 362) (om-make-point 27 30) nil "nil" nil) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 71 397) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 495 223) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 462 237) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 310 338) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote genfun) "ARITHM-SER 3" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 437 347) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM= 3" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 367 343) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 368 386) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 83 335) (om-make-point 67 43) nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 390 129) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 357 143) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 209 294) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote genfun) "ARITHM-SER 2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 327 272) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM= 2" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 257 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 258 311) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 31 197) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 162 193) (om-make-point 28 30) 11 "11" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 134 193) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 141 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 91 198) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 68 245) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 62 34) "" nil nil nil))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (16 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 4 0 nil 0) (14 0 5 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (22 0 9 0 nil 0) (8 0 9 1 nil 0) (23 0 11 0 nil 0) (1 0 11 1 nil 0) (10 0 12 0 nil 0) (27 0 12 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (26 0 14 0 nil 0) (20 0 14 1 nil 0) (13 0 14 2 nil 0) (22 0 16 0 nil 0) (15 0 16 1 nil 0) (23 0 18 0 nil 0) (3 0 18 1 nil 0) (17 0 19 0 nil 0) (27 0 19 1 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 0) (21 0 25 0 nil 0) (27 0 25 1 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 232 100) nil (list (list 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)) nil "fazedor de series em até 1/8 de tom") (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 589 20) (om-make-point 64 30) (list 2 1 0.5) "(2 1 0.5)" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 647 129) nil nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 581 56) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 455 66) nil nil "&" nil 1))) (quote ((3 0 0 0 nil 0) (16 0 3 0 nil 2) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (22 0 8 0 nil 0) (9 0 8 1 nil 0) (22 0 9 0 nil 0) (5 0 12 0 nil 0) (23 0 13 0 nil 0) (16 0 14 0 nil 0) (20 0 15 0 nil 0) (17 0 16 0 nil 0) (18 0 16 1 nil 0) (15 0 18 0 nil 0) (28 0 18 1 nil 0) (24 0 20 0 nil 0) (16 0 21 0 nil 2) (11 0 21 1 nil 0) (10 0 21 2 nil 0) (21 0 22 0 nil 0) (6 0 23 1 nil 0) (28 0 24 0 nil 0) (27 0 26 0 nil 0) (19 0 26 1 nil 0) (25 0 27 0 nil 0) (26 0 28 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 158 85) nil nil "&" "Series ALEA - de 1/2 a 1/8 de tom ") (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 286 3) (om-make-point 35 30) 333 "333" nil) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 253 4) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1082 147) (om-make-point 59 30) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1047 149) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1071 182) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1028 59) (om-make-point 126 67) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 952 7) (om-make-point 118 32) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1074 9) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1026 119) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1139 8) (om-make-point 23 28) 0 "0" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 2 171) (om-make-point 652 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6050) (7100) (6850) (6300) (6600) (6350) (6950) (6250) (7050) (6750) (6900) (6000) (6400) (6550) (6700) (6200) (6100) (6450) (6500) (7000) (6650) (6800) (6150) (7150))) :lonset (quote (0 146 305 611 703 1023 1142 1408 1620 1806 1844 2177 2256 2509 2534 2586 2879 3078 3357 3583 3822 3954 4019 4124 4296)) :ldur (quote ((320) (333) (239) (25) (293) (105) (186) (52) (199) (266) (279) (119) (132) (92) (253) (212) (38) (79) (146) (306) (159) (226) (65) (172))) :lvel (quote ((74) (80) (45) (32) (84) (51) (87) (54) (90) (41) (77) (61) (28) (93) (58) (100) (48) (71) (67) (35) (38) (25) (64) (97))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 0 223) (om-make-point 1024 324) 0 250 nil 127/100 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 8)) t nil nil nil))) (quote ((26 1 1 0 nil 0) (9 0 1 1 nil 0) (26 4 2 0 nil 0) (9 0 2 1 nil 0) (7 0 2 2 nil 0) (11 0 2 3 nil 0) (12 0 2 4 nil 0) (26 3 4 0 nil 0) (9 0 4 1 nil 0) (7 0 4 2 nil 0) (26 2 5 0 nil 0) (9 0 5 1 nil 0) (7 0 5 2 nil 0) (1 0 10 1 nil 0) (5 0 10 2 nil 0) (4 0 10 3 nil 0) (2 0 10 4 nil 0) (17 0 15 0 nil 0) (16 0 15 1 nil 0) (11 0 15 2 nil 0) (12 0 15 3 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (22 0 21 0 nil 0) (23 0 21 1 nil 0) (25 0 21 2 nil 0) (15 0 26 1 nil 0) (15 1 26 2 nil 0) (15 2 26 3 nil 0) (15 3 26 4 nil 0))) nil 6.0602))
