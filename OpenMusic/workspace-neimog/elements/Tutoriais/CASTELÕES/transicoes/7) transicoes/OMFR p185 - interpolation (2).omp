; OM File Header - Saved 2020/05/24 22:46:51
; (6.16 :patc (om-make-point 388 210) (om-make-point 15 25) (om-make-point 1265 686) "" 183 0 "2013/08/01 23:56:25" "2013/08/28 21:39:18")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "OMFR p185 - interpolation (2)" (quote ((om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 130 201) (om-make-point 42 30) 1999 "1999" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 55 212) (om-make-point 38 35) nil nil nil 1) (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "LCHAN" (list 1)))) (om-make-point 31 262) (om-make-point 117 133) (let ((thechord (make-instance (quote chord) :lmidic (quote (4277 4097 4251 4389 4185 6807)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 742 678) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 402 162) (om-make-point 42 30) 1999 "1999" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 310 159) (om-make-point 38 35) nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "LCHAN" (list 1)))) (om-make-point 318 203) (om-make-point 122 126) (let ((thechord (make-instance (quote chord) :lmidic (quote (8025 8079 7955 8025 7716 6167)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 742 678) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 422 7) (om-make-point 28 30) 10 "10" nil) (om-load-editor-box1 "BPC 2" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 268 50) (om-make-point 187 95) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0214197 1.7030922 2.4015186 3.1184242 4.476819 5.2391996)) (quote (4.014395 4.0413046 3.9794667 4.014728 3.8601623 3.0850563)) (quote bpc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 0 22) (om-make-point 1280 706))) t nil nil nil) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 189 11) (om-make-point 28 30) 10 "10" nil) (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 35 64) (om-make-point 164 105) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6281171 1.9093675 3.1541229 4.14202 5.9631333 6.760034)) (quote (2.139804 2.049638 2.1266873 2.1954668 2.093543 3.4051786)) (quote bpc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 0 22) (om-make-point 1280 706))) t nil nil nil) (om-load-boxcall (quote genfun) "INTERPOLATION" (quote interpolation) (quote ((om-load-inputfun (quote input-funbox) "begin list" "BEGIN" (list 1 7)) (om-load-inputfun (quote input-funbox) "end list" "END" (list 6 2)) (om-load-inputfun (quote input-funbox) "number of steps" "SAMPLES" 4) (om-load-inputfun (quote input-funbox) "curve" "CURVES" 1))) (om-make-point 125 418) (om-make-point 143 59) nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 441 348) (om-make-point 28 30) 11 "11" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 432 417) (om-make-point 32 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 2" (om-make-point 230 39) (quote "<- número de passos (ex.: acordes) na interpolação") "" (om-make-point 472 344) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 404 71) (quote "<- curva da interpolação (1 é um'interpolação linear, \"flat\", abaixo de 1 produzirá uma mudança lenta no início e rápida no final; acima de 1 produzirá uma mudança rápida no início e lenta no final)") "" (om-make-point 465 411) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 23 510) (om-make-point 597 124) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4277 4097 4251 4389 4185 6807) (4744 4593 4712 4842 4625 6727) (5151 5025 5114 5237 5008 6658) (5538 5437 5497 5612 5373 6592) (5913 5835 5868 5976 5726 6528) (6279 6224 6229 6331 6071 6465) (6638 6605 6584 6679 6409 6404) (6991 6981 6933 7022 6742 6344) (7340 7351 7278 7360 7070 6284) (7684 7717 7618 7694 7395 6225) (8025 8079 7955 8025 7716 6167))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000)) :ldur (quote ((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 1015 476) 0 1000 nil 57/100 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (quote ((9 2 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 1 nil 0) (7 2 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 1 nil 0) (6 0 7 3 nil 0) (8 0 9 3 nil 0) (2 1 10 0 nil 0) (5 1 10 1 nil 0) (11 0 10 2 nil 0) (12 0 10 3 nil 0) (10 0 15 1 nil 0))) nil 6.0602))
