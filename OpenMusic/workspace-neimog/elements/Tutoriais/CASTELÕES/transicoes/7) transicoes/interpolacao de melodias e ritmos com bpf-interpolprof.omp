; OM File Header - Saved 2013/08/28 21:44:30
; (6.0602 :patc (om-make-point 238 468) (om-make-point 44 22) (om-make-point 1150 653) "" 183 0 "2013/08/01 19:51:05" "2013/08/28 20:51:56")
; End File Header
(in-package :om)(load-lib-for (quote ("Profile")))(setf *om-current-persistent* (om-load-patch1 "interpolacao de melodias e ritmos com bpf-interpolprof" (quote ((om-load-boxcomment "comment" (om-make-point 157 72) (quote "<= quantização: 2 = 1/10 de seg.; 4 = 1/20 de seg.; 8 = 1/40 de seg.") "" (om-make-point 823 164) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 801 167) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "X->DX 3" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 458 217) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 733 430) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 661 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X 2" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 442 409) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 52 510) (om-make-point 1044 123) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600) (4800) (5500) (6000) (6400) (6700) (7000) (7200) (7400) (7600) (7800) (7900) (8000) (8200) (8300) (8400) (4000) (5100) (5700) (6200) (6500) (6800) (7100) (7200) (7400) (7500) (7700) (7800) (7800) (8000) (8000) (8000) (4500) (5400) (6000) (6400) (6700) (6900) (7100) (7200) (7400) (7500) (7600) (7600) (7600) (7700) (7700) (7500) (4900) (5800) (6200) (6500) (6800) (7000) (7200) (7300) (7300) (7400) (7500) (7500) (7500) (7500) (7300) (7100) (5300) (6100) (6500) (6700) (6900) (7100) (7200) (7300) (7300) (7400) (7400) (7400) (7300) (7200) (7000) (6700) (5800) (6400) (6700) (6900) (7100) (7200) (7300) (7300) (7300) (7300) (7300) (7200) (7100) (7000) (6700) (6200) (6200) (6700) (7000) (7100) (7200) (7300) (7300) (7300) (7300) (7300) (7200) (7100) (6900) (6700) (6400) (5800) (6700) (7000) (7200) (7300) (7400) (7400) (7400) (7300) (7300) (7200) (7100) (6900) (6700) (6500) (6100) (5300) (7100) (7300) (7500) (7500) (7500) (7500) (7400) (7300) (7300) (7200) (7000) (6800) (6500) (6200) (5800) (4900) (7500) (7700) (7700) (7600) (7600) (7600) (7500) (7400) (7200) (7100) (6900) (6700) (6400) (6000) (5400) (4500))) :lonset (quote (0 160 280 400 500 620 740 840 920 980 1040 1080 1120 1160 1180 1200 1340 1460 1560 1660 1760 1860 1940 2020 2080 2140 2180 2220 2260 2280 2320 2440 2540 2640 2740 2840 2940 3020 3100 3160 3220 3260 3320 3380 3420 3460 3580 3680 3780 3880 3960 4060 4140 4220 4280 4360 4420 4480 4540 4580 4640 4740 4820 4900 4980 5060 5160 5240 5320 5400 5480 5540 5600 5660 5720 5780 5880 5960 6040 6120 6200 6280 6360 6440 6520 6600 6660 6740 6820 6880 6960 7040 7100 7180 7260 7320 7400 7480 7560 7640 7720 7800 7880 7960 8040 8140 8200 8260 8320 8380 8440 8520 8600 8680 8760 8860 8940 9020 9100 9180 9280 9340 9380 9440 9500 9560 9640 9700 9780 9860 9960 10040 10140 10240 10340 10460 10500 10540 10600 10660 10700 10760 10820 10900 10980 11080 11180 11280 11380 11480 11600 11720 11840 11960 12080 12200 12320 12440 12560 12680 13680)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 254 324) (om-make-point 999 309) 0 1000 nil 29/50 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 185 34) (quote "<= no. de interpolações") "" (om-make-point 279 192) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 676 365) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 579 163) nil nil nil nil 1) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 728 204) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) (quote (89 89 203 208 181 283 303 378 461 564 550 544 561 608 756)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 533 216) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) (quote (756 608 561 544 550 564 461 378 303 283 181 208 203 89 89)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 636 153) nil nil nil nil 1) (om-load-boxcall (quote genfun) "INTERPOL-PROF 2" (quote |Profile|::interpol-prof) (quote ((om-load-inputfun (quote input-funbox) "" "PROF1" (list 6000 6600 7100)) (om-load-inputfun (quote input-funbox) "" "PROF2" (list 4200 3200 5000 6400 7200)) (om-load-inputfun (quote input-funbox) "" "STEPS" 10) (om-load-inputfun (quote input-funbox) "" "NBR-N" nil) (om-load-inputfun (quote input-funbox) "" "TAB" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "NOTE?" nil) (om-load-inputfun (quote input-funbox) "" "PRECIS" 20) (om-load-inputfun (quote input-funbox) "" "APPROX" 2))) (om-make-point 612 299) (om-make-point 335 59) nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 87 177) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 155 58) (quote "<= approx.: 2 = semitom; 1/4 = quarto de tom; 8 = 1/8") "" (om-make-point 291 284) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 399 74) (quote "Cria uma interpolação entre uma melodia e seu contorno invertido (incluindo o ritmo)") "" (om-make-point 529 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 360 50) (quote "<= detalhe importante: o onset a mais que sobra de um chord-seq - é preciso retirá-lo com um \"butlast\"!") "" (om-make-point 272 108) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 230 112) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 304 424) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 273 287) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "INTERPOL-PROF" (quote |Profile|::interpol-prof) (quote ((om-load-inputfun (quote input-funbox) "" "PROF1" (list 6000 6600 7100)) (om-load-inputfun (quote input-funbox) "" "PROF2" (list 4200 3200 5000 6400 7200)) (om-load-inputfun (quote input-funbox) "" "STEPS" 10) (om-load-inputfun (quote input-funbox) "" "NBR-N" nil) (om-load-inputfun (quote input-funbox) "" "TAB" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "NOTE?" nil) (om-load-inputfun (quote input-funbox) "" "PRECIS" 20) (om-load-inputfun (quote input-funbox) "" "APPROX" 2))) (om-make-point 0 367) (om-make-point 335 59) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 49 25) (quote "<=A") "" (om-make-point 399 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 118 108) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 64 0) (om-make-point 335 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600) (4800) (5500) (6000) (6400) (6700) (7000) (7200) (7400) (7600) (7800) (7900) (8000) (8200) (8300) (8400))) :lonset (quote (0 756 1364 1925 2469 3019 3583 4044 4422 4725 5008 5189 5397 5600 5689 5778 6778)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 167/100 nil 1000 0 (om-make-point 837 375) (om-make-point 0 0) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 253 197) (om-make-point 28 30) 10 "10" nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 20 240) (om-make-point 105 48) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500)) (quote (8400 8300 8200 8000 7900 7800 7600 7400 7200 7000 6700 6400 6000 5500 4800 3600)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1019 519) (om-make-point 150 100) nil)) t nil nil nil))) (quote ((18 0 2 0 nil 0) (8 0 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 1 nil 0) (19 0 6 1 nil 0) (5 0 6 2 nil 0) (13 0 8 0 nil 0) (18 0 9 0 nil 0) (12 0 10 2 nil 0) (2 0 11 2 nil 0) (9 0 12 0 nil 0) (11 2 13 0 nil 0) (10 2 13 1 nil 0) (25 0 13 2 ((om-make-point 265 225) (om-make-point 444 223) (om-make-point 443 293) (om-make-point 723 299)) 2) (1 0 13 7 nil 0) (23 0 14 0 nil 0) (24 2 18 0 nil 0) (21 0 19 0 nil 0) (23 0 21 0 ((om-make-point 129 165) (om-make-point 8 169) (om-make-point 5 322) (om-make-point 37 367)) 0) (26 2 21 1 nil 0) (25 0 21 2 ((om-make-point 265 225) (om-make-point 181 262) (om-make-point 180 334) (om-make-point 111 367)) 2) (20 0 21 7 nil 0) (24 1 23 0 nil 0) (14 0 26 2 nil 0))) nil 6.0602))
