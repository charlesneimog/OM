; OM File Header - Saved 2013/08/28 21:44:30
; (6.0602 :patc (om-make-point 172 10) (om-make-point 14 50) (om-make-point 1266 680) "" 183 0 "2013/08/01 19:46:00" "2013/08/28 21:21:39")
; End File Header
(in-package :om)(load-lib-for (quote ("Profile")))(setf *om-current-persistent* (om-load-patch1 "OMCB 2 p 61 - bpf-interpolx 3 - interpolacao entre 2 melodias com no. fixo de elementos por passo!" (quote ((om-load-boxcomment "comment" (om-make-point 166 38) (quote "<= no. de itens por passo") nil (om-make-point 36 145) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= B") nil (om-make-point 613 20) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 262 154) (quote "=> O no. de itens por passo é fixo (determinado no 3o input do bpf-interpolx). Assim, se as 2 melodias não tiverem o mesmo número de notas, ocorrerão imperfeições do tipo: inserção ou retirada de notas seja nos passos (em relação à melodia inicial) seja na chegada (em relação à melodia que DEVERIA ser a da chegada)") "" (om-make-point 922 274) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 9 147) (om-make-point 28 30) 16 "16" nil) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 583 108) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST 2" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 422 72) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 537 95) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 496 98) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 484 0) (om-make-point 127 92) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5900) (5700) (5600) (5500) (5400) (5300) (5200) (5100) (5000) (4900) (4800) (4700) (4600) (4500) (4400))) :lonset (quote (0 100 221 397 672 1098 1569 2058 2611 3173 3836 4525 5270 6133 7042 8028 9028)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 101/100 nil 1000 0 (om-make-point 677 337) (om-make-point 293 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 17 264) (om-make-point 202 81) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (6900) (7100) (7300) (7500))) :lonset (quote (0 223 583 1098 1958 2973 3973)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 677 337) (om-make-point 293 -562) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxout "output 4" 3 (om-make-point 606 358) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "saida_durs" nil) (om-load-boxout "output 3" 2 (om-make-point 353 357) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "bpf_onsets" nil) (om-load-boxin "dur_max" 5 (om-make-point 792 31) "" "dur_max" nil nil) (om-load-boxin "dur_min" 4 (om-make-point 685 33) "" "dur_min" nil nil) (om-load-boxin "onset_max" 3 (om-make-point 494 21) "" "onset_max" nil nil) (om-load-boxin "onset_min" 2 (om-make-point 399 22) "" "onset_min" nil nil) (om-load-boxout "output 2" 1 (om-make-point 178 359) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "saida_onsets" nil) (om-load-boxin "interpol_onsets" 1 (om-make-point 296 7) "" "interpol_onsets" nil nil) (om-load-boxout "output" 0 (om-make-point 50 316) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "saida_alturas" nil) (om-load-boxin "interpol_alturas" 0 (om-make-point 104 13) "" "interpol_alturas" nil nil) (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 223 59) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 248 130) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 23 67) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 27 170) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 365 133) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 227 220) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 78 216) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 193 276) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 429 217) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 715 157) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 566 174) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 601 274) nil nil nil nil 1))) (quote ((21 0 0 0 nil 0) (14 0 1 0 nil 0) (17 0 6 0 nil 0) (16 0 8 0 nil 0) (7 0 10 0 nil 0) (10 0 11 0 nil 0) (9 0 12 0 nil 0) (12 0 13 0 nil 0) (11 0 14 0 nil 0) (18 0 15 0 nil 0) (13 0 16 0 nil 0) (15 0 17 1 nil 0) (14 0 18 0 nil 0) (5 0 18 1 nil 0) (4 0 18 2 nil 0) (14 0 19 0 nil 2) (3 0 19 1 nil 0) (2 0 19 2 nil 0) (19 0 20 0 nil 0) (20 0 21 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "interpol_alturas" nil) (om-load-inputfun (quote input-funbox) "" "interpol_onsets" nil) (om-load-inputfun (quote input-funbox) "" "onset_min" nil) (om-load-inputfun (quote input-funbox) "" "onset_max" nil) (om-load-inputfun (quote input-funbox) "" "dur_min" nil) (om-load-inputfun (quote input-funbox) "" "dur_max" nil))) (om-make-point 400 306) (om-make-point 130 67) (list (list 3600.0 4211.43 4816.58 5260.07 5657.58 6000.74 6283.97 6524.04 6733.3003 6938.19 7116.7 7302.22 7532.28 7799.72 7997.98 8400.0 4466.8457 4694.812 5029.6436 5271.7905 5486.902 5671.227 5818.138 5942.3394 6047.781 6151.759 6240.3916 6336.5034 6461.682 6611.264 6718.0454 6955.2573 4527.474 4728.6206 5044.546 5272.6104 5474.9644 5648.18 5785.557 5901.6543 5999.834 6096.755 6179.101 6268.9595 6386.803 6528.141 6628.5254 6854.2095 4916.2515 4945.416 5140.1035 5277.8667 5398.4155 5500.395 5576.6333 5640.7637 5692.381 5744.043 5786.0796 5835.839 5906.6436 5995.123 6054.4795 6206.2476 4985.2803 4983.908 5157.0703 5278.8003 5384.824 5474.155 5539.538 5594.442 5637.7925 5681.418 5716.2974 5758.9375 5821.3897 5900.484 5952.556 6091.2 5255.874 5134.801 5223.58 5282.459 5331.545 5371.294 5394.124 5412.8584 5423.801 5435.9263 5442.749 5457.4795 5487.1924 5529.496 5553.0127 5640.2095 5504.2515 5273.304 5284.6294 5285.817 5282.6406 5276.879 5260.6494 5246.184 5227.3784 5210.59 5191.66 5180.7725 5180.4346 5188.968 5186.2734 5226.2476 5757.1426 5414.3247 5346.7876 5289.2363 5232.847 5180.747 5124.7485 5076.48 5027.3867 4981.158 4936.0083 4899.037 4868.1006 4842.25 4812.868 4804.7617 5885.715 5486.0205 5378.3897 5290.9746 5207.532 5131.8735 5055.656 4990.2017 4925.7095 4864.514 4806.033 4755.801 4709.3086 4665.9775 4623.0273 4590.476 6000.0 5549.75 5406.48 5292.52 5185.03 5088.43 4994.24 4913.51 4835.33 4760.83 4690.5 4628.48 4568.16 4509.29 4454.2803 4400.0) (list 0 248 444 622 792 963 1138 1291 1413 1507 1583 1642 1679 1723 1760 1760 1760 1920 2050 2174 2305 2454 2615 2766 2902 3025 3143 3259 3365 3484 3612 3723 3843 3997 4122 4242 4370 4517 4677 4827 4964 5089 5210 5330 5441 5565 5699 5817 5946 6060 6155 6251 6362 6499 6653 6802 6945 7083 7222 7367 7509 7667 7842 8010 8193 8300 8390 8482 8590 8726 8878 9027 9171 9311 9453 9603 9750 9914 10097 10274 10466 10546 10615 10690 10785 10914 11062 11210 11359 11508 11663 11831 12000 12188 12399 12610 12840 12894 12944 13004 13088 13211 13355 13502 13655 13812 13979 14163 14352 14561 14798 15041 15305 15334 15364 15409 15482 15598 15738 15885 16042 16208 16387 16587 16796 17027 17291 17566 17865 17881 17901 17938 18005 18118 18256 18402 18561 18731 18916 19125 19344 19586 19864 20156 20473 20477 20488 20518 20580 20690 20826 20972 21133 21307 21498 21714 21942 22194 22484 22790 23123) (list 756.0 617.87 567.27 547.4 548.4 559.33 502.2 416.72998 343.0 295.0 248.99999 188.2 207.0 187.8 88.99999 88.99999 519.0622 437.902 423.30136 441.86157 489.64594 522.00867 494.83182 455.16013 420.36597 406.0285 401.66232 374.4743 409.84186 433.88663 387.02515 412.98355 502.49033 425.31473 413.232 434.48 485.5366 519.3984 494.31647 457.84802 425.7771 413.79398 412.33978 387.50262 424.02896 451.0984 407.8695 435.64352 396.22455 344.5997 348.66257 387.1464 459.18558 502.6599 491.01184 475.0838 460.47546 463.5899 480.80832 471.04596 515.0028 561.46735 541.5327 580.949 377.3568 330.26855 337.19806 378.7422 454.5069 499.68793 490.4251 478.14407 466.63623 472.43124 492.96512 485.8793 531.1555 581.06366 565.265 606.7484 303.39438 274.0898 292.25687 345.79733 436.16623 488.0377 488.12506 490.1404 490.7868 507.0899 540.6201 544.0267 594.47455 657.882 658.29645 707.88294 235.50457 222.52359 251.00556 315.55737 419.33142 477.34406 486.01386 501.15183 512.95447 538.9029 584.3625 597.39985 652.59485 728.3931 743.6896 800.714 166.38092 170.02017 209.00449 284.76785 402.19064 466.456 483.8643 512.36335 535.525 571.29407 628.8998 651.743 711.7714 800.18586 830.6347 895.2322 131.2381 143.32715 187.65094 269.1143 393.47617 460.92047 482.77142 518.06336 547.0 587.76197 651.54285 679.3714 741.85706 836.6857 874.8381 943.2857 100.0 119.600006 168.66999 255.2 385.73 456.0 481.8 523.13 557.2 602.4 671.67 703.93 768.6 869.13 914.12995 985.99994) (list 658 301 475 831 560 372 667 517 764 377 520 600 376 638 536 377 644 486 349 307 113 493 365 287 643 798 374 954 426 402 170 402 567 514 349 427 698 153 199 612 429 474 523 637 201 466 563 583 799 84 295 133 461 491 401 454 750 510 445 459 466 378 238 453 429 497 479 226 545 246 419 109 636 560 400 271 516 423 873 249 464 132 384 473 435 348 457 574 456 735 462 206 534 404 25 303 838 922 456 435 132 693 112 720 155 737 702 356 471 25 474 588 506 451 58 523 365 549 488 524 349 440 901 578 461 71 462 496 447 388 879 485 409 432 370 184 37 1000 442 389 335 448 304 539 452 460 424 258 381 422 221 391 359 385 340 391 492 543 459 338)) nil nil) (om-load-boxcomment "comment" (om-make-point 49 25) (quote "<=A") "" (om-make-point 396 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "X->DX 3" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 750 176) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 558 182) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "<= visual da interpol. dos onsets") "" (om-make-point 772 367) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= visual da interpol. das alturas") "" (om-make-point 182 380) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 9 366) (om-make-point 170 76) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700)) (quote (3600 4317 4970 5490 5895 6246 6532 6777 7014 7212 7464 7774 8025 8410 8455 8500 5101 5585 6024 6267 6471 6619 6740 6849 6941 7004 7091 7198 7248 7356 7187 6999 5687 6079 6435 6570 6695 6765 6822 6878 6913 6922 6945 6974 6946 6945 6693 6413 6090 6419 6718 6778 6850 6865 6878 6897 6893 6867 6845 6819 6737 6662 6353 6010 6468 6739 6983 6974 6994 6959 6930 6915 6875 6814 6751 6674 6542 6397 6033 5632 6763 6988 7190 7126 7108 7032 6971 6930 6861 6773 6678 6561 6389 6190 5784 5337 7057 7237 7397 7279 7221 7105 7012 6944 6846 6732 6604 6448 6237 5983 5535 5043 7352 7486 7604 7431 7334 7179 7053 6958 6832 6691 6531 6335 6084 5776 5286 4748 7653 7740 7815 7587 7449 7253 7095 6973 6818 6650 6456 6220 5928 5565 5032 4447 7969 8007 8037 7751 7570 7332 7138 6988 6802 6606 6378 6099 5765 5343 4765 4131 8175 8181 8182 7857 7649 7383 7167 6998 6792 6577 6327 6020 5658 5198 4591 3925 8393 8365 8335 7970 7733 7437 7197 7009 6782 6547 6272 5936 5546 5045 4407 3707 8500 8455 8410 8025 7774 7464 7212 7014 6777 6532 6246 5895 5490 4970 4317 3600)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1023 398))) t nil nil nil) (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 868 19) (om-make-point 80 75) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) (quote (100 121 176 275 426 471 489 553 562 663 689 745 863 909 986)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 345 36) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 787 23) (om-make-point 74 63) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) (quote (756 608 561 544 550 564 461 378 303 283 181 208 203 89 89)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "BPF-INTERPOLX 2" (quote |Profile|::bpf-interpolx) (quote ((om-load-inputfun (quote input-funbox) "" "BPF1" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "BPF2" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "ECHANTILLONS" 16) (om-load-inputfun (quote input-funbox) "" "APPROX" 30) (om-load-inputfun (quote input-funbox) "" "STEPS" 10) (om-load-inputfun (quote input-funbox) "" "TAB" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfunmenu1 (quote input-funmenu) "" "MODE" 2 (list (list "bpf" 1) (list "list" 2))))) (om-make-point 850 185) (om-make-point 150 59) nil nil nil 1) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 566 361) (om-make-point 202 70) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700)) (quote (756 608 561 544 550 564 461 378 303 283 181 208 203 89 89 1000 831 449 416 440 445 447 406 355 326 338 298 313 307 234 248 925 860 387 360 399 404 401 385 346 335 359 344 354 348 290 310 896 880 344 321 371 376 369 371 340 341 373 376 382 376 329 353 876 899 304 285 344 350 340 357 334 347 387 405 408 403 365 393 857 913 273 256 324 329 317 346 330 351 398 428 429 423 394 424 843 928 242 228 303 309 294 335 325 356 409 451 449 444 422 455 828 943 211 200 283 288 271 325 321 360 419 474 470 464 450 486 813 958 179 171 262 267 247 314 316 365 430 498 491 485 479 518 798 974 145 140 240 245 222 302 311 370 442 523 513 507 510 552 782 984 123 120 226 231 206 295 308 373 449 539 527 521 530 574 772 995 100 99 210 215 189 287 305 376 457 556 543 537 551 597 761 1000 89 89 203 208 181 283 303 378 461 564 550 544 561 608 756)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1023 398))) t nil nil nil) (om-load-boxcomment "comment 2" (om-make-point 140 25) (quote "<= durs min. e max.") "" (om-make-point 607 280) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 565 281) (om-make-point 42 30) 1000 "1000" nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 534 281) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 449 9) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 240 121) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 64 0) (om-make-point 333 101) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600) (4800) (5500) (6000) (6400) (6700) (7000) (7200) (7400) (7600) (7800) (7900) (8000) (8200) (8300) (8400))) :lonset (quote (0 756 1364 1925 2469 3019 3583 4044 4422 4725 5008 5189 5397 5600 5689 5778 6778)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 837 375) 0 1000 nil 9/5 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 172 27) (quote "<= onsets min. e max.") "" (om-make-point 521 251) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 147 69) (quote "<= perfil da interpolação (linear, exponencial, etc.)") "" (om-make-point 1097 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 482 253) (om-make-point 35 30) 333 "333" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 457 253) (om-make-point 21 30) 0 "0" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 28 459) (om-make-point 1164 120) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600) (4211) (4817) (5260) (5658) (6001) (6284) (6524) (6733) (6938) (7117) (7302) (7532) (7800) (7998) (8400) (4467) (4695) (5030) (5272) (5487) (5671) (5818) (5942) (6048) (6152) (6240) (6337) (6462) (6611) (6718) (6955) (4527) (4729) (5045) (5273) (5475) (5648) (5786) (5902) (6000) (6097) (6179) (6269) (6387) (6528) (6629) (6854) (4916) (4945) (5140) (5278) (5398) (5500) (5577) (5641) (5692) (5744) (5786) (5836) (5907) (5995) (6054) (6206) (4985) (4984) (5157) (5279) (5385) (5474) (5540) (5594) (5638) (5681) (5716) (5759) (5821) (5900) (5953) (6091) (5256) (5135) (5224) (5282) (5332) (5371) (5394) (5413) (5424) (5436) (5443) (5457) (5487) (5529) (5553) (5640) (5504) (5273) (5285) (5286) (5283) (5277) (5261) (5246) (5227) (5211) (5192) (5181) (5180) (5189) (5186) (5226) (5757) (5414) (5347) (5289) (5233) (5181) (5125) (5076) (5027) (4981) (4936) (4899) (4868) (4842) (4813) (4805) (5886) (5486) (5378) (5291) (5208) (5132) (5056) (4990) (4926) (4865) (4806) (4756) (4709) (4666) (4623) (4590) (6000) (5550) (5406) (5293) (5185) (5088) (4994) (4914) (4835) (4761) (4690) (4628) (4568) (4509) (4454) (4400))) :lonset (quote (0 248 444 622 792 963 1138 1291 1413 1507 1583 1642 1679 1723 1760 1760 1760 1920 2050 2174 2305 2454 2615 2766 2902 3025 3143 3259 3365 3484 3612 3723 3843 3997 4122 4242 4370 4517 4677 4827 4964 5089 5210 5330 5441 5565 5699 5817 5946 6060 6155 6251 6362 6499 6653 6802 6945 7083 7222 7367 7509 7667 7842 8010 8193 8300 8390 8482 8590 8726 8878 9027 9171 9311 9453 9603 9750 9914 10097 10274 10466 10546 10615 10690 10785 10914 11062 11210 11359 11508 11663 11831 12000 12188 12399 12610 12840 12894 12944 13004 13088 13211 13355 13502 13655 13812 13979 14163 14352 14561 14798 15041 15305 15334 15364 15409 15482 15598 15738 15885 16042 16208 16387 16587 16796 17027 17291 17566 17865 17881 17901 17938 18005 18118 18256 18402 18561 18731 18916 19125 19344 19586 19864 20156 20473 20477 20488 20518 20580 20690 20826 20972 21133 21307 21498 21714 21942 22194 22484 22790 23128)) :ldur (quote ((658) (301) (475) (831) (560) (372) (667) (517) (764) (377) (520) (600) (376) (638) (536) (377) (644) (486) (349) (307) (113) (493) (365) (287) (643) (798) (374) (954) (426) (402) (170) (402) (567) (514) (349) (427) (698) (153) (199) (612) (429) (474) (523) (637) (201) (466) (563) (583) (799) (84) (295) (133) (461) (491) (401) (454) (750) (510) (445) (459) (466) (378) (238) (453) (429) (497) (479) (226) (545) (246) (419) (109) (636) (560) (400) (271) (516) (423) (873) (249) (464) (132) (384) (473) (435) (348) (457) (574) (456) (735) (462) (206) (534) (404) (25) (303) (838) (922) (456) (435) (132) (693) (112) (720) (155) (737) (702) (356) (471) (25) (474) (588) (506) (451) (58) (523) (365) (549) (488) (524) (349) (440) (901) (578) (461) (71) (462) (496) (447) (388) (879) (485) (409) (432) (370) (184) (37) (1000) (442) (389) (335) (448) (304) (539) (452) (460) (424) (258) (381) (422) (221) (391) (359) (385) (340) (391) (492) (543) (459) (338))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 126 26) (om-make-point 1024 292) 0 1000 nil 141/50 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 992 54) (om-make-point 104 72) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 27 133 189 345 432 564 654 707 781 842 938 962 996 1044 1098)) (quote (0 4 8 6 12 10 15 14 17 16 19 18 20 20 21 21)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 487 106) (om-make-point 655 335))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 218 37) (quote "<= no. de passos da interpolação") "" (om-make-point 993 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 966 9) (om-make-point 27 30) 8 "8" nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 706 117) (om-make-point 105 48) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 221 397 672 1098 1569 2058 2611 3173 3836 4525 5270 6133 7042 8028)) (quote (6000 5900 5700 5600 5500 5400 5300 5200 5100 5000 4900 4800 4700 4600 4500 4400)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 314 116) (om-make-point 76 51) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 756 1364 1925 2469 3019 3583 4044 4422 4725 5008 5189 5397 5600 5689 5778)) (quote (3600 4800 5500 6000 6400 6700 7000 7200 7400 7600 7800 7900 8000 8200 8300 8400)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "BPF-INTERPOLX" (quote |Profile|::bpf-interpolx) (quote ((om-load-inputfun (quote input-funbox) "" "BPF1" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "BPF2" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "ECHANTILLONS" 16) (om-load-inputfun (quote input-funbox) "" "APPROX" 32) (om-load-inputfun (quote input-funbox) "" "STEPS" 10) (om-load-inputfun (quote input-funbox) "" "TAB" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfunmenu1 (quote input-funmenu) "" "MODE" 2 (list (list "bpf" 1) (list "list" 2))))) (om-make-point 100 208) (om-make-point 301 59) nil nil nil 1))) (quote ((6 0 4 0 nil 0) (24 0 5 0 nil 0) (8 2 6 0 nil 0) (8 1 7 0 nil 0) (37 0 10 0 nil 0) (19 0 10 1 ((om-make-point 923 242) (om-make-point 436 246) (om-make-point 438 271) (om-make-point 438 306)) 0) (30 0 10 2 nil 0) (29 0 10 3 nil 0) (23 0 10 4 nil 0) (22 0 10 5 nil 0) (35 1 12 0 nil 2) (36 1 13 0 nil 2) (10 0 16 2 nil 0) (12 0 17 2 ((om-make-point 770 233) (om-make-point 842 233) (om-make-point 868 17) (om-make-point 916 14) (om-make-point 916 19)) 2) (13 0 18 2 ((om-make-point 578 239) (om-make-point 699 238) (om-make-point 702 20) (om-make-point 832 18) (om-make-point 832 23)) 2) (18 0 19 0 nil 0) (17 0 19 1 nil 0) (3 0 19 2 nil 3) (34 0 19 4 nil 0) (32 0 19 5 nil 0) (10 2 20 2 ((om-make-point 476 371) (om-make-point 489 409) (om-make-point 551 356) (om-make-point 626 356) (om-make-point 686 361)) 2) (26 2 24 0 ((om-make-point 173 99) (om-make-point 287 109) (om-make-point 352 28) (om-make-point 422 11) (om-make-point 462 9)) 1) (26 1 25 0 nil 0) (10 0 31 1 nil 0) (10 1 31 2 nil 0) (10 3 31 3 nil 0) (4 0 35 1 nil 0) (7 0 35 2 nil 0) (5 0 36 1 nil 0) (25 0 36 2 nil 0) (36 0 37 0 nil 0) (35 0 37 1 nil 0) (3 0 37 2 nil 3) (34 0 37 4 ((om-make-point 978 37) (om-make-point 978 123) (om-make-point 291 193) (om-make-point 290 208)) 2) (32 0 37 5 nil 0))) nil 6.0602))
