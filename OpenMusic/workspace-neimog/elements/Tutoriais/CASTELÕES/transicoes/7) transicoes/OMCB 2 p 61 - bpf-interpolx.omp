; OM File Header - Saved 2013/08/28 21:44:30
; (6.0602 :patc (om-make-point 172 10) (om-make-point 11 22) (om-make-point 1109 682) "" 183 0 "2013/08/01 19:44:29" "2013/08/28 21:14:06")
; End File Header
(in-package :om)(load-lib-for (quote ("Profile")))(setf *om-current-persistent* (om-load-patch1 "OMCB 2 p 61 - bpf-interpolx" (quote ((om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 508 392) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 516 331) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 5" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 812 355) nil nil nil nil 1) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 956 358) (om-make-point 154 63) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900)) (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961 0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1023 398))) t nil nil nil) (om-load-boxcomment "comment 2" (om-make-point 172 27) (quote "<= durs min. e max.") "" (om-make-point 723 289) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 683 291) (om-make-point 42 30) 1000 "1000" nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 652 291) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote genfun) "OM-SCALE 3" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 622 331) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X 2" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 514 131) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 508 81) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 525 17) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 107 305) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 114 245) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 437 36) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 180 121) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 62 236) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 76 140) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 63 0) (om-make-point 335 99) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4400) (6000) (4900) (6400) (5300) (6800) (7900) (7500) (8600) (9000) (9100) (8100))) :lonset (quote (0 556 1264 1625 2069 2319 2583 2944 3122 3625 3908 3961 4961)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 837 375) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 172 27) (quote "<= onsets min. e max.") "" (om-make-point 540 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 265 55) (quote "<= perfil da interpolação (linear, exponencial, etc.)") "" (om-make-point 830 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 505 267) (om-make-point 35 30) 333 "333" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 467 265) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 460 325) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 273 366) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 157 382) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 379 344) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 388 258) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 32 348) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 30 457) (om-make-point 1096 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4400) (5992) (5154) (6336) (6122) (7721) (8764) (9100) (7663) (7110) (4646) (6144) (5513) (6557) (6267) (7575) (8543) (8741) (7511) (6864) (4646) (6144) (5513) (6557) (6267) (7575) (8543) (8741) (7511) (6864) (5030) (6380) (6071) (6900) (6493) (7349) (8200) (8183) (7275) (6480) (4646) (6144) (5513) (6557) (6267) (7575) (8543) (8741) (7511) (6864) (4893) (6296) (5871) (6778) (6412) (7430) (8322) (8383) (7359) (6617) (4893) (6296) (5871) (6778) (6412) (7430) (8322) (8383) (7359) (6617) (5385) (6600) (6589) (7219) (6703) (7139) (7881) (7665) (7056) (6125) (6316) (7174) (7944) (8053) (7252) (6590) (7047) (6310) (6482) (5194) (7110) (7663) (9100) (8764) (7721) (6122) (6336) (5154) (5992) (4400))) :lonset (quote (0 0 37 111 222 370 555 777 1036 1332 1665 1665 1702 1776 1887 2035 2220 2442 2701 2997 3330 3330 3367 3441 3552 3700 3885 4107 4366 4662 4995 4995 5032 5106 5217 5365 5550 5772 6031 6327 6660 6660 6697 6771 6882 7030 7215 7437 7696 7992 8325 8325 8362 8436 8547 8695 8880 9102 9361 9657 9990 9990 10027 10101 10212 10360 10545 10767 11026 11322 11655 11655 11692 11766 11877 12025 12210 12432 12691 12987 13320 13320 13357 13431 13542 13690 13875 14097 14356 14652 14985 14985 15022 15096 15207 15355 15540 15762 16021 16317 16559)) :ldur (quote ((567) (675) (1000) (25) (783) (133) (783) (458) (783) (133) (892) (892) (675) (892) (675) (892) (675) (675) (458) (350) (242) (458) (25) (242) (242) (350) (350) (567) (567) (25) (675) (567) (242) (25) (567) (783) (675) (1000) (350) (133) (25) (458) (1000) (133) (567) (350) (783) (350) (675) (133) (25) (350) (1000) (458) (567) (892) (1000) (892) (458) (25) (458) (1000) (25) (350) (567) (242) (350) (242) (567) (892) (1000) (242) (1000) (25) (1000) (783) (458) (783) (25) (133) (892) (675) (783) (567) (783) (133) (242) (133) (133) (1000) (892) (458) (133) (242) (675) (892) (350) (783) (458) (242))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 4 300) (om-make-point 1254 292) 0 1000 nil 5/4 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 301 286) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 12 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 216 259) nil nil nil nil 1) (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 876 265) (om-make-point 112 102) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote (4400 5986 5151 6329 6115 7708 8747 9083 7651 7100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0 0.0 0.0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote (4891 6289 5866 6769 6405 7419 8308 8368 7348 6609)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0 0.0 0.0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote (5008 6361 6036 6873 6474 7350 8203 8198 7276 6492)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0 0.0 0.0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote (5140 6442 6228 6992 6552 7272 8085 8005 7195 6360)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0 0.0 0.0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote (5461 6640 6696 7279 6741 7082 7797 7538 6997 6039)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0 0.0 0.0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote (5782 6838 7163 7566 6930 6893 7510 7071 6799 5718)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0 0.0 0.0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote (5976 6958 7445 7740 7045 6779 7336 6788 6680 5524)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0 0.0 0.0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 551 1102 1654 2205 2756 3307 3859 4410 4961)) (quote (6123 7049 7660 7872 7132 6692 7204 6574 6589 5377)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0 0.0 0.0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1102 442))) t nil nil nil) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 722 104) (om-make-point 104 72) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quotequote (0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 7 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 7 7 7 9 7 7 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 487 106) (om-make-point 655 335))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 218 37) (quote "<= no. de passos da interpolação") "" (om-make-point 721 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 699 15) (om-make-point 27 30) 8 "8" nil) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 582 19) nil nil nil nil 1) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 583 120) (om-make-point 105 48) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1000 1053 1336 1839 2017 2378 2642 2892 3336 3697 4405 4961)) (quote (7100 8100 9100 9000 8600 7500 7900 6800 5300 6400 4900 6000 4400)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 384 117) (om-make-point 76 51) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 556 1264 1625 2069 2319 2583 2944 3122 3625 3908 3961 4961)) (quote (4400 6000 4900 6400 5300 6800 7900 7500 8600 9000 9100 8100 7100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "BPF-INTERPOLX" (quote |Profile|::bpf-interpolx) (quote ((om-load-inputfun (quote input-funbox) "" "BPF1" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "BPF2" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "ECHANTILLONS" 10) (om-load-inputfun (quote input-funbox) "" "APPROX" 10) (om-load-inputfun (quote input-funbox) "" "STEPS" 10) (om-load-inputfun (quote input-funbox) "" "TAB" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfunmenu1 (quote input-funmenu) "" "MODE" 2 (list (list "bpf" 1) (list "list" 2))))) (om-make-point 521 195) (om-make-point 150 59) nil nil nil 1))) (quote ((1 0 0 0 nil 0) (7 0 1 0 nil 0) (26 0 7 0 nil 2) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (9 0 8 1 nil 0) (10 0 9 0 nil 0) (38 1 10 0 nil 0) (12 0 11 0 nil 0) (16 0 12 0 nil 0) (17 2 13 0 ((om-make-point 172 97) (om-make-point 293 113) (om-make-point 311 31) (om-make-point 450 31) (om-make-point 450 36)) 0) (17 1 14 0 nil 0) (16 0 15 0 nil 2) (14 0 16 0 nil 0) (26 0 22 0 nil 0) (21 0 22 1 nil 0) (20 0 22 2 nil 0) (25 0 23 1 nil 0) (27 0 24 0 nil 0) (22 0 25 0 nil 0) (29 0 26 0 nil 0) (30 0 27 0 nil 0) (15 0 27 1 nil 0) (11 0 27 2 nil 0) (24 0 28 1 nil 0) (23 0 28 2 nil 0) (0 0 28 3 nil 0) (31 0 29 0 nil 0) (31 0 30 0 ((om-make-point 246 316) (om-make-point 193 316) (om-make-point 190 205) (om-make-point 36 230) (om-make-point 36 240)) 0) (39 0 31 0 ((om-make-point 594 252) (om-make-point 808 252) (om-make-point 249 246) (om-make-point 248 259)) 0) (39 0 32 1 nil 0) (38 2 36 0 ((om-make-point 427 166) (om-make-point 488 174) (om-make-point 498 103) (om-make-point 508 13) (om-make-point 608 19)) 0) (8 0 37 1 nil 0) (36 0 37 2 nil 0) (13 0 38 1 nil 2) (14 0 38 2 nil 0) (38 0 39 0 ((om-make-point 397 166) (om-make-point 401 189) (om-make-point 429 189) (om-make-point 540 195)) 0) (37 0 39 1 nil 0) (35 0 39 4 nil 0) (33 0 39 5 nil 0))) nil 6.0602))
