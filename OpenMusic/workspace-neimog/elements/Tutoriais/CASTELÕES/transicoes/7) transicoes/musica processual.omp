; OM File Header - Saved 2013/10/13 0:13:47
; (6.0602 :patc (om-make-point 496 60) (om-make-point 47 22) (om-make-point 1179 614) "" 183 0 "2013/10/12 22:57:23" "2013/10/12 23:27:54")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "musica processual" (quote ((om-load-boxcall (quote lispfun) "NINTH" (quote ninth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1108 152) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 9" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1091 199) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 10" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1062 232) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "EIGHTH" (quote eighth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1010 167) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SEVENTH" (quote seventh) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 925 163) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SIXTH" (quote sixth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 866 160) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIFTH" (quote fifth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 799 162) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 728 163) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 667 162) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 582 165) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 8" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 998 213) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 7" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 921 217) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 6" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 856 209) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 5" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 788 213) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 4" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 720 210) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 649 208) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 573 213) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 518 170) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 491 212) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1097 4) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1063 4) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 1066 45) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 366 29) (quote "<= Incremento nos onsets a cada repetição (em miliseg.)") nil (om-make-point 656 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 173 29) (quote "<= 1o onset (em miliseg.)") nil (om-make-point 442 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 298 129) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 284 155) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 232 153) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CREATE-LIST 2" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 350 49) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 404 20) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 441 381) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 529 371) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 9" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 969 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 8" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 899 247) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 7" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 833 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 6" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 762 241) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 5" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 699 247) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 4" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 631 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 549 247) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 478 251) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 621 17) (om-make-point 34 30) 25 "25" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 414 221) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 325 280) (om-make-point 799 43) nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 149 340) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 84 191) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 123 238) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 39 459) (om-make-point 1115 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400) (6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400))) :lonset (quote (0 100 200 300 400 500 600 700 825 950 1075 1200 1325 1450 1575 1725 1875 2025 2175 2325 2475 2625 2800 2975 3150 3325 3500 3675 3850 4050 4250 4450 4650 4850 5050 5250 5475 5700 5925 6150 6375 6600 6825 7075 7325 7575 7825 8075 8325 8575 8850 9125 9400 9675 9950 10225 10500 10800 11100 11400 11700 12000 12300 12600 12925 13250 13575 13900 14225 14550 14875 15225 15575 15925 16275 16625 16975 17325 17675 18025 18375 18725 19075 19425 19775 20125 20475 20825 21825)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 80 28) (om-make-point 194 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6700) (6900) (6700) (6200) (6400))) :lonset (quote (0 486 903 1458 1806 2111 2403 2708 3708)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (quote ((21 0 0 0 nil 0) (39 0 1 0 nil 0) (0 0 1 1 nil 0) (27 0 2 0 nil 0) (1 0 2 1 nil 0) (21 0 3 0 nil 0) (21 0 4 0 nil 0) (21 0 5 0 nil 0) (21 0 6 0 nil 0) (21 0 7 0 nil 0) (21 0 8 0 nil 0) (21 0 9 0 nil 0) (39 0 10 0 nil 0) (3 0 10 1 nil 0) (39 0 11 0 nil 0) (4 0 11 1 nil 0) (39 0 12 0 nil 0) (5 0 12 1 nil 0) (39 0 13 0 nil 0) (6 0 13 1 nil 0) (39 0 14 0 nil 0) (7 0 14 1 nil 0) (39 0 15 0 nil 0) (8 0 15 1 nil 0) (39 0 16 0 nil 0) (9 0 16 1 nil 0) (21 0 17 0 nil 0) (39 0 18 0 nil 0) (17 0 18 1 nil 0) (20 0 21 0 nil 0) (19 0 21 1 nil 0) (26 0 25 0 nil 0) (24 0 25 1 nil 0) (46 1 26 0 nil 0) (25 0 27 0 nil 0) (28 0 27 1 nil 0) (30 0 29 1 nil 0) (41 0 30 0 nil 0) (27 0 31 0 nil 0) (10 0 31 1 nil 0) (27 0 32 0 nil 0) (11 0 32 1 nil 0) (27 0 33 0 nil 0) (12 0 33 1 nil 0) (27 0 34 0 nil 0) (13 0 34 1 nil 0) (27 0 35 0 nil 0) (14 0 35 1 nil 0) (27 0 36 0 nil 0) (15 0 36 1 nil 0) (27 0 37 0 nil 0) (16 0 37 1 nil 0) (27 0 38 0 nil 0) (18 0 38 1 nil 0) (27 0 40 0 nil 0) (39 0 40 1 nil 0) (27 0 41 0 nil 0) (40 0 41 1 nil 0) (38 0 41 2 nil 0) (37 0 41 3 nil 0) (36 0 41 4 nil 0) (35 0 41 5 nil 0) (34 0 41 6 nil 0) (33 0 41 7 nil 0) (32 0 41 8 nil 0) (31 0 41 9 nil 0) (2 0 41 10 nil 0) (44 0 42 0 nil 0) (43 0 44 0 nil 0) (46 1 44 1 nil 0) (42 0 45 1 nil 0) (29 0 45 2 nil 0))) nil 6.0602))
