; OM File Header - Saved 2020/02/11 21:30:50
; (6.16 :patc (om-make-point 10 10) (om-make-point 0 25) (om-make-point 1170 678) "" 183 0 "2013/08/02 0:01:18" "2020/02/11 21:30:50")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "omfr p67 - 1 nao-linear- distorcedor de serie harmonica" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 801 677) (om-make-point 35 28) (list 9) "(9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 18" (quote list) (quote nil) (om-make-point 793 45) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 719 57) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 17" (quote list) (quote nil) (om-make-point 715 234) (om-make-point 21 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 8" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 751 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 636 228) (om-make-point 21 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 7" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 672 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 623 169) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 6" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 659 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 555 162) (om-make-point 21 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 5" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 591 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 493 139) (om-make-point 21 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 4" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 529 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 229 53) (quote "<- o que se soma em cada distorção progressiva da série") "" (om-make-point 719 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 196 30) (quote "<- série (harmônica) qualquer") "" (om-make-point 399 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 429 96) (om-make-point 21 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 3" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 465 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 351 70) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 387 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 289 30) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 325 40) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 8" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 642 374) nil nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 348 169) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 299 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 7" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 580 326) nil nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 348 169) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 299 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 6" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 520 298) nil nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 348 169) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 299 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 445 256) nil nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 348 169) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 299 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 410 198) nil nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 348 169) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 299 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 354 163) nil nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 348 169) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 299 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 608 6) (om-make-point 108 30) (list 1 2 3 4 5 6 7 8) "(1 2 3 4 5 6 7 8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM 2" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 164 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 495 720) (om-make-point 21 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 149 278) (quote "um inventor de melodias em que os 15 componentes de  uma série harmônica são distorcidos ascendentemente e inarmonicamente de forma não necessariamente linear (com acréscimos feitos sobre os acréscimos que já foram feitos sobre os parciais anteriores)") "" (om-make-point 14 117) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 552 599) (om-make-point 21 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 807 343) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 831 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 858 470) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 915 339) (om-make-point 28 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 884 340) (om-make-point 28 30) 33 "33" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 861 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 523 617) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 458 736) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 581 707) (om-make-point 292 137) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4650) (6820) (3450) (6402) (4152) (5620) (5850) (6938) (6552) (5352) (6054) (5036) (6692) (6236) (2250) (6832) (5872) (5644) (6950) (4694) (5382) (4210) (6074) (6566) (3536) (6418) (6704) (2416) (5072) (6254) (3692) (5914) (6112) (2704) (6974) (4776) (6448) (5138) (6856) (6288) (5438) (4318) (6730) (6596) (5692) (3904) (5234) (6494) (5518) (3064) (5976) (6892) (4892) (4468) (7006) (6166) (6770) (5762) (6638) (6338) (6236) (6820) (6054) (5352) (5850) (6402) (6692) (6938) (6552) (3450) (4650) (5620) (4152) (5036) (7050) (6624) (4854) (4420) (5492) (5202) (5956) (6478) (3836) (6322) (6996) (5738) (6880) (6148) (7104) (6756) (5644) (6254) (4694) (6418) (5072) (7062) (6950) (6074) (5872) (4210) (7166) (5382) (6566) (6704) (6832) (5570) (5294) (5806) (6524) (6202) (7236) (6370) (7028) (6016) (6916) (4966) (6794) (6664) (4562) (7136) (5976) (5234) (6770) (4892) (6494) (7312) (7216) (6638) (5762) (6892) (7114) (5518) (6166) (7006) (6338))) :lonset (quote (3880 4800 -3880 -3256 5464 -16608 4800 12408 -4800 5360 -10160 7608 728 2808 -13608 11528 -1376 -7456 3448 2288 5224 -4312 3840 -2312 -15352 17152 -5288 4736 -7488 4880 3264 -1128 -640 -2384 5128 -13128 6984 -4480 9112 -1936 2976 -8320 -8288 9736 5424 -2072 -4336 1368 6144 -14824 5616 8680 -10936 11952 -5496 5952 -2672 -2304 1616 2616 -1072 -7608 -1992 9000 -11808 6344 3256 1544 3256 -448 -3536 -2808 1072 4288 -5960 3784 -1640 -7608 9944 624 2072 -464 -3696 3200 -5056 -4288 1736 7080 1920 -2152 552 -1800 -6240 9024 -472 -3840 4760 -3952 1376 2992 -11824 5736 -1048 -1240 5192 -4304 2048 4888 -448 -5384 3816 -6232 6792 1888 -3736 2368 -3112 4880 -10696 7104 1200 2696 -2168 -5008 6384 -888 456 -2048 -1312 -3728 7928 -4960 -4336 3480 11296 34698)) :ldur (quote ((946) (709) (777) (699) (593) (601) (493) (734) (878) (910) (788) (915) (999) (845) (699) (928) (743) (903) (917) (748) (948) (993) (958) (1034) (958) (938) (1004) (865) (974) (961) (1001) (527) (921) (917) (851) (725) (558) (1019) (617) (868) (823) (873) (1009) (865) (971) (974) (386) (881) (345) (813) (1015) (836) (996) (854) (905) (854) (829) (548) (985) (693) (983) (942) (321) (881) (671) (967) (956) (631) (1045) (505) (664) (806) (785) (905) (967) (748) (1007) (652) (956) (719) (725) (593) (638) (979) (868) (938) (976) (991) (915) (806) (664) (803) (1001) (803) (820) (769) (1024) (893) (823) (438) (859) (493) (765) (936) (682) (893) (671) (765) (1016) (756) (936) (1031) (788) (991) (928) (769) (993) (985) (891) (925) (891) (839) (988) (976) (839) (886) (719) (965) (952) (836) (948) (932) (601) (898) (796))) :lvel (quote ((36) (36) (43) (39) (36) (60) (61) (90) (41) (35) (34) (33) (35) (36) (52) (44) (37) (35) (35) (38) (48) (43) (37) (46) (41) (39) (35) (34) (36) (35) (34) (34) (36) (47) (46) (41) (48) (35) (37) (39) (37) (34) (55) (43) (40) (35) (34) (36) (44) (37) (39) (42) (38) (35) (34) (42) (41) (33) (61) (45) (47) (41) (37) (49) (40) (38) (52) (36) (40) (43) (34) (36) (37) (37) (35) (42) (46) (35) (41) (50) (34) (35) (52) (68) (34) (36) (35) (36) (37) (39) (33) (38) (38) (36) (34) (39) (56) (40) (76) (38) (58) (84) (38) (39) (34) (40) (51) (38) (36) (38) (37) (44) (42) (34) (52) (46) (35) (35) (40) (39) (35) (44) (40) (37) (48) (37) (38) (35) (44) (37) (35) (42) (34) (34) (34))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (cursor-mode approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list (quote :normal) 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 67/20 nil 500 0 (om-make-point 964 479) (om-make-point 151 22) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 585 465) (om-make-point 110 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 208 38) (om-make-point 21 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 10))) (om-make-point 179 43) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1088 127) (om-make-point 59 24) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 1036 153) (om-make-point 38 28) 78 "78" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1086 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 1030 50) (om-make-point 163 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 963 1) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 1085 3) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 1054 106) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1150 2) (om-make-point 23 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 409 499) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 208 597) (om-make-point 237 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6820) (2250) (4650) (6552) (6402) (5620) (5850) (6938) (6236) (5036) (6054) (4152) (3450) (5352) (6692) (6074) (2416) (5644) (6418) (6704) (5072) (5872) (4694) (6832) (6566) (6950) (4210) (3536) (5382) (6254) (6730) (4318) (6856) (4776) (6974) (5692) (5138) (2704) (5438) (6288) (6448) (6596) (3692) (6112) (5914) (6494) (5976) (6166) (4892) (6892) (3064) (7006) (3904) (5762) (5234) (6638) (6338) (5518) (4468) (6770) (3450) (6402) (4152) (6692) (7050) (5036) (6938) (6054) (6552) (6236) (5352) (5620) (5850) (6820) (4650) (5492) (5202) (6148) (6322) (5738) (4420) (3836) (6996) (5956) (6478) (4854) (6756) (7104) (6624) (6880) (6566) (6832) (4210) (5872) (6950) (6704) (7062) (6418) (4694) (5644) (5382) (6254) (6074) (5072) (7166) (6794) (5570) (6016) (5806) (5294) (7236) (6916) (4966) (6664) (6524) (4562) (7028) (6202) (6370) (7136) (7114) (7006) (6770) (6494) (6166) (4892) (5518) (7312) (5234) (6892) (7216) (5762) (6338) (6638) (5976))) :lonset (quote (2170 782 -1752 2170 -1468 498 702 -4302 3986 702 -884 638 -1656 -884 -1736 1794 -674 3414 -246 -2010 2138 -1760 800 202 344 -1036 872 -610 922 -652 942 -1718 1592 -1292 -1120 2656 -686 -176 -1336 1820 -148 -3744 988 2000 -458 932 -2262 2988 -2424 424 -1828 3430 -518 662 -876 1244 -1488 1252 -432 482 -970 -230 932 -1200 1698 -358 -2042 1752 -1366 -1586 2786 702 -884 -1902 2604 240 -1794 -1366 3268 -1366 584 302 -668 -1102 1624 -2058 2460 -1388 656 -1938 1172 1036 -774 610 -1182 800 1190 -496 138 246 -2256 2472 -1092 758 -1866 1828 -2232 2574 -934 1034 -1430 1110 -1346 446 508 -154 658 -364 -1370 1344 -1746 1084 -214 576 -1104 1880 -344 542 -96 -1050 726 -1374 1488 -512 -2512 14588)) :ldur (quote ((4210) (3450) (6692) (6770) (4318) (5806) (3692) (4650) (5644) (6054) (5850) (5620) (6016) (6202) (3836) (6370) (7236) (5036) (4892) (5438) (2416) (6756) (5294) (4562) (5352) (6418) (7006) (7028) (4210) (5872) (5914) (3536) (5570) (6880) (5234) (6552) (5738) (5762) (3064) (6624) (5202) (6254) (6832) (5352) (3904) (5976) (6494) (5762) (6950) (5692) (6832) (6856) (6794) (6692) (6254) (6996) (6730) (5976) (6478) (4854) (4152) (5956) (6448) (6402) (6704) (6892) (6148) (5072) (6338) (6166) (7006) (6074) (6770) (6418) (7104) (7312) (6166) (2704) (6236) (6938) (6552) (5644) (6338) (4468) (6074) (6566) (5518) (4694) (5234) (4776) (5072) (6820) (4966) (7136) (6938) (6892) (6236) (6112) (6950) (6054) (5518) (6916) (6638) (4420) (4892) (7216) (4152) (5850) (4650) (6974) (6524) (7114) (2250) (6596) (6566) (5138) (6402) (5382) (5036) (7062) (3450) (6704) (6322) (7166) (6288) (5872) (5492) (6638) (4694) (5620) (6820) (6664) (6494) (7050) (5382))) :lvel (quote ((36) (36) (43) (39) (36) (60) (61) (90) (41) (35) (34) (33) (35) (36) (52) (44) (37) (35) (35) (38) (48) (43) (37) (46) (41) (39) (35) (34) (36) (35) (34) (34) (36) (47) (46) (41) (48) (35) (37) (39) (37) (34) (55) (43) (40) (35) (34) (36) (44) (37) (39) (42) (38) (35) (34) (42) (41) (33) (61) (45) (47) (41) (37) (49) (40) (38) (52) (36) (40) (43) (34) (36) (37) (37) (35) (42) (46) (35) (41) (50) (34) (35) (52) (68) (34) (36) (35) (36) (37) (39) (33) (38) (38) (36) (34) (39) (56) (40) (76) (38) (58) (84) (38) (39) (34) (40) (51) (38) (36) (38) (37) (44) (42) (34) (52) (46) (35) (35) (40) (39) (35) (44) (40) (37) (48) (37) (38) (35) (44) (37) (35) (42) (34) (34) (34))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 901 534) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 268 495) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 257 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 303 114) nil nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 348 169) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 299 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 64 2) (om-make-point 332 30) (list 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150) "(10 20 30 40 50 60 70 80 90 100 110 120 130 140 150)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 252 66) nil nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 355 172) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 308 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((27 0 2 0 nil 0) (1 0 2 1 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (5 0 6 0 nil 0) (2 0 6 1 nil 0) (7 0 8 0 nil 0) (2 0 8 1 nil 0) (9 0 10 0 nil 0) (2 0 10 1 nil 0) (11 0 12 0 nil 0) (2 0 12 1 nil 0) (15 0 16 0 nil 0) (2 0 16 1 nil 0) (17 0 18 0 nil 0) (2 0 18 1 nil 0) (19 0 20 0 nil 0) (2 0 20 1 ((om-make-point 727 90) (om-make-point 593 58) (om-make-point 535 35) (om-make-point 343 35) (om-make-point 343 40)) 0) (22 0 21 0 nil 0) (4 0 21 1 nil 0) (23 0 22 0 nil 0) (6 0 22 1 nil 0) (24 0 23 0 ((om-make-point 473 313) (om-make-point 522 313) (om-make-point 522 295) (om-make-point 540 293) (om-make-point 540 298)) 0) (8 0 23 1 ((om-make-point 670 220) (om-make-point 560 227) (om-make-point 560 259) (om-make-point 560 298)) 0) (25 0 24 0 nil 0) (10 0 24 1 ((om-make-point 602 213) (om-make-point 532 220) (om-make-point 485 234) (om-make-point 485 256)) 0) (26 0 25 0 nil 0) (12 0 25 1 nil 0) (56 0 26 0 nil 0) (16 0 26 1 nil 0) (43 0 28 0 nil 0) (32 0 33 0 nil 0) (41 0 33 1 ((om-make-point 638 522) (om-make-point 796 523) (om-make-point 801 335) (om-make-point 845 335) (om-make-point 845 375)) 0) (37 0 34 0 nil 0) (33 0 37 0 nil 0) (36 0 37 1 nil 0) (35 0 37 2 nil 0) (53 3 38 0 nil 1) (31 0 38 1 nil 0) (53 2 39 0 nil 2) (29 0 39 1 nil 0) (53 1 40 1 nil 0) (39 0 40 2 nil 2) (38 0 40 3 nil 0) (53 4 40 4 nil 3) (0 0 40 6 nil 0) (54 0 41 0 ((om-make-point 288 540) (om-make-point 355 565) (om-make-point 352 464) (om-make-point 640 460) (om-make-point 640 465)) 0) (57 0 43 0 ((om-make-point 228 30) (om-make-point 186 28) (om-make-point 186 36) (om-make-point 186 43)) 0) (42 0 43 1 nil 0) (45 0 46 0 nil 0) (44 0 46 1 nil 0) (48 0 47 0 nil 0) (49 0 47 1 nil 0) (51 0 47 2 nil 0) (54 0 52 0 nil 0) (54 0 53 1 nil 0) (52 0 53 2 nil 0) (41 0 53 3 ((om-make-point 638 522) (om-make-point 519 536) (om-make-point 511 567) (om-make-point 312 597)) 0) (34 0 53 4 nil 0) (55 0 54 0 nil 0) (28 0 55 0 nil 0) (58 0 55 1 ((om-make-point 275 123) (om-make-point 279 249) (om-make-point 285 278) (om-make-point 275 428)) 0) (56 0 55 2 nil 0) (26 0 55 3 ((om-make-point 382 220) (om-make-point 376 299) (om-make-point 303 336) (om-make-point 293 428)) 0) (25 0 55 4 ((om-make-point 438 255) (om-make-point 401 323) (om-make-point 312 334) (om-make-point 302 428)) 0) (24 0 55 5 ((om-make-point 473 313) (om-make-point 437 322) (om-make-point 321 369) (om-make-point 311 428)) 0) (23 0 55 6 ((om-make-point 548 355) (om-make-point 428 345) (om-make-point 330 403) (om-make-point 320 428)) 0) (22 0 55 7 ((om-make-point 608 383) (om-make-point 478 380) (om-make-point 339 418) (om-make-point 329 428)) 0) (21 0 55 8 nil 0) (58 0 56 0 nil 0) (18 0 56 1 nil 0) (43 0 58 0 nil 0) (20 0 58 1 nil 0))) nil 6.16))
