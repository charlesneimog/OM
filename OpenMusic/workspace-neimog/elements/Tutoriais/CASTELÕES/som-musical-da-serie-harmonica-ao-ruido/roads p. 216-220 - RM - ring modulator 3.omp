; OM File Header - Saved 2013/09/24 16:39:10
; (6.0602 :patc (om-make-point 388 10) (om-make-point 0 22) (om-make-point 1245 686) "" 183 0 "2013/09/24 15:53:02" "2013/09/24 16:39:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "roads p. 216-220 - ring modulator 3" (quote ((om-load-editor-box1 "CHORD-SEQ 7" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 803 503) (om-make-point 167 156) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4000 5100 6600 7000) (5340 906 5934 3432 7000 6078 7324 6600) (8174 7832 8308 7656 8646 7000 8778 6602))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 699 380) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "CONCAT" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)))) (om-make-point 713 601) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 267 103) (quote "=> O PATCH: Modulação por anel sobre os resultados de uma modulação por anel") nil (om-make-point 578 141) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1073 388) (om-make-point 167 156) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4000 5100 6600 7000) (8346 8040 8468 7884 8778 7324 8902 7000))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 699 380) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "RM" (om-load-patch-abs1 "RM 2" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 419 416) (om-make-point 48 30) (list 4 8) "(4 8)" nil) (om-load-boxout "output" 0 (om-make-point 569 441) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "M" 1 (om-make-point 392 53) "" "M" nil nil) (om-load-boxin "C" 0 (om-make-point 5 45) "" "C" nil nil) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 272 450) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 216 201) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 288 203) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 200 237) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 233 300) (om-make-point 69 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 274 241) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 2" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 91 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 384 173) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 482 331) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 468 294) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 558 300) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 389 457) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 601 174) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 594 239) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 670 240) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 734 241) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 824 242) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 692 319) (om-make-point 97 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 211 411) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 339 455) nil nil nil nil 1))) (quote ((15 0 1 0 nil 0) (22 0 4 0 nil 0) (10 0 5 0 nil 0) (11 0 5 1 nil 0) (10 0 6 0 ((om-make-point 91 218) (om-make-point 152 185) (om-make-point 182 149) (om-make-point 276 149) (om-make-point 275 183)) 0) (11 0 6 1 nil 0) (5 0 7 0 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (6 0 9 0 nil 0) (3 0 10 0 nil 0) (2 0 11 0 nil 0) (13 0 12 0 nil 0) (14 0 12 1 nil 0) (21 0 14 0 nil 0) (23 0 15 0 nil 0) (0 0 15 1 nil 0) (8 0 16 0 nil 0) (16 0 17 0 nil 0) (16 0 18 0 nil 0) (16 0 19 0 nil 0) (16 0 20 0 nil 0) (17 0 21 0 nil 0) (18 0 21 1 nil 0) (19 0 21 2 nil 0) (20 0 21 3 nil 0) (10 0 22 0 ((om-make-point 91 218) (om-make-point 91 304) (om-make-point 147 340) (om-make-point 200 391)) 0) (12 0 22 1 nil 0) (4 0 23 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "C" nil) (om-load-inputfun (quote input-funbox) "" "M" nil))) (om-make-point 1033 438) nil (list (list (list 4000 5100 6600 7000) (list 8346 8040 8468 7884 8778 7324 8902 7000))) nil "RM 2") (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1055 356) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIFTH" (quote fifth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1008 344) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 719 376) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 843 386) (om-make-point 167 156) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4000 5100 6600 7000) (5340 906 5934 3432 7000 6078 7324 6600) (8174 7832 8308 7656 8646 7000 8778 6602))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 699 380) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "RM 3 - para 2 moduladores 3" (om-load-patch-abs1 "RM 3 - para 2 moduladores" (quote ((om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 424 411) (om-make-point 59 30) (list 4 8 8) "(4 8 8)" nil) (om-load-boxcall (quote lispfun) "LIST 7" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 877 328) (om-make-point 97 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH 2" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 958 249) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 919 250) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND 3" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 855 249) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 818 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 786 183) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 805 306) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 715 300) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 729 337) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 3" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 599 159) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 4" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 652 275) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 611 334) (om-make-point 69 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 3" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 578 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 666 237) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 594 235) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 698 103) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 185 85) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 569 441) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "M" 1 (om-make-point 325 11) "" "M" nil nil) (om-load-boxin "C" 0 (om-make-point 5 45) "" "C" nil nil) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 272 450) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 141 197) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 213 199) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 125 233) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 158 296) (om-make-point 69 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 199 237) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 2" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 16 189) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 146 121) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 276 299) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 262 262) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 352 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 389 457) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 333 145) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 365 210) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 402 211) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 466 212) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 505 211) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 424 290) (om-make-point 97 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 211 411) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 339 455) nil nil nil nil 1))) (quote ((5 0 1 0 nil 0) (4 0 1 1 nil 0) (3 0 1 2 nil 0) (2 0 1 3 nil 0) (6 0 2 0 nil 0) (6 0 3 0 nil 0) (6 0 4 0 nil 0) (6 0 5 0 nil 0) (12 0 6 0 nil 0) (1 0 7 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (16 0 10 0 nil 0) (14 0 11 0 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0) (15 0 13 0 nil 0) (27 0 14 0 nil 0) (10 0 14 1 nil 0) (27 0 15 0 nil 0) (10 0 15 1 nil 0) (19 0 16 0 nil 0) (19 0 17 0 nil 0) (32 0 18 0 nil 0) (39 0 21 0 nil 0) (27 0 22 0 nil 0) (28 0 22 1 nil 0) (27 0 23 0 ((om-make-point 36 234) (om-make-point 100 243) (om-make-point 98 184) (om-make-point 220 183) (om-make-point 220 199)) 0) (28 0 23 1 nil 0) (22 0 24 0 nil 0) (24 0 25 0 nil 0) (26 0 25 1 nil 0) (23 0 26 0 nil 0) (20 0 27 0 nil 0) (17 0 28 0 nil 0) (30 0 29 0 nil 0) (31 0 29 1 nil 0) (38 0 31 0 nil 0) (40 0 32 0 nil 0) (0 0 32 1 nil 0) (25 0 33 0 nil 0) (33 0 34 0 nil 0) (33 0 35 0 nil 0) (33 0 36 0 nil 0) (33 0 37 0 nil 0) (34 0 38 0 nil 0) (35 0 38 1 nil 0) (36 0 38 2 nil 0) (37 0 38 3 nil 0) (27 0 39 0 ((om-make-point 36 234) (om-make-point 91 304) (om-make-point 147 340) (om-make-point 219 411)) 0) (29 0 39 1 nil 0) (9 0 39 2 nil 0) (21 0 40 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "C" nil) (om-load-inputfun (quote input-funbox) "" "M" nil))) (om-make-point 689 464) nil (list (list (list 4000 5100 6600 7000) (list 5340 906 5934 3432 7000 6078 7324 6600) (list 8174 7832 8308 7656 8646 7000 8778 6602))) nil "RM 3 - para 2 moduladores") (om-load-boxcall (quote genfun) "SORT. 3" (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 767 365) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 76 557) (om-make-point 548 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4000 5100 6600 7000) (7000 6246 7252 5764 7832 922 8040 3996) (7524 7000 7714 6704 8174 5340 8346 4002) (4000 5100 6600 7000) (6706 5764 7000 5096 7656 3428 7884 5098) (7714 7252 7884 7000 8306 5932 8466 5098) (4000 5100 6600 7000) (5340 906 5934 3432 7000 6078 7324 6600) (8174 7832 8308 7656 8646 7000 8778 6602) (4000 5100 6600 7000) (8346 8040 8468 7884 8778 7324 8902 7000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 12 548) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 517 382) (om-make-point 167 156) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4000 5100 6600 7000) (6706 5764 7000 5096 7656 3428 7884 5098) (7714 7252 7884 7000 8306 5932 8466 5098))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 699 380) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "RM 3 - para 2 moduladores 2" (om-load-patch-abs1 "RM 3 - para 2 moduladores" (quote ((om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 424 411) (om-make-point 59 30) (list 4 8 8) "(4 8 8)" nil) (om-load-boxcall (quote lispfun) "LIST 7" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 877 328) (om-make-point 97 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH 2" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 958 249) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 919 250) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND 3" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 855 249) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 818 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 786 183) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 805 306) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 715 300) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 729 337) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 3" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 599 159) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 4" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 652 275) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 611 334) (om-make-point 69 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 3" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 578 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 666 237) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 594 235) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 698 103) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 185 85) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 569 441) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "M" 1 (om-make-point 325 11) "" "M" nil nil) (om-load-boxin "C" 0 (om-make-point 5 45) "" "C" nil nil) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 272 450) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 141 197) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 213 199) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 125 233) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 158 296) (om-make-point 69 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 199 237) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 2" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 16 189) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 146 121) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 276 299) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 262 262) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 352 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 389 457) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 333 145) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 365 210) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 402 211) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 466 212) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 505 211) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 424 290) (om-make-point 97 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 211 411) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 339 455) nil nil nil nil 1))) (quote ((5 0 1 0 nil 0) (4 0 1 1 nil 0) (3 0 1 2 nil 0) (2 0 1 3 nil 0) (6 0 2 0 nil 0) (6 0 3 0 nil 0) (6 0 4 0 nil 0) (6 0 5 0 nil 0) (12 0 6 0 nil 0) (1 0 7 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (16 0 10 0 nil 0) (14 0 11 0 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0) (15 0 13 0 nil 0) (27 0 14 0 nil 0) (10 0 14 1 nil 0) (27 0 15 0 nil 0) (10 0 15 1 nil 0) (19 0 16 0 nil 0) (19 0 17 0 nil 0) (32 0 18 0 nil 0) (39 0 21 0 nil 0) (27 0 22 0 nil 0) (28 0 22 1 nil 0) (27 0 23 0 ((om-make-point 36 234) (om-make-point 100 243) (om-make-point 98 184) (om-make-point 220 183) (om-make-point 220 199)) 0) (28 0 23 1 nil 0) (22 0 24 0 nil 0) (24 0 25 0 nil 0) (26 0 25 1 nil 0) (23 0 26 0 nil 0) (20 0 27 0 nil 0) (17 0 28 0 nil 0) (30 0 29 0 nil 0) (31 0 29 1 nil 0) (38 0 31 0 nil 0) (40 0 32 0 nil 0) (0 0 32 1 nil 0) (25 0 33 0 nil 0) (33 0 34 0 nil 0) (33 0 35 0 nil 0) (33 0 36 0 nil 0) (33 0 37 0 nil 0) (34 0 38 0 nil 0) (35 0 38 1 nil 0) (36 0 38 2 nil 0) (37 0 38 3 nil 0) (27 0 39 0 ((om-make-point 36 234) (om-make-point 91 304) (om-make-point 147 340) (om-make-point 219 411)) 0) (29 0 39 1 nil 0) (9 0 39 2 nil 0) (21 0 40 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "C" nil) (om-load-inputfun (quote input-funbox) "" "M" nil))) (om-make-point 359 460) nil (list (list (list 4000 5100 6600 7000) (list 6706 5764 7000 5096 7656 3428 7884 5098) (list 7714 7252 7884 7000 8306 5932 8466 5098))) nil "RM 3 - para 2 moduladores") (om-load-boxcall (quote genfun) "SORT. 2" (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 441 361) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 396 377) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 130 389) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 185 374) (om-make-point 167 156) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4000 5100 6600 7000) (7000 6246 7252 5764 7832 922 8040 3996) (7524 7000 7714 6704 8174 5340 8346 4002))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 699 380) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 74 391) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "RM 3 - para 2 moduladores" (om-load-patch-abs1 "RM 3 - para 2 moduladores" (quote ((om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 424 411) (om-make-point 59 30) (list 4 8 8) "(4 8 8)" nil) (om-load-boxcall (quote lispfun) "LIST 7" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 877 328) (om-make-point 97 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH 2" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 958 249) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 919 250) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND 3" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 855 249) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 818 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 786 183) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 805 306) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 715 300) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 729 337) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 3" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 599 159) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 4" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 652 275) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 611 334) (om-make-point 69 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 3" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 578 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 666 237) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 594 235) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 698 103) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 185 85) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 569 441) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "M" 1 (om-make-point 325 11) "" "M" nil nil) (om-load-boxin "C" 0 (om-make-point 5 45) "" "C" nil nil) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 272 450) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 141 197) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 213 199) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 125 233) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 158 296) (om-make-point 69 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 199 237) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 2" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 16 189) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 146 121) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 276 299) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 262 262) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 352 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 389 457) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 333 145) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 365 210) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 402 211) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 466 212) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 505 211) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 424 290) (om-make-point 97 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 211 411) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 339 455) nil nil nil nil 1))) (quote ((5 0 1 0 nil 0) (4 0 1 1 nil 0) (3 0 1 2 nil 0) (2 0 1 3 nil 0) (6 0 2 0 nil 0) (6 0 3 0 nil 0) (6 0 4 0 nil 0) (6 0 5 0 nil 0) (12 0 6 0 nil 0) (1 0 7 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (16 0 10 0 nil 0) (14 0 11 0 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0) (15 0 13 0 nil 0) (27 0 14 0 nil 0) (10 0 14 1 nil 0) (27 0 15 0 nil 0) (10 0 15 1 nil 0) (19 0 16 0 nil 0) (19 0 17 0 nil 0) (32 0 18 0 nil 0) (39 0 21 0 nil 0) (27 0 22 0 nil 0) (28 0 22 1 nil 0) (27 0 23 0 ((om-make-point 36 234) (om-make-point 100 243) (om-make-point 98 184) (om-make-point 220 183) (om-make-point 220 199)) 0) (28 0 23 1 nil 0) (22 0 24 0 nil 0) (24 0 25 0 nil 0) (26 0 25 1 nil 0) (23 0 26 0 nil 0) (20 0 27 0 nil 0) (17 0 28 0 nil 0) (30 0 29 0 nil 0) (31 0 29 1 nil 0) (38 0 31 0 nil 0) (40 0 32 0 nil 0) (0 0 32 1 nil 0) (25 0 33 0 nil 0) (33 0 34 0 nil 0) (33 0 35 0 nil 0) (33 0 36 0 nil 0) (33 0 37 0 nil 0) (34 0 38 0 nil 0) (35 0 38 1 nil 0) (36 0 38 2 nil 0) (37 0 38 3 nil 0) (27 0 39 0 ((om-make-point 36 234) (om-make-point 91 304) (om-make-point 147 340) (om-make-point 219 411)) 0) (29 0 39 1 nil 0) (9 0 39 2 nil 0) (21 0 40 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 1034 490)) (quote ((om-load-inputfun (quote input-funbox) "" "C" nil) (om-load-inputfun (quote input-funbox) "" "M" nil))) (om-make-point 27 452) nil (list (list (list 4000 5100 6600 7000) (list 7000 6246 7252 5764 7832 922 8040 3996) (list 7524 7000 7714 6704 8174 5340 8346 4002))) nil "RM 3 - para 2 moduladores") (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 34 361) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= 2 a 2 (removendo os zeros)") "" (om-make-point 368 210) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "RM 1" (om-load-patch-abs1 "RM 1" (quote ((om-load-boxout "output" 0 (om-make-point 569 441) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "M" 1 (om-make-point 392 53) "" "M" nil nil) (om-load-boxin "C" 0 (om-make-point 5 45) "" "C" nil nil) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 272 450) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 216 201) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 288 203) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 200 237) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 233 300) (om-make-point 69 43) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 274 241) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 2" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 91 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 384 173) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 482 331) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 468 294) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 558 300) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 389 457) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 413 404) (om-make-point 81 30) (list 4 2 2 2 2) "(4 2 2 2 2)" nil) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 601 174) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 594 239) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 670 240) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 734 241) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 824 242) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 692 319) (om-make-point 97 43) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 211 411) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 339 455) nil nil nil nil 1))) (quote ((14 0 0 0 nil 0) (22 0 3 0 nil 0) (9 0 4 0 nil 0) (10 0 4 1 nil 0) (9 0 5 0 ((om-make-point 91 218) (om-make-point 152 185) (om-make-point 182 149) (om-make-point 276 149) (om-make-point 275 183)) 0) (10 0 5 1 nil 0) (4 0 6 0 nil 0) (6 0 7 0 nil 0) (8 0 7 1 nil 0) (5 0 8 0 nil 0) (2 0 9 0 nil 0) (1 0 10 0 nil 0) (12 0 11 0 nil 0) (13 0 11 1 nil 0) (21 0 13 0 nil 0) (23 0 14 0 nil 0) (15 0 14 1 nil 0) (7 0 16 0 nil 0) (16 0 17 0 nil 0) (16 0 18 0 nil 0) (16 0 19 0 nil 0) (16 0 20 0 nil 0) (17 0 21 0 nil 0) (18 0 21 1 nil 0) (19 0 21 2 nil 0) (20 0 21 3 nil 0) (9 0 22 0 ((om-make-point 91 218) (om-make-point 91 304) (om-make-point 147 340) (om-make-point 200 391)) 0) (11 0 22 1 nil 0) (3 0 23 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "C" nil) (om-load-inputfun (quote input-funbox) "" "M" nil))) (om-make-point 52 181) nil (list (list (list 4000 5100 6600 7000) (list 7282 6664) (list 7498 6298) (list 8012 4268) (list 8200))) nil "RM 1") (om-load-boxcomment "comment" (om-make-point 688 43) (quote "=> Modulação por anel, para portadoras (\"C\") de 4 notas ") "" (om-make-point 68 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 381 38) (om-make-point 64 76) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 7000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0602 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 22) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 36 33) (om-make-point 94 113) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5100 6600 7000)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 5" (om-make-point 149 33) (quote "<= M (modulator)") "" (om-make-point 448 65) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 105 32) (quote "<= C (carrier)") "" (om-make-point 134 72) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 1049 11) (om-make-point 23 28) 0 "0" nil) (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 954 115) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 985 12) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 863 10) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 930 59) (om-make-point 163 53) nil nil nil 1) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 986 196) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 936 162) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 988 136) (om-make-point 59 24) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 97 169) (om-make-point 268 166) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4000 5100 6600 7000) (7282 6664) (7498 6298) (8012 4268) (8200))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000))) :lvel (quote ((100 100 100 100) (100 100) (100 100) (100 100) (100))) :loffset (quote ((0 0 0 0) (0 0) (0 0) (0 0) (0))) :lchan (quote ((1 1 1 1) (1 1) (1 1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0) (0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 699 380) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil))) (quote ((37 0 1 0 nil 0) (11 0 1 1 nil 0) (4 0 3 1 nil 0) (21 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (37 1 6 0 nil 0) (37 1 7 0 nil 0) (9 0 8 1 nil 0) (21 0 9 0 nil 0) (10 0 9 1 nil 0) (7 0 10 0 nil 0) (12 0 11 1 nil 0) (18 1 12 0 nil 0) (13 1 12 1 nil 0) (8 1 12 2 nil 0) (3 1 12 3 nil 0) (14 0 13 1 nil 0) (21 0 14 0 nil 0) (15 0 14 1 nil 0) (16 0 15 0 nil 0) (37 1 16 0 nil 0) (19 0 17 0 nil 0) (20 0 18 1 nil 0) (37 1 19 0 nil 0) (21 0 20 0 nil 0) (17 0 20 1 nil 0) (37 1 21 0 nil 0) (26 1 23 0 nil 0) (25 1 23 1 nil 0) (32 0 33 0 nil 0) (31 0 33 1 nil 0) (29 0 33 2 nil 0) (35 0 34 0 nil 0) (36 0 34 1 nil 0) (23 0 37 1 nil 0))) nil 6.0602))