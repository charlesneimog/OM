; OM File Header - Saved 2013/09/30 9:55:40
; (6.0602 :patc (om-make-point 10 10) (om-make-point 135 22) (om-make-point 1103 705) "" 183 0 "2013/08/01 23:58:51" "2013/08/28 19:12:13")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "omfr p67 - 1+ (linear) - dyns inversamente proporcionais as durs" (quote ((om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 482 718) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 2" (om-make-point 138 189) (quote "um fazedor de melodias em que os 15 componentes de  uma série harmônica são distorcidos ascendentemente e inarmonicamente de forma linearmente progressiva (através da função 1+)") "" (om-make-point 58 199) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 528 628) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 703 338) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 727 370) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 754 465) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 811 334) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 780 335) (om-make-point 28 30) 33 "33" nil) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 757 396) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 499 659) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 450 756) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 572 642) (om-make-point 292 137) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4172) (2308) (3480) (5858) (6408) (6696) (4666) (6558) (5362) (6824) (5048) (6942) (6060) (5628) (6242) (4680) (5636) (6562) (5866) (6248) (6068) (6828) (6946) (6412) (2362) (5372) (3508) (6700) (4190) (5060) (5072) (5644) (2416) (6418) (6074) (6566) (5382) (6950) (6254) (4210) (3536) (6704) (4694) (5872) (6832) (6422) (6954) (5082) (2468) (5390) (3562) (6572) (6260) (4228) (6080) (6708) (6836) (5880) (4708) (5652) (4246) (6840) (6714) (6958) (4722) (5886) (2518) (6086) (6576) (6428) (5094) (5660) (5400) (6266) (3590) (5104) (2566) (6962) (6844) (5894) (6582) (6272) (4264) (4736) (5668) (6092) (5410) (3616) (6718) (6434) (6438) (4282) (6848) (5116) (2614) (4748) (6966) (5900) (5676) (6098) (5418) (3642) (6276) (6586) (6722) (6444) (6852) (5908) (5126) (5684) (2660) (3668) (6106) (4300) (6970) (5428) (6590) (4762) (6726) (6282))) :lonset (quote (-4472 -1384 3136 2388 -3152 1392 -6108 9032 -1528 1764 -768 -1400 1676 -2136 -512 988 1668 -4040 -980 1740 3536 -1160 628 -8400 6548 864 1756 -1068 -5808 5132 1516 -2900 3136 -6828 3072 1144 2120 -572 296 -624 -3120 -968 -3588 6912 -2328 -4480 8736 -1912 -456 856 -1996 3252 -4960 2324 2364 -6020 6784 -1388 324 -1072 -4592 2264 -4408 7136 -852 2596 -1060 -324 896 252 -3492 -1696 2308 2352 -5920 4104 848 -3656 5160 -820 568 -2616 3104 -1380 -7412 4340 3692 -2956 1580 -4504 3552 -2272 -3336 8468 -1896 1076 -2644 1964 1248 -3948 4436 -760 -1820 1200 900 -3200 -728 -924 2768 448 396 352 1376 -8620 5536 2848 -816 292 -5844 -11980 21551)) :ldur (quote ((642) (609) (364) (672) (421) (475) (428) (539) (659) (657) (685) (696) (673) (624) (468) (671) (659) (587) (658) (628) (536) (586) (589) (643) (588) (696) (472) (359) (568) (670) (684) (236) (512) (469) (354) (242) (356) (506) (467) (508) (695) (609) (505) (231) (656) (694) (507) (627) (607) (423) (606) (540) (695) (607) (591) (566) (430) (510) (247) (590) (642) (625) (684) (683) (541) (644) (657) (658) (419) (417) (608) (641) (683) (563) (266) (509) (611) (626) (628) (610) (682) (425) (670) (697) (685) (476) (513) (367) (656) (627) (261) (348) (362) (471) (567) (565) (684) (543) (644) (589) (474) (257) (671) (643) (641) (670) (538) (697) (426) (564) (568) (351) (695) (625) (252) (564) (672) (537) (542) (587))) :lvel (quote ((34) (34) (66) (64) (43) (36) (34) (34) (34) (45) (37) (38) (43) (35) (45) (36) (34) (39) (54) (34) (34) (43) (39) (39) (35) (39) (38) (37) (90) (45) (35) (100) (37) (43) (38) (41) (55) (37) (38) (41) (66) (38) (37) (33) (38) (39) (54) (37) (41) (88) (49) (49) (37) (33) (38) (65) (45) (35) (55) (45) (36) (49) (36) (54) (33) (49) (36) (35) (45) (92) (33) (33) (36) (43) (63) (34) (39) (38) (94) (34) (35) (41) (87) (39) (34) (33) (65) (41) (46) (49) (48) (41) (43) (35) (36) (55) (34) (39) (34) (54) (41) (49) (98) (35) (49) (33) (46) (33) (34) (64) (37) (63) (96) (36) (34) (55) (41) (43) (34) (42))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 901 534) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 8" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 545 383) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 229) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop 8" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 7" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 490 341) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 229) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop 7" nil) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 510 461) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 375 45) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 10))) (om-make-point 341 82) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 757 146) (om-make-point 59 24) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 705 172) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 755 206) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 699 69) (om-make-point 163 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 632 20) (om-make-point 108 27) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 754 22) (om-make-point 58 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcomment "comment3" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 723 125) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 819 21) (om-make-point 21 23) 0 "0" nil) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 356 488) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 188 79) (quote "<= invertendo a sequência de valores das durs, de modo que quanto maior a dur, menor a dyn...") "" (om-make-point 849 333) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 167 592) (om-make-point 248 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5628) (4172) (5048) (6558) (6408) (3480) (6242) (2308) (6824) (6060) (5362) (4666) (6942) (6696) (5858) (5866) (6700) (6946) (6068) (5372) (3508) (6828) (5060) (6412) (2362) (4190) (5636) (6562) (4680) (6248) (6950) (5072) (4694) (5644) (6566) (3536) (4210) (2416) (6254) (6832) (6074) (5872) (6418) (6704) (5382) (4228) (6572) (6954) (6260) (5390) (2468) (6422) (5652) (6708) (6080) (3562) (5880) (4708) (6836) (5082) (3590) (6958) (5886) (6576) (6428) (6086) (4722) (6266) (5094) (6840) (5660) (2518) (6714) (5400) (4246) (5410) (6092) (3616) (6272) (4736) (6962) (6582) (5894) (5668) (6434) (6718) (5104) (6844) (4264) (2566) (6438) (5116) (2614) (6586) (6098) (4748) (4282) (5418) (6848) (6276) (3642) (6966) (5676) (5900) (6722) (2660) (6590) (6970) (6726) (4300) (6106) (3668) (6444) (4762) (6282) (6852) (5684) (5126) (5428) (5908))) :lonset (quote (-1196 614 316 -3078 1568 -876 2236 -1742 696 1580 -4634 3752 -202 838 -1060 -2128 3438 -2756 2372 -4200 4466 -1456 494 834 -1640 1352 -164 -1568 1388 882 -696 -2718 3030 -1184 692 -430 1060 -1632 -378 -484 1662 546 -4002 4416 -4364 1094 2518 -428 608 576 -414 -1340 798 -1652 2726 -2246 682 1182 136 -1048 -260 686 490 -2330 476 372 1620 244 -4440 3368 -2296 2838 -162 574 -946 540 148 -2966 1794 1434 -4278 2170 932 604 -2008 2698 -1858 988 626 4 126 -1172 600 162 528 -4352 1668 2304 -1470 784 -2258 2456 -680 -670 1534 -176 -1806 2144 146 -2922 3184 -4192 2768 -666 1964 -1600 1844 -1286 224 1734 15754)) :ldur (quote ((5116) (6840) (6832) (3536) (5390) (5382) (3590) (5886) (4666) (2362) (4708) (6086) (4210) (5894) (6572) (6276) (5636) (6700) (6272) (6068) (5900) (2518) (6242) (6260) (5668) (4762) (4300) (6434) (5372) (6708) (4722) (4246) (4680) (6106) (4264) (5676) (6852) (6562) (6836) (5418) (6582) (6428) (3642) (6704) (5684) (5644) (5880) (5362) (5866) (6586) (5126) (3480) (2566) (6558) (5060) (6950) (6590) (6962) (3668) (6696) (6074) (6844) (4172) (5428) (4282) (4228) (6726) (6714) (3562) (3616) (5048) (6824) (6966) (6970) (6248) (5908) (4736) (2308) (6444) (6722) (6266) (6438) (4694) (6958) (5858) (6418) (5400) (2468) (5104) (5072) (4748) (6408) (6254) (6718) (6946) (5660) (2416) (6422) (6828) (6092) (5628) (5652) (2660) (5872) (5094) (6942) (6954) (6080) (6848) (6098) (6060) (6282) (3508) (2614) (6566) (6412) (4190) (6576) (5082) (5410))) :lvel (quote ((34) (34) (66) (64) (43) (36) (34) (34) (34) (45) (37) (38) (43) (35) (45) (36) (34) (39) (54) (34) (34) (43) (39) (39) (35) (39) (38) (37) (90) (45) (35) (100) (37) (43) (38) (41) (55) (37) (38) (41) (66) (38) (37) (33) (38) (39) (54) (37) (41) (88) (49) (49) (37) (33) (38) (65) (45) (35) (55) (45) (36) (49) (36) (54) (33) (49) (36) (35) (45) (92) (33) (33) (36) (43) (63) (34) (39) (38) (94) (34) (35) (41) (87) (39) (34) (33) (65) (41) (46) (49) (48) (41) (43) (35) (36) (55) (34) (39) (34) (54) (41) (49) (98) (35) (49) (33) (46) (33) (34) (64) (37) (63) (96) (36) (34) (55) (41) (43) (34) (42))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 901 534) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 239 507) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 6" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 439 296) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 229) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop 6" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 389 243) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 229) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop 5" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 226 448) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 337 196) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 229) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop 4" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 287 139) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 229) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop 3" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 234 92) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 229) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop 2" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 156 6) (om-make-point 332 30) (list 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150) "(10 20 30 40 50 60 70 80 90 100 110 120 130 140 150)" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 195 45) nil nil nil (list (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 163 88) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 251 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 365) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 229) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 264 542) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 164 542) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop" nil))) (quote ((3 0 4 0 nil 0) (14 0 4 1 ((om-make-point 557 518) (om-make-point 621 518) (om-make-point 712 299) (om-make-point 746 299) (om-make-point 741 370)) 0) (8 0 5 0 nil 0) (4 0 8 0 nil 0) (7 0 8 1 nil 0) (6 0 8 2 nil 0) (27 3 9 0 nil 1) (2 0 9 1 nil 0) (27 2 10 0 nil 2) (0 0 10 1 nil 0) (27 1 11 1 ((om-make-point 221 703) (om-make-point 423 720) (om-make-point 527 612) (om-make-point 636 637) (om-make-point 636 642)) 0) (10 0 11 2 ((om-make-point 458 789) (om-make-point 563 789) (om-make-point 566 593) (om-make-point 668 637) (om-make-point 668 642)) 2) (9 0 11 3 ((om-make-point 507 693) (om-make-point 603 693) (om-make-point 603 597) (om-make-point 700 637) (om-make-point 700 642)) 3) (27 4 11 4 ((om-make-point 305 703) (om-make-point 413 713) (om-make-point 524 602) (om-make-point 732 637) (om-make-point 732 642)) 0) (13 0 12 0 nil 0) (29 0 13 0 nil 0) (28 0 14 0 nil 0) (35 0 16 0 nil 0) (15 0 16 1 nil 0) (18 0 19 0 nil 0) (17 0 19 1 nil 0) (21 0 20 0 nil 0) (22 0 20 1 nil 0) (24 0 20 2 nil 0) (28 0 25 0 nil 0) (28 0 27 1 nil 0) (25 0 27 2 nil 0) (14 0 27 3 ((om-make-point 557 518) (om-make-point 456 531) (om-make-point 455 573) (om-make-point 279 592)) 0) (5 0 27 4 nil 0) (31 0 28 0 nil 0) (30 0 29 0 nil 0) (32 0 30 0 nil 0) (36 0 31 0 nil 0) (34 0 31 1 nil 0) (33 0 31 2 nil 0) (32 0 31 3 nil 0) (30 0 31 4 nil 0) (29 0 31 5 nil 0) (13 0 31 6 nil 0) (12 0 31 7 nil 0) (33 0 32 0 nil 0) (34 0 33 0 nil 0) (36 0 34 0 nil 0) (16 0 36 0 nil 0))) nil 6.0602))
