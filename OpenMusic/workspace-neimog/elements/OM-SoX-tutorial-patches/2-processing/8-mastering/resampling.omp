; OM File Header - Saved 2021/02/28 15:44:16
; (6.070005 :patc (om-make-point 231 19) (om-make-point 294 48) (om-make-point 1040 543) "" 183 0 nil "2021/02/28 15:44:16")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/viola-ricochet.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "resampling" (quote ((om-load-boxcomment "comment" (om-make-point 397 34) (quote "Use \"sox-resample\" to change the samplerate of audio") "" (om-make-point 131 23) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 565 105) (quote "where Bandwidth is the percentage of the audio frequency band that is preserved $and Rej dB is the level of noise rejection. Increasing levels of resampling quality come $at the expense of increasing amounts of time to process the audio.$The 'quick' algorithm uses cubic interpolation; all others use band-limited interpolation. $By default, all algorithms have a linear phase response; for 'medium', 'high' and 'very high', $the phase response is configurable.") "" (om-make-point 411 358) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 306 105) (quote "Quality				Bandwidth		Rej dB$-quick			n/a				30 at Fs/4$-low 				80%			100$-medium 			95% 			100$-high 			95%			125$-best		95%			175") "" (om-make-point 414 241) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-RESAMPLE" (quote sox-resample) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "samplerate (Hz)" "SAMPLERATE" 8000 (list (list "4kHz" 4000) (list "8kHz" 8000) (list "16kHz" 16000) (list "20kHz" 20000) (list "30kHz" 30000) (list "44.1kHz" 44100) (list "48kHz" 48000) (list "88.2kHz" 88200) (list "96kHz" 96000) (list "192kHz" 192000))) (om-load-inputkeyword (quote input-keyword) "choose algorithm for samplerate-conversion" "quality" (quote :quality) "high" (list (list "quick" "quick") (list "low" "low") (list "medium" "medium") (list "high" "high") (list "very high" "very high") (list "very high linear phase" "very high linear phase") (list "very high intermediate phase" "very high intermediate phase") (list "very high minimum phase" "very high minimum phase"))))) (om-make-point 271 150) nil nil nil nil 1) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 174 358) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 583 313) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "viola-ricochet.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 110 167) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "viola-ricochet" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "viola-ricochet.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 555 272) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 488 120) (quote "SoX has a high quality resampling algorithm that is also highly configurable. $A comparison of resampling with several different settings and with various $other tools can be found at http://src.infinitewave.ca. $$Change the audio sampling rate (i.e. resample the audio) to any given rate $(even non-integer if this is supported by the output file format) using a quality $level defined as follows:") "" (om-make-point 411 118) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 158 247) nil nil nil nil 1))) (quote ((7 0 4 0 nil 0) (5 0 7 0 nil 0) (3 0 7 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 59 8)) (setf (pict-size newpict) (om-make-point 64 55)) newpict)) 6.070005))
