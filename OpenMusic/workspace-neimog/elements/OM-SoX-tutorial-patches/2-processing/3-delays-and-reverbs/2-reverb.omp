; OM File Header - Saved 2021/02/28 15:44:16
; (6.070005 :patc (om-make-point 141 28) (om-make-point 505 367) (om-make-point 1100 570) "" 183 0 nil "2021/02/28 15:44:16")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/drumloop.aif\"") (list (quote :abstraction) "#P\"../7-convolution/2-convolution-reverb.omp\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "2-reverb" (quote ((om-load-editor-box1 "SOUND 3" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 677 464) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "SOUND 3" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 207 449) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-boxcall (quote patch-box) "2-convolution-reverb" (quote ("elements" "om-sox-tutorials" "2-processing" "7-convolution" "2-convolution-reverb")) (quote nil) (om-make-point 894 449) nil nil nil nil 0) (om-load-boxcomment "comment" (om-make-point 89 30) (quote "-> See also:") "" (om-make-point 804 486) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "drumloop.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 589 316) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "drumloop" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "drumloop.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 548 293) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "drumloop.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 98 289) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "drumloop" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "drumloop.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 548 293) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 259 60) (quote "Note: create the keyword-inlet \"wet only\" ('k') $to select only the 'wet' signal. $This is useful for further processing, $independently of the 'dry' signal.") "" (om-make-point 285 283) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 278 34) (quote "Reverberate audio using \"sox-reverb\"") "" (om-make-point 126 26) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 222 96) (quote "NB: $Reverberation increases both $the volume and length of the audio.$To prevent clipping in these domains, $a typical invocation might be preceeded $by a decrease in gain and padding the $(end of the) audio before reverberating.") "" (om-make-point 796 310) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 688 257) (om-make-point 32 30) -3 "-3" nil) (om-load-boxcall (quote genfun) "SOX-LEVEL" (quote sox-level) (quote ((om-load-inputfun (quote input-funbox) "gain (dB)" "GAIN" 0) (om-load-inputkeyword (quote input-keyword) "connect sox-effects to append to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 718 293) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PAD" (quote sox-pad) (quote ((om-load-inputfun (quote input-funbox) "duration (in s) of zero-padding" "DURATION" (list 0 5.0)) (om-load-inputkeyword (quote input-keyword) "connect other commands to add to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 763 212) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 388 30) (quote "sox-reverbs adds reverb to audio using the freeverb algorithm.") "" (om-make-point 59 180) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "SND" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" nil))) (om-make-point 661 374) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-REVERB 2" (quote sox-reverb) (quote ((om-load-inputfun (quote input-funbox) "reverberance (%)" "REVERBERANCE" 50) (om-load-inputfun (quote input-funbox) "HF-damping (%)" "HF-DAMPING" 50) (om-load-inputfun (quote input-funbox) "room-scale (%)" "ROOM-SCALE" 35) (om-load-inputfun (quote input-funbox) "stereo-depth (%)" "STEREO-DEPTH" 100) (om-load-inputfun (quote input-funbox) "pre-delay (ms)" "PRE-DELAY" 0) (om-load-inputfun (quote input-funbox) "wet-gain (dB)" "WET-GAIN" -6))) (om-make-point 696 133) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 666 92) (om-make-point 28 30) 95 "95" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 704 91) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 217 229) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 179 230) (om-make-point 28 30) 75 "75" nil) (om-load-boxcall (quote genfun) "SOX-REVERB" (quote sox-reverb) (quote ((om-load-inputfun (quote input-funbox) "reverberance (%)" "REVERBERANCE" 50) (om-load-inputfun (quote input-funbox) "HF-damping (%)" "HF-DAMPING" 50) (om-load-inputfun (quote input-funbox) "room-scale (%)" "ROOM-SCALE" 50) (om-load-inputfun (quote input-funbox) "stereo-depth (%)" "STEREO-DEPTH" 100) (om-load-inputfun (quote input-funbox) "pre-delay (ms)" "PRE-DELAY" 0) (om-load-inputfun (quote input-funbox) "wet-gain (dB)" "WET-GAIN" 0))) (om-make-point 209 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "SND" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" nil))) (om-make-point 191 361) nil nil nil nil 1))) (quote ((13 0 0 0 nil 0) (20 0 1 0 nil 0) (9 0 10 0 nil 0) (11 0 10 1 nil 0) (14 0 11 1 nil 0) (4 0 13 0 nil 0) (10 0 13 1 nil 0) (15 0 14 0 nil 0) (16 0 14 1 nil 0) (18 0 19 0 nil 0) (17 0 19 1 nil 0) (5 0 20 0 nil 0) (19 0 20 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 60 11)) (setf (pict-size newpict) (om-make-point 63 54)) newpict)) 6.070005))
