; OM File Header - Saved 2021/02/28 15:44:16
; (6.070005 :patc (om-make-point 16 83) (om-make-point 50 50) (om-make-point 1070 628) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/men-of-goodwill.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/sax-tenor-multi.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/noise-white.aif\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "spectro-pipe-input" (quote ((om-load-boxcomment "comment 4" (om-make-point 184 24) (quote "works also with sox-input classes") "" (om-make-point 823 244) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 191 48) (quote "preview the results of a sox-effect$in a sonagram before $rendering a sound") "" (om-make-point 515 276) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" "") (om-load-inputkeyword (quote input-keyword) "" "output" (quote :output) "pipe" (list (list "realtime" "realtime") (list "new file" nil) (list "replace file" "replace file") (list "pipe" "pipe"))))) (om-make-point 745 296) nil nil nil nil 1) (om-load-editor-box1 "men-of-goodwill.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 847 123) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "men-of-goodwill" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "men-of-goodwill.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 565 290) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "sax-tenor-multi.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 715 124) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "sax-tenor-multi" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sax-tenor-multi.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 541 275) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 818 178) nil nil nil nil 1) (om-load-editor-box1 "SOX-MIX" (quote sox-mix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "Audio input for sox input modules. [sound object, pathname, string/pipe]" "sound" nil) (om-load-inputfun (quote input-funbox) "Gain value for audio input before processing (dB). [float, list]" "gains" nil))) (om-make-point 748 229) (om-make-point 70 50) (if (find-class (quote sox-mix) nil) (make-instance (quote sox-mix) :sound (list (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device :unspecific :host nil :name "sax-tenor-multi" :type "wav") (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device :unspecific :host nil :name "men-of-goodwill" :type "wav")) :gains (list 0.0 0.0) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 104 150))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 860 342) (om-make-point 24 30) (quote t) "t" nil) (om-load-editor-box1 "PICTURE 2" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 814 494) (om-make-point 134 82) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1312 706) (om-make-point 282 79))) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-SPECTROGRAM 2" (quote sox-spectrogram) (quote ((om-load-inputfun (quote input-funbox) "audio input" "SND" nil) (om-load-inputfun (quote input-funbox) "clipping (region between 2 time values)" "CLIPPING" nil) (om-load-inputfun (quote input-funbox) "channel selection" "CHANNEL" nil) (om-load-inputkeyword (quote input-keyword) "spectrogram w/ legend" "legend" (quote :legend) nil nil) (om-load-inputkeyword (quote input-keyword) "choose windowing function for STFTs" "nyquist" (quote :nyquist) nil nil))) (om-make-point 798 379) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 915 340) (om-make-point 48 30) 6000 "6000" nil) (om-load-boxcomment "comment 7" (om-make-point 813 34) (quote "Use \"sox-spectrogram\" in conjunction with \"sox-process\" for rendering sonagrams of real-time or processed audio") "" (om-make-point 127 14) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 532 343) (om-make-point 24 30) (quote t) "t" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" "") (om-load-inputkeyword (quote input-keyword) "" "output" (quote :output) "pipe" (list (list "realtime" "realtime") (list "new file" nil) (list "replace file" "replace file") (list "pipe" "pipe"))))) (om-make-point 452 270) nil nil nil nil 1) (om-load-editor-box1 "PICTURE 2" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 486 495) (om-make-point 134 82) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 906 945) (om-make-point 283 79))) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-SPECTROGRAM 2" (quote sox-spectrogram) (quote ((om-load-inputfun (quote input-funbox) "audio input" "SND" nil) (om-load-inputfun (quote input-funbox) "clipping (region between 2 time values)" "CLIPPING" nil) (om-load-inputfun (quote input-funbox) "channel selection" "CHANNEL" nil) (om-load-inputkeyword (quote input-keyword) "spectrogram w/ legend" "legend" (quote :legend) nil nil) (om-load-inputkeyword (quote input-keyword) "choose windowing function for STFTs" "nyquist" (quote :nyquist) nil nil))) (om-make-point 470 380) nil nil nil nil 1) (om-load-editor-box1 "noise-white.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 453 185) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "noise-white" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "noise-white.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 557 290) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 587 341) (om-make-point 48 30) 6000 "6000" nil) (om-load-boxcall (quote genfun) "SOX-PHASER" (quote sox-phaser) (quote ((om-load-inputfun (quote input-funbox) "delay (in millisecs)" "DELAY" 1) (om-load-inputfun (quote input-funbox) "decay (in % relative to input-gain)" "DECAY" 75) (om-load-inputfun (quote input-funbox) "modulation-frequency (in Hz)" "MODULATION-FREQUENCY" 0.2))) (om-make-point 561 172) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 200 348) (om-make-point 24 30) (quote t) "t" nil) (om-load-boxcall (quote genfun) "SOX-SPECTROGRAM" (quote sox-spectrogram) (quote ((om-load-inputfun (quote input-funbox) "audio input" "SND" nil) (om-load-inputfun (quote input-funbox) "clipping (region between 2 time values)" "CLIPPING" nil) (om-load-inputfun (quote input-funbox) "channel selection" "CHANNEL" nil) (om-load-inputkeyword (quote input-keyword) "spectrogram w/ legend" "legend" (quote :legend) nil nil) (om-load-inputkeyword (quote input-keyword) "choose windowing function for STFTs" "nyquist" (quote :nyquist) nil nil))) (om-make-point 138 383) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 177 45) (quote "...use the 'pipe' output $as input to sox-spectrogram") "" (om-make-point 189 281) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 258 344) (om-make-point 42 30) 3000 "3000" nil) (om-load-boxcomment "comment 3" (om-make-point 194 30) (quote "Spectrogram on realtime-input") "" (om-make-point 113 114) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 127 48) (quote "create a spectrogram $of audio input$on the fly") "" (om-make-point 249 399) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "record some audio into memory") "" (om-make-point 204 196) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" "") (om-load-inputkeyword (quote input-keyword) "" "output" (quote :output) "pipe" (list (list "realtime" "realtime") (list "new file" nil) (list "replace file" "replace file") (list "pipe" "pipe"))))) (om-make-point 120 273) nil nil nil nil 1) (om-load-editor-box1 "SOX-RECORD" (quote sox-record) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "duration" 3) (om-load-inputfun (quote input-funbox) "" "gains" nil) (om-load-inputfun (quote input-funbox) "" "channels" (list 1)))) (om-make-point 127 197) (om-make-point 70 50) (if (find-class (quote sox-record) nil) (make-instance (quote sox-record) :duration 3 :gains (list 0.0) :channels (list 1) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 104 100))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 143 157) (om-make-point 27 30) 3 "3" nil) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 154 494) (om-make-point 134 82) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 906 945) (om-make-point 283 79))) t nil nil nil))) (quote ((6 0 2 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (5 0 6 1 nil 0) (9 0 8 0 nil 0) (2 0 9 0 nil 0) (7 0 9 3 nil 0) (10 0 9 4 nil 0) (16 0 13 0 nil 0) (18 0 13 1 nil 0) (15 0 14 0 nil 0) (13 0 15 0 nil 0) (12 0 15 3 nil 0) (17 0 15 4 nil 0) (26 0 20 0 nil 0) (19 0 20 3 nil 0) (22 0 20 4 nil 0) (27 0 26 0 nil 0) (28 0 27 1 nil 0) (20 0 29 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 57 8)) (setf (pict-size newpict) (om-make-point 63 43)) newpict)) 6.070005))
