; OM File Header - Saved 2020/09/23 20:55:23
; (6.13 :patc (om-make-point 10 10) (om-make-point 50 50) (om-make-point 1121 562) "" 183 0 nil "2020/09/23 20:55:23")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "nuper-rosarum-flores 2" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 777 292) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8612634 3.45599 4.784181 5.854735 6.8520007 7.849267 8.846533 9.843799 10.841065 11.83833 12.835596 13.832862 14.830129 15.8273945 16.82466 17.821927 18.819193 19.816458 20.813725 21.81099 22.808255 23.805521 24.802788 25.80005 26.797318 27.794585 28.79185 29.789114 30.78638 31.783646 32.780915 33.77818 34.775444 35.772713 36.769978 37.767243 38.76451 39.761773 40.75904 41.756306 42.753575 43.75084 44.7481 45.74537 46.742634 47.739903 48.737164 49.73443 50.731697 51.728966 52.72623 53.723496 54.720765 55.718033 56.715294 57.712563 58.709824 59.707093 60.704354 61.70162 62.698887 63.696148 64.69341 65.69068 66.68795 67.68522 68.68248 69.67975 70.67702 71.674286 72.671555 73.668816 74.666085 75.663346 76.66061 77.65787 78.65514 79.652405 80.64967 81.64694 82.6442 83.64147 84.63873 85.636 86.63327 87.63053 88.6278 89.62507 90.62233 91.6196 92.61687 93.614136 94.611405 95.60866 96.60593 97.60319 98.600464 99.597725 100.59499 101.59226 102.58952 103.586785 104.58405 105.581314 106.57858 107.57585 108.57311 109.57039 110.56765 111.56491 112.56218 113.55944 114.55672 115.55398 116.55124 117.548516 118.54578 119.54304 120.5403 121.53759 122.53486 123.53212 124.52941 125.52666 126.52393 127.52121 128.51848 129.51575 130.51303 131.5103 132.50759 133.50485 134.50212 135.49939 136.49668 137.49394 138.49123 139.4885 140.48577 141.48303 142.48032 143.47757 144.47486 145.47212 146.46939 147.46668 148.46395 149.46123 150.4585 151.45577 152.45304 153.4503 154.44757 155.44484 156.44211 157.43939 158.43666 159.43395 160.43122 161.4285 162.42577 163.42304 164.42032 165.41759 166.41486 167.41214 168.40941 169.40668 170.40395 171.40123 172.39849 173.39575 174.39302 175.3903 176.38758 177.38484 178.38213 179.37943 180.37668 181.37395 182.37122 183.3685 184.36577 185.36305 186.36034 187.35759 188.35486 189.35214 190.34941 191.34668 192.34394 193.34123 194.33849 195.33577 196.33306 197.33032 198.32759 199.32486 200.32213 201.31941 202.31668 203.31395 204.31122 205.3085 206.30577 207.30306 208.30033 209.29758 210.29488 211.29215 212.28942 213.28668 214.28397 215.28124 216.27849 217.27577 218.27304 219.27033 220.26758 221.26488 222.26215 223.25942 224.2567 225.25394 226.25122 227.24849 228.24578 229.24304 230.24031 231.2376 232.2349 233.23213 234.22942 235.22669 236.22397 237.2212 238.2185 239.21579 240.21303 241.21033 242.20758 243.20484 244.20207 245.19936 246.1966 247.19388 248.19112 249.1884 250.18566 251.18289 252.18015 253.17739 254.17467 255.17192 256.16916 257.16644 258.1637 259.16095 260.1582 261.1555 262.15274 263.15002 264.14728 265.14453 266.14178 267.13904 268.1363 269.13355 270.1308 271.12805 272.12534 273.1226 274.11987 275.11713 276.11435 277.11163 278.1089 279.10614 280.1034 281.10065 282.0979 283.09518 284.09244 285.0897 286.08694 287.08423 288.08148 289.07874 290.07596 291.07324 292.0705 293.06775 294.06503 295.0623 296.05954 297.05682 298.05405 299.05133 300.04858 301.04584 302.0431 303.04034 304.0376 305.03488 306.03214 307.0294 308.02664 309.0239 310.02118 311.0184 312.01566 313.01294 314.01016 315.00745 316.0047 317.00198 317.9992 318.9965 319.99374 320.99097 321.98825 322.9855 323.98276 324.98 325.9773 326.97455 327.97183 328.9691 329.9663 330.9636 331.96085 332.9581 333.95538 334.9526 335.9499 336.94714 337.9444 338.94165 339.93893 340.9362 341.93344 342.9307 343.92795 344.9252 345.9225 346.91974 347.917 348.91425 349.9115 350.90872 351.906 352.9033 353.9005 354.8978 355.89502 356.8923 357.88956 358.8868 359.8841 360.88135 361.8786 362.87585 363.8731 364.8704 365.86765 366.8649 367.86215 368.85944 369.8567 370.85394 371.8512 372.84845 373.8457 374.84296 375.8402 376.83746 377.83475 378.832 379.82925 380.82648 381.8238 382.82105 383.81833 384.81558 385.8128 386.81006 387.8073 388.8046 389.80185 390.79913 391.7964 392.79364 393.7909 394.78818 395.7854 396.78265 397.7799 398.7772 399.7744 400.7717 401.76898 402.76624 403.7635 404.76074 405.758 406.75528 407.7525 408.7498 409.74704 410.74426 411.74152 412.73883 413.73602 414.73334 415.7306 416.72784 417.72513 418.72235 419.7196 420.71686 421.7141 422.71137 423.70865 424.70587 425.70316 426.70044 427.69772 428.69495 429.6922 430.68945 431.6867 432.68396 433.68124 434.67847 435.67572 436.673 437.67026 438.66754 439.66473 440.66208 441.65933 442.65656 443.6538 444.65106 445.64832 446.6456 447.64285 448.6401 449.63736 450.6346 451.63187 452.6291 453.62634 454.62366 455.6209 456.61813 457.6154 458.6127 459.60996 460.6072 461.6045 462.60175 463.599 464.59625 465.59348 466.59073 467.58804 468.58524 469.58252 470.57977 471.5771 472.57434 473.57156 474.56882 475.56613 476.56332 477.5606 478.55786 479.55524 480.55246 481.54977 482.54703 483.5443 484.54163 485.53888 486.53616 487.53348 488.53073 489.528 490.52533 491.5226 492.51993 493.51718 494.51447 495.51178 496.50903 497.50632 498.50363 499.50085 500.49823 501.49548 502.49277 503.49008 504.48734 505.48462 506.48187 507.47916 508.4764 509.47372 510.47098 511.46832 512.4656 513.4629 514.4602 515.45746 516.4548 517.4521 518.44935 519.44666 520.444 521.4412 522.43854 523.4358 524.4331 525.43036 526.4276 527.4249 528.42225 529.41956 530.4168 531.4141 532.4114 533.4086 534.40595 535.4032 536.4005 537.3978 538.3951 539.39234 540.38965 541.38697 542.3842 543.3816 544.3788 545.3761 546.37336 547.3707 548.368 549.36524 550.36255 551.3598 552.3571 553.35444 554.3517 555.349 556.34626 557.34357 558.3408 559.33814 560.3354 561.3327 562.32996 563.3273 564.3246 565.32184 566.31916 567.3164 568.31366 569.311 570.3083 571.30555 572.30286 573.3002 574.2974 575.2948 576.292 577.2893 578.28656 579.2839 580.2812 581.27845 582.27576 583.273 584.27027 585.26764 586.2649 587.26215 588.25946 589.2568 590.254 591.25135 592.2486 593.2459 594.24317 595.2405 596.23774 597.23505 598.2323 599.2296 600.2269 601.2242 602.2215 603.21875 604.21607 605.2133 606.21064 607.20795 608.2052 609.2025 610.19977 611.197 612.19434 613.1916 614.1889 615.1862 616.1835 617.1808 618.1781 619.17536 620.17267 621.17 622.16724 623.16456 624.16175 625.159 626.1563 627.15357 628.1509 629.1482 630.1455 631.14277 632.14 633.1373 634.13465 635.13196 636.1292 637.1265 638.1238 639.1211 640.11835 641.11567 642.113 643.1102 644.10755 645.1048 646.1021 647.09937 648.0967 649.094 650.09125 651.0885 652.08576 653.0831 654.0804 655.07764 656.075 657.07227 658.0696 659.06684 660.0641 661.0614 662.05866 663.05597 664.0532 665.05054 666.04786 667.04517 668.0424 669.03974 670.037 671.0343 672.03156 673.0289 674.0261 675.02344 676.02076 677.01795 678.0153 679.0126 680.0099 681.00715 682.0044 683.00165 683.99897 684.9963 685.9935 686.99085 687.98816 688.9854 689.9827 690.98005 691.9773 692.9746 693.97187 694.9691 695.96644 696.96375 697.96106 698.9583 699.9556 700.9529 701.95014 702.94745 703.94477 704.942 705.93934 706.93665 707.9339 708.93116 709.92847 710.9258 711.92304 712.92035 713.91767 714.91486 715.9122 716.9095 717.90674 718.90406 719.90137 720.8986 721.89594 722.89325 723.89057 724.8878 725.8851 726.8824 727.87964 728.87696 729.8742 730.87146 731.8688 732.8661 733.86335 734.8607 735.858 736.8552 737.85254 738.8498 739.8471 740.8444 741.8417 742.839 743.8362 744.83356 745.8309 746.8281 747.82544 748.8227 749.81995 750.81727 751.8146 752.8118 753.8091 754.8064 755.80365 756.80097 757.7982 758.79554 759.7928 760.79017 761.7874 762.78467 763.782 764.7793 765.7765 766.77387 767.7712 768.76844 769.76575 770.763 771.7604 772.7575 773.7549 774.75214 775.74946 776.7467 777.744 778.7413 779.7386 780.73584 781.73316 782.7304 783.7277 784.725 785.7223 786.71955 787.71686 788.7141 789.7114 790.70874 791.70606 792.70337 793.7006 794.6979 795.6951 796.69245 797.68976 798.687 799.6843 800.68165 801.6789 802.67615 803.67347 804.6708 805.668 806.6653 807.6626 808.6599 809.65717 810.6545 811.6518 812.64905 813.64637 814.6437 815.6409 816.63825 817.6355 818.6328 819.63007 820.6273 821.62464 822.62195 823.6192 824.6165 825.61384 826.6111 827.60834 828.60566 829.6029 830.6002 831.5975 832.5948 833.5921 834.5894 835.58674 836.584 837.5813 838.5785 839.5758 840.5731 841.5703 842.56757 843.56495 844.56226 845.5595 846.5568 847.55414 848.5514 849.5487 850.54596 851.5433 852.5405 853.53785 854.5351 855.53235 856.52967 857.527 858.5243 859.5216 860.51886 861.51606 862.5134 863.5107 864.508 865.50525 866.50257 867.4999 868.4972 869.49445 870.4917 871.4891 872.4863 873.48365 874.48084 875.4782 876.47535 877.4727 878.47 879.4673 880.46454 881.4618 882.4591 883.4564 884.45374 885.45105 886.44825 887.4455 888.4428 889.4401 890.43744 891.43476 892.432 893.4293 894.42664 895.42395 896.4212 897.4184 898.4157 899.413 900.41034 901.40754 902.40485 903.4021 904.3994 905.3967 906.39405 907.3913 908.3886 909.3858 910.3831 911.38044 912.37775 913.375 914.3723 915.3696 916.36695 917.3642 918.36145 919.3587 920.35614 921.35346 922.35065 923.3479 924.3452 925.3424 926.33985 927.33704 928.33436 929.3316 930.32905 931.32624 932.32355 933.32074 934.318 935.3153 936.31275 937.30994 938.30726 939.30445 940.3018 941.299 942.29645 943.29364 944.291 945.2882 946.2855 947.28284 948.28016 949.27735 950.2746 951.2719 952.26935 953.2666 954.2638 955.26105 956.2584 957.25574 958.25306 959.25025 960.2475 961.2448 962.2421 963.2395 964.23676 965.234 966.2312 967.2285 968.2258 969.22315 970.22034 971.2176 972.2149 973.2122 974.20954 975.20685 976.2041 977.2014 978.1987 979.19605 980.1933 981.1906 982.1878 983.18525 984.18256 985.1798 986.177 987.1742 988.1715 989.1688 990.16614 991.16346 992.1607 993.1579 994.15534 995.2278 996.5588 998.15625 1000.0)) (quote (675.0 533.7143 432.71622 372.00558 349.86752 330.77957 300.61972 259.38794 215.86199 219.31116 277.40564 390.1454 518.095 572.78284 550.896 452.52188 360.02292 345.59888 409.24973 544.346 641.0775 660.5199 602.6731 491.48447 445.05524 479.34393 594.3506 742.71814 829.72297 852.725 811.8535 739.1938 659.5337 572.8733 482.43204 431.85468 434.92252 491.63562 590.24067 679.58136 753.70716 812.6179 853.5746 871.69696 866.8899 839.1725 790.782 723.2477 636.5697 536.4917 487.90662 509.03888 599.8886 739.6417 848.0617 917.1943 947.03925 948.707 939.796 920.5276 890.6294 831.64527 732.37366 592.81446 422.86032 317.00424 298.79492 368.23236 491.33984 551.79346 539.88666 455.61948 361.47208 345.21863 407.46872 546.02094 661.6504 700.77655 663.3992 559.49305 470.54947 414.536 391.4525 396.1651 413.03137 440.96957 479.97968 514.4405 524.9555 511.46948 475.21826 456.16742 473.54684 527.3563 607.17444 639.4889 610.0149 518.7524 401.67816 356.4745 388.63144 498.149 606.3959 627.4661 561.3183 413.33057 314.94803 322.5702 436.19714 631.2389 756.78437 787.11127 722.21967 597.348 497.8208 427.43774 386.20023 385.499 436.22867 538.3892 688.455 818.81824 903.60724 942.8222 943.25654 941.4097 942.7061 947.14545 940.76246 893.40534 804.0458 672.7421 530.8347 404.64243 294.1654 202.15668 171.14891 215.6456 335.64673 510.64948 643.7532 722.49646 746.8794 720.74805 651.5012 539.32325 384.67847 273.13702 268.10184 369.57294 566.1981 713.5743 767.87366 729.096 625.54645 575.39515 591.6763 674.38984 768.7056 780.757 708.9465 554.47364 430.82236 412.463 499.39563 679.3927 822.2185 892.75434 891.00007 829.93665 757.5923 678.46174 592.54517 504.77118 422.63333 346.21017 276.07773 245.80965 274.97366 363.56976 500.27304 582.7194 586.447 511.45554 391.5522 337.87543 359.13162 455.32086 563.4979 598.90925 561.1019 452.39035 365.04086 346.9098 397.99707 504.45755 558.9321 538.75934 443.93945 301.88358 192.80103 121.86359 89.07125 97.35956 150.21558 247.64568 387.3304 501.62936 559.28217 560.28876 509.44205 438.9081 354.65906 256.6949 174.3106 183.89292 289.4095 490.86035 682.1938 752.8179 702.7205 537.75306 388.64124 309.24774 299.57266 344.89133 359.06036 328.08392 251.96199 167.8806 162.28702 238.69826 397.07498 561.17164 661.40735 697.78217 673.0879 636.74256 606.8976 583.553 569.50165 579.06995 614.2818 675.1373 735.7185 742.3045 693.24604 588.73145 493.11127 458.0644 483.59082 562.99555 599.88416 562.69916 451.4404 290.04535 186.79778 154.90955 194.38062 271.84772 325.67148 354.49448 358.58112 375.49414 431.9084 527.8237 658.58277 768.5541 841.5243 877.4933 883.75977 889.5473 897.9063 908.8368 906.14344 863.1952 779.603 655.78064 524.4269 406.14496 300.93488 213.76194 194.58443 256.33798 399.02255 590.93134 719.35926 774.3565 755.923 683.49976 585.47516 462.09265 314.62402 207.75876 177.75299 224.6067 339.1042 442.16983 515.6631 559.5841 581.73316 606.7809 636.54297 671.01954 691.03034 671.78186 613.175 516.5293 429.0335 374.25305 352.18784 362.3828 401.47418 468.7807 564.30237 660.1532 677.73816 612.32056 463.9005 310.7868 242.22481 258.30817 356.55396 470.778 571.5017 658.725 731.4131 782.92566 812.08045 818.8773 796.6747 728.77576 614.3755 453.47366 294.69305 186.62825 129.27927 122.533905 164.06998 252.96463 389.2179 556.4996 663.18146 695.0037 651.9667 571.45026 537.297 552.64527 617.4279 668.7958 651.6616 566.02527 417.32178 295.56924 232.67562 228.64092 271.0812 298.91757 303.89612 286.0168 265.47272 282.66055 338.70667 433.36307 505.0407 506.14475 436.67526 305.985 240.939 281.61044 427.99945 639.6581 740.4556 709.892 547.96735 337.8659 227.86217 220.86165 316.04474 418.38217 462.86063 449.4803 385.86877 358.2984 391.01563 484.0204 613.7208 689.09607 701.11225 649.7693 580.8791 567.075 609.2726 706.36194 782.739 792.4712 735.55854 619.0815 510.7766 427.544 369.38355 331.20425 295.55527 260.9777 227.47165 210.0529 229.8446 286.99463 380.27112 453.91257 477.76678 451.83377 382.01352 316.60037 266.2591 230.98976 206.85474 181.83855 155.10799 126.66312 109.312256 118.987435 155.73487 218.47603 272.17484 299.94428 301.78436 282.87494 279.83582 299.79733 342.75958 399.81622 446.7391 482.16168 506.0839 529.0727 562.6987 606.968 660.14374 679.582 646.94715 562.2394 434.6264 320.51788 229.55287 161.73145 120.22566 112.733574 139.59967 200.82007 260.7006 285.0086 273.74408 228.413 178.02503 133.70864 95.46387 67.6011 73.347855 116.167176 196.05905 303.58615 418.31528 539.54456 667.20514 762.91694 794.34095 761.4773 667.1634 555.4829 441.51675 325.26474 220.02103 188.8489 239.89356 373.15503 533.60865 615.02094 614.7165 533.0703 441.674 393.7815 389.39273 423.95624 439.24997 417.54047 358.82773 274.02847 208.87813 168.44426 152.72684 164.5084 208.56769 284.98694 393.15918 474.86285 491.77506 443.89587 340.97113 287.22553 310.84387 411.8261 566.3906 686.31067 763.2984 797.3539 782.45917 709.44214 578.20575 390.68936 260.83862 255.21308 373.81265 598.9809 770.68146 850.58826 838.7013 765.8395 733.50666 749.6781 814.3539 886.69465 911.6147 888.8162 818.75336 719.6037 600.8094 462.37058 311.16376 200.60012 141.96958 135.27219 169.8932 214.73805 267.79794 329.0728 380.76346 401.70453 391.85718 352.09705 308.00598 271.4156 242.3258 220.80843 207.34517 202.02545 204.8493 221.7695 268.31384 345.28937 452.69617 558.15857 627.9073 661.9386 660.8912 639.03437 602.2477 550.5311 493.41028 486.60123 539.15455 651.0702 779.0071 822.24506 776.6895 642.38947 513.0197 474.01514 525.37555 660.558 763.9007 792.9512 747.70954 640.5994 535.291 440.76938 357.03436 286.36578 233.48293 198.53025 181.51166 183.77313 206.39351 249.37285 312.70392 396.28455 500.0812 624.0939 755.0277 832.89527 850.4003 807.5431 740.42945 715.5817 734.45215 796.6075 841.6505 826.83106 752.1493 625.943 547.26337 544.8761 618.7812 742.2928 808.99036 807.8249 738.79627 631.16797 532.85157 444.53604 366.5617 325.2802 337.21768 402.37408 512.72327 588.0803 607.7896 571.8512 498.3711 451.35938 436.422 453.55878 488.24298 519.3879 546.81824 570.67206 597.8342 632.13984 673.5889 719.8099 750.6261 761.4406 752.2533 727.31464 699.9756 671.2077 641.0112 619.1289 618.05854 637.84717 678.1883 728.34955 783.01117 842.17316 899.19385 905.4683 851.23755 736.5015 592.43934 506.2087 482.98364 522.7641 566.55115 547.74994 466.30032 325.76117 219.01172 187.0545 229.88957 338.9094 459.48044 581.9802 706.4088 812.09327 847.56134 810.3802 700.5505 591.59925 556.15455 594.2162 699.8647 753.1727 706.97205 561.2627 345.5896 223.70038 220.75019 336.73895 516.3442 636.8455 693.7699 687.1498 642.2816 581.0548 503.46948 411.95706 345.92877 319.18964 331.73962 377.9746 430.62415 486.0596 544.281 588.0231 583.1787 528.82996 425.30533 346.07956 347.14658 428.50635 581.98505 699.1176 746.10114 722.93567 647.82056 598.85584 584.9656 606.1498 644.1024 666.6541 673.20435 663.9187 656.57935 663.16987 683.69007 716.2459 739.8856 748.8098 743.01844 729.5213 734.9411 761.86274 810.28626 851.5397 840.8863 777.7997 662.889 535.11707 417.77463 310.86173 220.55268 204.58908 277.13324 438.18515 642.22034 735.8127 706.4656 554.1792 361.8227 243.89511 201.11695 231.83364 265.10208 263.22455 226.20113 160.14295 113.92718 98.14264 112.789345 152.74542 202.66248 261.5089 329.28467 407.46863 497.86374 600.4741 714.1156 802.15406 847.2602 849.434 809.4038 732.1979 618.7744 469.13348 321.1204 275.70215 338.36478 509.10834 692.5847 786.72547 791.50135 711.168 645.60694 636.90796 685.07117 773.2175 799.9811 748.45215 618.63056 450.35815 338.32813 286.58908 295.13376 337.36 388.37268 448.17188 515.3039 562.9355 580.99305 569.4766 536.28376 522.9262 535.42804 573.7893 630.5661 689.9974 751.5718 815.2272 854.60694 848.05426 795.569 701.07074 623.03235 580.997 574.96485 595.78046 601.1122 585.6563 549.41297 493.72342 421.116 331.64993 225.52301 134.46678 81.485344 66.57866 87.93201 123.20965 165.77365 215.624 272.56665 335.80905 405.2663 480.93835 543.4987 560.56415 531.6256 457.45917 404.50497 415.4135 490.18478 618.4731 693.48945 687.0701 599.2151 452.0205 325.43997 226.719 155.8576 125.16992 152.9585 239.3951 383.34506 523.6952 625.61347 689.09974 715.2724 713.93934 687.3898 635.6237 576.337 566.4011 610.1128 707.47205 809.43616 851.5438 833.50336 757.06055 687.37226 657.47315 667.3633 710.0767 733.15735 725.80677 688.0249 624.2895 547.40375 458.15976 356.55762 286.4339 298.53638 392.93176 565.58204 705.2886 761.845 735.2513 638.2088 553.5532 496.25714 466.32062 465.99997 501.04074 571.72754 678.0603 781.52405 843.05597 862.6557 841.14747 796.02826 734.3361 656.0711 567.10004 500.79272 462.41647 451.97122 455.04645 438.94855 402.4203 345.48343 292.99158 267.00204 267.51483 292.7163 311.9659 314.28546 299.675 276.86023 289.37436 343.17786 438.2707 556.02027 658.7765 745.4598 816.0212 857.2512 858.83515 820.7726 747.5768 701.419 702.12244 749.6871 832.44507 899.10047 943.6109 965.97687 959.99756 914.5253 829.33545 704.70765 574.58674 462.3958 368.13513 293.0659 251.6242 247.90015 281.89368 338.1766 356.7596 331.62448 262.7712 182.39885 141.93297 142.04207 182.58933 253.99759 350.40805 471.82068 609.2989 676.5788 651.99347 535.543 365.26657 272.3562 267.88223 351.84457 459.38733 498.7314 469.21234 372.303 275.81757 216.62113 194.71366 208.23628 241.87456 292.22858 359.2983 428.6125 455.80838 437.78613 374.54562 300.38812 258.17535 248.03682 269.72815 315.2299 380.66193 466.0243 566.05414 643.3853 690.7138 708.03974 708.1101 725.70874 762.809 819.411 856.78516 832.3913 746.2062 600.6194 454.61423 333.6112 237.61038 168.627 139.08994 151.1279 204.74097 275.20877 302.4425 283.74365 220.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 721 365) (om-make-point 53 30) (list 0.5 1.5) "(.5 1.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 783 389) (om-make-point 38 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 733 97) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 656 95) (om-make-point 69 30) (list 99 300) "(99 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 588 99) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 613 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 764 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB 4" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 615 261) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8790671 3.529673 4.9518185 6.145502 7.157157 8.153806 9.150455 10.147103 11.143753 12.140401 13.13705 14.1337 15.130347 16.126997 17.123646 18.120295 19.116944 20.11359 21.110243 22.106892 23.103543 24.100192 25.096842 26.09349 27.09014 28.08679 29.083439 30.08009 31.076739 32.073388 33.070038 34.06669 35.06334 36.05999 37.05664 38.053288 39.04993 40.04658 41.04323 42.03987 43.03652 44.033173 45.029816 46.026467 47.023114 48.01976 49.016407 50.013058 51.0097 52.00635 53.003 53.99965 54.996296 55.992943 56.989594 57.98624 58.982884 59.979538 60.97618 61.972828 62.96947 63.966126 64.962776 65.95942 66.95607 67.95271 68.94936 69.94601 70.94266 71.93931 72.93596 73.9326 74.92925 75.9259 76.92255 77.9192 78.91585 79.91249 80.909134 81.90578 82.90243 83.89908 84.89573 85.89238 86.88902 87.88567 88.882325 89.87897 90.87562 91.87227 92.86891 93.86556 94.862206 95.858864 96.85551 97.85216 98.8488 99.84545 100.842095 101.838745 102.83538 103.83204 104.82869 105.82533 106.821976 107.818634 108.81528 109.81192 110.808586 111.805214 112.801865 113.79852 114.795166 115.79181 116.78845 117.7851 118.78176 119.77839 120.77504 121.7717 122.76834 123.764984 124.76163 125.758286 126.75494 127.751564 128.74823 129.74488 130.74153 131.73816 132.73482 133.73148 134.72812 135.72476 136.7214 137.71805 138.7147 139.71137 140.708 141.70465 142.70131 143.69795 144.6946 145.69124 146.6879 147.68454 148.68119 149.67784 150.67449 151.67115 152.66779 153.66443 154.66107 155.65775 156.65439 157.65103 158.64768 159.64432 160.64096 161.6376 162.63426 163.6309 164.62755 165.62419 166.62085 167.6175 168.61415 169.6108 170.60744 171.60408 172.60073 173.59738 174.59403 175.59067 176.58733 177.58397 178.58061 179.57726 180.57392 181.57056 182.5672 183.56386 184.56052 185.55716 186.55382 187.55046 188.5471 189.54375 190.54039 191.53705 192.53369 193.53034 194.527 195.52364 196.5203 197.51692 198.51357 199.51023 200.50688 201.50353 202.50017 203.49681 204.49346 205.49011 206.48676 207.4834 208.48006 209.47672 210.47336 211.47 212.46665 213.46329 214.45993 215.4566 216.45325 217.44989 218.44654 219.44319 220.43982 221.4365 222.43314 223.4298 224.42644 225.42308 226.4197 227.41634 228.413 229.40964 230.40631 231.40296 232.3996 233.39624 234.39289 235.38953 236.38617 237.38285 238.37949 239.37615 240.37279 241.3694 242.36605 243.36272 244.35935 245.356 246.35266 247.34932 248.34595 249.34262 250.33924 251.33588 252.33255 253.3292 254.32584 255.3225 256.31915 257.3158 258.31244 259.30908 260.30573 261.30237 262.29904 263.2957 264.29233 265.28897 266.2856 267.2823 268.27893 269.27557 270.27222 271.26886 272.26553 273.26218 274.25882 275.25546 276.2521 277.24875 278.24536 279.24204 280.23868 281.23532 282.232 283.22867 284.22534 285.222 286.21866 287.2153 288.21198 289.20868 290.20532 291.202 292.19864 293.1953 294.19196 295.18863 296.1853 297.18198 298.17862 299.1753 300.17197 301.16864 302.16528 303.16196 304.15863 305.1553 306.15195 307.1486 308.1453 309.14194 310.1386 311.13525 312.13196 313.1286 314.12527 315.12192 316.1186 317.11523 318.11194 319.10858 320.10522 321.1019 322.09857 323.0952 324.09192 325.08856 326.08524 327.08188 328.07855 329.0752 330.07184 331.06854 332.0652 333.0619 334.05853 335.0552 336.05188 337.04855 338.0452 339.04187 340.03854 341.03522 342.03186 343.02853 344.02518 345.02185 346.01852 347.01517 348.01187 349.0085 350.0052 351.00183 351.9985 352.99518 353.99182 354.98846 355.98514 356.98178 357.97845 358.97513 359.97183 360.96848 361.96515 362.96182 363.95847 364.9551 365.95178 366.94846 367.94513 368.9418 369.93848 370.93512 371.9318 372.92847 373.92514 374.92178 375.91846 376.91513 377.91177 378.90848 379.9051 380.90176 381.89844 382.89508 383.89175 384.8884 385.8851 386.88178 387.87842 388.87506 389.87177 390.86844 391.86505 392.86176 393.85837 394.85507 395.8517 396.8484 397.84503 398.8417 399.8384 400.83505 401.83173 402.82837 403.82504 404.82172 405.81836 406.81503 407.81168 408.80835 409.80505 410.80167 411.79834 412.795 413.7917 414.78833 415.785 416.78165 417.77838 418.775 419.77167 420.7683 421.765 422.7617 423.75836 424.75497 425.75162 426.7483 427.74496 428.74164 429.73834 430.735 431.73166 432.72833 433.72498 434.72165 435.7183 436.71497 437.7116 438.7083 439.70493 440.7016 441.69827 442.69495 443.69168 444.6883 445.68497 446.68164 447.6783 448.67493 449.67166 450.66827 451.66495 452.66162 453.6583 454.6549 455.6516 456.6482 457.64493 458.64154 459.6382 460.6349 461.63156 462.6282 463.62488 464.62155 465.6182 466.61484 467.6115 468.6082 469.60486 470.60153 471.5982 472.59494 473.5916 474.58817 475.5849 476.58157 477.57825 478.57486 479.57153 480.5682 481.56488 482.56143 483.55817 484.55484 485.5515 486.5482 487.5448 488.54153 489.53815 490.53482 491.5315 492.52817 493.5248 494.52148 495.51816 496.51483 497.51144 498.50812 499.5048 500.50147 501.49814 502.4948 503.49142 504.4881 505.48477 506.48145 507.47806 508.47473 509.4714 510.46814 511.4648 512.4614 513.4581 514.4548 515.4514 516.4481 517.44477 518.4414 519.4381 520.4348 521.43146 522.4281 523.4248 524.42145 525.4181 526.4148 527.41144 528.40815 529.4047 530.40137 531.3981 532.3947 533.39136 534.38807 535.3847 536.38135 537.37806 538.37476 539.3714 540.36805 541.3647 542.3614 543.35804 544.35474 545.3514 546.3481 547.3447 548.3414 549.338 550.3347 551.3313 552.32807 553.3247 554.32135 555.318 556.3147 557.31134 558.308 559.3047 560.3014 561.298 562.2947 563.2913 564.28797 565.28467 566.2814 567.278 568.27466 569.2713 570.268 571.26465 572.2613 573.25794 574.25464 575.2513 576.248 577.2446 578.24134 579.238 580.2346 581.2313 582.22797 583.2246 584.22126 585.2179 586.21454 587.21125 588.2079 589.2046 590.20124 591.1979 592.1946 593.1912 594.18787 595.18464 596.1813 597.1779 598.1746 599.1712 600.1679 601.16456 602.16126 603.1579 604.1546 605.15125 606.1479 607.1446 608.14124 609.13794 610.1346 611.13117 612.12787 613.1245 614.1212 615.11786 616.1145 617.1112 618.10785 619.10456 620.1012 621.09784 622.09455 623.0912 624.0878 625.08454 626.0812 627.0778 628.07447 629.0711 630.0678 631.06446 632.0611 633.05774 634.0545 635.05115 636.04786 637.0445 638.0412 639.0378 640.0344 641.0311 642.02784 643.0245 644.0212 645.0178 646.01447 647.01117 648.0078 649.0045 650.0011 650.99775 651.99445 652.9911 653.9878 654.98444 655.9811 656.9777 657.9744 658.97107 659.9678 660.96436 661.96106 662.95777 663.95447 664.9511 665.94776 666.94446 667.9411 668.9378 669.9344 670.9311 671.92774 672.9244 673.9211 674.9177 675.9144 676.911 677.9077 678.90436 679.9011 680.8977 681.89435 682.89106 683.8877 684.88446 685.88105 686.8778 687.8744 688.871 689.8677 690.8643 691.861 692.85767 693.8543 694.851 695.84766 696.84436 697.841 698.83765 699.8343 700.831 701.82764 702.82435 703.821 704.8177 705.81434 706.811 707.8077 708.8043 709.80097 710.7976 711.79425 712.79084 713.7876 714.78425 715.78095 716.7776 717.7743 718.771 719.7676 720.76435 721.7609 722.7576 723.7543 724.751 725.7476 726.74427 727.74097 728.7376 729.73426 730.7309 731.72754 732.72425 733.72095 734.7176 735.71424 736.71094 737.7076 738.7042 739.7009 740.6976 741.6942 742.6909 743.68757 744.6842 745.68085 746.67756 747.6742 748.6709 749.6676 750.66425 751.6609 752.65754 753.6542 754.65094 755.6475 756.6442 757.64087 758.6376 759.6342 760.63086 761.62757 762.6242 763.6209 764.61756 765.6142 766.61084 767.60755 768.6042 769.60096 770.59754 771.5942 772.5908 773.58747 774.5841 775.5808 776.5775 777.57416 778.5708 779.56745 780.5642 781.5608 782.5575 783.55414 784.55085 785.5475 786.5442 787.54084 788.5375 789.5341 790.5307 791.5274 792.5241 793.5207 794.5174 795.51404 796.51075 797.5074 798.5041 799.50074 800.49744 801.49415 802.4908 803.4874 804.48414 805.4808 806.4774 807.4741 808.47077 809.4674 810.4641 811.46076 812.4574 813.45405 814.4507 815.4474 816.44404 817.44074 818.43744 819.434 820.4307 821.42737 822.424 823.4207 824.41736 825.414 826.41065 827.4073 828.404 829.4007 830.3973 831.39405 832.3906 833.3873 834.384 835.3806 836.3773 837.374 838.37067 839.3673 840.364 841.3607 842.3573 843.354 844.35065 845.34736 846.344 847.3407 848.3373 849.334 850.3306 851.32734 852.324 853.3207 854.31727 855.3139 856.31067 857.30726 858.30396 859.30054 860.2973 861.29395 862.29065 863.28736 864.28394 865.28064 866.27735 867.274 868.2706 869.26734 870.264 871.2606 872.2573 873.2539 874.2506 875.2472 876.2439 877.2406 878.2372 879.2338 880.23047 881.2272 882.22394 883.2205 884.2173 885.2138 886.2105 887.20716 888.20386 889.2005 890.1972 891.19385 892.19056 893.1871 894.1839 895.18055 896.17725 897.1739 898.1706 899.16736 900.1639 901.16047 902.1572 903.1538 904.1505 905.1473 906.1439 907.1405 908.13715 909.13385 910.1305 911.1272 912.12384 913.12055 914.1171 915.1139 916.1104 917.1071 918.10376 919.10047 920.0971 921.0938 922.09046 923.08716 924.0838 925.0805 926.07715 927.07386 928.0705 929.0672 930.0637 931.0604 932.05707 933.05365 934.0504 935.0471 936.04364 937.04047 938.03724 939.03376 940.03046 941.0271 942.0238 943.02045 944.01716 945.01374 946.0105 947.007 948.00385 949.00037 949.9971 950.9937 951.9904 952.98707 953.98377 954.9803 955.9771 956.97376 957.97046 958.967 959.9637 960.9603 961.95704 962.9537 963.9504 964.9469 965.9437 966.94037 967.9371 968.9336 969.93036 970.92695 971.92365 972.9203 973.917 974.9135 975.91034 976.907 977.9036 978.9003 979.897 980.8937 981.8903 982.887 983.88367 984.88025 985.877 986.8737 987.87037 988.86707 989.8636 990.8604 991.85694 992.85364 993.8662 995.0623 996.48707 998.14014 1000.0)) (quote (159.0 295.40494 391.03415 445.88767 459.96542 438.71384 401.72488 350.75867 285.8152 208.873 156.50032 142.43372 166.67316 229.21866 301.7301 344.76007 358.04895 341.59677 301.8143 270.35895 251.5147 245.28147 251.68433 271.64905 305.6436 353.66794 415.7221 487.63617 561.5236 637.1976 714.6581 791.64777 852.3922 893.8523 916.0279 919.0333 916.2389 916.8073 920.7388 928.03296 932.20795 916.75965 880.87085 824.54175 751.111 695.3532 666.4989 664.5481 689.4975 721.7258 742.6043 752.1328 750.3114 739.2868 726.4347 712.3741 697.1049 681.535 681.078 701.27167 742.1157 803.6105 858.0832 868.80555 835.59955 758.4651 652.5915 589.39924 578.0173 618.4455 708.27326 768.5409 761.07685 685.881 542.95356 379.05484 278.73358 243.72689 274.0348 358.37293 422.07864 451.47183 446.5526 407.57605 358.33853 314.40817 275.78497 242.46892 220.65473 225.4313 257.47922 316.79843 397.98523 448.25204 454.2227 415.89706 333.29688 239.69362 165.11203 109.55203 73.01367 57.29079 68.27359 106.42262 171.73789 262.00674 342.5834 401.56366 438.94757 454.73508 452.14493 435.24847 404.0596 358.57822 309.66995 306.01813 353.49347 452.096 599.33985 722.6208 788.36396 796.5693 747.2368 668.3467 608.25715 567.8196 547.0343 543.50135 542.1687 540.4157 538.2423 535.8013 544.73804 572.3286 618.573 683.4712 744.90375 751.3273 700.6333 592.8218 436.14398 306.34308 221.73162 182.30971 188.05191 221.21575 266.57025 324.11542 393.8512 467.45084 518.779 545.936 548.9219 529.21357 508.2038 492.92163 483.36694 479.53976 469.13333 437.31964 384.0673 309.3762 221.33303 154.48247 112.74888 96.13223 104.85177 144.6572 218.09201 325.1562 465.84982 611.76 715.9637 777.76276 797.1572 780.0345 761.4292 747.1327 737.14496 731.3564 722.79395 707.2954 684.8608 655.4902 616.04157 559.5112 485.64063 394.4299 291.884 229.87004 220.34944 263.32217 358.6506 450.8942 494.743 490.19705 437.25626 359.44846 327.37946 345.80713 414.73145 528.43427 610.056 635.4536 604.6271 517.5765 417.23096 352.82263 324.40823 331.9878 371.2035 424.29724 489.37146 566.42615 654.02057 718.0186 743.97315 731.88465 681.75287 615.73267 568.7757 541.3133 533.34534 539.51825 529.5747 498.77042 447.1054 374.93353 301.36908 237.31545 182.77266 137.74066 113.227455 132.7074 196.95648 305.9747 453.16657 584.8386 689.18677 766.2112 815.88416 830.9832 805.8846 740.5884 635.0945 503.45905 386.02078 285.29218 201.27317 134.0094 84.07198 51.63235 36.69052 39.246476 66.86348 127.79076 222.03214 349.58765 489.94363 563.3219 561.71717 485.1294 337.90247 213.51755 149.82318 146.81934 204.50605 283.64374 325.12012 328.34305 293.31256 231.96695 208.4364 232.2497 303.40686 420.5727 521.67017 572.84894 574.1091 525.4506 449.41904 392.0015 354.552 337.07062 336.65692 331.02994 315.52402 290.13913 255.0057 234.36348 246.19571 290.5024 367.28357 456.27542 501.89487 500.9571 453.46216 363.9103 284.71585 230.90195 202.46854 199.41565 207.10276 210.37694 209.23715 203.68332 198.71501 212.86837 247.88317 303.75937 379.43265 454.0706 519.61786 576.07435 623.44007 649.66394 637.45307 586.6722 497.3213 378.70306 278.2359 202.57128 151.70914 125.89742 135.10157 184.50466 274.10672 403.90775 543.8776 635.5899 677.53956 669.72657 620.0005 585.15406 576.47644 593.9676 637.37116 671.5924 671.8678 638.19745 570.5813 480.62476 398.696 326.38345 263.68716 212.40326 192.00733 207.81671 259.83145 348.05057 435.70886 486.79398 501.30594 479.2447 434.02908 413.04602 420.43872 456.20715 518.3884 571.94867 603.9645 614.43567 603.36237 576.74567 542.777 501.50418 452.9273 405.581 400.75406 443.9031 535.02826 671.7879 771.97596 794.8139 740.3015 608.439 454.11945 379.18616 385.91196 474.2968 627.3595 729.22785 758.0549 713.8406 597.10144 462.3242 346.09628 248.4177 169.28844 108.941086 67.95622 46.36146 44.156788 60.180233 82.67559 108.58653 137.91309 170.65761 213.71575 273.484 349.96246 443.15106 540.3496 598.82447 615.1034 589.18665 524.2459 472.11993 451.0496 461.0349 502.0759 550.4425 575.3419 576.64734 554.3589 516.50446 499.9697 509.34097 544.61817 604.27717 641.1273 632.8391 579.4125 480.84732 374.2688 325.3427 335.32254 404.2083 521.5879 620.37244 688.57416 726.19324 733.37977 722.76777 702.43445 672.37977 632.60376 590.20984 562.1178 549.0542 551.01935 566.2932 578.60425 583.9264 582.25977 573.6158 569.3682 579.5186 604.06714 643.0137 683.9438 687.04224 649.3112 570.7506 455.57126 367.03284 326.36536 333.56885 388.64328 466.3256 535.47327 596.0031 647.91517 687.30195 697.1004 675.3179 621.9541 538.76075 473.9499 449.28546 464.76743 520.3958 582.1769 592.80494 551.35816 457.8367 326.0734 240.32686 214.85248 249.65027 343.9783 446.82718 527.133 584.896 620.11597 628.9774 602.80896 541.27594 444.37845 321.06055 250.60086 251.65856 324.23364 468.16983 605.5498 671.3598 665.5999 588.27 461.93756 355.6066 274.0782 217.35225 185.42607 178.2619 195.84772 238.18349 305.2692 373.371 414.71555 429.2608 417.0067 382.35776 343.6035 302.7473 259.78925 215.53347 189.80242 191.13343 219.52646 274.98157 346.27908 415.39908 482.102 546.3877 604.3254 633.2571 629.5567 593.2241 524.7581 452.77225 393.87076 348.05362 315.3209 290.66538 263.23117 232.6441 198.90418 163.24282 135.90389 119.1796 113.06993 117.58088 134.5268 165.34529 210.03638 268.60004 334.3634 387.8688 427.86945 454.36545 467.66766 471.76572 467.87656 456.00012 436.1364 421.58038 427.08765 452.66812 498.32175 559.8889 620.9343 679.77265 736.404 790.4709 834.0331 863.82776 879.855 882.1147 868.13025 834.1133 780.02314 705.85987 619.5928 564.7377 547.8745 569.00336 626.92206 663.0952 645.14435 573.06934 446.87018 298.9838 196.49967 141.46607 133.88303 170.96842 230.96578 309.24973 405.82025 520.5079 618.48676 673.5342 685.6502 654.8347 591.2384 523.0918 452.05505 378.12827 303.47324 253.81412 236.62953 251.91934 299.68366 357.43683 401.53137 431.9635 448.73322 458.38657 485.5446 532.5656 599.4496 683.3318 726.55237 706.5055 623.19135 476.60962 324.00684 248.73297 251.49243 332.2852 474.55414 592.58686 674.15137 719.2478 728.23346 716.08057 690.68567 652.0487 600.1698 551.096 536.4855 557.187 613.20057 698.4969 768.68647 814.80915 836.8651 834.89814 815.46644 783.2656 738.2958 680.55677 611.39167 534.36304 449.6624 357.28986 260.01932 188.5578 151.40991 148.57566 180.055 228.20468 275.46106 321.8241 367.29388 406.93918 423.09644 414.18842 380.2152 324.29947 303.67554 339.75055 432.52448 581.9974 745.96125 865.9486 941.5857 972.87256 967.1644 960.59034 958.00977 959.4228 964.1606 947.8098 898.0913 815.005 698.5509 575.2074 494.7905 458.46106 466.21918 510.66165 540.40455 545.6078 526.27124 482.7575 456.23212 474.74 538.28125 646.85596 771.0051 836.1643 838.6866 778.5721 661.86664 550.98084 462.37524 396.04984 352.00226 319.22354 287.33814 256.34604 226.24726 202.49115 203.67484 231.34253 285.49426 363.65808 424.3952 452.9206 449.23428 413.33624 380.44428 396.9443 463.04932 578.7594 725.1887 814.2482 834.7856 786.8008 672.08625 548.1652 442.63593 355.49832 286.75235 243.84476 240.13317 275.88483 351.0998 454.96335 516.6199 523.2065 474.7231 371.79794 270.72324 208.0083 183.6532 197.65792 246.7847 323.2146 426.6015 556.9453 708.3998 824.56604 891.28486 908.5564 876.3988 818.0623 754.31336 685.15204 610.57825 541.7831 515.1654 533.52857 596.87244 701.8474 796.8876 864.44544 904.52076 917.1136 910.09925 893.33326 866.8462 830.6376 783.6055 720.8649 641.8345 546.5143 436.1928 347.54855 297.36923 285.6548 312.40524 367.605 434.12994 511.68988 600.2848 692.8565 745.70185 751.3069 709.6716 621.60114 545.6841 518.11097 538.88166 607.9962 702.2287 768.06415 803.3694 808.14454 782.63074 729.00867 647.79914 539.002 402.69495 285.00412 225.01067 222.71453 278.11575 366.17807 409.27173 401.86707 343.96405 242.04737 188.10343 211.9826 313.68488 493.21027 678.2312 782.8006 806.76185 750.115 628.88 510.56534 402.70767 305.30704 218.52567 146.49349 91.0138 52.08664 29.71199 37.125393 95.8892 206.30738 368.37988 566.3976 708.3409 779.23975 779.0941 708.9304 630.7211 580.9402 559.5876 566.6632 583.0029 566.47846 515.58796 430.33118 319.50467 257.6445 261.67908 331.6085 467.28012 615.8637 734.86286 824.2777 884.10834 917.6079 934.39624 935.1051 919.73414 887.2543 824.16456 726.2883 593.6255 426.17612 284.38007 236.37381 282.2177 421.91174 624.2455 764.09845 828.3878 817.1135 732.5431 626.5648 520.7967 415.23886 309.89114 217.59658 158.28333 132.1802 139.28722 174.88227 212.77103 248.92568 283.34628 316.02564 346.59805 374.85837 400.80658 424.4427 439.37164 432.1823 402.45 350.17477 279.45004 222.8678 187.4623 173.2335 180.17545 206.92139 252.42688 316.69183 399.71637 494.38892 580.655 657.30506 724.3388 779.8075 800.01496 777.9741 713.68494 607.1474 492.9052 407.86954 352.05038 325.4477 320.73947 309.98657 290.45825 262.15442 225.43323 187.70908 151.92922 118.09359 86.20224 65.83338 71.13664 102.240815 159.14589 234.83177 292.38712 326.45367 337.03143 325.039 330.6543 375.36505 459.17126 582.07294 708.5473 767.53467 757.054 677.10547 538.0167 417.17093 330.42856 277.78964 259.15448 258.2987 263.43335 274.55844 291.67395 310.8236 321.36502 322.71057 314.8603 300.574 311.04874 355.04895 432.57452 543.6255 655.6823 735.84296 784.1072 800.475 785.2109 739.2765 662.75934 555.65937 421.11743 318.27246 269.55157 274.95477 334.4821 417.00293 478.75714 519.43976 539.0507 540.7726 540.47925 540.34357 540.36554 540.71814 547.96827 565.4652 593.209 631.1996 663.517 659.78937 619.27845 541.9841 438.40564 382.67712 389.21765 458.02713 588.52814 710.0356 773.6879 779.48536 727.4278 645.0447 602.98487 604.80237 650.49714 733.2155 780.7595 773.8117 712.37195 598.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.9254677 3.7306872 5.415658 6.98038 8.424853 9.749079 10.953054 12.036782 13.033525 14.026321 15.019117 16.011914 17.004712 17.997508 18.990303 19.9831 20.975897 21.968693 22.961489 23.954287 24.947083 25.939879 26.932677 27.925473 28.918269 29.911063 30.903862 31.896656 32.889454 33.882248 34.875046 35.86784 36.86064 37.853436 38.84623 39.839028 40.83182 41.824616 42.817406 43.810204 44.802994 45.79579 46.788586 47.781384 48.774178 49.766976 50.759766 51.75256 52.745354 53.73815 54.73094 55.723732 56.716534 57.70933 58.70212 59.694916 60.687714 61.680504 62.6733 63.666096 64.65889 65.65168 66.64448 67.63727 68.630066 69.62286 70.61566 71.60846 72.60125 73.594055 74.58685 75.57965 76.57245 77.56525 78.558045 79.55084 80.54365 81.53644 82.529236 83.52203 84.51483 85.50764 86.50043 87.49323 88.48603 89.478836 90.47163 91.464424 92.45723 93.45003 94.44282 95.435616 96.42841 97.42122 98.41402 99.406815 100.39961 101.39241 102.38521 103.378006 104.370804 105.3636 106.35641 107.349205 108.341996 109.33479 110.3276 111.3204 112.3132 113.306 114.2988 115.29159 116.28439 117.27717 118.26999 119.26278 120.25557 121.248375 122.241165 123.23397 124.22677 125.21957 126.21237 127.20517 128.19797 129.19077 130.18357 131.17636 132.16916 133.16196 134.15476 135.14756 136.14035 137.13315 138.12593 139.11873 140.11153 141.10431 142.0971 143.0899 144.08267 145.07547 146.06827 147.06104 148.05385 149.04663 150.03943 151.03223 152.025 153.01779 154.01059 155.00337 155.99617 156.98896 157.98175 158.97454 159.96732 160.96013 161.95291 162.9457 163.93849 164.93128 165.92407 166.91686 167.90964 168.90244 169.89524 170.88803 171.88083 172.8736 173.8664 174.85919 175.85198 176.84476 177.83756 178.83036 179.82315 180.81594 181.80873 182.80152 183.79431 184.7871 185.77988 186.77268 187.76546 188.75827 189.75104 190.74385 191.73664 192.72942 193.72222 194.71501 195.70778 196.70059 197.69339 198.68616 199.67896 200.67176 201.66455 202.65732 203.6501 204.6429 205.6357 206.62848 207.62128 208.61408 209.60686 210.59967 211.59246 212.58524 213.57804 214.57083 215.5636 216.5564 217.5492 218.54198 219.53478 220.52758 221.52036 222.51316 223.50592 224.4987 225.4915 226.48429 227.47711 228.46988 229.46266 230.45546 231.44824 232.44104 233.43384 234.42662 235.41942 236.4122 237.40497 238.3978 239.39055 240.38338 241.37616 242.36896 243.36176 244.3545 245.3473 246.34012 247.33289 248.32569 249.31847 250.31127 251.30406 252.29685 253.28964 254.28243 255.27526 256.268 257.2608 258.25357 259.24637 260.23917 261.23196 262.22473 263.21753 264.21033 265.20313 266.19592 267.1887 268.18152 269.17426 270.16708 271.15985 272.15265 273.14545 274.13824 275.13104 276.12384 277.1166 278.10944 279.1022 280.095 281.0878 282.08057 283.07336 284.06616 285.05896 286.05173 287.04456 288.03732 289.03012 290.02292 291.0157 292.00848 293.00128 293.99408 294.98688 295.97965 296.97244 297.96524 298.958 299.9508 300.9436 301.93637 302.92914 303.92197 304.91476 305.90753 306.90033 307.89313 308.8859 309.8787 310.87152 311.8643 312.85706 313.84985 314.84265 315.83542 316.82822 317.821 318.81378 319.80658 320.79938 321.79218 322.78497 323.77774 324.77054 325.76334 326.75613 327.7489 328.7417 329.7345 330.7273 331.7201 332.7129 333.7057 334.6985 335.69125 336.68405 337.67685 338.66965 339.6624 340.65524 341.64804 342.6408 343.6336 344.6264 345.61914 346.61194 347.60474 348.5975 349.59033 350.58313 351.5759 352.56873 353.5615 354.5543 355.54706 356.53986 357.53265 358.52545 359.51828 360.51105 361.50378 362.4966 363.4894 364.48218 365.47498 366.46774 367.46057 368.45334 369.44614 370.43897 371.43173 372.4245 373.41733 374.41013 375.4029 376.39572 377.3885 378.3813 379.37408 380.36682 381.35965 382.35245 383.3452 384.338 385.3308 386.3236 387.3164 388.30917 389.30197 390.29474 391.28754 392.28033 393.27307 394.2659 395.2587 396.25153 397.2443 398.23706 399.22986 400.22263 401.21542 402.20822 403.201 404.19382 405.1866 406.17938 407.1722 408.16498 409.15778 410.15054 411.14334 412.13614 413.1289 414.1217 415.11447 416.1073 417.10007 418.09287 419.08566 420.07846 421.07126 422.06406 423.05682 424.04962 425.04245 426.03522 427.028 428.0208 429.0136 430.00638 430.99915 431.99197 432.98474 433.97754 434.97034 435.9631 436.9559 437.9487 438.9415 439.9343 440.92703 441.9199 442.9127 443.90543 444.89825 445.891 446.8838 447.8766 448.86945 449.86218 450.85495 451.84775 452.84055 453.83334 454.82614 455.8189 456.8117 457.8045 458.7973 459.7901 460.78287 461.77564 462.7684 463.7612 464.754 465.7468 466.73962 467.73242 468.72516 469.71796 470.71075 471.70355 472.69632 473.68912 474.68198 475.67474 476.6675 477.66034 478.65308 479.64587 480.63867 481.6315 482.62424 483.61704 484.6099 485.60266 486.59546 487.5882 488.581 489.57385 490.5666 491.5594 492.55215 493.54495 494.53775 495.53058 496.52338 497.5161 498.5089 499.5017 500.4945 501.4873 502.48007 503.47287 504.46567 505.45847 506.45126 507.44403 508.43683 509.42957 510.42242 511.41522 512.40796 513.40076 514.39356 515.38636 516.37915 517.37195 518.3647 519.35755 520.3503 521.3431 522.3359 523.3287 524.3215 525.3143 526.307 527.29987 528.2926 529.2854 530.2782 531.27106 532.26386 533.2567 534.2495 535.2423 536.23517 537.22797 538.22077 539.2136 540.2064 541.1993 542.1921 543.18494 544.17774 545.1706 546.1633 547.1562 548.149 549.14185 550.13465 551.1275 552.12037 553.11316 554.106 555.0988 556.0916 557.0844 558.07734 559.07007 560.0629 561.0557 562.0486 563.0414 564.0342 565.02704 566.0199 567.0127 568.0055 568.9983 569.99115 570.98395 571.9768 572.9696 573.9624 574.95527 575.9481 576.9409 577.9338 578.9265 579.9194 580.9122 581.905 582.8978 583.8906 584.8834 585.8763 586.86915 587.8619 588.8548 589.84754 590.8404 591.8332 592.82605 593.81885 594.8117 595.8045 596.7973 597.79017 598.78296 599.77576 600.7686 601.76136 602.7542 603.7471 604.7399 605.7328 606.7255 607.7183 608.7112 609.704 610.6968 611.68964 612.68244 613.6753 614.6681 615.6609 616.65375 617.64655 618.6394 619.6322 620.62507 621.61786 622.61066 623.6035 624.5963 625.5891 626.5819 627.57477 628.56757 629.5604 630.5532 631.546 632.5388 633.5316 634.5245 635.5173 636.5101 637.5029 638.4957 639.4885 640.4814 641.47425 642.46705 643.45984 644.4527 645.44556 646.43836 647.43116 648.424 649.4169 650.40967 651.40247 652.3953 653.3881 654.3809 655.3738 656.36664 657.35944 658.35224 659.34504 660.3379 661.3307 662.32355 663.3164 664.3092 665.30207 666.2948 667.2877 668.2805 669.2733 670.2662 671.259 672.2518 673.24457 674.2374 675.2302 676.2231 677.2158 678.20874 679.20154 680.1944 681.18714 682.18 683.17286 684.16565 685.15845 686.1513 687.14417 688.13697 689.1297 690.12256 691.1154 692.1083 693.1011 694.0938 695.0867 696.0795 697.0723 698.0652 699.058 700.0508 701.04364 702.0364 703.0293 704.02204 705.0149 706.00776 707.00055 707.9934 708.9862 709.97907 710.9718 711.96467 712.9574 713.9503 714.9431 715.9359 716.9287 717.9216 718.9144 719.9072 720.9 721.8929 722.8857 723.8785 724.87134 725.86414 726.85694 727.8498 728.8425 729.83545 730.82825 731.82105 732.8139 733.80665 734.7995 735.79236 736.78516 737.77796 738.77076 739.7636 740.7565 741.74927 742.74207 743.7349 744.7278 745.7206 746.7134 747.7063 748.6991 749.6919 750.6847 751.67756 752.6704 753.66315 754.656 755.6488 756.64167 757.6345 758.6273 759.6201 760.6129 761.6058 762.5986 763.5914 764.5842 765.577 766.5699 767.5627 768.5555 769.54834 770.54114 771.534 772.5268 773.51966 774.51246 775.5053 776.4981 777.4909 778.48377 779.4765 780.4694 781.46216 782.455 783.4479 784.4407 785.43354 786.42634 787.41907 788.4119 789.4048 790.3976 791.3904 792.38324 793.3761 794.36884 795.3617 796.35456 797.3473 798.3401 799.333 800.3258 801.31867 802.31147 803.3043 804.29706 805.28986 806.2827 807.2755 808.2683 809.2612 810.2541 811.2468 812.2397 813.2324 814.2253 815.21814 816.21094 817.2038 818.1966 819.1894 820.1822 821.1751 822.16785 823.16065 824.1535 825.1463 826.1392 827.13196 828.1248 829.1176 830.1105 831.1033 832.09607 833.0889 834.0817 835.0746 836.0674 837.06025 838.05304 839.04584 840.0387 841.0315 842.0243 843.0171 844.00995 845.00275 845.99555 846.9884 847.98127 848.97406 849.9669 850.9597 851.9526 852.9454 853.9382 854.931 855.9238 856.9167 857.90955 858.90235 859.89515 860.888 861.8808 862.87354 863.86646 864.85926 865.85206 866.84485 867.83765 868.8305 869.82337 870.81617 871.80896 872.80176 873.7946 874.7875 875.7803 876.77314 877.76587 878.7587 879.7516 880.7444 881.7372 882.7301 883.72284 884.71564 885.70844 886.70136 887.69416 888.68696 889.67975 890.6726 891.6654 892.6583 893.651 894.64386 895.63666 896.62946 897.62226 898.6152 899.608 900.60077 901.5936 902.5864 903.5792 904.57215 905.56495 906.5577 907.5505 908.5433 909.5362 910.529 911.52186 912.51465 913.50745 914.50037 915.49317 916.48597 917.4788 918.4716 919.4643 920.45734 921.45014 922.4429 923.43567 924.42847 925.4214 926.4142 927.407 928.3998 929.39264 930.38544 931.37824 932.37116 933.3639 934.3567 935.3495 936.3424 937.3352 938.328 939.32087 940.31366 941.3066 942.2994 943.2922 944.285 945.2777 946.2705 947.2633 948.2562 949.249 950.2418 951.2347 952.2275 953.2204 954.2132 955.20606 956.19886 957.1918 958.18445 959.17737 960.17017 961.1629 962.1557 963.1485 964.1414 965.1343 966.1271 967.1199 968.1127 969.10547 970.0984 971.0912 972.0839 973.07685 974.06965 975.06244 976.05536 977.0481 978.0409 979.0337 980.0266 981.0194 982.0122 983.005 983.99787 984.9908 985.9836 986.9764 987.97345 989.0583 990.26355 991.5892 993.0347 994.60077 996.287 998.09345 1000.0)) (quote (532.0 576.8874 604.47846 614.7732 607.77167 583.47376 541.8795 482.98904 406.80228 322.7299 254.26515 202.52458 167.5082 149.216 147.64801 162.80419 194.68456 240.89458 286.33057 328.3484 366.94803 402.12946 433.89276 462.2378 487.16467 508.47302 521.09125 522.8093 513.6274 493.54538 462.56332 420.68118 367.899 304.21677 241.3403 192.17314 156.7227 134.98896 126.97194 132.67163 152.08802 185.22113 228.75669 273.69336 319.52487 366.2513 413.87262 462.38876 511.79993 562.10584 612.273 655.0748 689.1185 714.40406 730.93146 738.7007 737.71174 727.9646 709.72016 691.09144 675.92487 664.2206 655.9784 651.19837 649.8806 652.025 657.6316 664.7062 670.8327 676.0056 680.2249 683.4907 685.80286 687.1615 687.5665 687.9336 690.9689 696.85035 705.5778 717.15137 731.57105 748.8367 768.94837 790.3173 800.5849 797.1357 779.9697 749.08686 704.48725 646.1707 574.1373 488.86722 409.19583 344.8403 295.8007 262.07697 243.66912 240.57715 252.8011 280.34094 312.36115 334.47543 346.61383 348.77637 340.963 323.1738 295.4087 257.6678 215.00077 183.66075 164.8786 158.65433 164.9879 183.87934 215.32863 259.3358 314.8182 372.3648 429.79407 487.10596 544.3004 601.37757 658.3374 715.1798 771.7414 819.6439 854.1818 875.3549 883.1633 877.607 858.6859 826.4001 780.74964 729.8615 685.5358 647.87037 616.86524 592.52027 574.8356 563.81116 559.447 560.8559 564.9255 571.38636 580.23835 591.4817 605.1162 621.14197 639.55896 659.73957 675.5489 685.4314 689.38715 687.41626 679.51856 665.6941 645.9429 620.3962 598.2795 585.2437 581.2887 586.41456 600.6212 623.9087 656.277 697.7262 740.2413 771.1076 790.1645 797.41187 792.84974 776.47815 748.29706 708.3065 661.2871 625.5535 602.90577 593.3438 596.86756 613.4771 643.1725 685.9536 739.9065 783.841 811.8877 824.04664 820.31775 800.70105 765.19654 713.8043 646.7009 582.1872 532.5049 497.65418 477.63498 472.44724 482.09122 506.5666 545.87354 593.24445 636.96467 676.82654 712.83027 744.9757 773.2629 797.6918 818.2624 833.2001 835.06904 823.04535 797.12897 757.32007 703.61847 636.0242 554.5373 461.0498 379.46722 317.01465 273.69193 249.49912 244.4362 258.50317 291.7 343.90903 395.10428 430.6317 450.4915 454.6834 443.20776 416.06427 373.25308 314.77414 248.94547 191.46186 142.69234 102.63687 71.2955 48.6682 34.754982 29.555842 33.766118 50.57773 80.38709 123.19422 178.99912 247.80179 329.6022 424.4004 530.2213 618.32605 679.2469 712.9839 719.5372 698.9066 651.09217 576.09394 473.99915 374.25327 300.47354 252.66005 230.81273 234.9316 265.01666 321.06787 403.08533 499.11383 584.58387 658.75776 721.6357 773.2176 813.5034 842.4933 860.18714 867.2946 867.3931 860.9781 848.04944 828.6073 802.6516 770.1823 731.19947 686.3389 646.3716 615.16224 592.7111 579.01795 574.08295 577.90607 590.4872 611.8224 637.7575 664.6314 692.44434 721.19605 750.8867 781.51624 813.0846 845.592 876.6968 901.16016 918.78724 929.5781 933.53266 930.6508 920.93287 904.3785 881.1978 852.5567 818.6344 779.4308 734.9459 685.1798 630.1324 569.8037 504.6637 444.10068 391.78226 347.70847 311.87933 284.29483 264.95496 253.85976 251.00913 256.41803 270.1009 292.05777 322.28857 360.79337 407.57214 462.62488 525.9516 593.21155 653.83307 707.3396 753.731 793.00757 825.16907 850.21546 868.14686 879.17334 884.5823 884.5925 879.20417 868.41724 852.2316 830.64747 803.6647 771.45234 738.06067 705.2118 672.9056 641.14234 609.9218 579.24415 549.1092 519.5171 489.26434 457.0609 422.90637 386.80066 348.7438 308.73584 266.7768 222.86655 180.803 150.6541 132.96018 127.72122 134.93723 154.6082 186.73416 231.31508 285.8068 332.94513 369.4916 395.44617 410.80893 415.5798 409.75885 393.34598 366.747 341.839 324.1194 313.5881 310.2452 314.0907 325.12457 343.34686 368.7575 396.4015 420.43173 440.8385 457.62164 470.7813 480.31747 486.23004 488.51913 486.3517 477.32327 461.28253 438.22946 408.16397 371.0862 326.99612 275.89365 219.28736 168.56266 126.06792 91.803154 65.76836 47.963517 38.388638 37.043717 43.814934 54.525166 67.06917 81.446946 97.65848 115.7038 135.58289 157.29575 180.84235 208.6843 244.00977 286.83167 337.15006 394.96487 460.2761 533.08387 613.38807 695.35346 760.62757 807.872 837.0869 848.27216 841.4278 816.5537 773.65015 714.5017 654.1625 596.03846 540.1297 486.43597 434.95752 385.6943 338.64624 293.87293 254.20537 221.19803 194.85099 175.16417 162.13762 155.77133 156.06529 163.0195 176.1266 194.66696 218.63526 248.03153 282.85577 323.10797 368.78812 419.89624 473.1757 517.45777 551.8082 576.22687 590.7139 595.26917 589.8928 574.5847 549.95246 521.7525 491.41068 458.927 424.3015 387.53415 348.62497 307.5739 264.49207 226.53148 197.97441 178.82096 169.07106 168.72473 177.78199 196.24283 224.10723 259.4902 299.4691 344.0103 393.114 446.78015 505.00867 567.7996 635.153 704.2412 764.4785 814.8575 855.3781 886.04035 906.8443 917.78986 918.87714 910.9362 902.86145 897.06055 893.53357 892.2804 893.3011 896.5957 902.1642 909.97815 917.4023 922.7139 925.91315 926.9998 925.974 922.8356 917.5847 910.2213 901.4898 892.6497 883.7214 874.7053 865.601 856.4088 847.1285 837.76026 828.4684 819.92536 812.204 805.3042 799.226 793.96936 789.5343 785.9209 783.15 781.4773 780.9783 781.65296 783.50135 786.52344 790.7191 796.08857 802.5795 802.57636 790.64557 766.7872 731.0013 683.28766 623.64655 552.0778 468.58145 380.88413 303.2059 235.85614 178.83484 132.14197 95.77754 69.74156 54.03402 47.596405 45.702214 47.783886 53.841423 63.87482 77.884095 95.86922 117.830216 143.51415 169.40236 194.36632 218.40599 241.52136 263.7125 284.9793 305.3219 324.7262 339.52115 346.8485 346.70825 339.10046 324.02512 301.48212 271.47156 233.99343 193.42018 158.4874 129.43773 106.27115 88.987686 77.587326 72.07007 72.43593 79.58109 97.87922 127.91422 169.68611 223.19486 288.4405 365.42297 454.14236 553.2636 641.3817 711.04364 762.2493 794.9987 809.2919 805.12885 782.50965 741.4543 694.6864 653.0388 616.5114 585.10425 558.8172 537.6504 521.6039 510.6775 505.0071 504.88687 510.32706 521.3276 537.88837 560.0096 587.69104 620.93287 657.6256 686.49286 705.8679 715.7508 716.1414 707.03986 688.44617 660.36017 623.5877 593.1863 574.8445 568.56226 574.3397 592.17676 622.0735 664.02985 718.0428 773.80915 821.7118 861.7506 893.9259 918.23737 934.68525 943.2693 943.98975 937.68854 926.346 910.04456 888.78437 862.56525 831.3873 795.2506 754.155 709.69947 671.2692 640.3946 617.0757 601.31226 593.1045 592.45234 599.35584 613.5482 629.14124 643.722 657.2904 669.84656 681.39045 691.922 701.44117 709.9481 719.3108 731.4463 746.35456 764.03577 784.4897 807.71656 833.7162 862.48865 889.00245 900.42597 896.1222 876.09095 840.3322 788.8462 721.6328 638.69196 543.45795 458.13647 386.70865 329.17426 285.5334 255.78604 239.93222 237.97191 249.41138 261.1551 267.3825 268.09357 263.2883 252.96674 237.1288 215.77452 188.90396 160.66155 135.71604 114.071526 95.72801 80.685486 68.94396 60.503434 55.363903 54.974678 63.345368 80.709435 107.06687 142.4177 186.76189 240.09944 302.43042 372.31543 439.46906 501.86923 559.516 612.40937 660.5493 703.9357 742.5687 776.3217 801.0731 814.8358 817.6099 809.3953 790.19214 760.0003 718.8199 666.65076 609.9674 556.7544 507.0331 460.80353 418.06574 378.8196 343.06522 310.80255 283.1341 263.37018 251.73403 248.22568 252.8451 265.59232 286.4673 315.4701 350.75055 377.63986 392.98306 396.78006 389.0309 369.7357 338.89426 296.5067 242.91695 192.20162 151.72672 121.492226 101.49816 91.74451 92.23129 102.95848 123.9261 148.02983 165.7002 176.88591 181.58705 179.80355 171.53543 156.78269 135.54534 111.82858 98.69215 97.145874 107.18975 128.82379 162.04799 206.86237 263.26688 330.01773 396.12225 458.99908 518.6483 575.06995 628.2639 678.2303 724.96894 768.44404 806.74207 838.7756 864.54444 884.0489 897.28864 904.26386 904.97455 899.42066 887.2357 867.88135 841.3528 807.65 766.7732 718.7221 663.49695 601.09754 535.9957 484.0399 446.62308 423.7453 415.40662 421.607 442.3464 477.6248 525.9978 573.161 615.4534 652.8751 685.42597 713.106 735.9152 753.85364 766.90076 773.5637 772.92054 764.9711 749.71546 727.1536 697.28565 660.1113 615.6309 571.68055 540.78547 523.109 518.65125 527.4121 549.3916 584.5898 633.0066 690.3241 739.8892 780.05024 810.80707 832.1597 844.1083 846.6526 839.7927 823.5807 798.59534 764.99805 722.7889 671.9677 612.5346 544.4896 467.83273 382.75198 309.20917 260.62183 236.99002 238.31377 264.593 315.82776 392.01807 493.1639 603.36384 694.9875 767.5386 821.01734 855.42365 870.75757 867.0191 844.2082 805.93964 767.4043 730.29194 694.6028 660.3367 627.49366 596.0737 566.07697 537.48737 510.1031 483.8633 458.76773 434.8166 412.00977 390.34732 369.8292 350.48087 336.6655 331.5794 335.2226 347.5951 368.6969 398.52798 437.08838 484.37805 532.08967 564.5455 581.37647 582.5828 568.1645 538.12146 492.4536 431.1611 360.43295 308.65814 279.35944 272.53687 288.19037 326.31998 386.92572 470.0075 573.6554 670.15 750.3745 814.32874 862.0127 893.4264 908.56995 907.4431 890.06244 861.7738 826.8539 785.30274 737.12006 682.3061 620.8609 552.78437 478.07642 404.72574 349.09515 311.67133 292.4544 291.44424 308.64093 344.04443 397.65472 465.9986 531.65217 592.21485 647.68665 698.0676 743.35767 783.5569 818.6652 848.44507 868.9091 878.63385 877.61957 865.86585 843.37305 810.1408 766.1695 711.4668 653.28046 597.95496 545.49036 495.8866 449.14368 405.26166 364.24048 326.08017 292.08197 265.13745 245.35242 232.72682 227.26079 228.95424 237.80713 253.81954 275.16574 291.8063 302.21164 306.38174 304.31668 296.01636 281.48084 260.7101 234.22266 212.1989 198.58168 193.371 196.56687 208.16925 228.17816 256.59363 293.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8836815 3.5489214 4.995721 6.224078 7.2549825 8.251433 9.247884 10.244335 11.240787 12.237238 13.233689 14.23014 15.22659 16.223042 17.219492 18.215943 19.212395 20.208844 21.205296 22.201746 23.198199 24.194649 25.1911 26.187554 27.184004 28.180455 29.176907 30.173356 31.169806 32.166256 33.16271 34.15916 35.15561 36.15206 37.148514 38.144967 39.14142 40.13787 41.134316 42.13077 43.12722 44.123673 45.120125 46.116574 47.11302 48.109475 49.105927 50.102375 51.098828 52.09528 53.091732 54.088185 55.084633 56.08108 57.07753 58.073986 59.070435 60.066883 61.06334 62.059788 63.056237 64.05269 65.04913 66.045586 67.042046 68.0385 69.03494 70.031395 71.02785 72.0243 73.020745 74.0172 75.01366 76.0101 77.00656 78.003006 78.99946 79.99591 80.992356 81.988816 82.98527 83.98171 84.978165 85.97461 86.97106 87.967514 88.96397 89.96041 90.95686 91.953316 92.94977 93.94622 94.94267 95.93912 96.93558 97.93203 98.928475 99.92493 100.92137 101.91782 102.91428 103.91073 104.90718 105.903626 106.900086 107.89653 108.89299 109.88944 110.88589 111.88234 112.878784 113.87524 114.87168 115.86815 116.86458 117.861046 118.85749 119.85394 120.85039 121.84685 122.843285 123.83975 124.83621 125.83265 126.82911 127.825554 128.822 129.81845 130.81491 131.81134 132.8078 133.80426 134.8007 135.79717 136.79361 137.79007 138.78652 139.78296 140.77942 141.77587 142.77231 143.76877 144.76523 145.76168 146.75812 147.7546 148.75104 149.74748 150.74393 151.74039 152.73685 153.73329 154.72974 155.72618 156.72266 157.7191 158.71555 159.71199 160.70844 161.70491 162.70136 163.6978 164.69426 165.6907 166.68715 167.68361 168.68006 169.6765 170.67295 171.6694 172.66585 173.6623 174.65876 175.65522 176.65164 177.6481 178.64455 179.641 180.63745 181.63391 182.63036 183.62682 184.62326 185.6197 186.61617 187.61263 188.60907 189.60552 190.60196 191.59842 192.59487 193.59131 194.58777 195.58422 196.58068 197.57714 198.57358 199.57004 200.56649 201.56293 202.55937 203.55583 204.55229 205.54874 206.5452 207.54163 208.53809 209.53453 210.53098 211.52745 212.5239 213.52034 214.51679 215.51325 216.50969 217.50615 218.50261 219.49906 220.4955 221.49195 222.48838 223.48487 224.4813 225.47774 226.47423 227.47069 228.46712 229.46356 230.46002 231.45648 232.45291 233.44937 234.44582 235.44225 236.4387 237.43515 238.43161 239.42804 240.4245 241.42096 242.4174 243.41387 244.41033 245.40676 246.40323 247.39969 248.39615 249.39258 250.38903 251.38549 252.38191 253.37837 254.37483 255.37128 256.36774 257.3642 258.36066 259.3571 260.35352 261.34998 262.34644 263.3429 264.33933 265.3358 266.33225 267.3287 268.32513 269.3216 270.31805 271.31448 272.31094 273.3074 274.30383 275.30032 276.29675 277.2932 278.28967 279.28613 280.28256 281.27902 282.27545 283.2719 284.26837 285.26483 286.2613 287.25772 288.25415 289.25064 290.24704 291.24353 292.24 293.23645 294.2329 295.22937 296.22586 297.22232 298.21878 299.21524 300.21173 301.20816 302.20465 303.20108 304.19754 305.194 306.1905 307.18698 308.18344 309.17993 310.1764 311.17285 312.16937 313.1658 314.16226 315.15875 316.1552 317.15167 318.14813 319.1446 320.14105 321.13754 322.13403 323.1305 324.12695 325.1234 326.11987 327.11636 328.11285 329.1093 330.10577 331.1022 332.09872 333.09515 334.09164 335.0881 336.08456 337.08105 338.0775 339.07397 340.07043 341.0669 342.06335 343.0598 344.05634 345.05277 346.04923 347.04572 348.0422 349.03867 350.03513 351.0316 352.02808 353.0245 354.021 355.0175 356.01392 357.0104 358.00687 359.00336 359.99982 360.99628 361.99274 362.9892 363.9857 364.98215 365.9786 366.9751 367.9716 368.96805 369.96448 370.96094 371.9574 372.9539 373.95038 374.94684 375.9433 376.93976 377.93625 378.9327 379.92917 380.92566 381.92212 382.91858 383.91504 384.91153 385.908 386.90448 387.90094 388.8974 389.8939 390.89032 391.88678 392.88327 393.87973 394.8762 395.87268 396.86914 397.86563 398.8621 399.85855 400.855 401.8515 402.84796 403.8444 404.8409 405.83734 406.8338 407.8303 408.82675 409.8232 410.8197 411.81616 412.81262 413.80908 414.80554 415.802 416.79846 417.79495 418.79138 419.7879 420.78436 421.78082 422.7773 423.7738 424.77026 425.76672 426.7632 427.75964 428.7561 429.7526 430.74905 431.7455 432.74197 433.73846 434.73496 435.7314 436.72784 437.72437 438.7208 439.71725 440.71378 441.7101 442.70663 443.7031 444.69955 445.69608 446.6926 447.68906 448.68546 449.68192 450.67844 451.67484 452.67142 453.66782 454.66428 455.66074 456.6572 457.65372 458.65018 459.64664 460.6431 461.63956 462.63608 463.63254 464.629 465.62546 466.6219 467.61838 468.6148 469.61133 470.6078 471.60425 472.60074 473.59723 474.5937 475.59018 476.5866 477.58307 478.57953 479.576 480.57245 481.56897 482.56537 483.56183 484.5583 485.5548 486.55127 487.54773 488.5442 489.54065 490.5371 491.53363 492.53015 493.52655 494.523 495.51947 496.516 497.51245 498.5089 499.50537 500.50183 501.4983 502.49475 503.49118 504.4877 505.48416 506.48062 507.4771 508.47354 509.47006 510.46652 511.46298 512.4594 513.45594 514.4524 515.44886 516.4453 517.4418 518.4383 519.43476 520.4313 521.4277 522.4242 523.4206 524.4171 525.4135 526.41004 527.4065 528.4029 529.3994 530.3959 531.39234 532.3888 533.3853 534.3818 535.37824 536.37476 537.3712 538.3677 539.36414 540.3606 541.35706 542.3535 543.35 544.34644 545.3429 546.3394 547.3358 548.33234 549.32874 550.32526 551.3218 552.31824 553.31464 554.31116 555.3076 556.3041 557.30054 558.29694 559.29346 560.2899 561.2864 562.28284 563.2793 564.2758 565.2723 566.2688 567.2652 568.26166 569.2582 570.25464 571.2511 572.2476 573.244 574.2405 575.23694 576.2334 577.2299 578.2263 579.22284 580.2193 581.21576 582.2122 583.20874 584.20514 585.2016 586.19806 587.1946 588.19104 589.1875 590.18396 591.1804 592.17695 593.17334 594.16987 595.1663 596.1628 597.1592 598.1557 599.15217 600.1486 601.1451 602.1416 603.13807 604.1345 605.131 606.12745 607.1239 608.1203 609.1168 610.1132 611.10975 612.1062 613.10267 614.0992 615.09565 616.09217 617.08857 618.0851 619.08155 620.078 621.07447 622.0709 623.06745 624.0639 625.0603 626.0568 627.0533 628.0497 629.04615 630.04267 631.0391 632.0356 633.0321 634.02857 635.025 636.0215 637.01795 638.01447 639.0109 640.00745 641.0039 642.0003 642.9968 643.9932 644.9897 645.98615 646.9826 647.9791 648.9756 649.97205 650.9685 651.965 652.9615 653.95795 654.9544 655.95087 656.9473 657.9438 658.9402 659.9367 660.93317 661.9296 662.92615 663.9226 664.91907 665.9155 666.91205 667.9085 668.90497 669.9014 670.89795 671.89435 672.8908 673.8873 674.8838 675.88025 676.87665 677.87317 678.8696 679.866 680.8625 681.859 682.8554 683.8519 684.8484 685.84485 686.8414 687.83777 688.8343 689.83075 690.8272 691.8237 692.8202 693.81665 694.8131 695.8096 696.806 697.8025 698.799 699.79554 700.7919 701.78846 702.7849 703.7814 704.77784 705.7743 706.77076 707.76716 708.76374 709.7602 710.7566 711.75306 712.7495 713.74604 714.7425 715.7389 716.7354 717.7319 718.7284 719.72486 720.7214 721.7178 722.7143 723.7107 724.70716 725.7036 726.7001 727.6966 728.693 729.6895 730.686 731.68244 732.67896 733.6754 734.6719 735.6683 736.66486 737.66126 738.6578 739.65424 740.6507 741.64716 742.64356 743.6401 744.63654 745.633 746.62946 747.626 748.6224 749.61896 750.6153 751.6118 752.60834 753.6048 754.60126 755.59766 756.5941 757.5906 758.5871 759.5835 760.57996 761.5765 762.57294 763.56946 764.56586 765.5624 766.55884 767.5553 768.55176 769.5482 770.5447 771.54114 772.53766 773.5341 774.53064 775.52704 776.5235 777.51996 778.5165 779.5129 780.50934 781.50586 782.5023 783.4988 784.4953 785.4917 786.4882 787.48475 788.4812 789.4776 790.4741 791.4706 792.46705 793.4635 794.45997 795.4564 796.4529 797.44935 798.4458 799.44227 800.4387 801.4353 802.4317 803.42817 804.4247 805.4211 806.4176 807.41407 808.41047 809.407 810.40345 811.39997 812.39637 813.3928 814.3893 815.3858 816.3822 817.3787 818.37525 819.37165 820.36817 821.3646 822.3611 823.35755 824.35395 825.35047 826.34687 827.3433 828.3398 829.33625 830.33277 831.3292 832.3257 833.32215 834.3186 835.3151 836.3116 837.3081 838.30457 839.301 840.2975 841.294 842.2904 843.28687 844.2834 845.2798 846.27625 847.27277 848.26917 849.26575 850.2622 851.2586 852.2551 853.2516 854.24805 855.24457 856.24097 857.2374 858.23395 859.2304 860.22687 861.22327 862.2198 863.2163 864.21277 865.20917 866.2057 867.2021 868.1986 869.19507 870.1915 871.18805 872.1846 873.18097 874.17737 875.1739 876.1703 877.1668 878.1633 879.15967 880.15625 881.1527 882.14905 883.1455 884.14197 885.13855 886.135 887.1315 888.1279 889.1244 890.12085 891.1173 892.1138 893.1102 894.1067 895.10315 896.09974 897.0962 898.09266 899.0891 900.0856 901.08204 902.0785 903.07496 904.0714 905.068 906.06434 907.0608 908.05726 909.0537 910.0503 911.04676 912.0432 913.0397 914.03614 915.0326 916.02906 917.0255 918.022 919.01844 920.015 921.0115 922.0079 923.0044 924.00086 924.9973 925.9938 926.99024 927.9867 928.9833 929.97974 930.9761 931.97266 932.96906 933.9656 934.962 935.95844 936.95496 937.95136 938.9478 939.9443 940.94086 941.9373 942.93366 943.93024 944.9267 945.92316 946.9196 947.9161 948.91254 949.90906 950.90546 951.90204 952.8984 953.89496 954.8914 955.8879 956.8842 957.8807 958.87714 959.8736 960.8702 961.8665 962.863 963.85944 964.8559 965.85236 966.8488 967.8453 968.84174 969.8382 970.83466 971.83124 972.8277 973.82416 974.8206 975.8172 976.81366 977.8101 978.8067 979.80304 980.7996 981.79596 982.7924 983.7889 984.78534 985.7818 986.77826 987.7747 988.7713 989.76777 990.7641 991.7607 992.75715 993.7896 995.0206 996.47004 998.138 1000.0)) (quote (677.0 535.4292 422.8848 339.36685 284.87543 259.89987 268.2414 310.70343 387.28598 497.98907 603.5478 641.83405 612.0716 514.26026 355.39853 236.41391 190.37985 217.29645 317.16364 457.76447 561.2556 624.1866 646.5575 629.1565 600.0616 573.2733 548.79194 526.61725 507.05454 491.23126 479.25256 471.11844 466.7982 458.9221 441.81903 415.489 379.93207 339.67896 321.1836 328.7352 362.33374 421.9792 489.6174 542.9472 581.908 606.4997 618.8893 640.7718 677.74415 729.80646 796.9586 852.77424 846.6835 777.4456 645.06086 454.63858 310.6482 254.36197 285.77985 404.90192 571.3017 667.2756 685.3008 625.3775 488.926 369.5326 323.57037 351.0393 451.9395 605.8133 720.6604 785.336 799.83997 764.1793 717.3455 696.27027 700.9537 731.3956 780.35334 794.8265 764.1742 688.3962 567.4927 447.14725 396.22516 415.41834 504.72678 656.74567 772.7341 821.8271 804.0246 719.3267 600.72297 524.3009 493.1006 507.12186 565.21747 631.33735 688.3264 736.18464 774.912 804.5484 825.23395 836.98084 839.7893 833.6017 808.6564 757.8083 681.0575 578.4039 458.33798 367.83313 314.09192 297.11438 316.9005 351.82 376.49493 390.8857 394.99225 389.42892 379.95245 367.97702 353.50262 336.52924 328.8855 352.16528 406.8263 492.86856 607.7851 704.8889 766.5747 792.8424 783.69214 743.12287 682.24604 601.71387 501.5264 382.34262 280.61874 217.29242 192.36371 205.83257 249.8037 290.50537 324.09467 350.5714 369.9371 383.88715 393.94452 400.10925 402.3814 403.78427 425.19 470.57617 539.9428 633.2899 729.1099 796.5297 835.3076 845.4435 829.2849 815.86225 813.82905 823.18555 843.93146 859.08747 831.2725 759.1491 642.7169 484.87262 366.5393 324.4726 358.67242 469.13876 625.82666 727.94965 767.3583 744.05237 658.37696 554.3447 462.61505 383.18808 316.06363 266.44736 261.65286 305.63632 398.3977 539.937 678.77 757.57264 776.30396 734.9639 641.803 569.32166 534.46906 537.2451 577.64985 639.19965 693.1947 739.1161 776.9639 807.0742 835.1722 863.3181 891.5122 919.7543 945.1059 959.7747 963.3423 955.8089 937.1664 907.04737 865.2505 811.7757 746.6231 672.20197 598.3202 526.0243 455.3143 386.21414 334.0441 311.86163 319.6668 357.4596 417.09805 445.4851 433.02362 379.7136 285.55508 185.3832 126.789696 110.05389 135.17575 200.44532 286.20026 386.8529 502.4033 632.85126 751.0453 799.93085 777.69196 684.3285 523.5222 387.40674 315.9281 309.08618 366.881 472.74838 573.6988 665.75867 748.928 823.0494 872.4716 886.81226 866.07117 810.24854 725.2168 640.2249 559.26984 482.35156 409.4701 360.21356 355.26187 394.61877 478.28436 599.63294 703.9723 779.1411 825.1391 841.96656 842.75934 849.3244 861.9927 880.7643 904.63086 917.8166 914.90314 895.89057 860.77894 815.90564 777.31226 745.78315 721.31855 703.4344 672.4059 617.9256 539.9934 438.6094 330.6382 281.4474 297.56604 378.99426 525.54364 666.8578 745.9839 762.92206 717.67225 622.64 554.3062 525.76514 537.0166 588.0608 654.4307 704.3519 737.6929 754.4536 753.7289 725.82947 668.13355 580.6413 463.3527 346.38257 290.05634 296.06226 364.40036 491.80762 604.8981 673.342 697.1393 676.29004 619.6224 554.03064 481.37415 401.65308 315.0694 237.64916 179.50046 140.62334 121.01774 116.82419 109.826996 97.68753 80.40577 57.98174 37.682888 26.755494 25.19955 33.01506 51.777745 93.682106 161.29788 254.6251 373.66373 484.23123 532.41065 517.537 439.6103 305.4202 212.33422 192.15334 244.87757 370.50687 533.49164 648.24176 710.9924 721.74335 682.06867 647.429 645.3732 675.90125 739.01307 820.8111 870.1984 882.43634 857.5248 795.5809 723.75336 662.8352 612.82636 573.72687 542.19147 498.79422 440.40265 367.01678 278.63654 204.24645 179.457 204.36029 278.95633 398.18515 511.76553 606.7952 683.27424 741.2026 769.6617 747.87226 675.33277 552.0432 381.99735 245.89794 175.44681 170.64389 231.4892 333.34683 404.91815 441.69498 443.6772 411.29565 372.2409 343.0863 323.83173 314.4773 318.09778 348.42386 407.10468 494.14008 609.51795 702.28266 724.54517 676.30555 557.5637 382.8301 257.34546 202.07465 217.01764 302.1744 420.44476 516.32856 589.2883 639.3241 668.02344 696.2931 730.61817 770.9987 817.4346 860.5366 878.81836 871.43665 838.39167 780.29694 716.0307 654.5038 595.71625 539.668 488.66776 450.76904 426.66306 416.35004 419.83807 438.4596 473.18082 524.0017 590.92225 667.5692 719.0408 740.0433 730.57636 690.64026 635.3889 582.4203 531.75855 483.4035 439.36273 418.2006 424.4319 458.05673 519.075 587.5688 627.5338 638.23114 619.6607 572.9354 518.3815 463.58713 408.5526 353.27768 304.79617 282.45032 287.35373 319.50647 378.3942 436.61014 478.58225 504.31052 513.7949 512.1933 521.3145 543.60376 579.06116 627.67194 672.96515 700.33246 709.77375 701.28925 679.4632 675.5061 695.29004 738.81495 806.0808 860.4944 850.1683 774.7226 634.15735 437.61572 296.057 242.15735 275.91684 397.33548 567.45496 701.5419 796.6532 852.78894 870.4955 864.5902 841.7202 801.8855 745.086 680.4003 637.8906 619.93897 626.5452 657.4167 677.8042 663.8298 615.4934 532.7949 426.7782 354.5341 324.19727 335.76764 389.24518 462.44638 531.04676 595.0334 654.4065 709.21137 759.84095 806.3854 848.84485 887.21936 916.36316 927.4444 920.3116 894.96424 851.7119 795.6827 728.6962 650.7522 561.8509 469.42578 392.90366 333.2982 290.60944 265.14734 270.85114 315.2422 398.32053 520.0862 664.7344 768.94764 826.1114 836.22565 799.3609 752.2969 725.85 720.0203 734.80787 765.0213 777.4394 766.1644 731.19654 672.53577 617.0724 600.92347 624.2788 687.1385 784.4407 859.4051 896.1628 894.71375 855.0581 798.7687 770.4361 771.4193 801.71845 859.8998 911.42255 941.55915 950.3095 937.6739 909.7617 885.7836 867.1399 853.83094 845.7826 836.23035 820.76685 799.392 772.1061 738.52674 696.7866 646.6363 588.0756 521.10474 468.87405 455.32898 480.47116 544.30066 639.23517 704.1501 725.71607 703.9331 638.801 550.7415 473.02594 406.1236 350.03452 305.4214 282.3196 284.11227 310.79938 362.38086 423.65588 456.8626 460.22498 433.74277 378.18878 323.3304 284.42752 261.48016 254.4883 262.80087 283.9451 317.68066 364.00763 422.82886 464.65118 466.1042 427.1878 347.9021 238.4244 160.06542 123.08502 127.48321 173.25995 241.93854 310.02667 377.44196 444.18445 510.468 578.51667 648.9202 721.6786 796.792 860.71674 886.85096 874.49 823.6341 736.6667 665.0009 629.47547 630.09 666.8448 726.01075 766.57966 785.8105 783.7032 760.39185 725.6541 685.53376 640.0308 589.1453 536.7618 500.82663 483.58643 485.04105 505.1904 540.21326 586.38575 643.7079 712.1796 786.07905 822.22046 811.69684 754.50824 650.65455 530.84845 442.56183 386.3304 362.15418 368.87116 390.36176 421.46405 462.17813 512.5039 565.9145 606.99854 635.10675 650.2391 652.27326 637.12256 602.79645 549.29487 476.6179 397.18097 355.71857 356.25946 398.80374 483.1456 568.18067 623.08295 647.8524 642.489 614.08924 602.93976 615.38697 651.43116 711.0721 774.3886 817.42597 840.1345 842.51416 825.11194 793.21296 748.1459 689.91065 618.5073 539.1577 461.60513 386.07108 312.55545 242.02948 193.3593 173.81275 183.38974 222.09037 281.3238 336.71054 386.76276 431.48047 470.74567 497.5147 507.65543 501.1679 478.05197 442.3506 411.74167 388.29358 372.00613 362.8796 361.33975 367.7776 382.19318 404.58655 432.061 444.11557 436.75443 409.97754 363.78497 315.5119 290.56552 289.16788 311.31903 356.39767 416.47788 489.14944 574.4124 672.2667 771.47864 846.8373 897.39747 923.1593 924.112 899.9345 850.47785 775.74244 675.72815 565.3715 495.7446 471.10065 491.43967 556.536 634.29145 701.90656 759.3811 806.71546 838.6591 827.09327 767.8531 660.93866 506.34995 344.3147 220.53649 135.06104 87.8884 79.17686 110.35109 181.75049 293.37506 445.2248 603.9721 710.557 763.8447 763.83545 713.8561 672.4371 661.00666 679.5649 728.1118 790.11676 821.00147 818.2933 781.9919 712.67115 638.9148 576.64454 525.8602 486.562 456.30112 424.93643 391.36096 355.57483 317.59308 289.55313 281.98627 294.8924 328.27155 378.15234 418.13687 443.36734 453.8438 449.56622 448.67276 476.35486 532.77607 617.9364 726.2388 791.80237 795.61036 737.6629 617.9601 467.2862 351.30194 272.17865 229.91645 224.15496 245.56565 290.04456 357.5916 448.20688 545.5547 596.6081 597.29584 547.6182 448.19327 365.11523 342.8796 381.48633 480.93543 623.8403 722.2636 763.97767 748.9824 677.27784 584.6882 509.62845 452.1101 412.1332 389.35315 380.87488 386.04523 404.86432 437.33203 475.14676 504.34155 524.69367 536.2029 538.6991 529.45606 507.52557 472.9075 425.60205 378.66687 365.56808 387.98474 445.9168 538.09626 610.8831 635.8996 613.1457 542.62134 442.2914 382.6637 370.90253 407.00787 490.84326 565.6578 584.9165 548.61915 456.766 321.99924 223.35243 174.54251 175.5695 226.43341 305.6845 385.1119 464.5873 544.11084 623.10407 695.2681 758.8777 813.9328 860.4335 888.5201 878.209 828.92225 740.6597 615.47266 500.67984 416.06793 361.6369 337.38678 334.37677 325.0448 307.4468 281.5827 247.79599 234.79859 260.92102 326.1632 430.52524 563.08777 671.6488 749.4042 796.354 812.4981 808.3043 794.3546 770.649 737.1874 694.00184 641.34327 579.2651 507.76736 426.85022 358.67648 338.6308 367.17252 444.30157 565.2822 660.8179 708.00654 706.84815 657.3426 573.6941 490.50305 409.33048 330.17636 253.34778 190.02655 145.83269 120.766205 114.827095 128.02483 160.39469 211.93996 282.66068 372.4864 463.43134 541.54456 606.8261 659.276 698.588 722.9601 732.09766 726.00055 704.6688 683.90027 683.3552 703.09095 743.1074 800.61536 847.4243 876.2111 886.97596 879.71875 850.67426 792.5912 705.28846 588.76606 446.433 348.86084 324.09766 372.14343 492.99823 654.9963 765.4074 818.2442 813.5066 751.7592 671.0195 594.31665 521.65076 453.02173 389.2368 333.94553 287.59317 250.17975 222.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.893692 3.5909865 5.0918837 6.3963823 7.504484 8.500925 9.49687 10.492816 11.488762 12.484707 13.480653 14.476598 15.472544 16.468489 17.464436 18.46038 19.456326 20.45227 21.448216 22.44416 23.440106 24.43605 25.431996 26.427939 27.423882 28.419827 29.415772 30.411715 31.407664 32.403603 33.399548 34.39549 35.391434 36.387383 37.383324 38.37927 39.375214 40.37116 41.367104 42.363045 43.358986 44.354935 45.35088 46.346825 47.342766 48.33871 49.334656 50.330597 51.32654 52.322487 53.31843 54.314377 55.310318 56.306263 57.302208 58.298153 59.294094 60.29004 61.28599 62.28193 63.27787 64.27382 65.26976 66.2657 67.26165 68.2576 69.25354 70.24949 71.24543 72.24137 73.23731 74.23326 75.22921 76.22515 77.2211 78.21704 79.21298 80.20893 81.20487 82.20082 83.19676 84.19271 85.18866 86.1846 87.18054 88.17648 89.17243 90.16838 91.16432 92.16026 93.156205 94.15215 95.14809 96.14404 97.139984 98.135926 99.131874 100.12782 101.123764 102.119706 103.115654 104.111595 105.107544 106.103485 107.099434 108.095375 109.09131 110.08726 111.08319 112.07914 113.075096 114.07103 115.06698 116.062935 117.05887 118.05481 119.05074 120.04669 121.04265 122.0386 123.03453 124.03049 125.02642 126.02237 127.01831 128.01425 129.0102 130.00615 131.00208 131.99802 132.99398 133.98993 134.98587 135.98181 136.97776 137.9737 138.96965 139.96559 140.96152 141.95748 142.9534 143.94936 144.9453 145.94124 146.93718 147.93314 148.92908 149.92502 150.92098 151.91692 152.91286 153.90882 154.90476 155.9007 156.89665 157.89258 158.88852 159.88448 160.88043 161.87636 162.8723 163.86826 164.86421 165.86016 166.8561 167.85204 168.84799 169.84392 170.83989 171.83582 172.83176 173.8277 174.82364 175.8196 176.81554 177.81147 178.80742 179.80335 180.79932 181.79524 182.79122 183.78714 184.78308 185.77904 186.77497 187.77092 188.76685 189.7628 190.75876 191.7547 192.75066 193.74658 194.74253 195.73847 196.73444 197.73038 198.72632 199.72226 200.7182 201.71414 202.71009 203.70603 204.70198 205.69794 206.69385 207.6898 208.68576 209.6817 210.67765 211.67357 212.66953 213.66548 214.66143 215.65737 216.65329 217.64925 218.64519 219.64115 220.63707 221.633 222.62897 223.62491 224.62084 225.6168 226.61275 227.60868 228.60465 229.60059 230.59651 231.59249 232.5884 233.58435 234.58029 235.57624 236.57219 237.5681 238.56407 239.56002 240.55597 241.55191 242.54785 243.54378 244.53972 245.53569 246.53162 247.52753 248.5235 249.51946 250.51543 251.51137 252.5073 253.50324 254.4992 255.49514 256.49106 257.487 258.48294 259.47888 260.47485 261.4708 262.46674 263.46268 264.45862 265.45456 266.4505 267.44644 268.4424 269.43835 270.43427 271.4302 272.42615 273.42212 274.41806 275.414 276.40994 277.40588 278.40183 279.3978 280.3937 281.38968 282.38562 283.38156 284.3775 285.37344 286.3694 287.36536 288.3613 289.3572 290.35315 291.34912 292.34503 293.341 294.3369 295.3329 296.32886 297.32477 298.3207 299.31668 300.31262 301.30856 302.30454 303.30045 304.2964 305.29236 306.2883 307.28424 308.28018 309.27612 310.27206 311.268 312.26398 313.2599 314.25586 315.2518 316.24774 317.24368 318.23962 319.23557 320.2315 321.22745 322.2234 323.21933 324.21527 325.21124 326.20715 327.20316 328.19904 329.195 330.19098 331.18692 332.18283 333.1788 334.17474 335.1707 336.16663 337.16257 338.1585 339.15448 340.15042 341.14636 342.14227 343.13824 344.1342 345.13013 346.12607 347.122 348.11798 349.1139 350.10983 351.10577 352.10175 353.09766 354.0936 355.08954 356.08548 357.08142 358.0774 359.0733 360.06928 361.06522 362.06116 363.0571 364.05307 365.04898 366.04492 367.04086 368.0368 369.03275 370.02872 371.02466 372.0206 373.01654 374.01248 375.00842 376.00433 377.00027 377.99628 378.99216 379.98813 380.98407 381.98 382.97598 383.97192 384.96787 385.9638 386.95975 387.9557 388.95166 389.94757 390.94354 391.93948 392.93543 393.93137 394.9273 395.92328 396.91922 397.91516 398.9111 399.90704 400.90298 401.89893 402.8949 403.8908 404.88678 405.88272 406.87866 407.87463 408.87058 409.8665 410.86243 411.85837 412.85434 413.85028 414.8462 415.84216 416.83807 417.834 418.83 419.82593 420.8219 421.81784 422.81378 423.8097 424.80566 425.8016 426.79755 427.79352 428.78943 429.7854 430.78134 431.77728 432.7732 433.76913 434.7651 435.76105 436.757 437.75296 438.7489 439.7448 440.74075 441.7367 442.73264 443.72858 444.72458 445.72046 446.71643 447.71237 448.7083 449.70425 450.7002 451.6962 452.69208 453.68802 454.68393 455.67987 456.6758 457.6718 458.66776 459.6637 460.6596 461.65555 462.6515 463.64743 464.64343 465.63937 466.63528 467.63123 468.62717 469.6231 470.619 471.61493 472.61093 473.60687 474.60284 475.59872 476.59473 477.59073 478.58664 479.58255 480.57852 481.57446 482.57034 483.56635 484.56232 485.55826 486.5542 487.55014 488.54608 489.54208 490.538 491.53394 492.52988 493.52576 494.5217 495.5177 496.51364 497.50958 498.50552 499.50143 500.49738 501.49338 502.48932 503.48526 504.48117 505.4771 506.47305 507.46906 508.46503 509.46094 510.45685 511.4528 512.4487 513.4447 514.4407 515.4366 516.4325 517.42847 518.4244 519.42035 520.4163 521.41224 522.40815 523.4041 524.4001 525.396 526.39197 527.3879 528.38385 529.37977 530.37574 531.3717 532.3676 533.3635 534.3595 535.35547 536.3514 537.34736 538.34327 539.3393 540.3352 541.3311 542.3271 543.323 544.3189 545.3148 546.3108 547.30677 548.30274 549.2987 550.2946 551.2906 552.2865 553.2825 554.27845 555.2743 556.2703 557.26624 558.2622 559.2582 560.2541 561.25 562.246 563.24195 564.23786 565.2338 566.22974 567.2257 568.2216 569.2175 570.21357 571.2095 572.20545 573.2014 574.19727 575.1932 576.18915 577.1851 578.1811 579.177 580.1729 581.16895 582.16486 583.16077 584.15674 585.15265 586.14856 587.14454 588.1405 589.1365 590.13245 591.1284 592.12427 593.12024 594.11615 595.1121 596.10804 597.104 598.1 599.0959 600.0918 601.0877 602.08374 603.07966 604.0756 605.07154 606.0675 607.0635 608.0594 609.0553 610.0513 611.0472 612.04316 613.0391 614.03504 615.031 616.0269 617.0229 618.0188 619.0148 620.0107 621.00666 622.00257 622.99854 623.9945 624.9904 625.9864 626.98237 627.9783 628.9742 629.97016 630.96607 631.96204 632.958 633.9539 634.9499 635.94587 636.9418 637.9377 638.9336 639.92957 640.92554 641.92145 642.9175 643.9134 644.90937 645.9053 646.90125 647.89716 648.8931 649.8891 650.8851 651.881 652.877 653.87305 654.869 655.865 656.86097 657.85694 658.8529 659.8489 660.8448 661.8408 662.8368 663.8328 664.8288 665.82477 666.8208 667.8168 668.81275 669.8087 670.80475 671.8007 672.7967 673.79267 674.78864 675.7846 676.78064 677.7766 678.7726 679.76856 680.7645 681.7605 682.7565 683.75245 684.7485 685.74445 686.7405 687.73645 688.7324 689.72834 690.72437 691.72034 692.7163 693.71235 694.7083 695.70435 696.7003 697.6963 698.69227 699.68824 700.68427 701.6802 702.67615 703.6721 704.6681 705.66407 706.6601 707.656 708.65204 709.648 710.64405 711.64 712.63605 713.63196 714.6279 715.6239 716.61994 717.6159 718.61194 719.60785 720.6039 721.59986 722.59577 723.5918 724.58777 725.5838 726.5797 727.5757 728.5717 729.56775 730.56366 731.55964 732.55567 733.55164 734.5476 735.5436 736.5396 737.5355 738.5315 739.5275 740.5235 741.5195 742.5155 743.5115 744.50745 745.5034 746.4994 747.4953 748.4914 749.48737 750.4834 751.4793 752.4753 753.4713 754.4673 755.46326 756.45917 757.45514 758.4512 759.44715 760.4432 761.43915 762.4352 763.4311 764.4271 765.42304 766.419 767.41504 768.4111 769.407 770.403 771.399 772.395 773.391 774.3869 775.38294 776.37885 777.3748 778.37085 779.3668 780.36286 781.3588 782.3548 783.3508 784.3468 785.3428 786.33875 787.33466 788.3307 789.32666 790.32264 791.3186 792.31464 793.31055 794.30665 795.3026 796.2986 797.29456 798.2905 799.2865 800.2825 801.2785 802.2744 803.2704 804.26636 805.26246 806.25837 807.25434 808.2503 809.24634 810.2423 811.2383 812.23426 813.2302 814.2262 815.2222 816.2182 817.2141 818.2102 819.2061 820.20215 821.1981 822.19416 823.19007 824.1861 825.182 826.17804 827.174 828.17 829.166 830.162 831.15796 832.154 833.1499 834.1459 835.14185 836.1379 837.1339 838.1298 839.12586 840.1218 841.1178 842.1138 843.1097 844.1057 845.1017 846.0977 847.0936 848.0896 849.08564 850.08167 851.0776 852.07355 853.0696 854.06556 855.0615 856.0575 857.05347 858.04944 859.0455 860.04145 861.0375 862.0334 863.0294 864.0254 865.02137 866.01734 867.01337 868.00934 869.00525 870.0013 870.99726 871.9933 872.98914 873.9851 874.98114 875.9772 876.97315 877.96924 878.9651 879.9612 880.95716 881.95307 882.9491 883.94507 884.9411 885.937 886.933 887.929 888.9249 889.9208 890.9168 891.9129 892.90894 893.9047 894.9008 895.89686 896.89277 897.8888 898.8848 899.8808 900.8767 901.8728 902.8686 903.8646 904.8606 905.85675 906.85254 907.84864 908.84467 909.8406 910.8366 911.8326 912.8285 913.8245 914.8205 915.8165 916.81244 917.80854 918.80445 919.80036 920.79645 921.79236 922.7884 923.7844 924.7804 925.7763 926.7723 927.7683 928.7642 929.76026 930.7561 931.75214 932.74817 933.74415 934.74006 935.73615 936.73206 937.7281 938.72406 939.7201 940.716 941.71204 942.70807 943.70405 944.69996 945.6959 946.69184 947.68787 948.68384 949.6799 950.6759 951.6719 952.6679 953.6638 954.6598 955.6558 956.65174 957.6477 958.64374 959.63965 960.6357 961.63166 962.62757 963.6236 964.6197 965.6157 966.61164 967.60767 968.6035 969.59955 970.5955 971.59156 972.58747 973.5835 974.57935 975.5755 976.5714 977.5675 978.5634 979.5594 980.5554 981.55146 982.54737 983.54334 984.53937 985.5353 986.53125 987.52717 988.52314 989.51917 990.5151 991.5111 992.50794 993.61847 994.9254 996.4288 998.1285 1000.0)) (quote (715.0 767.33436 800.4975 814.4896 809.3104 784.9601 742.36145 682.7249 606.05616 512.35486 401.62122 294.0883 223.9534 191.77198 197.544 241.26947 304.7491 348.7217 371.85104 374.1371 355.57977 329.4764 332.34598 366.28595 431.2964 527.3772 639.9109 717.61017 756.034 755.18226 715.05494 642.4586 568.20057 496.0424 425.98416 358.02576 293.2573 238.15326 193.78195 160.14336 137.23746 125.1403 124.460465 135.32997 157.74881 191.71698 237.19405 293.7256 361.18427 439.57007 528.88306 627.0271 698.6614 731.1367 724.45325 678.6109 595.04224 514.0893 454.13513 415.17978 397.2232 399.91638 403.09485 395.03513 375.73715 345.20096 303.57123 279.36765 293.93405 347.27042 439.37674 570.252 696.34046 774.9484 806.0757 789.72236 725.8884 635.85804 547.04334 459.55075 373.38034 288.5321 222.33405 203.56827 232.67194 309.64505 434.48764 577.84607 677.4643 731.3129 739.392 701.7016 637.3101 597.7041 585.7466 601.4374 644.7766 700.93567 718.7872 694.0189 626.631 516.6233 379.2592 282.36746 234.04512 234.29225 283.10873 371.96597 451.19965 512.7788 556.70337 582.97345 593.726 605.69855 622.4542 643.9928 670.3146 701.21174 734.4074 769.27527 805.8152 844.0273 882.1804 891.9842 863.48475 796.68195 691.5758 549.72614 413.29272 301.16348 213.3384 149.81743 110.52636 91.42929 90.22007 106.89871 141.46521 193.81513 245.69609 283.69452 307.81046 318.04382 314.39542 304.47946 295.61343 287.79736 281.03125 275.31503 282.1506 316.08044 377.15314 465.36868 580.7271 690.36597 740.64795 730.8112 660.8556 530.78125 378.04053 280.72723 241.27725 259.69058 335.96725 443.67798 512.6595 539.1379 523.1132 464.58545 382.50385 341.0744 345.5701 395.9909 492.33685 620.12586 716.1681 773.09064 790.89295 769.57544 714.6384 657.486 603.09455 551.4641 502.59457 457.869 427.8839 414.8534 418.7774 439.65604 476.1717 514.23957 550.05207 583.6092 614.91077 644.13465 674.0959 705.76807 739.15125 774.2455 810.58277 836.0159 845.19446 838.11847 814.7878 775.4757 734.17634 698.74884 669.19324 645.5095 627.7431 622.98224 636.3425 667.82404 717.42676 785.1427 834.81885 832.3869 777.84687 671.1987 512.4425 346.74286 230.15337 162.83322 144.78246 176.00106 231.60184 271.67035 295.67874 303.6269 295.51492 275.28012 250.9938 222.89659 190.98853 155.26956 119.98586 96.21932 84.54652 84.96745 97.48214 119.89082 144.86832 171.82903 200.77295 231.70012 263.27683 289.78882 310.5845 325.66382 335.02683 342.2925 367.7222 414.46176 482.5112 571.87055 676.8666 754.965 797.44336 804.30164 775.5397 714.40107 654.702 605.4246 566.5688 538.13465 518.92304 490.50214 446.60446 387.2298 312.37827 223.2777 150.57532 107.54345 94.18208 110.491234 156.15802 216.05002 281.81387 353.44965 430.95728 514.227 587.8256 640.8144 673.19324 684.96216 676.1265 660.52704 650.9551 647.4105 649.8933 658.40357 672.0134 689.5923 711.1377 736.6494 766.1277 791.8107 801.4672 794.94696 772.24976 733.37574 684.46296 637.8813 593.9827 552.7674 514.2352 484.38507 478.60934 497.68216 541.60364 610.37354 695.72944 770.6285 832.96717 882.7455 919.9633 941.6 934.9434 898.57764 832.50226 736.7175 619.0848 522.76807 454.33313 413.77994 401.1084 414.17108 437.21024 467.05454 503.70404 547.1586 595.4776 628.9211 642.338 635.7282 609.09186 564.6756 536.002 534.2769 559.50025 611.67206 689.17267 753.1002 786.8906 790.5438 764.05994 708.0364 649.8152 604.23224 571.28736 550.9806 543.26447 542.0917 543.2521 546.7456 552.5724 560.7307 568.427 573.12897 574.83674 573.55024 569.2694 569.0184 581.1947 605.8147 642.8784 692.38587 743.6531 780.137 801.6498 808.19104 799.76087 772.92566 720.8821 643.44544 540.61585 412.39325 274.28818 165.43059 87.72118 41.15999 25.746985 38.918927 72.4303 125.65718 198.59961 291.25757 392.32513 455.08063 474.4387 450.39926 382.96225 281.15167 193.56563 127.44503 82.78986 59.6001 58.766865 86.69017 144.63396 232.59825 350.58298 492.00842 591.57264 632.5346 614.89435 538.65204 408.32806 289.4192 203.44731 150.41242 130.31449 142.8534 181.08641 242.107 325.91516 432.51086 561.0352 674.2361 752.2445 795.06067 802.6843 775.2343 726.4502 665.7279 593.0674 508.46872 411.95074 325.79553 269.81635 244.01323 248.38611 282.93506 328.83408 363.99606 388.38647 402.00528 404.85248 395.41077 371.37192 332.71164 279.43002 211.52701 151.46811 143.00885 187.27989 284.2812 434.01282 601.4989 699.9846 725.40247 677.7522 557.034 392.97153 279.54694 223.67455 225.35442 284.58652 383.4162 448.96722 473.4929 456.99307 399.46787 312.15247 254.4015 234.8761 253.57625 310.50195 399.05087 472.7972 522.74494 548.894 551.24445 532.2639 515.8574 508.0449 508.82623 518.20154 535.24726 546.9645 549.1544 541.81714 524.95264 499.38013 483.36197 484.415 502.5392 537.73475 589.12867 620.7871 613.87006 568.3774 484.30927 362.19397 257.93646 209.09244 215.66185 277.64478 394.9771 511.82584 579.4829 597.9485 567.22236 487.30466 395.28275 333.8515 303.06293 302.917 333.41376 374.65222 396.88965 399.83933 383.50122 347.8753 306.53793 285.48282 285.3487 306.13562 347.84354 400.5455 440.03214 465.2085 476.0746 472.6303 455.94455 429.3384 393.0495 347.07785 291.4234 235.28827 215.35965 235.44539 295.54553 395.65997 522.4099 606.4542 637.885 616.70215 542.90564 424.98404 321.38333 243.21448 190.47751 163.17237 160.94663 180.46656 220.90747 282.26944 364.55237 465.0845 547.31684 599.64545 622.0702 614.59107 579.0864 555.9378 561.4874 595.73554 658.6819 749.30335 827.55134 872.78455 885.003 864.2066 810.5847 742.5064 672.095 599.35035 524.2725 446.87408 375.69684 318.0521 273.93994 243.36034 226.31325 223.25504 234.7011 260.65186 301.1073 356.0675 413.73068 456.76984 485.03198 498.51724 497.22556 491.842 502.47714 529.6002 573.21125 633.3102 702.32477 762.0982 811.8388 851.54664 881.2217 895.7973 879.7947 832.13825 752.82807 641.8642 514.40406 429.81033 394.09705 407.26428 469.312 568.10505 641.93305 682.1631 688.795 661.82886 607.0454 563.42487 538.23664 531.4806 543.15686 571.67005 602.28565 631.42347 659.08356 685.266 710.2869 738.35096 770.77027 807.5449 848.67487 892.6167 907.3431 880.111 810.92017 699.7706 548.1483 411.4091 317.60074 266.72327 258.7766 293.36557 335.1081 361.06268 371.22928 365.6079 344.24298 331.0133 345.97644 389.1324 460.48114 560.0227 662.8617 741.4144 795.66297 825.6073 831.2477 819.4135 799.9556 772.9531 738.4061 696.31446 655.27796 631.19654 624.4209 634.9513 662.7875 693.1978 691.4984 656.23725 587.41425 485.0295 366.97867 286.89502 248.3844 251.44683 296.08228 373.31876 448.73407 518.9382 583.931 643.7127 693.2357 707.4076 682.8065 619.4324 517.2853 385.54053 284.50467 225.1585 207.50205 231.53531 292.67865 349.8801 393.3924 423.2155 439.34955 442.0246 434.19324 416.75607 389.7133 353.0647 308.0646 279.54297 277.1551 300.90112 350.781 425.97748 498.0024 552.7602 590.25104 610.4749 613.5946 612.6623 615.9302 623.398 635.06604 650.89924 656.8986 641.6254 605.0796 547.26105 468.16995 396.1998 361.90363 365.2915 406.36346 485.1195 579.7628 659.72175 724.7859 774.9554 810.2301 830.2948 834.5817 823.07947 795.788 752.70734 697.4463 638.28107 575.53797 509.21704 439.31824 377.08435 355.32855 376.15692 439.5695 545.56617 677.7627 774.9987 831.4784 847.2018 822.1688 766.78516 731.2979 722.3334 739.89167 783.97266 845.5272 866.93744 838.0245 758.7883 629.229 459.70248 339.77316 290.11743 310.73535 401.62683 556.40967 696.6169 798.9457 863.396 889.96766 879.472 847.14405 798.7548 734.3041 653.79194 557.9722 471.3197 405.62878 360.89935 337.13147 334.21542 344.29816 362.54773 388.96408 423.5473 466.23264 497.04663 500.13232 475.48975 423.11877 343.0195 268.6774 235.04872 242.13748 289.94376 378.46747 484.57245 576.7047 654.6812 718.50184 768.1667 806.27295 837.37256 861.5498 878.80475 889.13727 886.6379 858.1051 803.04957 721.47126 613.37024 496.17548 419.42706 386.1573 396.36615 450.05365 530.358 576.0317 581.4935 546.7435 471.78156 367.5585 285.44815 231.99954 207.21256 211.08725 238.70781 259.74228 268.99316 266.4605 252.14423 227.75637 207.5891 194.84972 189.53827 191.65476 201.8878 228.3616 273.42462 337.07694 419.31848 517.6464 587.38385 612.0481 591.63935 526.1574 417.15363 311.6628 231.76143 177.44947 148.72686 145.55924 165.73043 207.91312 272.10736 358.31317 466.3969 563.615 624.7046 649.66565 638.4983 591.20246 539.9343 517.24976 523.14905 557.6323 620.69947 684.5041 712.12446 703.3832 658.2799 576.8148 479.91943 403.30728 347.57883 312.73416 298.77322 304.2847 326.19772 364.4055 418.90802 489.70538 567.9105 628.9219 671.3051 695.0602 700.187 688.14686 664.10407 628.5112 581.3681 522.67475 457.5019 408.9655 379.91293 370.3441 380.2589 408.78464 450.7003 505.13837 572.09894 651.58204 738.3012 789.6329 796.2803 758.24347 675.52247 552.2678 435.50046 338.4502 261.11694 203.5008 165.73407 150.06537 157.30265 187.44596 240.49526 315.16458 374.94586 403.14877 399.7732 364.8193 298.7658 229.53874 173.41745 130.40198 100.49233 83.68228 78.73088 84.70747 101.61205 129.44464 168.20497 207.84535 238.5022 260.17557 272.8654 276.57172 277.90674 285.39194 299.06058 318.91272 344.94824 367.33655 369.75046 351.9417 313.91034 255.65636 192.0607 154.66162 144.48529 161.53173 205.8009 271.46826 342.8289 419.01184 500.01712 585.8447 672.4165 745.701 804.51856 848.86915 878.7527 893.92145 893.276 876.68586 844.1509 795.67127 733.4794 670.5242 608.89124 548.58057 489.59213 433.23688 389.72833 361.2312 347.74548 349.2712 365.55985 393.90613 433.56924 484.5493 546.8462 619.65137 689.88 752.953 808.8703 857.63184 899.1284 930.449 950.29694 958.67267 955.5758 941.1562 923.35675 906.6851 891.14124 876.7251 863.365 839.1373 795.34815 731.99756 649.08545 548.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8950396 3.5966873 5.1049433 6.4198074 7.54128 8.539309 9.535176 10.531044 11.526913 12.522779 13.518646 14.514515 15.510383 16.50625 17.502121 18.497988 19.493857 20.489726 21.485592 22.48146 23.47733 24.473198 25.469067 26.464934 27.460803 28.45667 29.452538 30.448407 31.444275 32.440144 33.436013 34.431878 35.427746 36.423615 37.419484 38.41535 39.41122 40.40709 41.402958 42.398827 43.3947 44.39056 45.386425 46.382294 47.37816 48.374024 49.36989 50.365757 51.36162 52.357487 53.353356 54.349217 55.345086 56.34095 57.33682 58.332684 59.32855 60.324406 61.32028 62.316143 63.312008 64.30788 65.30374 66.29961 67.29547 68.291336 69.28721 70.28307 71.27894 72.2748 73.27066 74.26653 75.2624 76.25826 77.254135 78.25 79.245865 80.24173 81.2376 82.23346 83.22933 84.225205 85.22107 86.21693 87.2128 88.20868 89.204544 90.20042 91.19629 92.192154 93.18802 94.1839 95.17977 96.175644 97.17151 98.16737 99.16325 100.15912 101.155 102.15086 103.14674 104.14259 105.13848 106.134346 107.13022 108.126076 109.121956 110.117836 111.11371 112.109566 113.10545 114.10131 115.09718 116.093056 117.08893 118.084786 119.08066 120.07653 121.0724 122.06827 123.06414 124.06001 125.055886 126.05176 127.04763 128.0435 129.03937 130.03524 131.03112 132.02698 133.02286 134.01873 135.01459 136.01045 137.00634 138.0022 138.99806 139.99393 140.9898 141.98569 142.98155 143.97743 144.9733 145.96918 146.96504 147.9609 148.95677 149.95265 150.94852 151.9444 152.94026 153.93613 154.932 155.92789 156.92375 157.91962 158.91551 159.91138 160.90724 161.9031 162.89899 163.89487 164.89072 165.8866 166.88246 167.87834 168.87422 169.87007 170.86595 171.86182 172.8577 173.85355 174.84943 175.8453 176.84116 177.83704 178.83292 179.82878 180.82465 181.82053 182.8164 183.81227 184.80814 185.804 186.7999 187.79575 188.79163 189.78749 190.78336 191.77924 192.7751 193.77097 194.76685 195.76271 196.75859 197.75447 198.7503 199.7462 200.74207 201.73795 202.73381 203.72969 204.72553 205.72142 206.71729 207.71318 208.70903 209.70491 210.70078 211.69663 212.6925 213.68839 214.68425 215.68012 216.676 217.67186 218.66773 219.6636 220.65946 221.65534 222.65122 223.64708 224.64295 225.63883 226.6347 227.63057 228.62642 229.62229 230.61817 231.61406 232.60991 233.6058 234.60166 235.59755 236.59343 237.58928 238.58518 239.58101 240.57686 241.57276 242.5686 243.5645 244.56038 245.55623 246.55213 247.54798 248.54387 249.53972 250.53562 251.53147 252.52736 253.52321 254.51909 255.51496 256.5108 257.50668 258.50256 259.4984 260.4943 261.49017 262.48605 263.4819 264.47778 265.47363 266.46954 267.4654 268.46127 269.45712 270.453 271.44888 272.44473 273.4406 274.43646 275.43234 276.42822 277.42407 278.41995 279.41583 280.41168 281.4076 282.40344 283.39932 284.3952 285.39108 286.38693 287.3828 288.3787 289.37454 290.37042 291.36627 292.36215 293.35803 294.3539 295.34976 296.34564 297.34152 298.3374 299.33325 300.32916 301.325 302.3209 303.31677 304.31262 305.3085 306.30435 307.30023 308.29608 309.29196 310.28784 311.28372 312.2796 313.27548 314.27136 315.2672 316.2631 317.25894 318.25482 319.2507 320.24658 321.2424 322.23828 323.23416 324.23004 325.2259 326.2218 327.21765 328.2135 329.2094 330.20526 331.20117 332.197 333.19284 334.1887 335.18457 336.18042 337.17624 338.17212 339.16797 340.16382 341.15964 342.15552 343.15137 344.14722 345.14307 346.13892 347.13477 348.1306 349.12647 350.1223 351.11816 352.114 353.1099 354.10574 355.10156 356.0974 357.0933 358.0891 359.08496 360.0808 361.07666 362.0725 363.06836 364.06424 365.06006 366.0559 367.0518 368.04764 369.04352 370.03934 371.0352 372.03104 373.0269 374.02274 375.01862 376.01444 377.01028 378.00613 379.002 379.99783 380.9937 381.9895 382.98538 383.9812 384.97705 385.9729 386.96875 387.96466 388.9605 389.95633 390.9522 391.94806 392.94388 393.93973 394.93558 395.9314 396.92728 397.92313 398.91904 399.9149 400.9107 401.90656 402.9024 403.8983 404.8941 405.88995 406.88583 407.88168 408.87753 409.87335 410.8692 411.86508 412.86093 413.85675 414.85263 415.84845 416.84436 417.84018 418.83603 419.83188 420.82773 421.82358 422.81943 423.81528 424.81116 425.807 426.80286 427.7987 428.79456 429.7904 430.78626 431.78207 432.77795 433.77377 434.76965 435.7655 436.76132 437.75717 438.75305 439.7489 440.74475 441.74057 442.73642 443.7323 444.72815 445.72403 446.71985 447.7157 448.71158 449.7074 450.70328 451.69913 452.69495 453.69083 454.68668 455.6825 456.67838 457.67423 458.6701 459.66592 460.66183 461.6576 462.6535 463.64926 464.64514 465.64105 466.63687 467.63275 468.6286 469.62448 470.6203 471.61615 472.61197 473.60782 474.6037 475.59952 476.59537 477.59125 478.58707 479.58292 480.5788 481.57462 482.57047 483.56635 484.56216 485.55804 486.5539 487.5497 488.54562 489.54144 490.53732 491.53317 492.52905 493.5248 494.52072 495.5166 496.5124 497.50827 498.5041 499.49997 500.49582 501.49164 502.48752 503.4834 504.47925 505.47507 506.47098 507.4668 508.46262 509.45853 510.45435 511.45017 512.44605 513.4419 514.43775 515.4336 516.42945 517.4253 518.42115 519.417 520.41285 521.4087 522.40455 523.4004 524.39624 525.3921 526.388 527.3838 528.37964 529.37555 530.37134 531.3672 532.36304 533.3589 534.35474 535.3506 536.3465 537.34235 538.3382 539.334 540.3299 541.32575 542.32154 543.31745 544.3133 545.30915 546.305 547.30085 548.2967 549.29255 550.2884 551.28425 552.28 553.2759 554.2717 555.2676 556.2634 557.25934 558.2552 559.25104 560.2469 561.24274 562.2385 563.23444 564.2303 565.22614 566.222 567.2179 568.2137 569.20954 570.2054 571.20124 572.1971 573.193 574.1888 575.18464 576.18055 577.1764 578.17225 579.1681 580.16394 581.1597 582.15564 583.1515 584.1473 585.1431 586.13904 587.1349 588.13074 589.1265 590.12244 591.1183 592.11414 593.11 594.10584 595.1017 596.09754 597.0934 598.08924 599.0851 600.08094 601.0768 602.07264 603.06855 604.06434 605.06025 606.0561 607.05195 608.0478 609.04364 610.0395 611.0353 612.0311 613.02704 614.0228 615.0187 616.0145 617.0104 618.0063 619.00214 619.998 620.99384 621.9897 622.9856 623.9813 624.97724 625.97315 626.969 627.9648 628.96064 629.9565 630.95234 631.9482 632.9441 633.9399 634.9357 635.93165 636.9274 637.92334 638.9191 639.91504 640.9108 641.90674 642.9026 643.89844 644.8943 645.8901 646.886 647.88184 648.8776 649.87354 650.8693 651.8652 652.8611 653.85694 654.8527 655.84864 656.8444 657.84034 658.8361 659.83204 660.82795 661.8238 662.8197 663.81556 664.8115 665.8074 666.8033 667.7992 668.79505 669.79096 670.7869 671.7827 672.7786 673.77454 674.77045 675.76636 676.7622 677.75806 678.75397 679.7499 680.7457 681.74164 682.7375 683.7334 684.7293 685.7252 686.72107 687.71705 688.7129 689.70874 690.70466 691.70057 692.6964 693.6923 694.68824 695.68415 696.68 697.67597 698.67176 699.6677 700.6636 701.6594 702.65534 703.65125 704.6471 705.643 706.63886 707.63477 708.6307 709.6266 710.62244 711.61835 712.61426 713.6101 714.60596 715.6019 716.5978 717.5937 718.5896 719.5855 720.58136 721.5773 722.5731 723.56904 724.56495 725.5608 726.5567 727.5526 728.5485 729.54444 730.5403 731.53614 732.53205 733.5279 734.5238 735.5197 736.51557 737.51154 738.5074 739.50324 740.49915 741.49506 742.49097 743.4868 744.4827 745.47864 746.47455 747.4704 748.4663 749.46216 750.458 751.4539 752.4498 753.44574 754.44165 755.4375 756.4335 757.4293 758.42524 759.42115 760.417 761.41285 762.40876 763.4046 764.4006 765.39637 766.3923 767.3882 768.38404 769.3799 770.37586 771.3717 772.3677 773.3635 774.35944 775.3552 776.3512 777.3471 778.343 779.3389 780.3348 781.3307 782.3266 783.32245 784.3183 785.3142 786.31006 787.30597 788.3019 789.2977 790.2937 791.28956 792.2854 793.2813 794.2772 795.27314 796.269 797.2649 798.26087 799.2567 800.25257 801.2485 802.2444 803.2403 804.23615 805.23206 806.22797 807.2239 808.2197 809.2157 810.2114 811.2074 812.20325 813.1992 814.19507 815.191 816.1868 817.18274 818.17865 819.1745 820.17035 821.16626 822.16224 823.1581 824.154 825.1499 826.14576 827.14167 828.1376 829.1334 830.1293 831.1252 832.1211 833.11695 834.1129 835.1088 836.1047 837.1005 838.09644 839.0923 840.0882 841.0841 842.07996 843.07587 844.0718 845.0676 846.0636 847.05945 848.0553 849.0513 850.0471 851.043 852.03894 853.0347 854.0307 855.02655 856.02247 857.0184 858.0143 859.0101 860.00605 861.0019 861.99787 862.9937 863.98957 864.98554 865.9814 866.9773 867.97315 868.96906 869.9649 870.9608 871.9566 872.9526 873.9485 874.9443 875.94025 876.9361 877.93195 878.92786 879.92365 880.9196 881.9154 882.9114 883.9073 884.90326 885.8991 886.895 887.8909 888.8869 889.88276 890.87854 891.8745 892.8703 893.8663 894.8622 895.85816 896.854 897.8498 898.84577 899.84156 900.8375 901.8334 902.82917 903.82514 904.82105 905.817 906.8128 907.8088 908.80457 909.80054 910.79645 911.7923 912.78827 913.78406 914.78 915.77594 916.7718 917.76764 918.7634 919.7594 920.7553 921.75116 922.7471 923.7429 924.73884 925.7347 926.73066 927.72657 928.72254 929.7183 930.7142 931.7101 932.70594 933.7019 934.6978 935.69367 936.6896 937.6854 938.68134 939.6772 940.6731 941.66895 942.6649 943.6607 944.6567 945.6526 946.64856 947.6443 948.6403 949.63617 950.63196 951.6278 952.6237 953.61957 954.6156 955.61145 956.6073 957.6032 958.5992 959.5951 960.59095 961.5868 962.5826 963.57856 964.57435 965.57044 966.5662 967.5621 968.558 969.55384 970.5498 971.5456 972.5417 973.5375 974.53345 975.52924 976.5252 977.52106 978.5171 979.5129 980.5087 981.5047 982.5005 983.49634 984.49225 985.4881 986.4841 987.47986 988.4758 989.47175 990.4676 991.4635 992.46155 993.5836 994.8991 996.40796 998.1102 1000.0)) (quote (920.0 846.5468 797.07807 771.5937 770.09375 792.57825 818.94227 814.32514 778.10584 710.2845 610.8609 491.98367 388.7343 303.3225 235.74813 186.01128 155.15016 148.26598 166.04505 208.4874 275.59302 362.2989 422.22675 444.1792 428.15625 374.15784 284.26404 203.38578 149.73514 123.31217 124.11686 152.03514 194.35384 242.44239 296.30078 355.92902 421.3271 484.12708 534.3136 571.8667 596.78656 609.0731 609.47004 599.4899 579.17707 548.5312 507.55246 458.8834 411.47754 366.07037 322.66196 281.2522 242.08176 206.56467 174.93186 147.1833 123.319016 103.37475 87.762986 76.60114 69.88925 67.627266 70.31052 93.40598 144.25693 222.86334 329.22528 463.25363 594.26697 697.6004 773.2538 821.22706 841.52027 837.8887 815.6639 774.88514 715.5525 637.6658 557.3325 512.9121 506.05212 536.75257 605.0134 694.5978 740.6895 736.5494 682.1774 577.5735 431.4825 306.1002 213.60231 153.98902 127.26023 132.30155 152.48162 182.24044 221.578 270.49432 328.7665 385.32022 433.99225 474.78253 507.69104 532.717 541.14417 524.6063 483.10333 416.6353 325.20218 226.41013 149.70954 95.56052 63.96303 54.917096 69.30058 109.56057 175.84159 268.14362 386.46664 521.5173 629.3701 704.3762 746.5355 755.84797 734.7769 704.82227 670.9833 633.26 591.65247 546.99775 516.0937 505.5163 515.2654 545.34107 595.41535 634.91047 643.82135 622.1482 569.8908 487.04944 395.073 318.6416 257.7851 212.50353 182.79685 174.5828 199.47455 257.7788 349.49558 474.62482 613.849 704.0437 740.3108 722.65027 651.06214 536.7709 443.0834 379.90442 347.2342 345.07266 370.591 392.8956 403.5096 402.43304 389.6659 366.03238 355.0466 367.47974 403.33182 462.60278 545.17597 621.9794 670.53675 690.8481 682.9136 646.7329 599.7444 565.77717 544.97126 537.32666 542.8435 560.77594 589.4109 628.68055 678.5849 739.1239 800.75214 826.7823 813.5923 761.1823 669.55207 547.4869 454.73172 402.5165 390.8413 419.70612 485.34094 534.8701 551.25086 534.48304 484.56674 402.63315 338.65286 319.43625 344.98334 415.2941 530.3474 640.0503 698.27674 705.02686 660.3006 564.098 454.75446 394.0547 382.83258 421.08807 508.82123 625.9802 718.6579 783.88154 821.6511 831.9666 820.88526 815.9307 820.47956 834.5317 858.08704 888.7598 906.711 907.50354 891.13715 857.61194 807.6845 755.4788 706.3278 660.23145 617.18964 577.12085 533.5745 482.4859 423.85486 357.68155 283.96594 216.07057 168.7567 142.03337 135.90059 150.35834 182.95427 229.04787 288.52908 361.39795 447.6544 537.8022 601.9286 637.8468 645.5567 625.0583 584.0541 564.22406 571.81037 606.8131 669.2322 755.4644 828.21076 877.6136 903.6727 906.38855 885.88764 845.4821 786.63556 709.34815 613.6197 499.57187 390.14764 302.40765 236.35187 191.98021 169.29276 160.6675 156.085 155.49997 158.91236 166.32218 178.12982 195.22254 217.63262 245.36002 278.40475 318.45517 371.76065 438.90622 519.892 614.71796 717.4503 789.4742 823.82416 820.5001 779.5023 703.4566 627.0436 561.0389 505.44257 460.2547 425.72678 411.80872 423.64764 461.24356 524.5966 613.6793 699.3389 755.8098 783.092 781.18525 750.0897 698.0363 637.8032 569.5375 493.23926 408.90848 324.31784 259.62195 215.85602 193.02 191.11397 209.176 243.00269 292.10257 356.47565 436.12198 526.2536 588.91047 615.9313 607.31604 563.0647 486.18967 429.1846 411.17184 432.15134 492.12314 590.2907 672.41974 705.5633 689.7213 624.89405 511.08118 398.6811 341.1753 338.57544 390.8815 498.09354 630.9316 735.90686 811.88306 858.86017 876.83814 868.2917 840.748 794.7263 730.2267 647.24915 553.1034 485.84747 450.94693 448.4016 478.21164 535.77234 575.6886 586.37946 567.845 520.08515 445.14117 392.44135 383.10812 417.1416 494.54175 615.0311 736.66657 829.3407 893.0532 927.8045 933.5944 923.24677 913.0315 903.00495 893.16675 883.51734 871.93494 853.8682 829.1646 797.824 759.8463 715.86274 668.1328 616.85804 562.0386 503.67435 446.1576 417.00302 420.99564 458.1355 528.42255 628.6274 718.2164 784.9907 828.9503 850.09546 848.77356 837.5625 822.769 804.393 782.4346 756.8826 720.502 667.11414 596.719 509.3166 404.90686 304.82098 241.14563 214.19998 223.98397 270.49762 342.86765 413.73166 481.7674 546.975 609.3541 663.8191 688.8373 681.99036 643.2783 572.7013 476.62585 403.65118 363.89917 357.3697 384.0629 441.91217 496.81598 536.7112 561.5977 571.4756 566.6467 565.44965 578.69556 606.3844 648.51636 705.0912 749.4161 754.1086 719.16785 644.59375 530.38636 409.23898 339.12827 321.17065 355.36615 441.71478 558.3928 640.94416 685.1443 690.9933 658.4911 595.65967 542.91925 505.86624 484.50067 478.82254 488.50766 510.49048 544.0126 589.074 645.6747 712.6395 763.2967 786.57624 782.47834 751.0028 692.40876 639.5638 615.3408 619.7398 652.7608 714.4038 783.4651 833.88965 865.60987 878.62604 872.93787 848.0064 802.7088 737.00995 650.91 544.4088 430.86478 356.68948 325.8432 338.3258 394.1374 483.0974 543.6069 565.3125 548.21454 492.3127 402.27884 334.0943 304.11023 312.32648 358.7431 442.3292 528.6778 601.03595 659.40357 703.78077 734.15674 745.6655 734.2842 700.0128 642.8513 562.79987 478.0326 415.06174 374.11365 355.18826 358.28558 379.96884 411.83844 453.51257 504.9915 566.2749 631.81537 678.8446 704.9072 710.00287 694.1318 659.64386 623.82056 590.1467 558.6224 529.24756 503.06308 496.36017 514.73444 558.1859 626.7147 719.73175 805.0868 864.38404 897.6237 904.80567 885.92994 855.9196 829.5672 806.87256 787.83594 772.45716 760.3113 750.66694 743.5116 738.8451 736.66736 731.91785 710.0833 670.2611 612.45105 536.6533 447.45428 367.22452 298.94888 242.62735 198.25997 166.0528 147.87744 144.18279 154.96883 180.23557 219.83173 270.53244 331.0378 401.3478 481.46243 571.1409 644.341 683.48884 688.5845 659.62775 596.61884 530.4214 497.75592 498.69016 533.2241 601.35785 684.1835 743.44715 778.0484 787.9872 773.26355 736.507 686.5835 624.21564 549.40345 462.14688 370.17578 318.6832 315.00702 359.14734 451.1041 585.80634 705.179 792.762 848.55524 872.55896 865.6032 853.3425 847.9073 849.2977 857.5137 872.5007 876.17286 854.05134 806.1361 732.42707 632.9243 536.6652 484.72076 477.38736 514.66504 596.5538 693.9591 737.8191 725.18934 656.0698 530.46045 369.6678 258.47382 205.65515 211.21176 275.14368 387.92368 482.01932 544.2498 574.6154 573.11585 541.5136 506.00235 475.318 449.4605 428.43 412.45233 412.68024 435.308 480.33563 547.763 637.5865 717.7801 757.66144 757.2307 716.48774 635.43274 543.3898 489.35458 474.08838 497.59125 559.8633 642.796 695.9981 716.50287 704.31037 659.42066 589.1604 528.0826 480.61917 446.77014 426.53558 420.64282 435.41986 472.33456 531.38685 612.5768 713.7146 791.1055 827.69086 823.4707 778.4449 692.93537 596.5134 508.4639 428.7866 357.48163 294.54892 246.20514 219.57598 214.66953 231.48581 270.02484 317.91675 350.97803 368.57697 370.71347 357.38763 335.22128 325.76267 330.67273 349.9515 383.59897 428.12323 463.93033 487.97104 500.2452 500.75287 490.86722 485.4772 488.64804 500.37985 520.6725 548.66864 560.2164 544.309 500.9465 430.12885 332.0366 249.66388 216.05417 231.20752 295.1239 407.8033 540.1046 652.45307 744.62494 816.62037 868.43915 901.16626 917.2783 916.872 899.9475 866.5045 817.2407 754.8187 679.4987 591.2809 490.16525 381.2838 299.24774 250.51238 235.07765 252.94364 301.45337 343.7918 368.17883 374.61438 363.0985 333.95828 301.303 272.64532 247.98523 227.32273 210.65953 201.26798 202.1344 213.2588 234.64113 266.28143 298.96344 317.95895 323.07602 314.3147 291.67493 262.8676 248.4457 249.5238 266.102 298.1803 341.46085 376.6021 401.25916 415.43195 419.12048 413.27176 405.66312 398.01678 390.33264 382.61087 375.06314 371.57025 373.58344 381.10284 394.12827 412.5034 424.38593 422.39 406.51575 376.76303 333.13193 288.3476 256.30365 237.00673 230.45685 236.65398 249.41394 257.15976 259.6257 256.81183 248.71814 243.22856 264.9021 315.5016 395.02704 503.47842 633.5048 745.83606 834.6722 900.01294 941.85846 959.1919 941.66486 886.57575 793.92426 663.7105 498.27295 357.0727 266.06866 225.26076 234.64897 293.98593 360.4339 402.5569 420.35492 413.82803 382.9762 349.53992 341.70865 359.59772 403.20712 472.53683 547.92334 586.3573 586.3239 547.82306 470.85498 369.30814 293.88174 249.22927 235.35068 252.24599 295.34753 335.41882 367.2686 390.89694 406.30383 413.0796 405.93704 383.25668 345.03857 291.28262 223.08214 181.90088 188.87924 244.01728 347.31488 498.70065 638.87775 716.3002 730.96814 682.88135 572.04004 433.47946 320.74426 234.40819 174.47132 140.93361 128.34362 122.782395 123.55696 130.66735 144.11353 166.61235 209.83737 275.12454 362.47388 471.88538 597.244 691.0746 743.3453 754.05616 723.2072 652.8672 577.9712 511.0326 452.05148 401.02786 357.98013 324.07767 300.01837 285.80215 281.42908 286.8991 291.3379 283.44553 263.22098 230.66426 185.77533 141.08994 119.07439 120.17697 144.39769 191.73653 252.09188 295.3354 319.4583 324.4607 310.34253 284.82132 287.1758 322.90643 392.0131 494.4959 624.91236 731.17926 800.29895 832.2711 827.0958 785.7559 730.9326 672.1118 609.2934 542.4774 471.7365 406.67215 354.01544 313.76633 285.92484 270.4909 271.68915 294.7466 339.6776 406.48224 495.1605 591.11036 663.73926 712.0809 736.13526 735.90247 712.4291 669.37006 607.0396 525.43787 424.5647 309.98312 215.52143 146.89316 104.098366 87.137055 94.28072 104.70128 112.29334 117.05693 118.992035 118.69701 136.2951 181.61234 254.6487 355.40418 483.8018 604.16425 686.9267 732.0892 739.65174 709.6143 665.13617 640.0531 634.6563 648.9458 682.9215 725.8332 751.3868 758.3855 746.82935 716.7184 673.85187 642.0321 623.8267 619.2358 628.2593 648.5337 662.69104 667.2316 662.1552 647.4621 624.2679 609.9941 610.61695 626.1364 656.5526 701.11835 719.3318 688.0657 607.31995 477.0947 298.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8795301 3.5316012 4.956213 6.153366 7.166556 8.163185 9.159815 10.156445 11.153074 12.149704 13.146336 14.142965 15.139594 16.136227 17.132855 18.129487 19.126116 20.122748 21.119378 22.116005 23.112633 24.109263 25.105893 26.102522 27.09915 28.095778 29.092411 30.089039 31.085669 32.0823 33.078923 34.075558 35.072186 36.068818 37.065445 38.062077 39.058705 40.055336 41.051968 42.048603 43.04523 44.041863 45.038495 46.035122 47.031758 48.02839 49.025017 50.021653 51.01828 52.014908 53.01154 54.008175 55.004803 56.001435 56.99807 57.9947 58.991326 59.987957 60.984597 61.981224 62.977856 63.97448 64.97112 65.96775 66.96438 67.96101 68.95765 69.95428 70.95091 71.94754 72.94417 73.94079 74.93742 75.93405 76.93068 77.92731 78.923935 79.92056 80.91718 81.91381 82.91043 83.90706 84.90369 85.900315 86.89695 87.89357 88.8902 89.886826 90.88345 91.88008 92.87671 93.87334 94.869965 95.86659 96.86321 97.85985 98.85646 99.853096 100.849724 101.846344 102.84298 103.8396 104.83623 105.832856 106.82948 107.82612 108.82274 109.81937 110.81599 111.81262 112.80924 113.80587 114.802506 115.799126 116.79575 117.79239 118.78902 119.78564 120.78227 121.77889 122.77552 123.772156 124.768776 125.7654 126.76204 127.75866 128.75528 129.75193 130.74854 131.74517 132.74179 133.73842 134.73505 135.73168 136.7283 137.72495 138.72156 139.71819 140.71482 141.71143 142.70807 143.70471 144.70134 145.69799 146.69463 147.69126 148.68788 149.68451 150.68117 151.67781 152.67443 153.67105 154.66771 155.66432 156.66098 157.65761 158.65425 159.65088 160.64752 161.64415 162.64078 163.63742 164.63407 165.63069 166.62732 167.62397 168.62059 169.61724 170.61388 171.61049 172.60715 173.60376 174.6004 175.59705 176.59368 177.59033 178.58695 179.58359 180.58023 181.57686 182.5735 183.57013 184.56678 185.5634 186.56003 187.55666 188.55332 189.54994 190.54657 191.54322 192.53984 193.53647 194.53311 195.52976 196.52637 197.52301 198.51964 199.5163 200.51293 201.50955 202.5062 203.50283 204.49948 205.49611 206.49274 207.48938 208.48601 209.48265 210.47928 211.47592 212.47257 213.46918 214.46584 215.46247 216.45909 217.45575 218.45236 219.449 220.44565 221.44229 222.4389 223.43556 224.43218 225.42882 226.42545 227.42209 228.4187 229.41535 230.41199 231.40865 232.40529 233.40187 234.39853 235.39517 236.39182 237.38843 238.38507 239.3817 240.37831 241.37496 242.37162 243.36826 244.3649 245.36154 246.35816 247.35482 248.3514 249.34807 250.3447 251.34134 252.33798 253.3346 254.33124 255.3279 256.32452 257.32114 258.31778 259.3144 260.31104 261.30768 262.30432 263.30096 264.29758 265.29425 266.29086 267.2875 268.28415 269.2808 270.2774 271.27408 272.2707 273.2673 274.26395 275.2606 276.25723 277.25385 278.2505 279.24713 280.24377 281.24042 282.23703 283.23364 284.2303 285.22687 286.22348 287.22012 288.2167 289.21335 290.20996 291.20657 292.2032 293.19983 294.19644 295.19305 296.1897 297.1863 298.18292 299.17954 300.17618 301.1728 302.1694 303.16602 304.16266 305.15927 306.15588 307.1525 308.14914 309.14572 310.14236 311.13898 312.1356 313.13223 314.1288 315.12546 316.12207 317.11868 318.1153 319.1119 320.10852 321.10516 322.10178 323.09842 324.09503 325.0916 326.08826 327.08487 328.0815 329.0781 330.07474 331.07135 332.06793 333.06458 334.0612 335.0578 336.05444 337.0511 338.04767 339.04428 340.04092 341.03754 342.03418 343.0308 344.0274 345.02402 346.02063 347.01727 348.01386 349.0105 350.00708 351.00372 352.00034 352.99698 353.9936 354.9902 355.98682 356.98346 357.98007 358.97665 359.9733 360.9699 361.96655 362.9631 363.95978 364.9564 365.953 366.94962 367.94623 368.94287 369.93948 370.9361 371.9327 372.92932 373.92596 374.92258 375.9192 376.9158 377.9124 378.90903 379.9057 380.90228 381.89893 382.89554 383.89212 384.88876 385.88538 386.88202 387.87863 388.8752 389.8719 390.86844 391.86505 392.86166 393.85828 394.85492 395.85153 396.84814 397.8448 398.8414 399.838 400.83466 401.83124 402.82788 403.82452 404.82114 405.81775 406.81436 407.81097 408.80762 409.80423 410.80087 411.7975 412.79407 413.7907 414.78732 415.78394 416.78058 417.77716 418.7738 419.7704 420.76703 421.76364 422.76028 423.7569 424.7535 425.75012 426.74677 427.74335 428.74 429.73663 430.73322 431.72986 432.72647 433.72308 434.7197 435.7163 436.71295 437.70956 438.70618 439.70282 440.69946 441.69608 442.69263 443.6893 444.68594 445.68256 446.6791 447.67572 448.67236 449.66898 450.66565 451.6622 452.65884 453.65546 454.652 455.64868 456.6453 457.64194 458.63855 459.63516 460.63178 461.6284 462.62506 463.62164 464.6182 465.61484 466.61145 467.60812 468.60474 469.60135 470.59796 471.5946 472.59122 473.58783 474.58444 475.58105 476.5777 477.57425 478.57092 479.5675 480.56418 481.5608 482.55734 483.55402 484.55063 485.54727 486.54382 487.5405 488.5371 489.53372 490.53037 491.52692 492.52353 493.5202 494.51678 495.51346 496.51007 497.50668 498.5033 499.49994 500.49655 501.49316 502.48978 503.4864 504.48303 505.47965 506.47626 507.47287 508.46948 509.46613 510.46274 511.45935 512.45594 513.4526 514.44916 515.4458 516.4424 517.4391 518.43567 519.43226 520.4289 521.42554 522.4222 523.41877 524.41535 525.412 526.4086 527.4052 528.40186 529.3985 530.3951 531.3917 532.38837 533.385 534.3816 535.37824 536.3748 537.37146 538.36805 539.36475 540.3613 541.3579 542.35456 543.3512 544.3478 545.34436 546.34095 547.33765 548.3342 549.3308 550.32746 551.3241 552.3207 553.3173 554.31397 555.31055 556.3072 557.3038 558.3004 559.29706 560.2937 561.29035 562.2869 563.28357 564.28016 565.2768 566.2734 567.27 568.26667 569.2633 570.2598 571.2565 572.2531 573.24976 574.24634 575.243 576.2396 577.2362 578.2328 579.22944 580.226 581.22266 582.2193 583.2159 584.2125 585.20917 586.20575 587.2024 588.199 589.1956 590.19227 591.18885 592.1855 593.1821 594.1787 595.17536 596.172 597.1686 598.1652 599.1618 600.15845 601.1551 602.15174 603.1483 604.1449 605.14155 606.1381 607.1347 608.13135 609.128 610.1246 611.1213 612.1178 613.1145 614.111 615.1077 616.1043 617.10096 618.09754 619.0942 620.09076 621.0874 622.08405 623.0806 624.07734 625.0739 626.07056 627.06714 628.0637 629.0604 630.057 631.0536 632.05024 633.0468 634.04346 635.04004 636.0367 637.0333 638.02985 639.02655 640.02314 641.0198 642.0164 643.01307 644.00965 645.0063 646.00287 646.9995 647.9961 648.9928 649.9894 650.986 651.9826 652.9792 653.9758 654.9725 655.96906 656.9657 657.96235 658.959 659.95557 660.95215 661.9488 662.9454 663.942 664.9386 665.9352 666.93177 667.92847 668.92505 669.9217 670.91834 671.915 672.91156 673.9082 674.90485 675.9014 676.8981 677.89466 678.8913 679.88794 680.8845 681.88117 682.8778 683.8744 684.87104 685.8677 686.8643 687.8609 688.8575 689.8541 690.8507 691.84736 692.84394 693.84064 694.8372 695.8338 696.83045 697.827 698.82367 699.8203 700.8169 701.81354 702.8102 703.8068 704.80335 705.80005 706.79664 707.7933 708.7899 709.7865 710.78315 711.7798 712.77637 713.77295 714.7696 715.7662 716.7629 717.75946 718.7561 719.7527 720.7493 721.7459 722.74256 723.73914 724.7358 725.73237 726.729 727.72565 728.7222 729.7189 730.71546 731.71216 732.70874 733.7054 734.70197 735.6986 736.69526 737.6918 738.6885 739.68506 740.68165 741.6783 742.675 743.6716 744.66816 745.6648 746.6614 747.658 748.65467 749.6512 750.6478 751.6445 752.6411 753.6377 754.6343 755.6309 756.62757 757.6242 758.6208 759.6174 760.614 761.61066 762.6073 763.6039 764.6006 765.5971 766.59375 767.59046 768.58704 769.5837 770.5802 771.5769 772.5735 773.5701 774.5668 775.56336 776.55994 777.5566 778.5532 779.5498 780.54645 781.543 782.5396 783.53626 784.53284 785.5294 786.5261 787.5227 788.51935 789.516 790.5126 791.5092 792.50586 793.50245 794.4991 795.4957 796.4923 797.48896 798.48554 799.4822 800.47876 801.47535 802.47205 803.4686 804.46534 805.4619 806.45856 807.45514 808.4517 809.44837 810.44507 811.4416 812.4382 813.4349 814.43146 815.42804 816.4247 817.4214 818.41797 819.4146 820.41114 821.40784 822.4044 823.401 824.39765 825.3942 826.3909 827.3875 828.3841 829.3807 830.3774 831.374 832.3706 833.3673 834.3639 835.3605 836.35706 837.3537 838.3503 839.3469 840.3435 841.3402 842.3368 843.3334 844.32996 845.32666 846.3233 847.3199 848.31647 849.3131 850.30976 851.30634 852.303 853.2996 854.2962 855.29285 856.28956 857.28614 858.2827 859.2793 860.2759 861.2726 862.26917 863.2658 864.26246 865.25904 866.2556 867.25226 868.24884 869.2454 870.2421 871.2387 872.23536 873.23194 874.2285 875.2252 876.22187 877.21845 878.2151 879.2117 880.2084 881.205 882.2016 883.1982 884.1948 885.1914 886.18805 887.18476 888.18134 889.17786 890.17457 891.1711 892.16767 893.16437 894.1609 895.1576 896.1542 897.1508 898.1475 899.144 900.1406 901.1372 902.13385 903.13056 904.127 905.12366 906.12037 907.1169 908.11347 909.11017 910.1068 911.1035 912.10004 913.09675 914.0933 915.08997 916.08655 917.0832 918.0799 919.0764 920.073 921.0697 922.0662 923.0628 924.0596 925.05616 926.05274 927.0494 928.04596 929.04267 930.0392 931.0359 932.0324 933.029 934.0257 935.0222 936.0189 937.0155 938.01227 939.0087 940.0055 941.0021 941.99866 942.9953 943.9919 944.9885 945.9851 946.98175 947.97834 948.97504 949.97156 950.96814 951.96485 952.9615 953.9582 954.9547 955.9513 956.9479 957.9445 958.9411 959.9377 960.9343 961.931 962.92756 963.92426 964.9209 965.9175 966.9142 967.9107 968.9074 969.904 970.90064 971.8972 972.89386 973.89057 974.8871 975.88367 976.88025 977.8769 978.8735 979.87024 980.8668 981.8634 982.86 983.85675 984.85334 985.84986 986.84644 987.8431 988.83967 989.83637 990.833 991.8297 992.8262 993.83875 995.03437 996.45716 998.1076 1000.0)) (quote (248.0 381.26746 468.8536 510.75848 506.9822 466.0008 420.43808 373.52106 325.24976 275.96893 234.0469 203.0634 183.01837 173.91187 177.5156 196.85129 231.96971 282.87085 346.06012 398.1975 434.9689 456.37442 462.46353 460.07642 454.04312 444.3636 431.03796 421.91562 438.94083 483.41644 555.3425 651.48945 728.8343 773.9365 786.79627 767.4136 730.6543 694.7347 659.70057 625.55195 589.1457 535.83887 463.78024 372.96988 264.60443 184.54665 156.26462 179.75833 255.02779 353.91843 418.8828 448.21884 441.92648 406.03183 391.0928 408.5006 458.25525 540.2858 605.75287 612.777 561.358 451.4959 308.56793 217.58765 185.41504 212.0501 293.7673 362.27545 392.02985 383.0306 335.27768 267.53806 207.66466 155.91692 112.2949 78.01264 59.9832 59.29902 75.96008 109.7332 144.07614 168.8349 184.00948 189.5999 193.59047 215.49773 256.20868 315.72333 391.18543 451.7583 489.04797 503.05438 493.77753 463.62677 415.14075 348.31976 263.16385 167.41017 92.27328 41.044712 13.724457 10.717653 42.936638 115.26326 227.69753 380.2394 538.19 639.59607 683.2366 669.1117 604.3946 539.726 484.95422 440.07907 405.18613 396.0248 424.26254 489.89938 592.9353 705.4616 745.84546 708.8267 594.40546 409.4445 252.55577 155.98474 119.73147 143.7959 196.93175 238.92003 269.60522 288.98743 298.39423 304.3257 307.65283 308.37552 306.96027 323.8966 370.15842 445.74567 550.65845 659.9896 720.46485 730.30994 689.52466 606.17737 552.22376 544.68116 583.54957 668.8046 763.05256 832.55835 877.3221 897.3436 888.5206 836.4602 739.916 598.8881 416.53177 256.0984 142.3365 75.24611 54.827195 63.389645 73.417336 84.59098 96.91058 111.71746 137.05933 174.27742 223.37175 284.29297 352.7908 426.13284 504.31912 587.34974 669.5109 736.20087 786.6912 820.982 837.8103 822.59314 771.17444 683.554 559.732 442.70584 380.13342 372.0458 418.44296 508.2717 594.79755 672.7809 742.22175 802.92457 849.0242 877.7782 889.1867 883.24964 869.1161 863.86585 867.8873 881.1807 900.5997 902.67377 882.6101 840.4088 776.0905 695.0091 601.3224 495.03012 376.13232 254.30506 159.12239 92.640625 54.859745 46.424965 77.33798 151.01583 267.4585 426.66602 592.6668 716.94617 799.242 839.5544 841.94336 827.2655 798.47144 755.56147 699.11457 658.41974 649.8636 673.4462 729.1676 801.45765 855.5535 890.1683 905.30164 901.4299 883.05616 851.29596 806.1488 747.6175 690.2767 647.93744 620.5998 608.2637 606.008 595.78394 575.92347 546.4266 508.3652 485.2396 486.64767 512.58967 563.06537 618.8628 648.74054 652.2612 629.4252 584.49457 544.3807 513.799 492.7495 481.33896 490.9036 529.0649 595.8229 691.1776 793.5024 845.1021 842.842 786.7222 681.1139 580.0016 499.46426 439.50204 400.1148 372.88156 348.00604 325.4745 305.28696 292.1593 306.96942 352.19836 427.84607 532.3735 614.0354 647.569 632.9742 570.25104 488.3141 443.5621 437.45874 470.00385 533.9086 571.6463 570.8917 531.64484 454.00333 376.08728 328.95465 312.6054 327.03955 367.54865 419.08154 480.51096 551.83686 630.26557 668.84894 650.81366 576.1599 444.88757 307.02722 233.3478 224.36043 280.06503 383.69354 444.622 449.29648 397.71704 291.17062 206.0951 187.27417 234.70787 348.3962 492.7095 584.40265 620.0501 599.65204 530.7363 489.36182 495.28235 548.4978 649.00824 741.8807 772.1966 739.95606 645.159 507.71725 404.26135 342.37082 322.04575 341.44434 355.855 346.1494 312.32758 254.38942 200.31455 197.83687 247.7587 350.08002 496.26794 629.3015 738.6353 824.26966 886.22815 927.7621 951.1702 956.4518 943.6071 908.52356 839.6947 736.4362 598.7482 431.23355 295.30164 210.15448 175.79216 192.21463 243.071 308.30243 387.85773 481.737 581.9388 651.13556 684.6007 682.3342 645.25544 608.74506 590.9339 591.822 611.40937 630.072 607.6337 542.90076 435.87314 296.02975 203.09009 175.05077 211.91182 313.6056 432.09882 526.1111 595.6426 640.6931 661.0828 656.2071 626.0172 570.51307 491.86945 430.1381 400.3361 402.46335 436.51993 485.06183 522.1292 547.47706 561.1053 562.1524 545.69715 510.95938 457.9391 387.04782 327.82065 298.43927 298.90375 329.21408 380.1474 429.0938 475.0192 517.9235 557.8631 595.44825 630.8459 664.0558 695.078 709.8634 693.5558 646.1522 567.6527 472.60672 419.9177 415.82584 460.33112 550.9085 618.98414 633.7748 595.2805 503.50125 384.15207 283.31232 201.901 139.91814 98.90812 89.8241 114.80497 173.85071 266.8332 369.5125 463.85794 549.86945 627.547 687.2991 700.95874 666.6984 584.51807 458.04984 339.8486 247.16997 180.01395 138.38056 127.30129 153.2819 216.34845 316.5009 439.7712 517.4507 540.2826 508.26697 422.86853 349.34506 322.80408 343.24554 410.66943 495.23987 532.852 521.3461 460.72223 359.3579 292.4627 277.9149 315.71448 405.8341 501.39948 559.8789 581.27247 565.5801 521.25727 478.13278 438.8107 403.29095 372.1256 356.50616 360.8361 385.1153 429.3438 472.47308 481.56534 456.2281 396.46133 314.0505 280.21112 306.8968 394.1075 540.8593 659.8674 694.6509 645.2096 511.54376 336.13965 228.28919 193.51673 231.82228 335.3077 411.80457 434.8602 404.4746 320.64777 228.55382 178.66414 171.017 205.61238 272.82855 331.66592 377.4815 410.27533 430.0893 438.20505 435.22626 421.15295 395.98505 366.96927 347.7405 338.61664 339.5976 352.6193 392.27243 461.56308 560.49115 688.8454 788.103 812.4076 761.759 636.1571 467.69855 355.33627 306.0513 319.84366 393.38944 474.34982 544.6845 604.39344 653.4766 680.72376 670.8685 623.8233 539.5879 431.93228 372.33167 371.01642 427.98648 541.67865 630.4152 648.053 594.59205 470.03238 309.00983 189.61463 114.80586 84.58354 95.75502 117.6678 142.65372 170.71276 201.84619 247.72617 319.5454 417.304 541.0019 670.4682 730.90857 715.3022 623.6487 459.76633 309.32224 207.68366 154.85057 150.82299 183.83206 234.52155 302.60803 388.0916 486.9631 573.56525 643.3434 696.29737 732.33 740.4651 713.23304 650.63404 552.6679 435.193 341.01764 272.52112 229.70349 213.06511 228.9048 279.1219 363.7164 482.68832 598.1415 665.38465 684.34314 655.01697 585.2064 509.91626 433.37604 355.58575 277.5521 234.29303 243.12091 304.03583 417.03766 541.46644 597.00934 581.5056 494.9552 348.9613 236.60825 178.11315 173.47595 222.58965 277.47726 298.5083 285.6829 239.0009 179.73851 176.77704 235.38233 355.55444 531.2241 657.9908 698.0848 651.506 518.25446 365.81256 290.9055 294.28516 375.9515 518.67206 627.975 689.5141 703.28956 670.045 636.09107 628.9097 648.50116 694.86536 757.1364 809.6092 851.1957 881.8961 901.30475 905.2478 892.62726 863.4431 817.69526 758.0985 687.4073 605.6215 512.7413 417.556 354.33832 326.53983 334.16046 375.65027 412.29462 427.32297 420.73517 392.5313 359.6118 351.1801 367.75012 409.32193 470.20865 511.82147 526.92206 515.5104 477.83167 450.43964 459.50845 505.0381 587.0287 690.1874 771.1888 827.3966 858.81116 865.0637 841.13324 785.42975 697.9532 578.7036 466.94336 411.50397 412.52683 470.01196 571.43494 657.5628 720.77247 761.06385 778.9202 793.6383 815.2319 843.7008 879.0454 902.11994 873.2329 791.16517 655.9167 476.32135 327.93198 228.03556 176.63211 173.70534 205.20908 258.9019 334.78375 432.85465 545.0373 643.8624 727.0616 794.6346 845.3234 855.38715 815.8119 726.5978 587.74476 446.65463 374.79843 372.89502 440.9444 561.2741 631.46546 635.03766 571.9906 443.3932 330.1059 282.55234 300.73254 384.6465 506.52045 597.4111 654.08057 676.52894 667.1557 652.4782 639.8322 629.2175 620.6343 608.73066 587.7657 557.7376 518.64637 470.5014 413.34122 347.17 271.9877 189.2366 139.28525 140.48332 192.8308 296.32767 425.83023 535.7073 625.0101 693.73847 742.893 779.682 805.53266 820.44507 824.40485 814.42066 788.2373 745.85505 687.27375 615.50287 539.4921 459.83545 376.5326 291.52606 233.53524 212.10947 227.24874 278.95306 335.3371 354.612 336.59268 281.279 202.28945 167.54819 186.35231 258.70184 383.0972 490.00723 541.54877 537.72187 478.52646 385.19 303.89508 236.2469 182.24552 144.95694 152.38437 211.27378 321.62512 483.4098 629.70234 698.9061 691.02124 606.0476 472.78946 394.17914 379.3753 428.37805 537.41034 627.89875 668.53986 659.3337 600.2803 512.3726 428.8898 350.25107 276.45642 213.36602 196.91846 233.235 322.31564 463.4364 588.44806 652.6741 656.1147 598.7698 502.2138 422.6422 362.9679 323.1908 302.0213 284.11472 265.0101 244.70746 223.2069 201.92378 182.4622 164.82366 149.00815 137.595 141.72293 162.67498 200.4511 254.89408 321.03207 396.49365 481.27887 575.3876 660.5554 701.97974 698.81757 651.06904 563.31867 470.68176 380.4929 292.75217 207.55527 154.60353 157.48905 216.21176 330.77176 482.15418 610.9898 713.0006 788.18665 835.87177 845.16724 812.2721 737.18665 619.9107 500.23907 433.0925 418.81424 457.4042 538.17035 604.8254 649.18714 671.2556 671.5043 675.7718 698.8428 740.7171 801.3949 860.8724 873.48255 837.4435 752.75525 625.94336 520.7814 453.4345 423.9029 432.18582 467.01068 517.4096 583.3825 664.9294 751.0032 800.1048 808.266 775.48694 702.9841 618.80744 534.683 450.61066 366.59033 296.45856 263.26648 267.36865 308.7651 379.45673 427.47437 443.45853 427.4092 379.73044 349.23273 369.57193 440.74802 562.761 701.1232 761.5647 738.7191 632.5864 451.59436 304.003 222.87458 208.20915 260.0067 329.69037 359.17236 348.33902 297.19037 219.36296 176.88742 177.38367 220.85163 305.8474 380.36572 418.37103 419.8634 384.84277 341.77332 347.58923 403.87738 510.6379 657.9724 765.1583 814.42347 805.7678 739.28266 662.3415 614.62116 596.1216 606.8428 633.20826 630.7009 595.8476 528.64814 432.73944 372.17246 370.41174 427.45718 543.30884 662.2124 703.19214 665.5727 549.3539 373.33136 242.03119 171.56858 161.94356 212.58023 285.8407 359.10114 432.3616 505.62204 567.7645 592.1566 577.6397 524.2138 439.64142 405.26483 442.76825 552.15174 735.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8986082 3.6118405 5.139697 6.4821773 7.6392818 8.647685 9.6433325 10.638982 11.634629 12.630278 13.625925 14.621573 15.617221 16.612868 17.608515 18.604163 19.59981 20.595459 21.591105 22.586752 23.582402 24.578049 25.573698 26.569348 27.564995 28.56064 29.556294 30.551939 31.547589 32.54324 33.538887 34.53454 35.530186 36.525834 37.52148 38.51713 39.51278 40.50843 41.504078 42.49973 43.495377 44.491028 45.486668 46.482315 47.47796 48.473607 49.469258 50.4649 51.46055 52.456192 53.451836 54.447487 55.443127 56.43877 57.434426 58.43006 59.425713 60.42136 61.41701 62.41265 63.408303 64.403946 65.39959 66.39524 67.390885 68.38653 69.38217 70.37782 71.373474 72.36912 73.36476 74.36041 75.35606 76.3517 77.34734 78.342995 79.33863 80.33428 81.32993 82.32558 83.32123 84.31687 85.31252 86.30817 87.30381 88.29945 89.295105 90.29076 91.28639 92.28204 93.277695 94.27333 95.268975 96.264626 97.26028 98.25592 99.25157 100.247216 101.24286 102.23851 103.234146 104.2298 105.22545 106.22109 107.216736 108.21239 109.20803 110.203675 111.199326 112.19497 113.190605 114.18627 115.18191 116.17755 117.1732 118.16885 119.16449 120.16014 121.155785 122.15142 123.14707 124.14272 125.138375 126.13401 127.129654 128.1253 129.12094 130.1166 131.11225 132.1079 133.10355 134.09918 135.09482 136.09047 137.08612 138.08177 139.07743 140.07306 141.06871 142.06436 143.06 144.05565 145.0513 146.04694 147.04257 148.03823 149.03389 150.02953 151.02518 152.02082 153.01647 154.0121 155.00777 156.00339 156.99906 157.99469 158.99034 159.98598 160.98163 161.97727 162.97292 163.96858 164.9642 165.95986 166.9555 167.95117 168.9468 169.94246 170.9381 171.93375 172.9294 173.92504 174.9207 175.91635 176.912 177.90767 178.90332 179.89899 180.89464 181.89028 182.88594 183.88159 184.87726 185.87291 186.86858 187.86425 188.85988 189.85553 190.85121 191.84685 192.84252 193.83818 194.83383 195.82949 196.82514 197.8208 198.81647 199.8121 200.80776 201.80342 202.79909 203.79474 204.79039 205.78604 206.7817 207.77736 208.77301 209.76865 210.76432 211.76 212.75565 213.7513 214.74697 215.74262 216.73827 217.73394 218.72959 219.72525 220.72092 221.71656 222.71219 223.70784 224.70349 225.69918 226.69483 227.69046 228.68611 229.6818 230.67745 231.6731 232.66873 233.66439 234.6601 235.65573 236.65139 237.64707 238.64272 239.63838 240.634 241.62969 242.62537 243.621 244.61666 245.6123 246.60796 247.6036 248.59929 249.59493 250.59058 251.58626 252.58191 253.57756 254.5732 255.56885 256.5645 257.56015 258.55582 259.55145 260.54712 261.5428 262.53845 263.53412 264.52975 265.52545 266.52106 267.51672 268.5124 269.50803 270.50372 271.49936 272.49503 273.4907 274.48633 275.48196 276.47763 277.4733 278.46893 279.4646 280.46027 281.4559 282.45157 283.4472 284.44287 285.43854 286.4342 287.42987 288.4255 289.42117 290.41684 291.41248 292.40814 293.4038 294.39948 295.39514 296.39078 297.3864 298.38208 299.37775 300.3734 301.36908 302.36472 303.36038 304.35602 305.35168 306.34735 307.34302 308.33865 309.33432 310.32996 311.32565 312.3213 313.31693 314.3126 315.30826 316.3039 317.29956 318.2952 319.29086 320.28653 321.28217 322.27783 323.2735 324.26913 325.2648 326.26047 327.25613 328.25177 329.24744 330.2431 331.23877 332.2344 333.23007 334.2257 335.22137 336.21704 337.2127 338.20837 339.204 340.19968 341.1953 342.191 343.18665 344.1823 345.17792 346.1736 347.16925 348.16492 349.16055 350.1562 351.15186 352.1475 353.14316 354.1388 355.13446 356.13016 357.12576 358.12143 359.11707 360.11276 361.1084 362.10407 363.0997 364.09537 365.09106 366.0867 367.08237 368.078 369.07367 370.06934 371.065 372.06064 373.05627 374.05194 375.0476 376.04324 377.03894 378.03455 379.0302 380.02588 381.02155 382.0172 383.01282 384.0085 385.00415 385.99982 386.99548 387.99115 388.9868 389.98245 390.97815 391.97376 392.96942 393.96506 394.96075 395.9564 396.95206 397.9477 398.9434 399.93903 400.9347 401.93033 402.92603 403.92166 404.91733 405.91293 406.90863 407.90427 408.89996 409.8956 410.89124 411.8869 412.88254 413.8782 414.87387 415.8695 416.86517 417.86084 418.85645 419.85214 420.8478 421.84345 422.8391 423.83478 424.83044 425.8261 426.82175 427.8174 428.81308 429.80872 430.80438 431.80005 432.79572 433.79138 434.787 435.78265 436.77832 437.774 438.76962 439.76526 440.76096 441.75662 442.75226 443.74786 444.7436 445.73923 446.73483 447.73053 448.72614 449.72183 450.71744 451.71317 452.7088 453.7044 454.7001 455.69577 456.69138 457.68707 458.68274 459.67838 460.67398 461.6697 462.66534 463.66107 464.65668 465.6523 466.64798 467.64368 468.63934 469.63495 470.63065 471.62625 472.6219 473.6176 474.61322 475.60892 476.60452 477.60022 478.5959 479.5915 480.5872 481.58286 482.5785 483.57416 484.56982 485.5655 486.56113 487.5568 488.55243 489.54803 490.54373 491.5394 492.53506 493.5307 494.52637 495.52203 496.51767 497.51334 498.50897 499.50464 500.5003 501.496 502.4916 503.4873 504.4829 505.47858 506.47427 507.46988 508.46558 509.46118 510.45685 511.45255 512.4482 513.44385 514.43946 515.4352 516.4308 517.42646 518.4221 519.4178 520.41346 521.4091 522.40467 523.4004 524.39606 525.3917 526.3873 527.383 528.37867 529.3743 530.37 531.36567 532.3613 533.35694 534.3526 535.34827 536.34394 537.3396 538.33527 539.3309 540.32654 541.3222 542.3179 543.3135 544.3092 545.3048 546.3005 547.29615 548.2918 549.2875 550.28315 551.2788 552.2744 553.27015 554.26575 555.2614 556.2571 557.2527 558.2484 559.244 560.2397 561.23536 562.23096 563.2266 564.2223 565.21796 566.2136 567.2092 568.2049 569.20057 570.1962 571.19184 572.18757 573.1832 574.1789 575.17457 576.17017 577.16584 578.1615 579.15717 580.15284 581.1485 582.14417 583.13984 584.1355 585.1311 586.1268 587.12244 588.11805 589.1137 590.1094 591.10505 592.1007 593.0963 594.092 595.08765 596.0833 597.079 598.07465 599.07026 600.0659 601.0616 602.05726 603.05286 604.0486 605.0442 606.03986 607.0355 608.0311 609.02686 610.0225 611.0182 612.01386 613.0095 614.0052 615.00086 615.99646 616.9921 617.9878 618.9834 619.97907 620.9748 621.9704 622.96607 623.96174 624.9574 625.95307 626.94867 627.94434 628.93995 629.93567 630.93134 631.927 632.9226 633.9182 634.91394 635.9096 636.9053 637.9009 638.89655 639.8922 640.8879 641.8835 642.87915 643.8748 644.8705 645.86615 646.86176 647.8575 648.85315 649.84876 650.8445 651.8401 652.83576 653.8314 654.827 655.82276 656.81836 657.814 658.8097 659.80536 660.80097 661.7967 662.7923 663.78797 664.7836 665.7793 666.7749 667.77057 668.7663 669.76197 670.75757 671.7533 672.7489 673.7445 674.74024 675.73584 676.73145 677.7272 678.7228 679.71845 680.7141 681.7097 682.70545 683.7011 684.6968 685.6924 686.6881 687.6837 688.6793 689.67505 690.67066 691.6663 692.66205 693.6576 694.6533 695.649 696.6446 697.64026 698.6359 699.63154 700.62726 701.62287 702.61847 703.61414 704.6098 705.60547 706.6011 707.5968 708.59247 709.5881 710.5838 711.57935 712.5751 713.5707 714.5664 715.562 716.55774 717.55335 718.549 719.5447 720.5403 721.53595 722.5317 723.5273 724.52295 725.5186 726.5143 727.5099 728.5056 729.5012 730.4969 731.49256 732.48816 733.4838 734.4795 735.47516 736.4708 737.4665 738.46216 739.45777 740.4534 741.4491 742.44477 743.4404 744.43616 745.43177 746.4274 747.42304 748.4187 749.41437 750.41004 751.40564 752.40137 753.397 754.3927 755.38825 756.3839 757.3796 758.3753 759.3709 760.3666 761.36225 762.3579 763.3535 764.34925 765.3449 766.34046 767.3362 768.3318 769.32746 770.3231 771.31885 772.31446 773.3101 774.3058 775.3014 776.29706 777.2927 778.2884 779.2841 780.27967 781.2754 782.271 783.2667 784.2624 785.25806 786.25367 787.24927 788.245 789.24067 790.23627 791.23194 792.22754 793.2232 794.2189 795.2145 796.2102 797.2058 798.20154 799.19715 800.19275 801.1885 802.1841 803.1798 804.1754 805.17115 806.16675 807.1625 808.15815 809.15375 810.1494 811.1451 812.14075 813.1364 814.1321 815.1277 816.1234 817.11896 818.1146 819.1103 820.10596 821.1016 822.0973 823.09296 824.08857 825.0842 826.07996 827.0755 828.0713 829.0669 830.0625 831.0582 832.0538 833.04944 834.04517 835.04084 836.03644 837.0321 838.0278 839.02344 840.01917 841.0147 842.0104 843.0061 844.0017 844.9974 845.99305 846.9887 847.9844 848.98005 849.9757 850.9714 851.96705 852.96265 853.9583 854.954 855.9496 856.9453 857.9409 858.9365 859.93226 860.9279 861.9236 862.9192 863.91486 864.9106 865.9062 866.90186 867.89747 868.8932 869.8888 870.8844 871.88007 872.8758 873.8714 874.86707 875.86274 876.85846 877.8541 878.84974 879.84546 880.8412 881.8367 882.83234 883.82807 884.8238 885.8193 886.815 887.8106 888.80634 889.802 890.7976 891.7932 892.7889 893.7846 894.7801 895.7758 896.77155 897.76716 898.7628 899.7584 900.754 901.74976 902.7454 903.741 904.73676 905.73224 906.72797 907.7237 908.71936 909.7151 910.7107 911.7063 912.702 913.6977 914.6932 915.6889 916.6845 917.68024 918.6759 919.67164 920.66724 921.66285 922.6585 923.65424 924.64985 925.64545 926.6412 927.6368 928.63245 929.6282 930.6239 931.6194 932.6151 933.6108 934.6064 935.6021 936.5976 937.5933 938.58905 939.5847 940.58045 941.57605 942.57166 943.5674 944.56305 945.55866 946.55426 947.55 948.54566 949.54126 950.537 951.5325 952.5282 953.5239 954.5196 955.5153 956.5108 957.50654 958.5022 959.4979 960.4935 961.48926 962.485 963.48047 964.4762 965.47187 966.46735 967.4631 968.45874 969.45447 970.4501 971.4458 972.4414 973.437 974.4327 975.4284 976.424 977.4196 978.4153 979.411 980.4066 981.40235 982.3981 983.39356 984.3893 985.38495 986.3807 987.37616 988.3719 989.36756 990.3633 991.3589 992.36774 993.52607 994.8697 996.39875 998.1134 1000.0)) (quote (748.0 657.7148 596.13245 563.253 559.0764 583.60267 626.7776 651.33295 653.7719 634.09424 592.30024 529.9237 478.82095 451.6719 448.47647 469.23483 513.9468 568.3454 610.66895 640.6863 658.3975 663.8026 655.9735 629.6861 584.1247 519.2895 435.1803 332.19928 234.16571 155.02478 94.776436 53.42071 30.957612 29.911597 55.96713 109.33894 190.02706 298.03146 428.91068 542.2018 628.17664 686.8352 718.1774 722.2149 710.6227 693.6921 671.423 643.8155 610.86957 577.1936 558.0465 554.63746 566.9664 595.0333 637.9135 680.1146 716.11066 745.9017 769.48755 786.8684 798.23456 803.8449 803.7008 797.8023 786.1494 771.12384 764.57007 768.1039 781.7252 805.43415 838.88276 867.7857 884.65986 889.50525 882.3218 863.1094 832.9503 794.0279 746.40455 690.08014 625.0549 552.96515 486.68634 428.9698 379.81558 339.2237 307.2186 290.46268 294.15924 318.3082 362.9096 427.96347 506.76825 579.46405 644.7416 702.60077 753.0415 795.8675 828.3638 849.66327 859.7658 858.6717 846.3806 832.5435 828.8037 835.18604 851.6907 878.3175 909.65155 921.80024 911.9366 880.0605 826.1721 750.7843 669.4494 589.46656 510.83557 433.5565 357.62943 291.76907 251.72339 237.8152 250.04456 288.41147 349.96362 414.4763 478.1224 540.9018 602.8146 663.7243 706.46875 719.124 701.6898 654.16626 576.55335 482.22165 406.6738 351.82108 317.66345 304.20093 310.7903 329.97797 359.6345 399.7599 450.35416 511.41736 572.1651 621.09504 658.2041 683.4924 696.9598 698.3526 686.6741 661.82276 623.7987 572.6019 509.1206 454.12805 416.36398 395.82855 392.52173 406.44348 430.24747 452.0641 471.73148 489.24966 504.6186 518.73444 536.97895 560.24994 588.5474 621.87134 659.98194 685.1576 686.4138 663.7508 617.16816 546.666 464.4704 399.67734 353.53452 326.0419 317.19955 325.18024 331.9922 333.04962 328.35248 317.9008 301.69708 289.71845 291.32883 306.52823 335.31665 377.69412 425.56696 450.58286 450.29272 424.6965 373.7942 299.5731 238.98685 205.96 200.49253 222.5844 272.23566 336.4922 396.70273 452.7187 504.54007 552.1669 592.13117 606.1029 591.406 548.04047 476.00623 376.08148 286.21655 227.41223 199.66852 202.98545 237.363 289.76025 332.39627 364.3552 385.6371 396.24188 398.77243 415.2151 450.55063 504.77914 577.90046 669.8353 743.95826 769.93024 747.75135 677.4215 558.94086 410.99487 292.03406 206.2831 153.74207 134.41095 146.35953 160.36096 166.56259 164.9644 155.5664 138.36856 128.11244 143.64789 185.04407 252.30101 345.4187 456.6184 549.5507 619.60364 666.777 691.0709 692.5278 672.62665 632.0993 570.9457 489.166 386.76004 286.01727 229.41493 217.98221 251.71913 330.62573 448.5064 560.05274 656.17286 736.8666 802.1339 851.8976 872.6907 854.62317 797.6954 701.9071 567.2583 412.5973 290.64722 204.54158 154.28047 139.86389 158.51598 175.33992 179.82283 171.96465 151.76543 119.22515 97.20324 111.556336 162.3086 249.46004 373.01065 520.0052 636.718 717.27436 761.6742 769.9175 742.8822 703.65027 662.4423 619.2584 574.09864 526.9629 480.12314 437.44806 399.00223 364.78564 334.79828 310.4946 301.15356 308.41748 332.28632 372.76013 429.545 475.41425 492.58002 481.0425 440.8017 371.85745 291.126 240.95598 223.37186 238.37364 285.96143 363.2416 439.54337 506.624 564.4835 613.12195 652.5392 681.4846 698.7129 704.2241 698.01825 680.09546 650.75837 611.1252 561.30036 501.2836 431.07526 352.03528 292.13312 262.45966 263.01483 293.79865 354.8111 429.51526 492.79828 544.3989 584.31714 612.55304 628.89765 632.1816 622.22315 599.0223 562.5791 513.12977 464.43298 424.5067 393.35083 370.96545 357.35053 351.60947 351.73267 357.64508 369.3467 386.83752 408.812 423.45548 427.9418 422.27103 406.44318 380.47528 360.35593 360.10016 379.70792 419.17926 478.5141 552.08545 621.35865 684.8774 742.64155 794.6511 840.6994 877.3568 903.40656 918.8484 923.68244 917.9089 907.9665 902.5527 901.71467 905.4525 913.76636 925.75946 937.0005 946.8896 955.4269 962.6122 968.30817 966.97455 955.7265 934.56415 903.4872 862.49585 819.3339 789.5328 773.52857 771.3215 782.9114 805.8723 821.27277 825.0949 817.3385 798.0037 767.10126 727.3583 680.8901 627.69684 567.77826 501.13455 430.91742 366.40488 308.20154 256.30737 210.72241 171.88832 145.83856 134.48712 137.83402 155.87923 188.62279 231.55707 279.28592 331.79865 389.09528 451.17584 516.0102 574.71027 626.23456 670.583 707.7556 737.4741 751.4622 745.8642 720.6798 675.90925 611.55256 538.39264 475.766 424.05908 383.2719 353.4045 333.8828 320.81165 313.46033 311.8289 315.91733 325.76126 345.64975 378.53796 424.42587 483.31348 555.2008 633.8222 702.67554 760.8865 808.45484 845.381 872.02265 892.4773 907.90546 918.307 923.6819 924.03046 911.12586 876.2793 819.4893 740.75586 640.07886 526.92005 438.1063 377.33722 344.61285 339.9332 362.12573 384.30023 395.24298 394.95404 383.4333 360.6808 334.00873 315.12158 304.1729 301.16272 306.09106 319.6581 346.0238 385.8745 439.21027 506.03098 585.9458 651.2085 684.7866 686.6802 656.88904 595.4133 515.30036 447.3113 392.73795 351.58026 323.83826 310.27548 318.30945 349.8122 404.78375 483.22415 585.1226 679.0809 735.9466 755.71985 738.4007 683.989 602.55426 529.03034 466.3915 414.6378 373.7691 343.59808 320.7019 303.80292 292.90112 287.99652 289.0891 299.57956 324.31583 363.33438 416.6353 484.2186 559.80066 610.5204 631.6355 623.14594 585.0517 517.8594 445.51483 381.1434 324.74512 276.32 235.86804 201.78588 170.68985 142.47112 117.12962 94.665406 76.96757 79.794014 106.67859 157.62128 232.62207 331.6047 422.9133 480.59598 504.65274 495.08365 451.8886 388.90555 349.01025 335.25308 347.63397 386.1529 449.01587 509.50092 558.68494 596.5679 623.1497 638.43055 639.7224 623.62354 590.1224 539.21894 470.91324 393.87036 348.16876 338.83167 365.8591 429.25104 527.8184 621.1597 689.47236 732.7563 751.0113 744.2376 720.6992 695.9963 670.4959 644.1983 617.1034 588.74115 555.7148 517.35 473.6466 424.60465 370.36328 333.64413 330.9669 362.33157 427.7381 527.1865 639.8041 707.7527 727.6544 699.50916 623.317 503.12112 388.99274 295.87183 223.7584 172.65253 142.55419 130.24211 132.1112 148.15866 178.38443 222.78856 279.75925 342.67874 410.83276 484.22137 562.8445 645.5599 702.9936 722.26026 703.35975 646.2921 551.0573 448.85187 392.286 382.20703 418.61502 501.50995 619.3827 699.6319 729.5461 709.1256 638.3701 517.90784 403.3886 330.81506 300.18723 311.50507 364.76865 439.19562 483.2446 494.49963 472.9608 418.628 334.78857 255.8084 190.83322 139.86307 102.8979 79.93769 65.27057 53.27272 43.944146 37.284848 33.294815 31.883782 32.721718 35.77827 41.053437 48.547223 59.109448 89.90223 147.66507 232.39795 344.10086 482.7739 626.4493 742.09607 829.3861 888.3195 918.8961 921.5574 898.74616 850.83674 777.8292 679.7237 557.2566 451.8971 387.58197 364.31122 382.08487 440.90286 525.33057 601.096 666.94696 722.8835 768.9055 803.43097 812.32355 792.23554 743.1669 665.1175 558.1182 446.8975 352.9058 276.14304 216.60916 174.30428 151.70052 156.8638 190.41843 252.36443 342.70178 459.29547 567.3273 654.5596 720.9924 766.62555 791.4592 804.1302 816.18744 827.69007 838.63807 849.0314 857.7578 859.37775 853.1633 839.11426 817.2308 787.6716 756.66657 727.4296 699.9605 674.2594 650.32624 630.7485 620.6672 620.223 629.41596 648.246 673.1459 676.61097 652.86335 601.903 523.7299 418.5058 324.4556 270.92987 257.9285 285.45154 353.499 443.3233 500.2525 520.78254 504.91342 452.64508 366.95297 287.85565 227.92855 187.17165 165.58499 163.16858 174.35842 192.56235 217.76883 249.97782 289.18927 332.61157 368.14374 394.38544 411.33673 418.9975 417.87973 422.8606 440.80646 471.71744 515.5934 572.4344 633.0888 681.30097 716.75617 739.45417 749.39527 745.9327 724.7289 684.9789 626.68256 549.8401 454.75378 376.0073 337.1959 338.31952 379.3783 460.37216 562.8899 638.891 685.8767 703.8471 692.80225 654.3042 605.9748 552.75757 494.65234 431.65933 363.77835 296.9256 237.28263 184.85013 139.62815 101.61666 76.98566 89.51663 141.5667 233.13585 364.22412 531.7657 666.86414 741.0545 754.33704 706.71155 598.1781 473.11218 401.86258 385.31574 423.47168 516.3304 652.48505 764.9119 842.67286 885.7679 894.1971 868.3773 836.7865 816.7393 808.2361 811.2765 825.86066 847.01874 863.1423 873.7541 878.8539 878.4419 873.0358 867.6021 863.3817 860.37464 858.5808 857.99555 847.99726 818.82874 770.4899 702.9809 616.3017 520.4164 449.56418 406.61792 391.5777 404.44348 443.57318 479.5186 501.38968 509.1864 502.90878 482.55682 460.098 452.42484 459.65814 481.79767 518.84357 566.13245 599.53107 615.5967 614.32947 595.7292 560.32166 532.21015 524.48224 537.1378 570.177 623.5997 685.775 732.3864 762.6702 776.6265 774.25507 755.16755 716.1643 656.53486 576.27924 475.39737 353.97043 242.45824 165.57727 123.32753 115.709 142.72165 199.08988 268.621 350.18118 443.77048 549.3888 665.15937 763.5781 835.54694 881.0657 900.1342 892.75287 874.20575 863.64185 861.1205 866.64155 880.2051 894.53986 876.3548 821.52784 730.05896 601.9484 439.1045 304.76358 229.63199 213.70969 256.99673 359.4931 483.6736 559.36676 584.9678 560.4767 485.89334 369.21744 267.5891 192.23757 143.1627 120.36459 123.83642 152.53403 205.70572 283.35156 385.4715 512.0655 647.45606 748.60517 813.04316 840.76996 831.78565 788.2329 736.2592 683.5923 630.23206 576.17847 521.4315 467.6028 416.47693 368.05493 322.3369 279.3228 241.02378 215.61606 203.97074 206.0877 221.96707 250.88094 274.5128 284.9023 282.04947 265.95422 236.61669 210.01773 212.85135 245.53227 308.06052 400.4361 515.2413 606.20307 665.30677 692.55256 687.9404 651.6942 602.82007 553.49524 503.71982 453.4937 402.817 358.2926 336.14478 337.11908 361.21555 408.43414 477.4999 555.2653 638.26526 726.4998 819.9689 918.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8744202 3.5103588 4.907817 6.0667944 7.0674834 8.064314 9.061144 10.057974 11.054805 12.051636 13.048466 14.045296 15.042124 16.038954 17.035786 18.032616 19.029446 20.026276 21.023106 22.019936 23.016768 24.013596 25.010428 26.007258 27.004086 28.000916 28.997748 29.994576 30.991408 31.988236 32.98507 33.9819 34.978726 35.975556 36.97239 37.969223 38.966057 39.96289 40.95972 41.956555 42.953385 43.95022 44.94705 45.94388 46.940712 47.937542 48.934372 49.931206 50.92804 51.924874 52.921708 53.918538 54.915368 55.9122 56.90903 57.905865 58.902695 59.899533 60.89635 61.893197 62.890023 63.88686 64.88369 65.88052 66.87735 67.87418 68.87102 69.86784 70.86467 71.861496 72.85833 73.85515 74.851975 75.84881 76.845635 77.84247 78.839295 79.83612 80.83295 81.82977 82.82661 83.82344 84.82026 85.81709 86.81392 87.81075 88.80758 89.804406 90.80123 91.79806 92.79488 93.79171 94.78854 95.78538 96.7822 97.77903 98.77585 99.77268 100.76951 101.76634 102.76317 103.759995 104.75682 105.753655 106.75047 107.74731 108.74414 109.74097 110.73779 111.734635 112.731446 113.72828 114.725106 115.72193 116.718766 117.71559 118.712426 119.709236 120.70608 121.702896 122.69974 123.69656 124.6934 125.69021 126.68704 127.68387 128.6807 129.67754 130.67436 131.67119 132.66802 133.66483 134.66167 135.65851 136.65534 137.65215 138.64899 139.64583 140.64264 141.63947 142.6363 143.63312 144.62995 145.62677 146.6236 147.62044 148.61727 149.61409 150.61093 151.60774 152.60457 153.60141 154.59824 155.59506 156.59188 157.58872 158.58554 159.58237 160.57921 161.57604 162.57286 163.5697 164.56653 165.56336 166.56018 167.55699 168.55384 169.55063 170.54747 171.5443 172.54114 173.53797 174.5348 175.53162 176.52846 177.52529 178.52211 179.51892 180.51578 181.51259 182.50943 183.50624 184.50308 185.49991 186.49672 187.49356 188.49039 189.48722 190.48406 191.48087 192.4777 193.47454 194.47136 195.46819 196.46501 197.46184 198.45865 199.45549 200.45233 201.44916 202.44599 203.44283 204.43964 205.43647 206.43329 207.43012 208.42694 209.42378 210.4206 211.41744 212.41428 213.4111 214.40793 215.40477 216.40158 217.3984 218.39524 219.39206 220.38889 221.38573 222.38256 223.37938 224.3762 225.37303 226.36985 227.3667 228.3635 229.36032 230.35718 231.354 232.35082 233.34764 234.3445 235.3413 236.33812 237.33496 238.3318 239.32865 240.32547 241.32227 242.31909 243.31595 244.31276 245.30959 246.30641 247.30324 248.30007 249.2969 250.29373 251.29056 252.28739 253.28421 254.28104 255.27788 256.2747 257.27155 258.26837 259.2652 260.26202 261.25885 262.25568 263.2525 264.24933 265.24612 266.24298 267.2398 268.23663 269.23346 270.23032 271.22717 272.22403 273.22086 274.21768 275.21457 276.2114 277.20822 278.20505 279.2019 280.19876 281.19562 282.19244 283.1893 284.18616 285.18298 286.17984 287.17664 288.1735 289.17035 290.16718 291.164 292.1609 293.1577 294.1546 295.15143 296.1483 297.1451 298.14194 299.1388 300.13565 301.13248 302.12933 303.1262 304.12302 305.11984 306.1167 307.11353 308.11038 309.10724 310.10407 311.10092 312.09778 313.0946 314.09146 315.08832 316.08514 317.082 318.07883 319.07568 320.0725 321.06937 322.06622 323.06308 324.0599 325.05673 326.0536 327.05045 328.04724 329.04413 330.04095 331.0378 332.03464 333.03146 334.02835 335.0252 336.02203 337.01886 338.01572 339.01254 340.0094 341.00623 342.00308 342.9999 343.99673 344.99362 345.99048 346.9873 347.98416 348.981 349.97784 350.9747 351.97153 352.96838 353.96524 354.96207 355.95892 356.95578 357.9526 358.94946 359.9463 360.9431 361.93994 362.9368 363.93366 364.93048 365.92734 366.9242 367.92102 368.9179 369.91473 370.91156 371.90845 372.90527 373.90213 374.89896 375.8958 376.89264 377.88947 378.88632 379.88318 380.88 381.87686 382.8737 383.87054 384.86737 385.86423 386.86108 387.8579 388.85477 389.8516 390.84842 391.84528 392.84213 393.839 394.83585 395.83267 396.8295 397.82636 398.82318 399.82007 400.8169 401.81372 402.81058 403.8074 404.80426 405.8011 406.79794 407.7948 408.79166 409.7885 410.78534 411.78217 412.77902 413.77585 414.7727 415.76956 416.7664 417.7632 418.7601 419.75693 420.75378 421.7506 422.74747 423.7443 424.74115 425.73798 426.73483 427.73166 428.72845 429.72534 430.72217 431.71906 432.7159 433.7127 434.7096 435.70642 436.70325 437.7001 438.69696 439.6938 440.69064 441.68747 442.6843 443.68118 444.67807 445.67484 446.67166 447.6686 448.66538 449.6622 450.65903 451.6559 452.65274 453.64957 454.6464 455.64328 456.6401 457.637 458.63382 459.63065 460.62753 461.62436 462.6212 463.618 464.6149 465.6117 466.60855 467.60538 468.60226 469.5991 470.59592 471.59274 472.58963 473.58646 474.58334 475.58017 476.577 477.57388 478.5707 479.56754 480.56442 481.56125 482.55808 483.5549 484.55173 485.5486 486.54544 487.54227 488.53915 489.53598 490.53287 491.5297 492.52652 493.52335 494.52017 495.51703 496.5139 497.5107 498.5076 499.50443 500.50125 501.49808 502.49496 503.4918 504.48862 505.4855 506.48233 507.47916 508.47604 509.47287 510.46976 511.46652 512.46344 513.46027 514.4571 515.4539 516.4508 517.44764 518.44446 519.4413 520.4382 521.435 522.4318 523.42865 524.42554 525.42237 526.4192 527.4161 528.4129 529.4098 530.4066 531.40345 532.40027 533.3971 534.3939 535.39087 536.38764 537.3845 538.3813 539.3782 540.375 541.3719 542.3687 543.36554 544.36237 545.35926 546.3561 547.3529 548.34974 549.3466 550.34345 551.3403 552.33716 553.334 554.3308 555.3277 556.3245 557.32135 558.3182 559.31507 560.3119 561.3087 562.30555 563.3024 564.2993 565.29615 566.29297 567.2898 568.2866 569.28345 570.28034 571.2771 572.27405 573.2708 574.26764 575.26447 576.26136 577.2582 578.2551 579.25196 580.2488 581.2456 582.2425 583.23926 584.2361 585.23304 586.2298 587.2267 588.2235 589.2204 590.2172 591.2141 592.2109 593.20777 594.2046 595.2014 596.19825 597.19507 598.19196 599.1888 600.18567 601.1825 602.1793 603.1762 604.173 605.16987 606.1667 607.1636 608.1604 609.1572 610.15406 611.15094 612.14777 613.1446 614.1414 615.13825 616.1351 617.13196 618.1288 619.1256 620.1225 621.1194 622.1162 623.1131 624.1099 625.10675 626.10364 627.1004 628.0973 629.0942 630.09095 631.08777 632.0847 633.0815 634.07837 635.0752 636.07196 637.06885 638.06574 639.06257 640.05945 641.0563 642.05317 643.0499 644.0468 645.04364 646.04047 647.03736 648.0341 649.03095 650.02784 651.0247 652.02155 653.0184 654.01526 655.0121 656.0089 657.00574 658.0026 658.99946 659.9962 660.99317 661.99 662.9868 663.9837 664.9805 665.97736 666.97425 667.97107 668.9679 669.9647 670.96155 671.95844 672.95527 673.9521 674.9489 675.9458 676.9426 677.93946 678.93634 679.9332 680.93 681.9268 682.9237 683.92054 684.91736 685.9142 686.9111 687.9079 688.9048 689.9016 690.8985 691.89527 692.8921 693.889 694.8858 695.8827 696.8795 697.87635 698.87317 699.87006 700.8669 701.8637 702.8606 703.8574 704.85425 705.8511 706.8479 707.84485 708.8416 709.8385 710.83527 711.83216 712.829 713.82587 714.8227 715.8196 716.8164 717.81324 718.8101 719.80695 720.8037 721.8006 722.7974 723.79425 724.79114 725.78797 726.7848 727.7816 728.77857 729.7753 730.7722 731.76905 732.76587 733.76276 734.75965 735.7564 736.75324 737.75007 738.74695 739.74384 740.7407 741.7375 742.7344 743.7312 744.728 745.72486 746.7217 747.7185 748.7154 749.7123 750.7091 751.70594 752.7028 753.6996 754.6964 755.69336 756.6901 757.687 758.68384 759.68067 760.6775 761.6743 762.67115 763.668 764.6649 765.66175 766.65857 767.6554 768.6522 769.64905 770.6459 771.6427 772.63965 773.6365 774.63337 775.63025 776.6271 777.6239 778.6208 779.6175 780.6144 781.6112 782.6081 783.6049 784.6018 785.59864 786.59546 787.5923 788.58924 789.586 790.5829 791.5797 792.57654 793.57337 794.5702 795.5671 796.5639 797.5607 798.55756 799.55445 800.5513 801.54816 802.54505 803.5418 804.5387 805.5355 806.53235 807.5292 808.526 809.5229 810.5197 811.5165 812.5133 813.5102 814.5071 815.5039 816.5008 817.4976 818.4945 819.49134 820.48816 821.48505 822.4818 823.47864 824.47547 825.47236 826.46924 827.4661 828.4629 829.4597 830.4566 831.4534 832.4503 833.44715 834.444 835.4408 836.4377 837.4346 838.43134 839.4282 840.4251 841.4219 842.41877 843.4156 844.4124 845.4093 846.4061 847.40296 848.3997 849.3966 850.39344 851.39026 852.38715 853.384 854.3808 855.3777 856.37446 857.3713 858.36817 859.36506 860.36194 861.35877 862.3556 863.3524 864.34937 865.3461 866.343 867.33985 868.3367 869.33344 870.33045 871.3272 872.324 873.32087 874.31775 875.3146 876.31147 877.3083 878.3052 879.30195 880.2988 881.2956 882.2924 883.2893 884.28614 885.28296 886.2799 887.2767 888.2735 889.2704 890.2672 891.26404 892.261 893.25776 894.25464 895.25147 896.2482 897.2451 898.24195 899.23884 900.23566 901.2325 902.2293 903.22626 904.223 905.21985 906.21674 907.2135 908.2104 909.2073 910.2041 911.201 912.1978 913.19465 914.1915 915.18836 916.1852 917.18207 918.17896 919.1757 920.1726 921.1693 922.1662 923.1631 924.1599 925.15674 926.1536 927.15046 928.1473 929.14417 930.141 931.1378 932.1347 933.1315 934.1284 935.12525 936.1221 937.1189 938.1158 939.11255 940.10944 941.10627 942.1031 943.1 944.09675 945.0936 946.0905 947.0873 948.08417 949.08106 950.0779 951.0747 952.0716 953.0684 954.0653 955.06214 956.05896 957.05585 958.0527 959.0495 960.0463 961.0432 962.04 963.03687 964.0337 965.0305 966.0274 967.02424 968.02106 969.01795 970.0147 971.0116 972.0085 973.00525 974.00214 974.9989 975.9958 976.9927 977.98957 978.9863 979.9832 980.9801 981.9769 982.97376 983.9705 984.9674 985.9643 986.96106 987.95795 988.9547 989.95166 990.9485 991.9454 992.94214 993.9433 995.1046 996.50434 998.14277 1000.0)) (quote (901.99994 914.39234 920.94666 921.66285 916.5411 908.16034 901.4871 896.6453 893.63514 886.0646 851.15186 786.8773 693.241 577.4933 490.866 443.3306 434.88693 464.51852 514.07087 576.8446 652.8397 741.6233 792.51337 770.7717 676.3983 509.39325 336.19708 246.69872 241.3936 320.28177 444.79855 517.61304 533.99347 493.93976 413.08676 365.675 361.30438 399.975 478.3967 563.1738 645.6043 725.6882 802.4094 842.4999 829.8763 764.5387 646.5071 523.2989 438.66748 392.6129 385.1351 394.73654 382.89862 348.8532 292.60037 225.7981 187.06916 179.47638 203.01978 253.46465 303.39377 347.8855 386.93982 420.9777 456.58716 496.0314 539.3104 586.15705 614.5923 610.6323 574.27735 505.52725 442.40533 432.53693 476.06897 573.00147 693.3271 766.51386 789.6198 762.645 693.1986 614.7211 531.1496 442.48422 351.2416 280.51517 235.888 217.36005 223.88558 226.86217 213.41228 183.53588 137.29869 115.22704 151.76422 246.9102 400.66504 572.7191 695.8985 769.16895 792.53016 769.92237 713.4905 624.09107 501.72433 359.35327 274.11633 258.76355 313.29492 431.7112 530.95826 584.47425 592.2595 555.0472 517.9426 507.62402 524.0916 567.3452 602.74897 590.1855 529.6017 420.99762 296.07907 224.28263 208.06153 247.41579 324.40778 365.94116 364.20477 319.19858 238.04953 180.1608 158.84529 174.10309 225.47318 302.23196 399.8816 518.422 657.6362 755.77027 764.274 683.1475 512.39075 316.05057 193.3297 145.35799 172.13542 249.05077 305.46875 336.98944 343.61276 329.21216 315.02127 304.26447 296.9418 293.5481 300.18613 318.6718 349.0052 391.1284 442.27295 500.91528 567.0554 640.69336 708.0544 754.4142 779.7687 784.11774 761.886 701.6985 603.22077 466.4527 312.06134 218.22978 192.5081 234.89629 337.8734 444.29254 542.2981 631.89014 712.2384 766.73884 788.9012 778.7258 736.28357 673.3217 598.3977 511.51157 412.66327 324.9141 281.4313 282.47745 328.05258 397.3406 434.69357 437.07578 404.48734 344.50885 295.5043 262.81177 246.43128 246.42719 263.51123 297.88028 349.53436 418.0177 485.806 543.92145 592.36426 631.13404 650.42444 640.58216 601.60706 533.49927 453.90314 396.33914 361.61197 349.72168 355.5392 361.03394 364.6399 366.35706 364.23087 344.67685 305.09058 245.47199 167.94609 109.51395 83.64863 90.35012 129.36457 173.00975 202.57508 218.06055 219.46617 217.89421 228.15297 250.31659 284.38513 322.33282 344.1699 348.9508 336.67566 310.80136 287.5065 268.84772 254.82494 247.24605 264.11517 310.0598 385.07996 487.31915 558.0534 569.2631 520.9481 413.13583 292.147 200.00473 136.709 102.25977 94.226326 108.310395 144.43 202.58515 273.4508 326.53763 359.47766 372.27094 366.6877 354.0142 336.24658 313.38495 286.11667 264.95663 253.46964 251.65567 259.33237 262.33377 251.77002 227.6411 189.947 169.76822 205.46372 297.13696 444.78806 620.6734 760.4677 861.5699 923.9797 952.5084 967.984 972.8138 966.99744 950.08704 918.0528 869.93506 805.73365 726.2014 651.2333 589.65857 541.4773 506.69443 487.8321 486.99942 504.1965 539.4231 579.192 601.36707 605.6269 591.97156 567.48047 553.64624 551.9463 562.38056 583.6712 608.3493 635.2024 664.2305 693.2251 692.39185 652.35144 573.10364 455.50204 349.04358 282.53656 255.98097 269.37677 299.25507 318.91522 328.33002 327.4994 315.78497 291.81128 255.53165 206.94606 157.87509 155.6601 205.24457 306.62854 449.35556 548.1731 584.3162 557.7847 472.17435 408.00952 398.506 443.66388 543.26435 643.5781 703.13916 721.9474 700.0029 655.7589 617.28766 584.8834 558.5463 531.9503 487.25613 423.38748 340.34442 246.03743 182.96289 157.43584 169.45626 215.7196 256.61316 280.5645 287.57376 278.2658 280.84924 310.563 367.4071 451.3815 540.44837 611.5457 664.6706 699.8231 716.8722 715.55555 695.8658 657.8029 606.96875 564.1423 531.275 508.36707 496.16248 500.17978 521.5399 560.2428 615.05945 662.34296 693.0277 707.1138 704.7146 702.3994 711.9896 733.48505 766.88575 787.03296 758.4921 681.0138 554.5977 405.96045 305.1075 255.71059 257.76975 303.55438 354.81348 406.35873 458.1902 510.73444 568.56495 632.92054 703.801 780.5209 838.2289 864.4567 859.20417 822.47406 783.3119 769.6202 781.3989 818.6482 867.618 902.739 923.4361 929.70954 925.6632 925.4106 930.13764 939.84436 952.30024 952.41254 937.3569 907.1335 862.47974 815.7237 771.2572 729.0802 689.20246 652.58326 619.8562 591.0213 566.0784 540.8112 509.729 472.8086 430.05 389.54196 370.98328 375.26212 402.37854 448.1301 493.33005 535.61097 574.97266 611.86695 650.64557 692.4006 737.1319 784.2019 814.6046 819.47944 798.8267 752.6559 691.203 623.5113 549.5806 469.41126 393.77997 341.28973 312.2666 306.7107 317.1144 319.52 312.13803 294.96857 275.09412 296.38315 366.3809 485.0873 645.7952 750.15766 765.6309 692.2152 531.23884 375.92615 283.34518 253.49597 286.3785 340.50043 365.9925 362.7516 330.77765 285.73795 263.09525 264.20587 289.0699 327.72086 338.10596 315.52258 259.97058 176.26676 106.3525 59.962643 37.097187 37.25862 48.01496 63.979874 85.15335 111.50978 133.09429 141.80045 137.62831 120.577866 115.25064 161.03398 258.4451 407.484 584.4763 719.27277 807.2494 848.4061 845.9369 817.99567 767.4457 694.28724 602.222 539.2534 520.1284 544.84687 612.2188 658.9363 649.04645 582.54914 459.44452 333.6358 264.79208 252.95635 298.12872 368.2515 395.88248 378.86856 317.2098 223.97476 150.20084 101.0388 76.48869 75.788796 92.92097 126.59462 176.80979 242.79468 308.12512 366.18652 416.9788 460.41657 479.1037 459.95712 402.97693 308.16306 208.90792 154.75273 146.1582 183.12433 253.38962 323.1985 390.60336 455.60434 514.43085 547.3687 551.5736 527.04566 478.4238 459.28897 484.91345 555.2973 669.0431 767.629 820.19635 826.7452 787.2754 738.09705 716.16285 721.47345 754.0288 800.87934 836.7141 860.8727 873.35486 866.315 811.3646 705.9312 550.0148 354.21487 194.78858 86.81835 30.304203 24.899073 64.233406 145.92311 269.96823 435.94052 589.6434 693.37824 747.14527 750.94446 724.5333 695.0388 662.6253 627.29267 598.55927 600.7758 635.1596 701.7106 788.1434 835.2581 835.2668 788.16944 699.46174 626.00855 582.83387 569.9375 586.94965 621.325 666.9188 723.7311 791.757 854.1043 894.98774 914.4072 912.36286 889.1957 845.52485 781.36316 696.7106 600.13935 520.41517 459.86548 418.49014 393.31928 364.8337 329.47974 287.25732 239.42469 206.1124 194.32123 204.05115 235.14438 273.8767 311.4071 347.73553 382.86194 402.8618 390.0684 344.421 265.91953 178.62975 139.77466 151.80326 214.71555 313.13162 378.63043 403.033 386.33945 333.09283 285.63043 254.30886 239.12815 240.14296 258.88904 296.06546 351.67218 425.67804 495.72876 542.5986 566.28736 566.79517 554.0859 544.9424 539.6337 538.16 542.3551 557.93116 585.29804 624.4557 671.60395 703.8622 717.40406 712.2293 688.67646 651.50837 602.26325 540.9411 467.9414 408.7431 378.56393 377.4039 405.26306 438.21478 448.25696 435.3471 399.4852 361.5667 367.76978 419.76245 517.54474 642.67395 719.2885 739.18116 702.352 618.42756 568.57227 571.14606 626.1489 731.05274 826.014 885.7173 910.1625 899.4105 872.0676 842.8932 811.8872 779.04957 752.5215 745.0177 756.68824 787.53315 824.5606 830.1919 802.05335 740.14496 655.12787 605.95105 601.6481 642.219 721.52967 763.0538 743.8493 663.91657 524.77857 401.09674 334.25128 324.24213 371.06934 432.1159 461.46896 459.1127 425.04718 383.19495 382.6843 424.98688 510.1027 618.0188 672.5207 666.1796 598.9957 482.54077 405.44144 386.20874 424.84262 518.5014 609.65326 675.6781 716.5758 732.4115 734.34467 730.5541 721.0398 705.80176 687.7504 671.09565 655.87177 642.07886 625.06086 592.3053 543.12275 477.5132 403.96732 365.6961 368.75003 413.1291 494.82285 569.184 623.7984 658.666 673.4474 654.9138 596.2571 497.47726 358.57465 221.2964 126.945984 75.5233 67.02836 83.30616 89.72246 85.435425 70.445076 57.209336 89.69931 171.75653 303.38098 470.4376 574.2434 595.7995 535.106 398.65842 300.29163 281.59872 342.57974 482.55804 626.49305 723.4939 773.56025 776.69227 755.0289 738.19324 726.3372 719.4608 719.8748 733.3506 760.1625 800.31067 847.19037 869.80524 864.20234 830.3815 771.24976 715.8531 671.67487 638.71515 616.2681 581.8876 524.8411 445.1289 342.77753 265.53262 256.8004 316.5809 444.87405 589.1594 656.41346 644.85206 554.47535 414.2991 319.32834 276.95844 287.1893 342.828 397.95633 444.44183 482.28458 512.6251 552.944 609.1747 681.31727 768.7315 821.4396 808.0389 728.5295 582.9113 425.0174 321.374 272.16303 277.38443 313.5097 325.92126 312.40448 272.95932 219.2063 201.52053 225.73218 291.84134 391.96545 455.05646 464.17297 419.31512 322.49802 227.13283 156.95192 111.95529 92.144936 98.547776 132.02371 192.57276 280.1949 379.3106 464.3188 534.846 590.8923 632.3228 658.7284 670.08045 666.3793 648.29944 619.79017 581.4933 533.40894 477.6372 442.56638 437.14435 461.37103 514.8147 572.3252 619.24695 655.5798 681.3237 702.20154 724.7323 748.92304 774.77356 797.5185 806.87647 802.4977 784.38184 755.2912 726.3012 698.5705 672.099 644.97626 601.6023 538.53876 455.78568 354.8385 269.27307 212.9557 185.88648 188.08847 225.2957 301.9393 418.01917 573.5353 720.54267 786.0137 769.178 670.0354 522.0624 419.77374 368.88388 369.39288 413.7038 460.94852 505.0451 545.99384 582.11084 593.1767 573.27735 522.4128 441.28546 361.71906 300.92636 258.9074 235.66222 219.20142 196.9614 168.94045 135.13854 104.47553 94.832184 106.70996 140.10884 189.02637 231.16962 264.44116 288.84094 305.72836 325.19867 349.30515 378.04785 411.56323 452.48242 501.81543 559.5623 625.6511 689.5068 743.5748 787.8554 822.3485 845.6114 855.6097 852.3291 835.7695 811.2111 792.50684 780.38477 774.845 771.293 746.9654 698.77 626.7067 534.1433 457.24283 405.8128 379.85327 378.58218 373.56512 350.51846 309.44214 251.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-TIME-SCALER" (quote r-time-scaler) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "scaling-factor-minmax" "SCALING-FACTOR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "scaling-bpf-1000x1000" "SCALING-BPF-1000X1000" nil) (om-load-inputfun (quote input-funbox) "window-resolution" "WINDOW-RESOLUTION" nil))) (om-make-point 724 423) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-BPFS-DYN-MULTISEQ" (quote r-bpfs-dyn-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "1000x1000-bpfs-list" "1000X1000-BPFS-LIST" (list 0)))) (om-make-point 599 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 158 205) (quote "This patch explores the practise of using Codex Faenza for ornamentation of Ars Nova pieces.$$It does however not respect modes of the material, and also allows for microtonal scalings. It is thus just as much a distortion tool.") "" (om-make-point 891 80) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 27 60) (om-make-point 134 156) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (199 (((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 ((1 (1 1)))) (1 (1)) (1 ((1 (1.0 1)))))) ((6 2) ((1 ((1 (1 1)))) (1 (1)) (1 (1)) (1 (1)) (1 (1)) (1 ((1 (1 1)))))) ((6 2) ((1 (1)) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (1.0)) (1 (-1)))) ((6 2) ((1 (1)) (1 ((1 (1.0 1)))) (1 (1)) (1 (1)) (1 (1.0)) (1 (1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 ((1 (1 1)))) (1 (1)) (1 (1.0)) (1 (1)))) ((6 2) ((1 (1)) (1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 ((1 (1.0 1)))))) ((6 2) ((1 (1)) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 ((1 (-1 1)))) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 1.0)))) (1 ((1 (1 1)))))) ((6 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1.0 1 1 1)))))) ((6 2) ((1 ((1 (1 1)))) (1 ((1 (1 1 1.0 1)))) (1 ((1 (1 1 1.0 1)))) (1 (1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1)) (1 ((1 (1.0 1)))) (1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1 1)))))) ((6 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 ((1 (1 1.0)))) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 (1)))) ((6 2) ((1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (-1)) (1 ((1 (1 1)))))) ((6 2) ((1 ((1 (1 1)))) (1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1 (1 (1 1)))))) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 ((1 (1 (1 (1.0 1)))))))) ((6 2) ((1 (1)) (1 (-1)) (1 (1)) (1 (1)) (1 (1)) (1 ((1 (1.0 1)))))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((6 2) ((1 (1)) (1 (-1)) (1 (-1)) (1 (1)) (1 (1)) (1 (1)))) ((6 2) ((1 (1.0)) (1 (1)) (1 (1.0)) (1 (1)) (1 ((1 (1 1)))) (1 (1)))) ((6 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1.0 1)))) (1 (1)))) ((6 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 (1)) (1 ((1 (1 1)))) (1 ((1 (1 (1 (1.0 1)))))) (1 (1)))) ((6 2) ((1 ((1 (-1 1)))) (1 ((1 (1 1)))) (1 (1)) (1 ((1 (1 1)))) (1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1.0 1 1 1)))))) ((6 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 (1)) (1 (-1)) (1 (1)) (1 (1.0)) (1 ((1 (1 1)))))) ((6 2) ((1 (1)) (1 (1)) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 (1)) (1 (1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1)) (1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1.0 1)))))) ((6 2) ((1 (1)) (1 (1)) (1 (1.0)) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 ((1 (1 1)))))) ((6 2) ((1 (1)) (1 (1.0)) (1 ((1 (1 (1 (1.0 1)))))) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 (1)))) ((6 2) ((1 ((1 (-1 1)))) (1 ((1 (1 1)))) (1 ((1 (1 (1 (1.0 1)))))) (1 (1)) (1 (1.0)) (1 (-1)))) ((4 2) ((1 (1)) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 (1 (1.0 1)))))))) ((4 2) ((1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((4 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 ((1 (1 1)))))) ((4 2) ((1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (-1)))) ((4 2) ((1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1 1 1 (1 (1.0 1)))))))) ((4 2) ((1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1.0 1)))))) ((4 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 ((1 (1.0 1 1 1)))))) ((4 2) ((1 (1)) (1 (1.0)) (1 (-1)) (1 (1)))) ((4 2) ((1 ((1 (1.0 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 (1)))) ((4 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 (1 (1.0 1)))))) (1 (1)) (1 ((1 (1 1)))))) ((4 2) ((1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (1.0)))) ((4 2) ((1 ((1 (-1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))))) ((4 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1 (1 (1)))))))) ((4 2) ((1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 (1)))) ((4 2) ((1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1 1)))) (1 ((1 ((1 (1.0 1)) 1)))))) ((4 2) ((1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1.0 1)))))) ((4 2) ((1 (1)) (1 (-1)) (1 ((1 (1 (1 (1.0 1)))))) (1 ((1 ((1 (1 1)) 1)))))) ((4 2) ((1 ((1 ((1 (1 1)) 1)))) (1 ((1 (1.0 1 1 1)))) (1 ((1 (1 1)))) (1 ((1 ((1 (1.0 1)) 1)))))) ((4 2) ((1 ((1 (1.0 1 1 1)))) (1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1.0 1)))))) ((4 2) ((1 ((1 (1.0 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 ((1 (-1 1)))))) ((4 2) ((1 ((1 (1 1)))) (1 ((1 (1 (1 (1.0 1)))))) (1 ((1 (1 1)))) (1 ((1 (1.0 1 1 1)))))) ((4 2) ((1 ((1 (1 1)))) (1 ((1 (-1 1)))) (1 ((1 (1 1)))) (1 ((1 (1.0 1 1 1)))))) ((4 2) ((1 (1)) (1 ((1 (1 (1 (1.0 1)))))) (1 ((1 (1 1)))) (1 (1)))) ((4 2) ((1 (1)) (1 (1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1)) (1 (-1)) (1 (1)))) ((4 2) ((1 (1)) (1 (1)) (1 ((1 (1.0 1)))) (1 (1)))) ((4 2) ((1 (1)) (1 ((1 (-1 1)))) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))))) ((4 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (-1)))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1.0 1)))) (1 ((1 (1.0 1)))))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 ((1 (1.0 1)) 1)))))) ((2 2) ((1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 ((1 (1.0 1)) 1)))) (1 ((1 (1.0 1)))))) ((2 2) ((1 (1)) (1 (-1)))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 (1 (1.0 1)))))))) ((2 2) ((1 (1)) (1 ((1 (-1 1)))))) ((2 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 ((1 (-1 1)))))) ((2 2) ((1 ((1 (1.0 1)))) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 ((1 (1 -1)))))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 1 (1 (1.0 1)))))) (1 (1)))) ((2 2) ((1 ((1 (-1 1 1.0)))) (1 ((1 (1 1 (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 (1 (1.0 1)) 1)))) (1 ((1 (1 1 (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 (1)))) ((2 2) ((1 (-1)) (1 ((1 (1 (1 (1 1)) (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 1 (1 (1 1)))))) (1 ((1 (1 1 (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 1 (1 (1 1)))))) (1 (1)))) ((2 2) ((1 ((1 (-1 1 (1 (1 1)))))) (1 ((1 (1 1 1)))))) ((2 2) ((1 ((1 (1.0 1 (1 (1.0 1)))))) (1 (1)))) ((2 2) ((1 ((1 (-1 -1 1)))) (1 ((1 (1 1 (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 (1 (1 1)) 1)))) (1 ((1 (-1 1 1)))))) ((2 2) ((1 ((1 (1 1 (1 (1.0 1)))))) (1 ((1 (1 1 1.0)))))) ((2 2) ((1 ((1 (-1 1 (1 (1.0 1)))))) (1 ((1 (1 1.0 1.0 1 1 1)))))) ((2 2) ((1 ((1 (1 1.0 1 1 1.0 1)))) (1 ((1 (1 1 1.0 1 1 1)))))) ((2 2) ((1 ((1 (1 1.0 -1)))) (1 ((1 (1 1.0 1)))))) ((2 2) ((1 ((1 (1 1 (1 (1.0 1)))))) (1 ((1 (1 (1 (1 1)) 1)))))) ((2 2) ((1 ((1 ((1 (1.0 1)) 1 (1 (1.0 1)))))) (1 ((1 (1 -1 1)))))) ((2 2) ((1 ((1 (1.0 1 1 1 1 1)))) (1 ((1 (1 1 1.0 1 1 1)))))) ((2 2) ((1 ((1 (1 1 (1 (1.0 1)))))) (1 ((1 (1 (1 (-1 1)) (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 1 -1)))) (1 ((1 (1 1.0 1)))))) ((2 2) ((1 ((1 (1 1 (1 (1.0 1)))))) (1 ((1 (1 1 1.0)))))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1.0 1.0 1 1 1)))))) ((2 2) ((1 (1)) (1 ((1 (-1 -1 1)))))) ((2 2) ((1 ((1 (1 1 1.0)))) (1 ((1 (1 (1 (1.0 1)) 1)))))) ((2 2) ((1 ((1 (1 -1 (1 (1 1)))))) (1 ((1 (1 1.0 1.0 1 1 1)))))) ((2 2) ((1 ((1 (1.0 1 1 1 1 (1 (1.0 1)))))) (1 ((1 (1 1.0 -1)))))) ((3 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 (1 (1.0 1)))))) (1 ((1 (1 1 1.0)))))) ((3 2) (3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (75)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6200)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 6200)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 6200)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (50)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1800)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 200) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (199 (((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((6 2) ((1 (1)) (1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (1)) (1 (1)) (1 (1)) (1 (1)) (1 (1.0)))) ((6 2) ((1 (1)) (1 ((1 (1 1)))) (1 (1)) (1 (1)) (1 (-1)) (1 (1)))) ((6 2) ((1 (1.0)) (1 (1)) (1 (1)) (1 ((1 (1.0 1)))) (1 (1)) (1 (1)))) ((6 2) ((1 (1)) (1 (1)) (1 (1)) (1 (1)) (1 (1.0)) (1 (-1)))) ((6 2) ((1 (1)) (1 ((1 (1 1)))) (1 (1)) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))))) ((6 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (1)) (1 (1)) (1 (1)))) ((6 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (1)) (1 (1.0)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1)) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 (1)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1)) (1 (1.0)) (1 (1)) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))))) ((6 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 ((1 (1 1.0)))) (1 ((1 (1.0 1.0)))))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 (1)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 (1.0)) (1 (1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 (1)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 (1.0)) (1 (-1)))) ((6 2) ((1 (1)) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))) (1 (1)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1)) (1 ((1 (1 1)))) (1 (1)) (1 (1)) (1 (1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 ((1 (1 1)))) (1 (1)) (1 (1.0)) (1 (1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1)) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 (1)) (1 ((1 (1 1)))))) ((6 2) ((1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 (1)) (1 (-1)) (1 (1)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1)) (1 (1.0)) (1 (-1)) (1 (1)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 ((1 (1 1)))))) ((4 2) ((1 (1)) (1 ((1 (1 1)))) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((4 2) ((1 ((1 (1 1)))) (1 (1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (1)) (1 (1)) (1 (1)))) ((4 2) ((1 (1)) (1 (1)) (1 ((1 (1.0 1)))) (1 ((1 (1 1)))))) ((4 2) ((1 (1)) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 (1)))) ((4 2) ((1 (1)) (1 (-1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)))) ((4 2) ((1 ((1 (1 1)))) (1 (1)) (1 (1)) (1 (-1)))) ((4 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 ((1 (1 1)))) (1 ((1 (1 1)))) (1 ((1 ((1 (1.0 1)) 1)))))) ((4 2) ((1 (1)) (1 ((1 (1 (1 (1.0 1)))))) (1 (1)) (1 ((1 (1 1)))))) ((4 2) ((1 ((1 (1 1)))) (1 (1)) (1 (1)) (1 (1)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (1)) (1 (1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1)))) ((4 2) ((1 (1.0)) (1 (1)) (1 (1)) (1 (1)))) ((4 2) ((1 (1)) (1 ((1 (1 1)))) (1 ((1 (1 (1 (1.0 1)))))) (1 (1)))) ((4 2) ((1 ((1 (-1 1)))) (1 ((1 (1.0 1)))) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (1)) (1 ((1 (1.0 1)))) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1)) (1 (1)) (1 (1)))) ((4 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 (1)) (1 (-1)) (1 (1)))) ((4 2) ((1 (1)) (1 (1)) (1 (-1)) (1 (1)))) ((4 2) ((1 (1)) (1 (1)) (1 (1)) (1 (1.0)))) ((2 2) ((1 (1)) (1 ((1 (1.0 1)))))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))))) ((2 2) ((1 (1)) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 (1 (1 (1.0 1)))))))) ((2 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 (1.0 1)))))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 ((1 (1 1)))) (1 (1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 ((1 (-1 1)))) (1 ((1 (1.0 1)))))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 (1)))) ((2 2) ((1 (1.0)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 ((1 (1 1)))) (1 (1)))) ((2 2) ((1 (1)) (1 (-1)))) ((2 2) ((1 ((1 (1 (1 (1.0 1)))))) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 ((1 (-1 1)))))) ((2 2) ((1 ((1 (1 1)))) (1 ((1 (1 1)))))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 1.0)))))) ((2 2) ((1 ((1 (1 1 1.0)))) (1 ((1 (1 1.0 1)))))) ((2 2) ((1 ((1 (1.0 1 1.0)))) (1 (1)))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 (1)))) ((2 2) ((1 ((1 (1.0 1 1.0)))) (1 ((1 (1 1 1)))))) ((2 2) ((1 ((1 (1 1 1.0)))) (1 (1)))) ((2 2) ((1 (1.0)) (1 (1)))) ((2 2) ((1 (1.0)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 ((1 (1 1.0 1)))))) ((2 2) ((1 ((1 (1 1 1.0)))) (1 (1)))) ((2 2) ((1 (1.0)) (1 ((1 (1 1.0 1)))))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 1.0)))))) ((2 2) ((1 ((1 (1 1 1.0)))) (1 (1)))) ((2 2) ((1 (1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 1.0)))))) ((2 2) ((1 (1.0)) (1 ((1 (-1 1 1.0)))))) ((2 2) ((1 ((1 (1 1 (1 (1.0 1)))))) (1 ((1 (1 1 1)))))) ((2 2) ((1 ((1 (-1 1 1.0)))) (1 ((1 (1 1 1.0)))))) ((2 2) ((1 (1)) (1 (-1)))) ((2 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1.0 1)))))) ((2 2) ((1 ((1 (1 1 1.0)))) (1 (1)))) ((2 2) ((1 (1)) (1 ((1 (1 1.0 1)))))) ((2 2) ((1 ((1 (1 1 1.0)))) (1 ((1 (-1 1 1.0)))))) ((2 2) ((1 ((1 (1 1 1.0)))) (1 ((1 (-1 1 1.0)))))) ((2 2) ((1 (1)) (1 (1)))) ((3 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 1.0)))) (1 ((1 (1 1 1.0)))))) ((3 2) (3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5492)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5000)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5300)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6700)) :ldur (quote (300 300)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6700)) :ldur (quote (300 300)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5500)) :ldur (quote (300 300)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5500)) :ldur (quote (300 300)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5500)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 6200)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 6200)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 6200)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6696)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5000)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5000)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5000)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5300)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5500)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5500)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6200)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5000)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5000)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5000)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5700)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5000)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6500)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5500)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 6200)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5700)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5300)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 5500)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5000)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5000)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5800)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5300)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5500)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5500)) :ldur (quote (200 200)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5000)) :ldur (quote (600 600)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1800)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 200) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (199 (((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (1.0)) (1 (1.0)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (1.0)) (1 (1.0)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (1.0)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (1.0)) (1 (1.0)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (1.0)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((3 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 (1 (1.0 1)))))) (1 (1)))) ((3 2) ((1 (1)) (1 (1)) (1 (1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (100)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 200) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (199 (((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((6 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1.0)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1.0)) (1 (1.0)))) ((4 2) ((1 (-1)) (1 (-1)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((4 2) ((1 (1)) (1 (1.0)) (1 (1)) (1 (1.0)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (1.0)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1.0)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) (2)) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) (2)) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (1.0)) (1 (1)))) ((2 2) ((1 (-1)) (1 (-1)))) ((2 2) (2)) ((2 2) ((1 (-1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((2 2) ((1 (1)) (1 (1)))) ((3 2) ((1 ((1 (1 1.0 1)))) (1 ((1 (1 1 1.0)))) (1 ((1 (1 1 1.0)))))) ((3 2) (3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5510)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (1200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (1200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (1800)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 200) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (list (quote gf) (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 814 541) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 630 73) (quote "Ornaments found in the Codex Faenza manuscript (1 and 28).$Choose the file CodexFaenza1and28--OM-voices-as-text3691769488.txt found in the resources folder.") "" (om-make-point 309 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 231 12) nil (list (om-make-pathname :directory (quote (:absolute "Applications" "OM 6.12" "libraries" "OMRuben 0.91" "resources" "ArsNova")) :device :unspecific :host nil :name "CodexFaenza1and28--OM-voices-as-text3691769488" :type "txt")) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-READ-VOICES-FROM-TEXT" (quote r-read-voices-from-text) (quote ((om-load-inputfun (quote input-funbox) "" "TEXTFILE-VOICES" nil))) (om-make-point 180 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 903 328) (om-make-point 182 150) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7100) (7200) (7400) (7200) (6900) (6700) (6700) (7200) (7100) (6900) (7200) (7100) (6700) (6700) (6600) (6800) (6600) (6400) (6300) (6100) (5900) (6100) (6400) (6800) (6600) (6300) (6400) (6700) (6400) (6200) (6600) (6700) (7200) (7200) (7100) (6900) (7200) (7100) (7200) (7400) (7400) (7600) (7400) (7400) (7400) (7300) (7100) (7400) (7200) (7100) (6900) (6700) (6900) (7200) (7100) (7100) (7200) (7400) (6700) (6900) (6700) (6400) (6500) (6700) (6500) (6400) (6200) (6700) (6500) (6900) (7100) (7200) (7100) (6900) (6700) (6700) (7400) (7200) (7000) (6900) (7000) (6700) (6500) (6900) (6900) (7000) (7200) (7300) (7200) (7300) (7500) (7000) (7500) (7300) (7200) (7000) (6900) (6500) (6900) (7100) (7200) (7100) (6900) (6700) (6400) (6200) (6700) (6500) (7000) (6900) (7400) (7000) (6700) (6600) (6700) (6200) (6400) (6200) (6700) (6500) (6200) (6000) (6200) (6400) (6500) (6400) (6200) (6000) (5800) (5700) (5700) (6900) (6700) (7000) (6900) (6600) (6431) (6600) (6685) (6600) (6685) (6431) (6600) (6685) (6600) (6007) (6600) (6700) (6600) (6400) (6700) (6900) (6900) (6900) (6500) (6200) (6500) (6700) (6900) (6700) (6900) (6500) (6400) (6900) (6700) (6500) (6900) (7200) (7100) (6900) (6500) (6500) (6500) (6400) (6000) (6000) (6200) (6000) (6500) (6400) (6900) (7100) (7200) (7100) (6900) (6700) (7100) (6700) (6700) (6700) (6700) (6500) (6200) (7000) (6900) (6700) (6500) (6500) (7000) (7000) (7000) (6900) (6200) (6200) (6200) (7400) (7400) (7400) (7600) (7400) (7400) (7400) (7000) (7000) (7000) (7000) (6900) (7200) (7000) (6700) (6500) (7000) (6900) (6700) (6600) (6600) (6700) (6600) (6400) (6700) (7100) (7200) (7400) (7200) (6900) (6700) (7100) (6700) (6900) (6700) (7200) (7100) (6700) (6700) (6900) (7100) (7200) (7400) (7200) (7200) (7100) (7200) (7200) (7100) (6700) (6900) (6700) (6400) (6700) (6500) (6200) (6000) (6000) (6700) (6900) (6700) (7200) (7100) (7200) (7400) (6700) (6600) (6600) (6400) (6700) (6700) (6900) (6700) (7100) (7200) (7400) (7200) (6900) (6700) (6700) (6500) (6400) (6200) (6200) (6100) (6200) (6900) (6700) (6900) (7000) (6900) (7100) (6900) (6700) (6600) (6400) (6200) (6400) (6700) (7100) (6900) (6600) (6700) (6900) (6700) (6500) (6400) (6200) (6000) (6200) (6500) (6900) (6700) (6400) (6500) (6500) (7200) (7000) (6900) (6700) (6700) (6400) (6500) (6700) (7000) (6900) (6700) (7400) (7200) (7000) (6900) (6700) (6500) (6600) (6600) (6600) (6700) (6900) (6700) (6900) (7100) (7200) (7400) (7200) (6900) (6500) (6700) (6500) (6200) (6500) (6700) (6900) (6700) (6500) (6400) (6400) (6900) (6500) (7200) (7200) (6900) (6500) (6400) (6000) (6500) (6400) (6400) (6900) (7100) (7200) (6900) (7100) (6700) (7400) (7100) (6700) (6500) (6400) (6200) (6200) (7000) (6900) (6700) (6500) (7000) (6900) (6900) (6200) (6052) (6200) (6274) (6200) (6274) (6052) (6200) (6274) (6200) (5683) (7400 6200) (7400 6200) (7400) (7600) (7400) (7200) (7000) (6900) (6900) (7000) (6700) (6700) (6900) (6600) (6400) (6700) (6900) (7100) (6700) (6900) (6500) (6700) (6400) (6500) (6200) (7400) (7100) (7200) (7400) (7100) (7100) (6700) (6700) (6900) (7000) (6700) (7200) (7400) (7100) (6700) (6900) (6500) (6200) (6700) (6400) (6500) (6700) (6900) (7100) (7200) (6900) (6700) (6700) (6600) (6700) (6900) (6500) (6700) (6900) (6700) (7400) (7200) (6900) (7100) (6900) (6700) (6600) (6400) (6200) (6400) (6700) (7100) (6900) (6600) (6700) (7100 6700) (6900) (6500) (6900) (6700) (6400) (6200) (6900) (7100) (7200) (6900) (7400) (7200) (6900) (7100) (6700) (6500) (7000) (6900) (6200) (7400) (7200) (7000) (6900) (6700) (6600) (6400) (6700) (7100) (7200) (7400) (7100) (6700) (6700) (6400) (6500) (7000) (6900) (6900) (6700) (6500) (6900) (6400) (6200) (6500) (6700) (6900) (6700) (7200) (7000) (6900) (6700) (6700) (6600) (6700) (6900) (7000) (7400) (7200) (7000) (6900) (6700) (6500) (6400) (6900) (6700) (6700) (6500) (6400) (6200) (6000) (6400) (6500) (6700) (7000) (6900) (6500) (6400) (6200) (6200) (6900) (6700) (7200) (6900) (7100) (7400) (7200) (6900) (6500) (7000) (6900) (6200) (6400) (6700) (6600) (6900) (6700) (6700) (6500) (6200) (6400) (6500) (6700) (6900) (7000) (6900) (6600) (6700) (6600) (6400) (6700) (6900) (6900) (6900) (6500) (6200) (6200) (6500) (6700) (6900) (6700) (6400) (6200) (6200) (6900) (7100) (7200) (7400) (7200) (6900) (7000) (6900) (6700) (6900) (6500) (6400) (6900) (6700) (6700) (7200) (6900) (7200) (7100) (6700) (6700) (6200) (7000) (6900) (6700) (6500) (7000) (6926) (7000) (7037) (7000) (7037) (6926) (7000) (7037) (7000) (6741) (7000) (6900) (6500) (6700) (6500) (6200) (7400) (7600) (7400) (7400) (7200) (7000) (6900) (7200) (7000) (6700) (6500) (6200) (6700) (6600) (6700) (6900) (6600) (6400) (6700) (6700) (6500) (6700) (6900) (6700) (6700) (6600) (6700))) :lonset (quote (215 2225 2605 2994 3949 4229 4550 4899 5512 6022 6641 7190 7391 7573 8026 8298 8349 8381 8412 8443 8476 8507 8625 8728 8779 8840 8893 8945 9259 10553 11234 11548 12137 12865 13211 14259 14622 14974 16177 16843 17340 18549 19204 20098 20400 21301 21562 21822 22112 22471 22811 22962 23123 23372 23643 23778 24302 24653 24946 25386 25920 26237 26905 27208 27466 27745 27824 27991 28325 28492 28667 29000 29114 29605 29800 29998 30186 30590 30956 31140 31394 31532 31637 31862 31977 33882 34311 34368 34424 34502 34565 34627 34709 34845 34916 34984 35053 35107 35338 36107 36431 36739 37152 37334 37531 37755 38320 38641 39376 39747 40389 40642 40932 41261 41943 42231 43474 43807 44101 44370 44870 45042 45465 45886 46096 46308 46713 47051 47360 47642 48075 48237 49727 50289 50778 51827 52166 52516 52632 52768 52891 53035 53167 53298 53504 53688 54025 54299 55032 55302 55579 55860 57409 58010 58561 60110 61477 62022 62238 62427 62968 63144 63333 63548 64496 65276 65642 66339 66563 66850 67164 67937 68329 68673 69115 69263 70051 70289 70537 70807 71464 71809 72309 72474 72886 72996 73123 73242 73702 73898 75233 76112 76325 76564 77245 78475 78838 79161 79425 79908 80483 81550 82314 84507 85115 85751 86807 87259 87930 88326 88996 90305 90592 90835 91063 91325 91608 91885 92784 93264 93443 93791 94160 94534 94919 95990 96298 96605 96950 97489 97686 100110 100850 101207 101937 102290 102776 102927 103806 104310 104559 104832 105184 105553 106366 106786 107186 107562 107923 108479 108683 109521 109950 111412 111676 111898 112101 112452 112607 112920 113110 113305 113598 113695 114682 115226 115889 116535 116857 117218 117598 117997 118605 118798 118996 119172 121176 121939 122369 122634 122960 123359 124218 124393 124709 124833 125249 125428 125713 125811 126377 126727 128706 129367 129698 130042 130791 130812 130833 130853 130874 130895 130915 130984 131048 131079 131111 131143 131176 131208 131239 131275 131307 131340 131372 131468 131565 131615 131664 131712 131760 131955 133053 133325 133589 133962 134092 134357 134640 134943 135242 135507 135926 136764 137058 137271 137592 137708 137969 138999 139785 140569 140942 142046 142321 142428 142546 142658 142897 143011 143111 143410 143511 143631 143740 144047 144463 144597 144899 145001 145105 145228 146156 146858 147432 147978 148302 149235 149517 149796 150066 150439 150551 150777 151110 151222 151343 151465 151714 152241 152501 152747 153075 153183 153270 153353 153729 154141 154302 154608 154898 155483 156236 156978 157179 157249 157319 157389 157422 157484 157545 157602 157682 157804 157930 158391 159415 160049 160826 161596 161841 162427 163475 163810 164125 164680 164956 165255 165958 166273 167233 167781 168037 168285 168787 169037 169510 169732 169959 170419 170814 171016 171246 171707 171892 172466 172659 173022 173327 173562 174079 174434 174824 175217 175581 175954 176344 177188 177601 177998 178707 179025 179526 179732 179926 180239 180366 180971 181345 182398 182898 183153 183382 183819 184109 184838 185197 185227 185257 185287 185316 185346 185365 185451 185537 185580 185624 185652 185692 185856 186689 187272 187557 187825 188071 188475 188667 189133 189404 189684 190227 190506 190802 191143 191904 193590 194332 194986 195550 196507 197041 197280 197892 198661 199472 199970 200128 200608 200921 201083 201257 201532 201632 201997 202151 202282 202473 202535 202679 202913 202991 203648 203956 204119 204379 204486 204791 204891 205132 205385 205752 205855 206214 206387 207422 207635 207741 207948 208045 208232 208401 208488 208576 208706 208888 208952 209083 209221 209290 209358 210086 210294 210396 210498 210712 210922 211353 211696 211809 213038 213275 213512 213877 213999 214242 214363 214474 214910 215085 215243 215388 215595 215652 215784 216199 216439 216522 216751 216828 216885 216955 217069 217132 217236 217285 217339 217446 217500 217563 217620 218107 218511 218751 219000 219376 219504 219754 219872 219995 220331 220446 220795 220927 221448 221865 222001 222137 222264 222396 222511 222638 222860 222978 223060 223167 223330 223571 223654 223939 224175 224284 224545 225023 225444 225634 225840 226183 226323 226581 227102 227188 227217 227246 227275 227303 227332 227360 227404 227447 227526 227609 227848 228190 228306 228398 228507 229642 229889 230142 230621 230955 231048 231259 231590 231677 231747 231983 232062 232141 232295 232373 232441 232516 232612 232647 233039 233402 233627 233869 234250 234375 234655 235203 235338)) :ldur (quote ((2010) (380) (389) (955) (280) (321) (349) (613) (509) (620) (549) (201) (181) (454) (271) (51) (31) (31) (31) (31) (31) (118) (103) (51) (61) (53) (53) (314) (918) (681) (314) (589) (728) (346) (1048) (363) (352) (1203) (666) (497) (1210) (655) (895) (302) (901) (261) (261) (287) (359) (340) (152) (160) (250) (270) (135) (172) (351) (293) (441) (534) (317) (668) (304) (257) (279) (79) (167) (335) (166) (176) (333) (114) (491) (195) (198) (188) (404) (367) (183) (254) (138) (105) (225) (115) (530) (428) (57) (57) (78) (62) (62) (83) (135) (71) (69) (69) (55) (231) (447) (325) (308) (413) (182) (197) (224) (565) (321) (736) (371) (642) (253) (290) (330) (681) (288) (547) (333) (294) (270) (499) (173) (423) (420) (210) (212) (405) (338) (309) (282) (433) (163) (709) (561) (490) (1049) (337) (350) (116) (136) (123) (144) (131) (131) (206) (185) (337) (277) (733) (269) (278) (281) (511) (601) (551) (1549) (1367) (545) (215) (190) (541) (176) (189) (216) (568) (780) (366) (696) (225) (286) (315) (773) (392) (344) (442) (148) (532) (238) (248) (269) (657) (344) (500) (165) (413) (110) (126) (119) (461) (195) (750) (879) (213) (239) (681) (1229) (363) (324) (263) (483) (575) (1068) (763) (743) (607) (637) (756) (452) (671) (396) (670) (1309) (287) (242) (229) (262) (283) (278) (899) (480) (179) (348) (368) (374) (385) (742) (308) (307) (344) (539) (197) (1610) (740) (357) (730) (354) (486) (151) (595) (503) (249) (273) (353) (369) (813) (420) (399) (376) (361) (557) (204) (838) (429) (820) (264) (223) (202) (351) (155) (314) (189) (196) (293) (97) (734) (544) (663) (646) (321) (361) (380) (399) (608) (193) (197) (176) (1277) (762) (430) (265) (327) (399) (859) (174) (316) (124) (416) (179) (285) (98) (566) (351) (1610) (661) (331) (344) (749) (21) (21) (21) (21) (21) (21) (69) (64) (32) (32) (32) (32) (32) (32) (36) (32) (32) (32) (97) (97) (51) (49) (49) (49) (194) (755) (272) (264) (373) (129) (266) (282) (303) (300) (265) (419) (528) (294) (213) (321) (116) (261) (666) (786) (784) (373) (631) (274) (108) (118) (111) (239) (114) (101) (299) (100) (120) (110) (307) (415) (135) (302) (102) (104) (124) (591) (703) (573) (546) (323) (633) (282) (279) (270) (373) (113) (225) (334) (112) (120) (123) (249) (260) (260) (246) (327) (108) (86) (83) (376) (412) (161) (306) (290) (585) (753) (741) (201) (70) (70) (70) (34) (62) (62) (56) (80) (122) (126) (461 461) (574 574) (634) (777) (533) (529) (921) (335) (649) (610) (295) (276) (639) (341) (315) (475) (276) (505) (496) (248) (250) (473) (221) (460) (232) (202) (432) (545) (314) (375) (574) (192) (544) (180) (235) (218) (354) (783) (393) (364) (373) (390) (415) (413) (774) (377) (318) (501) (206) (392) (198) (246) (412) (195) (627) (241) (485) (429) (199) (290) (730) (357) (660) (339) (30) (30) (30) (19) (29) (29) (86) (72) (29) (42) (42) (26 26) (144) (553) (514) (451) (205) (191) (204) (551) (280) (542) (279) (296) (703) (362) (426) (389) (654) (564) (625) (534) (499) (612) (769) (416) (656) (525) (479) (356) (122) (257) (375) (193) (182) (211) (57) (254) (128) (143) (235) (78) (175) (231) (84) (573) (412) (206) (341) (132) (378) (125) (219) (193) (229) (57) (422) (209) (587) (199) (102) (169) (87) (141) (130) (54) (65) (130) (207) (68) (154) (160) (97) (102) (632) (214) (105) (107) (230) (244) (502) (356) (119) (730) (243) (243) (350) (111) (216) (76) (70) (145) (135) (124) (132) (195) (73) (162) (306) (203) (57) (184) (52) (62) (47) (103) (54) (107) (54) (63) (132) (75) (88) (129) (502) (504) (253) (250) (349) (123) (226) (115) (115) (394) (122) (418) (136) (262) (374) (133) (115) (127) (104) (118) (82) (176) (70) (93) (84) (192) (345) (109) (261) (250) (117) (189) (207) (482) (260) (258) (391) (129) (259) (505) (87) (29) (28) (29) (28) (28) (22) (42) (42) (82) (78) (201) (312) (98) (123) (128) (700) (221) (198) (381) (244) (87) (151) (157) (79) (79) (232) (78) (69) (149) (74) (69) (69) (127) (44) (498) (505) (273) (281) (412) (135))) :lvel (quote ((21) (35) (46) (55) (59) (55) (47) (34) (22) (20) (28) (40) (46) (43) (36) (33) (32) (36) (44) (55) (69) (83) (98) (109) (115) (117) (116) (117) (118) (116) (108) (95) (86) (85) (90) (95) (96) (94) (92) (89) (87) (90) (99) (109) (108) (96) (79) (74) (84) (98) (92) (70) (43) (32) (40) (54) (58) (53) (44) (36) (30) (29) (36) (50) (58) (54) (39) (23) (13) (9) (11) (21) (37) (50) (57) (58) (55) (47) (40) (44) (63) (88) (101) (97) (83) (74) (70) (69) (69) (69) (70) (77) (89) (95) (87) (63) (38) (26) (25) (33) (43) (56) (67) (70) (67) (64) (62) (61) (56) (44) (28) (18) (13) (17) (29) (51) (78) (95) (101) (98) (95) (94) (92) (89) (84) (75) (63) (45) (30) (31) (45) (60) (63) (52) (43) (48) (66) (79) (78) (62) (47) (42) (47) (57) (71) (86) (94) (91) (80) (72) (68) (69) (65) (55) (41) (29) (20) (16) (24) (44) (70) (90) (102) (105) (97) (78) (54) (35) (21) (11) (6) (6) (14) (31) (56) (72) (66) (42) (23) (20) (33) (42) (40) (30) (29) (40) (61) (73) (70) (58) (48) (43) (43) (41) (35) (31) (35) (47) (61) (64) (53) (38) (29) (26) (27) (27) (26) (28) (35) (48) (61) (73) (81) (82) (71) (51) (33) (21) (17) (23) (40) (66) (83) (86) (78) (74) (77) (85) (85) (75) (59) (45) (33) (26) (29) (41) (57) (64) (60) (54) (55) (64) (74) (78) (77) (71) (63) (54) (52) (64) (87) (100) (93) (67) (49) (56) (81) (95) (90) (67) (44) (27) (15) (8) (7) (10) (15) (20) (28) (40) (56) (72) (78) (72) (61) (58) (64) (72) (74) (69) (64) (67) (76) (81) (75) (57) (43) (46) (64) (82) (92) (93) (90) (84) (77) (71) (70) (73) (74) (74) (73) (75) (81) (87) (84) (70) (51) (42) (48) (61) (74) (83) (88) (85) (73) (60) (59) (68) (75) (69) (49) (31) (31) (45) (63) (75) (80) (76) (62) (41) (33) (42) (69) (86) (80) (59) (41) (28) (24) (26) (35) (48) (54) (54) (47) (39) (31) (25) (27) (35) (48) (61) (73) (80) (79) (68) (55) (46) (40) (35) (29) (22) (17) (15) (16) (21) (30) (41) (51) (57) (60) (60) (58) (55) (56) (62) (73) (85) (95) (104) (110) (112) (110) (102) (88) (75) (70) (77) (84) (77) (55) (31) (19) (21) (31) (47) (68) (83) (87) (79) (66) (53) (39) (32) (33 33) (43 43) (52) (56) (59) (65) (76) (90) (90) (71) (43) (32) (42) (67) (85) (92) (91) (86) (77) (70) (71) (82) (97) (105) (106) (102) (95) (84) (70) (54) (36) (23) (20) (25) (34) (43) (51) (54) (50) (41) (43) (60) (90) (112) (122) (123) (122) (122) (121) (112) (94) (72) (60) (61) (68) (69) (64) (59) (66) (84) (103) (106) (90) (69) (54) (45) (39) (33) (28) (27) (34) (47) (56) (58) (51) (51 51) (67) (92) (105) (100) (78) (57) (42) (32) (33) (45) (62) (67) (55) (36) (26) (26) (36) (53) (78) (103) (114) (112) (101) (89) (75) (66) (71) (87) (104) (114) (116) (114) (109) (101) (89) (73) (53) (40) (38) (45) (58) (73) (90) (95) (88) (73) (67) (75) (91) (101) (102) (95) (81) (58) (36) (29) (37) (50) (51) (37) (25) (35) (65) (94) (102) (87) (65) (45) (28) (16) (8) (5) (13) (37) (72) (95) (99) (86) (74) (72) (74) (70) (56) (38) (34) (50) (77) (98) (112) (117) (119) (115) (106) (87) (58) (35) (36) (63) (94) (105) (95) (76) (56) (37) (23) (18) (22) (29) (36) (42) (47) (52) (56) (55) (47) (35) (26) (23) (26) (34) (48) (65) (80) (93) (101) (98) (83) (62) (48) (42) (41) (37) (31) (24) (18) (12) (10) (14) (26) (38) (43) (42) (46) (59) (82) (98) (91) (69) (48) (36) (34) (34) (37) (40) (42) (41) (39) (45) (61) (82) (96) (102) (98) (86) (65) (43) (35) (42) (56) (66) (69) (69) (69) (69) (71) (75) (82) (84) (76) (59) (49) (57) (79) (96) (98) (85) (77) (81) (94) (99) (96) (88) (76))) :loffset (quotelchan (quote ((20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20 20) (20 20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20 20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5492) (5695) (5797) (5695) (5695) (5492) (5390) (5492) (5695) (5492) (5695) (5390) (6000) (6000) (6200) (6000) (5700) (5500) (5800) (5700) (5500) (5500) (5700) (5500) (6000) (6400) (6500) (6400) (6200) (6000) (6400) (6200) (6500) (6700) (6800) (6700) (6800) (7000) (6500) (7000) (6800) (6700) (6500) (6400) (6000) (6700) (6500) (6700) (6400) (6200) (6400) (6500) (6400) (6400) (6200) (6100) (6200) (6400) (6200) (6400) (6100) (6700) (6400) (6500) (6700) (6000) (6200) (6400) (6000) (5700) (5800) (6000) (6200) (6000) (5800) (5700) (5500) (5300) (5500) (5800) (6200) (6000) (5700) (5800) (5900) (6100) (5800) (6100) (5900) (5800) (5600) (5500) (5400) (5500) (5400) (5500) (5700) (5900) (5700) (5900) (6100) (6200) (6400) (6200) (6000) (5900) (5700) (5500) (5700) (6000) (6400) (6200) (5900) (6000) (6500) (6400) (6200) (6000) (5800) (5700) (6000) (6200) (6000) (6200) (6000) (5700) (5300) (6000) (5800) (6000) (6200) (5500) (5300) (5500) (5800) (5700) (5500) (5400) (5500) (5700) (5800) (6000) (6300) (6200) (6000) (5800) (5700) (5500) (5800) (5700) (5300) (5500) (5000) (4947) (5000) (5026) (5000) (5026) (4947) (5000) (5026) (5000) (4816) (5000 5700) (5000 5700) (5000 5700) (5000 5700) (6200 5800) (6200 5800) (6000 5700) (6000 5700) (5700 5300) (5700) (5800) (5700) (6000) (5700) (6200) (6400) (6200) (6000) (5900) (5700) (5500) (5700) (6000) (6400) (6200) (5900) (6000) (6200) (6500) (6400) (6200) (6000) (5700) (5300) (5300) (5300) (5500) (5700) (5700) (5700) (5900) (5700) (5500) (5400) (5200) (5000) (5200) (5500) (5900) (5700) (5400) (5500) (6700) (6700) (6500) (6200) (6200) (6200 5800) (6200 5800) (6000 5300) (5500 6700) (5500 6700) (5500 6700) (5500 6700) (6200) (6200) (6200) (6200) (6200) (6000) (6000) (6200 5500) (6200 5500) (6200 5500) (6200) (6000) (5700) (5500) (5400) (5400) (5200) (5200) (5000) (5000) (4900) (5000 6200) (5000 6200) (5000) (4758) (5000) (4758) (5000) (5485) (5969) (5485) (5969) (6454) (6696) (6500) (6700) (6000) (6400) (6500) (6700) (6400) (6000) (5500) (5700) (5900) (6000) (6400) (6200) (6000) (5891) (6000) (6055) (6000) (6055) (5891) (6000) (6055) (6000) (5617) (6000) (5700) (5900) (6000) (6400) (6200) (6500) (6400) (6000) (5500) (5700) (5500) (5800) (5700) (5500) (6000) (5500) (5300) (5500) (5700) (5500) (5300) (5200) (5000) (6200) (6000) (6200) (6400) (6500) (6700) (6500) (6200) (6300) (6200) (6000) (5700) (5500) (5300) (5500) (5800) (5700) (5500) (5300) (5500) (5000 5700) (5000 5700) (5000 5700) (6200 5800) (6000 5700) (6000 5700) (5700 5300) (5800) (5300) (5300) (5500) (5300) (5200) (5300) (5500) (5700) (5500) (5300) (5500) (5700) (5900) (6000) (5900) (5900) (5700) (5600) (5700) (5900) (5700) (5900) (5600) (6200) (6200) (6000) (6500) (6400) (6200) (6000) (6000) (6200) (6300) (6500) (6300) (6200) (6300) (6200) (6000) (6000) (5800) (5600) (5500) (5600) (5300) (5300) (5500) (5700) (5500) (6700) (6500) (6200) (6200 5000) (5000 5700) (5500) (5500) (6200) (6200) (6000) (5800) (5500) (6200) (6000) (5700) (5500) (6200 5000) (6200 5000) (6200) (6200) (6400) (6000) (6200) (5800) (6000) (5700) (5800) (5500) (6700) (6400) (6500) (6700) (6400) (6400) (6000) (6000) (6200) (6400) (6000) (6500) (6700) (6400) (6000) (6200) (5800) (5500) (6000) (5700) (5800) (6000) (6200) (6000) (5500) (5800) (5700) (5500) (6200) (6400) (6500) (6700) (6500) (6200) (6000) (5700) (5700) (5700) (6200) (6000) (5700) (5300) (5500) (5700) (5500) (6700) (6500) (6200) (6200 5800) (6000 5300) (6700 5500) (6200) (6200 5500) (6200) (6000) (5700) (5800) (5700) (6000) (6200) (6700) (6400) (6500) (6700) (6400) (6000) (6200) (6000) (5800) (5700) (6000) (6000) (6200) (6000) (5500) (5300) (5500) (5800) (5700) (5500) (6200) (6000 5700) (5800 6200) (6400 5700) (6000 5700) (6200 5000) (5700 5000) (5900 5000) (6100 5700) (6200 5000) (6000 6400) (5700 6500) (6700 5500) (6500 6200) (6400 5700) (6200 5800) (6000 5300) (5800 5500) (5700 5000) (5000) (4940) (5000) (5030) (5000) (5030) (4940) (5000) (5030) (5000) (4791) (5000) (5000) (6200) (5700) (5700) (5700) (5800) (5700) (5900) (6000) (5900) (5900) (5700) (5600) (5700) (5900) (5700) (5900) (5600) (6200) (6000) (6500) (6400) (6200) (6000) (5700) (5300) (5500) (5700) (5500) (6700) (6700) (6200) (6200) (6200 5800) (6200 5800) (6000 5300) (6700 5500) (6200) (6200) (6000) (6200 5500) (6200) (6000) (5700) (5500) (6200 5000) (6200) (5500) (5000) (5500) (5300) (5100) (4900) (4800) (4900) (4600) (5500) (5000) (6200) (6092) (6200) (6254) (6200) (6254) (6092) (6200) (6254) (6200) (5821))) :lonset (quote (219 512 826 1162 1514 1865 2230 2610 2998 3359 3677 3952 4229 5512 6022 6939 7190 7391 7573 8026 9259 10981 11548 12137 12533 13211 13621 13924 14259 14974 16177 17340 17893 17966 18058 18137 18215 18294 18386 18550 18636 18719 18802 18882 19204 19810 20400 21025 21562 22111 22238 22340 22470 22581 22697 22810 22923 23015 23122 23198 23293 23947 24653 24946 25179 25634 25920 26237 26572 27208 27466 27672 27670 27692 27713 27735 27756 27778 27825 27882 27911 27940 27963 27991 28011 28029 28046 28062 28078 28094 28111 28159 28221 28285 28321 28360 28400 28438 28472 28503 28533 28492 28510 28529 28548 28566 28585 28603 28668 28726 28772 28804 28837 28869 29450 30186 30590 31272 31532 31977 33882 34310 35107 35338 35552 35785 36989 37334 38320 38990 39376 40092 40389 40642 41261 41617 42233 42373 42538 42722 42939 43176 43407 43617 43818 43981 44138 44317 44101 45465 46308 47051 48241 48950 49222 49489 49732 49980 50154 50292 50507 50781 51468 52164 53686 54299 54774 55860 56829 57409 58561 59315 60799 61477 62022 62787 63548 64119 64216 64288 64361 64458 64538 64617 64885 65148 65279 65395 65520 66126 66563 66850 67533 67937 68329 68673 69795 70289 70807 71113 71464 72149 72747 72778 72810 72841 72871 72903 72934 72997 73081 73123 73160 73201 73242 76564 78061 78475 78838 79908 80483 81550 82314 84507 85115 85751 86150 86508 86807 87033 87559 87930 88326 88677 88996 89304 89626 90835 91885 92319 94161 94535 94660 94792 94920 95307 95427 95552 95660 96950 97688 98075 98477 98674 98883 99086 99299 99508 99717 99919 100110 101573 102927 104061 104559 104832 105184 105950 106366 107186 107562 107923 108293 108683 109090 109951 110232 110326 110421 110514 110591 110682 110771 110880 111006 111220 111898 112335 112920 113695 114429 115226 115542 115889 116217 116857 117218 117598 117997 118403 119172 120449 122634 124002 124833 125249 125608 125811 126079 126727 128337 128872 129036 129367 129698 130042 130597 130791 131175 131955 132523 132710 133325 133589 133838 134092 134357 134943 135507 135926 137969 138635 139383 140942 142046 142428 142897 143740 144337 144442 144545 144646 144710 144801 144945 145020 145102 145210 145310 145229 145266 145303 145369 145411 145453 145496 145538 145609 145656 145704 145751 145820 146509 147155 147698 147978 148302 148779 148935 148970 149004 149031 149066 149100 149134 149168 149201 149236 149279 149328 149377 149426 149476 149796 150323 150551 151465 153353 153973 154302 155483 156976 157930 158391 158965 159415 160049 160635 160826 161841 162427 163119 164419 164956 165596 166273 167233 168037 168285 168533 169037 169280 169732 169959 170191 170620 171016 171246 171560 172082 172262 172853 173022 173327 173562 173780 174434 174824 175217 175581 175954 176344 176759 177601 177998 178375 179025 179309 179732 180124 180366 180642 181345 182639 183153 183382 183819 184456 185856 186281 186414 187557 188071 188475 188871 189404 189955 190227 190506 191143 192765 193394 193590 194332 194986 195550 196175 196789 197540 197892 198261 198661 199077 199472 200128 200608 200921 201083 201257 201632 201814 202151 202405 202679 202991 203495 203804 203956 204692 205132 205385 205631 205855 206048 206387 207422 208576 208952 209358 209884 210498 210922 211134 211353 211809 213275 213753 213999 214474 214690 214910 215243 215388 215652 216047 216113 216151 216175 216200 216224 216248 216273 216323 216362 216440 216955 217285 217620 218107 218751 219253 219504 219750 219853 219955 220045 220144 220242 220332 220429 220524 220622 220720 220816 221189 221728 222001 222396 222511 222743 222978 223330 223654 223846 224284 225634 226073 226323 226835 227102 227360 227848 228507 229151 229642 229889 230142 230842 231259 231429 231904 232220 232647 233039 233402 233627 233871 234012 234061 234226 234385 234559 234375 234655 235205 235591 235703 235828 235952 236066 236187 236306 236486 236666 236846 236947)) :ldur (quote ((294) (317) (335) (354) (353) (365) (381) (390) (361) (319) (277) (281) (1283) (509) (917) (251) (201) (181) (454) (1233) (1294) (567) (589) (397) (678) (410) (303) (336) (715) (568) (1162) (552) (73) (92) (79) (79) (79) (92) (164) (86) (83) (83) (80) (322) (606) (590) (625) (537) (548) (127) (103) (129) (112) (115) (113) (113) (93) (107) (76) (96) (78) (706) (293) (233) (456) (286) (317) (335) (636) (257) (205) (-1) (21) (21) (21) (21) (21) (47) (58) (29) (29) (23) (28) (19) (18) (17) (16) (16) (17) (17) (17) (63) (64) (37) (39) (40) (38) (34) (31) (30) (30) (18) (18) (18) (18) (18) (18) (64) (58) (46) (33) (33) (33) (582) (736) (404) (682) (260) (445) (1266) (428) (797) (231) (214) (233) (1203) (346) (985) (670) (387) (715) (297) (253) (620) (355) (614) (141) (165) (185) (217) (238) (232) (209) (201) (164) (157) (179) (178) (1365) (842) (743) (1187) (708) (273) (265) (243) (248) (174) (138) (216) (276) (685) (700) (1521 1521) (1089 1089) (475 475) (527 527) (511 511) (580 580) (1152 1152) (1549 1549) (1484 1484) (1224) (545) (405) (761) (1334) (766) (754) (1475) (1477) (776) (784) (1371) (1242) (689) (87) (84) (84) (53) (70) (61) (276) (272) (128) (117) (89) (81) (657) (351) (685) (325) (250) (247) (1169) (500) (498) (230) (226) (521) (570) (23) (27) (27) (27) (26) (45) (123) (124) (43) (48 48) (47 47) (63 63) (2000 2000) (1393 1393) (398 398) (358 358) (1051) (452) (1293) (1437) (747) (670) (1916) (1839 1839) (675 675) (679 679) (490) (433) (216) (374) (385) (388) (386) (387) (685) (354) (347) (330 330) (360 360) (387) (401) (406) (410) (833) (832) (1553) (803) (1493) (393) (133) (122) (104) (248) (97) (121) (110) (1612) (1556) (737) (731) (370) (390) (207) (215) (215) (212) (197) (194) (190) (203) (1165) (1128) (1078) (579) (297) (202) (585) (385) (734) (253) (315) (347) (328) (318) (741) (254) (84) (88) (91) (84) (74) (58) (101) (77) (129) (137) (566) (648) (820) (699) (1000) (331) (331) (344) (749) (387) (384) (389) (385) (671) (615) (2183) (1051) (1104) (548) (586) (300) (220) (528) (666 666) (561 561) (202 202) (327 327) (176 176) (229 229) (322 322) (154) (262) (441) (313) (91) (408) (190) (220) (229) (262) (564) (623) (592) (1302) (621) (608) (617) (648) (1364) (1367) (1351) (1359) (690) (701) (689) (646) (1146) (1236) (642) (130) (118) (109) (111) (111) (118) (115) (120) (132) (129) (128) (43) (49) (49) (49) (49) (42) (47) (33) (39) (40) (30) (78) (596) (753 753) (568 568) (209) (303) (337) (127) (38) (42) (15) (38) (33) (45) (18) (30 30) (56 56) (53) (43) (43) (42) (44) (42) (452) (228) (855) (824) (626) (231) (1412) (1462) (1353) (1300) (1060) (539) (453) (518) (654) (589) (199) (737) (763) (805) (844) (842) (774) (709) (650) (501) (816) (634) (242) (275) (703) (345) (513) (230) (199) (637) (740) (279) (270) (420) (132) (315) (94) (263) (280) (271) (576) (296) (362) (419) (387) (389) (340 340) (564 564) (300 300) (332) (490 490) (352) (769) (816) (416) (395) (656) (955) (476) (252) (549) (557) (903) (379) (94) (930) (487) (504) (461) (491) (530) (331) (378) (663) (583) (402) (153) (452) (623) (377 377) (406 406) (526 526) (614 614) (636 636) (661 661) (675 675) (706 706) (379 379) (358 358) (367 367) (365 365) (326 326) (553 553) (478 478) (281 281) (135 135) (132 132) (315) (159) (314) (316) (322) (325) (478) (330) (156) (594) (312) (115) (108) (139) (176) (502) (1427) (1423) (697) (690) (687) (693) (692) (707) (718) (724) (486) (488) (250) (254) (259) (274) (510) (464) (1143) (1103) (352) (325) (192) (186) (511) (439) (250) (258) (267) (258 258) (488 488) (458 458) (203 203) (242) (500) (498) (700 700) (587) (75) (32) (26) (23 23) (23) (41) (29) (51) (57) (144) (148) (817) (829) (815) (828) (547) (255) (237) (104) (104) (94) (102) (100) (101) (101) (101) (101))) :lvel (quote ((68) (73) (76) (78) (78) (75) (67) (54) (38) (26) (20) (21) (27) (37) (45) (53) (59) (64) (67) (65) (60) (51) (38) (26) (19) (17) (20) (28) (38) (47) (58) (68) (79) (87) (92) (94) (93) (89) (86) (84) (83) (83) (85) (86) (87) (87) (88) (88) (89) (91) (95) (99) (102) (100) (93) (81) (64) (48) (37) (32) (32) (38) (43) (45) (43) (38) (29) (23) (21) (24) (31) (43) (55) (67) (79) (91) (103) (110) (112) (110) (102) (92) (83) (77) (73) (71) (72) (73) (76) (79) (83) (86) (88) (87) (84) (79) (75) (74) (77) (83) (91) (98) (101) (100) (94) (85) (78) (76) (78) (86) (96) (103) (104) (100) (89) (75) (66) (61) (62) (68) (78) (87) (94) (100) (104) (106) (103) (95) (82) (64) (46) (35) (32) (35) (45) (54) (58) (56) (49) (36) (23) (14) (8) (5) (5) (10) (20) (34) (53) (74) (88) (92) (85) (70) (48) (35) (30) (35) (50) (69) (85) (98) (106) (110 110) (110 110) (108 108) (104 104) (98 98) (89 89) (81 81) (75 75) (73 73) (75) (79) (84) (91) (97) (104) (110) (115) (118) (118) (116) (111) (105) (96) (85) (73) (59) (48) (40) (35) (33) (34) (37) (44) (54) (67) (81) (92) (101) (107) (111) (112) (112) (109) (105) (99) (92) (85) (78) (71) (65) (58) (51) (43) (34) (25) (19) (17) (20 20) (28 28) (39 39) (48 48) (52 52) (53 53) (50 50) (45) (41) (40) (42) (46) (52) (56) (60 60) (62 62) (63 63) (61) (58) (52) (43) (32) (21) (13) (8) (6) (7) (9) (12 12) (16 16) (20) (26) (33) (43) (56) (71) (88) (101) (107) (107) (100) (88) (75) (63) (52) (42) (33) (27) (23) (21) (21) (24) (29) (36) (45) (55) (66) (72) (76) (75) (71) (65) (59) (51) (43) (34) (26) (23) (23) (26) (32) (41) (51) (63) (76) (91) (102) (111) (116) (117) (115) (114) (113) (114) (115) (117) (118) (118) (117) (116) (114) (112) (110) (108) (106) (104) (103) (101) (100) (100) (99) (100) (100) (101) (102) (101) (95) (84) (70) (52) (35 35) (23 23) (14 14) (9 9) (7 7) (7 7) (9 9) (12) (16) (21) (27) (32) (36) (41) (44) (45) (43) (38) (31) (22) (16) (12) (10) (11) (14) (22) (34) (50) (70) (87) (98) (103) (100) (92) (83) (75) (70) (66) (65) (65) (67) (72) (78) (85) (90) (91) (89) (83) (76) (73) (74) (79) (89) (100) (110) (116) (119) (120) (118) (114) (109 109) (102 102) (93) (84) (79) (76) (76) (78) (82) (85) (87) (89) (91) (94 94) (97 97) (102) (107) (113) (114) (110) (99) (83) (64) (48) (38) (32) (31) (34) (35) (34) (31) (26) (20) (15) (11) (9) (8) (9) (13) (21) (31) (45) (60) (72) (83) (92) (99) (103) (103) (99) (92) (80) (69) (59) (50) (42) (36) (33) (33) (35) (41) (47) (51) (50) (45) (36) (25) (17) (13) (13) (16) (21) (23) (24 24) (21 21) (17 17) (13) (14 14) (19) (28) (41) (55) (68) (80) (90) (99) (107) (112) (114) (115) (113) (109) (102) (92) (80) (67) (57) (54) (55) (62) (72) (81) (88) (93) (97) (98) (97 97) (94 94) (87 87) (78 78) (70 70) (67 67) (68 68) (74 74) (84 84) (95 95) (103 103) (107 107) (107 107) (105 105) (99 99) (90 90) (78 78) (62 62) (45) (33) (31) (38) (54) (76) (94) (106) (111) (108) (101) (92) (85) (78) (72) (66) (60) (55) (50) (46) (43) (43) (47) (53) (63) (72) (74) (72) (63) (50) (39) (35) (41) (54) (75) (94) (107) (114) (115) (111) (104) (94) (82) (67) (51) (41 41) (38 38) (41 41) (50 50) (64) (77) (89) (98 98) (105) (111) (112) (109) (102 102) (92) (80) (68) (58) (49) (41) (34) (31) (30) (31) (35) (38) (40) (38) (35) (30) (27) (25) (26) (28) (30) (34) (34))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6045) (6200) (6277) (6200) (6277) (6045) (6200) (6277) (6200) (5659) (6200) (6000) (5700) (5700) (6000) (5800) (5600) (5500) (5600) (5300) (6200) (6100) (6200) (6400) (6500) (6700) (7000) (6900) (6700) (6500) (6400) (6200) (6500) (6500) (6500) (6700) (6500) (6400) (6200) (6200) (6153) (6200) (6223) (6200) (6223) (6153) (6200) (6223) (6200) (6036) (6200) (6000) (5700) (5700) (5600) (5700) (5900) (6000) (6200) (6500) (6400) (6200) (6000) (5900) (5700) (6000) (6200) (6500) (6500) (6500) (6700) (6500) (6700) (6800) (6700) (6800) (7000) (6500) (7000) (6800) (6700) (6500) (6400) (6200) (6200) (6200) (6000) (5700) (5700) (6000) (6200) (6500) (6500) (6500) (6700) (6500) (6400) (6200) (6200) (6200) (6000) (5700) (5700) (6000) (6200) (6500) (6500) (6500) (6700) (6500) (6400) (6200) (6200) (6200) (6400) (6500) (6400) (6200) (5900) (6200))) :lonset (quote (48245 49735 50156 50434 50786 51220 51717 52172 52899 53693 54781 59315 62787 64117 69795 71467 72235 72450 72825 73197 73608 73248 73817 74475 75064 75583 75991 76399 76941 77683 78560 79298 79771 80483 82314 86508 88326 90305 91885 93443 135929 136666 136929 137158 137352 137536 137736 137973 138406 138885 139924 142897 144793 145820 149518 149636 149751 149873 149988 150108 150217 150331 150430 150536 150622 150713 150551 151465 155483 156976 158965 160049 161360 161447 161516 161597 161679 161761 161842 162023 162126 162218 162310 162427 163810 183382 186974 188071 188475 189955 190506 191143 194332 194986 196175 196789 197280 197892 198661 216046 218751 220221 220927 223167 223654 224284 227102 227848 229151 229889 230621 231259 231747 233039 233402 233627 233869 234250 234375 235203 235950 236697)) :ldur (quote ((1490) (421) (276) (352) (434) (497) (457) (727) (798) (1085) (1085) (3472) (1329) (2009) (1669) (767) (216) (374) (373) (410) (493) (570) (662) (589) (519) (411) (408) (542) (747) (876) (737) (476) (591) (1831) (2194) (1818) (1979) (1580) (1558) (2217) (737) (263) (227) (193) (184) (200) (236) (433) (482) (1036) (1023) (1896) (1026) (1335) (119) (115) (122) (116) (120) (109) (114) (99) (107) (86) (91) (80) (914) (2836) (1494) (953) (1084) (1311) (86) (69) (81) (82) (81) (81) (181) (103) (92) (92) (118) (1383) (1146) (2474) (1097) (404) (396) (551) (637) (2447) (654) (564) (614) (490) (612) (769) (811) (1574) (1470) (706) (801) (488) (629) (2039) (746) (659) (737) (732) (638) (488) (474) (364) (225) (242) (380) (125) (828) (747) (747))) :lvel (quote ((86) (35) (39) (81) (60) (45) (86) (38) (53) (97) (82) (103) (88) (100) (44) (43) (100) (26) (51) (98) (109) (67) (43) (98) (91) (122) (84) (50) (18) (96) (80) (82) (81) (114) (92) (43) (68) (91) (70) (42) (10) (28) (25) (82) (95) (36) (90) (23) (44) (91) (52) (105) (72) (67) (72) (78) (39) (66) (90) (96) (95) (82) (53) (87) (114) (41) (103) (99) (104) (108) (108) (79) (92) (37) (45) (54) (19) (89) (80) (90) (68) (81) (62) (71) (80) (102) (70) (31) (62) (49) (38) (105) (71) (105) (13) (97) (104) (55) (50) (88) (30) (74) (96) (49) (68) (67) (54) (23) (96) (61) (31) (103) (61) (90) (19) (64) (88) (111) (56) (68) (68))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5510) (5500) (5300) (5000) (5000) (5300) (5100) (4900) (4800) (4900) (4600) (5500) (5400) (5500) (5700) (5800) (6000) (6300) (6200) (6000) (5800) (5700) (5500) (5800) (5646) (5800) (5877) (5800) (5877) (5646) (5800) (5877) (5800) (5262) (5800) (5679) (5800) (5860) (5800) (5860) (5679) (5800) (5860) (5800) (5378) (5800) (6000) (6200) (6000) (5800) (5700) (5500) (5300) (5500) (5800) (6200) (6000) (5700) (5800) (6000) (6100) (6000) (6100) (6300) (5800) (6300) (6100) (6000) (5800) (5700) (5500) (5500) (5500) (5300) (5000) (4932) (5000) (5034) (5000) (5034) (4932) (5000) (5034) (5000) (4762) (5000) (5300) (5500) (5800) (5800) (5701) (5800) (5849) (5800) (5849) (5701) (5800) (5849) (5800) (5454) (5800) (6000) (5800) (5700) (5500) (5500) (5500) (5300) (5000) (5000) (5300) (5500) (5800) (5800) (5800) (6000) (5800) (5700) (5900) (5700) (5500) (5400) (5200) (5000) (5200) (5500) (5900) (5700) (5400) (5500) (5500) (5410) (5500) (5545) (5500) (5545) (5410) (5500) (5545) (5500) (5185) (5500) (5300) (5000) (5000) (5300) (5500) (5400) (5500) (5700) (5800) (6000) (6300) (6200) (6000) (5800) (5700) (5500) (5800) (5800) (5800) (6000) (5800) (5700) (5500) (5800) (5700) (5800) (6000) (5800) (5700) (5500) (5438) (5500) (5531) (5500) (5531) (5438) (5500) (5531) (5500) (5283))) :lonset (quote (50289 55860 57409 59315 64117 66129 67171 67805 69031 69991 70766 75238 75594 75891 76183 76503 76850 77312 77780 78288 78796 79172 79480 78840 79163 79272 79333 79426 79493 79576 79659 79775 79909 80193 84512 85118 85319 85539 85756 86021 86280 86512 86811 87035 87563 90305 91887 91962 92049 92109 92186 92249 92320 92537 92786 92949 93115 93266 93445 93623 93794 93977 94162 94343 94536 94921 95115 95308 95491 95660 97686 137058 140942 142046 142899 143185 143266 143356 143446 143535 143645 143742 143939 144143 144510 145820 147155 152501 154302 157931 158209 158340 158476 158596 158728 158853 158967 159120 159267 159585 161360 162427 163810 164956 166273 183819 185856 186414 186974 188475 188871 191904 193590 195550 197280 197892 198661 199473 199517 199561 199604 199648 199692 199708 199828 199948 199971 200024 200076 200128 216523 216602 216629 216655 216682 216701 216726 216752 216791 216829 216886 217620 218107 218751 220927 221728 225024 225146 225243 225365 225481 225604 225722 225840 225995 226137 226285 226405 226323 228507 230621 231259 231747 232220 232647 233039 233402 233627 233869 234375 234655 235205 235591 235703 235828 235952 236066 236187 236306 236486 236666 236846 237026)) :ldur (quote ((1876) (1549) (1906) (3472) (2009) (1042) (634) (1226) (960) (774) (1015) (356) (299) (291) (320) (350) (462) (468) (510) (507) (377) (309) (261) (323) (110) (60) (94) (66) (83) (83) (115) (135) (284) (292) (605) (201) (219) (216) (265) (259) (232) (300) (226) (526) (767) (1580) (75) (87) (60) (78) (62) (72) (216) (249) (163) (166) (151) (179) (177) (171) (183) (185) (182) (192) (385) (194) (193) (183) (172) (2025) (2424) (911) (1105) (851) (286) (81) (89) (89) (89) (110) (97) (196) (205) (367) (285) (1335) (2361) (1801) (1181) (278) (131) (135) (120) (132) (125) (114) (152) (147) (317) (468) (1067) (1383) (1146) (1317) (960) (637) (557) (561) (1097) (396) (1085) (1686) (742) (1239) (612) (769) (811) (43) (43) (43) (43) (43) (16) (120) (120) (23) (53) (53) (53) (479) (80) (26) (26) (26) (19) (25) (25) (38) (38) (57) (70) (487) (643) (1470) (801) (1439) (122) (97) (122) (116) (124) (117) (119) (156) (141) (148) (121) (121) (779) (1382) (638) (488) (474) (426) (392) (364) (225) (242) (505) (281) (547) (386) (113) (124) (124) (114) (121) (119) (180) (180) (180) (180))) :lvel (quote ((91) (103) (71) (26) (47) (70) (84) (36) (17) (41) (93) (56) (48) (51) (99) (41) (60) (83) (90) (38) (61) (79) (100) (101) (23) (20) (41) (36) (85) (44) (65) (44) (98) (74) (54) (77) (99) (100) (80) (105) (39) (35) (31) (12) (25) (42) (69) (97) (67) (27) (27) (78) (83) (89) (101) (73) (70) (115) (91) (53) (77) (69) (98) (77) (70) (73) (80) (103) (58) (5) (48) (33) (11) (78) (27) (37) (101) (69) (33) (52) (26) (73) (46) (57) (32) (67) (65) (69) (67) (59) (47) (59) (47) (39) (56) (53) (31) (80) (25) (43) (78) (93) (101) (50) (30) (58) (66) (103) (100) (53) (85) (70) (90) (114) (55) (45) (45) (98) (98) (80) (73) (37) (84) (53) (40) (56) (36) (70) (79) (77) (50) (99) (97) (54) (83) (96) (110) (41) (102) (97) (46) (53) (52) (46) (99) (113) (60) (73) (34) (35) (25) (45) (70) (20) (56) (74) (86) (58) (42) (83) (80) (48) (74) (90) (26) (39) (36) (11) (29) (37) (46) (19) (60) (109) (103) (61) (47) (82) (118) (116) (103) (70))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 14 23) (om-make-point 1266 720) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf)) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 451 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 544 346) (om-make-point 77 30) (list 20 9 2 2) "(20 9 2 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-ORNAMENTER" (quote r-ornamenter) (quote ((om-load-inputfun (quote input-funbox) "music-chordseqs" "MUSIC-CHORDSEQS" nil) (om-load-inputfun (quote input-funbox) "ornaments-chordseqs" "ORNAMENTS-CHORDSEQS" nil) (om-load-inputfun (quote input-funbox) "minmax-ms-length-for-ornamentation" "MINMAX-MS-LENGTH-FOR-ORNAMENTATION" nil) (om-load-inputfun (quote input-funbox) "ornamentation-length-limits-bpf" "ORNAMENTATION-LENGTH-LIMITS-BPFS" nil) (om-load-inputfun (quote input-funbox) "minmax-percent-prob-of-ornament" "MINMAX-PERCENT-PROB-OF-ORNAMENT" nil) (om-load-inputfun (quote input-funbox) "percent-prob-of-ornament-bpf" "PERCENT-PROB-OF-ORNAMENT-BPFS" nil) (om-load-inputfun (quote input-funbox) "minmax-interval-scaling" "MINMAX-INTERVAL-SCALING" nil) (om-load-inputfun (quote input-funbox) "interval-scaling-bpfs" "INTERVAL-SCALING-BPFS" nil))) (om-make-point 202 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-POLY-TO-MULTISEQ 2" (quote r-poly-to-multiseq) (quote ((om-load-inputfun (quote input-funbox) "voices-list" "VOICES-LIST" (list 0)))) (om-make-point 215 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 362 361) (om-make-point 56 30) (list 0.1 0.9) "(.1 .9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB 3" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 557 270) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 6.289308 12.578616 18.867924 25.157233 31.446543 37.735848 44.025158 50.314465 56.60378 62.893086 69.18239 75.471695 81.76101 88.050316 94.33962 100.62893 106.918236 113.20756 119.496865 125.78617 132.07547 138.36478 144.65409 150.94339 157.23271 163.52202 169.81133 176.10063 182.38994 188.67925 194.96855 201.25786 207.54717 213.83647 220.12581 226.41512 232.70442 238.99373 245.28304 251.57234 257.86163 264.15094 270.44025 276.72955 283.01886 289.30817 295.59747 301.88678 308.1761 314.46542 320.75473 327.04404 333.33334 339.62265 345.91196 352.20126 358.49057 364.77988 371.06918 377.3585 383.6478 389.9371 396.2264 402.51572 408.80502 415.09433 421.38364 427.67294 433.96225 440.25162 446.54092 452.83023 459.11954 465.40884 471.69815 477.98746 484.27676 490.56607 496.85538 503.14468 509.434 515.72327 522.0126 528.3019 534.5912 540.8805 547.1698 553.4591 559.7484 566.0377 572.327 578.61634 584.90564 591.19495 597.48426 603.77356 610.06287 616.3522 622.6415 628.93085 635.22016 641.50946 647.79877 654.0881 660.3774 666.6667 672.956 679.2453 685.5346 691.8239 698.1132 704.4025 710.69184 716.98114 723.27045 729.55976 735.84906 742.13837 748.4277 754.717 761.0063 767.2956 773.5849 779.8742 786.1635 792.4528 798.7421 805.03144 811.32074 817.61005 823.89936 830.18866 836.47797 842.7673 849.0566 855.3459 861.6352 867.9245 874.2138 880.50324 886.7925 893.08185 899.3711 905.66047 911.9497 918.2391 924.5283 930.8177 937.10694 943.3963 949.68555 955.9749 962.26416 968.5535 974.8428 981.13215 987.4214 993.71076 1000.0)) (quote (574.0 803.0 318.0 723.0 60.999997 621.0 104.0 833.0 255.0 196.0 477.0 393.0 669.0 426.0 2.0 596.0 598.0 860.0 648.0 435.0 826.0 845.0 744.0 46.0 365.0 297.0 634.0 959.99994 369.0 448.99997 458.0 563.0 309.0 719.0 207.0 687.0 567.0 75.0 708.0 264.0 344.0 821.0 632.0 563.0 576.0 300.0 704.0 872.0 644.0 52.0 81.0 643.0 517.0 742.0 494.0 469.0 36.0 930.0 748.0 187.0 179.0 897.99994 877.0 897.99994 655.0 24.0 589.0 1.0 302.0 299.0 827.0 503.00003 700.0 516.0 468.00003 719.0 485.0 540.0 191.0 333.0 920.99994 64.0 914.0 628.0 713.0 439.0 206.0 373.0 231.00002 275.0 926.0 377.0 364.0 90.0 204.0 878.0 147.0 388.0 294.0 142.0 242.99999 62.0 334.0 973.0 145.0 556.0 502.0 454.0 290.0 32.0 409.0 160.0 380.0 470.00003 914.0 619.0 967.00007 101.0 532.0 171.0 334.0 653.0 802.0 900.0 246.0 837.0 29.000002 18.0 381.0 220.0 296.0 187.0 223.0 99.0 80.0 802.0 383.0 541.0 331.0 763.0 665.0 262.0 760.0 609.0 578.0 178.0 621.0 694.0 398.0 907.0 523.0 126.0 872.0 796.0 788.0 285.0 791.0 52.0 304.0 296.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4.5248866 9.049773 13.57466 18.099547 22.624434 27.14932 31.674208 36.199093 40.723984 45.248867 49.773755 54.29864 58.82353 63.348416 67.8733 72.398186 76.92307 81.44797 85.97285 90.497734 95.02262 99.54751 104.072396 108.59728 113.12216 117.64706 122.171936 126.69683 131.22173 135.7466 140.2715 144.79637 149.32128 153.84615 158.37105 162.89594 167.4208 171.9457 176.47058 180.99547 185.52036 190.04524 194.57013 199.09502 203.6199 208.14479 212.66968 217.19457 221.71945 226.24433 230.76921 235.29412 239.819 244.34387 248.86876 253.39366 257.91855 262.44345 266.96832 271.4932 276.0181 280.543 285.06787 289.59274 294.11765 298.64255 303.16742 307.6923 312.2172 316.7421 321.26697 325.79187 330.31674 334.8416 339.36652 343.8914 348.4163 352.94116 357.46606 361.99094 366.5158 371.0407 375.5656 380.09048 384.61536 389.14026 393.66516 398.19003 402.7149 407.2398 411.7647 416.28958 420.81445 425.33936 429.86426 434.38913 438.91403 443.4389 447.96378 452.48865 457.01358 461.53842 466.06335 470.58823 475.11313 479.638 484.16287 488.68774 493.21268 497.73752 502.26245 506.78732 511.31223 515.8371 520.362 524.8869 529.41175 533.93665 538.46155 542.9864 547.5113 552.0362 556.5611 561.086 565.6108 570.13575 574.66065 579.1855 583.7104 588.2353 592.7602 597.2851 601.8099 606.33484 610.85975 615.3846 619.9095 624.4344 628.9593 633.4842 638.00904 642.53394 647.05884 651.58374 656.1086 660.6335 665.1584 669.6832 674.2081 678.73304 683.25794 687.7828 692.3077 696.8326 701.3575 705.8823 710.4072 714.9321 719.45704 723.9819 728.5068 733.0316 737.5566 742.0814 746.6063 751.1312 755.6561 760.18097 764.7059 769.2307 773.7557 778.2805 782.8054 787.3303 791.8552 796.38007 800.90497 805.4298 809.9548 814.4796 819.0045 823.5294 828.0543 832.57917 837.10407 841.6289 846.1539 850.6787 855.2036 859.7285 864.2534 868.77826 873.30317 877.82807 882.353 886.8778 891.4028 895.92756 900.45246 904.9773 909.5022 914.02717 918.55207 923.07685 927.6018 932.1267 936.6516 941.17646 945.70136 950.22626 954.7511 959.276 963.80097 968.32575 972.85065 977.3755 981.9004 986.42536 990.95026 995.47504 1000.0)) (quote (400.0 142.0 410.0 697.0 28.0 920.0 346.0 47.0 91.0 238.99999 660.0 499.00003 796.0 694.0 460.0 881.99994 597.0 44.0 889.00007 985.0 439.0 322.0 34.0 978.0 438.0 597.0 920.0 485.0 357.0 147.0 788.0 990.0 570.0 780.0 521.0 415.0 811.0 426.0 459.0 132.0 665.0 582.0 382.0 345.0 845.0 160.0 206.0 233.00002 742.0 562.0 275.0 767.0 450.99997 83.0 747.0 712.0 547.0 217.0 442.99997 730.0 772.0 864.0 581.0 261.0 599.0 881.0 498.0 896.0 978.0 87.0 187.0 786.0 450.0 259.0 205.0 130.0 117.00001 724.0 507.00003 501.00003 494.0 285.0 444.0 276.0 8.0 928.00007 831.0 736.0 401.0 913.00007 706.0 403.0 904.0 319.0 450.0 389.0 641.0 908.0 332.0 635.0 287.0 97.0 241.99999 55.0 560.0 210.0 84.0 91.0 674.0 900.0 282.0 975.99994 713.0 793.0 532.0 124.0 900.0 711.0 988.0 879.0 405.0 585.0 612.0 374.0 284.0 27.0 863.0 176.0 415.0 214.0 566.0 755.0 764.0 783.0 469.0 355.0 236.00002 808.0 132.0 827.0 899.0 723.0 637.0 675.0 648.0 372.0 635.0 603.0 477.0 251.0 817.0 680.0 904.0 558.0 41.0 861.0 24.0 881.99994 915.0 804.0 249.0 581.0 858.0 155.0 4.0 612.0 745.0 798.0 904.0 759.0 860.0 545.0 237.99999 52.0 442.0 487.99997 169.0 773.0 502.0 51.0 744.0 448.0 576.0 821.0 504.0 612.0 276.0 144.0 80.0 99.0 391.0 68.0 248.0 686.0 801.0 318.0 689.0 474.00003 135.0 899.0 407.0 104.0 885.99994 994.99994 622.0 255.0 724.0 60.999997 10.0 136.0 168.0 962.0 371.0 194.0 675.0 829.0 543.0 955.99994 322.0 300.0 218.0 932.99994)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.259259 18.518519 27.777777 37.037037 46.296296 55.555554 64.81481 74.07407 83.333336 92.59259 101.85185 111.11111 120.37036 129.62963 138.88889 148.14815 157.40741 166.66667 175.92592 185.18518 194.44443 203.7037 212.96297 222.22222 231.48146 240.74073 250.0 259.25925 268.51852 277.77777 287.03705 296.2963 305.55554 314.81482 324.07407 333.33334 342.5926 351.85184 361.1111 370.37036 379.62964 388.88886 398.14816 407.4074 416.66666 425.92593 435.18518 444.44443 453.70367 462.96292 472.22223 481.48145 490.74075 500.0 509.25925 518.5185 527.7778 537.03705 546.2963 555.55555 564.8148 574.0741 583.3333 592.5926 601.85187 611.1111 620.3703 629.62964 638.8889 648.14814 657.4074 666.6667 675.9259 685.1852 694.44446 703.7037 712.96296 722.2222 731.4815 740.7407 750.0 759.2593 768.5185 777.7777 787.03705 796.2963 805.5555 814.8148 824.0741 833.3333 842.5926 851.85187 861.1111 870.37037 879.62964 888.88886 898.14814 907.40735 916.6667 925.92585 935.1852 944.44446 953.7037 962.9629 972.2223 981.4815 990.7407 1000.0)) (quote (802.0 165.0 321.0 788.0 590.0 674.0 697.0 569.0 588.0 783.0 996.0 577.0 62.0 176.0 770.0 495.0 690.0 512.0 589.0 824.0 738.0 675.0 323.0 227.0 771.0 6.0 588.0 908.0 362.0 170.0 704.0 485.99997 189.0 457.0 462.00003 56.0 798.0 24.0 576.0 751.0 522.0 725.0 992.0 56.0 403.0 875.0 901.99994 599.0 907.0 901.00007 587.0 19.0 746.0 994.00007 645.0 712.0 778.0 607.0 3.0 471.0 721.0 144.0 338.0 304.0 77.0 926.0 118.00001 579.0 644.0 396.0 288.0 418.0 489.0 410.0 757.0 420.0 674.0 229.0 481.99997 784.0 194.0 911.0 190.0 248.0 205.0 181.0 851.0 534.0 745.0 532.0 376.0 25.0 329.0 396.0 940.00007 571.0 759.0 813.0 180.0 548.0 130.0 438.0 47.0 452.0 855.0 567.0 994.00007 198.0 826.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.803922 19.607844 29.411765 39.215687 49.019608 58.82353 68.62745 78.43137 88.23529 98.039215 107.84314 117.64706 127.45098 137.2549 147.05883 156.86275 166.66667 176.47058 186.2745 196.07843 205.88236 215.68628 225.49019 235.29412 245.09804 254.90196 264.70587 274.5098 284.31372 294.11765 303.92157 313.7255 323.52942 333.33334 343.13727 352.94116 362.7451 372.549 382.35294 392.15686 401.9608 411.7647 421.56863 431.37256 441.1765 450.98038 460.7843 470.58823 480.39215 490.19608 500.0 509.80392 519.60785 529.41175 539.2157 549.0196 558.82355 568.62745 578.4314 588.2353 598.03925 607.84314 617.64704 627.451 637.2549 647.05884 656.86274 666.6667 676.4706 686.27454 696.0784 705.8823 715.6863 725.4902 735.2941 745.098 754.902 764.7059 774.50977 784.3137 794.1176 803.9216 813.72547 823.5294 833.3333 843.13727 852.9411 862.7451 872.54895 882.353 892.15686 901.96076 911.7647 921.5686 931.37256 941.17646 950.9804 960.7843 970.58826 980.39216 990.1961 1000.0)) (quote (562.0 311.0 351.0 535.0 204.0 746.0 473.0 91.0 242.99999 648.0 684.0 288.0 759.0 191.0 884.0 83.0 465.0 940.99994 622.0 323.0 413.0 229.0 54.0 401.0 452.0 545.0 803.0 752.0 351.0 678.0 272.0 93.0 539.0 428.0 820.0 492.0 574.0 212.0 837.0 762.0 869.0 380.0 493.0 951.0 777.0 542.0 196.0 857.0 997.0 657.0 318.0 344.0 233.00002 455.0 12.0 207.0 136.0 354.0 53.0 677.0 685.0 928.00007 362.0 516.0 421.0 138.0 66.0 325.0 783.0 279.0 679.0 294.0 278.0 998.99994 114.0 462.00003 867.0 771.0 16.0 38.0 514.0 162.0 27.0 720.0 557.0 813.0 412.0 206.0 958.0 916.0 899.0 994.99994 473.0 440.0 162.0 14.999999 849.0 64.0 237.99999 766.0 967.00007 873.0 392.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 6.451613 12.903226 19.35484 25.806452 32.258065 38.70968 45.16129 51.612904 58.064515 64.51613 70.96774 77.41936 83.870964 90.32258 96.77419 103.22581 109.67742 116.12903 122.58064 129.03226 135.48387 141.93549 148.3871 154.83872 161.29033 167.74193 174.19353 180.64516 187.09677 193.54839 200.0 206.45162 212.90323 219.35485 225.80646 232.25806 238.70966 245.16129 251.61289 258.0645 264.51614 270.96774 277.41934 283.87097 290.32257 296.7742 303.2258 309.67743 316.12903 322.58066 329.03226 335.48386 341.93546 348.38705 354.8387 361.2903 367.74194 374.19354 380.64517 387.09677 393.5484 400.0 406.4516 412.90323 419.35483 425.80646 432.25806 438.7097 445.16132 451.6129 458.0645 464.5161 470.96774 477.4193 483.87094 490.32257 496.7742 503.22577 509.6774 516.129 522.5806 529.0323 535.4838 541.9355 548.3871 554.8387 561.29035 567.74195 574.19355 580.64515 587.0968 593.5484 600.0 606.4516 612.9032 619.35486 625.80646 632.25806 638.70966 645.1613 651.6129 658.0645 664.5161 670.9677 677.4194 683.8709 690.3226 696.7741 703.2258 709.6774 716.129 722.5806 729.0323 735.4839 741.9355 748.3871 754.8387 761.29035 767.74195 774.19355 780.64515 787.0968 793.5484 800.0 806.4516 812.9032 819.3548 825.80646 832.258 838.70966 845.1613 851.6129 858.0645 864.5161 870.9677 877.4194 883.8709 890.32264 896.7742 903.2258 909.6774 916.129 922.58057 929.0322 935.4838 941.9355 948.3871 954.8386 961.29035 967.7419 974.1935 980.64515 987.09687 993.5484 1000.0)) (quote (528.0 479.99997 371.0 953.0 369.0 825.0 619.0 342.0 669.0 969.0 575.0 36.0 400.0 802.0 35.0 794.0 987.00007 130.0 920.99994 548.0 603.0 551.0 686.0 163.0 477.99997 485.0 414.0 593.0 595.0 635.0 380.0 182.0 487.99997 602.0 756.0 314.0 971.99994 446.99997 1000.0 944.00007 45.0 176.0 900.0 75.0 990.99994 205.0 178.0 684.0 907.0 9.0 358.0 919.0 507.00003 772.0 710.0 967.99994 330.0 65.0 683.0 796.0 65.0 699.0 970.0 371.0 751.0 293.0 833.0 149.0 239.99999 329.0 670.0 394.0 930.0 905.99994 521.0 415.0 815.0 873.0 803.0 815.0 479.0 275.0 748.0 57.0 436.0 151.0 859.0 710.0 48.0 146.0 119.99999 687.0 686.0 613.0 439.0 105.0 162.0 596.0 405.0 19.0 408.0 485.99997 721.0 487.99997 990.99994 23.0 922.0 565.0 218.0 183.0 39.0 113.0 186.0 273.0 109.0 384.0 582.0 167.0 213.0 455.0 786.0 912.0 617.0 94.0 155.0 472.00003 775.0 896.0 544.0 336.0 379.0 448.0 343.0 211.0 950.0 819.0 378.0 524.0 177.0 90.0 383.0 280.0 503.00003 932.00007 31.0 303.0 780.0 125.0 268.0 237.00002 57.0 497.00003 98.0 756.0 213.0 186.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 7.6923075 15.384615 23.076924 30.76923 38.461537 46.153847 53.846154 61.53846 69.23076 76.92307 84.61539 92.30769 100.0 107.69231 115.384606 123.07692 130.76923 138.46152 146.15384 153.84615 161.53847 169.23078 176.92308 184.61539 192.30768 200.0 207.6923 215.38462 223.07692 230.76921 238.46152 246.15384 253.84615 261.53845 269.23077 276.92303 284.6154 292.30768 300.0 307.6923 315.3846 323.07694 330.7692 338.46155 346.15384 353.84616 361.53845 369.23077 376.92307 384.61536 392.30768 400.0 407.69232 415.3846 423.07694 430.76923 438.46152 446.15384 453.84613 461.53842 469.23077 476.92303 484.6154 492.30768 500.0 507.6923 515.38465 523.0769 530.7692 538.46155 546.1539 553.84607 561.53846 569.2308 576.9231 584.61536 592.3077 600.0 607.6923 615.3846 623.0769 630.7692 638.4615 646.1539 653.8461 661.5384 669.2308 676.9231 684.6153 692.3077 700.0 707.6923 715.38465 723.0769 730.7692 738.46155 746.1538 753.8461 761.53846 769.2307 776.9231 784.61536 792.3076 800.0 807.6923 815.38465 823.0769 830.7692 838.46155 846.1539 853.8461 861.53846 869.2308 876.92304 884.6153 892.3077 900.0 907.69227 915.38465 923.07685 930.7692 938.46155 946.1538 953.84607 961.53846 969.2308 976.92316 984.61536 992.3076 1000.0)) (quote (289.0 437.0 809.0 401.0 444.99997 742.0 666.0 924.00007 319.0 974.0 117.00001 662.0 770.0 521.0 64.0 435.0 450.0 870.0 282.0 9.0 372.0 307.0 699.0 761.0 569.0 704.0 945.0 781.0 477.99997 471.0 624.0 888.0 280.0 936.00007 39.0 293.0 698.0 512.0 175.0 730.0 372.0 213.0 398.0 32.0 86.0 181.0 28.0 806.0 118.00001 799.0 879.0 591.0 684.0 810.0 176.0 717.0 101.0 440.0 738.0 797.0 535.0 456.0 406.0 703.0 688.0 59.000004 159.0 607.0 603.0 821.0 255.0 988.0 80.0 244.99999 963.00007 348.0 866.0 936.99994 643.0 805.0 742.0 876.0 632.0 5.0 79.0 293.0 983.00007 981.0 456.0 452.0 662.0 114.0 353.0 342.0 717.0 651.0 643.0 352.0 434.0 46.0 322.0 448.0 280.0 897.99994 754.0 222.0 46.0 246.0 469.0 56.0 439.0 253.0 547.0 458.0 6.0 809.0 748.0 777.0 696.0 59.000004 511.00003 398.0 649.0 142.0 703.0 625.0 978.0 356.0 542.0 394.0 111.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4.237288 8.474576 12.7118635 16.949152 21.18644 25.423727 29.661017 33.898304 38.135594 42.37288 46.61017 50.847454 55.084744 59.322033 63.559323 67.79661 72.0339 76.27119 80.50848 84.74576 88.98305 93.22034 97.45762 101.69491 105.932206 110.16949 114.40677 118.644066 122.88135 127.118645 131.35593 135.59322 139.8305 144.0678 148.30509 152.54238 156.77967 161.01696 165.25424 169.49152 173.72882 177.9661 182.20339 186.44068 190.67797 194.91524 199.15254 203.38982 207.62712 211.86441 216.1017 220.33898 224.57628 228.81354 233.05084 237.28813 241.52544 245.7627 250.0 254.23729 258.47458 262.71185 266.94916 271.18643 275.42374 279.661 283.89832 288.1356 292.3729 296.61017 300.84744 305.08475 309.32202 313.55933 317.7966 322.0339 326.27118 330.50848 334.74576 338.98303 343.22034 347.45764 351.69492 355.9322 360.1695 364.40677 368.64407 372.88135 377.11865 381.35593 385.59323 389.83048 394.0678 398.30508 402.54236 406.77963 411.01694 415.25424 419.49152 423.72882 427.9661 432.2034 436.44067 440.67795 444.91525 449.15256 453.38983 457.62708 461.86438 466.10168 470.339 474.57626 478.81357 483.05087 487.28815 491.5254 495.7627 500.0 504.23727 508.47458 512.71186 516.94916 521.18647 525.4237 529.661 533.8983 538.1356 542.37287 546.61017 550.8475 555.0847 559.322 563.5593 567.79664 572.0339 576.2712 580.5084 584.7458 588.98304 593.22034 597.45765 601.6949 605.9322 610.1695 614.4068 618.64405 622.88135 627.11866 631.35596 635.5932 639.8305 644.0678 648.3051 652.54236 656.77967 661.01697 665.2542 669.4915 673.7288 677.96607 682.2033 686.4407 690.678 694.9153 699.1525 703.38984 707.62714 711.8644 716.1017 720.339 724.5763 728.81354 733.05085 737.28815 741.52546 745.7627 750.0 754.2373 758.47455 762.71186 766.94916 771.18647 775.4237 779.66095 783.8983 788.1356 792.37287 796.61017 800.8475 805.0847 809.322 813.55927 817.79664 822.0339 826.2712 830.5085 834.7458 838.98304 843.22034 847.45765 851.6949 855.9322 860.1695 864.4068 868.64405 872.88135 877.1186 881.3559 885.5932 889.8305 894.0678 898.3051 902.5424 906.77967 911.01697 915.25415 919.49146 923.72876 927.96607 932.20337 936.4407 940.678 944.9152 949.1525 953.38984 957.62714 961.8643 966.10175 970.339 974.5763 978.8135 983.0508 987.2881 991.5254 995.7627 1000.0)) (quote (763.0 699.0 242.99999 352.0 780.0 89.0 11.0 244.99999 398.0 116.00001 33.0 873.0 320.0 417.0 119.99999 495.0 402.0 699.0 986.0 998.99994 251.0 185.0 157.0 442.0 146.0 881.0 249.0 533.0 669.0 415.0 491.0 224.0 172.0 472.00003 125.0 224.0 875.0 126.0 661.0 507.00003 475.0 38.0 415.0 762.0 940.99994 163.0 584.0 206.0 863.0 584.0 889.00007 568.0 809.0 959.99994 987.00007 228.0 72.0 835.0 3.0 321.0 137.0 905.99994 905.00007 591.0 71.0 287.0 439.0 357.0 283.0 436.0 966.0 561.0 927.0 243.99999 819.0 351.0 116.00001 786.0 732.0 310.0 83.0 893.99994 347.0 910.0 754.0 128.0 119.99999 901.00007 770.0 20.0 589.0 409.0 454.0 472.00003 393.0 965.0 16.0 580.0 291.0 637.0 727.0 295.0 172.0 24.0 139.0 915.0 718.0 713.0 472.00003 706.0 973.0 604.0 23.0 910.0 904.0 359.0 376.0 341.0 393.0 661.0 376.0 5.0 920.0 162.0 260.0 733.0 308.0 741.0 733.0 426.0 186.0 257.0 437.0 640.0 44.0 916.99994 614.0 813.0 112.0 504.0 461.0 651.0 430.0 396.0 594.0 686.0 974.0 732.0 483.0 272.0 757.0 670.0 717.0 823.0 984.0 89.0 812.0 426.0 413.0 528.0 888.0 182.0 975.99994 524.0 981.0 391.0 419.0 861.0 947.0 332.0 107.0 824.0 22.0 417.0 45.0 79.0 99.0 503.00003 349.0 901.99994 734.0 153.0 260.0 313.0 368.0 590.0 318.0 620.0 793.0 693.0 474.00003 116.00001 802.0 969.0 642.0 673.0 204.0 440.99997 673.0 142.0 475.99997 80.0 384.0 363.0 910.0 930.0 387.0 190.0 573.0 407.0 431.0 218.0 463.0 1.0 3.0 984.0 944.00007 165.0 653.0 953.0 217.0 891.0 88.0 165.0 545.0 207.0 385.0 684.0 332.0 466.00003 647.0 433.0 756.0 690.0 309.0 616.0 619.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 6.944444 13.888888 20.833334 27.777777 34.72222 41.666668 48.611107 55.555554 62.5 69.44444 76.388886 83.333336 90.27778 97.22221 104.166664 111.11111 118.05556 125.0 131.94445 138.88889 145.83333 152.77777 159.72223 166.66667 173.61112 180.55556 187.5 194.44443 201.38887 208.33333 215.27777 222.22222 229.16667 236.11112 243.05558 250.0 256.94446 263.8889 270.83334 277.77777 284.72223 291.66666 298.6111 305.55554 312.5 319.44446 326.3889 333.33334 340.27777 347.22223 354.16666 361.1111 368.05554 375.0 381.94446 388.88886 395.83334 402.77774 409.7222 416.66666 423.61108 430.55554 437.5 444.44443 451.3889 458.33334 465.27777 472.22223 479.1667 486.11115 493.05554 500.0 506.94446 513.8889 520.8333 527.7778 534.7222 541.6667 548.6111 555.55555 562.5 569.44446 576.3889 583.3333 590.2778 597.2222 604.1667 611.1111 618.05555 625.0 631.94446 638.8889 645.8333 652.7778 659.7222 666.6667 673.6111 680.55555 687.5 694.44446 701.3889 708.3333 715.2778 722.2222 729.1667 736.1111 743.05555 750.0 756.94446 763.8889 770.83326 777.7777 784.7222 791.6667 798.611 805.5555 812.49994 819.4444 826.38886 833.3333 840.2778 847.22217 854.1666 861.1111 868.05555 875.0 881.94446 888.88886 895.8333 902.7778 909.7222 916.6667 923.61115 930.55555 937.5 944.44446 951.3889 958.3334 965.2778 972.2223 979.1667 986.1111 993.0556 1000.0)) (quote (674.0 709.0 891.0 483.0 272.0 745.0 267.0 364.0 204.0 324.0 513.0 849.0 415.0 244.99999 773.0 496.0 789.0 909.00007 193.0 431.0 672.0 883.0 905.99994 418.0 899.0 463.0 889.99994 59.999997 320.0 730.0 723.0 565.0 307.0 814.0 371.0 425.0 555.0 347.0 386.0 877.0 431.0 738.0 638.0 414.0 924.00007 237.00002 240.99999 903.0 896.0 2.0 107.0 987.00007 703.0 699.0 237.99999 14.999999 704.0 854.0 54.0 299.0 614.0 107.0 438.0 755.0 608.0 844.0 186.0 168.0 367.0 737.0 691.0 161.0 195.0 538.0 658.0 585.0 604.0 13.0 271.0 524.0 100.0 472.00003 977.0 701.0 187.0 2.0 419.0 421.0 214.0 611.0 723.0 714.0 479.99997 924.99994 950.0 932.99994 533.0 429.0 508.0 841.0 254.0 531.0 777.0 102.0 579.0 963.00007 403.0 885.99994 598.0 792.0 481.99997 425.0 665.0 379.0 685.0 945.0 362.0 704.0 897.99994 734.0 615.0 33.0 565.0 348.0 221.0 295.0 297.0 474.00003 978.0 345.0 489.0 611.0 420.0 5.0 525.0 494.0 713.0 743.0 131.0 722.0 121.99999 318.0 948.00007 583.0 113.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB 2" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 397 248) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 29.999999 40.0 50.0 59.999997 70.0 80.0 90.0 100.0 110.0 119.99999 130.0 140.0 150.0 160.0 170.0 180.0 189.99999 200.0 210.0 220.0 230.0 239.99999 250.0 260.0 269.99997 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 360.0 370.0 379.99997 390.0 400.0 410.0 420.0 430.0 440.0 450.0 460.0 469.99997 479.99997 489.99997 500.0 510.0 520.0 530.0 539.99994 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0 690.0 700.0 710.0 720.0 730.0 740.0 750.0 759.99994 770.0 780.0 790.0 800.0 810.0 820.0 829.99994 840.0 850.0 860.0 870.0 880.0 889.99994 900.0 910.0 920.0 930.0 939.99994 950.0 959.99994 970.0 979.99994 990.0 1000.0)) (quote (470.00003 218.0 511.00003 920.0 219.0 348.0 732.0 641.0 936.00007 538.0 580.0 996.0 221.0 260.0 591.0 920.0 198.0 207.0 146.0 394.0 40.0 278.0 971.99994 641.0 514.0 293.0 954.0 864.0 579.0 578.0 116.00001 592.0 770.0 512.0 629.0 8.0 100.0 811.0 213.0 212.0 192.0 780.0 951.99994 425.0 604.0 475.0 372.0 67.0 508.0 177.0 741.0 726.0 661.0 159.0 60.999997 988.0 22.0 548.0 227.0 448.0 900.0 211.0 505.00003 87.0 717.0 947.0 646.0 221.0 423.0 649.0 265.0 72.0 681.0 134.0 766.0 296.0 487.99997 59.000004 501.00003 315.0 501.00003 448.0 384.0 835.0 327.0 96.0 214.0 228.0 575.0 11.0 321.0 233.00002 862.0 835.0 622.0 818.0 85.0 548.0 257.0 963.00007 431.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 7.6923075 15.384615 23.076924 30.76923 38.461537 46.153847 53.846154 61.53846 69.23076 76.92307 84.61539 92.30769 100.0 107.69231 115.384606 123.07692 130.76923 138.46152 146.15384 153.84615 161.53847 169.23078 176.92308 184.61539 192.30768 200.0 207.6923 215.38462 223.07692 230.76921 238.46152 246.15384 253.84615 261.53845 269.23077 276.92303 284.6154 292.30768 300.0 307.6923 315.3846 323.07694 330.7692 338.46155 346.15384 353.84616 361.53845 369.23077 376.92307 384.61536 392.30768 400.0 407.69232 415.3846 423.07694 430.76923 438.46152 446.15384 453.84613 461.53842 469.23077 476.92303 484.6154 492.30768 500.0 507.6923 515.38465 523.0769 530.7692 538.46155 546.1539 553.84607 561.53846 569.2308 576.9231 584.61536 592.3077 600.0 607.6923 615.3846 623.0769 630.7692 638.4615 646.1539 653.8461 661.5384 669.2308 676.9231 684.6153 692.3077 700.0 707.6923 715.38465 723.0769 730.7692 738.46155 746.1538 753.8461 761.53846 769.2307 776.9231 784.61536 792.3076 800.0 807.6923 815.38465 823.0769 830.7692 838.46155 846.1539 853.8461 861.53846 869.2308 876.92304 884.6153 892.3077 900.0 907.69227 915.38465 923.07685 930.7692 938.46155 946.1538 953.84607 961.53846 969.2308 976.92316 984.61536 992.3076 1000.0)) (quote (926.0 180.0 35.0 188.0 109.0 495.0 844.0 515.0 201.0 608.0 479.99997 596.0 126.0 132.0 430.0 339.0 66.0 534.0 389.0 551.0 477.99997 385.0 79.0 190.0 610.0 716.0 680.0 232.00002 148.0 331.0 574.0 59.000004 923.0 981.0 43.0 510.0 967.00007 757.0 793.0 280.0 118.99999 321.0 562.0 156.0 975.99994 298.0 382.0 231.00002 533.0 121.99999 780.0 405.0 651.0 362.0 342.0 460.0 373.0 589.0 619.0 819.0 600.0 665.0 839.0 727.0 801.0 157.0 282.0 465.0 728.0 721.0 297.0 424.0 869.0 688.0 883.0 393.0 799.0 889.99994 69.0 88.0 268.0 208.0 967.00007 931.0 237.99999 255.0 649.0 138.0 200.0 792.0 789.0 842.0 513.0 577.0 543.0 189.0 249.0 396.0 368.0 96.0 271.0 300.0 979.00007 748.0 345.0 729.0 581.0 958.0 597.0 466.00003 511.00003 146.0 768.0 607.0 440.99997 535.0 415.0 269.0 347.0 764.0 678.0 833.0 181.0 349.0 955.0 402.0 616.0 32.0 611.0 974.0 756.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 8.620689 17.241379 25.862069 34.482758 43.103447 51.724137 60.34483 68.965515 77.586205 86.206894 94.82758 103.44827 112.06896 120.68966 129.31035 137.93103 146.55173 155.17241 163.7931 172.41379 181.03449 189.65517 198.27587 206.89655 215.51723 224.13793 232.75862 241.37932 250.0 258.6207 267.2414 275.86206 284.48276 293.10345 301.72415 310.34482 318.9655 327.5862 336.2069 344.82758 353.44824 362.06897 370.68967 379.31033 387.93103 396.55173 405.17242 413.7931 422.4138 431.03445 439.65518 448.27585 456.89655 465.51724 474.1379 482.75864 491.37927 500.0 508.6207 517.2414 525.86207 534.4828 543.10346 551.7241 560.34485 568.9655 577.5862 586.2069 594.8275 603.4483 612.069 620.68964 629.3103 637.931 646.5517 655.1724 663.7931 672.4138 681.0345 689.65516 698.2759 706.8965 715.5172 724.13794 732.7586 741.37934 750.0 758.62067 767.2414 775.86207 784.4828 793.10346 801.7241 810.34485 818.9655 827.5862 836.2069 844.8276 853.4483 862.0689 870.68964 879.31037 887.931 896.5517 905.1724 913.7931 922.4139 931.0345 939.65516 948.2758 956.8965 965.5173 974.1379 982.75855 991.37934 1000.0)) (quote (485.99997 535.0 599.0 414.0 975.99994 931.0 729.0 773.0 670.0 275.0 485.0 321.0 827.0 979.00007 22.0 219.0 889.00007 945.0 162.0 639.0 6.0 699.0 209.0 114.0 192.0 935.0 519.0 320.0 659.0 667.0 87.0 624.0 741.0 996.0 467.0 594.0 943.0 821.0 754.0 303.0 571.0 509.00003 402.0 41.0 889.00007 748.0 463.0 146.0 694.0 492.0 710.0 627.0 998.00007 200.0 467.0 275.0 951.99994 237.99999 927.0 873.0 549.0 884.0 330.0 846.0 994.00007 80.0 868.0 867.0 127.0 682.0 34.0 996.0 654.0 348.0 990.99994 696.0 409.0 581.0 467.0 242.99999 757.0 604.0 889.00007 573.0 971.00007 311.0 944.00007 346.0 547.0 819.0 809.0 948.00007 793.0 695.0 566.0 162.0 107.0 389.0 942.0 514.0 401.0 971.00007 936.99994 248.0 313.0 873.0 570.0 170.0 778.0 218.0 655.0 142.0 745.0 38.0 854.0 676.0 382.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4.2194095 8.438819 12.658228 16.877638 21.097046 25.316456 29.535866 33.755276 37.97468 42.19409 46.413498 50.63291 54.85232 59.07173 63.291138 67.51055 71.72996 75.94936 80.16877 84.38818 88.6076 92.826996 97.04642 101.26582 105.48522 109.70464 113.92405 118.14346 122.36287 126.582276 130.80168 135.0211 139.24051 143.45992 147.67932 151.89873 156.11815 160.33754 164.55696 168.77637 172.99578 177.2152 181.4346 185.65399 189.87342 194.09284 198.31224 202.53165 206.75106 210.97045 215.18988 219.40929 223.62871 227.8481 232.0675 236.28693 240.50632 244.72574 248.94513 253.16455 257.38397 261.60336 265.82278 270.0422 274.26157 278.48102 282.7004 286.91983 291.13925 295.35864 299.57806 303.79746 308.01688 312.2363 316.4557 320.67508 324.89447 329.11392 333.33334 337.55273 341.77216 345.99155 350.21097 354.4304 358.64978 362.8692 367.0886 371.30798 375.52744 379.74683 383.96625 388.18567 392.40506 396.62448 400.84387 405.0633 409.2827 413.5021 417.7215 421.9409 426.16034 430.37976 434.59915 438.81857 443.03793 447.25742 451.47684 455.6962 459.91562 464.135 468.35443 472.57385 476.7932 481.01263 485.23206 489.45148 493.6709 497.89026 502.10974 506.3291 510.54852 514.76795 518.98737 523.2067 527.42615 531.64557 535.865 540.0844 544.3038 548.52314 552.7426 556.96204 561.18146 565.4008 569.62024 573.83967 578.0591 582.2785 586.49787 590.7173 594.9367 599.1561 603.37555 607.5949 611.81434 616.03376 620.2532 624.4726 628.69196 632.9114 637.1308 641.35016 645.56965 649.78894 654.0084 658.22785 662.44727 666.6667 670.88605 675.10547 679.3249 683.5443 687.76374 691.9831 696.2025 700.42194 704.64136 708.8608 713.08014 717.29957 721.519 725.7384 729.95777 734.1772 738.3966 742.61597 746.83545 751.0549 755.2743 759.49366 763.7131 767.9325 772.1519 776.37134 780.5907 784.8101 789.02955 793.24897 797.4684 801.68775 805.90717 810.1266 814.346 818.5654 822.7848 827.0042 831.2236 835.443 839.6625 843.8818 848.10126 852.3207 856.5401 860.7595 864.9789 869.1983 873.4177 877.63715 881.8565 886.07587 890.29535 894.51484 898.7342 902.9537 907.17304 911.3924 915.6118 919.83124 924.05066 928.27 932.4894 936.70887 940.9282 945.1477 949.36707 953.5864 957.8059 962.02527 966.24476 970.4641 974.6835 978.90296 983.1223 987.3418 991.56116 995.7805 1000.0)) (quote (769.0 513.0 187.0 256.0 808.0 641.0 440.0 4.0 932.00007 259.0 661.0 863.0 623.0 936.99994 716.0 42.0 897.99994 899.0 348.0 927.0 426.0 3.0 693.0 712.0 216.0 91.0 432.0 974.0 946.0 232.00002 56.0 855.0 779.0 125.0 251.0 564.0 808.0 116.00001 370.0 191.0 504.0 661.0 799.0 353.0 173.0 470.00003 287.0 871.0 233.00002 176.0 11.0 156.0 908.0 438.0 623.0 291.0 670.0 865.0 729.0 448.0 556.0 374.0 121.99999 119.99999 679.0 18.0 975.99994 467.0 185.0 329.0 125.0 489.0 881.99994 295.0 582.0 268.0 487.99997 334.0 507.00003 761.0 296.0 702.0 751.0 145.0 788.0 977.0 899.0 161.0 627.0 897.00007 274.0 659.0 699.0 316.0 350.0 900.0 450.99997 292.0 799.0 315.0 621.0 735.0 351.0 830.0 70.0 907.0 410.0 225.0 599.0 189.0 831.0 491.0 625.0 79.0 214.0 430.0 796.0 470.00003 936.00007 469.0 625.0 265.0 500.0 307.0 217.0 840.0 68.0 365.0 846.0 678.0 713.0 290.0 53.0 949.0 144.0 684.0 830.0 359.0 217.0 129.0 368.0 454.0 452.99997 521.0 897.00007 516.0 363.0 533.0 189.0 967.99994 816.0 137.0 475.99997 27.0 268.0 145.0 299.0 331.0 754.0 736.0 126.0 800.0 728.0 915.0 284.0 301.0 503.00003 975.99994 87.0 793.0 686.0 659.0 260.0 642.0 762.0 741.0 885.00007 575.0 362.0 138.0 399.0 118.00001 581.0 804.0 870.0 375.0 325.0 590.0 803.0 544.0 162.0 804.0 367.0 815.0 384.0 714.0 452.0 640.0 994.99994 758.0 938.0 252.0 327.0 724.0 291.0 75.0 279.0 254.0 643.0 828.0 889.00007 133.0 297.0 255.0 930.0 524.0 900.0 298.0 355.0 753.0 500.0 327.0 845.0 87.0 295.0 343.0 984.0 290.0 194.0 377.0 496.0 217.0 189.0 384.0 532.0 773.0 193.0 733.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 5.1813474 10.362695 15.544042 20.72539 25.906737 31.088084 36.26943 41.45078 46.632126 51.813473 56.994816 62.176167 67.35751 72.53886 77.72021 82.90156 88.0829 93.26425 98.44559 103.626946 108.80829 113.98963 119.170975 124.35233 129.53368 134.71503 139.89638 145.07772 150.25907 155.44042 160.62177 165.80312 170.98445 176.1658 181.34716 186.5285 191.70984 196.89118 202.07254 207.25389 212.43523 217.61658 222.79792 227.97927 233.16063 238.34195 243.52332 248.70467 253.88602 259.06735 264.2487 269.43005 274.6114 279.79276 284.9741 290.15543 295.3368 300.51813 305.6995 310.88083 316.06216 321.24353 326.42487 331.60623 336.78757 341.9689 347.15027 352.3316 357.51294 362.6943 367.87564 373.057 378.23834 383.41968 388.60104 393.78235 398.96375 404.14508 409.3264 414.50778 419.68912 424.87045 430.05182 435.23315 440.4145 445.59583 450.77716 455.95853 461.13986 466.32126 471.5026 476.6839 481.8653 487.04663 492.22794 497.40933 502.59067 507.77203 512.95337 518.1347 523.31604 528.4974 533.6788 538.8601 544.04145 549.2228 554.4042 559.5855 564.76685 569.9482 575.1295 580.31086 585.49225 590.6736 595.8549 601.03626 606.2176 611.399 616.5803 621.76166 626.94294 632.1243 637.3057 642.48707 647.6684 652.84974 658.03107 663.21247 668.3938 673.57514 678.7565 683.9378 689.11915 694.30054 699.4819 704.6632 709.84455 715.0259 720.2072 725.3886 730.56995 735.7513 740.9326 746.114 751.29535 756.4767 761.658 766.83936 772.02076 777.2021 782.3834 787.5647 792.7461 797.9275 803.1088 808.29017 813.4715 818.6528 823.83417 829.01557 834.1969 839.37824 844.5596 849.7409 854.9223 860.10364 865.285 870.4663 875.64765 880.829 886.0103 891.19165 896.373 901.5543 906.7358 911.91706 917.0984 922.2797 927.46106 932.6425 937.82386 943.0052 948.18647 953.3678 958.54914 963.7306 968.9119 974.09327 979.27454 984.4559 989.6373 994.81867 1000.0)) (quote (751.0 274.0 981.0 945.0 555.0 43.0 847.0 648.0 812.0 109.0 727.0 697.0 742.0 191.0 371.0 253.0 512.0 799.0 68.0 613.0 63.0 268.0 11.0 4.0 916.99994 808.0 190.0 45.0 698.0 101.0 577.0 693.0 8.0 382.0 51.0 494.0 691.0 55.0 455.0 957.0 93.0 411.0 596.0 353.0 820.0 746.0 858.0 491.0 354.0 574.0 577.0 828.0 294.0 309.0 442.99997 640.0 362.0 996.0 406.0 91.0 901.99994 102.0 768.0 560.0 495.0 650.0 452.0 10.0 474.00003 468.00003 360.0 152.0 642.0 547.0 891.0 920.0 678.0 805.0 914.0 169.0 185.0 450.99997 146.0 2.0 679.0 818.0 926.0 877.0 701.0 946.0 58.000004 529.0 923.0 316.0 603.0 410.0 142.0 601.0 96.0 781.0 19.0 404.0 523.0 116.00001 385.0 974.0 654.0 345.0 260.0 565.0 237.99999 53.0 351.0 149.0 788.0 24.0 440.99997 520.0 905.00007 792.0 410.0 106.0 254.0 487.0 120.99999 32.0 115.0 932.00007 221.0 931.0 380.0 422.0 836.0 407.0 596.0 802.0 295.0 147.0 59.999997 258.0 444.99997 138.0 850.0 355.0 164.0 140.0 409.0 437.0 993.0 883.0 73.0 179.0 26.0 518.0 440.99997 597.0 287.0 69.0 186.0 626.0 801.0 763.0 876.0 367.0 376.0 260.0 63.0 671.0 928.00007 791.0 878.0 512.0 787.0 222.0 589.0 132.0 129.0 285.0 718.0 319.0 184.0 117.00001 847.0 88.0 500.0 297.0 202.0 140.0 856.0 222.0 323.0 74.0 208.0 493.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 3.4129694 6.8259387 10.238908 13.651877 17.064846 20.477816 23.890786 27.303755 30.716723 34.129692 37.542664 40.95563 44.3686 47.78157 51.19454 54.60751 58.020478 61.433445 64.84641 68.259384 71.672356 75.08533 78.49828 81.91126 85.324234 88.7372 92.15017 95.56314 98.97611 102.38908 105.80205 109.21502 112.62798 116.040955 119.45392 122.86689 126.27986 129.69283 133.1058 136.51877 139.93175 143.34471 146.75768 150.17066 153.58362 156.99657 160.40956 163.82253 167.23549 170.64847 174.06143 177.4744 180.88738 184.30034 187.7133 191.12628 194.53925 197.95223 201.36518 204.77816 208.19113 211.6041 215.01706 218.43004 221.843 225.25597 228.66895 232.08191 235.49486 238.90784 242.3208 245.73378 249.14675 252.55973 255.97272 259.38565 262.79865 266.2116 269.62457 273.03754 276.4505 279.8635 283.27646 286.68942 290.1024 293.51535 296.9283 300.3413 303.75427 307.16724 310.5802 313.99313 317.40616 320.81912 324.2321 327.64505 331.058 334.47098 337.88394 341.29694 344.7099 348.12286 351.5358 354.9488 358.3618 361.77475 365.1877 368.60068 372.01364 375.4266 378.8396 382.25256 385.66553 389.0785 392.49146 395.90445 399.3174 402.73035 406.14334 409.5563 412.96927 416.38226 419.79523 423.2082 426.62116 430.03412 433.4471 436.86008 440.27304 443.686 447.09897 450.51193 453.92493 457.3379 460.75085 464.16382 467.57675 470.98972 474.40274 477.81567 481.22864 484.6416 488.05463 491.46756 494.88052 498.2935 501.70648 505.11945 508.5324 511.94543 515.35834 518.7713 522.18427 525.5973 529.01026 532.4232 535.8362 539.24915 542.6621 546.0751 549.48804 552.901 556.31397 559.727 563.13996 566.5529 569.9659 573.37885 576.7918 580.2048 583.61774 587.0307 590.44367 593.8566 597.26966 600.6826 604.0956 607.50855 610.9215 614.3345 617.74744 621.1604 624.57337 627.98627 631.3993 634.8123 638.2253 641.63825 645.0512 648.4642 651.8771 655.2901 658.70307 662.116 665.529 668.94196 672.3549 675.7679 679.1809 682.5939 686.00684 689.4198 692.83277 696.2457 699.6587 703.0716 706.4846 709.8976 713.3106 716.7236 720.13654 723.5495 726.9624 730.3754 733.7884 737.20136 740.6143 744.0273 747.44025 750.8532 754.26624 757.6792 761.09217 764.5051 767.9181 771.33106 774.744 778.157 781.5699 784.9829 788.3959 791.8089 795.22187 798.6348 802.0478 805.4607 808.8737 812.2867 815.69965 819.1126 822.5256 825.93854 829.3515 832.7645 836.1775 839.59046 843.0034 846.4164 849.82935 853.2423 856.6552 860.06824 863.4812 866.8942 870.3072 873.72016 877.1331 880.5461 883.959 887.372 890.7849 894.19794 897.61097 901.02387 904.4368 907.84986 911.26276 914.6758 918.0887 921.5017 924.91474 928.32764 931.7406 935.1535 938.5665 941.97944 945.3926 948.8055 952.21845 955.63135 959.0444 962.4573 965.8703 969.2832 972.6962 976.10926 979.52216 982.9351 986.34815 989.76105 993.1741 996.587 1000.0)) (quote (314.0 282.0 71.0 944.00007 654.0 269.0 51.0 154.0 311.0 66.0 548.0 25.0 114.0 17.0 95.0 799.0 785.0 924.99994 408.0 949.0 232.00002 328.0 368.0 681.0 14.999999 331.0 364.0 324.0 554.0 842.0 389.0 823.0 210.0 770.0 614.0 604.0 146.0 380.0 516.0 103.0 466.00003 883.0 795.0 320.0 828.0 665.0 883.0 513.0 544.0 586.0 4.0 986.0 407.0 881.99994 136.0 492.0 198.0 915.0 615.0 773.0 431.0 27.0 414.0 532.0 788.0 177.0 792.0 845.0 117.00001 38.0 297.0 826.0 994.00007 953.0 575.0 735.0 249.0 174.0 865.0 887.0 278.0 296.0 684.0 630.0 416.0 594.0 99.0 557.0 148.0 753.0 348.0 497.00003 554.0 400.0 291.0 233.00002 104.0 252.0 562.0 271.0 56.0 377.0 430.0 864.0 300.0 26.0 36.0 655.0 87.0 949.0 112.0 62.0 367.0 119.99999 928.00007 939.0 171.0 180.0 20.0 281.0 401.0 764.0 388.0 452.0 674.0 255.0 214.0 252.0 601.0 771.0 261.0 261.0 813.0 998.99994 698.0 663.0 804.0 915.0 712.0 765.0 279.0 935.0 429.0 153.0 111.0 241.99999 363.0 431.0 904.0 446.99997 356.0 210.0 690.0 889.99994 675.0 189.0 428.0 561.0 320.0 830.0 951.0 366.0 209.0 227.0 46.0 849.0 878.0 231.00002 527.0 301.0 602.0 83.0 825.0 994.99994 611.0 452.99997 635.0 126.0 220.0 40.0 132.0 572.0 788.0 78.0 627.0 470.00003 397.0 44.0 546.0 897.99994 392.0 440.99997 12.0 724.0 362.0 759.0 423.0 120.99999 922.0 877.0 489.0 8.0 944.00007 936.99994 285.0 998.00007 125.0 874.0 144.0 944.00007 830.0 106.0 217.0 579.0 391.0 378.0 932.99994 947.0 162.0 271.0 356.0 510.0 403.0 790.0 967.99994 26.0 761.0 279.0 608.0 578.0 508.0 628.0 163.0 870.0 596.0 146.0 366.0 827.0 362.0 760.0 343.0 564.0 174.0 253.0 901.99994 844.0 159.0 691.0 746.0 877.0 59.000004 86.0 857.0 384.0 116.00001 529.0 170.0 532.0 789.0 721.0 951.99994 235.00002 904.0 286.0 393.0 638.0 828.0 479.99997 592.0 895.0 981.0 49.0 38.0 688.0 442.0 366.0 144.0 263.0 496.0 196.0 650.0 425.0 328.0 887.0 743.0 889.00007 807.0 620.0 233.00002 331.0 203.0 776.0 256.0 740.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 5.235602 10.471204 15.706807 20.942408 26.17801 31.413615 36.649216 41.884816 47.12042 52.35602 57.59162 62.82723 68.06283 73.29843 78.534035 83.76963 89.00523 94.24084 99.47644 104.71204 109.94765 115.18324 120.418846 125.65446 130.89005 136.12566 141.36124 146.59687 151.83246 157.06807 162.30367 167.53926 172.77486 178.01047 183.24608 188.48168 193.71727 198.95288 204.18848 209.42409 214.65969 219.8953 225.13089 230.36649 235.6021 240.83769 246.07329 251.30892 256.5445 261.7801 267.01572 272.2513 277.4869 282.72247 287.95813 293.19373 298.42932 303.66492 308.9005 314.13614 319.37173 324.60733 329.84293 335.07852 340.31415 345.5497 350.78534 356.02094 361.25653 366.49216 371.72775 376.96335 382.1989 387.43454 392.67017 397.90576 403.14136 408.37695 413.61258 418.84818 424.08377 429.31937 434.55496 439.7906 445.02618 450.26178 455.49738 460.73297 465.96863 471.2042 476.4398 481.67538 486.91098 492.14658 497.38223 502.61783 507.8534 513.089 518.3246 523.5602 528.79584 534.03144 539.267 544.5026 549.7382 554.9738 560.2094 565.44495 570.6806 575.91626 581.15186 586.38746 591.62305 596.85865 602.09424 607.32984 612.5654 617.801 623.0366 628.2723 633.5079 638.74347 643.97907 649.21467 654.45026 659.68586 664.92145 670.15705 675.3927 680.6283 685.8639 691.0994 696.3351 701.5707 706.8063 712.0419 717.27747 722.51307 727.7487 732.9843 738.2199 743.4555 748.6911 753.9267 759.16224 764.3978 769.6335 774.8691 780.10474 785.34034 790.5759 795.8115 801.0471 806.2827 811.5183 816.7539 821.9895 827.22516 832.46076 837.69635 842.93195 848.16755 853.40314 858.63874 863.8743 869.1099 874.3455 879.5812 884.8167 890.05237 895.2879 900.52356 905.7591 910.99476 916.2303 921.46595 926.7016 931.93726 937.1728 942.4084 947.644 952.8796 958.1151 963.35077 968.5863 973.82196 979.0576 984.29316 989.5288 994.76447 1000.0)) (quote (392.0 602.0 862.0 52.0 267.0 345.0 780.0 186.0 299.0 526.0 842.0 772.0 743.0 483.99997 4.0 335.0 790.0 765.0 118.99999 924.00007 727.0 849.0 0.0 35.0 352.0 499.00003 880.0 104.0 294.0 674.0 524.0 348.0 922.0 529.0 213.0 108.0 986.0 625.0 831.0 986.0 414.0 901.99994 609.0 971.00007 949.0 889.00007 842.0 971.99994 89.0 568.0 665.0 69.0 930.0 621.0 97.0 881.0 748.0 265.0 733.0 330.0 404.0 374.0 642.0 297.0 743.0 380.0 713.0 790.0 250.0 534.0 761.0 854.0 44.0 588.0 153.0 135.0 979.00007 132.0 232.00002 604.0 502.0 194.0 982.0 77.0 897.99994 990.0 576.0 629.0 951.0 178.0 775.0 232.00002 364.0 103.0 625.0 946.0 554.0 123.0 83.0 867.0 331.0 203.0 693.0 427.0 859.0 408.0 364.0 876.0 444.0 456.0 376.0 573.0 911.0 462.00003 994.00007 95.0 745.0 279.0 45.0 291.0 836.0 230.0 474.00003 865.0 321.0 546.0 471.0 804.0 561.0 857.0 854.0 576.0 688.0 337.0 74.0 462.00003 801.0 428.0 350.0 91.0 855.0 674.0 240.99999 371.0 4.0 63.0 586.0 424.0 528.0 416.0 715.0 684.0 297.0 77.0 264.0 248.0 29.000002 501.00003 678.0 208.0 149.0 225.0 535.0 310.0 407.0 814.0 281.0 824.0 56.0 681.0 526.0 807.0 461.0 5.0 877.0 527.0 551.0 485.99997 927.0 932.99994 329.0 481.0 769.0 5.0 78.0 468.00003 355.0 744.0 244.99999 100.0 624.0 483.99997)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 3.3783784 6.756757 10.135134 13.513514 16.891892 20.270268 23.64865 27.027028 30.405405 33.783783 37.162163 40.540535 43.91892 47.2973 50.675675 54.054055 57.432434 60.81081 64.189186 67.567566 70.945946 74.324326 77.702706 81.08107 84.45946 87.83784 91.21622 94.5946 97.97298 101.35135 104.72973 108.10811 111.48649 114.86487 118.24323 121.62162 125.0 128.37837 131.75676 135.13513 138.51352 141.89189 145.27027 148.64865 152.02703 155.40541 158.78379 162.16214 165.54055 168.91892 172.2973 175.67568 179.05403 182.43244 185.8108 189.1892 192.56757 195.94596 199.32433 202.7027 206.08109 209.45946 212.83785 216.21622 219.59459 222.97298 226.35135 229.72974 233.10813 236.48647 239.86486 243.24324 246.62162 250.0 253.37837 256.75674 260.13513 263.51352 266.8919 270.27026 273.64862 277.02704 280.4054 283.78378 287.16217 290.54053 293.9189 297.2973 300.6757 304.05405 307.4324 310.81082 314.18918 317.56757 320.94595 324.32428 327.7027 331.0811 334.45947 337.83783 341.21622 344.5946 347.97296 351.35135 354.72974 358.10806 361.48648 364.86487 368.24326 371.6216 375.0 378.3784 381.75674 385.13513 388.5135 391.8919 395.27026 398.64865 402.02704 405.4054 408.78378 412.16217 415.54053 418.9189 422.29727 425.6757 429.05405 432.43243 435.81082 439.18918 442.56754 445.94595 449.3243 452.7027 456.08105 459.45947 462.83783 466.21625 469.5946 472.97293 476.35135 479.7297 483.10806 486.48648 489.86487 493.24323 496.62158 500.0 503.3784 506.75674 510.1351 513.5135 516.8919 520.27027 523.6486 527.02704 530.4054 533.7838 537.1622 540.5405 543.91895 547.29725 550.67566 554.0541 557.43244 560.8108 564.1892 567.56757 570.9459 574.32435 577.7027 581.08106 584.4595 587.8378 591.2162 594.5946 597.97297 601.3514 604.72974 608.1081 611.48645 614.8648 618.2432 621.62165 625.0 628.37836 631.7568 635.13514 638.5135 641.8919 645.27027 648.64856 652.02704 655.4054 658.7838 662.1622 665.5405 668.91895 672.2973 675.67566 679.054 682.43244 685.8108 689.1892 692.56757 695.9459 699.32435 702.7027 706.08106 709.4595 712.83777 716.2161 719.5946 722.97297 726.3514 729.72974 733.1081 736.4865 739.86487 743.2432 746.62165 750.0 753.37836 756.7568 760.13514 763.5135 766.8919 770.27027 773.6486 777.027 780.40534 783.7838 787.1622 790.5405 793.91895 797.2973 800.67566 804.0541 807.43244 810.8108 814.1892 817.56757 820.9459 824.32435 827.7027 831.08106 834.4595 837.8378 841.2162 844.59455 847.9729 851.3514 854.72974 858.1081 861.4865 864.86487 868.2432 871.62165 875.0 878.37836 881.7568 885.1351 888.5135 891.8919 895.2702 898.6486 902.02704 905.4054 908.7838 912.1621 915.5405 918.91895 922.29725 925.67566 929.0541 932.4325 935.8108 939.1892 942.56757 945.94587 949.3243 952.7027 956.081 959.4594 962.8378 966.2161 969.5946 972.97297 976.3513 979.72974 983.10804 986.48645 989.86487 993.24317 996.6217 1000.0)) (quote (29.999999 617.0 18.0 492.0 246.0 247.0 889.00007 614.0 71.0 350.0 460.0 745.0 553.0 452.0 302.0 155.0 89.0 961.0 773.0 746.0 778.0 832.0 633.0 613.0 509.00003 328.0 899.0 417.0 885.99994 69.0 27.0 109.0 233.00002 624.0 563.0 558.0 686.0 186.0 63.0 575.0 887.0 705.0 74.0 616.0 958.0 996.0 48.0 334.0 40.0 642.0 662.0 986.0 693.0 511.00003 139.0 850.0 642.0 412.0 804.0 932.99994 432.0 34.0 646.0 594.0 522.0 176.0 168.0 767.0 655.0 561.0 423.0 358.0 414.0 765.0 763.0 881.99994 501.00003 109.0 716.0 327.0 310.0 220.0 818.0 501.00003 60.999997 755.0 827.0 503.00003 96.0 726.0 452.0 841.0 624.0 355.0 243.99999 475.99997 196.0 736.0 839.0 854.0 157.0 407.0 725.0 951.99994 238.99999 160.0 551.0 572.0 251.0 33.0 144.0 866.0 887.0 742.0 272.0 658.0 0.0 195.0 998.00007 730.0 904.0 605.0 508.0 718.0 187.0 82.0 723.0 3.0 280.0 432.0 430.0 360.0 106.0 829.0 175.0 464.00003 916.99994 130.0 76.0 112.0 21.0 500.0 826.0 987.00007 414.0 706.0 341.0 542.0 684.0 198.0 199.0 14.999999 628.0 283.0 875.0 513.0 911.0 483.99997 703.0 76.0 681.0 5.0 721.0 412.0 1.0 691.0 873.0 155.0 335.0 356.0 900.0 879.0 195.0 928.99994 276.0 590.0 148.0 592.0 700.0 993.0 206.0 706.0 356.0 112.0 435.0 438.0 518.0 187.0 223.0 694.0 71.0 465.0 432.0 369.0 257.0 52.0 111.0 262.0 3.0 854.0 290.0 599.0 33.0 762.0 262.0 729.0 97.0 75.0 312.0 29.999999 97.0 707.0 754.0 505.00003 145.0 437.0 89.0 669.0 411.0 159.0 492.0 516.0 546.0 3.0 498.0 912.0 314.0 190.0 4.0 687.0 223.0 261.0 87.0 89.0 270.0 459.0 861.0 615.0 229.0 527.0 186.0 598.0 382.0 185.0 587.0 10.0 793.0 867.0 526.0 366.0 301.0 266.0 47.0 434.0 909.00007 43.0 479.99997 31.0 78.0 947.0 712.0 304.0 196.0 574.0 695.0 446.0 939.0 91.0 513.0 587.0 313.0 194.0 777.0 818.0 115.0 563.0 979.99994 912.0 899.0 391.0 345.0 268.0 951.0 756.0 885.00007 457.0 18.0 141.0 716.0 755.0 309.0 485.0 816.0 840.0 738.0 374.0 199.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 545 110) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 481 104) (om-make-point 69 30) (list 99 300) "(99 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 426 111) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 318 335) (om-make-point 62 30) (list 70 99) "(70 99)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 258 309) (om-make-point 84 30) (list 50 5500) "(50 5500 ) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 490 270) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 8.695652 17.391304 26.086956 34.782608 43.47826 52.173912 60.86956 69.565216 78.26087 86.95652 95.652176 104.347824 113.04348 121.73912 130.43479 139.13043 147.82608 156.52175 165.21738 173.91304 182.60869 191.30435 200.0 208.69565 217.39131 226.08696 234.78261 243.47824 252.1739 260.86957 269.56522 278.26086 286.9565 295.65216 304.34784 313.0435 321.73914 330.43475 339.13043 347.82608 356.5217 365.21738 373.91306 382.6087 391.30435 400.0 408.69565 417.3913 426.08694 434.78262 443.47827 452.17392 460.86954 469.56522 478.26086 486.95648 495.65216 504.3478 513.04346 521.73914 530.43476 539.13044 547.8261 556.5217 565.2174 573.913 582.6087 591.3043 600.0 608.6957 617.3913 626.087 634.7826 643.4783 652.1739 660.8695 669.56525 678.26087 686.95655 695.65217 704.34784 713.0434 721.73914 730.43476 739.13044 747.8261 756.5217 765.2174 773.913 782.6087 791.3043 800.0 808.6957 817.3913 826.0869 834.7826 843.4783 852.1739 860.86957 869.56525 878.2608 886.95655 895.6522 904.34784 913.04346 921.7391 930.43476 939.13044 947.8261 956.5217 965.21735 973.91297 982.6087 991.3043 1000.0)) (quote (412.0 928.00007 485.99997 242.99999 336.0 305.0 822.0 455.0 384.0 272.0 587.0 175.0 790.0 435.0 830.0 548.0 605.0 496.0 316.0 401.0 705.0 141.0 588.0 296.0 626.0 577.0 666.0 434.0 582.0 305.0 351.0 888.0 468.00003 901.99994 170.0 263.0 348.0 106.0 677.0 407.0 382.0 500.0 252.0 412.0 232.00002 79.0 524.0 544.0 990.0 347.0 205.0 88.0 402.0 111.0 299.0 395.0 745.0 413.0 957.0 10.0 928.00007 131.0 791.0 11.0 444.0 427.0 201.0 24.0 909.00007 429.0 148.0 843.0 663.0 963.99994 150.0 901.00007 699.0 595.0 378.0 679.0 436.0 390.0 592.0 590.0 481.99997 678.0 837.0 703.0 597.0 464.00003 372.0 14.0 105.0 555.0 582.0 520.0 215.0 562.0 132.0 135.0 475.99997 922.0 25.0 783.0 953.0 37.0 992.0 951.0 334.0 589.0 446.99997 367.0 420.0 740.0 299.0 594.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4.1152263 8.230453 12.345679 16.460906 20.576132 24.691359 28.806586 32.92181 37.037037 41.152264 45.26749 49.382718 53.497944 57.61317 61.72839 65.84362 69.95885 74.07407 78.1893 82.30453 86.419754 90.53498 94.65021 98.765435 102.88066 106.99589 111.11111 115.22634 119.34155 123.45678 127.572014 131.68724 135.80246 139.9177 144.03293 148.14815 152.26338 156.3786 160.49382 164.60906 168.72428 172.83951 176.95473 181.06996 185.18518 189.30042 193.41564 197.53087 201.64608 205.76132 209.87654 213.99178 218.107 222.22222 226.33744 230.45269 234.56789 238.6831 242.79836 246.91356 251.02881 255.14403 259.25925 263.37448 267.48972 271.60492 275.72015 279.8354 283.9506 288.06586 292.18106 296.2963 300.41153 304.52676 308.64197 312.7572 316.87244 320.98764 325.10288 329.2181 333.33334 337.44855 341.56378 345.67902 349.79425 353.90945 358.0247 362.13992 366.25516 370.37036 374.4856 378.60083 382.71606 386.83127 390.9465 395.06174 399.17694 403.29215 407.4074 411.52264 415.63782 419.75308 423.86832 427.98355 432.09876 436.214 440.3292 444.44443 448.55963 452.67487 456.7901 460.90537 465.02054 469.13577 473.25104 477.3662 481.48145 485.5967 489.71194 493.82712 497.94238 502.05762 506.17285 510.28806 514.4033 518.5185 522.6337 526.74897 530.8642 534.97944 539.09467 543.20984 547.3251 551.4403 555.55555 559.6708 563.786 567.9012 572.0165 576.1317 580.2469 584.3621 588.47736 592.5926 596.7078 600.82306 604.9383 609.0535 613.1687 617.28394 621.3992 625.5144 629.62964 633.7449 637.8601 641.9753 646.09046 650.20575 654.321 658.4362 662.55146 666.6667 670.7819 674.8971 679.0123 683.12757 687.2428 691.35804 695.47327 699.5885 703.7037 707.8189 711.93415 716.0494 720.1646 724.27985 728.395 732.5103 736.6255 740.7407 744.85596 748.9712 753.08637 757.20166 761.3169 765.4321 769.5473 773.66254 777.7777 781.893 786.00824 790.1235 794.2387 798.3539 802.4691 806.5843 810.6996 814.8148 818.93006 823.0453 827.1605 831.27564 835.3909 839.50617 843.6214 847.73664 851.85187 855.9671 860.0823 864.1975 868.31275 872.428 876.5432 880.6584 884.7736 888.88886 893.00415 897.11927 901.2345 905.34974 909.46497 913.5802 917.6955 921.8107 925.92585 930.0411 934.1563 938.27155 942.38685 946.5021 950.6173 954.7324 958.84766 962.9629 967.0782 971.1934 975.30866 979.4239 983.5391 987.65424 991.7695 995.88477 1000.0)) (quote (703.0 951.0 963.99994 1000.0 119.99999 156.0 43.0 262.0 427.0 868.0 803.0 916.0 187.0 249.0 6.0 286.0 324.0 483.0 160.0 167.0 331.0 246.0 433.0 380.0 787.0 666.0 596.0 584.0 885.99994 415.0 367.0 982.0 807.0 680.0 487.99997 749.0 381.0 141.0 762.0 244.99999 508.0 300.0 477.0 368.0 595.0 383.0 714.0 733.0 470.00003 320.0 361.0 625.0 71.0 961.0 684.0 757.0 0.0 487.0 869.0 895.0 184.0 23.0 672.0 733.0 460.0 750.0 913.00007 844.0 389.0 357.0 56.0 953.0 838.0 885.99994 313.0 317.0 751.0 421.0 543.0 666.0 440.0 810.0 137.0 957.0 748.0 10.0 539.0 139.0 237.00002 661.0 582.0 530.0 118.00001 659.0 818.0 137.0 362.0 38.0 912.0 133.0 492.0 633.0 493.0 760.0 528.0 118.99999 27.0 65.0 694.0 295.0 139.0 724.0 887.0 834.0 71.0 499.00003 688.0 550.0 597.0 111.0 951.0 755.0 880.0 849.0 689.0 444.99997 955.0 413.0 790.0 344.0 816.0 472.00003 195.0 162.0 163.0 696.0 971.00007 27.0 604.0 698.0 446.0 736.0 348.0 611.0 336.0 409.0 967.00007 705.0 620.0 91.0 132.0 828.0 613.0 306.0 963.99994 828.0 655.0 280.0 223.0 446.99997 412.0 669.0 749.0 98.0 232.00002 71.0 855.0 169.0 838.0 823.0 392.0 169.0 688.0 242.99999 778.0 367.0 185.0 812.0 874.0 457.0 234.00002 994.00007 236.00002 756.0 842.0 220.0 293.0 394.0 592.0 550.0 497.00003 865.0 426.0 446.99997 973.0 781.0 949.0 746.0 59.999997 951.99994 778.0 936.00007 76.0 325.0 125.0 63.0 368.0 147.0 183.0 477.99997 48.0 872.0 130.0 944.00007 276.0 452.0 195.0 70.0 12.0 377.0 600.0 587.0 789.0 958.0 327.0 603.0 370.0 726.0 841.0 92.0 332.0 994.99994 709.0 863.0 105.0 123.0 537.0 389.0 293.0 415.0 363.0 406.0 969.0 149.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 3.7593985 7.518797 11.278195 15.037594 18.796994 22.55639 26.315789 30.075188 33.834588 37.593987 41.353383 45.11278 48.87218 52.631577 56.390976 60.150376 63.909775 67.669175 71.42857 75.18797 78.947365 82.706765 86.46616 90.22556 93.98496 97.74436 101.50376 105.26315 109.02256 112.78195 116.54134 120.30075 124.06014 127.81955 131.57895 135.33835 139.09775 142.85715 146.61655 150.37595 154.13533 157.89473 161.65413 165.41353 169.17293 172.93233 176.69173 180.45113 184.21053 187.96993 191.72931 195.48873 199.24813 203.00753 206.76692 210.5263 214.28572 218.04512 221.80449 225.5639 229.3233 233.08269 236.8421 240.6015 244.36089 248.12029 251.8797 255.6391 259.3985 263.1579 266.9173 270.6767 274.4361 278.1955 281.9549 285.7143 289.4737 293.2331 296.9925 300.7519 304.5113 308.27066 312.0301 315.78946 319.54886 323.30826 327.06766 330.82706 334.58646 338.34586 342.10526 345.86465 349.62405 353.38345 357.14282 360.90225 364.66165 368.42105 372.18045 375.93985 379.69925 383.45862 387.21805 390.97745 394.73685 398.49625 402.25565 406.01505 409.77444 413.53384 417.29324 421.0526 424.81204 428.57144 432.33084 436.09024 439.84958 443.60898 447.3684 451.1278 454.8872 458.6466 462.40604 466.16538 469.92477 473.6842 477.4436 481.203 484.9624 488.72177 492.48117 496.24057 500.0 503.7594 507.5188 511.2782 515.0376 518.797 522.5564 526.3158 530.0752 533.8346 537.594 541.3534 545.1128 548.8722 552.6316 556.391 560.1504 563.9098 567.6692 571.4286 575.188 578.9474 582.7068 586.4662 590.2255 593.985 597.7444 601.5038 605.2632 609.0226 612.782 616.5413 620.3008 624.0602 627.8195 631.5789 635.3383 639.0977 642.8571 646.6165 650.3759 654.1353 657.8947 661.6541 665.4135 669.1729 672.9323 676.6917 680.4511 684.2105 687.96985 691.7293 695.4887 699.2481 703.0075 706.7669 710.5263 714.28565 718.0451 721.8045 725.5639 729.3233 733.0827 736.8421 740.60144 744.3609 748.1203 751.8797 755.6391 759.3985 763.1579 766.91724 770.6767 774.4361 778.1955 781.9549 785.7143 789.4737 793.2331 796.9925 800.7519 804.5113 808.2707 812.0301 815.7894 819.5489 823.3083 827.0677 830.8271 834.5865 838.3459 842.1052 845.8647 849.6241 853.3835 857.1429 860.9023 864.6617 868.421 872.1805 875.9398 879.69916 883.4586 887.21796 890.9774 894.7368 898.4963 902.2556 906.01496 909.7744 913.53376 917.2932 921.0526 924.8121 928.5714 932.33075 936.0902 939.84955 943.609 947.3684 951.12775 954.8872 958.64655 962.406 966.16535 969.9248 973.6842 977.44355 981.203 984.96235 988.7218 992.48114 996.2406 1000.0)) (quote (440.99997 10.0 383.0 774.0 575.0 508.0 31.0 944.00007 510.0 283.0 129.0 644.0 939.0 430.0 606.0 600.0 114.0 440.0 955.99994 198.0 812.0 840.0 637.0 384.0 644.0 835.0 326.0 645.0 520.0 408.0 543.0 96.0 71.0 444.0 328.0 541.0 157.0 331.0 798.0 564.0 772.0 950.0 264.0 674.0 945.0 117.00001 920.99994 32.0 485.0 98.0 365.0 283.0 734.0 49.0 537.0 81.0 827.0 459.0 473.0 665.0 362.0 741.0 73.0 412.0 436.0 908.0 970.0 732.0 723.0 878.0 504.0 924.99994 53.0 563.0 452.0 573.0 686.0 278.0 82.0 18.0 785.0 117.00001 542.0 127.0 283.0 169.0 841.0 880.0 593.0 868.0 889.00007 53.0 675.0 67.0 53.0 360.0 827.0 483.0 875.0 803.0 556.0 114.0 861.0 239.99999 481.99997 825.0 861.0 690.0 63.0 279.0 63.0 409.0 340.0 911.0 773.0 773.0 140.0 823.0 153.0 91.0 452.0 963.99994 883.0 433.0 618.0 785.0 293.0 402.0 634.0 791.0 733.0 699.0 361.0 439.0 193.0 457.0 452.0 900.0 413.0 667.0 663.0 32.0 41.0 319.0 209.0 293.0 465.0 42.0 195.0 10.0 586.0 116.00001 22.0 535.0 254.0 833.0 299.0 791.0 296.0 634.0 117.00001 102.0 730.0 942.0 452.99997 450.0 16.0 118.99999 65.0 237.00002 182.0 17.0 163.0 34.0 926.0 986.0 775.0 44.0 808.0 440.99997 440.99997 55.0 267.0 908.0 835.0 786.0 660.0 892.0 0.0 831.0 571.0 322.0 7.0 206.0 680.0 553.0 75.0 243.99999 194.0 67.0 509.00003 850.0 636.0 450.99997 641.0 383.0 287.0 727.0 39.0 492.0 190.0 791.0 126.0 204.0 797.0 109.0 293.0 979.00007 5.0 525.0 618.0 671.0 489.99997 103.0 389.0 653.0 971.99994 675.0 308.0 272.0 501.00003 83.0 299.0 989.0 231.00002 181.0 829.0 60.999997 944.00007 78.0 996.0 897.00007 525.0 448.0 599.0 169.0 468.00003 595.0 690.0 524.0 107.0 910.0 824.0 926.0 950.0 148.0 624.0 682.0 179.0 569.0 348.0 27.0 117.00001 487.0 444.0 673.0 932.00007)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.259259 18.518519 27.777777 37.037037 46.296296 55.555554 64.81481 74.07407 83.333336 92.59259 101.85185 111.11111 120.37036 129.62963 138.88889 148.14815 157.40741 166.66667 175.92592 185.18518 194.44443 203.7037 212.96297 222.22222 231.48146 240.74073 250.0 259.25925 268.51852 277.77777 287.03705 296.2963 305.55554 314.81482 324.07407 333.33334 342.5926 351.85184 361.1111 370.37036 379.62964 388.88886 398.14816 407.4074 416.66666 425.92593 435.18518 444.44443 453.70367 462.96292 472.22223 481.48145 490.74075 500.0 509.25925 518.5185 527.7778 537.03705 546.2963 555.55555 564.8148 574.0741 583.3333 592.5926 601.85187 611.1111 620.3703 629.62964 638.8889 648.14814 657.4074 666.6667 675.9259 685.1852 694.44446 703.7037 712.96296 722.2222 731.4815 740.7407 750.0 759.2593 768.5185 777.7777 787.03705 796.2963 805.5555 814.8148 824.0741 833.3333 842.5926 851.85187 861.1111 870.37037 879.62964 888.88886 898.14814 907.40735 916.6667 925.92585 935.1852 944.44446 953.7037 962.9629 972.2223 981.4815 990.7407 1000.0)) (quote (160.0 966.0 577.0 888.0 25.0 529.0 990.0 527.0 494.0 415.0 410.0 537.0 634.0 10.0 211.0 877.0 978.0 885.99994 558.0 786.0 432.0 904.0 112.0 989.0 26.0 878.0 966.0 20.0 783.0 872.0 332.0 450.0 584.0 878.0 489.0 323.0 534.0 318.0 143.0 801.0 811.0 865.0 291.0 413.0 943.0 649.0 557.0 732.0 905.00007 440.0 507.00003 226.0 544.0 263.0 610.0 907.0 812.0 376.0 348.0 420.0 307.0 27.0 652.0 583.0 274.0 185.0 46.0 953.0 860.0 791.0 709.0 790.0 355.0 650.0 14.999999 805.0 733.0 598.0 290.0 689.0 699.0 726.0 202.0 178.0 359.0 101.0 166.0 509.00003 674.0 727.0 844.0 535.0 934.0 867.0 958.0 219.0 298.0 428.0 747.0 381.0 512.0 21.0 951.0 138.0 232.00002 786.0 722.0 622.0 68.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 6.1728397 12.345679 18.518519 24.691359 30.864195 37.037037 43.209877 49.382718 55.555554 61.72839 67.90123 74.07407 80.24691 86.419754 92.59259 98.765435 104.93827 111.11111 117.28394 123.45678 129.62963 135.80246 141.9753 148.14815 154.32099 160.49382 166.66667 172.83951 179.01235 185.18518 191.35803 197.53087 203.7037 209.87654 216.04938 222.22222 228.39505 234.56789 240.74073 246.91356 253.08643 259.25925 265.4321 271.60492 277.77777 283.9506 290.12344 296.2963 302.46915 308.64197 314.81482 320.98764 327.1605 333.33334 339.50616 345.67902 351.85184 358.0247 364.1975 370.37036 376.54318 382.71606 388.88886 395.06174 401.23456 407.4074 413.58026 419.75308 425.92593 432.09876 438.2716 444.44443 450.61725 456.7901 462.96292 469.13577 475.30866 481.48145 487.65433 493.82712 500.0 506.17285 512.3457 518.5185 524.69135 530.8642 537.03705 543.20984 549.3827 555.55555 561.7284 567.9012 574.0741 580.2469 586.41974 592.5926 598.76545 604.9383 611.1111 617.28394 623.4568 629.62964 635.8025 641.9753 648.14814 654.321 660.49384 666.6667 672.8395 679.0123 685.1852 691.35804 697.5309 703.7037 709.8765 716.0494 722.2222 728.395 734.5679 740.7407 746.9136 753.08637 759.2593 765.4321 771.6049 777.7777 783.9506 790.1235 796.2963 802.4691 808.64197 814.8148 820.9877 827.1605 833.3333 839.50617 845.679 851.85187 858.0247 864.1975 870.37037 876.5432 882.716 888.88886 895.06165 901.2345 907.40735 913.5802 919.7531 925.92585 932.0987 938.27155 944.44446 950.6173 956.79004 962.9629 969.1358 975.30866 981.4815 987.65424 993.82715 1000.0)) (quote (430.0 320.0 407.0 74.0 263.0 842.0 318.0 518.0 540.0 851.0 483.0 832.0 56.0 598.0 302.0 730.0 97.0 493.0 238.99999 801.0 526.0 354.0 666.0 720.0 366.0 105.0 157.0 465.0 377.0 677.0 977.0 63.0 359.0 514.0 558.0 900.0 132.0 593.0 596.0 54.0 69.0 537.0 586.0 630.0 92.0 535.0 741.0 674.0 242.99999 389.0 608.0 456.0 656.0 44.0 493.0 36.0 920.99994 990.0 520.0 331.0 911.0 471.0 951.99994 920.0 377.0 775.0 43.0 690.0 837.0 828.0 771.0 93.0 986.0 766.0 339.0 367.0 67.0 212.0 760.0 25.0 146.0 342.0 708.0 945.0 805.0 14.0 636.0 891.0 332.0 943.0 179.0 429.0 781.0 182.0 162.0 880.0 351.0 969.0 459.0 602.0 310.0 433.0 626.0 893.00007 950.0 521.0 600.0 849.0 507.00003 672.0 811.0 321.0 820.0 510.0 697.0 251.0 133.0 81.0 256.0 483.0 11.0 506.0 796.0 137.0 561.0 76.0 878.0 715.0 860.0 967.00007 273.0 76.0 789.0 193.0 825.0 161.0 575.0 641.0 413.0 147.0 74.0 504.0 815.0 311.0 685.0 582.0 918.0 743.0 237.99999 757.0 423.0 185.0 783.0 232.00002 386.0 221.0 819.0 717.0 110.0 452.99997 239.99999 619.0 11.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 6.8027206 13.605441 20.408164 27.210883 34.013607 40.816327 47.61905 54.421765 61.22449 68.027214 74.82993 81.63265 88.43537 95.2381 102.04082 108.84353 115.646256 122.44898 129.2517 136.05443 142.85715 149.65987 156.46259 163.2653 170.06803 176.87075 183.67346 190.4762 197.27892 204.08164 210.88436 217.68706 224.48979 231.29251 238.09525 244.89797 251.70069 258.5034 265.30612 272.10886 278.91156 285.7143 292.517 299.31973 306.12244 312.92517 319.72788 326.5306 333.33334 340.13605 346.93878 353.7415 360.54422 367.34692 374.14966 380.9524 387.7551 394.55783 401.36053 408.16327 414.96594 421.7687 428.57144 435.3741 442.1769 448.97958 455.78232 462.58502 469.38776 476.1905 482.9932 489.79593 496.59863 503.40137 510.20404 517.0068 523.8095 530.61225 537.415 544.2177 551.0204 557.8231 564.62586 571.4286 578.23127 585.034 591.83674 598.63947 605.4422 612.2449 619.0476 625.85035 632.6531 639.45575 646.2585 653.0612 659.86396 666.6667 673.4693 680.2721 687.0748 693.87757 700.6803 707.483 714.28565 721.08844 727.8912 734.69385 741.4966 748.2993 755.102 761.9048 768.70746 775.5102 782.3129 789.11567 795.91834 802.72107 809.5238 816.32654 823.1293 829.9319 836.7347 843.5374 850.34015 857.1429 863.94556 870.7482 877.551 884.3538 891.15644 897.95917 904.7619 911.56464 918.3674 925.17005 931.9728 938.7755 945.57825 952.381 959.18366 965.9864 972.7891 979.59186 986.3945 993.19727 1000.0)) (quote (746.0 314.0 493.0 130.0 194.0 278.0 526.0 233.00002 677.0 370.0 905.99994 554.0 288.0 27.0 881.0 782.0 895.0 594.0 182.0 312.0 564.0 892.0 444.99997 892.0 865.0 317.0 649.0 126.0 919.0 939.0 738.0 751.0 874.0 77.0 222.0 973.0 609.0 155.0 881.99994 489.99997 708.0 963.00007 855.0 346.0 123.0 188.0 112.0 683.0 33.0 116.00001 579.0 516.0 557.0 106.0 854.0 187.0 570.0 710.0 524.0 887.0 681.0 114.0 524.0 77.0 868.0 766.0 992.0 508.0 68.0 251.0 935.0 985.0 298.0 248.0 79.0 806.0 551.0 745.0 409.0 887.0 358.0 7.0 162.0 977.0 209.0 274.0 951.0 302.0 988.0 963.99994 116.00001 223.0 132.0 424.0 692.0 260.0 102.0 783.0 928.99994 739.0 214.0 91.0 277.0 832.0 586.0 678.0 891.0 315.0 485.0 495.0 872.0 54.0 845.0 360.0 261.0 604.0 948.00007 769.0 485.0 225.0 774.0 794.0 164.0 465.0 25.0 261.0 129.0 191.0 757.0 696.0 866.0 587.0 904.0 115.0 770.0 209.0 522.0 595.0 170.0 579.0 76.0 787.0 212.0 94.0 910.0 745.0 955.0 807.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4.2735043 8.5470085 12.820513 17.094017 21.367522 25.641026 29.91453 34.188034 38.461537 42.735043 47.008545 51.28205 55.555554 59.82906 64.10256 68.37607 72.649575 76.92307 81.19658 85.470085 89.74359 94.01709 98.290596 102.5641 106.83761 111.11111 115.384606 119.65812 123.93163 128.20513 132.47864 136.75214 141.02564 145.29915 149.57265 153.84615 158.11965 162.39316 166.66667 170.94017 175.21367 179.48719 183.76068 188.03418 192.30768 196.58119 200.8547 205.1282 209.4017 213.67522 217.94872 222.22222 226.49571 230.76921 235.04274 239.31624 243.58974 247.86327 252.13677 256.41025 260.68375 264.95728 269.23077 273.50427 277.77777 282.05127 286.3248 290.5983 294.8718 299.1453 303.4188 307.6923 311.9658 316.2393 320.51282 324.78632 329.0598 333.33334 337.60684 341.88034 346.15384 350.42734 354.70087 358.97437 363.24786 367.52136 371.79486 376.06836 380.34186 384.61536 388.88886 393.16238 397.43588 401.7094 405.9829 410.2564 414.5299 418.8034 423.07694 427.35043 431.62393 435.89743 440.17093 444.44443 448.71796 452.99142 457.26495 461.53842 465.81195 470.08548 474.35895 478.63248 482.90595 487.17947 491.453 495.72653 500.0 504.27353 508.547 512.8205 517.094 521.3675 525.64106 529.91456 534.18805 538.46155 542.73505 547.00855 551.28205 555.55555 559.82905 564.10254 568.3761 572.6496 576.9231 581.1966 585.4701 589.7436 594.0171 598.2906 602.5641 606.8376 611.1111 615.3846 619.65815 623.9316 628.20514 632.4786 636.75214 641.02564 645.29914 649.57264 653.8461 658.1196 662.3932 666.6667 670.9402 675.2137 679.4872 683.7607 688.0342 692.3077 696.5812 700.8547 705.12824 709.40174 713.67524 717.9487 722.2222 726.4957 730.7692 735.0427 739.3162 743.5897 747.8632 752.1367 756.4103 760.6837 764.9573 769.2307 773.5043 777.7777 782.0513 786.32477 790.59827 794.87177 799.1453 803.4188 807.6923 811.9658 816.2393 820.5128 824.7863 829.0598 833.3333 837.6068 841.8804 846.1539 850.42737 854.70087 858.97437 863.24787 867.52137 871.79487 876.06836 880.34186 884.6153 888.88886 893.16236 897.4359 901.7094 905.98285 910.25635 914.5299 918.8034 923.07685 927.35035 931.6239 935.89747 940.17096 944.44446 948.7179 952.99146 957.26496 961.53846 965.8119 970.08545 974.35895 978.6325 982.906 987.17945 991.45307 995.7265 1000.0)) (quote (310.0 747.0 651.0 897.00007 982.0 962.0 158.0 352.0 392.0 601.0 152.0 199.0 485.0 485.0 421.0 928.99994 14.999999 624.0 296.0 269.0 5.0 916.0 111.0 436.0 589.0 876.0 670.0 775.0 125.0 981.0 735.0 10.0 730.0 343.0 313.0 180.0 708.0 365.0 832.0 130.0 393.0 505.00003 148.0 958.0 85.0 690.0 512.0 375.0 444.99997 120.99999 41.0 870.0 292.0 541.0 320.0 834.0 994.00007 209.0 161.0 26.0 523.0 183.0 880.0 994.00007 657.0 347.0 442.0 928.00007 468.00003 440.0 390.0 68.0 417.0 668.0 232.00002 207.0 652.0 756.0 422.0 226.0 236.00002 293.0 151.0 503.00003 918.0 889.99994 80.0 357.0 17.0 622.0 635.0 833.0 629.0 878.0 461.0 922.0 816.0 189.0 650.0 699.0 625.0 154.0 671.0 357.0 334.0 378.0 152.0 816.0 567.0 914.0 350.0 226.0 140.0 661.0 355.0 169.0 757.0 454.0 936.00007 520.0 989.0 577.0 166.0 422.0 901.99994 96.0 774.0 1.0 967.99994 359.0 467.0 680.0 693.0 934.0 820.0 433.0 169.0 215.0 86.0 3.0 892.0 292.0 537.0 967.99994 569.0 998.99994 50.0 779.0 557.0 52.0 817.0 514.0 366.0 165.0 304.0 847.0 604.0 176.0 767.0 905.00007 367.0 901.99994 928.00007 805.0 1000.0 119.99999 107.0 587.0 711.0 219.0 893.00007 368.0 988.0 336.0 502.0 300.0 689.0 726.0 748.0 57.0 307.0 768.0 872.0 83.0 726.0 607.0 855.0 932.99994 940.00007 897.99994 113.0 926.0 663.0 253.0 259.0 637.0 230.0 469.0 226.0 687.0 133.0 884.0 614.0 359.0 942.0 743.0 807.0 248.0 911.0 701.0 893.99994 115.0 664.0 17.0 650.0 922.0 180.0 421.0 636.0 350.0 934.0 813.0 397.0 710.0 133.0 339.0 704.0 635.0 243.99999 106.0 936.99994 994.00007 806.0 951.0 780.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 5.102041 10.204082 15.306123 20.408164 25.510205 30.612246 35.714287 40.816327 45.918366 51.02041 56.122448 61.22449 66.32653 71.42857 76.53061 81.63265 86.734696 91.83673 96.938774 102.04082 107.14286 112.244896 117.34694 122.44898 127.55101 132.65306 137.7551 142.85715 147.95919 153.06122 158.16327 163.2653 168.36733 173.46939 178.57141 183.67346 188.7755 193.87755 198.97959 204.08164 209.18367 214.28572 219.38776 224.48979 229.59185 234.69388 239.79592 244.89797 250.0 255.10202 260.20404 265.30612 270.40817 275.5102 280.6122 285.7143 290.8163 295.91837 301.0204 306.12244 311.2245 316.32654 321.42856 326.5306 331.63266 336.73465 341.83673 346.93878 352.0408 357.14282 362.2449 367.34692 372.44897 377.551 382.65308 387.7551 392.85715 397.95917 403.06122 408.16327 413.26532 418.36734 423.4694 428.57144 433.67343 438.7755 443.8776 448.97958 454.08163 459.1837 464.2857 469.38776 474.4898 479.59183 484.69388 489.79593 494.89795 500.0 505.10205 510.20404 515.30616 520.4081 525.5102 530.61225 535.7143 540.81635 545.9184 551.0204 556.12244 561.2244 566.32654 571.4286 576.53064 581.6326 586.7347 591.83674 596.9388 602.0408 607.1429 612.2449 617.3469 622.449 627.551 632.6531 637.7551 642.8571 647.95917 653.0612 658.16327 663.2653 668.3674 673.4693 678.5714 683.67347 688.7755 693.87757 698.9796 704.0816 709.18366 714.28565 719.38776 724.4898 729.59186 734.69385 739.7959 744.89795 750.0 755.102 760.2041 765.30616 770.40815 775.5102 780.61225 785.7143 790.81635 795.91834 801.0204 806.12244 811.2245 816.32654 821.4286 826.53064 831.63257 836.7347 841.83674 846.9388 852.04084 857.1429 862.2449 867.34687 872.4489 877.551 882.65314 887.7552 892.8571 897.95917 903.0612 908.16327 913.2653 918.3674 923.46936 928.5714 933.67347 938.7755 943.87757 948.9796 954.0816 959.18366 964.2857 969.38776 974.4898 979.59186 984.6938 989.7959 994.89795 1000.0)) (quote (789.0 246.0 733.0 647.0 787.0 275.0 926.0 647.0 831.0 283.0 680.0 372.0 744.0 955.99994 340.0 865.0 70.0 332.0 981.0 483.99997 46.0 922.0 138.0 730.0 989.0 539.0 252.0 54.0 333.0 819.0 118.99999 852.0 300.0 329.0 293.0 924.00007 734.0 333.0 214.0 361.0 502.0 377.0 193.0 179.0 618.0 199.0 364.0 590.0 2.0 188.0 405.0 138.0 126.0 899.0 998.00007 904.0 419.0 297.0 67.0 8.0 258.0 861.0 549.0 785.0 414.0 565.0 923.0 573.0 897.00007 586.0 17.0 334.0 168.0 889.00007 542.0 47.0 394.0 727.0 892.0 315.0 549.0 479.0 699.0 434.0 337.0 400.0 442.0 743.0 215.0 203.0 306.0 587.0 157.0 378.0 193.0 903.0 81.0 721.0 22.0 593.0 448.0 481.0 675.0 94.0 884.0 837.0 560.0 235.00002 755.0 703.0 519.0 512.0 270.0 672.0 202.0 375.0 927.0 335.0 316.0 3.0 0.0 595.0 847.0 33.0 498.0 366.0 620.0 129.0 736.0 965.0 629.0 481.0 594.0 191.0 418.0 106.0 370.0 636.0 712.0 684.0 134.0 416.0 218.0 561.0 258.0 433.0 190.0 233.00002 559.0 880.0 568.0 814.0 987.00007 579.0 286.0 432.0 866.0 870.0 990.0 564.0 553.0 947.0 438.0 837.0 292.0 87.0 188.0 287.0 993.0 923.0 517.0 893.99994 553.0 571.0 814.0 939.0 425.0 677.0 287.0 231.00002 847.0 475.99997 657.0 875.0 575.0 276.0 788.0 483.0 863.0 294.0 14.0 628.0 634.0 200.0 385.0 969.0 146.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 428 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-POLY-TO-MULTISEQ" (quote r-poly-to-multiseq) (quote ((om-load-inputfun (quote input-funbox) "voices-list" "VOICES-LIST" (list 0)))) (om-make-point 66 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 224 29) (quote "Dufay: Nuper rosarum flores") "" (om-make-point 38 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0) (6 0 7 0 nil 0) (6 0 8 1 nil 0) (10 0 9 0 nil 0) (1 0 9 1 nil 0) (0 0 9 2 nil 0) (2 0 9 3 nil 0) (17 0 10 0 nil 0) (8 1 10 1 nil 0) (14 0 15 0 nil 0) (9 0 16 1 nil 0) (19 0 17 0 nil 0) (18 0 17 1 nil 0) (31 0 19 0 nil 0) (20 0 19 1 nil 0) (28 0 19 2 nil 0) (29 1 19 3 nil 0) (27 0 19 4 nil 0) (23 1 19 5 nil 0) (21 0 19 6 nil 0) (22 1 19 7 nil 0) (15 0 20 0 nil 0) (30 0 22 1 nil 0) (30 0 23 1 nil 0) (30 0 29 1 nil 0) (26 0 30 0 nil 0) (25 0 30 1 nil 0) (24 0 30 2 nil 0) (12 1 31 0 nil 0))) nil 6.13))
