; OM File Header - Saved 2020/09/23 20:55:45
; (6.13 :patc (om-make-point 118 60) (om-make-point 337 23) (om-make-point 823 720) "" 183 0 nil "2020/09/23 20:55:45")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "bpf-melodies" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 152 166) (quote "These melody$functions are examples, and contain $many musical choices within the programming. $r-input-bpf-melody uses any input bpf as a melodic shape.") "" (om-make-point 2 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-INPUT-BPF-MELODY 2" (quote r-input-bpf-melody) (quote ((om-load-inputfun (quote input-funbox) "midicents-range-minmax" "MIDICENTS-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil) (om-load-inputfun (quote input-funbox) "cents-interval-size" "CENTS-INTERVAL-SIZE" nil) (om-load-inputfun (quote input-funbox) "instrumental-range-midicents" "INSTRUMENTAL-RANGE-MIDICENTS" nil) (om-load-inputfun (quote input-funbox) "bpf-self-melody-shape" "BPF-SELF-MELODY-SHAPE" nil))) (om-make-point 419 412) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 20" (quote list) (quote nil) (om-make-point 329 354) (om-make-point 100 30) (list (list 6000 8000)) "((6000 8000))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 19" (quote list) (quote nil) (om-make-point 424 330) (om-make-point 48 30) 3465 "3465" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FULL-RANGE 2" (quote r-full-range) (quote ((om-load-inputfun (quote input-funbox) "CENTS-STEP" "CENTS-STEP" nil))) (om-make-point 451 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 18" (quote list) (quote nil) (om-make-point 477 208) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 17" (quote list) (quote nil) (om-make-point 472 309) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 466 364) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-REBUILD-CHORDSEQ 2" (quote r-rebuild-chordseq) (quote ((om-load-inputfun (quote input-funbox) "instead-of-chordseq-list" "INSTEAD-OF-CHORDSEQ-LIST" (list 0)))) (om-make-point 446 486) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 391 583) (om-make-point 234 112) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7050) (7500) (7800) (7850) (7150) (7200) (7450) (6450) (6100) (6050) (6200) (6550) (7100) (6950) (6850) (6900) (7550))) :lonset (quote (0 168 271 460 642 839 1057 1171 1393 1648 1883 2150 2441 2674 2937 3140 3311 3474)) :ldur (quote ((168) (103) (189) (182) (197) (218) (114) (222) (255) (235) (267) (291) (233) (263) (203) (171) (163))) :lvel (quote ((57) (60) (64) (67) (71) (71) (69) (65) (62) (60) (59) (59) (59) (58) (57) (56) (55))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 582 313) (om-make-point 104 86) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (299.24933 315.75134 332.99152 350.92004 369.48422 388.62875 408.29498 428.4223 448.94775 469.80713 490.93396 512.2604 533.7179 555.2373 576.7488 598.1828 619.4691 640.5387 661.3233 681.7557 701.7694 721.3002 740.286 758.66626 776.3833 793.3821 809.6103 825.019 839.5628 853.19935 865.8903 877.6012 888.302 897.96576 906.57105 914.10004 920.5394 925.88044 930.119 933.255 935.2932 936.2429 936.1177 934.9353 932.71735 929.4908 925.2856 920.1354 914.0782 907.1551 899.4103 890.89155 881.6496 871.7364 861.2083 850.1224 838.5377 826.51514 814.1173 801.4069 788.4475 775.3036 762.03907 748.7185 735.4053 722.16175 709.05 696.1304 683.4613 671.0999 659.1001 647.51496 636.3935 625.7822 615.72504 606.26215 597.4303 589.2626 581.7883 575.0333 569.01886 563.76215 559.2765 555.57105 552.6501 550.5141 549.1592 548.5772 548.7559 549.6786 551.3249 553.67035 556.6867 560.3417 564.5998 569.4226 574.7676 580.58985 586.84217 593.47394 600.43274 607.66456 615.1126 622.7196 630.42664 638.174 645.9013 653.5482 661.0538 668.3577 675.40076 682.12336 688.46766 694.3777 699.7983 704.6777 708.9649 712.612 715.57416 717.80884 719.27686 719.9423 719.7736 718.7421 716.823 713.9957 710.2442 705.5558 699.9226 693.34095 685.8116 677.3395 667.9343 657.60975 646.384 634.2796 621.3231 607.5455 592.98066 577.6674 561.64765 544.96705 527.67444 509.8218 491.4638 472.65768 453.4634 433.94272 414.15936 394.1791 374.06796 353.89362 333.7249 313.62994 293.67822 273.93845 254.47841 235.3656 216.66674 198.4465 180.76839 163.69437 147.2831 131.59117 116.673416 102.58045 89.36031 77.05781 65.71408 55.36616 46.047638 37.78793 30.612254 24.54133 19.592017 15.776249 13.101675 11.571399 11.184126 11.933811 13.810323 16.798672 20.879687 26.029898 32.221966 39.424107 47.600865 56.71291 66.71795 77.56964 89.21877 101.613716 114.69942 128.41847 142.7121 157.51877 172.77579 188.41928 204.38397 220.6044 237.01396 253.54578 270.13428 286.71326 303.21814 319.58453 335.74966 351.6528 367.23456 382.43823 397.20856 411.49393 425.24506 438.41583 450.96338 462.84872 474.0359 484.49286 494.19177 503.1084 511.22305 518.52027 524.9885 530.6206 535.4139 539.36976 542.49415 544.7967 546.292 546.99897 546.9393 546.13916 544.62885 542.44184 539.615 536.18866 532.2065 527.7139 522.75965 517.3952 511.67343 505.6489 499.37836 492.92004 486.33212 479.67386 473.0056 466.38693 459.87787 453.53745 447.42456 441.5967 436.10992 431.01886 426.37622 422.2324 418.63605 415.6321 413.26334 411.56976 410.58762 410.3495 410.88474 412.21878 414.3729 417.36484 421.20813 425.91177 431.48062 437.9153 445.21207 453.36258 462.3547 472.17136 482.79218 494.19208 506.34174 519.2082 532.7549 546.9412 561.7234 577.0546 592.88446 609.16004 625.82557 642.82306 660.0924 677.5719 695.19764 712.90485 730.6276 748.29944 765.8535 783.222 800.3384 817.13605 833.54895 849.5125 864.96375 879.8404 894.08246 907.6327 920.4359 932.4396 943.59375 953.85224 963.1718 971.5129 978.8397 985.1203 990.3265 994.435 997.426 999.28455 1000.0 999.56617 997.9814 995.2482 991.3745 986.3715 980.2562 973.04877 964.77436 955.4618 945.14435 933.85926 921.6469 908.55176 894.6216 879.907 864.46155 848.34205 831.60675 814.3171 796.53614 778.3282 759.7592 740.8959 721.8061 702.5578 683.2194 663.859 644.5444 625.3427 606.3199 587.5403 569.0672 550.96155 533.2825 516.08686 499.42862 483.35876 467.92557 453.17358 439.14417 425.87506 413.39996 401.74872 390.9475 381.018 371.97726 363.83878 356.61124 350.29916 344.9027 340.41727 336.83466 334.14215 332.3226 331.35465 331.21356 331.8705 333.2928 335.4447 338.28687 341.7765 345.86847 350.51495 355.66513 361.2664 367.26428 373.6025 380.22376 387.0693 394.07913 401.19302 408.35123 415.49365 422.5603 429.49204 436.23105 442.71994 448.90268 454.72614 460.139 465.09186 469.53754 473.43237 476.73477 479.407 481.4149 482.72742 483.31766 483.16187 482.24042 480.53827 478.04453 474.7521 470.6582 465.76447 460.0766 453.60507 446.3643 438.37286 429.65314 420.23212 410.14047 399.41223 388.08572 376.20233 363.8064 350.94598 337.67203 324.03772 310.0986 295.91238 281.53842 267.03778 252.47388 237.91045 223.41123 209.04158 194.86647 180.95027 167.3578 154.15328 141.39928 129.15705 117.48623 106.444596 96.08817 86.4707 77.64285 69.65252 62.54448 56.360215 51.13774 46.911393 43.711445 41.56416 40.492066 40.51305 41.640755 43.884694 47.249463 51.73563 57.33891 64.05061 71.85757 80.742195 90.68261 101.65263 113.62227 126.55696 140.41841 155.16477 170.75032 187.12642 204.2409 222.03896 240.46298 259.45282 278.94608 298.8789 319.18594 339.80093 360.6538 381.67563 402.7974 423.94977 445.06332 466.0695 486.90018 507.4873 527.765 547.6694 567.13794 586.11066 604.53 622.34034 639.4891 655.9272 671.609 686.4916 700.5366 713.70917 725.97797 737.31647 747.7021 757.1164 765.54535 772.9794 779.41315 784.84626 789.28205 792.72846 795.19776 796.7066 797.27564 796.9295 795.69727 793.6112 790.7071 787.02405 782.6051 777.4958 771.7445 765.40235 758.5223 751.159 743.3694 735.21235 726.74714 718.03486 709.1364 700.11255 691.02497 681.93525 672.904 663.99097 655.25495 646.75257 638.5393 630.6692 623.1932 616.16016 609.6166 603.6054 598.1667 593.3375 589.151 585.63666 582.8205 580.7246 579.36676 578.76075 578.91614 579.83826 581.5284 583.9831 587.1952 591.15296 595.8405 601.238 607.3215 614.0631 621.43134 629.3908 637.90284 646.9254 656.41346 666.31885 676.5911 687.177 698.02106 709.0662 720.2538 731.5237 742.8147 754.0644 765.2097 776.1882 786.9369 797.39356 807.49714 817.18647 826.40094 835.0827 843.1759 850.6264 857.3825 863.395 868.61744 873.0059 876.5207 879.1252 880.7862 881.47474 881.16517 879.8366 877.4716 874.05774 869.58637 864.05365 857.4604 849.81116 841.1157 831.3878 820.6456 808.9116 796.2126 782.57947 768.0472 752.6549 736.44477 719.46247 701.7575 683.3821 664.3918 644.8456 624.8034 604.3275 583.4828 562.3353 540.95246 519.4027 497.75577 476.0813 454.4488 432.92822 411.5888 390.49924 369.72766 349.34012 329.39993 309.97083 291.11374 272.88614 255.34372 238.53928 222.52191 207.33776 193.0296 179.63603 167.1922 155.72916 145.27376 135.84862 127.4722 120.15821 113.916336 108.75159 104.664345 101.650696 99.70224 98.80618 98.945626 100.09969 102.2429 105.3457 109.3749 114.293724 120.0619 126.63624 133.96988 142.01348 150.71479 160.0191 169.87053 180.21022 190.97844 202.11438 213.55525 225.238 237.09958 249.07683 261.10654 273.1267 285.07474 296.88928 308.5112 319.88284 330.94836 341.65414 351.94913 361.78375 371.11203 379.89142 388.08264 395.64975 402.56018 408.78525 414.3001 419.08405 423.12045 426.39694 428.90512 430.64096 431.60477 431.80127 431.23907 429.9313 427.89456 425.15057 421.72412 417.64404 412.94348 407.6583 401.82742 395.4936 388.7023 381.50192 373.94342 366.0795 357.96463 349.65616 341.2122 332.69116 324.15405 315.66217 307.27585 299.0564 291.06464 283.36063 276.0036 269.0521 262.56274 256.5906 251.18917 246.40876 242.2975 238.90126 236.26287 234.4212 233.41255 233.27005 234.02149 235.69226 238.30309 241.87068 246.40752 251.92183 258.41776 265.89453 274.34738 283.7668 294.13922 305.4467 317.66657 330.7721 344.7332 359.5154 375.07956 391.38388 408.3826 426.02707 444.26544 463.04294 482.30118 501.98044 522.0189 542.3521 562.9149 583.6404 604.4608 625.3064 646.10834 666.79767 687.3046 707.5609 727.49915 747.0514 766.1522 784.73755 802.7451 820.11536 836.791 852.717 867.8413 882.115 895.4928 907.93305 919.3977 929.85206 939.26624 947.61396 954.8729 961.0263 966.06086 969.9677 972.7433 974.38776 974.9062 974.308 972.60675 969.8207 965.97236 961.08826 955.19935 948.3399 940.5478 931.86457 922.33606 912.0099 900.9377 889.17304 876.7722 863.7928 850.29584 836.3432 821.9972 807.32294 792.3854 777.2492 761.98066 746.64527 731.3077 716.03125 700.88056 685.9173 671.2018 656.7926 642.7459 629.115 615.952 603.3051 591.22016 579.73914 568.9008 558.7402 549.2885 540.5735 532.61847 525.44324 519.0624 513.4871 508.72394 504.77515 501.63864 499.30887 497.7748 497.0221 497.03183 497.7814 499.24417 501.38953 504.18393 507.5905 511.56808 516.07306 521.0593 526.4779 532.277 538.4041 544.8035 551.4192 558.193 565.0658 571.9776 578.8701 585.6813 592.35096 598.8203 605.03144 610.9259 616.44727 621.542 626.1558 630.23896 633.7435 636.62287 638.83497 640.3405 641.10267 641.08777 640.2678 638.6174 636.1156 632.7441 628.4894 623.34314 617.3003 610.3608 602.52814 593.811 584.22175 573.7779 562.5 550.4136 537.5485 523.93616 509.61627 494.62967 479.01987 462.83252 446.11945 428.93564 411.33572 393.3785 375.1242 356.63873 337.9837 319.223 300.42407 281.65784 262.98947 244.48465 226.2131 208.24419 190.64064 173.47039 156.79735 140.68634 125.196106 110.38355 96.30582 83.01797 70.570336 59.009304 48.378354 38.71975 30.069409 22.460665 15.921844 10.478167 6.1502047 2.9542897 0.90194726 0.0 0.25139374 1.6542162 4.2021103 7.8841186 12.685356 18.586752 25.562565 33.5853 42.62478 52.6429 63.5991 75.45104 88.15294 101.65478 115.90212 130.8393 146.41046 162.55608 179.20874 196.308 213.79033 231.58834 249.6326 267.85767 286.19678 304.58246 322.94574 341.2211 359.343 377.24942 394.87344 412.15775 429.04153 445.46884 461.38858 476.7485 491.49988 505.5976 519.0026 531.67804 543.5895 554.70636 565.00367 574.46027 583.0584 590.7857 597.63166 603.59357 608.6716 612.86994 616.1967 618.66535 620.2919 621.09717 621.1089 620.35224 618.8622 616.6744 613.82795 610.3659 606.3317 601.77497 596.74604 591.2953 585.4799 579.3548 572.9779 566.4057 559.7015 552.9224 546.1287 539.3812 532.7408 526.2636 520.00806 514.0322 508.39102 503.13644 497.8839)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 698 118) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 665 10) (om-make-point 56 30) (list 0.1 0.7) "(.1 .7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 633 78) (om-make-point 62 30) (list 0 360) "(0 360)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 600 43) (om-make-point 48 30) (list 1 5) "(1 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 543 88) (om-make-point 59 30) (list 0.5 23) "(.5 23)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 478 70) (om-make-point 69 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 572 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-STATIC-ADDITIVE-SINE-BPFS" (quote r-static-additive-sine-bpfs) (quote ((om-load-inputfun (quote input-funbox) "" "Y-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-FREQ" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-FREQS-PR-BPF" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-AMP" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-PHASE" nil) (om-load-inputfun (quote input-funbox) "" "NUMBER-OF-BPFS" nil))) (om-make-point 524 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-INPUT-BPF-MELODY" (quote r-input-bpf-melody) (quote ((om-load-inputfun (quote input-funbox) "midicents-range-minmax" "MIDICENTS-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil) (om-load-inputfun (quote input-funbox) "cents-interval-size" "CENTS-INTERVAL-SIZE" nil) (om-load-inputfun (quote input-funbox) "instrumental-range-midicents" "INSTRUMENTAL-RANGE-MIDICENTS" nil) (om-load-inputfun (quote input-funbox) "bpf-self-melody-shape" "BPF-SELF-MELODY-SHAPE" nil))) (om-make-point 107 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 21 258) (om-make-point 100 30) (list (list 6000 8000)) "((6000 8000))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 112 313) (om-make-point 48 30) 3465 "3465" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-WEILBULL-BPFS" (quote r-weilbull-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "mu-sigma" "S-TE" (list 1000 50)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 317 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 328 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 261 86) (om-make-point 69 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 320 56) (om-make-point 55 30) (list 7 13) "(7 13)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 358 90) (om-make-point 48 30) (list 2 3) "(2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 407 122) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FULL-RANGE" (quote r-full-range) (quote ((om-load-inputfun (quote input-funbox) "CENTS-STEP" "CENTS-STEP" nil))) (om-make-point 163 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 189 143) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 160 292) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 154 347) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-REBUILD-CHORDSEQ" (quote r-rebuild-chordseq) (quote ((om-load-inputfun (quote input-funbox) "instead-of-chordseq-list" "INSTEAD-OF-CHORDSEQ-LIST" (list 0)))) (om-make-point 134 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 79 566) (om-make-point 234 112) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7650) (7750) (7700) (7650) (7600) (7550) (7500) (7450) (7400) (7350) (7300) (7200) (7250) (7300) (7250) (7200) (7150) (7100) (7050))) :lonset (quote (0 199 401 530 650 839 1055 1267 1505 1620 1786 1986 2179 2385 2529 2745 2908 3076 3292 3475)) :ldur (quote ((199) (202) (129) (120) (189) (216) (212) (238) (115) (166) (200) (193) (206) (144) (216) (163) (168) (216) (183))) :lvel (quote ((55) (57) (58) (58) (60) (62) (63) (65) (67) (69) (70) (72) (73) (74) (75) (72) (66) (60) (60))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 278 286) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 142.85715 285.7143 428.57144 571.4286 714.28565 857.1429 1000.0)) (quote (815.3218 884.61335 609.4647 662.1787 414.00693 0.0 1000.0 595.8341)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (3 0 1 1 nil 0) (7 0 1 2 nil 0) (6 0 1 3 nil 0) (4 0 1 4 nil 0) (10 0 1 5 nil 0) (5 0 4 0 nil 0) (1 0 8 0 nil 0) (8 0 9 0 nil 0) (17 0 10 0 nil 0) (18 0 17 0 nil 0) (16 0 18 0 nil 0) (15 0 18 1 nil 0) (14 0 18 2 nil 0) (12 0 18 3 nil 0) (13 0 18 4 nil 0) (11 0 18 5 nil 0) (20 0 19 0 nil 0) (21 0 19 1 nil 0) (31 0 19 2 nil 0) (30 0 19 3 nil 0) (28 0 19 4 nil 0) (34 0 19 5 nil 0) (24 0 22 0 nil 0) (25 0 22 1 nil 0) (26 0 22 2 nil 0) (27 0 22 3 nil 0) (22 0 23 0 nil 0) (29 0 28 0 nil 0) (19 0 32 0 nil 0) (32 0 33 0 nil 0) (23 0 34 0 nil 0))) nil 6.13))
