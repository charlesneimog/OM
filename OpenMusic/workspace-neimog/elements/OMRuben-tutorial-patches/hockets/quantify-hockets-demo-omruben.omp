; OM File Header - Saved 2020/09/23 20:55:26
; (6.13 :patc (om-make-point 334 10) (om-make-point 271 23) (om-make-point 971 677) "" 183 0 nil "2020/09/23 20:55:25")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "quantify-hockets-demo-omruben" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 349) (om-make-point 141 30) (list 9 1 4 10 2 12 17 13) "(9 1 4 10 2 12 17 13)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 0 376) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-HOCKET-MULTISEQ" (quote r-hocket-multiseq) (quote ((om-load-inputfun (quote input-funbox) "list-of-chordseqs" "LIST-OF-CHORDSEQS" nil) (om-load-inputfun (quote input-funbox) "cents-approximation" "CENTS-APPROXIMATION" nil))) (om-make-point 153 233) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 103 129) (quote "Creating a spectral polyphony for retuned orchestra groups. ") "" (om-make-point 25 190) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 187 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "hocket-and-quantify" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chordseqs" nil))) (om-make-point 79 484) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 771 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 898 39) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 846 18) (om-make-point 55 30) (list 8 56) "(8 56)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 773 29) (om-make-point 69 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 774 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-TO-POLY-LEGATO-TIE" (quote r-multiseq-to-poly-legato-tie) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "tempo" "TEMPO" 0) (om-load-inputfun (quote input-funbox) "time-signature-list" "TIME-SIGNATURE-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "multiplication-factor " "MULTIPLICATION-FACTOR" 0) (om-load-inputfun (quote input-funbox) "ms-rest-treshold" "MS-REST-TRESHOLD" 0) (om-load-inputfun (quote input-funbox) "ms-tie-treshold" "MS-TIE-TRESHOLD" 0))) (om-make-point 367 562) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-EXTRACT-PARAM" (quote r-multiseq-extract-param) (quote ((om-load-inputfun (quote input-funbox) "numbers" "CHORDSEQS-LIST" nil))) (om-make-point 184 73) nil nil nil nil 7))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-ADJUST-ONSET-DUR" (quote r-adjust-onset-dur) (quote ((om-load-inputfun (quote input-funbox) "lists-of-onsets" "LISTS-OF-ONSETS" (list 0)) (om-load-inputfun (quote input-funbox) "lists-of-durations" "LISTS-OF-DURATIONS" (list 0)) (om-load-inputfun (quote input-funbox) "min-ms-duration" "MIN-MS-DUR-BETWEEN-NOTES" (list 0)))) (om-make-point 197 182) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-REBUILD-MULTISEQ" (quote r-rebuild-multiseq) (quote ((om-load-inputfun (quote input-funbox) "lists-of-midicents" "LISTS-OF-MIDICENTS" (list 0)) (om-load-inputfun (quote input-funbox) "lists-of-onsets" "LISTS-OF-ONSETS" (list 0)) (om-load-inputfun (quote input-funbox) "lists-of-durations" "LISTS-OF-DURATIONS" (list 0)) (om-load-inputfun (quote input-funbox) "lists-of-velocities" "LISTS-OF-VELOCITIES" (list 0)) (om-load-inputfun (quote input-funbox) "lists-of-offsets" "LISTS-OF-OFFSETS" (list 0)) (om-load-inputfun (quote input-funbox) "lists-of-channels" "LISTS-OF-CHANNELS" (list 0)) (om-load-inputfun (quote input-funbox) "list-of-legato" "LIST-OF-LEGATO" (list 0)))) (om-make-point 121 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-TIME-SCALER" (quote r-time-scaler) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "scaling-factor-minmax" "SCALING-FACTOR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "scaling-bpf-1000x1000" "SCALING-BPF-1000X1000" nil) (om-load-inputfun (quote input-funbox) "window-resolution" "WINDOW-RESOLUTION" nil))) (om-make-point 515 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 574 484) (om-make-point 28 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 531 480) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 577 108) (om-make-point 102 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8766928 3.7382963 5.5848107 7.4162364 9.232573 11.03382 12.819979 14.59105 16.347029 18.087925 19.813727 21.52444 23.220068 24.900605 26.56605 28.216408 29.851675 31.471856 33.076943 34.666943 36.241856 37.801678 39.346413 40.876057 42.390614 43.890084 45.374463 46.84375 48.297947 49.737057 51.16108 52.570015 53.96386 55.342617 56.706284 58.054856 59.38835 60.706746 62.01006 63.29828 64.57141 65.82945 67.07241 68.30028 69.51305 70.71074 71.89334 73.060845 74.21327 75.3506 76.47285 77.58 78.672066 79.74904 80.81093 81.85773 82.889435 83.90605 84.907585 85.89403 86.86538 87.82165 88.76521 89.70733 90.64945 91.59156 92.53369 93.4758 94.417916 95.36005 96.30216 97.24428 98.18639 99.12852 100.070626 101.01275 101.95487 102.89699 103.8391 104.78123 105.72334 106.66545 107.60757 108.5497 109.491806 110.43393 111.37603 112.31817 113.26027 114.20241 115.14452 116.08663 117.02875 117.97087 118.91299 119.85511 120.79721 121.73935 122.68145 123.62358 124.56569 125.50782 126.44994 127.39205 128.33417 129.27629 130.21842 131.16053 132.10265 133.04476 133.98688 134.92899 135.87111 136.81324 137.75534 138.69747 139.63959 140.5817 141.52382 142.46595 143.40805 144.35018 145.2923 146.2344 147.17653 148.11865 149.06076 150.00289 150.945 151.88712 152.82924 153.77136 154.71347 155.6556 156.5977 157.53983 158.48194 159.42406 160.36618 161.3083 162.25041 163.19254 164.13466 165.07677 166.01888 166.96102 167.90312 168.84525 169.78737 170.72946 171.67159 172.61371 173.55583 174.49794 175.44008 176.3822 177.3243 178.26644 179.20856 180.15067 181.09278 182.0349 182.97702 183.91915 184.86125 185.80338 186.74549 187.6876 188.6297 189.57184 190.51396 191.45607 192.3982 193.3403 194.28243 195.22455 196.16666 197.1088 198.0509 198.99301 199.93515 200.87726 201.81937 202.76149 203.70362 204.64572 205.58785 206.52997 207.47208 208.41419 209.35631 210.29843 211.24054 212.18267 213.12479 214.06693 215.00902 215.95113 216.89327 217.83539 218.7775 219.7196 220.66173 221.60388 222.54598 223.48809 224.4302 225.37233 226.31446 227.25655 228.19866 229.14078 230.08292 231.02504 231.96717 232.90929 233.8514 234.79352 235.73561 236.67774 237.61986 238.56197 239.50409 240.44625 241.38834 242.33045 243.27254 244.21469 245.15679 246.09889 247.04105 247.98317 248.92528 249.8674 250.80953 251.75165 252.69376 253.63585 254.578 255.52013 256.46222 257.40433 258.34647 259.28857 260.23068 261.1728 262.11493 263.05707 263.99915 264.9413 265.88342 266.8255 267.76764 268.70978 269.6519 270.594 271.53613 272.47824 273.42035 274.3625 275.3046 276.2467 277.1888 278.13095 279.07306 280.0152 280.9573 281.8994 282.84155 283.78366 284.72577 285.66788 286.61 287.55212 288.49423 289.43637 290.37848 291.3206 292.2627 293.20483 294.14694 295.08905 296.0312 296.9733 297.91544 298.85754 299.79965 300.7418 301.6839 302.626 303.5681 304.51025 305.45236 306.39447 307.3366 308.27872 309.22083 310.16296 311.10507 312.0472 312.98932 313.93143 314.87354 315.81567 316.75778 317.6999 318.64203 319.58417 320.52625 321.46838 322.4105 323.3526 324.29474 325.23685 326.17896 327.12106 328.0632 329.0053 329.94742 330.88956 331.83167 332.77377 333.7159 334.65802 335.60013 336.54227 337.48438 338.42648 339.36862 340.31073 341.25287 342.19498 343.1371 344.07922 345.02133 345.96344 346.90558 347.84766 348.7898 349.73193 350.67404 351.61615 352.55826 353.5004 354.4425 355.38464 356.32672 357.26886 358.211 359.15308 360.0952 361.03732 361.97943 362.92154 363.86368 364.8058 365.74793 366.69003 367.63217 368.57428 369.5164 370.4585 371.40064 372.34274 373.28485 374.227 375.16907 376.1112 377.05334 377.99548 378.93756 379.8797 380.8218 381.76392 382.70605 383.64816 384.59027 385.53238 386.47452 387.41663 388.35876 389.30087 390.24298 391.18512 392.12723 393.06934 394.01144 394.95358 395.89572 396.83783 397.77997 398.72205 399.66418 400.6063 401.54837 402.49054 403.43268 404.37476 405.3169 406.259 407.2011 408.14325 409.08536 410.02747 410.9696 411.9117 412.85382 413.79596 414.73804 415.68018 416.6223 417.56442 418.50653 419.44867 420.39075 421.3329 422.275 423.2171 424.15927 425.10135 426.0435 426.9856 427.92767 428.86984 429.81195 430.7541 431.69617 432.6383 433.5804 434.52252 435.46466 436.40677 437.34888 438.29102 439.23315 440.17523 441.11737 442.05945 443.0016 443.94376 444.88583 445.82797 446.77008 447.71222 448.65433 449.5964 450.53854 451.48065 452.42273 453.36493 454.30698 455.2491 456.19128 457.13336 458.07547 459.0176 459.9597 460.90186 461.844 462.78607 463.72824 464.67032 465.61243 466.55457 467.49664 468.4388 469.38095 470.32303 471.26514 472.2072 473.14935 474.09152 475.0336 475.97574 476.9179 477.85992 478.8021 479.74417 480.6863 481.62842 482.57056 483.51267 484.45474 485.39688 486.33905 487.28113 488.22327 489.16538 490.10745 491.04962 491.9917 492.93384 493.876 494.81802 495.7602 496.70233 497.6444 498.58658 499.52866 500.4708 501.41293 502.35504 503.29718 504.2393 505.18137 506.1235 507.06567 508.00775 508.9499 509.892 510.83408 511.77625 512.7184 513.66047 514.6026 515.5447 516.4868 517.42896 518.37104 519.31324 520.2553 521.1974 522.1395 523.08167 524.02375 524.9659 525.908 526.8501 527.79224 528.7344 529.67646 530.6186 531.5607 532.5028 533.44495 534.387 535.3292 536.2713 537.21344 538.1556 539.09766 540.0398 540.98194 541.9241 542.86615 543.8082 544.75037 545.6925 546.6346 547.5767 548.5188 549.46094 550.4031 551.3452 552.2873 553.22944 554.1716 555.11365 556.0558 556.9979 557.94007 558.88215 559.8242 560.76636 561.7085 562.6506 563.5928 564.5349 565.477 566.4191 567.3612 568.3033 569.2455 570.1875 571.12964 572.0718 573.0139 573.956 574.89814 575.8403 576.7824 577.7245 578.6666 579.6087 580.55085 581.493 582.43506 583.3772 584.31934 585.2615 586.20356 587.1457 588.0878 589.0299 589.97205 590.9142 591.85627 592.79834 593.74054 594.6827 595.62476 596.5669 597.50904 598.4511 599.39325 600.3353 601.27747 602.2196 603.1617 604.1038 605.04596 605.98804 606.9302 607.87226 608.8144 609.75654 610.69867 611.64075 612.5829 613.525 614.4671 615.40925 616.3513 617.29346 618.2356 619.1777 620.1198 621.06196 622.0041 622.9462 623.8883 624.8304 625.7725 626.7146 627.65674 628.5989 629.54096 630.4831 631.4253 632.3674 633.30945 634.25165 635.1937 636.1358 637.07795 638.0201 638.96216 639.9043 640.84644 641.7885 642.7307 643.6728 644.61487 645.557 646.4991 647.4412 648.3834 649.3255 650.2676 651.2098 652.15186 653.09394 654.03614 654.9782 655.9203 656.8624 657.80457 658.74665 659.6888 660.63086 661.573 662.51514 663.4573 664.3994 665.3415 666.28357 667.2257 668.16785 669.11 670.05207 670.9942 671.9363 672.8784 673.82056 674.7627 675.7048 676.64686 677.58905 678.5311 679.47327 680.41535 681.3574 682.29957 683.2417 684.1839 685.126 686.06806 687.0102 687.95234 688.8944 689.83655 690.7787 691.72077 692.66297 693.605 694.5471 695.48926 696.4314 697.3735 698.3156 699.2577 700.1998 701.14197 702.0841 703.02625 703.96827 704.91047 705.85254 706.7947 707.7368 708.6789 709.621 710.5631 711.5052 712.4473 713.3895 714.3316 715.27375 716.2158 717.15796 718.1001 719.04224 719.9843 720.92646 721.8685 722.81067 723.75275 724.69495 725.637 726.57917 727.52124 728.4634 729.4055 730.34754 731.28974 732.2318 733.17395 734.1161 735.0582 736.0003 736.94245 737.8845 738.82666 739.76886 740.71094 741.653 742.59516 743.53724 744.4794 745.4215 746.36365 747.3057 748.24787 749.19 750.1321 751.0742 752.0163 752.95844 753.9005 754.84266 755.78486 756.7269 757.669 758.61115 759.5533 760.4954 761.4375 762.37964 763.3218 764.2639 765.20594 766.14814 767.0902 768.03235 768.9745 769.91657 770.8587 771.8008 772.743 773.68506 774.62714 775.5693 776.5114 777.45356 778.3956 779.33777 780.27985 781.222 782.16407 783.1062 784.04834 784.9905 785.9326 786.8747 787.8169 788.7589 789.70105 790.6432 791.5853 792.5274 793.4695 794.4117 795.35376 796.2959 797.23804 798.1802 799.1222 800.0644 801.0065 801.94855 802.89075 803.83277 804.7749 805.7171 806.6592 807.6013 808.54346 809.4856 810.4276 811.36976 812.3119 813.254 814.19617 815.1383 816.0804 817.0225 817.9646 818.90674 819.8488 820.791 821.7331 822.67524 823.6174 824.5595 825.5016 826.44367 827.3858 828.32795 829.2701 830.21216 831.1543 832.09644 833.0385 833.9806 834.9228 835.86487 836.807 837.74915 838.6912 839.63337 840.57557 841.51764 842.4597 843.40186 844.34394 845.2861 846.2282 847.1703 848.1124 849.05457 849.9967 850.9388 851.8809 852.823 853.7652 854.7073 855.6494 856.5915 857.53357 858.4757 859.4179 860.3599 861.3021 862.2442 863.18634 864.1285 865.07056 866.0127 866.95484 867.897 868.83905 869.7812 870.7233 871.6654 872.60755 873.5496 874.4917 875.4339 876.376 877.31806 878.26026 879.20234 880.1444 881.0867 882.0287 882.9708 883.91285 884.85505 885.7972 886.7393 887.68134 888.6235 889.5656 890.5077 891.4498 892.3921 893.3341 894.2762 895.2184 896.16047 897.1026 898.0446 898.98676 899.9289 900.8711 901.81324 902.75525 903.6974 904.6395 905.58167 906.52375 907.4659 908.4079 909.35004 910.29224 911.2344 912.178 913.13416 914.1056 915.092 916.0933 917.1099 918.1417 919.18854 920.2504 921.3274 922.41944 923.5266 924.6488 925.7862 926.93854 928.106 929.28864 930.4863 931.6991 932.927 934.17 935.4279 936.701 937.9893 939.29255 940.61097 941.9444 943.29297 944.6567 946.03547 947.4293 948.8382 950.26227 951.7013 953.15546 954.62476 956.10914 957.6087 959.1231 960.6528 962.1976 963.7573 965.3323 966.9221 968.5274 970.14747 971.7827 973.43305 975.0985 976.77894 978.47474 980.18525 981.91114 983.652 985.4081 987.179 988.9652 990.7664 992.58277 994.41425 996.2607 998.1223 1000.0)) (quote (18.0 21.73845 25.586432 29.54394 33.61098 37.78755 42.073658 46.46929 50.974457 55.589158 60.31339 65.14715 70.09044 75.143265 80.30562 85.5775 90.95891 96.44985 102.05032 107.76033 113.57985 119.50892 125.54751 131.69565 137.95331 144.32048 150.79721 157.38346 164.07924 170.88455 177.79938 184.82376 191.95766 199.20111 206.55408 214.01657 221.58856 229.27014 237.06122 244.96186 252.97203 261.09168 269.3209 277.65964 286.1079 294.6657 303.33304 312.10992 320.9963 329.99222 339.09772 348.31268 357.6372 367.07126 376.61484 386.26794 396.0306 405.90277 415.88446 425.9757 436.17648 446.48682 456.90662 467.36313 477.5126 487.3108 496.75784 505.85376 514.5985 522.9921 531.03455 538.7258 546.0659 553.0548 559.69257 565.9791 571.9146 577.49884 582.7319 587.6139 592.1446 596.3242 600.1526 603.6299 606.756 609.53095 611.9547 614.0273 615.7487 617.119 618.1381 618.806 619.1228 619.08844 618.7029 617.9662 616.87824 615.4392 613.6489 611.5076 609.0151 606.1714 602.9765 599.4304 595.5332 591.2848 586.6853 581.7346 576.4327 570.77967 564.77546 558.4201 551.71357 544.6558 537.247 529.48694 521.37574 512.9134 504.09988 494.93515 485.41934 475.55225 465.33408 454.76468 443.84418 432.57837 421.42682 410.67825 400.33264 390.39008 380.8504 371.71378 362.98013 354.6494 346.7217 339.197 332.07523 325.35645 319.04068 313.12787 307.61804 302.51123 297.80734 293.50647 289.60858 286.11365 283.02173 280.33276 278.04678 276.1638 274.68378 273.60675 272.9327 272.66162 272.79355 273.32843 274.2663 275.60718 277.351 279.4978 282.0476 285.0004 288.35614 292.1149 296.27664 300.84134 305.80902 311.1797 316.9533 323.12994 329.70956 336.69214 344.07773 351.86627 360.0578 368.65234 377.64984 387.05032 396.85376 407.06018 417.66962 428.682 440.0974 451.91577 464.13712 476.76144 489.78876 503.21906 516.88886 530.304 543.4305 556.2685 568.8178 581.0786 593.0508 604.7345 616.1295 627.236 638.0539 648.58326 658.824 668.7762 678.4397 687.81476 696.90125 705.6991 714.2084 722.42914 730.3612 738.00477 745.35975 752.4262 759.204 765.69324 771.894 777.806 783.42957 788.7645 793.81086 798.5687 803.03797 807.21857 811.11066 814.7141 818.02906 821.05536 823.79316 826.2423 828.4029 830.2749 831.8584 833.15326 834.1596 834.8773 835.30646 835.447 835.299 834.8624 834.1373 833.1236 831.8213 830.23035 828.35096 826.18287 823.72626 820.9811 817.94727 814.62494 811.01404 807.1145 802.934 798.64106 794.30457 789.92444 785.50055 781.0332 776.52216 771.9676 767.3694 762.7276 758.0421 753.3131 748.5405 743.72425 738.8644 733.96094 729.0139 724.0232 718.98896 713.9111 708.78956 703.62446 698.4158 693.16346 687.86756 682.52796 677.1449 671.7181 666.2478 660.73377 655.1762 649.5751 643.9303 638.24195 632.5099 626.7344 620.91517 615.0523 609.1459 603.19587 597.2022 591.1649 585.08417 578.95966 572.7916 566.57996 560.32465 554.02576 547.6832 541.2972 534.8675 528.39417 521.8772 515.3167 508.71262 502.0648 495.37347 488.63852 481.85996 475.0378 468.172 461.26267 454.30966 447.41437 440.7771 434.4033 428.2929 422.44598 416.86246 411.54236 406.48575 401.69257 397.1628 392.8965 388.89365 385.1542 381.6782 378.46564 375.51648 372.83084 370.40857 368.24976 366.3544 364.7225 363.35397 362.24893 361.40732 360.82913 360.5144 360.46314 360.67526 361.15085 361.88983 362.8923 364.15817 365.6875 367.4803 369.5365 371.85614 374.4392 377.28577 380.3957 383.7691 387.40595 391.3062 395.4699 399.8971 404.58765 409.5417 414.75916 420.24005 425.98438 431.9922 438.26343 444.79807 451.59616 458.65775 465.98267 473.5711 481.42288 489.53824 497.91693 506.55908 515.4647 524.6337 534.03156 543.2957 552.32984 561.1338 569.7077 578.0515 586.1652 594.0489 601.70234 609.1258 616.3192 623.2824 630.0156 636.5186 642.7917 648.83454 654.64734 660.23005 665.58265 670.70514 675.5976 680.25995 684.69227 688.8943 692.8664 696.6084 700.1203 703.4021 706.45374 709.2754 711.8669 714.2283 716.3597 718.26087 719.93207 721.3731 722.58405 723.56495 724.31574 724.83637 725.127 725.1875 725.0179 724.6182 723.98847 723.1286 722.0387 720.7186 719.16846 717.3882 715.378 713.1375 710.667 707.9665 705.03577 701.875 698.48414 694.86316 691.0121 686.9309 682.61976 678.07837 673.307 668.4493 663.68805 659.0241 654.45734 649.9879 645.6156 641.3405 637.16266 633.08204 629.09864 625.21235 621.4234 617.7316 614.1371 610.6397 607.23957 603.9367 600.731 597.6226 594.6113 591.69727 588.8805 586.1609 583.5386 581.01337 578.58545 576.2547 574.02124 571.885 569.84595 567.9041 566.05945 564.3121 562.6619 561.1089 559.65314 558.2946 557.0333 555.8692 554.8023 553.8327 552.96027 552.18506 551.507 550.9263 550.4427 550.05634 549.7672 549.57526 549.4806 549.4831 549.5828 549.7798 550.074 550.4654 550.954 551.53986 552.2229 553.0032 553.8806 554.85535 555.92725 557.0786 558.20215 559.28 560.3122 561.2987 562.23957 563.13477 563.9844 564.7883 565.5466 566.25916 566.9261 567.54737 568.1229 568.65296 569.1372 569.5758 569.96875 570.3161 570.61774 570.8738 571.0841 571.2488 571.3678 571.44117 571.4688 571.4509 571.38727 571.278 571.12305 570.9224 570.6762 570.3843 570.0467 569.66346 569.23456 568.76 568.2398 567.67395 567.06244 566.4053 565.70234 564.95386 564.15967 563.3199 562.4344 561.50324 560.5264 559.50397 558.43586 557.322 556.1626 554.9575 553.7067 552.41034 551.06824 549.6805 548.24714 546.76807 545.24335 543.673 542.05695 540.3953 538.70496 536.9993 535.27814 533.5416 531.78974 530.02247 528.23975 526.4417 524.6282 522.7994 520.95514 519.0955 517.2205 515.3301 513.42426 511.50308 509.56653 507.61453 505.6471 503.6644 501.6663 499.6527 497.62375 495.57947 493.51975 491.4446 489.35416 487.24826 485.12692 482.9903 480.83826 478.6708 476.48798 474.28973 472.0761 469.84714 467.60272 465.343 463.06778 460.77716 458.47125 456.1499 453.8131 451.46094 449.09348 446.7105 444.31223 441.8985 439.46945 437.02496 434.56506 432.08984 429.59918 427.09314 424.57172 422.03485 419.48267 416.91504 414.33206 411.73364 409.1199 406.49072 403.8826 401.43265 399.1541 397.04688 395.111 393.3465 391.75333 390.3315 389.081 388.0019 387.09412 386.35767 385.7926 385.3989 385.17654 385.12552 385.24585 385.5375 386.00055 386.6349 387.44064 388.41772 389.56616 390.88596 392.37708 394.03958 395.8734 397.8786 400.0551 402.403 404.92224 407.61282 410.47476 413.50803 416.71265 420.08865 423.636 427.35468 431.2447 435.3061 439.53885 443.9429 448.51837 453.2651 458.18332 463.27277 468.53363 473.96585 479.56934 485.34427 491.29047 497.40808 503.69702 510.1573 516.78894 523.5919 530.5663 537.712 545.02906 552.5174 560.1771 568.00824 576.0042 583.924 591.6455 599.16877 606.4938 613.62037 620.54877 627.2789 633.81067 640.1442 646.2794 652.21644 657.955 663.4955 668.8375 673.98145 678.92695 683.6742 688.22315 692.57386 696.72626 700.68036 704.43616 707.9937 711.35297 714.514 717.4767 720.2411 722.80726 725.1751 727.34467 729.316 731.08887 732.6636 734.04004 735.21814 736.198 736.9796 737.56287 737.9479 738.1346 738.12305 737.9132 737.50507 736.8987 736.09394 735.09095 733.88965 732.4901 730.8923 729.0962 727.10175 724.90906 722.51807 719.92884 717.1413 714.15546 710.9714 707.589 704.0083 700.2294 696.2521 692.07654 687.7407 683.3379 678.8722 674.3437 669.7523 665.098 660.381 655.601 650.7583 645.8526 640.8842 635.8529 630.7587 625.6017 620.3819 615.0992 609.75367 604.3453 598.874 593.33997 587.74305 582.08326 576.36066 570.57514 564.7269 558.8158 552.84174 546.8049 540.7052 534.5427 528.3173 522.0291 515.67804 509.2641 502.78735 496.24777 489.6453 482.98004 476.25183 469.4609 462.60703 455.69037 448.71085 441.6685 434.5633 427.39523 420.1643 412.87058 405.514 398.09454 390.61224 383.0671 375.45914 367.78833 360.05466 352.25815 344.39877 336.47656 328.49152 320.44363 312.33286 304.15927 295.9383 287.89694 280.11026 272.57828 265.30103 258.27853 251.51071 244.9976 238.73926 232.73558 226.98664 221.49242 216.2529 211.26811 206.53804 202.06269 197.84206 193.87613 190.16492 186.70842 183.50666 180.55959 177.86728 175.42963 173.24674 171.31855 169.64507 168.22632 167.06227 166.15296 165.49835 165.09847 164.9533 165.06284 165.4271 166.04608 166.91977 168.04819 169.43132 171.06917 172.96173 175.10901 177.51102 180.16773 183.07917 186.24532 189.66617 193.34175 197.27207 201.45706 205.89679 210.59127 215.54042 220.74431 226.20291 231.9162 237.88425 244.107 250.58448 257.31665 264.30356 271.54517 279.04153 286.6781 294.2724 301.82205 309.32712 316.78748 324.20328 331.5744 338.9009 346.18277 353.42 360.6126 367.76056 374.86392 381.92264 388.93668 395.90613 402.83096 409.71112 416.54663 423.33756 430.0838 436.7855 443.4424 450.0548 456.6226 463.1457 469.62415 476.05795 482.4472 488.79175 495.0917 501.347 507.55765 513.7237 519.8451 525.9219 531.95405 537.9415 543.8844 549.78266 555.6362 561.4452 567.2096 572.9293 578.6044 584.2348 589.8206 595.3618 600.85834 606.31025 611.7175 617.08014 622.3982 627.6715 632.90027 638.0844 643.2239 648.3187 653.3689 658.3745 663.33545 668.2518 673.0967 677.66126 681.9011 685.8162 689.40656 692.6722 695.613 698.22907 700.52045 702.4871 704.12897 705.4461 706.4385 707.1062 707.44904 707.4672 707.1606 706.5293 705.5732 704.29236 702.68677 700.7565 698.5014 695.92164 693.017 689.7877 686.23377 682.3549 678.15137 673.6231 668.77015 663.59235 658.08985 652.2626 646.1106 639.6339 632.83234 625.7061 618.2551 610.47944 602.37897 593.95374 585.2038 576.1291 566.7296 557.00544 546.9565 536.5828 525.8844 514.8612 503.51334 491.8407 479.84326 467.52115 454.8742 441.9026 428.6062 414.98505 401.03918 386.76855 372.17322 357.25308 342.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 863 421) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 620 246) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 488 171) (om-make-point 42 30) (list 5 7) "(5 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 143 65) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 39 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 119 508) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 326 145) (om-make-point 28 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 431 434) (om-make-point 56 30) (list (list 3 4)) "((3 4) )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 288 467) (om-make-point 28 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 467 468) (om-make-point 53 30) 3.5452 "3.5452" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chordseqs" 0 (om-make-point 6 46) "" "chordseqs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 179 589) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 68 579) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (9 0 5 0 nil 0) (20 0 5 1 nil 0) (19 0 5 2 nil 0) (21 0 5 3 nil 0) (11 0 5 4 nil 0) (10 0 5 5 nil 0) (15 0 6 0 nil 0) (6 1 7 0 nil 0) (6 2 7 1 nil 0) (18 0 7 2 nil 0) (6 0 8 0 nil 0) (7 0 8 1 nil 0) (7 1 8 2 nil 0) (6 3 8 3 nil 0) (6 4 8 4 nil 0) (6 5 8 5 nil 0) (6 6 8 6 nil 0) (8 0 9 0 nil 0) (14 0 9 1 nil 0) (12 0 9 2 nil 0) (13 0 9 3 nil 0) (0 0 12 0 nil 0) (16 0 15 0 nil 0) (22 0 16 0 nil 0) (5 0 17 0 nil 0) (17 1 23 0 nil 0) (17 0 24 0 nil 0))) 1 "hocket-and-quantify" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 225 198) (om-make-point 39 30) 12.5 "12.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 300 34) (om-make-point 621 597) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-1 1 1 4)) (1 (1.0)) (1 (1.0)))) ((3 4) ((1 (1.0)) (1 (1.0)) (1 (1.0)))) ((3 4) ((1 (1.0)) (1 (1.0)) (1 (1.0)))) ((3 4) ((1 (1.0)) (1 (1.0)) (1 (1.0)))) ((3 4) ((1 (2.0 2 1 1)) (1 (2.0 2 1 1 1 1)) (1 (2.0 2 -1 1)))) ((3 4) ((1 (1.0 -1 1 -4)) (1 (-3 1 1)) (1 (3.0 -1 2)))) ((3 4) ((1 (3 -1 2)) (1 (1.0 -1 3 1 1)) (1 (1.0 1 1 -1 1 2)))) ((3 4) ((1 (1 2 -1 1)) (1 (1.0 -1 1 -1)) (1 (1 -2 1 -1)))) ((3 4) ((1 (-1 1 -3)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (214)) :lvel (quote (38)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (214)) :lvel (quote (26)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (857)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (250)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (16)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (188)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (188)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (250)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (214)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (300)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (300)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (750)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (643)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (214)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (214)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (214)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (214)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (214)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (429)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (300)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (600)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (300)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (375)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (300)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (300)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (300)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (21/4 (((3 4) ((1 (-1 1 1 1 -3)) (1 (-1)) (1 (3 1)))) ((3 4) ((1 (3.0 1 1 -2)) (1 (-1)) (1 (1 -4)))) ((3 4) ((1 (-1)) (1 (1)) (1 (1.0)))) ((3 4) ((1 (1.0)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (2 -1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (1)) (1 (2.0 -2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5812)) :ldur (quote (214)) :lvel (quote (27)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10612)) :ldur (quote (214)) :lvel (quote (42)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10712)) :ldur (quote (214)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6312)) :ldur (quote (1125)) :lvel (quote (44)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6312)) :ldur (quote (375)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6212)) :ldur (quote (214)) :lvel (quote (22)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10612)) :ldur (quote (214)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9312)) :ldur (quote (300)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6312)) :ldur (quote (1500)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6312)) :ldur (quote (1000)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6312)) :ldur (quote (1500)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (-2 2)) (1 (3.0 -1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1 2)) (1 (1.0)) (1 (3.0 -1)))) ((3 4) ((1 (-1 2)) (1 (1.0)) (1 (1)))) ((3 4) ((1 (1.0 -2 2)) (1 (1.0 -3)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6325)) :ldur (quote (750)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6325)) :ldur (quote (1000)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6325)) :ldur (quote (1000)) :lvel (quote (17)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6325)) :ldur (quote (1500)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6325)) :ldur (quote (600)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-1 1 1 -3)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-2 3)) (1 (1 -2 1)) (1 (1.0 -1 1 1 -2)))) ((3 4) ((1 (-2 1 -1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (2 -2)))) ((3 4) ((1 (-2 2)) (1 (-1)) (1 (-3 1)))) ((3 4) ((1 (1.0 -4)) (1 (-1)) (1 (1 -3)))) ((3 4) ((1 (-1)) (1 (1 -3)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (250)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10938)) :ldur (quote (250)) :lvel (quote (32)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9438)) :ldur (quote (900)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9438)) :ldur (quote (375)) :lvel (quote (15)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9438)) :ldur (quote (375)) :lvel (quote (15)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (250)) :lvel (quote (19)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9438)) :ldur (quote (250)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9438)) :ldur (quote (375)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (750)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (750)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (375)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (375)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (375)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-2 2 1)) (1 (3.0 -2 1)) (1 (1.0 1 -2 1 2 1)))) ((3 4) ((1 (1.0)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-3 1 -1)) (1 (-4 1 -1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1 1 -4)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-3 2)))) ((3 4) ((1 (-1)) (1 (-3 1)) (1 (-1 1 3)))) ((3 4) ((1 (1.0)) (1 (1 -2)) (1 (-2 1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9450)) :ldur (quote (600)) :lvel (quote (36)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9450)) :ldur (quote (300)) :lvel (quote (28)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9450)) :ldur (quote (250)) :lvel (quote (23)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (188)) :lvel (quote (18)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9450)) :ldur (quote (188)) :lvel (quote (22)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (375)) :lvel (quote (15)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9450)) :ldur (quote (188)) :lvel (quote (18)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9450)) :ldur (quote (300)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (250)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (600)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (375)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (300)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (900)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (500)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (500)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (-1 4)) (1 (1.0 1 -1 1 -1)) (1 (-1)))) ((3 4) ((1 (-1 1 1 -4)) (1 (-1 1 1 -1 1 1 1)) (1 (1 -4)))) ((3 4) ((1 (-1)) (1 (-2 1)) (1 (1.0)))) ((3 4) ((1 (1)) (1 (-1 3 -2 1)) (1 (2.0 -2)))) ((3 4) ((1 (3 -2 1)) (1 (2.0 -2 2)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-4 -1.0 1)) (1 (1.0 -3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (1200)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10362)) :ldur (quote (300)) :lvel (quote (26)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9462)) :ldur (quote (300)) :lvel (quote (23)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4162)) :ldur (quote (214)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9762)) :ldur (quote (214)) :lvel (quote (17)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4162)) :ldur (quote (214)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4162)) :ldur (quote (214)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4162)) :ldur (quote (214)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9462)) :ldur (quote (214)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9762)) :ldur (quote (214)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9762)) :ldur (quote (300)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (500)) :lvel (quote (19)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (1500)) :lvel (quote (16)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (643)) :lvel (quote (16)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (214)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (750)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (250)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (500)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6362)) :ldur (quote (250)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (15/4 (((3 4) ((1 (-1 2 1 -2)) (1 (-1)) (1 (1 -4)))) ((3 4) ((1 (-1)) (1 (-4 1)) (1 (1.0 2 -2)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-4 1 -1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-2 1 -4))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (10475)) :ldur (quote (500)) :lvel (quote (34)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9275)) :ldur (quote (250)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10075)) :ldur (quote (300)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10475)) :ldur (quote (300)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10475)) :ldur (quote (600)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9175)) :ldur (quote (250)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8475)) :ldur (quote (214)) :lvel (quote (12)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-1 1 1 1 2 1 1)) (1 (1.0 2 1 2 2 1)) (1 (1.0 -2 2 1)))) ((3 4) ((1 (2.0 -2 1 1 1)) (1 (3.0 2 1 1)) (1 (1.0 2 -2 1 2)))) ((3 4) ((1 (1.0 2 -1 1 -1)) (1 (1 1 -3)) (1 (3 -1)))) ((3 4) ((1 (1 1 -2 1)) (1 (2.0 -2 2)) (1 (1.0 -2 2)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1 1 2)))) ((3 4) ((1 (1.0 -2)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-2 2)) (1 (1.0)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (188)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9288)) :ldur (quote (188)) :lvel (quote (35)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (188)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (375)) :lvel (quote (37)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10588)) :ldur (quote (188)) :lvel (quote (28)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (188)) :lvel (quote (36)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9288)) :ldur (quote (333)) :lvel (quote (39)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (167)) :lvel (quote (37)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (333)) :lvel (quote (29)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9288)) :ldur (quote (333)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (167)) :lvel (quote (27)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (500)) :lvel (quote (23)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9288)) :ldur (quote (250)) :lvel (quote (24)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9288)) :ldur (quote (214)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (214)) :lvel (quote (23)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (214)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (429)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9288)) :ldur (quote (214)) :lvel (quote (15)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (214)) :lvel (quote (16)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9288)) :ldur (quote (375)) :lvel (quote (17)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9288)) :ldur (quote (188)) :lvel (quote (14)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (375)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (500)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (250)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (300)) :lvel (quote (17)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10088)) :ldur (quote (300)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (1125)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (300)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (300)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (300)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (500)) :lvel (quote (13)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (600)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6288)) :ldur (quote (375)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7788)) :ldur (quote (750)) :lvel (quote (15)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (750)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (cursor-mode palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list (quote :normal) 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 770 720) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 16 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 83 55) (om-make-point 170 136) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5810) (6336) (7794) (8286) (8466) (8696) (9094) (9290) (10086) (10480) (10616) (10718) (10942) (9184) (6322) (9278) (9452) (10586) (10084) (9288) (9456) (10364) (9186) (10086) (9286) (9464) (10084) (9446) (6312) (10080) (7054) (10084) (9450) (7056) (9286) (6318) (9452) (6214) (10616) (4164) (9286) (9764) (10084) (9188) (9442) (10084) (9442) (4164) (9290) (4164) (10086) (9284) (4164) (9318) (9460) (9764) (10480) (9442) (9762) (9288) (10480) (9188) (6342) (10084) (9442) (10084) (9444) (9184) (6312) (10086) (9440) (8466) (6348) (9188) (9188) (9186) (8466) (9188) (6322) (9180) (8466) (9188) (6244) (8466) (9190) (6308) (8468) (6330) (8468) (9096) (9096) (6304) (8468) (9096) (9096) (5802) (6320) (5800) (9096) (8470) (6342) (9096) (6322) (9096) (9096) (6288) (7792) (6332) (6360) (6302) (7794) (6346) (7796) (6332) (7796) (7796) (6308) (6350) (7796) (7054) (8286) (8698) (6334) (7796) (7056) (8696) (8698) (8698) (7796) (8698) (7796) (7056) (7796) (6340) (7796) (7056) (7796) (7796) (7796))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 4998 5039 5056 5056 5068 5074 5108 5178 5201 5312 5352 5404 5497 5561 5654 5741 5799 5950 6107 6124)) :ldur (quote ((3419) (12) (3936) (4894) (1683) (4975) (3071) (29) (35) (1045) (691) (23) (29) (163) (342) (29) (81) (17) (75) (70) (110) (17) (493) (64) (139) (41) (46) (186) (163) (12) (17) (70) (17) (4348) (70) (969) (104) (12) (12) (12) (157) (17) (58) (389) (93) (58) (46) (12) (17) (23) (52) (52) (3489) (17) (29) (23) (52) (41) (17) (99) (52) (308) (17) (52) (29) (29) (41) (157) (650) (17) (52) (383) (17) (99) (29) (23) (174) (64) (418) (12) (93) (75) (12) (145) (75) (163) (116) (255) (104) (70) (52) (157) (52) (58) (75) (23) (110) (12) (64) (35) (75) (64) (128) (46) (17) (12) (267) (58) (41) (41) (104) (52) (93) (46) (99) (93) (23) (35) (93) (41) (215) (12) (35) (75) (209) (12) (12) (12) (70) (12) (64) (134) (64) (17) (46) (87) (46) (35) (17))) :lvel (quote ((27) (46) (38) (40) (31) (26) (33) (35) (46) (34) (42) (31) (32) (37) (46) (31) (36) (28) (36) (39) (28) (26) (37) (29) (30) (23) (27) (23) (44) (21) (18) (23) (22) (15) (24) (33) (18) (22) (14) (14) (20) (17) (23) (20) (20) (20) (15) (14) (15) (14) (16) (17) (12) (13) (13) (11) (12) (15) (14) (14) (13) (20) (19) (13) (13) (11) (11) (17) (25) (11) (12) (19) (13) (13) (11) (11) (16) (13) (20) (11) (16) (13) (10) (13) (11) (20) (13) (17) (12) (11) (11) (16) (12) (11) (11) (11) (14) (11) (11) (12) (14) (11) (14) (10) (10) (11) (15) (14) (11) (12) (14) (14) (14) (13) (13) (13) (11) (11) (13) (10) (11) (11) (12) (13) (11) (10) (11) (11) (12) (10) (12) (11) (11) (10) (11) (10) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (cursor-mode palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list (quote :normal) 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 742 405) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff)) 16 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 43) (quote "A Tam-tam spectrum") "" (om-make-point 83 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 1 1 0 nil 0) (0 0 1 1 nil 0) (8 1 2 0 nil 0) (6 0 2 1 nil 0) (5 0 4 0 nil 0) (1 0 5 0 nil 0) (4 0 7 1 nil 0))) nil 6.13))
