; OM File Header - Saved 2020/09/23 20:55:26
; (6.13 :patc (om-make-point 334 10) (om-make-point 396 42) (om-make-point 884 685) "" 183 0 nil "2020/09/23 20:55:25")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "hocket-spectrum-demo-omruben" (quote ((let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 156 347) (om-make-point 23 28) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNEL-MULTISEQ 2" (quote r-apply-channel-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channel" "CHANNEL" nil))) (om-make-point 33 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 324 337) (om-make-point 23 28) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNEL-MULTISEQ" (quote r-apply-channel-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channel" "CHANNEL" nil))) (om-make-point 182 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 763 284) (om-make-point 91 30) (list 9 10 12 17) "(9 10 12 17)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ 2" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 671 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 538 298) (om-make-point 91 30) (list 9 10 12 17) "(9 10 12 17)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 453 329) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-HOCKET-MULTISEQ 3" (quote r-hocket-multiseq) (quote ((om-load-inputfun (quote input-funbox) "list-of-chordseqs" "LIST-OF-CHORDSEQS" nil) (om-load-inputfun (quote input-funbox) "cents-approximation" "CENTS-APPROXIMATION" nil))) (om-make-point 119 252) (om-make-point 109 59) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-HOCKET-MULTISEQ 2" (quote r-hocket-multiseq) (quote ((om-load-inputfun (quote input-funbox) "list-of-chordseqs" "LIST-OF-CHORDSEQS" nil) (om-load-inputfun (quote input-funbox) "cents-approximation" "CENTS-APPROXIMATION" nil))) (om-make-point 404 250) (om-make-point 109 59) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-HOCKET-MULTISEQ" (quote r-hocket-multiseq) (quote ((om-load-inputfun (quote input-funbox) "list-of-chordseqs" "LIST-OF-CHORDSEQS" nil) (om-load-inputfun (quote input-funbox) "cents-approximation" "CENTS-APPROXIMATION" nil))) (om-make-point 626 241) (om-make-point 109 59) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 119 58) (quote "Separation of 1/16-tones into 8 layers") "" (om-make-point 512 209) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 675 198) (om-make-point 39 30) 12.5 "12.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 5" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 642 403) (om-make-point 97 273) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8700) (9100) (9100) (9100) (6300) (9100) (9100) (5800) (5800) (9100) (9100) (9100) (9100) (6300) (7800) (7800) (7800) (7800) (7800) (8700) (7800) (8700) (8700) (8700) (7800) (8700) (7800) (7800) (7800) (7800) (7800) (7800))) :lonset (quote (46 46 46 3146 3262 3286 3373 3466 3483 3541 3576 3680 3802 3918 4272 4313 4464 4603 4754 4905 5039 5056 5074 5108 5178 5201 5312 5352 5497 5654 5799 5950 6107 6124)) :ldur (quote ((3936) (4975) (3071) (70) (52) (157) (58) (75) (23) (12) (64) (64) (46) (17) (41) (104) (93) (99) (93) (93) (12) (75) (12) (12) (12) (70) (12) (64) (64) (46) (46) (35) (17))) :lvel (quote ((38) (26) (33) (11) (11) (16) (11) (11) (11) (11) (11) (11) (10) (10) (12) (14) (14) (13) (13) (13) (11) (13) (10) (11) (11) (12) (10) (12) (11) (11) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5812) (10612) (10712) (6312) (6312) (6212) (10612) (9312) (6312) (6312) (6312))) :lonset (quote (46 46 64 459 650 743 766 1138 1625 2810 4766 4789)) :ldur (quote ((3419) (691) (23) (163) (969) (12) (12) (17) (650) (163) (23))) :lvel (quote ((27) (42) (31) (44) (33) (22) (14) (13) (25) (20) (11))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6325) (6325) (6325) (6325) (6325))) :lonset (quote (93 2322 2978 3512 3785 3913)) :ldur (quote ((342) (418) (255) (110) (128))) :lvel (quote ((46) (20) (17) (14) (14))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6338) (10938) (9438) (9438) (9438) (6338) (9438) (9438) (6338) (6338) (6338) (6338) (6338))) :lonset (quote (46 75 882 1010 1225 1324 1364 1654 3645 4052 4557 5056 5561 5578)) :ldur (quote ((12) (29) (93) (46) (41) (17) (29) (52) (75) (58) (46) (35) (17))) :lvel (quote ((46) (32) (20) (15) (15) (19) (13) (12) (14) (14) (13) (12) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9450) (9450) (9450) (7050) (9450) (7050) (9450) (9450) (6350) (6250) (6350) (6350) (7050) (7050) (7050) (7050))) :lonset (quote (110 232 441 511 621 627 708 1532 1805 2508 4354 4859 4992 5068 5404 5741 5828)) :ldur (quote ((81) (110) (186) (17) (17) (4348) (104) (41) (17) (12) (52) (35) (41) (209) (134) (87))) :lvel (quote ((36) (28) (23) (18) (22) (15) (18) (11) (13) (10) (14) (11) (10) (11) (11) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8462) (10362) (9462) (4162) (9762) (4162) (4162) (4162) (9462) (9762) (9762) (8462) (8462) (8462) (8462) (8462) (8462) (8462) (6362))) :lonset (quote (46 267 360 778 795 1016 1062 1132 1155 1167 1236 1759 2206 2473 2653 2897 3129 3349 4162 4621)) :ldur (quote ((1683) (17) (41) (12) (17) (12) (23) (3489) (29) (23) (17) (383) (174) (93) (145) (116) (104) (52) (41))) :lvel (quote ((31) (26) (23) (14) (17) (14) (14) (12) (13) (11) (14) (19) (16) (16) (13) (13) (12) (12) (11))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10475) (9275) (10075) (10475) (10475) (9175) (8475))) :lonset (quote (46 93 493 1190 1260 2421 3605 3640)) :ldur (quote ((1045) (29) (12) (52) (52) (12) (35))) :lvel (quote ((34) (31) (21) (12) (13) (11) (12))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8288) (9288) (10088) (9188) (10588) (10088) (9288) (9188) (10088) (9288) (10088) (10088) (9288) (9288) (10088) (9188) (10088) (9288) (10088) (9288) (9288) (9188) (10088) (10088) (9188) (10088) (9188) (9188) (9188) (9188) (9188) (9188) (6288) (7788) (8288))) :lonset (quote (46 46 46 81 128 151 197 273 290 348 406 540 633 784 818 830 952 1051 1080 1097 1248 1271 1358 1486 1602 1631 1840 2119 2188 2310 2485 2664 4005 4005 4998 5213)) :ldur (quote ((4894) (29) (35) (163) (17) (75) (70) (493) (64) (139) (46) (70) (70) (157) (58) (389) (58) (17) (52) (52) (99) (308) (52) (29) (157) (17) (99) (29) (23) (64) (75) (75) (12) (267) (215))) :lvel (quote ((40) (35) (46) (37) (28) (36) (39) (37) (29) (30) (27) (23) (24) (20) (23) (20) (20) (15) (16) (17) (14) (20) (13) (11) (17) (11) (13) (11) (11) (13) (13) (11) (11) (15) (11))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx cursor-mode)) (list 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 727 676) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 16 16 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 126 75) (quote "Separation of 1/4-tones into 2 layers") "" (om-make-point 33 209) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 117 62) (quote "Original pitches") "" (om-make-point 0 275) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 119 58) (quote "Approximated to this resolution") "" (om-make-point 252 273) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 119 58) (quote "Separation of 1/8-tones into 4 layers") "" (om-make-point 292 209) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 258 116) (quote "hocket-multiseq seperates $microtones into the appropriate number of retuned orchestra groups,$like in orchestra works by Murail.$This will work with any division smaller than a semitone. ") "" (om-make-point 269 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 4" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 380 403) (om-make-point 97 273) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5800) (7800) (8700) (9100) (9300) (9300) (6300) (9200) (9300) (9300) (9200) (6300) (9200) (9200) (9200) (9200) (9200) (6300) (9100) (9100) (6300) (9100) (9100) (5800) (5800) (9100) (9100) (9100) (9100) (6300) (7800) (6300) (7800) (7800) (7800) (7800) (6300) (7800) (8700) (7800) (8700) (8700) (8700) (7800) (8700) (7800) (7800) (7800) (7800) (7800) (7800))) :lonset (quote (46 46 46 46 46 197 459 830 1051 1248 1271 1625 1840 2119 2310 2485 2664 2810 3146 3262 3286 3373 3466 3483 3541 3576 3680 3802 3918 4005 4005 4272 4313 4464 4603 4754 4766 4905 5039 5056 5074 5108 5178 5201 5312 5352 5497 5654 5799 5950 6107 6124)) :ldur (quote ((3419) (3936) (4975) (3071) (29) (70) (163) (389) (17) (99) (308) (650) (99) (29) (64) (75) (75) (163) (70) (52) (157) (58) (75) (23) (12) (64) (64) (46) (17) (12) (267) (41) (104) (93) (99) (93) (23) (93) (12) (75) (12) (12) (12) (70) (12) (64) (64) (46) (46) (35) (17))) :lvel (quote ((27) (38) (26) (33) (35) (39) (44) (20) (15) (14) (20) (25) (13) (11) (13) (13) (11) (20) (11) (11) (16) (11) (11) (11) (11) (11) (11) (10) (10) (11) (15) (12) (14) (14) (13) (13) (11) (13) (11) (13) (10) (11) (11) (12) (10) (12) (11) (11) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6325) (10625) (10725) (6325) (6325) (6225) (10625) (9325) (6325) (6325) (6325) (6325) (6325) (6325) (6325))) :lonset (quote (46 46 64 93 650 743 766 1138 2322 2978 3512 3785 4052 4557 5056 5091)) :ldur (quote ((12) (691) (23) (342) (969) (12) (12) (17) (418) (255) (110) (128) (58) (46) (35))) :lvel (quote ((46) (42) (31) (46) (33) (22) (14) (13) (20) (17) (14) (14) (14) (13) (12))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10950) (9450) (9450) (9450) (7050) (9450) (7050) (9450) (9450) (9450) (9450) (9450) (9750) (6350) (9450) (9450) (9450) (6350) (6250) (6350) (6350) (6350) (6350) (7050) (7050) (7050) (6350) (7050))) :lonset (quote (75 110 232 441 511 621 627 708 882 1010 1155 1225 1236 1324 1364 1532 1654 1805 2508 3645 4162 4354 4859 4992 5068 5404 5561 5741 5828)) :ldur (quote ((29) (81) (110) (186) (17) (17) (4348) (104) (93) (46) (29) (41) (17) (17) (29) (41) (52) (17) (12) (75) (41) (52) (35) (41) (209) (134) (17) (87))) :lvel (quote ((32) (36) (28) (23) (18) (22) (15) (18) (20) (15) (13) (15) (14) (19) (13) (11) (12) (13) (10) (14) (11) (14) (11) (10) (11) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8275) (8475) (10075) (10475) (9175) (9275) (10575) (10075) (10375) (9175) (10075) (9275) (9475) (10075) (10075) (10075) (9275) (4175) (9275) (9775) (10075) (10075) (4175) (4175) (10075) (9275) (4175) (9775) (10475) (10475) (10075) (10075) (9175) (10075) (8475) (9175) (8475) (9175) (8475) (8475) (8475) (8475) (8475) (8475) (8275))) :lonset (quote (46 46 46 46 81 93 128 151 267 273 290 348 360 406 493 540 633 778 784 795 818 952 1016 1062 1080 1097 1132 1167 1190 1260 1358 1486 1602 1631 1759 2188 2206 2421 2473 2653 2897 3129 3349 3605 4998 5213)) :ldur (quote ((4894) (1683) (35) (1045) (163) (29) (17) (75) (17) (493) (64) (139) (41) (46) (12) (70) (70) (12) (157) (17) (58) (58) (12) (23) (52) (52) (3489) (23) (52) (52) (52) (29) (157) (17) (383) (23) (174) (12) (93) (145) (116) (104) (52) (35) (215))) :lvel (quote ((40) (31) (46) (34) (37) (31) (28) (36) (26) (37) (29) (30) (23) (27) (21) (23) (24) (14) (20) (17) (23) (20) (14) (14) (16) (17) (12) (11) (12) (13) (13) (11) (17) (11) (19) (11) (16) (11) (16) (13) (13) (12) (12) (12) (11))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx cursor-mode)) (list 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 773 720) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 16 16 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 460 210) (om-make-point 28 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 3" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 190 410) (om-make-point 97 273) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5800) (7800) (8300) (8700) (9100) (9300) (10100) (10500) (10600) (10700) (9200) (6300) (9300) (10600) (10100) (9300) (9200) (10100) (9300) (10100) (6300) (10100) (10100) (9300) (6300) (6200) (10600) (9300) (10100) (9200) (10100) (9300) (10100) (9300) (9300) (10500) (9300) (10500) (9200) (10100) (10100) (9200) (6300) (10100) (9200) (9200) (9200) (9200) (6300) (9200) (9200) (9200) (6300) (9100) (9100) (6300) (9100) (9100) (5800) (6300) (5800) (9100) (9100) (6300) (9100) (9100) (6300) (7800) (6300) (7800) (7800) (7800) (7800) (6300) (7800) (8300) (8700) (7800) (8700) (8700) (8700) (7800) (8700) (7800) (7800) (7800) (7800) (7800) (7800))) :lonset (quote (46 46 46 46 46 46 46 46 46 64 81 93 93 128 151 197 273 290 348 406 459 493 540 633 650 743 766 784 818 830 952 1051 1080 1097 1138 1190 1248 1260 1271 1358 1486 1602 1625 1631 1840 2119 2188 2310 2322 2421 2485 2664 2810 3146 3262 3286 3373 3466 3483 3512 3541 3576 3680 3785 3802 3918 4005 4005 4272 4313 4464 4603 4754 4766 4905 4998 5039 5056 5074 5108 5178 5201 5312 5352 5497 5654 5799 5950 6107 6124)) :ldur (quote ((3419) (3936) (4894) (4975) (3071) (29) (35) (1045) (691) (23) (163) (342) (29) (17) (75) (70) (493) (64) (139) (46) (163) (12) (70) (70) (969) (12) (12) (157) (58) (389) (58) (17) (52) (52) (17) (52) (99) (52) (308) (52) (29) (157) (650) (17) (99) (29) (23) (64) (418) (12) (75) (75) (163) (70) (52) (157) (58) (75) (23) (110) (12) (64) (64) (128) (46) (17) (12) (267) (41) (104) (93) (99) (93) (23) (93) (215) (12) (75) (12) (12) (12) (70) (12) (64) (64) (46) (46) (35) (17))) :lvel (quote ((27) (38) (40) (26) (33) (35) (46) (34) (42) (31) (37) (46) (31) (28) (36) (39) (37) (29) (30) (27) (44) (21) (23) (24) (33) (22) (14) (20) (23) (20) (20) (15) (16) (17) (13) (12) (14) (13) (20) (13) (11) (17) (25) (11) (13) (11) (11) (13) (20) (11) (13) (11) (20) (11) (11) (16) (11) (11) (11) (14) (11) (11) (11) (14) (10) (10) (11) (15) (12) (14) (14) (13) (13) (11) (13) (11) (11) (13) (10) (11) (11) (12) (10) (12) (11) (11) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6350) (8450) (10950) (9450) (9450) (10350) (9450) (9450) (7050) (9450) (7050) (9450) (4150) (9750) (9450) (9450) (4150) (4150) (4150) (9450) (9750) (9450) (9750) (6350) (9450) (9450) (9450) (8450) (6350) (8450) (8450) (6250) (8450) (8450) (6350) (8450) (8450) (8450) (6350) (6350) (6350) (6350) (6350) (6350) (7050) (6350) (7050) (7050) (6350) (7050))) :lonset (quote (46 46 75 110 232 267 360 441 511 621 627 708 778 795 882 1010 1016 1062 1132 1155 1167 1225 1236 1324 1364 1532 1654 1759 1805 2206 2473 2508 2653 2897 2978 3129 3349 3605 3645 4052 4162 4354 4557 4859 4992 5056 5068 5404 5561 5741 5828)) :ldur (quote ((12) (1683) (29) (81) (110) (17) (41) (186) (17) (17) (4348) (104) (12) (17) (93) (46) (12) (23) (3489) (29) (23) (41) (17) (17) (29) (41) (52) (383) (17) (174) (93) (12) (145) (116) (255) (104) (52) (35) (75) (58) (41) (52) (46) (35) (41) (35) (209) (134) (17) (87))) :lvel (quote ((46) (31) (32) (36) (28) (26) (23) (23) (18) (22) (15) (18) (14) (17) (20) (15) (14) (14) (12) (13) (11) (15) (14) (19) (13) (11) (12) (19) (13) (16) (16) (10) (13) (13) (17) (12) (12) (12) (14) (14) (11) (14) (13) (11) (10) (12) (11) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 538 115) (om-make-point 742 405) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff)) 16 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 198 203) (om-make-point 28 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 44 410) (om-make-point 97 273) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5810) (7794) (8286) (8696) (9094) (9290) (10086) (10480) (10616) (10718) (9184) (6322) (9278) (10586) (10084) (9288) (9186) (10086) (9286) (10084) (6312) (10080) (10084) (9286) (6318) (6214) (10616) (9286) (10084) (9188) (10084) (9290) (10086) (9284) (9318) (10480) (9288) (10480) (9188) (10084) (10084) (9184) (6312) (10086) (9188) (9188) (9186) (9188) (6322) (9180) (9188) (9190) (6308) (9096) (9096) (6304) (9096) (9096) (5802) (6320) (5800) (9096) (9096) (6322) (9096) (9096) (6288) (7792) (6302) (7794) (7796) (7796) (7796) (6308) (7796) (8286) (8698) (7796) (8696) (8698) (8698) (7796) (8698) (7796) (7796) (7796) (7796) (7796) (7796))) :lonset (quote (46 46 46 46 46 46 46 46 46 64 81 93 93 128 151 197 273 290 348 406 459 493 540 633 650 743 766 784 818 830 952 1051 1080 1097 1138 1190 1248 1260 1271 1358 1486 1602 1625 1631 1840 2119 2188 2310 2322 2421 2485 2664 2810 3146 3262 3286 3373 3466 3483 3512 3541 3576 3680 3785 3802 3918 4005 4005 4272 4313 4464 4603 4754 4766 4905 4998 5039 5056 5074 5108 5178 5201 5312 5352 5497 5654 5799 5950 6107 6124)) :ldur (quote ((3419) (3936) (4894) (4975) (3071) (29) (35) (1045) (691) (23) (163) (342) (29) (17) (75) (70) (493) (64) (139) (46) (163) (12) (70) (70) (969) (12) (12) (157) (58) (389) (58) (17) (52) (52) (17) (52) (99) (52) (308) (52) (29) (157) (650) (17) (99) (29) (23) (64) (418) (12) (75) (75) (163) (70) (52) (157) (58) (75) (23) (110) (12) (64) (64) (128) (46) (17) (12) (267) (41) (104) (93) (99) (93) (23) (93) (215) (12) (75) (12) (12) (12) (70) (12) (64) (64) (46) (46) (35) (17))) :lvel (quote ((27) (38) (40) (26) (33) (35) (46) (34) (42) (31) (37) (46) (31) (28) (36) (39) (37) (29) (30) (27) (44) (21) (23) (24) (33) (22) (14) (20) (23) (20) (20) (15) (16) (17) (13) (12) (14) (13) (20) (13) (11) (17) (25) (11) (13) (11) (11) (13) (20) (11) (13) (11) (20) (11) (11) (16) (11) (11) (11) (14) (11) (11) (11) (14) (10) (10) (11) (15) (12) (14) (14) (13) (13) (11) (13) (11) (11) (13) (10) (11) (11) (12) (10) (12) (11) (11) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6336) (8466) (10942) (9452) (9456) (10364) (9464) (9446) (7054) (9450) (7056) (9452) (4164) (9764) (9442) (9442) (4164) (4164) (4164) (9460) (9764) (9442) (9762) (6342) (9442) (9444) (9440) (8466) (6348) (8466) (8466) (6244) (8466) (8468) (6330) (8468) (8468) (8470) (6342) (6332) (6360) (6346) (6332) (6350) (7054) (6334) (7056) (7056) (6340) (7056))) :lonset (quote (46 46 75 110 232 267 360 441 511 621 627 708 778 795 882 1010 1016 1062 1132 1155 1167 1225 1236 1324 1364 1532 1654 1759 1805 2206 2473 2508 2653 2897 2978 3129 3349 3605 3645 4052 4162 4354 4557 4859 4992 5056 5068 5404 5561 5741 5828)) :ldur (quote ((12) (1683) (29) (81) (110) (17) (41) (186) (17) (17) (4348) (104) (12) (17) (93) (46) (12) (23) (3489) (29) (23) (41) (17) (17) (29) (41) (52) (383) (17) (174) (93) (12) (145) (116) (255) (104) (52) (35) (75) (58) (41) (52) (46) (35) (41) (35) (209) (134) (17) (87))) :lvel (quote ((46) (31) (32) (36) (28) (26) (23) (23) (18) (22) (15) (18) (14) (17) (20) (15) (14) (14) (12) (13) (11) (15) (14) (19) (13) (11) (12) (19) (13) (16) (16) (10) (13) (13) (17) (12) (12) (12) (14) (14) (11) (14) (13) (11) (10) (12) (11) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 742 405) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff)) 16 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 82 45) (om-make-point 170 136) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5810) (6336) (7794) (8286) (8466) (8696) (9094) (9290) (10086) (10480) (10616) (10718) (10942) (9184) (6322) (9278) (9452) (10586) (10084) (9288) (9456) (10364) (9186) (10086) (9286) (9464) (10084) (9446) (6312) (10080) (7054) (10084) (9450) (7056) (9286) (6318) (9452) (6214) (10616) (4164) (9286) (9764) (10084) (9188) (9442) (10084) (9442) (4164) (9290) (4164) (10086) (9284) (4164) (9318) (9460) (9764) (10480) (9442) (9762) (9288) (10480) (9188) (6342) (10084) (9442) (10084) (9444) (9184) (6312) (10086) (9440) (8466) (6348) (9188) (9188) (9186) (8466) (9188) (6322) (9180) (8466) (9188) (6244) (8466) (9190) (6308) (8468) (6330) (8468) (9096) (9096) (6304) (8468) (9096) (9096) (5802) (6320) (5800) (9096) (8470) (6342) (9096) (6322) (9096) (9096) (6288) (7792) (6332) (6360) (6302) (7794) (6346) (7796) (6332) (7796) (7796) (6308) (6350) (7796) (7054) (8286) (8698) (6334) (7796) (7056) (8696) (8698) (8698) (7796) (8698) (7796) (7056) (7796) (6340) (7796) (7056) (7796) (7796) (7796))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 4998 5039 5056 5056 5068 5074 5108 5178 5201 5312 5352 5404 5497 5561 5654 5741 5799 5950 6107 6124)) :ldur (quote ((3419) (12) (3936) (4894) (1683) (4975) (3071) (29) (35) (1045) (691) (23) (29) (163) (342) (29) (81) (17) (75) (70) (110) (17) (493) (64) (139) (41) (46) (186) (163) (12) (17) (70) (17) (4348) (70) (969) (104) (12) (12) (12) (157) (17) (58) (389) (93) (58) (46) (12) (17) (23) (52) (52) (3489) (17) (29) (23) (52) (41) (17) (99) (52) (308) (17) (52) (29) (29) (41) (157) (650) (17) (52) (383) (17) (99) (29) (23) (174) (64) (418) (12) (93) (75) (12) (145) (75) (163) (116) (255) (104) (70) (52) (157) (52) (58) (75) (23) (110) (12) (64) (35) (75) (64) (128) (46) (17) (12) (267) (58) (41) (41) (104) (52) (93) (46) (99) (93) (23) (35) (93) (41) (215) (12) (35) (75) (209) (12) (12) (12) (70) (12) (64) (134) (64) (17) (46) (87) (46) (35) (17))) :lvel (quote ((27) (46) (38) (40) (31) (26) (33) (35) (46) (34) (42) (31) (32) (37) (46) (31) (36) (28) (36) (39) (28) (26) (37) (29) (30) (23) (27) (23) (44) (21) (18) (23) (22) (15) (24) (33) (18) (22) (14) (14) (20) (17) (23) (20) (20) (20) (15) (14) (15) (14) (16) (17) (12) (13) (13) (11) (12) (15) (14) (14) (13) (20) (19) (13) (13) (11) (11) (17) (25) (11) (12) (19) (13) (13) (11) (11) (16) (13) (20) (11) (16) (13) (10) (13) (11) (20) (13) (17) (12) (11) (11) (16) (12) (11) (11) (11) (14) (11) (11) (12) (14) (11) (14) (10) (10) (11) (15) (14) (11) (12) (14) (14) (14) (13) (13) (13) (11) (11) (13) (10) (11) (11) (12) (13) (11) (10) (11) (11) (12) (10) (12) (11) (11) (10) (11) (10) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 742 405) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff)) 16 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 43) (quote "A Tam-tam spectrum") "" (om-make-point 85 12) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 1 0 nil 0) (0 0 1 1 nil 0) (8 1 3 0 nil 0) (2 0 3 1 nil 0) (10 1 5 0 nil 0) (4 0 5 1 nil 0) (9 1 7 0 nil 0) (6 0 7 1 nil 0) (24 1 8 0 nil 0) (22 0 8 1 nil 0) (24 1 9 0 nil 0) (20 0 9 1 nil 0) (24 1 10 0 nil 0) (12 0 10 1 nil 0) (5 0 13 1 nil 0) (7 0 19 1 nil 0) (3 0 21 1 nil 0) (1 0 23 1 nil 0))) nil 6.13))
