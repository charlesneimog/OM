; OM File Header - Saved 2020/09/23 20:55:26
; (6.13 :patc (om-make-point 10 210) (om-make-point 223 23) (om-make-point 1057 720) "" 183 0 nil "2020/09/23 20:55:25")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "channel-hocketing-demo" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 220 68) (quote "For orchestral setup, play these multichannels scores with R-udp-player.") "" (om-make-point 777 296) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GENERAL-BPF-MELODY 2" (quote r-general-bpf-melody) (quote ((om-load-inputfun (quote input-funbox) "midicents-range-minmax" "MIDICENTS-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil) (om-load-inputfun (quote input-funbox) "cents-interval-size" "CENTS-INTERVAL-SIZE" nil) (om-load-inputfun (quote input-funbox) "instrumental-range-midicents" "INSTRUMENTAL-RANGE-MIDICENTS" nil))) (om-make-point 42 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FULL-RANGE" (quote r-full-range) (quote ((om-load-inputfun (quote input-funbox) "NOTHING" "NOTHING" nil))) (om-make-point 220 44) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-REBUILD-CHORDSEQ" (quote r-rebuild-chordseq) (quote ((om-load-inputfun (quote input-funbox) "instead-of-chordseq-list" "INSTEAD-OF-CHORDSEQ-LIST" (list 0)))) (om-make-point 74 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS 2" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 230 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-CHANNEL-BPF-MULTISEQ" (quote r-channel-bpf-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "minmax-channel" "MINMAX-CHANNEL" nil) (om-load-inputfun (quote input-funbox) "bpfs-list" "BPFS-LIST" nil))) (om-make-point 158 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-CHANNEL-HOCKET-MULTISEQ" (quote r-channel-hocket-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil))) (om-make-point 511 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 352 172) (quote "r-channel-bpf-multiseq changes channels in a melody after a bpf-curve. channel-hocket-multiseq splits each$channel into a voice. If the the parts are organized from the most sustained to the most percussive sound, this $is a way of creating timbre melody, and for synthesis $a method to create trajectories for choice of samples.") "" (om-make-point 370 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 372 326) (om-make-point 349 312) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4775) (6250) (8800) (10450) (7075) (9900) (7325) (3850))) :lonset (quote (16975 17038 17110 17188 18046 21778 26143 31510 31604)) :ldur (quote ((63) (72) (78) (83) (96) (43) (100) (94))) :lvel (quote ((72) (72) (72) (72) (73) (71) (65) (62))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4950) (7600) (5375) (9700) (7350) (4500) (3900) (8925) (6950) (3975) (6575) (4575) (4325) (3925) (6250) (8200))) :lonset (quote (207 245 12433 12505 12586 12678 16868 16920 17271 17953 19564 21821 31415 31604 33895 33973 34049)) :ldur (quote ((38) (41) (72) (81) (92) (102) (52) (55) (85) (93) (65) (36) (95) (91) (78) (76))) :lvel (quote ((56) (56) (67) (67) (67) (67) (72) (72) (72) (73) (73) (71) (62) (62) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5100) (4850) (8750) (10350) (5075) (7900) (8425) (7950) (3975) (6650) (6400) (9525) (8825) (4975) (6650) (6725) (7625) (10025) (5675) (4575) (7900) (9175) (3925) (6650) (5275) (6650) (7950) (6775) (8575) (6150) (10300))) :lonset (quote (0 173 12312 12369 13644 14351 14392 14434 14476 14516 14649 14684 14723 17356 17864 18142 19629 21724 22295 24107 24198 24295 24397 24503 26035 26243 31321 31695 33742 33817 34049 34121)) :ldur (quote ((20) (34) (57) (64) (51) (41) (42) (42) (40) (36) (35) (39) (44) (85) (89) (99) (54) (54) (71) (91) (97) (102) (106) (108) (108) (91) (94) (85) (75) (78) (72))) :lvel (quote ((56) (56) (67) (67) (68) (69) (70) (70) (70) (70) (70) (70) (70) (72) (72) (73) (73) (72) (68) (66) (66) (66) (66) (66) (66) (65) (62) (62) (58) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (8200) (7925) (7400) (5100) (6150) (10100) (7775) (8650) (6025) (5125) (7025) (8550) (6550) (7675) (8350) (5625) (4525) (4500) (9100) (5575) (6475) (8075) (4800) (9475) (5700) (6175) (10375) (7125) (7400) (9200) (6375) (7450) (6000) (8225) (6675))) :lonset (quote (20 39 143 4293 8934 13596 14313 14552 14585 14617 14767 16080 16815 17441 17777 22235 22366 24611 27059 27110 27168 27239 27320 27604 27706 27810 27911 30176 30199 30223 30247 30273 30299 31780 33606 33673 33742)) :ldur (quote ((19) (18) (30) (73) (111) (48) (38) (33) (32) (32) (50) (117) (53) (84) (87) (60) (81) (108) (51) (58) (71) (81) (89) (102) (104) (101) (96) (23) (24) (24) (26) (26) (28) (77) (67) (69))) :lvel (quote ((56) (56) (56) (58) (65) (68) (69) (70) (70) (70) (70) (71) (72) (72) (72) (68) (68) (66) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (62) (58) (58))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6525) (9225) (6425) (6925) (5200) (6550) (10475) (7425) (5425) (3350) (10575) (4850) (9275) (5750) (6725) (9300) (8550) (7100) (5600) (8775) (8650) (6275) (8975) (4650) (8650) (7400) (4400) (4975) (4800) (7050) (8100) (10450) (6200) (4875) (5200))) :lonset (quote (57 76 118 286 4228 4366 8827 11877 12780 13550 13695 14279 14817 15961 16197 17525 18241 19488 19683 21656 21857 22447 24025 25920 27409 27504 28007 30132 30154 30327 30355 30383 31229 31857 34121 34186)) :ldur (quote ((19) (20) (25) (43) (65) (81) (107) (53) (106) (46) (55) (34) (57) (119) (113) (83) (101) (76) (48) (68) (28) (91) (82) (115) (95) (100) (88) (22) (22) (28) (28) (27) (92) (67) (65))) :lvel (quote ((56) (56) (56) (56) (58) (58) (65) (67) (68) (68) (68) (69) (70) (71) (71) (72) (73) (73) (73) (72) (71) (68) (66) (66) (65) (65) (65) (65) (65) (65) (64) (64) (62) (61) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7475) (5625) (7275) (4675) (4800) (9450) (6775) (5325) (4550) (6075) (6775) (5725) (9225) (8150) (6800) (3625) (6725) (5450) (6925) (6050) (7550) (5000) (6975))) :lonset (quote (96 9045 9749 12259 13506 14249 14874 15841 16757 17608 17692 18917 18979 22538 25801 26334 27015 30410 31140 32264 32293 34186 34776 34832)) :ldur (quote ((22) (111) (75) (53) (44) (30) (65) (120) (58) (84) (85) (62) (52) (99) (119) (83) (44) (26) (89) (29) (32) (58) (56))) :lvel (quote ((56) (65) (66) (67) (68) (69) (70) (71) (72) (72) (72) (73) (73) (68) (66) (65) (65) (64) (63) (60) (60) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4875) (5725) (8250) (8725) (8100) (8875) (6875) (9850) (9925) (6700) (3975) (8350) (8250) (6425) (6975) (7600) (5375) (9250) (5550) (4925) (9225) (9075) (4875) (8175) (6250) (9725) (8775) (6700) (5375) (5550) (5050) (5125) (4375) (9750) (6175) (10325) (7800) (6300) (6925) (7175) (7150) (5700) (7775) (9175) (8375) (8750) (6800) (4250) (7125) (6625) (4600))) :lonset (quote (1607 1719 1836 4447 7383 7409 7437 7471 7512 7570 7647 7738 9824 10789 10872 10962 11810 11930 13464 14223 14939 15723 16310 18342 18840 19031 19407 19731 21057 21106 21150 21196 21575 21885 22185 22637 22743 22855 22970 23084 23195 24719 26977 28095 30436 31055 31924 32325 33540 34244 34832 34894)) :ldur (quote ((112) (117) (122) (87) (26) (28) (34) (41) (58) (77) (91) (97) (81) (83) (90) (98) (67) (44) (42) (26) (73) (118) (108) (104) (77) (48) (81) (46) (49) (44) (46) (55) (81) (26) (50) (106) (112) (115) (114) (111) (104) (108) (38) (77) (26) (85) (58) (36) (66) (53) (62))) :lvel (quote ((56) (56) (56) (58) (62) (62) (62) (63) (63) (63) (63) (63) (66) (67) (67) (67) (67) (67) (68) (69) (70) (71) (71) (73) (73) (73) (73) (73) (73) (73) (73) (73) (72) (71) (69) (68) (67) (67) (67) (67) (67) (66) (65) (65) (64) (63) (61) (60) (58) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (5600) (7175) (8725) (5175) (4800) (7350) (8325) (4625) (9725) (5450) (7625) (8775) (7250) (9725) (7875) (8325) (7700) (3700) (5150) (7375) (5125) (10700) (9525) (7000) (8100) (7475) (5950) (9350) (3550) (4700) (7825) (6950) (5375) (7950) (7700) (5500) (4100) (4725) (7300) (9825) (8525))) :lonset (quote (329 748 847 953 1063 1175 1285 1392 1499 2682 4172 4534 7317 7353 8726 9678 9905 10644 10713 11060 11725 12886 13750 14199 16418 16689 18446 18751 20996 21251 23299 23953 25681 30109 30462 30489 30974 32236 32361 34297 34723 34894 34965)) :ldur (quote ((44) (99) (106) (110) (112) (110) (107) (107) (108) (34) (56) (93) (36) (30) (101) (71) (83) (69) (76) (105) (85) (106) (59) (24) (100) (68) (105) (89) (61) (69) (94) (72) (120) (23) (27) (30) (81) (28) (42) (51) (53) (71))) :lvel (quote ((56) (56) (56) (56) (56) (56) (56) (56) (56) (57) (58) (58) (62) (62) (65) (66) (66) (66) (66) (67) (67) (68) (68) (69) (72) (72) (73) (73) (73) (73) (67) (66) (66) (65) (64) (64) (63) (60) (59) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (10150) (3950) (4250) (7475) (8425) (8075) (8475) (6800) (6200) (4725) (5200) (6825) (9600) (6300) (6050) (4675) (8925) (9300) (5500) (10000) (6700) (9475) (7925) (3500) (7175) (6325) (7575) (9375) (6000) (5125) (5325))) :lonset (quote (1958 2646 4627 7273 7835 9156 10581 11165 11624 11974 12211 13422 14177 15012 15093 15183 15606 18654 19079 19326 19777 20917 21320 21488 26417 26943 28172 30519 30553 30825 30897 31982 32032)) :ldur (quote ((124) (36) (97) (44) (97) (107) (63) (111) (101) (38) (48) (42) (22) (81) (90) (97) (117) (97) (49) (81) (50) (79) (81) (87) (74) (34) (64) (34) (41) (72) (77) (50))) :lvel (quote ((56) (57) (58) (61) (63) (65) (66) (67) (67) (67) (67) (68) (69) (71) (71) (71) (71) (73) (73) (73) (73) (73) (73) (72) (65) (65) (65) (64) (64) (63) (63) (61))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (6050) (5000) (7350) (4175) (9900) (8850) (5825) (8425) (5325) (4475) (4850) (5150) (6075) (5275) (3750) (6750) (5375) (5500) (8850) (5400) (5700) (7625) (5525) (6175) (10450) (4850) (6675) (5875) (4225) (6400) (5600) (9200) (7225) (7400) (6050) (8250) (10050) (3650) (7450) (5675) (4850) (6300) (7625) (8750) (5000) (4200) (7650) (8400) (7475))) :lonset (quote (660 2716 3705 3758 3803 4125 7220 9608 9988 10524 11276 13376 13809 14158 15280 15383 15492 16518 16609 18551 19827 19883 19956 20043 20141 20248 20361 20479 20598 20714 20822 21401 21911 22143 24827 25563 26912 28236 28473 28524 30594 30642 30697 30758 32032 32403 33474 34348 34668 34965 35048)) :ldur (quote ((88) (34) (53) (45) (39) (47) (53) (70) (81) (57) (118) (46) (60) (19) (103) (109) (114) (91) (80) (103) (56) (73) (87) (98) (107) (113) (118) (119) (116) (108) (95) (87) (26) (42) (105) (118) (31) (55) (51) (58) (48) (55) (61) (67) (44) (50) (66) (50) (55) (83))) :lvel (quote ((56) (57) (58) (58) (58) (58) (61) (66) (66) (66) (67) (68) (68) (69) (71) (71) (71) (72) (72) (73) (73) (73) (74) (74) (74) (74) (74) (74) (73) (73) (73) (72) (71) (69) (66) (66) (65) (65) (65) (65) (64) (64) (63) (63) (61) (59) (58) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7025) (4075) (5450) (7950) (7750) (9900) (5850) (8125) (10025) (7600) (9375) (10525) (6000) (4125) (3875) (9000) (5075) (9000) (10200) (9900) (8475) (6300) (10500) (8375) (5725) (4975) (8350) (5825) (4800) (7225) (5950) (8325))) :lonset (quote (373 585 2082 2604 3842 3877 4724 6404 7932 8632 9263 11394 11512 12992 14140 19128 23393 23894 25449 26882 28339 28383 28427 28582 30081 32208 32453 32661 32746 32835 34398 35048 35143)) :ldur (quote ((45) (75) (120) (42) (35) (32) (102) (124) (91) (94) (100) (118) (112) (101) (18) (55) (83) (59) (114) (30) (44) (44) (46) (68) (28) (28) (59) (85) (89) (89) (51) (95))) :lvel (quote ((56) (56) (56) (57) (58) (58) (58) (60) (64) (65) (65) (67) (67) (68) (69) (73) (67) (66) (66) (65) (65) (65) (65) (65) (65) (60) (59) (59) (59) (58) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8850) (6400) (4925) (4125) (4825) (6225) (7200) (6650) (6975) (5175) (8250) (5900) (8900) (5250) (9550) (5325) (5975) (9500) (8875) (6675) (6450) (5575) (8950) (5050) (9000))) :lonset (quote (2750 3643 3909 4826 6528 7155 9533 10069 12012 12166 13324 14120 19183 19249 21937 24932 26491 26854 28291 28650 32076 32512 32582 32924 34613 34668)) :ldur (quote ((39) (62) (29) (106) (123) (65) (75) (75) (36) (45) (52) (20) (66) (77) (27) (102) (65) (28) (48) (79) (38) (70) (79) (88) (55))) :lvel (quote ((57) (58) (58) (58) (60) (61) (65) (66) (67) (67) (68) (69) (73) (73) (70) (66) (65) (65) (65) (65) (61) (59) (59) (58) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5875) (7225) (8050) (7225) (6950) (9625) (7625) (7300) (10300) (6575) (9325) (7375) (8225) (6400) (7950) (3700) (4675) (8850) (6700) (4500) (6900) (6275) (8800))) :lonset (quote (522 2202 2553 2789 3938 4085 6279 6651 7077 8023 10144 10474 13869 14096 21964 23476 25341 26826 28729 32180 33406 34449 35143 35252)) :ldur (quote ((63) (111) (51) (48) (28) (40) (125) (119) (78) (77) (65) (50) (58) (24) (27) (75) (108) (28) (94) (28) (68) (53) (109))) :lvel (quote ((56) (57) (57) (57) (58) (58) (60) (60) (61) (64) (66) (66) (68) (69) (70) (67) (66) (65) (65) (60) (58) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8025) (8425) (7200) (9300) (6175) (7325) (8225) (4725) (6975) (9150) (5975) (10750) (7325) (5375) (6725) (3675) (9850) (5025) (8100) (8000) (8450) (7125) (5025) (10250))) :lonset (quote (418 467 3566 3966 3993 4932 6153 6770 6882 9363 9453 13093 13263 14066 21991 22107 23847 25237 26797 28823 30045 32114 33012 34557 34613)) :ldur (quote ((49) (55) (77) (27) (28) (110) (126) (112) (103) (90) (80) (94) (61) (30) (28) (36) (47) (104) (29) (107) (36) (34) (85) (56))) :lvel (quote ((56) (56) (58) (58) (58) (58) (59) (60) (60) (65) (65) (68) (68) (69) (70) (69) (66) (66) (65) (65) (65) (61) (58) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10775) (9350) (10100) (3025) (10175) (8050) (6300) (9000) (10600) (8150) (7600) (8875) (8625) (5675) (7450) (7800) (6025) (4775) (4150) (7975) (6850) (6875) (7525) (3950) (8725) (5500) (6725) (6900))) :lonset (quote (2490 2837 4021 4051 6027 6985 8100 8545 10209 10431 12048 12124 13187 13981 14028 22019 23551 25034 26556 26611 26658 26699 26735 26767 28930 32148 33097 34502 34557)) :ldur (quote ((63) (59) (30) (34) (126) (92) (65) (87) (51) (43) (37) (42) (76) (47) (38) (28) (61) (101) (55) (47) (41) (36) (32) (30) (117) (32) (83) (55))) :lvel (quote ((57) (57) (58) (58) (59) (61) (64) (65) (66) (66) (67) (67) (68) (69) (69) (70) (67) (66) (65) (65) (65) (65) (65) (65) (65) (60) (58) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8725) (4100) (6750) (7825) (8875) (9525) (7600) (10025) (5425) (10675) (8900) (6125))) :lonset (quote (2313 2896 3479 5042 10260 13927 22047 25135 29047 29171 29997 33334 33406)) :ldur (quote ((97) (75) (87) (114) (40) (54) (29) (102) (124) (126) (48) (72))) :lvel (quote ((57) (57) (58) (58) (66) (68) (69) (66) (65) (65) (65) (58))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10200) (9925) (6625) (5700) (6550) (9600) (5250) (7150) (4850) (5750) (6975) (3925) (3975) (5600) (3600) (4025) (3150))) :lonset (quote (2410 2971 3062 3379 5900 8165 8222 10300 10395 12085 22076 23744 23776 23809 29297 29423 33180 33259)) :ldur (quote ((80) (91) (102) (100) (127) (57) (55) (33) (36) (39) (31) (32) (33) (38) (126) (121) (79))) :lvel (quote ((57) (57) (57) (58) (59) (64) (64) (66) (66) (67) (69) (66) (66) (66) (65) (65) (58))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8050) (7075) (7500) (5800) (10200) (7900) (6500) (4975) (4425) (9800) (7250) (4325) (5425) (5550) (6850) (7300) (8425) (3875) (3275) (8525) (8375))) :lonset (quote (3164 5156 5274 5396 5520 5646 5773 8277 8333 8395 8466 10333 23612 23664 23708 29544 29658 29762 29855 29934 33259 33334)) :ldur (quote ((108) (118) (122) (124) (126) (127) (127) (56) (62) (71) (79) (30) (52) (44) (36) (114) (104) (93) (79) (63) (75))) :lvel (quote ((57) (58) (59) (59) (59) (59) (59) (64) (64) (64) (65) (66) (67) (67) (66) (65) (65) (65) (65) (65) (58))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5675) (6575))) :lonset (quote (3272 10363 10395)) :ldur (quote ((107) (32))) :lvel (quote ((57) (66))) :loffset (quote ((0) (0))) :lchan (quote ((20) (20))) :legato 0)))) (load-port-info newobj (quote ((0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode cursor-mode)) (list 8 28 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) (quote :default) 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 840 586) (om-make-point 440 88) 0 1 (quote t) nil 0 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 58 487) (om-make-point 248 122) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5100) (6500) (8200) (6525) (9225) (7475) (6425) (7925) (4850) (4950) (7600) (6925) (7200) (7025) (8025) (8425) (5875) (4075) (8100) (5600) (7175) (8725) (5175) (4800) (7350) (8325) (4625) (4875) (5725) (8250) (7900) (5450) (7225) (8725) (10200) (10775) (8050) (7950) (10150) (9725) (6050) (8850) (7225) (9350) (4100) (9925) (6625) (8050) (5675) (5700) (6750) (7200) (6400) (5000) (7350) (4175) (7750) (9900) (4925) (6950) (9300) (6175) (10100) (3025) (9625) (9900) (5450) (5200) (7400) (6550) (8725) (7625) (3950) (5850) (4125) (7325) (7825) (7075) (7500) (5800) (10200) (7900) (6500) (6550) (10175) (8225) (7625) (8125) (4825) (7300) (4725) (6975) (8050) (10300) (6225) (8850) (4250) (8775) (7250) (8100) (8875) (6875) (9850) (9925) (6700) (3975) (8350) (7475) (10025) (6575) (6300) (9600) (5250) (4975) (4425) (9800) (7250) (9000) (7600) (9725) (10475) (5100) (5625) (8425) (9375) (9150) (5975) (7200) (5825) (7875) (7275) (8250) (8325) (8425) (6650) (9325) (10600) (8875) (7150) (4325) (6575) (4850) (8150) (7375) (5325) (8075) (7700) (3700) (6425) (6975) (7600) (5150) (8475) (4475) (10525) (6000) (6800) (7375) (5375) (7425) (9250) (6200) (6975) (7600) (5750) (8875) (5175) (4725) (4675) (8750) (10350) (5375) (9700) (7350) (4500) (5425) (5125) (4125) (10750) (8625) (7325) (8250) (4850) (5200) (5550) (4800) (3350) (6150) (5075) (10575) (10700) (5150) (8225) (9525) (5675) (7450) (5375) (6400) (5900) (3875) (6075) (6825) (9525) (4925) (9450) (4850) (10100) (7900) (8425) (7950) (3975) (6650) (7775) (8650) (6025) (6400) (9525) (8825) (5125) (9275) (6775) (9225) (9600) (6300) (6050) (5275) (3750) (6750) (4675) (9075) (5325) (5750) (7025) (6725) (4875) (7000) (5375) (5500) (8100) (4550) (8550) (3900) (8925) (4775) (6250) (8800) (10450) (6950) (4975) (6550) (9300) (6075) (6775) (7675) (6650) (3975) (7075) (6725) (8550) (8175) (7475) (8850) (8925) (5950) (6250) (5725) (9225) (9725) (9300) (9000) (8900) (5250) (5500) (8775) (7100) (6575) (7625) (5600) (6700) (10000) (5400) (5700) (7625) (5525) (6175) (10450) (4850) (6675) (5875) (4225) (6400) (6700) (9350) (5375) (5550) (5050) (5125) (3550) (9475) (5600) (7925) (4375) (8775) (10025) (9900) (4575) (8650) (9750) (9200) (9550) (7950) (6725) (7800) (7600) (6975) (3675) (7225) (6175) (8350) (5675) (5625) (6275) (8150) (10325) (7800) (6300) (6925) (7175) (7150) (4700) (5075) (3700) (6025) (5425) (5550) (6850) (3925) (3975) (5600) (9850) (9000) (7825) (8975) (4575) (7900) (9175) (3925) (6650) (4525) (5700) (7400) (5325) (4775) (10025) (5025) (4675) (10200) (6050) (6950) (6800) (4650) (5275) (7325) (6650) (3625) (3500) (5975) (4150) (7975) (6850) (6875) (7525) (3950) (8100) (8850) (9500) (9900) (8250) (7175) (7775) (6725) (4500) (9100) (5575) (6475) (8075) (8650) (7400) (4800) (9475) (5700) (6175) (4400) (9175) (6325) (10050) (8875) (8475) (6300) (10500) (3650) (7450) (8375) (6675) (6700) (8000) (8725) (5425) (10675) (3600) (4025) (7300) (8425) (3875) (3275) (8525) (8900) (8450) (5725) (5375) (4975) (4800) (10375) (7125) (7400) (9200) (6375) (7450) (7050) (8100) (10450) (5450) (8375) (7950) (7700) (7575) (9375) (5675) (4850) (6300) (7625) (6000) (5125) (5500) (8750) (6925) (6200) (7950) (4325) (3850) (3925) (6775) (6000) (4875) (6800) (5325) (8750) (6450) (7125) (5500) (4500) (4975) (4100) (6050) (7550) (4250) (4725) (5000) (8350) (5575) (8950) (5825) (4800) (7225) (5050) (5025) (6725) (3150) (8375) (6125) (6900) (4200) (7125) (8225) (6675) (8575) (6150) (6250) (8200) (10300) (5200) (5000) (6625) (7300) (7650) (5950) (6275) (6900) (10250) (9000) (8400) (9825) (6975) (4600) (8525) (7475) (8325) (8800))) :lonset (quote (0 20 39 57 76 96 118 143 173 207 245 286 329 373 418 467 522 585 660 748 847 953 1063 1175 1285 1392 1499 1607 1719 1836 1958 2082 2202 2313 2410 2490 2553 2604 2646 2682 2716 2750 2789 2837 2896 2971 3062 3164 3272 3379 3479 3566 3643 3705 3758 3803 3842 3877 3909 3938 3966 3993 4021 4051 4085 4125 4172 4228 4293 4366 4447 4534 4627 4724 4826 4932 5042 5156 5274 5396 5520 5646 5773 5900 6027 6153 6279 6404 6528 6651 6770 6882 6985 7077 7155 7220 7273 7317 7353 7383 7409 7437 7471 7512 7570 7647 7738 7835 7932 8023 8100 8165 8222 8277 8333 8395 8466 8545 8632 8726 8827 8934 9045 9156 9263 9363 9453 9533 9608 9678 9749 9824 9905 9988 10069 10144 10209 10260 10300 10333 10363 10395 10431 10474 10524 10581 10644 10713 10789 10872 10962 11060 11165 11276 11394 11512 11624 11725 11810 11877 11930 11974 12012 12048 12085 12124 12166 12211 12259 12312 12369 12433 12505 12586 12678 12780 12886 12992 13093 13187 13263 13324 13376 13422 13464 13506 13550 13596 13644 13695 13750 13809 13869 13927 13981 14028 14066 14096 14120 14140 14158 14177 14199 14223 14249 14279 14313 14351 14392 14434 14476 14516 14552 14585 14617 14649 14684 14723 14767 14817 14874 14939 15012 15093 15183 15280 15383 15492 15606 15723 15841 15961 16080 16197 16310 16418 16518 16609 16689 16757 16815 16868 16920 16975 17038 17110 17188 17271 17356 17441 17525 17608 17692 17777 17864 17953 18046 18142 18241 18342 18446 18551 18654 18751 18840 18917 18979 19031 19079 19128 19183 19249 19326 19407 19488 19564 19629 19683 19731 19777 19827 19883 19956 20043 20141 20248 20361 20479 20598 20714 20822 20917 20996 21057 21106 21150 21196 21251 21320 21401 21488 21575 21656 21724 21778 21821 21857 21885 21911 21937 21964 21991 22019 22047 22076 22107 22143 22185 22235 22295 22366 22447 22538 22637 22743 22855 22970 23084 23195 23299 23393 23476 23551 23612 23664 23708 23744 23776 23809 23847 23894 23953 24025 24107 24198 24295 24397 24503 24611 24719 24827 24932 25034 25135 25237 25341 25449 25563 25681 25801 25920 26035 26143 26243 26334 26417 26491 26556 26611 26658 26699 26735 26767 26797 26826 26854 26882 26912 26943 26977 27015 27059 27110 27168 27239 27320 27409 27504 27604 27706 27810 27911 28007 28095 28172 28236 28291 28339 28383 28427 28473 28524 28582 28650 28729 28823 28930 29047 29171 29297 29423 29544 29658 29762 29855 29934 29997 30045 30081 30109 30132 30154 30176 30199 30223 30247 30273 30299 30327 30355 30383 30410 30436 30462 30489 30519 30553 30594 30642 30697 30758 30825 30897 30974 31055 31140 31229 31321 31415 31510 31604 31695 31780 31857 31924 31982 32032 32076 32114 32148 32180 32208 32236 32264 32293 32325 32361 32403 32453 32512 32582 32661 32746 32835 32924 33012 33097 33180 33259 33334 33406 33474 33540 33606 33673 33742 33817 33895 33973 34049 34121 34186 34244 34297 34348 34398 34449 34502 34557 34613 34668 34723 34776 34832 34894 34965 35048 35143 35252)) :ldur (quote ((20) (19) (18) (19) (20) (22) (25) (30) (34) (38) (41) (43) (44) (45) (49) (55) (63) (75) (88) (99) (106) (110) (112) (110) (107) (107) (108) (112) (117) (122) (124) (120) (111) (97) (80) (63) (51) (42) (36) (34) (34) (39) (48) (59) (75) (91) (102) (108) (107) (100) (87) (77) (62) (53) (45) (39) (35) (32) (29) (28) (27) (28) (30) (34) (40) (47) (56) (65) (73) (81) (87) (93) (97) (102) (106) (110) (114) (118) (122) (124) (126) (127) (127) (127) (126) (126) (125) (124) (123) (119) (112) (103) (92) (78) (65) (53) (44) (36) (30) (26) (28) (34) (41) (58) (77) (91) (97) (97) (91) (77) (65) (57) (55) (56) (62) (71) (79) (87) (94) (101) (107) (111) (111) (107) (100) (90) (80) (75) (70) (71) (75) (81) (83) (81) (75) (65) (51) (40) (33) (30) (32) (36) (43) (50) (57) (63) (69) (76) (83) (90) (98) (105) (111) (118) (118) (112) (101) (85) (67) (53) (44) (38) (36) (37) (39) (42) (45) (48) (53) (57) (64) (72) (81) (92) (102) (106) (106) (101) (94) (76) (61) (52) (46) (42) (42) (44) (46) (48) (51) (55) (59) (60) (58) (54) (47) (38) (30) (24) (20) (18) (19) (22) (24) (26) (30) (34) (38) (41) (42) (42) (40) (36) (33) (32) (32) (35) (39) (44) (50) (57) (65) (73) (81) (90) (97) (103) (109) (114) (117) (118) (120) (119) (117) (113) (108) (100) (91) (80) (68) (58) (53) (52) (55) (63) (72) (78) (83) (85) (85) (84) (83) (84) (85) (87) (89) (93) (96) (99) (101) (104) (105) (103) (97) (89) (77) (62) (52) (48) (49) (55) (66) (77) (81) (81) (76) (65) (54) (48) (46) (50) (56) (73) (87) (98) (107) (113) (118) (119) (116) (108) (95) (79) (61) (49) (44) (46) (55) (69) (81) (87) (87) (81) (68) (54) (43) (36) (28) (26) (26) (27) (27) (28) (28) (29) (31) (36) (42) (50) (60) (71) (81) (91) (99) (106) (112) (115) (114) (111) (104) (94) (83) (75) (61) (52) (44) (36) (32) (33) (38) (47) (59) (72) (82) (91) (97) (102) (106) (108) (108) (108) (105) (102) (101) (102) (104) (108) (114) (118) (120) (119) (115) (108) (100) (91) (83) (74) (65) (55) (47) (41) (36) (32) (30) (29) (28) (28) (30) (31) (34) (38) (44) (51) (58) (71) (81) (89) (95) (100) (102) (104) (101) (96) (88) (77) (64) (55) (48) (44) (44) (46) (51) (58) (68) (79) (94) (107) (117) (124) (126) (126) (121) (114) (104) (93) (79) (63) (48) (36) (28) (23) (22) (22) (23) (24) (24) (26) (26) (28) (28) (28) (27) (26) (26) (27) (30) (34) (41) (48) (55) (61) (67) (72) (77) (81) (85) (89) (92) (94) (95) (94) (91) (85) (77) (67) (58) (50) (44) (38) (34) (32) (28) (28) (28) (29) (32) (36) (42) (50) (59) (70) (79) (85) (89) (89) (88) (85) (83) (79) (75) (72) (68) (66) (66) (67) (69) (75) (78) (78) (76) (72) (65) (58) (53) (51) (50) (51) (53) (55) (56) (55) (55) (53) (56) (62) (71) (83) (95) (109))) :lvel (quote ((56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (59) (59) (59) (59) (59) (59) (59) (59) (60) (60) (60) (60) (60) (60) (61) (61) (61) (61) (61) (62) (62) (62) (62) (62) (63) (63) (63) (63) (63) (63) (64) (64) (64) (64) (64) (64) (64) (64) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (74) (74) (74) (74) (74) (74) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (72) (72) (72) (72) (72) (71) (71) (71) (71) (71) (70) (70) (70) (70) (69) (69) (69) (69) (69) (68) (68) (68) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (63) (63) (63) (63) (63) (63) (63) (62) (62) (62) (62) (62) (62) (62) (61) (61) (61) (61) (61) (61) (60) (60) (60) (60) (60) (60) (60) (59) (59) (59) (59) (59) (59) (59) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57))) :loffset (quotelchan (quote ((4) (5) (5) (6) (6) (7) (6) (5) (4) (3) (3) (6) (9) (12) (15) (15) (14) (12) (11) (9) (9) (9) (9) (9) (9) (9) (9) (8) (8) (8) (10) (12) (14) (17) (18) (16) (14) (12) (10) (9) (11) (13) (14) (16) (17) (18) (18) (19) (20) (18) (17) (15) (13) (11) (11) (11) (12) (12) (13) (14) (15) (15) (16) (16) (14) (11) (9) (6) (5) (6) (8) (9) (10) (12) (13) (15) (17) (19) (19) (19) (19) (19) (19) (18) (16) (15) (14) (12) (13) (14) (15) (15) (16) (14) (13) (11) (10) (9) (9) (8) (8) (8) (8) (8) (8) (8) (8) (10) (12) (14) (16) (18) (18) (19) (19) (19) (19) (16) (12) (9) (6) (5) (7) (10) (12) (15) (15) (13) (11) (9) (7) (8) (9) (11) (13) (14) (16) (17) (18) (19) (20) (18) (16) (14) (11) (10) (9) (9) (8) (8) (8) (9) (10) (11) (12) (12) (10) (9) (8) (6) (8) (10) (13) (16) (18) (16) (13) (10) (7) (4) (4) (3) (3) (3) (3) (6) (9) (12) (15) (16) (15) (13) (11) (10) (8) (7) (6) (5) (4) (6) (9) (11) (14) (17) (16) (16) (15) (14) (13) (12) (11) (10) (9) (8) (7) (6) (5) (4) (4) (4) (4) (4) (5) (5) (5) (4) (4) (4) (5) (6) (7) (8) (10) (10) (10) (11) (11) (11) (10) (8) (7) (6) (5) (6) (8) (9) (11) (11) (9) (7) (5) (3) (3) (2) (2) (2) (2) (3) (4) (5) (6) (7) (7) (5) (4) (3) (2) (4) (6) (8) (9) (11) (10) (9) (8) (7) (7) (8) (10) (12) (13) (13) (10) (8) (6) (3) (4) (6) (8) (10) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (10) (9) (8) (8) (8) (8) (9) (10) (11) (10) (8) (6) (4) (2) (3) (6) (8) (11) (13) (14) (15) (16) (17) (18) (15) (11) (8) (5) (4) (5) (6) (7) (8) (8) (8) (8) (8) (8) (9) (12) (14) (16) (19) (19) (19) (18) (18) (18) (15) (12) (9) (6) (4) (4) (4) (4) (4) (5) (8) (11) (13) (16) (17) (15) (14) (12) (11) (9) (7) (6) (4) (2) (4) (7) (10) (13) (16) (16) (16) (16) (16) (16) (15) (14) (13) (12) (11) (10) (8) (7) (5) (5) (5) (5) (5) (6) (6) (5) (5) (5) (5) (6) (8) (10) (11) (13) (12) (12) (12) (11) (11) (12) (13) (14) (15) (16) (17) (17) (18) (18) (19) (19) (19) (19) (19) (17) (15) (12) (9) (6) (6) (5) (5) (5) (5) (5) (5) (6) (6) (6) (7) (8) (9) (9) (10) (10) (11) (11) (11) (11) (10) (10) (9) (8) (7) (6) (4) (3) (2) (3) (4) (5) (6) (8) (10) (11) (13) (15) (16) (14) (12) (9) (7) (7) (8) (9) (11) (12) (13) (13) (12) (12) (12) (13) (15) (16) (18) (19) (17) (14) (11) (8) (5) (5) (4) (4) (3) (3) (4) (6) (7) (8) (9) (11) (12) (14) (16) (15) (13) (11) (9) (7) (8) (9) (11) (12) (14))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (cursor-mode approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list (quote :normal) 8 48 (list (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1006 479) (om-make-point 268 193) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 209 348) (om-make-point 55 30) (list 1 20) "(1 20)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 8" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 137 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 246 93) (om-make-point 69 30) (list 89 268) "(89 268)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 308 114) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 185 101) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 250 230) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 9.523809 19.047619 28.571429 38.095238 47.61905 57.142857 66.666664 76.190476 85.71429 95.2381 104.761895 114.28571 123.809525 133.33333 142.85715 152.38095 161.90476 171.42858 180.95238 190.4762 200.0 209.52379 219.04763 228.57143 238.09525 247.61905 257.14285 266.66666 276.1905 285.7143 295.2381 304.7619 314.2857 323.8095 333.33334 342.85715 352.38095 361.90475 371.42856 380.9524 390.4762 400.0 409.5238 419.04758 428.57144 438.09525 447.61905 457.14285 466.66666 476.1905 485.7143 495.2381 504.7619 514.2857 523.8095 533.3333 542.8571 552.381 561.9048 571.4286 580.9524 590.4762 600.0 609.5238 619.0476 628.5714 638.0952 647.619 657.1429 666.6667 676.1905 685.7143 695.2381 704.7619 714.28565 723.8095 733.3333 742.8571 752.381 761.9048 771.4285 780.9524 790.4762 800.0 809.5238 819.0476 828.5714 838.09516 847.619 857.1429 866.6667 876.1905 885.7143 895.2381 904.7619 914.2857 923.8095 933.3333 942.8571 952.381 961.9048 971.4286 980.9524 990.4762 1000.0)) (quote (153.0 313.0 72.0 788.0 401.0 444.99997 345.0 916.99994 399.0 825.0 994.99994 491.0 631.0 821.0 186.0 503.00003 975.00007 959.99994 593.0 789.0 427.0 342.0 382.0 903.0 951.99994 150.0 806.0 288.0 719.0 993.0 457.0 361.0 590.0 250.0 945.0 152.0 96.0 846.0 404.0 163.0 837.0 658.0 403.0 131.0 193.0 167.0 459.0 543.0 189.0 561.0 84.0 53.0 346.0 60.999997 514.0 260.0 680.0 89.0 553.0 541.0 548.0 320.0 562.0 18.0 652.0 893.99994 118.99999 371.0 353.0 962.0 875.0 148.0 153.0 873.0 479.99997 45.0 801.0 774.0 569.0 187.0 252.0 198.0 617.0 540.0 777.0 923.0 966.0 259.0 195.0 271.0 467.0 556.0 365.0 37.0 342.0 811.0 275.0 611.0 596.0 967.99994 232.00002 111.0 376.0 813.0 282.0 670.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 8.0 16.0 24.0 32.0 40.0 48.0 56.0 64.0 72.0 80.0 88.0 96.0 103.99999 112.0 119.99999 128.0 136.0 144.0 152.0 160.0 168.0 176.0 184.0 192.0 200.0 207.99999 216.0 224.0 232.00002 239.99999 248.0 256.0 264.0 272.0 280.0 288.0 296.0 304.0 312.0 320.0 328.0 336.0 343.99997 352.0 360.0 368.0 376.0 384.0 392.0 400.0 408.0 415.99997 424.0 432.0 440.0 448.0 456.0 464.00003 471.99997 479.99997 487.99997 496.0 504.0 512.0 520.0 528.0 536.0 544.0 552.0 560.0 568.0 576.0 584.0 592.0 600.0 608.0 616.0 624.0 632.0 640.0 648.0 656.0 664.0 672.0 680.0 687.99994 696.0 704.0 712.0 720.0 728.0 736.0 744.0 752.0 759.99994 768.0 776.0 784.0 792.0 800.0 808.0 816.0 824.0 831.99994 840.0 848.0 856.0 864.0 872.0 880.0 888.0 896.0 904.0 912.0 920.0 928.00007 935.99994 943.99994 951.99994 959.99994 967.99994 975.99994 984.0 992.0 1000.0)) (quote (885.99994 195.0 794.0 225.0 296.0 642.0 824.0 365.0 103.0 42.0 599.0 718.0 820.0 526.0 730.0 967.00007 678.0 551.0 343.0 881.99994 323.0 512.0 507.00003 288.0 996.0 924.99994 151.0 483.0 893.99994 379.0 339.0 643.0 819.0 879.0 40.0 436.0 78.0 0.0 433.0 233.00002 273.0 380.0 223.0 491.0 144.0 117.00001 884.0 320.0 156.0 620.0 216.0 706.0 661.0 366.0 885.99994 371.0 29.000002 265.0 732.0 720.0 181.0 155.0 336.0 315.0 336.0 298.0 310.0 670.0 204.0 850.0 998.00007 64.0 963.00007 97.0 28.0 530.0 873.0 173.0 724.0 954.0 774.0 572.0 613.0 560.0 494.0 336.0 491.0 572.0 338.0 746.0 105.0 562.0 640.0 588.0 337.0 700.0 678.0 519.0 674.0 347.0 56.0 43.0 467.0 393.0 788.0 676.0 578.0 217.0 221.0 862.0 601.0 961.0 835.0 825.0 743.0 795.0 924.00007 652.0 393.0 975.99994 186.0 701.0 551.0 263.0 40.0 531.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.638297 21.276595 31.914895 42.55319 53.19149 63.82979 74.46809 85.10638 95.74468 106.38298 117.02128 127.65958 138.29787 148.93618 159.57447 170.21276 180.85106 191.48937 202.12766 212.76596 223.40425 234.04256 244.68083 255.31916 265.95746 276.59573 287.23404 297.87235 308.51065 319.14893 329.78723 340.4255 351.06384 361.70212 372.34042 382.97873 393.61704 404.2553 414.89362 425.53192 436.17023 446.8085 457.44678 468.0851 478.7234 489.36166 500.0 510.6383 521.2766 531.9149 542.55317 553.19147 563.8298 574.4681 585.1063 595.7447 606.383 617.0213 627.65955 638.29786 648.93616 659.57447 670.21277 680.851 691.4894 702.1277 712.7659 723.40424 734.04255 744.68085 755.31916 765.95746 776.5957 787.2341 797.87226 808.5106 819.1489 829.78724 840.42554 851.06385 861.70215 872.34046 882.9787 893.617 904.2554 914.89356 925.5319 936.1702 946.80854 957.4468 968.0851 978.7233 989.36164 1000.0)) (quote (355.0 885.00007 60.999997 465.0 89.0 752.0 585.0 554.0 734.0 406.0 795.0 660.0 646.0 617.0 142.0 965.0 313.0 289.0 806.0 112.0 903.0 628.0 868.0 54.0 562.0 938.0 138.0 436.0 165.0 628.0 20.0 126.0 551.0 470.00003 595.0 863.0 838.0 361.0 565.0 273.0 481.0 988.0 212.0 54.0 909.00007 877.0 805.0 537.0 123.0 839.0 987.00007 428.0 25.0 909.00007 839.0 793.0 531.0 59.000004 951.99994 947.0 303.0 475.99997 364.0 243.99999 139.0 229.0 700.0 525.0 376.0 769.0 207.0 770.0 1.0 456.0 330.0 10.0 133.0 250.0 354.0 468.00003 555.0 745.0 111.0 931.0 496.0 489.99997 795.0 609.0 181.0 920.0 720.0 94.0 691.0 838.0 250.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4.366812 8.733624 13.100436 17.467249 21.83406 26.200873 30.567685 34.934498 39.30131 43.66812 48.034935 52.401745 56.768555 61.13537 65.50218 69.868996 74.23581 78.60262 82.96943 87.33624 91.70306 96.06987 100.436676 104.80349 109.1703 113.53711 117.90393 122.27074 126.63756 131.00437 135.37119 139.73799 144.1048 148.47162 152.83843 157.20525 161.57205 165.93886 170.30568 174.67249 179.0393 183.40612 187.77292 192.13974 196.50653 200.87335 205.24018 209.60698 213.9738 218.3406 222.70743 227.07422 231.44104 235.80786 240.17465 244.54148 248.9083 253.27512 257.6419 262.00873 266.37555 270.74237 275.10916 279.47598 283.8428 288.2096 292.57642 296.94324 301.31006 305.67685 310.04367 314.4105 318.77728 323.1441 327.51093 331.87772 336.24454 340.61136 344.97818 349.34497 353.7118 358.0786 362.4454 366.81223 371.17905 375.54584 379.91266 384.27948 388.6463 393.01306 397.37988 401.7467 406.11353 410.48035 414.84717 419.21396 423.58078 427.9476 432.31442 436.6812 441.04807 445.41486 449.78165 454.14844 458.5153 462.88208 467.24887 471.61572 475.9825 480.3493 484.71616 489.08295 493.44974 497.8166 502.18338 506.55023 510.91702 515.2838 519.65064 524.01746 528.3843 532.7511 537.1179 541.48475 545.8515 550.2183 554.58515 558.95197 563.3188 567.6856 572.0524 576.4192 580.786 585.15284 589.51966 593.8865 598.2533 602.6201 606.9869 611.3537 615.7205 620.08735 624.45417 628.821 633.18775 637.55457 641.9214 646.2882 650.655 655.02186 659.3887 663.75544 668.1222 672.4891 676.8559 681.2227 685.58954 689.95636 694.3231 698.68995 703.05677 707.4236 711.7904 716.1572 720.52405 724.8908 729.2576 733.62446 737.9913 742.3581 746.7249 751.0917 755.4585 759.8253 764.19214 768.55896 772.9258 777.2926 781.65937 786.0261 790.393 794.75977 799.12665 803.4934 807.8603 812.22706 816.5939 820.9607 825.3275 829.69434 834.06116 838.4279 842.79474 847.16156 851.5284 855.8952 860.262 864.62885 868.9956 873.3624 877.72925 882.0961 886.4629 890.8297 895.1965 899.5633 903.93006 908.2969 912.66376 917.0306 921.39734 925.76416 930.131 934.49775 938.8646 943.23145 947.5982 951.965 956.33185 960.6986 965.0655 969.4323 973.79914 978.1659 982.5328 986.8995 991.2664 995.6332 1000.0)) (quote (346.0 25.0 384.0 919.0 9.0 54.0 248.0 949.0 393.0 88.0 539.0 313.0 404.0 328.0 587.0 497.00003 239.99999 228.0 666.0 397.0 166.0 201.0 494.0 485.0 254.0 440.99997 801.0 743.0 823.0 813.0 75.0 752.0 544.0 226.0 323.0 537.0 578.0 298.0 322.0 795.0 973.0 134.0 685.0 19.0 691.0 646.0 93.0 435.0 360.0 520.0 837.0 513.0 650.0 325.0 97.0 569.0 967.99994 240.99999 904.0 632.0 546.0 628.0 545.0 59.999997 29.999999 998.00007 423.0 376.0 232.00002 948.00007 32.0 588.0 543.0 233.00002 36.0 851.0 176.0 582.0 180.0 408.0 399.0 3.0 812.0 716.0 703.0 654.0 962.0 256.0 320.0 317.0 311.0 530.0 269.0 184.0 918.0 34.0 275.0 55.0 899.0 822.0 32.0 973.0 125.0 276.0 840.0 682.0 365.0 385.0 751.0 888.0 223.0 919.0 578.0 300.0 433.0 254.0 729.0 978.0 64.0 272.0 836.0 632.0 411.0 337.0 4.0 70.0 176.0 430.0 718.0 573.0 561.0 690.0 67.0 989.0 675.0 581.0 111.0 148.0 957.0 382.0 296.0 678.0 950.0 152.0 943.0 940.99994 606.0 188.0 988.0 210.0 705.0 773.0 829.0 740.0 79.0 39.0 113.0 951.0 420.0 150.0 871.0 699.0 489.99997 183.0 901.00007 225.0 87.0 241.99999 731.0 217.0 274.0 322.0 274.0 334.0 608.0 460.0 150.0 416.0 401.0 183.0 126.0 207.0 868.0 442.99997 617.0 537.0 250.0 246.0 900.0 668.0 711.0 236.00002 173.0 13.0 618.0 951.99994 641.0 117.00001 402.0 448.0 379.0 947.0 528.0 336.0 269.0 998.00007 271.0 356.0 616.0 647.0 717.0 207.0 444.99997 861.0 106.0 229.0 861.0 801.0 209.0 223.0 204.0 1.0 536.0 596.0 578.0 850.0 967.99994 961.0 963.00007 88.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 5.1813474 10.362695 15.544042 20.72539 25.906737 31.088084 36.26943 41.45078 46.632126 51.813473 56.994816 62.176167 67.35751 72.53886 77.72021 82.90156 88.0829 93.26425 98.44559 103.626946 108.80829 113.98963 119.170975 124.35233 129.53368 134.71503 139.89638 145.07772 150.25907 155.44042 160.62177 165.80312 170.98445 176.1658 181.34716 186.5285 191.70984 196.89118 202.07254 207.25389 212.43523 217.61658 222.79792 227.97927 233.16063 238.34195 243.52332 248.70467 253.88602 259.06735 264.2487 269.43005 274.6114 279.79276 284.9741 290.15543 295.3368 300.51813 305.6995 310.88083 316.06216 321.24353 326.42487 331.60623 336.78757 341.9689 347.15027 352.3316 357.51294 362.6943 367.87564 373.057 378.23834 383.41968 388.60104 393.78235 398.96375 404.14508 409.3264 414.50778 419.68912 424.87045 430.05182 435.23315 440.4145 445.59583 450.77716 455.95853 461.13986 466.32126 471.5026 476.6839 481.8653 487.04663 492.22794 497.40933 502.59067 507.77203 512.95337 518.1347 523.31604 528.4974 533.6788 538.8601 544.04145 549.2228 554.4042 559.5855 564.76685 569.9482 575.1295 580.31086 585.49225 590.6736 595.8549 601.03626 606.2176 611.399 616.5803 621.76166 626.94294 632.1243 637.3057 642.48707 647.6684 652.84974 658.03107 663.21247 668.3938 673.57514 678.7565 683.9378 689.11915 694.30054 699.4819 704.6632 709.84455 715.0259 720.2072 725.3886 730.56995 735.7513 740.9326 746.114 751.29535 756.4767 761.658 766.83936 772.02076 777.2021 782.3834 787.5647 792.7461 797.9275 803.1088 808.29017 813.4715 818.6528 823.83417 829.01557 834.1969 839.37824 844.5596 849.7409 854.9223 860.10364 865.285 870.4663 875.64765 880.829 886.0103 891.19165 896.373 901.5543 906.7358 911.91706 917.0984 922.2797 927.46106 932.6425 937.82386 943.0052 948.18647 953.3678 958.54914 963.7306 968.9119 974.09327 979.27454 984.4559 989.6373 994.81867 1000.0)) (quote (864.0 31.0 405.0 257.0 333.0 652.0 85.0 907.0 846.0 397.0 408.0 813.0 479.99997 229.0 712.0 772.0 126.0 591.0 467.0 276.0 601.0 437.0 489.99997 669.0 768.0 351.0 785.0 26.0 278.0 82.0 535.0 201.0 12.0 54.0 529.0 687.0 674.0 572.0 878.0 355.0 450.99997 625.0 485.0 181.0 641.0 491.0 204.0 363.0 928.99994 992.0 351.0 237.99999 402.0 623.0 422.0 401.0 459.0 786.0 377.0 683.0 657.0 141.0 200.0 848.0 32.0 655.0 661.0 870.0 560.0 975.99994 847.0 877.0 458.0 627.0 196.0 839.0 470.00003 90.0 168.0 167.0 928.00007 761.0 961.0 96.0 676.0 759.0 217.0 86.0 183.0 705.0 901.00007 131.0 853.0 201.0 327.0 440.0 469.0 377.0 837.0 318.0 294.0 889.00007 95.0 919.0 111.0 556.0 856.0 656.0 180.0 975.99994 903.0 326.0 81.0 583.0 145.0 351.0 759.0 532.0 472.00003 123.0 395.0 706.0 878.0 269.0 92.0 971.99994 734.0 95.0 752.0 694.0 125.0 628.0 501.00003 69.0 611.0 199.0 901.00007 599.0 26.0 517.0 749.0 558.0 664.0 99.0 963.99994 366.0 479.0 293.0 656.0 173.0 564.0 128.0 530.0 442.99997 922.0 389.0 522.0 887.0 310.0 456.0 454.0 682.0 54.0 724.0 818.0 347.0 538.0 546.0 511.00003 830.0 409.0 187.0 645.0 44.0 523.0 593.0 320.0 548.0 481.0 851.0 978.0 405.0 207.0 505.00003 164.0 39.0 582.0 243.99999 958.0 737.0 446.0 467.0 213.0 283.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 70 246) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5100) (6500) (8200) (6525) (9225) (7475) (6425) (7925) (4850) (4950) (7600) (6925) (7200) (7025) (8025) (8425) (5875) (4075) (8100) (5600) (7175) (8725) (5175) (4800) (7350) (8325) (4625) (4875) (5725) (8250) (7900) (5450) (7225) (8725) (10200) (10775) (8050) (7950) (10150) (9725) (6050) (8850) (7225) (9350) (4100) (9925) (6625) (8050) (5675) (5700) (6750) (7200) (6400) (5000) (7350) (4175) (7750) (9900) (4925) (6950) (9300) (6175) (10100) (3025) (9625) (9900) (5450) (5200) (7400) (6550) (8725) (7625) (3950) (5850) (4125) (7325) (7825) (7075) (7500) (5800) (10200) (7900) (6500) (6550) (10175) (8225) (7625) (8125) (4825) (7300) (4725) (6975) (8050) (10300) (6225) (8850) (4250) (8775) (7250) (8100) (8875) (6875) (9850) (9925) (6700) (3975) (8350) (7475) (10025) (6575) (6300) (9600) (5250) (4975) (4425) (9800) (7250) (9000) (7600) (9725) (10475) (5100) (5625) (8425) (9375) (9150) (5975) (7200) (5825) (7875) (7275) (8250) (8325) (8425) (6650) (9325) (10600) (8875) (7150) (4325) (6575) (4850) (8150) (7375) (5325) (8075) (7700) (3700) (6425) (6975) (7600) (5150) (8475) (4475) (10525) (6000) (6800) (7375) (5375) (7425) (9250) (6200) (6975) (7600) (5750) (8875) (5175) (4725) (4675) (8750) (10350) (5375) (9700) (7350) (4500) (5425) (5125) (4125) (10750) (8625) (7325) (8250) (4850) (5200) (5550) (4800) (3350) (6150) (5075) (10575) (10700) (5150) (8225) (9525) (5675) (7450) (5375) (6400) (5900) (3875) (6075) (6825) (9525) (4925) (9450) (4850) (10100) (7900) (8425) (7950) (3975) (6650) (7775) (8650) (6025) (6400) (9525) (8825) (5125) (9275) (6775) (9225) (9600) (6300) (6050) (5275) (3750) (6750) (4675) (9075) (5325) (5750) (7025) (6725) (4875) (7000) (5375) (5500) (8100) (4550) (8550) (3900) (8925) (4775) (6250) (8800) (10450) (6950) (4975) (6550) (9300) (6075) (6775) (7675) (6650) (3975) (7075) (6725) (8550) (8175) (7475) (8850) (8925) (5950) (6250) (5725) (9225) (9725) (9300) (9000) (8900) (5250) (5500) (8775) (7100) (6575) (7625) (5600) (6700) (10000) (5400) (5700) (7625) (5525) (6175) (10450) (4850) (6675) (5875) (4225) (6400) (6700) (9350) (5375) (5550) (5050) (5125) (3550) (9475) (5600) (7925) (4375) (8775) (10025) (9900) (4575) (8650) (9750) (9200) (9550) (7950) (6725) (7800) (7600) (6975) (3675) (7225) (6175) (8350) (5675) (5625) (6275) (8150) (10325) (7800) (6300) (6925) (7175) (7150) (4700) (5075) (3700) (6025) (5425) (5550) (6850) (3925) (3975) (5600) (9850) (9000) (7825) (8975) (4575) (7900) (9175) (3925) (6650) (4525) (5700) (7400) (5325) (4775) (10025) (5025) (4675) (10200) (6050) (6950) (6800) (4650) (5275) (7325) (6650) (3625) (3500) (5975) (4150) (7975) (6850) (6875) (7525) (3950) (8100) (8850) (9500) (9900) (8250) (7175) (7775) (6725) (4500) (9100) (5575) (6475) (8075) (8650) (7400) (4800) (9475) (5700) (6175) (4400) (9175) (6325) (10050) (8875) (8475) (6300) (10500) (3650) (7450) (8375) (6675) (6700) (8000) (8725) (5425) (10675) (3600) (4025) (7300) (8425) (3875) (3275) (8525) (8900) (8450) (5725) (5375) (4975) (4800) (10375) (7125) (7400) (9200) (6375) (7450) (7050) (8100) (10450) (5450) (8375) (7950) (7700) (7575) (9375) (5675) (4850) (6300) (7625) (6000) (5125) (5500) (8750) (6925) (6200) (7950) (4325) (3850) (3925) (6775) (6000) (4875) (6800) (5325) (8750) (6450) (7125) (5500) (4500) (4975) (4100) (6050) (7550) (4250) (4725) (5000) (8350) (5575) (8950) (5825) (4800) (7225) (5050) (5025) (6725) (3150) (8375) (6125) (6900) (4200) (7125) (8225) (6675) (8575) (6150) (6250) (8200) (10300) (5200) (5000) (6625) (7300) (7650) (5950) (6275) (6900) (10250) (9000) (8400) (9825) (6975) (4600) (8525) (7475) (8325) (8800))) :lonset (quote (0 20 39 57 76 96 118 143 173 207 245 286 329 373 418 467 522 585 660 748 847 953 1063 1175 1285 1392 1499 1607 1719 1836 1958 2082 2202 2313 2410 2490 2553 2604 2646 2682 2716 2750 2789 2837 2896 2971 3062 3164 3272 3379 3479 3566 3643 3705 3758 3803 3842 3877 3909 3938 3966 3993 4021 4051 4085 4125 4172 4228 4293 4366 4447 4534 4627 4724 4826 4932 5042 5156 5274 5396 5520 5646 5773 5900 6027 6153 6279 6404 6528 6651 6770 6882 6985 7077 7155 7220 7273 7317 7353 7383 7409 7437 7471 7512 7570 7647 7738 7835 7932 8023 8100 8165 8222 8277 8333 8395 8466 8545 8632 8726 8827 8934 9045 9156 9263 9363 9453 9533 9608 9678 9749 9824 9905 9988 10069 10144 10209 10260 10300 10333 10363 10395 10431 10474 10524 10581 10644 10713 10789 10872 10962 11060 11165 11276 11394 11512 11624 11725 11810 11877 11930 11974 12012 12048 12085 12124 12166 12211 12259 12312 12369 12433 12505 12586 12678 12780 12886 12992 13093 13187 13263 13324 13376 13422 13464 13506 13550 13596 13644 13695 13750 13809 13869 13927 13981 14028 14066 14096 14120 14140 14158 14177 14199 14223 14249 14279 14313 14351 14392 14434 14476 14516 14552 14585 14617 14649 14684 14723 14767 14817 14874 14939 15012 15093 15183 15280 15383 15492 15606 15723 15841 15961 16080 16197 16310 16418 16518 16609 16689 16757 16815 16868 16920 16975 17038 17110 17188 17271 17356 17441 17525 17608 17692 17777 17864 17953 18046 18142 18241 18342 18446 18551 18654 18751 18840 18917 18979 19031 19079 19128 19183 19249 19326 19407 19488 19564 19629 19683 19731 19777 19827 19883 19956 20043 20141 20248 20361 20479 20598 20714 20822 20917 20996 21057 21106 21150 21196 21251 21320 21401 21488 21575 21656 21724 21778 21821 21857 21885 21911 21937 21964 21991 22019 22047 22076 22107 22143 22185 22235 22295 22366 22447 22538 22637 22743 22855 22970 23084 23195 23299 23393 23476 23551 23612 23664 23708 23744 23776 23809 23847 23894 23953 24025 24107 24198 24295 24397 24503 24611 24719 24827 24932 25034 25135 25237 25341 25449 25563 25681 25801 25920 26035 26143 26243 26334 26417 26491 26556 26611 26658 26699 26735 26767 26797 26826 26854 26882 26912 26943 26977 27015 27059 27110 27168 27239 27320 27409 27504 27604 27706 27810 27911 28007 28095 28172 28236 28291 28339 28383 28427 28473 28524 28582 28650 28729 28823 28930 29047 29171 29297 29423 29544 29658 29762 29855 29934 29997 30045 30081 30109 30132 30154 30176 30199 30223 30247 30273 30299 30327 30355 30383 30410 30436 30462 30489 30519 30553 30594 30642 30697 30758 30825 30897 30974 31055 31140 31229 31321 31415 31510 31604 31695 31780 31857 31924 31982 32032 32076 32114 32148 32180 32208 32236 32264 32293 32325 32361 32403 32453 32512 32582 32661 32746 32835 32924 33012 33097 33180 33259 33334 33406 33474 33540 33606 33673 33742 33817 33895 33973 34049 34121 34186 34244 34297 34348 34398 34449 34502 34557 34613 34668 34723 34776 34832 34894 34965 35048 35143 35252)) :ldur (quote ((20) (19) (18) (19) (20) (22) (25) (30) (34) (38) (41) (43) (44) (45) (49) (55) (63) (75) (88) (99) (106) (110) (112) (110) (107) (107) (108) (112) (117) (122) (124) (120) (111) (97) (80) (63) (51) (42) (36) (34) (34) (39) (48) (59) (75) (91) (102) (108) (107) (100) (87) (77) (62) (53) (45) (39) (35) (32) (29) (28) (27) (28) (30) (34) (40) (47) (56) (65) (73) (81) (87) (93) (97) (102) (106) (110) (114) (118) (122) (124) (126) (127) (127) (127) (126) (126) (125) (124) (123) (119) (112) (103) (92) (78) (65) (53) (44) (36) (30) (26) (28) (34) (41) (58) (77) (91) (97) (97) (91) (77) (65) (57) (55) (56) (62) (71) (79) (87) (94) (101) (107) (111) (111) (107) (100) (90) (80) (75) (70) (71) (75) (81) (83) (81) (75) (65) (51) (40) (33) (30) (32) (36) (43) (50) (57) (63) (69) (76) (83) (90) (98) (105) (111) (118) (118) (112) (101) (85) (67) (53) (44) (38) (36) (37) (39) (42) (45) (48) (53) (57) (64) (72) (81) (92) (102) (106) (106) (101) (94) (76) (61) (52) (46) (42) (42) (44) (46) (48) (51) (55) (59) (60) (58) (54) (47) (38) (30) (24) (20) (18) (19) (22) (24) (26) (30) (34) (38) (41) (42) (42) (40) (36) (33) (32) (32) (35) (39) (44) (50) (57) (65) (73) (81) (90) (97) (103) (109) (114) (117) (118) (120) (119) (117) (113) (108) (100) (91) (80) (68) (58) (53) (52) (55) (63) (72) (78) (83) (85) (85) (84) (83) (84) (85) (87) (89) (93) (96) (99) (101) (104) (105) (103) (97) (89) (77) (62) (52) (48) (49) (55) (66) (77) (81) (81) (76) (65) (54) (48) (46) (50) (56) (73) (87) (98) (107) (113) (118) (119) (116) (108) (95) (79) (61) (49) (44) (46) (55) (69) (81) (87) (87) (81) (68) (54) (43) (36) (28) (26) (26) (27) (27) (28) (28) (29) (31) (36) (42) (50) (60) (71) (81) (91) (99) (106) (112) (115) (114) (111) (104) (94) (83) (75) (61) (52) (44) (36) (32) (33) (38) (47) (59) (72) (82) (91) (97) (102) (106) (108) (108) (108) (105) (102) (101) (102) (104) (108) (114) (118) (120) (119) (115) (108) (100) (91) (83) (74) (65) (55) (47) (41) (36) (32) (30) (29) (28) (28) (30) (31) (34) (38) (44) (51) (58) (71) (81) (89) (95) (100) (102) (104) (101) (96) (88) (77) (64) (55) (48) (44) (44) (46) (51) (58) (68) (79) (94) (107) (117) (124) (126) (126) (121) (114) (104) (93) (79) (63) (48) (36) (28) (23) (22) (22) (23) (24) (24) (26) (26) (28) (28) (28) (27) (26) (26) (27) (30) (34) (41) (48) (55) (61) (67) (72) (77) (81) (85) (89) (92) (94) (95) (94) (91) (85) (77) (67) (58) (50) (44) (38) (34) (32) (28) (28) (28) (29) (32) (36) (42) (50) (59) (70) (79) (85) (89) (89) (88) (85) (83) (79) (75) (72) (68) (66) (66) (67) (69) (75) (78) (78) (76) (72) (65) (58) (53) (51) (50) (51) (53) (55) (56) (55) (55) (53) (56) (62) (71) (83) (95) (109))) :lvel (quote ((56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (56) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (59) (59) (59) (59) (59) (59) (59) (59) (60) (60) (60) (60) (60) (60) (61) (61) (61) (61) (61) (62) (62) (62) (62) (62) (63) (63) (63) (63) (63) (63) (64) (64) (64) (64) (64) (64) (64) (64) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (74) (74) (74) (74) (74) (74) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (72) (72) (72) (72) (72) (71) (71) (71) (71) (71) (70) (70) (70) (70) (69) (69) (69) (69) (69) (68) (68) (68) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (63) (63) (63) (63) (63) (63) (63) (62) (62) (62) (62) (62) (62) (62) (61) (61) (61) (61) (61) (61) (60) (60) (60) (60) (60) (60) (60) (59) (59) (59) (59) (59) (59) (59) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (cursor-mode approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list (quote :normal) 8 36 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 808 289) (om-make-point 472 301) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 152 22) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 93 4) (om-make-point 55 30) 35000 "35000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 190 24) (om-make-point 28 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 23 36) (om-make-point 97 30) (list 3000 11000) "(3000 11000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 0 1 0 nil 0) (18 0 1 1 nil 0) (17 0 1 2 nil 0) (19 0 1 3 nil 0) (2 0 1 4 nil 0) (19 0 2 0 nil 0) (1 0 3 0 nil 0) (14 0 4 0 nil 0) (12 0 4 1 nil 0) (13 0 4 2 nil 0) (11 0 5 0 nil 0) (10 0 5 1 nil 0) (15 1 5 2 nil 0) (9 1 6 0 nil 0) (6 0 8 1 nil 0) (5 0 9 1 nil 0) (16 0 11 0 nil 0) (4 0 15 1 nil 0) (3 0 16 0 nil 0))) nil 6.13))
