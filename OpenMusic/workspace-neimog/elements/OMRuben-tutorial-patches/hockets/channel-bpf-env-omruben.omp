; OM File Header - Saved 2020/09/23 20:55:26
; (6.13 :patc (om-make-point 10 210) (om-make-point 224 23) (om-make-point 1056 720) "" 183 0 nil "2020/09/23 20:55:25")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "channel-bpf-env-omruben" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 220 68) (quote "For orchestral setup, play these multichannels scores with R-udp-player.") "" (om-make-point 794 182) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 174) (quote "A curve is used to split$a melody between$different midi channels,$and eventually different $parts. Finally overlaps are$created through orchestral$envelopes.") "" (om-make-point 811 398) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FULL-RANGE" (quote r-full-range) (quote ((om-load-inputfun (quote input-funbox) "NOTHING" "NOTHING" nil))) (om-make-point 288 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GENERAL-BPF-MELODY" (quote r-general-bpf-melody) (quote ((om-load-inputfun (quote input-funbox) "midicents-range-minmax" "MIDICENTS-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil) (om-load-inputfun (quote input-funbox) "cents-interval-size" "CENTS-INTERVAL-SIZE" nil) (om-load-inputfun (quote input-funbox) "instrumental-range-midicents" "INSTRUMENTAL-RANGE-MIDICENTS" nil))) (om-make-point 95 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-REBUILD-CHORDSEQ" (quote r-rebuild-chordseq) (quote ((om-load-inputfun (quote input-funbox) "instead-of-chordseq-list" "INSTEAD-OF-CHORDSEQ-LIST" (list 0)))) (om-make-point 15 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS 2" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 636 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-ENV-POLY" (quote r-multiseq-env-poly) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "tempo" "TEMPO" 0) (om-load-inputfun (quote input-funbox) "attack-decay-bpfs" "ATTACK-DECAY-BPFS" (list 0)) (om-load-inputfun (quote input-funbox) "attack-decay-percent-list" "ATTACK-DECAY-PERCENT-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "time-signature-list" "TIME-SIGNATURES-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "seconds-duration" "SECONDS-DURATION" 0) (om-load-inputfun (quote input-funbox) "multiplication-factor " "MULTIPLICATION-FACTOR" 0))) (om-make-point 576 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-CHANNEL-HOCKET-MULTISEQ" (quote r-channel-hocket-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil))) (om-make-point 291 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-CHANNEL-BPF-MULTISEQ" (quote r-channel-bpf-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "minmax-channel" "MINMAX-CHANNEL" nil) (om-load-inputfun (quote input-funbox) "bpfs-list" "BPFS-LIST" nil))) (om-make-point 339 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 397 42) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 561 404) (om-make-point 230 236) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-2 1)) (1 (1.0)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8225)) :ldur (quote (111)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-4 1 -1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (111)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9175)) :ldur (quote (67)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8275)) :ldur (quote (83)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10050)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9425)) :ldur (quote (56)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9525)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3925)) :ldur (quote (67)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10475)) :ldur (quote (67)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8825)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (67)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1 1 -1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1 1 -4)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7725)) :ldur (quote (83)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (111)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6025)) :ldur (quote (111)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9650)) :ldur (quote (83)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8475)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (83)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (111)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8275)) :ldur (quote (56)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (83)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (83)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -2)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -3)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -3)) (1 (-3 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1 1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (67)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4025)) :ldur (quote (83)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5375)) :ldur (quote (67)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5875)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4175)) :ldur (quote (83)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9625)) :ldur (quote (83)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8475)) :ldur (quote (67)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4125)) :ldur (quote (83)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (83)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7725)) :ldur (quote (111)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-4 -1.0 1 -1 1 -1)) (1 (-3 1 -1)))) ((5 8) ((1 (-4 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-4 1 -1)))) ((5 8) ((1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1 1 -4 1)) (1 (1.0 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -2)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -3)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (67)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8325)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8125)) :ldur (quote (111)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4525)) :ldur (quote (37)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (37)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (67)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (56)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7775)) :ldur (quote (56)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4625)) :ldur (quote (48)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (48)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10775)) :ldur (quote (67)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7125)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (67)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3525)) :ldur (quote (67)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-3 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-4 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1 1)) (1 (1.0 -3)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1)) (1 (1.0 -2)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (111)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7875)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6025)) :ldur (quote (83)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8325)) :ldur (quote (67)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (67)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (56)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10475)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (83)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6275)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5925)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9875)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (83)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8575)) :ldur (quote (83)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4775)) :ldur (quote (83)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8175)) :ldur (quote (67)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -2)) (1 (-1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -3)) (1 (-1)) (1 (-1 1 -1)) (1 (-3 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-4 1 -1)) (1 (-1)) (1 (-1 1 -1 1 1 -1 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1 1 1 -1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-3 1 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-2 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8575)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6725)) :ldur (quote (111)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (56)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3575)) :ldur (quote (48)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4225)) :ldur (quote (48)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (48)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (48)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10850)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10175)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5775)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9975)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5325)) :ldur (quote (111)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10550)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-3 1)))) ((5 8) ((1 (1.0 -1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-3 1 -1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (67)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5325)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (67)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8825)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (67)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6025)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5525)) :ldur (quote (83)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5975)) :ldur (quote (83)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8650)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7225)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8475)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10225)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8275)) :ldur (quote (111)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (67)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (67)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1 1 -1)) (1 (-4 1 -1)) (1 (-1 1 -1 1 -1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-4 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-4 1 -1 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1 1 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)))) ((5 8) ((1 (1.0 -2)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-4 1 -1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (67)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (67)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7725)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7375)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6375)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8275)) :ldur (quote (56)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6075)) :ldur (quote (67)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (67)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150)) :ldur (quote (67)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4950)) :ldur (quote (56)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9150)) :ldur (quote (48)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (48)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6525)) :ldur (quote (83)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (83)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7375)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7075)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5275)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8125)) :ldur (quote (83)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (67)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (56)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9250)) :ldur (quote (67)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -4)) (1 (-1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1 1 -1 1 -1)))) ((5 8) ((1 (-1)) (1 (-3 1 -1)) (1 (-3 1 -1)) (1 (-1 1 -1 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 1 -1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-4 1 1 -1)) (1 (-1 1 -4)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (111)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450)) :ldur (quote (67)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6475)) :ldur (quote (67)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9975)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5025)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8450)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6725)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7925)) :ldur (quote (56)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8275)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6075)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8275)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7625)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7775)) :ldur (quote (111)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9875)) :ldur (quote (83)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3425)) :ldur (quote (83)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (83)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (67)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8450)) :ldur (quote (48)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (48)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8575)) :ldur (quote (56)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -2)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -2)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-4 1 -1)) (1 (-3 1 -1)) (1 (-1 1 -4)) (1 (-3 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8025)) :ldur (quote (67)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (67)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (83)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (67)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8425)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8450)) :ldur (quote (56)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (67)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (56)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8625)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10225)) :ldur (quote (111)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9550)) :ldur (quote (111)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4425)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6125)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9275)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8375)) :ldur (quote (111)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (111)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (83)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (11))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1)) (1 (1.0 -2)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1 1 -4)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-3 1)) (1 (1.0 -1 1 -1)) (1 (-4 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-4 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-3 1)))) ((5 8) ((1 (1.0 -2)) (1 (-1 1 -3)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4725)) :ldur (quote (83)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6825)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5975)) :ldur (quote (83)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8475)) :ldur (quote (56)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6750)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5325)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9750)) :ldur (quote (83)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10725)) :ldur (quote (83)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7775)) :ldur (quote (56)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7825)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6425)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3425)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7825)) :ldur (quote (56)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9250)) :ldur (quote (83)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4225)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (67)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (83)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1 1 1 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-4 1 -1)) (1 (-1)) (1 (-1 1 -4)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-4 1 -1 1)) (1 (1.0 -1 1 -1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1 1 -1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (111)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8175)) :ldur (quote (83)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9850)) :ldur (quote (83)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4625)) :ldur (quote (83)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8850)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8425)) :ldur (quote (56)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10625)) :ldur (quote (56)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6375)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5775)) :ldur (quote (48)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8425)) :ldur (quote (48)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3975)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9675)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (111)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (111)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (67)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1 1)) (1 (1.0 -2)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -4)) (1 (-3 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-4 1 -1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3525)) :ldur (quote (83)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5875)) :ldur (quote (83)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (83)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (111)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (67)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7725)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10475)) :ldur (quote (83)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6825)) :ldur (quote (56)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7725)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5475)) :ldur (quote (56)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5225)) :ldur (quote (67)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6125)) :ldur (quote (67)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-2 1)) (1 (1.0 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-2 1)) (1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1 1 -3)) (1 (-1 1 -4)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-4 1 1 -1)) (1 (-4 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (10125)) :ldur (quote (111)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (111)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (56)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4375)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9775)) :ldur (quote (48)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10425)) :ldur (quote (48)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450)) :ldur (quote (56)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7325)) :ldur (quote (111)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5675)) :ldur (quote (67)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (67)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1 1 -3)) (1 (-1)))) ((5 8) ((1 (-1 1 -1 1 -1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-3 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)))) ((5 8) ((1 (1.0 -3)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -4)) (1 (-3 1 -1)) (1 (-1 1 -4)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-4 1 -1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -2)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (111)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7925)) :ldur (quote (83)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9225)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9025)) :ldur (quote (67)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (111)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7225)) :ldur (quote (67)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (67)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10275)) :ldur (quote (67)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9475)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (56)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9175)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4225)) :ldur (quote (56)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (56)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4075)) :ldur (quote (67)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (67)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (83)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (67)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (67)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1 1)) (1 (1.0 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)))) ((5 8) ((1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1)) (1 (1.0 1 -1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1)) (1 (1.0 -4 1 -1)) (1 (-1)) (1 (-1 1 -1 1)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6525)) :ldur (quote (67)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6725)) :ldur (quote (111)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (111)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5975)) :ldur (quote (111)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3525)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5025)) :ldur (quote (83)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4325)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9925)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7275)) :ldur (quote (83)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10275)) :ldur (quote (83)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6025)) :ldur (quote (48)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4575)) :ldur (quote (83)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3975)) :ldur (quote (83)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1 1 -3)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-3 1 -1)) (1 (-1)) (1 (-1 1 -1 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (83)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (67)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8025)) :ldur (quote (67)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5525)) :ldur (quote (67)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7925)) :ldur (quote (67)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (67)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-3 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-3 1 -1)))) ((5 8) ((1 (-1)) (1 (-1 1 -1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)))) ((5 8) ((1 (-1 1 -3)) (1 (-1)) (1 (-3 1)) (1 (1.0 -3)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8375)) :ldur (quote (111)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (19))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7375)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (19))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6125)) :ldur (quote (67)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (19))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (19))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (67)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (19))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (67)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (19))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4875)) :ldur (quote (83)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (19))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1 3 -1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1 3 -1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1 1 -3)) (1 (-1)) (1 (-1)))) ((5 8) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8575)) :ldur (quote (200)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10475)) :ldur (quote (200)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (67)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx cursor-mode)) (list 0 nil (quote t) 1 0 (om-make-point 187 23) (om-make-point 999 714) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 16 8 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 17" (quote list) (quote nil) (om-make-point 740 272) (om-make-point 52 30) 25.43 "25.43" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 573 284) (om-make-point 28 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 717 317) (om-make-point 21 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 682 249) (om-make-point 52 30) (list (list 5 8)) "((5 8))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 619 272) (om-make-point 56 30) (list 0.1 0.1) "(.1 .1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB 2" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 621 198) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 333.33334 666.6667 1000.0)) (quote (689.0 643.0 107.0 224.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 166.66667 333.33334 500.0 666.6667 833.3333 1000.0)) (quote (942.0 605.0 234.00002 285.0 259.0 261.0 500.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 250.0 500.0 750.0 1000.0)) (quote (194.0 992.0 818.0 539.0 513.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 333.33334 666.6667 1000.0)) (quote (914.0 411.0 903.0 732.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 250.0 500.0 750.0 1000.0)) (quote (178.0 164.0 327.0 408.0 407.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 621 40) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 715 49) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 664 77) (om-make-point 42 30) (list 7 4) "(7 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 104 467) (om-make-point 258 241) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8225))) :lonset (quote (11308 11576)) :ldur (quote ((268))) :lvel (quote ((66))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6550) (9175) (8275) (10050) (9425) (7650) (9525) (4000) (3925) (10475) (8825) (3500))) :lonset (quote (3262 5591 12974 17116 21314 22704 25852 28352 45216 47795 51622 56568 56740)) :ldur (quote ((248) (293) (277) (260) (84) (111) (200) (221) (243) (148) (296) (172))) :lvel (quote ((63) (64) (66) (67) (69) (71) (72) (72) (70) (69) (67) (61))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7725) (4600) (6025) (9650) (8475) (7550) (7400) (8275) (4850) (8100) (5100) (4900))) :lonset (quote (3010 4000 4756 10562 15449 20316 22056 22483 35010 37823 46672 46894 47104)) :ldur (quote ((252) (247) (268) (237) (226) (90) (104) (110) (168) (254) (222) (210))) :lvel (quote ((63) (63) (64) (66) (67) (69) (70) (70) (72) (72) (70) (70))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4400) (4025) (5375) (9100) (6250) (5875) (6250) (5600) (4175) (9625) (9000) (8475) (4125) (6650) (7725))) :lonset (quote (1641 2752 4498 23037 23967 34506 42790 44136 47104 47299 49321 52971 53602 53793 55047 55237)) :ldur (quote ((292) (258) (258) (111) (128) (169) (169) (193) (195) (178) (248) (223) (191) (183) (190))) :lvel (quote ((63) (63) (64) (71) (71) (72) (71) (71) (70) (70) (68) (66) (65) (65) (63))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (8325) (8125) (4525) (6650) (5850) (7350) (7775) (5950) (4625) (8350) (6350) (10775) (7125) (5850) (3525))) :lonset (quote (9906 14293 17376 20640 20782 21398 22374 33465 34675 36058 36654 36870 45706 51918 54330 55237 55430)) :ldur (quote ((212) (240) (262) (71) (71) (86) (109) (176) (168) (191) (216) (227) (247) (287) (175) (193))) :lvel (quote ((66) (67) (68) (69) (69) (70) (70) (72) (72) (72) (72) (72) (70) (67) (64) (63))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5050) (7875) (6025) (8325) (6225) (7200) (10400) (10475) (7500) (6275) (5925) (9875) (6550) (8575) (4775) (8175))) :lonset (quote (355 7638 9493 21000 21854 23487 29639 29776 32053 36249 40170 42038 46198 52478 52733 54861 55047)) :ldur (quote ((341) (270) (206) (75) (100) (116) (137) (130) (175) (198) (253) (202) (240) (255) (238) (186))) :lvel (quote ((62) (65) (65) (69) (70) (71) (73) (73) (73) (72) (72) (71) (70) (66) (66) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8300) (7300) (8200) (8575) (6725) (6900) (5300) (3575) (4225) (3550) (5350) (10850) (4000) (10175) (8600) (10400) (5250) (5775) (9975) (5325) (10550))) :lonset (quote (9078 9699 14533 16611 18412 19325 21572 22593 22815 22926 23148 24095 24226 25296 26478 26703 32935 40915 43780 46438 51013 51319)) :ldur (quote ((209) (207) (234) (249) (246) (191) (91) (111) (111) (111) (112) (131) (136) (178) (225) (232) (177) (238) (174) (234) (306))) :lvel (quote ((65) (65) (67) (67) (68) (68) (70) (70) (71) (71) (71) (71) (71) (72) (72) (72) (72) (71) (71) (70) (67))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9300) (5325) (7650) (8825) (7600) (4900) (6025) (5525) (5975) (6650) (8650) (7225) (8475) (10225) (8275) (5050) (6950))) :lonset (quote (6181 8409 11576 15675 21153 24650 27652 30517 30920 34335 36447 38862 42432 42615 57454 58343 58925 59052)) :ldur (quote ((298) (232) (275) (227) (80) (152) (238) (128) (148) (171) (207) (264) (183) (175) (118) (111) (127))) :lvel (quote ((64) (65) (66) (67) (69) (72) (72) (73) (73) (72) (72) (72) (71) (71) (60) (58) (56))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4050) (8050) (7725) (7375) (6375) (8275) (6075) (6200) (8150) (4950) (9150) (8300) (6525) (8300) (7375) (7075) (5275) (8125) (5825) (6650) (9250))) :lonset (quote (4247 12411 16133 19117 19516 20406 20711 21075 21484 23603 29167 29494 31221 31380 34843 37097 40423 49834 56013 57055 57329 57454)) :ldur (quote ((251) (282) (236) (208) (173) (83) (71) (78) (88) (118) (170) (145) (159) (163) (167) (235) (248) (281) (190) (142) (125))) :lvel (quote ((64) (66) (67) (68) (68) (69) (69) (69) (70) (71) (73) (73) (73) (73) (72) (72) (72) (68) (62) (61) (60))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6850) (5450) (6475) (9975) (5025) (8450) (6725) (7925) (6000) (8275) (4450) (6075) (4500) (5650) (8275) (7625) (7775) (9875) (3425) (9200) (9100) (5250) (8450) (9100) (8575))) :lonset (quote (696 2215 8863 16860 17638 19981 20216 23842 25659 28124 28982 29337 31068 31880 32404 32758 44978 47477 47640 48711 53404 54154 57687 57799 58017 58125)) :ldur (quote ((328) (272) (215) (256) (262) (124) (100) (125) (193) (228) (185) (157) (153) (173) (177) (177) (238) (163) (155) (185) (198) (176) (112) (110) (108))) :lvel (quote ((62) (63) (65) (67) (68) (68) (68) (71) (72) (72) (72) (73) (73) (73) (73) (73) (70) (70) (69) (69) (66) (65) (59) (59) (59))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8025) (5125) (4450) (7050) (8150) (8425) (8450) (8100) (4250) (9500) (8350) (8625) (10225) (9550) (7300) (4425) (6125) (9800) (9275) (8375) (3900) (6850))) :lonset (quote (3510 8166 10118 12130 15224 16369 20926 21663 21954 23373 26935 27412 30031 30779 31543 33990 35694 37574 38598 48088 48896 53976 54154)) :ldur (quote ((245) (243) (218) (281) (225) (242) (74) (94) (102) (114) (237) (240) (121) (141) (167) (173) (179) (249) (264) (146) (202) (178))) :lvel (quote ((63) (65) (66) (66) (67) (67) (69) (70) (70) (71) (72) (72) (73) (73) (73) (72) (72) (72) (72) (69) (69) (65))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4725) (5650) (7150) (6825) (5975) (8475) (6750) (10700) (5325) (6100) (9750) (10725) (7775) (7825) (7500) (6425) (5850) (3425) (7825) (9250) (4225) (9800) (8550))) :lonset (quote (5024 7908 13251 14997 19689 22160 24362 24802 26260 27890 30152 30645 31710 39390 39913 41828 43612 44329 47943 50407 52205 53194 55430 55625)) :ldur (quote ((280) (258) (272) (227) (155) (106) (142) (159) (218) (234) (120) (134) (170) (263) (257) (210) (168) (204) (145) (301) (273) (210) (195))) :lvel (quote ((64) (65) (67) (67) (68) (70) (71) (72) (72) (72) (73) (73) (73) (72) (72) (71) (71) (71) (69) (68) (67) (66) (63))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5125) (8175) (9850) (4625) (8850) (7050) (8425) (10625) (6375) (6500) (5775) (8425) (3975) (9675) (7100) (5125) (9300) (7350) (3900))) :lonset (quote (5884 6776 7070 7358 14045 17900 21233 22266 25474 26052 32228 32581 33112 33641 39126 43286 57197 58125 58683 58802)) :ldur (quote ((297) (294) (288) (280) (248) (259) (81) (108) (185) (208) (176) (177) (177) (175) (264) (162) (132) (108) (119))) :lvel (quote ((64) (64) (64) (65) (67) (68) (69) (70) (72) (72) (73) (73) (72) (72) (72) (71) (60) (58) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3525) (5875) (5300) (7450) (6400) (4550) (7725) (7200) (10475) (6825) (7725) (5475) (5225) (6125))) :lonset (quote (1338 1933 5304 11049 14767 33289 41610 42240 45459 48234 49569 56740 58233 58802 58925)) :ldur (quote ((303) (282) (287) (259) (230) (176) (218) (192) (247) (150) (265) (163) (110) (123))) :lvel (quote ((62) (63) (64) (66) (67) (72) (71) (71) (70) (69) (68) (61) (58) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10125) (8600) (7300) (5050) (5900) (4375) (6300) (3300) (9400) (9775) (10425) (5450) (7325) (5675) (5550))) :lonset (quote (0 11851 18894 19844 20567 24961 25125 35178 37332 42959 43123 43954 54681 55625 56903 57055)) :ldur (quote ((355) (279) (223) (137) (73) (164) (171) (169) (242) (164) (163) (182) (180) (195) (152))) :lvel (quote ((62) (66) (68) (68) (69) (72) (72) (72) (72) (71) (71) (71) (64) (63) (61))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9000) (7925) (9225) (9025) (10100) (7550) (5900) (7225) (4100) (10275) (9475) (8700) (7200) (9175) (4225) (7650) (8300) (4075) (5650) (9100) (5350) (5400))) :lonset (quote (2487 3755 8641 9287 13789 18159 18658 20489 20853 21757 24504 28784 34163 35519 35873 41385 43448 45953 48384 51319 55820 58454 58567)) :ldur (quote ((265) (245) (222) (206) (256) (253) (236) (78) (73) (97) (146) (198) (172) (175) (185) (225) (164) (245) (158) (303) (193) (113))) :lvel (quote ((63) (63) (65) (65) (67) (68) (68) (69) (69) (70) (71) (72) (72) (72) (72) (71) (71) (70) (69) (67) (63) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6525) (6725) (5350) (5975) (3525) (5025) (4325) (9925) (7275) (9100) (5050) (8050) (10275) (6025) (4575) (3975))) :lonset (quote (10336 12693 13523 15902 23260 23721 28573 29906 38077 38336 40671 44533 48542 49098 50115 50708 51013)) :ldur (quote ((226) (281) (266) (231) (113) (121) (211) (125) (259) (262) (244) (217) (169) (223) (292) (305))) :lvel (quote ((66) (66) (67) (67) (71) (71) (72) (73) (72) (72) (72) (71) (69) (68) (68) (68))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (8400) (6950) (5550) (8025) (5525) (7925) (7950))) :lonset (quote (10799 20105 39653 41153 44750 56388 57572 57909 58017)) :ldur (quote ((250) (111) (260) (232) (228) (180) (115) (108))) :lvel (quote ((66) (68) (72) (71) (71) (62) (60) (59))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8375) (7375) (6125) (6550) (7600) (7600) (4875))) :lonset (quote (6479 30272 33816 35347 54505 56203 58567 58683)) :ldur (quote ((297) (121) (174) (172) (176) (185) (116))) :lvel (quote ((64) (73) (72) (72) (64) (62) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((19) (19) (19) (19) (19) (19) (19))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8575) (10475) (6950))) :lonset (quote (1024 27172 30393 30517)) :ldur (quote ((314) (240) (124))) :lvel (quote ((62) (72) (73))) :loffset (quote ((0) (0) (0))) :lchan (quote ((20) (20) (20))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx cursor-mode)) (list 0 nil (quote t) 1 0 (om-make-point 373 49) (om-make-point 907 648) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 28 8 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 287 294) (om-make-point 179 79) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10125) (5050) (6850) (8575) (3525) (4400) (5875) (5450) (9000) (4025) (7725) (6550) (8025) (7925) (4600) (4050) (5375) (6025) (4725) (5300) (9175) (5125) (9300) (8375) (8175) (9850) (4625) (7875) (5650) (5125) (5325) (9225) (6475) (8300) (9025) (6025) (7300) (6300) (4450) (6525) (9650) (8100) (7450) (8225) (7650) (8600) (7050) (8050) (6725) (8275) (7150) (5350) (10100) (8850) (8325) (8200) (6400) (6825) (8150) (8475) (8825) (5975) (7725) (8425) (8575) (9975) (10050) (8125) (5025) (7050) (7550) (6725) (5900) (7300) (7375) (6900) (6375) (5975) (5050) (8450) (8400) (6725) (7550) (8275) (7225) (5900) (4525) (6075) (6650) (4100) (8450) (8325) (6200) (7600) (8425) (9425) (5850) (8150) (5300) (8100) (10275) (6225) (4250) (7400) (8475) (10625) (7350) (8275) (3575) (7650) (4225) (3550) (9100) (5350) (3525) (9500) (7200) (4950) (5025) (7925) (6250) (10850) (4000) (6750) (9475) (4900) (10700) (4375) (6300) (10175) (6375) (6000) (9525) (6500) (5325) (8600) (10400) (8350) (10475) (8625) (6025) (6100) (8275) (4000) (4325) (8700) (4450) (9150) (6075) (8300) (10400) (10475) (9925) (10225) (9750) (7375) (6950) (5525) (10725) (9550) (5975) (4500) (6525) (8300) (7300) (7775) (5650) (7500) (5775) (8275) (8425) (7625) (5250) (3975) (4550) (7775) (9675) (6125) (4425) (7200) (6650) (5875) (5950) (7375) (4850) (3300) (6550) (9175) (6125) (4225) (4625) (6275) (8650) (8350) (6350) (7075) (9400) (9800) (8100) (7275) (9100) (9275) (7225) (7100) (7825) (6950) (7500) (5925) (5275) (5050) (5775) (5550) (7650) (7725) (6425) (9875) (7200) (8475) (10225) (6250) (9775) (10425) (5125) (8300) (5850) (9975) (5450) (5600) (3425) (8050) (8025) (7775) (3925) (10475) (10775) (4075) (6550) (5325) (5100) (4900) (4175) (9625) (9875) (3425) (10475) (7825) (8375) (6825) (5650) (10275) (9200) (3900) (6025) (9000) (7725) (8125) (4575) (9250) (3975) (10550) (9100) (8825) (7125) (4225) (8575) (4775) (8475) (9800) (9100) (4125) (6650) (6850) (5250) (5850) (7600) (7325) (8175) (7725) (3525) (8550) (5675) (5350) (5825) (7600) (5525) (3500) (5475) (5550) (6650) (9300) (9250) (8275) (7925) (8450) (9100) (7950) (8575) (7350) (5225) (5050) (5400) (4875) (3900) (6125) (6950))) :lonset (quoteldur (quote ((355) (341) (328) (314) (303) (292) (282) (272) (265) (258) (252) (248) (245) (245) (247) (251) (258) (268) (280) (287) (293) (297) (298) (297) (294) (288) (280) (270) (258) (243) (232) (222) (215) (209) (206) (206) (207) (212) (218) (226) (237) (250) (259) (268) (275) (279) (281) (282) (281) (277) (272) (266) (256) (248) (240) (234) (230) (227) (225) (226) (227) (231) (236) (242) (249) (256) (260) (262) (262) (259) (253) (246) (236) (223) (208) (191) (173) (155) (137) (124) (111) (100) (90) (83) (78) (73) (71) (71) (71) (73) (74) (75) (78) (80) (81) (84) (86) (88) (91) (94) (97) (100) (102) (104) (106) (108) (109) (110) (111) (111) (111) (111) (111) (112) (113) (114) (116) (118) (121) (125) (128) (131) (136) (142) (146) (152) (159) (164) (171) (178) (185) (193) (200) (208) (218) (225) (232) (237) (240) (240) (238) (234) (228) (221) (211) (198) (185) (170) (157) (145) (137) (130) (125) (121) (120) (121) (124) (128) (134) (141) (148) (153) (159) (163) (167) (170) (173) (175) (176) (177) (177) (177) (177) (177) (176) (176) (175) (174) (173) (172) (171) (169) (168) (167) (168) (169) (172) (175) (179) (185) (191) (198) (207) (216) (227) (235) (242) (249) (254) (259) (262) (264) (264) (264) (263) (260) (257) (253) (248) (244) (238) (232) (225) (218) (210) (202) (192) (183) (175) (169) (164) (163) (162) (164) (168) (174) (182) (193) (204) (217) (228) (238) (243) (247) (247) (245) (240) (234) (222) (210) (195) (178) (163) (155) (148) (145) (146) (150) (158) (169) (185) (202) (223) (248) (265) (281) (292) (301) (305) (306) (303) (296) (287) (273) (255) (238) (223) (210) (198) (191) (183) (178) (176) (175) (176) (180) (186) (190) (193) (195) (195) (193) (190) (185) (180) (172) (163) (152) (142) (132) (125) (118) (115) (112) (110) (108) (108) (108) (110) (111) (113) (116) (119) (123) (127))) :lvel (quote ((62) (62) (62) (62) (62) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (69) (69) (69) (69) (69) (69) (69) (69) (69) (68) (68) (68) (68) (68) (68) (68) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (65) (65) (65) (65) (64) (64) (64) (64) (63) (63) (63) (63) (63) (62) (62) (62) (61) (61) (61) (61) (60) (60) (60) (60) (59) (59) (59) (59) (58) (58) (58) (57) (57) (57) (57) (56))) :loffset (quotelchan (quote ((15) (6) (10) (20) (14) (4) (14) (10) (16) (4) (3) (2) (11) (16) (3) (9) (4) (3) (12) (14) (2) (13) (8) (19) (13) (13) (13) (6) (12) (11) (8) (16) (10) (7) (16) (6) (7) (5) (11) (17) (3) (18) (14) (1) (8) (15) (11) (9) (17) (2) (12) (17) (16) (13) (5) (7) (14) (12) (11) (3) (8) (17) (9) (11) (7) (10) (2) (5) (10) (13) (16) (7) (16) (15) (9) (7) (9) (12) (15) (10) (18) (10) (3) (9) (16) (15) (5) (9) (5) (16) (11) (6) (9) (8) (13) (2) (5) (9) (7) (11) (16) (6) (11) (3) (12) (13) (5) (3) (7) (2) (7) (7) (4) (7) (17) (11) (6) (9) (17) (10) (4) (7) (7) (12) (16) (8) (12) (15) (15) (7) (13) (10) (2) (13) (12) (7) (7) (11) (20) (11) (8) (12) (10) (2) (17) (16) (10) (9) (10) (9) (6) (6) (17) (11) (12) (19) (20) (8) (12) (11) (8) (10) (9) (9) (11) (12) (10) (6) (13) (10) (13) (10) (7) (13) (14) (5) (13) (19) (11) (16) (8) (4) (5) (9) (3) (15) (19) (16) (11) (16) (5) (6) (8) (5) (5) (9) (15) (11) (3) (17) (17) (11) (8) (13) (12) (18) (12) (6) (9) (17) (7) (18) (16) (14) (12) (6) (14) (8) (8) (4) (15) (15) (13) (16) (12) (7) (15) (4) (12) (17) (18) (10) (2) (14) (5) (16) (6) (7) (3) (3) (4) (4) (10) (10) (2) (12) (11) (14) (16) (17) (10) (11) (17) (4) (14) (9) (17) (12) (17) (7) (16) (2) (5) (12) (6) (6) (4) (12) (10) (4) (4) (11) (10) (5) (19) (15) (6) (4) (5) (12) (15) (16) (9) (19) (18) (2) (14) (15) (9) (13) (9) (8) (18) (10) (10) (18) (10) (13) (14) (8) (16) (19) (13) (14) (8))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (cursor-mode palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list (quote :normal) 0 nil (quote t) 1 0 (om-make-point 125 23) (om-make-point 1069 720) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 48 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 300 148) (om-make-point 55 30) (list 1 20) "(1 20)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 8" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 85 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 402 3) (om-make-point 76 30) (list 288 450) "(288 450)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 480 0) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 347 11) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 431 126) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.4390245 4.878049 7.317073 9.756098 12.195122 14.634146 17.073172 19.512196 21.95122 24.390244 26.829268 29.268292 31.707316 34.146344 36.585366 39.02439 41.463414 43.90244 46.341465 48.780487 51.219513 53.658535 56.097557 58.536583 60.975605 63.41463 65.85366 68.29269 70.7317 73.17073 75.60976 78.04878 80.48781 82.92683 85.36585 87.80488 90.243904 92.68293 95.12195 97.560974 100.0 102.439026 104.878044 107.31707 109.756096 112.195114 114.63414 117.073166 119.5122 121.95121 124.390236 126.82926 129.2683 131.70732 134.14635 136.58538 139.02439 141.4634 143.90244 146.34146 148.78049 151.21952 153.65854 156.09757 158.53659 160.97562 163.41461 165.85366 168.29268 170.7317 173.17073 175.60976 178.04878 180.48781 182.92684 185.36586 187.80487 190.2439 192.68292 195.12195 197.56098 200.0 202.43903 204.87805 207.31708 209.75609 212.19512 214.63414 217.07317 219.51219 221.95122 224.39023 226.82927 229.26828 231.70732 234.14633 236.58538 239.0244 241.46341 243.90242 246.34146 248.78047 251.21952 253.65853 256.09756 258.5366 260.97562 263.41464 265.85364 268.2927 270.73172 273.17075 275.60974 278.04877 280.4878 282.9268 285.36584 287.80487 290.2439 292.68292 295.12195 297.56097 300.0 302.43903 304.87805 307.31708 309.75607 312.19513 314.63416 317.07318 319.5122 321.95123 324.39026 326.82922 329.26828 331.7073 334.14633 336.58536 339.02438 341.4634 343.90244 346.34146 348.7805 351.2195 353.6585 356.09756 358.5366 360.97562 363.41464 365.85367 368.2927 370.73172 373.17075 375.60974 378.04877 380.4878 382.92682 385.36584 387.80487 390.2439 392.68292 395.12195 397.56094 400.0 402.43903 404.87805 407.31708 409.7561 412.19513 414.63416 417.07318 419.51218 421.95123 424.39023 426.82925 429.26828 431.7073 434.14633 436.58533 439.02438 441.46338 443.90244 446.34146 448.78046 451.2195 453.65854 456.0976 458.53656 460.97562 463.41464 465.85364 468.29266 470.73172 473.17075 475.60974 478.0488 480.48776 482.92682 485.36584 487.80484 490.2439 492.68292 495.12195 497.56094 500.0 502.43903 504.87802 507.31705 509.7561 512.1951 514.63416 517.0732 519.5122 521.95124 524.39026 526.8293 529.2683 531.7073 534.14637 536.5854 539.0244 541.46344 543.90247 546.3415 548.7805 551.2195 553.6585 556.09754 558.53656 560.9756 563.4146 565.8536 568.29267 570.7317 573.1707 575.60975 578.04877 580.4878 582.9268 585.36585 587.8049 590.2439 592.68287 595.12195 597.561 600.0 602.439 604.87806 607.3171 609.7561 612.1951 614.63416 617.0732 619.51215 621.95124 624.39026 626.8293 629.2683 631.70734 634.14637 636.5854 639.0244 641.46344 643.90247 646.34144 648.7805 651.2195 653.65845 656.09754 658.53656 660.9756 663.4146 665.85364 668.29267 670.7317 673.1707 675.60975 678.04877 680.48774 682.9268 685.36585 687.8049 690.2439 692.6829 695.12195 697.561 700.0 702.439 704.87806 707.317 709.7561 712.1951 714.63416 717.0732 719.5122 721.95124 724.39026 726.8293 729.2683 731.70734 734.1463 736.5854 739.0244 741.46344 743.90247 746.3415 748.7805 751.2195 753.6585 756.09754 758.53656 760.9756 763.4146 765.85364 768.2926 770.7317 773.1707 775.60975 778.04877 780.4878 782.9268 785.36585 787.8049 790.2439 792.6829 795.1219 797.561 800.0 802.439 804.87806 807.3171 809.7561 812.19507 814.63416 817.0732 819.5122 821.9512 824.39026 826.8293 829.2683 831.70734 834.14637 836.5854 839.02436 841.46344 843.90247 846.3415 848.78046 851.2195 853.6585 856.0975 858.53656 860.9756 863.4146 865.85364 868.29267 870.7317 873.17066 875.60975 878.04877 880.4878 882.92676 885.3659 887.8049 890.24384 892.6829 895.12195 897.5609 900.0 902.439 904.878 907.3171 909.75605 912.1952 914.63416 917.0731 919.5122 921.95124 924.3902 926.8293 929.2683 931.7073 934.14637 936.5853 939.0245 941.46344 943.9024 946.3415 948.7805 951.2195 953.6585 956.0976 958.53656 960.9755 963.4146 965.85364 968.2926 970.7317 973.1707 975.6097 978.04877 980.4878 982.92676 985.36585 987.8048 990.2439 992.6829 995.1219 997.561 1000.0)) (quote (750.0 192.0 340.0 532.0 1000.0 963.99994 230.0 147.0 687.0 839.0 66.0 978.0 164.0 106.0 59.000004 28.0 450.0 973.0 646.0 36.0 538.0 127.0 152.0 93.0 405.0 955.0 501.00003 21.0 649.0 661.0 255.0 973.0 711.0 502.0 670.0 663.0 357.0 159.0 709.0 515.0 439.0 253.0 940.00007 494.0 427.0 209.0 893.99994 303.0 7.0 576.0 161.0 391.0 986.0 770.0 79.0 903.0 842.0 559.0 19.0 320.0 389.0 856.0 559.0 277.0 677.0 916.99994 14.999999 533.0 626.0 922.0 753.0 979.99994 221.0 197.0 286.0 470.00003 922.0 530.0 665.0 153.0 59.000004 398.0 969.0 407.0 468.00003 531.0 345.0 178.0 586.0 35.0 247.0 142.0 630.0 625.0 776.0 832.0 136.0 780.0 897.00007 487.99997 423.0 325.0 160.0 635.0 559.0 717.0 750.0 237.00002 967.99994 605.0 19.0 144.0 412.0 924.99994 531.0 843.0 183.0 410.0 508.0 52.0 795.0 787.0 113.0 344.0 435.0 497.00003 213.0 756.0 2.0 219.0 158.0 497.00003 269.0 530.0 561.0 810.0 250.0 295.0 668.0 71.0 755.0 43.0 996.0 187.0 33.0 255.0 331.0 59.000004 272.0 402.0 249.0 139.0 115.0 646.0 920.0 594.0 47.0 553.0 368.0 967.00007 44.0 905.00007 38.0 359.0 62.0 497.00003 599.0 958.0 143.0 531.0 600.0 682.0 910.0 659.0 291.0 901.99994 116.00001 621.0 28.0 544.0 766.0 481.0 326.0 263.0 420.0 535.0 986.0 950.0 57.0 408.0 565.0 796.0 198.0 28.0 794.0 953.0 654.0 477.99997 292.0 729.0 309.0 444.99997 173.0 525.0 87.0 823.0 736.0 65.0 812.0 936.99994 997.0 967.99994 133.0 531.0 840.0 102.0 424.0 510.0 372.0 508.0 434.0 607.0 229.0 840.0 402.0 212.0 434.0 746.0 471.0 637.0 539.0 432.0 322.0 897.99994 90.0 971.99994 214.0 460.0 880.0 959.00007 495.0 679.0 923.0 199.0 171.0 24.0 395.0 430.0 5.0 744.0 757.0 949.0 928.99994 267.0 741.0 767.0 70.0 615.0 58.000004 394.0 195.0 302.0 127.0 431.0 675.0 889.99994 332.0 59.000004 864.0 855.0 854.0 515.0 473.0 264.0 740.0 535.0 854.0 938.0 526.0 282.0 48.0 804.0 865.0 189.0 841.0 916.99994 753.0 572.0 979.99994 303.0 273.0 681.0 734.0 169.0 367.0 151.0 186.0 939.0 706.0 878.0 332.0 955.99994 645.0 149.0 560.0 813.0 117.00001 465.0 657.0 877.0 1000.0 594.0 361.0 24.0 876.0 35.0 296.0 798.0 183.0 433.0 270.0 121.99999 98.0 186.0 166.0 159.0 622.0 181.0 552.0 9.0 318.0 951.99994 402.0 639.0 1000.0 522.0 889.00007 422.0 876.0 212.0 908.0 112.0 412.0 931.0 395.0 779.0 920.0 335.0 884.0 130.0 725.0 848.0 72.0 195.0 283.0 715.0 283.0 148.0 439.0 58.000004 539.0 698.0 226.0 141.0 111.0 363.0 649.0 419.0 11.0 955.0 989.0 681.0 313.0 157.0 117.00001 194.0 651.0 469.0 881.0 800.0 127.0 978.0 967.99994 905.99994 14.999999 177.0 901.00007 750.0 362.0 528.0 665.0 433.0 187.0 558.0 946.0 425.0 569.0 405.0 947.0 429.0 746.0 573.0 683.0 257.0 702.0 815.0 978.0 568.0 818.0 615.0 390.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.5906737 5.1813474 7.772021 10.362695 12.953368 15.544042 18.134715 20.72539 23.316063 25.906737 28.497408 31.088084 33.678757 36.26943 38.860104 41.45078 44.04145 46.632126 49.222794 51.813473 54.404145 56.994816 59.585488 62.176167 64.76684 67.35751 69.94819 72.53886 75.12953 77.72021 80.31088 82.90156 85.492226 88.0829 90.67358 93.26425 95.85492 98.44559 101.03627 103.626946 106.21761 108.80829 111.39896 113.98963 116.580315 119.170975 121.76166 124.35233 126.94301 129.53368 132.12435 134.71503 137.3057 139.89638 142.48705 145.07772 147.6684 150.25907 152.84975 155.44042 158.03108 160.62177 163.21244 165.80312 168.39379 170.98445 173.57514 176.1658 178.75647 181.34716 183.93782 186.5285 189.11917 191.70984 194.30052 196.89118 199.48188 202.07254 204.6632 207.25389 209.84456 212.43523 215.02591 217.61658 220.20725 222.79792 225.38858 227.97927 230.56993 233.16063 235.7513 238.34195 240.93265 243.52332 246.11397 248.70467 251.29534 253.88602 256.47668 259.06735 261.65802 264.2487 266.8394 269.43005 272.02072 274.6114 277.2021 279.79276 282.38342 284.9741 287.56476 290.15543 292.74612 295.3368 297.92746 300.51813 303.1088 305.6995 308.29016 310.88083 313.47147 316.06216 318.65286 321.24353 323.8342 326.42487 329.01553 331.60623 334.1969 336.78757 339.37824 341.9689 344.55957 347.15027 349.74094 352.3316 354.92227 357.51294 360.1036 362.6943 365.28497 367.87564 370.4663 373.057 375.64767 378.23834 380.829 383.41968 386.01038 388.60104 391.1917 393.78235 396.37305 398.96375 401.5544 404.14508 406.73575 409.3264 411.91708 414.50778 417.09845 419.68912 422.2798 424.87045 427.46115 430.05182 432.6425 435.23315 437.82382 440.4145 443.00516 445.59583 448.1865 450.77716 453.3679 455.95853 458.5492 461.13986 463.73053 466.32126 468.91193 471.5026 474.09323 476.6839 479.27457 481.8653 484.45596 487.04663 489.63727 492.22794 494.81866 497.40933 500.0 502.59067 505.1813 507.77203 510.3627 512.95337 515.54407 518.1347 520.7254 523.31604 525.90674 528.4974 531.0881 533.6788 536.2694 538.8601 541.4508 544.04145 546.63215 549.2228 551.8135 554.4042 556.9948 559.5855 562.17615 564.76685 567.3575 569.9482 572.5389 575.1295 577.72016 580.31086 582.90155 585.49225 588.0829 590.6736 593.2642 595.8549 598.4456 601.03626 603.62696 606.2176 608.8083 611.399 613.9896 616.5803 619.17096 621.76166 624.35236 626.94294 629.5337 632.1243 634.715 637.3057 639.89637 642.48707 645.07764 647.6684 650.2591 652.84974 655.4404 658.03107 660.62177 663.21247 665.8031 668.3938 670.98444 673.57514 676.16584 678.7565 681.34717 683.9378 686.5285 689.11915 691.70984 694.30054 696.8912 699.4819 702.0725 704.6632 707.2539 709.84455 712.43525 715.0259 717.6166 720.2072 722.7979 725.3886 727.97925 730.56995 733.16065 735.7513 738.3419 740.9326 743.5233 746.114 748.70466 751.29535 753.886 756.4767 759.0674 761.658 764.2487 766.83936 769.43 772.02076 774.6114 777.2021 779.7927 782.3834 784.9741 787.5647 790.15546 792.7461 795.3368 797.9275 800.5181 803.1088 805.6994 808.29017 810.88086 813.4715 816.0622 818.6528 821.2435 823.83417 826.42487 829.01557 831.6062 834.1969 836.7875 839.37824 841.96894 844.5596 847.15027 849.7409 852.3316 854.9223 857.51294 860.10364 862.6943 865.285 867.8757 870.4663 873.057 875.64765 878.23835 880.829 883.4196 886.0103 888.6011 891.19165 893.7824 896.373 898.9637 901.5543 904.145 906.7358 909.32636 911.91706 914.5077 917.0984 919.68915 922.2797 924.8705 927.46106 930.05176 932.6425 935.2331 937.82386 940.4144 943.0052 945.59577 948.18647 950.7772 953.3678 955.95856 958.54914 961.13984 963.7306 966.32117 968.9119 971.5025 974.09327 976.68396 979.27454 981.8653 984.4559 987.04664 989.6373 992.22797 994.81867 997.40925 1000.0)) (quote (868.0 967.00007 723.0 329.0 241.99999 141.0 444.0 893.99994 289.0 411.0 723.0 798.0 57.0 561.0 721.0 928.00007 859.0 289.0 529.0 218.0 644.0 853.0 547.0 352.0 944.00007 690.0 234.00002 257.0 318.0 344.0 643.0 651.0 939.0 387.0 230.0 602.0 475.99997 23.0 352.0 785.0 694.0 475.0 4.0 389.0 425.0 229.0 967.00007 2.0 504.0 569.0 182.0 493.0 316.0 390.0 876.0 262.0 467.0 916.99994 844.0 617.0 467.0 244.99999 73.0 462.00003 555.0 802.0 804.0 343.0 307.0 893.99994 218.0 150.0 455.0 758.0 136.0 526.0 936.99994 227.0 205.0 156.0 508.0 458.0 292.0 168.0 244.99999 81.0 400.0 942.0 389.0 405.0 176.0 330.0 244.99999 360.0 201.0 287.0 762.0 883.0 951.0 523.0 193.0 565.0 17.0 434.0 640.0 785.0 842.0 993.0 957.0 662.0 766.0 305.0 606.0 793.0 154.0 848.0 433.0 663.0 842.0 563.0 686.0 651.0 830.0 86.0 783.0 525.0 889.00007 397.0 920.99994 367.0 928.99994 541.0 224.0 922.0 813.0 63.0 442.0 322.0 92.0 872.0 62.0 140.0 309.0 448.0 184.0 159.0 689.0 142.0 726.0 175.0 516.0 160.0 675.0 450.99997 91.0 789.0 296.0 246.0 59.999997 226.0 521.0 84.0 185.0 81.0 905.99994 614.0 53.0 334.0 671.0 536.0 932.99994 388.0 16.0 78.0 846.0 683.0 280.0 177.0 571.0 821.0 492.0 815.0 504.0 888.0 370.0 726.0 305.0 184.0 784.0 116.00001 776.0 993.0 986.0 804.0 808.0 514.0 745.0 293.0 867.0 797.0 223.0 70.0 546.0 667.0 330.0 664.0 562.0 178.0 817.0 450.99997 479.99997 387.0 176.0 359.0 871.0 427.0 989.0 889.00007 419.0 716.0 346.0 200.0 467.0 759.0 2.0 291.0 40.0 766.0 867.0 602.0 458.0 351.0 21.0 658.0 879.0 348.0 220.0 758.0 154.0 71.0 551.0 603.0 499.00003 820.0 975.99994 817.0 101.0 163.0 98.0 554.0 510.0 517.0 468.00003 612.0 574.0 448.99997 561.0 903.0 678.0 240.99999 677.0 332.0 888.0 1.0 440.0 242.99999 353.0 334.0 687.0 885.99994 151.0 344.0 973.0 225.0 220.0 668.0 78.0 690.0 450.99997 852.0 943.0 442.99997 107.0 278.0 147.0 596.0 380.0 455.0 120.99999 701.0 912.0 802.0 39.0 580.0 252.0 932.99994 81.0 39.0 0.0 252.0 148.0 614.0 307.0 496.0 953.0 624.0 103.0 759.0 169.0 829.0 14.999999 23.0 378.0 152.0 836.0 371.0 467.0 253.0 730.0 324.0 750.0 692.0 939.0 33.0 121.99999 8.0 826.0 177.0 844.0 771.0 194.0 216.0 279.0 224.0 323.0 821.0 259.0 113.0 518.0 420.0 633.0 184.0 803.0 450.0 603.0 97.0 72.0 702.0 260.0 115.0 258.0 239.99999 128.0 446.0 364.0 250.0 889.00007 819.0 130.0 239.99999 574.0 276.0 589.0 819.0 199.0 826.0 185.0 755.0 932.99994 801.0 526.0 871.0 845.0 940.00007 990.0 820.0 742.0 397.0 730.0 897.00007 1.0 665.0 440.99997 702.0 828.0 162.0 97.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 3.0030032 6.0060063 9.009009 12.0120125 15.015016 18.018019 21.02102 24.024025 27.027028 30.030032 33.03303 36.036038 39.03904 42.04204 45.045044 48.04805 51.05105 54.054055 57.057057 60.060063 63.063065 66.06606 69.06907 72.072075 75.07507 78.07808 81.08107 84.08408 87.08709 90.09009 93.093094 96.0961 99.0991 102.1021 105.1051 108.10811 111.11111 114.11411 117.11712 120.120125 123.12312 126.12613 129.12914 132.13213 135.13513 138.13814 141.14115 144.14415 147.14714 150.15015 153.15316 156.15616 159.15915 162.16214 165.16516 168.16817 171.17118 174.17418 177.17717 180.18018 183.18317 186.18619 189.1892 192.1922 195.19519 198.1982 201.2012 204.2042 207.20722 210.2102 213.21321 216.21622 219.21923 222.22222 225.2252 228.22823 231.23122 234.23424 237.23726 240.24025 243.24324 246.24625 249.24924 252.25226 255.25525 258.25827 261.26126 264.26425 267.26727 270.27026 273.2733 276.27628 279.27927 282.2823 285.28528 288.2883 291.2913 294.29428 297.2973 300.3003 303.3033 306.3063 309.3093 312.31232 315.3153 318.3183 321.3213 324.32428 327.32733 330.33032 333.33334 336.33633 339.33933 342.34235 345.34534 348.34836 351.35135 354.35434 357.35736 360.36035 363.36334 366.36633 369.36932 372.37238 375.37537 378.3784 381.38138 384.3844 387.3874 390.39038 393.3934 396.3964 399.3994 402.4024 405.4054 408.4084 411.4114 414.41443 417.41742 420.4204 423.42343 426.42642 429.42944 432.43243 435.43543 438.43845 441.44144 444.44443 447.44745 450.4504 453.45343 456.45645 459.45947 462.46243 465.46545 468.46848 471.47144 474.47452 477.47748 480.4805 483.4835 486.48648 489.48947 492.4925 495.49545 498.49847 501.5015 504.50452 507.50748 510.5105 513.5135 516.51655 519.51954 522.5225 525.5255 528.5285 531.53156 534.53455 537.53754 540.5405 543.5435 546.5466 549.54957 552.55256 555.55555 558.55854 561.5616 564.5646 567.56757 570.57056 573.57355 576.5766 579.5796 582.5826 585.5856 588.58857 591.5916 594.5946 597.5976 600.6006 603.6036 606.6066 609.6096 612.6126 615.6156 618.6186 621.62165 624.62464 627.6276 630.6306 633.6336 636.6366 639.63965 642.6426 645.6456 648.64856 651.6517 654.65467 657.65766 660.66065 663.66364 666.6667 669.6697 672.67267 675.67566 678.67865 681.68165 684.6847 687.6876 690.6907 693.6936 696.6967 699.6997 702.7027 705.7057 708.7087 711.71174 714.7147 717.7177 720.7207 723.7237 726.7267 729.72974 732.73267 735.7357 738.73865 741.74176 744.74476 747.74775 750.75074 753.7538 756.7568 759.75977 762.76276 765.76575 768.7688 771.7717 774.7748 777.7777 780.78077 783.7838 786.7868 789.7898 792.7928 795.7958 798.7988 801.8018 804.8048 807.8078 810.8108 813.81385 816.8168 819.8198 822.8228 825.8258 828.82886 831.83185 834.83484 837.8378 840.8408 843.8439 846.84687 849.84986 852.85285 855.85584 858.8589 861.8619 864.86487 867.86786 870.87085 873.8739 876.8769 879.8798 882.8829 885.88587 888.88886 891.8919 894.8949 897.8978 900.9008 903.904 906.90686 909.9099 912.9129 915.91596 918.91895 921.92194 924.92487 927.9279 930.9309 933.9339 936.93696 939.93995 942.9429 945.94587 948.94904 951.9519 954.95496 957.95795 960.961 963.964 966.967 969.9699 972.97297 975.97596 978.97895 981.982 984.985 987.9879 990.9909 993.9941 996.99695 1000.0)) (quote (781.0 506.0 363.0 371.0 403.0 318.0 946.0 503.00003 386.0 742.0 797.0 422.0 839.0 827.0 789.0 514.0 474.00003 280.0 681.0 830.0 273.0 526.0 705.0 669.0 682.0 851.0 611.0 977.0 951.99994 892.0 321.0 943.0 567.0 339.0 534.0 128.0 627.0 314.0 384.0 318.0 219.0 27.0 649.0 14.0 923.0 434.0 923.0 683.0 515.0 51.0 678.0 779.0 53.0 776.0 723.0 430.0 59.000004 905.00007 531.0 945.0 617.0 243.99999 60.999997 961.0 181.0 428.0 210.0 749.0 222.0 436.0 156.0 795.0 89.0 865.0 409.0 936.99994 838.0 749.0 111.0 910.0 873.0 865.0 253.0 866.0 565.0 3.0 885.00007 520.0 319.0 696.0 733.0 893.99994 177.0 832.0 13.0 116.00001 513.0 781.0 216.0 629.0 671.0 794.0 424.0 924.00007 900.0 389.0 919.0 698.0 726.0 314.0 579.0 223.0 584.0 34.0 868.0 421.0 893.00007 974.0 297.0 298.0 348.0 965.0 208.0 464.00003 307.0 218.0 370.0 764.0 798.0 212.0 893.00007 832.0 425.0 487.99997 452.99997 448.0 287.0 733.0 343.0 253.0 858.0 174.0 975.00007 43.0 54.0 459.0 998.99994 496.0 589.0 844.0 634.0 936.00007 428.0 521.0 502.0 576.0 269.0 376.0 705.0 33.0 8.0 398.0 979.00007 171.0 753.0 555.0 627.0 88.0 326.0 419.0 746.0 920.0 498.0 289.0 283.0 750.0 729.0 323.0 883.0 845.0 103.0 468.00003 188.0 220.0 290.0 810.0 596.0 598.0 7.0 432.0 733.0 58.000004 118.99999 998.99994 777.0 672.0 263.0 326.0 804.0 187.0 321.0 378.0 433.0 947.0 459.0 123.0 648.0 811.0 669.0 171.0 867.0 383.0 136.0 766.0 66.0 517.0 977.0 305.0 782.0 818.0 310.0 892.0 513.0 97.0 123.0 352.0 444.0 748.0 406.0 397.0 897.00007 349.0 411.0 711.0 844.0 962.0 954.0 286.0 807.0 143.0 258.0 379.0 825.0 742.0 624.0 928.99994 216.0 479.0 485.99997 115.0 10.0 89.0 200.0 440.99997 670.0 146.0 501.00003 790.0 420.0 434.0 291.0 617.0 169.0 787.0 603.0 565.0 235.00002 747.0 994.99994 733.0 455.0 148.0 897.00007 185.0 399.0 91.0 954.0 767.0 627.0 853.0 233.00002 167.0 197.0 688.0 871.0 518.0 555.0 671.0 408.0 196.0 700.0 638.0 897.00007 955.99994 406.0 633.0 9.0 498.0 72.0 238.99999 340.0 105.0 696.0 348.0 535.0 286.0 888.0 311.0 545.0 701.0 171.0 197.0 974.0 491.0 928.99994 871.0 481.99997 550.0 593.0 574.0 90.0 819.0 591.0 430.0 918.0 844.0 602.0 720.0 42.0 336.0 622.0 669.0 685.0 381.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.8735633 5.7471266 8.620689 11.494253 14.367816 17.241379 20.11494 22.988507 25.862069 28.735632 31.609196 34.482758 37.356324 40.22988 43.103447 45.977013 48.850575 51.724137 54.597702 57.471264 60.34483 63.21839 66.09196 68.965515 71.83908 74.71265 77.586205 80.45976 83.333336 86.206894 89.08046 91.954026 94.82758 97.70115 100.574715 103.44827 106.32184 109.195404 112.06896 114.94253 117.816086 120.68966 123.56321 126.43678 129.31035 132.18392 135.05747 137.93103 140.8046 143.67816 146.55173 149.4253 152.29883 155.17241 158.04598 160.91953 163.7931 166.66667 169.54022 172.41379 175.28736 178.16092 181.03449 183.90805 186.78162 189.65517 192.52873 195.4023 198.27587 201.14943 204.023 206.89655 209.77011 212.64368 215.51723 218.39081 221.26438 224.13793 227.01149 229.88506 232.75862 235.63217 238.50574 241.37932 244.25286 247.12642 250.0 252.87357 255.74713 258.6207 261.49426 264.36783 267.2414 270.11493 272.9885 275.86206 278.73563 281.6092 284.48276 287.35632 290.22986 293.10345 295.97702 298.8506 301.72415 304.59766 307.47125 310.34482 313.21838 316.09195 318.9655 321.83905 324.71265 327.5862 330.45978 333.33334 336.2069 339.08044 341.954 344.82758 347.70114 350.5747 353.44824 356.32184 359.1954 362.06897 364.94254 367.8161 370.68967 373.56323 376.43677 379.31033 382.1839 385.05746 387.93103 390.8046 393.67816 396.55173 399.4253 402.29886 405.17242 408.046 410.91953 413.7931 416.66666 419.54022 422.4138 425.28735 428.16092 431.03445 433.90805 436.78162 439.65518 442.52875 445.4023 448.27585 451.1494 454.02298 456.89655 459.7701 462.64368 465.51724 468.39084 471.26434 474.1379 477.01147 479.88504 482.75864 485.63214 488.5057 491.37927 494.25284 497.12643 500.0 502.87357 505.74713 508.6207 511.49426 514.3678 517.2414 520.1149 522.9885 525.86207 528.73566 531.6092 534.4828 537.3563 540.22986 543.10346 545.977 548.8506 551.7241 554.5977 557.47126 560.34485 563.2184 566.0919 568.9655 571.83905 574.71265 577.5862 580.4597 583.3333 586.2069 589.08045 591.95405 594.8275 597.7012 600.5747 603.4483 606.32184 609.1953 612.069 614.9425 617.8161 620.68964 623.56324 626.43677 629.3103 632.1839 635.0575 637.931 640.8046 643.6781 646.5517 649.4253 652.2988 655.1724 658.0459 660.91956 663.7931 666.6667 669.5402 672.4138 675.28736 678.1609 681.0345 683.908 686.7816 689.65516 692.5287 695.4023 698.2759 701.1494 704.023 706.8965 709.77015 712.6437 715.5172 718.3908 721.2643 724.13794 727.0115 729.8851 732.7586 735.6322 738.50574 741.37934 744.25287 747.12647 750.0 752.87354 755.74714 758.62067 761.49427 764.3678 767.2414 770.1149 772.9885 775.86207 778.73566 781.6092 784.4828 787.3563 790.22986 793.10346 795.977 798.8506 801.7241 804.5977 807.47126 810.34485 813.2184 816.092 818.9655 821.83905 824.71265 827.5862 830.4598 833.3333 836.2069 839.08045 841.95405 844.8276 847.7011 850.5747 853.4483 856.32184 859.1954 862.0689 864.9425 867.8161 870.68964 873.56324 876.4367 879.31037 882.1839 885.0575 887.931 890.8046 893.67817 896.5517 899.4253 902.2988 905.1724 908.04596 910.91956 913.7931 916.6667 919.5402 922.4139 925.28736 928.1609 931.0345 933.908 936.7817 939.65516 942.5287 945.4023 948.2758 951.1495 954.02295 956.8965 959.7701 962.6436 965.5173 968.39075 971.2643 974.1379 977.0114 979.8851 982.75855 985.6322 988.5057 991.37934 994.25287 997.12647 1000.0)) (quote (430.0 140.0 688.0 974.0 741.0 1000.0 104.0 263.0 339.0 644.0 876.0 228.0 326.0 230.0 249.0 592.0 729.0 897.99994 766.0 861.0 8.0 790.0 76.0 135.0 675.0 974.0 861.0 51.0 901.99994 805.0 434.0 536.0 617.0 366.0 514.0 196.0 712.0 156.0 184.0 660.0 988.0 584.0 450.99997 438.0 707.0 277.0 94.0 752.0 373.0 554.0 29.999999 570.0 489.0 172.0 323.0 757.0 53.0 487.0 936.99994 68.0 260.0 805.0 356.0 631.0 817.0 36.0 120.99999 936.99994 884.0 43.0 838.0 270.0 319.0 891.0 936.00007 636.0 606.0 816.0 789.0 384.0 705.0 345.0 970.0 422.0 596.0 892.0 247.0 540.0 908.0 317.0 5.0 39.0 585.0 497.00003 257.0 260.0 699.0 373.0 700.0 883.0 267.0 540.0 757.0 616.0 375.0 539.0 268.0 768.0 572.0 361.0 593.0 752.0 611.0 73.0 299.0 389.0 853.0 244.99999 76.0 92.0 494.0 994.00007 766.0 310.0 735.0 384.0 292.0 623.0 474.00003 904.0 373.0 745.0 507.00003 334.0 814.0 955.99994 42.0 721.0 985.0 101.0 850.0 616.0 1000.0 168.0 998.99994 162.0 252.0 231.00002 998.99994 552.0 679.0 204.0 961.0 613.0 11.0 404.0 448.0 429.0 688.0 581.0 989.0 109.0 29.999999 210.0 566.0 108.0 779.0 429.0 461.0 641.0 440.99997 242.99999 986.0 771.0 55.0 954.0 736.0 679.0 138.0 832.0 721.0 668.0 412.0 249.0 840.0 132.0 717.0 257.0 922.0 91.0 471.0 539.0 983.00007 900.0 92.0 959.00007 127.0 223.0 309.0 897.99994 288.0 727.0 830.0 630.0 704.0 616.0 209.0 810.0 501.00003 119.99999 705.0 350.0 136.0 409.0 885.00007 91.0 287.0 302.0 524.0 593.0 1.0 738.0 358.0 928.99994 167.0 430.0 615.0 832.0 671.0 520.0 545.0 537.0 258.0 893.99994 428.0 161.0 821.0 133.0 288.0 419.0 376.0 138.0 514.0 450.0 208.0 254.0 268.0 424.0 522.0 573.0 316.0 251.0 829.0 442.0 825.0 985.0 80.0 57.0 865.0 794.0 700.0 97.0 277.0 854.0 843.0 221.0 586.0 975.00007 138.0 717.0 68.0 181.0 454.0 909.00007 252.0 566.0 157.0 110.0 509.00003 510.0 672.0 696.0 822.0 577.0 642.0 814.0 469.0 736.0 649.0 747.0 152.0 629.0 4.0 845.0 915.0 592.0 422.0 702.0 131.0 411.0 378.0 290.0 389.0 602.0 11.0 72.0 405.0 440.99997 638.0 811.0 173.0 63.0 611.0 946.0 686.0 459.0 120.99999 768.0 434.0 643.0 645.0 463.0 907.0 452.0 358.0 570.0 55.0 920.0 682.0 328.0 955.99994 748.0 319.0 683.0 92.0 664.0 124.0 262.0 458.0 935.0 594.0 527.0 649.0 391.0 615.0 535.0 814.0 560.0 842.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.4813896 4.962779 7.4441686 9.925558 12.406948 14.888337 17.369727 19.851117 22.332507 24.813897 27.295287 29.776675 32.258065 34.739453 37.220845 39.702233 42.183625 44.665013 47.146397 49.627793 52.10918 54.590573 57.07196 59.55335 62.03474 64.51613 66.99752 69.478905 71.9603 74.44169 76.92307 79.404465 81.88586 84.36725 86.84863 89.330025 91.81142 94.29279 96.77419 99.255585 101.73697 104.21836 106.69975 109.181145 111.66253 114.14392 116.62531 119.1067 121.58809 124.06948 126.550865 129.03226 131.51364 133.99504 136.47643 138.95781 141.43921 143.9206 146.40198 148.88338 151.36476 153.84615 156.32755 158.80893 161.29033 163.77172 166.2531 168.7345 171.21588 173.69727 176.17867 178.66005 181.14142 183.62284 186.10422 188.58559 191.067 193.54839 196.02977 198.51117 200.99256 203.47394 205.95534 208.43672 210.9181 213.3995 215.88089 218.36229 220.84366 223.32506 225.80646 228.28784 230.76921 233.25063 235.732 238.2134 240.6948 243.17618 245.65755 248.13896 250.62033 253.10173 255.58315 258.0645 260.5459 263.02728 265.5087 267.99008 270.47144 272.95285 275.43423 277.91562 280.39703 282.87842 285.3598 287.8412 290.32257 292.80396 295.28537 297.76675 300.24814 302.72952 305.2109 307.6923 310.1737 312.6551 315.13647 317.61786 320.09924 322.58066 325.06204 327.54343 330.0248 332.5062 334.98758 337.469 339.95038 342.43176 344.91315 347.39453 349.87592 352.35733 354.8387 357.3201 359.80148 362.28284 364.76428 367.24567 369.72705 372.20844 374.68982 377.17117 379.65262 382.134 384.61536 387.09677 389.57816 392.05954 394.54095 397.02234 399.5037 401.9851 404.4665 406.94788 409.4293 411.91068 414.39206 416.87344 419.35483 421.8362 424.31763 426.799 429.2804 431.76178 434.24316 436.72458 439.20596 441.68732 444.16873 446.65012 449.13147 451.6129 454.09427 456.57568 459.0571 461.53842 464.01984 466.50125 468.98264 471.464 473.9454 476.4268 478.9082 481.3896 483.87094 486.35236 488.83377 491.3151 493.7965 496.27792 498.7593 501.24066 503.72208 506.20346 508.68488 511.1663 513.64765 516.129 518.61036 521.0918 523.5732 526.05457 528.53595 531.0174 533.4988 535.98017 538.46155 540.9429 543.4243 545.9057 548.3871 550.86847 553.34986 555.83124 558.3127 560.79407 563.2754 565.75684 568.2382 570.7196 573.201 575.6824 578.16376 580.64515 583.1265 585.6079 588.08936 590.57074 593.0521 595.5335 598.0149 600.4963 602.97767 605.45905 607.9404 610.4218 612.9032 615.3846 617.866 620.3474 622.8288 625.3102 627.79157 630.27295 632.75434 635.2357 637.7171 640.1985 642.6799 645.1613 647.6427 650.1241 652.60547 655.08686 657.56824 660.0496 662.531 665.0124 667.4938 669.97516 672.4566 674.938 677.4194 679.90076 682.38215 684.8635 687.3449 689.8263 692.3077 694.78907 697.27045 699.75184 702.2333 704.71467 707.19605 709.6774 712.1588 714.6402 717.1216 719.60297 722.08436 724.5657 727.0471 729.52857 732.00995 734.49134 736.9727 739.4541 741.9355 744.4169 746.8982 749.37964 751.861 754.34235 756.8238 759.30524 761.7866 764.268 766.7494 769.2307 771.71216 774.19355 776.67487 779.1563 781.6377 784.1191 786.6005 789.0819 791.56324 794.0447 796.52607 799.0074 801.48884 803.9702 806.4516 808.933 811.41437 813.89576 816.3772 818.8586 821.3399 823.82135 826.30274 828.7841 831.2655 833.7469 836.2283 838.70966 841.19104 843.6724 846.1539 848.63526 851.11664 853.598 856.0794 858.5608 861.0422 863.52356 866.00495 868.4863 870.9677 873.44916 875.93055 878.4119 880.8933 883.37464 885.8561 888.33747 890.8188 893.30024 895.7816 898.26294 900.7444 903.2258 905.7072 908.18854 910.67 913.15137 915.6327 918.1142 920.5955 923.07685 925.55835 928.0397 930.5211 933.0025 935.4838 937.9653 940.44666 942.928 945.4094 947.8908 950.37214 952.8536 955.33497 957.8164 960.2977 962.7792 965.26056 967.7419 970.2234 972.7047 975.18604 977.66755 980.14887 982.6302 985.1117 987.593 990.07447 992.55585 995.0372 997.5186 1000.0)) (quote (647.0 699.0 741.0 817.0 724.0 483.0 967.00007 71.0 694.0 675.0 196.0 667.0 899.0 930.0 404.0 700.0 69.0 359.0 918.0 220.0 272.0 681.0 967.00007 438.0 699.0 385.0 279.0 630.0 935.0 682.0 998.99994 749.0 951.99994 878.0 352.0 854.0 677.0 80.0 740.0 161.0 22.0 41.0 481.99997 730.0 615.0 560.0 322.0 347.0 133.0 893.99994 522.0 748.0 240.99999 840.0 753.0 650.0 618.0 168.0 577.0 517.0 46.0 811.0 212.0 54.0 237.00002 506.0 986.0 901.99994 963.99994 21.0 774.0 850.0 811.0 742.0 377.0 922.0 163.0 190.0 348.0 360.0 446.99997 564.0 809.0 728.0 166.0 318.0 5.0 472.00003 858.0 196.0 578.0 43.0 118.00001 935.0 229.0 852.0 581.0 106.0 893.99994 723.0 512.0 52.0 493.0 340.0 85.0 556.0 326.0 363.0 70.0 655.0 446.99997 25.0 130.0 452.0 446.99997 286.0 146.0 283.0 446.0 444.0 448.99997 795.0 43.0 891.0 826.0 700.0 508.0 184.0 290.0 247.0 526.0 618.0 360.0 807.0 830.0 694.0 260.0 174.0 452.0 464.00003 646.0 275.0 301.0 645.0 730.0 86.0 8.0 117.00001 928.99994 359.0 121.99999 396.0 498.0 606.0 487.0 412.0 657.0 169.0 779.0 173.0 858.0 815.0 892.0 300.0 722.0 684.0 775.0 539.0 891.0 294.0 621.0 211.0 162.0 566.0 845.0 650.0 649.0 377.0 595.0 356.0 677.0 320.0 463.0 462.00003 698.0 509.00003 17.0 885.99994 513.0 826.0 799.0 422.0 103.0 442.0 857.0 437.0 224.0 847.0 737.0 92.0 743.0 712.0 284.0 393.0 442.0 216.0 959.99994 303.0 996.0 787.0 542.0 39.0 962.0 329.0 279.0 275.0 333.0 514.0 516.0 265.0 621.0 275.0 983.00007 394.0 332.0 853.0 913.00007 7.0 418.0 967.00007 309.0 730.0 381.0 255.0 73.0 281.0 149.0 741.0 973.0 199.0 531.0 401.0 135.0 446.0 431.0 404.0 497.00003 131.0 709.0 707.0 589.0 622.0 703.0 401.0 830.0 450.0 897.00007 824.0 723.0 723.0 57.0 633.0 552.0 675.0 300.0 174.0 765.0 760.0 683.0 129.0 464.00003 580.0 222.0 854.0 241.99999 978.0 383.0 581.0 139.0 749.0 736.0 87.0 498.0 23.0 942.0 639.0 55.0 913.00007 605.0 45.0 266.0 423.0 101.0 20.0 110.0 981.0 989.0 45.0 408.0 144.0 435.0 270.0 457.0 800.0 33.0 118.99999 726.0 342.0 468.00003 863.0 809.0 428.0 125.0 989.0 838.0 91.0 572.0 785.0 638.0 520.0 167.0 525.0 827.0 564.0 91.0 36.0 21.0 243.99999 719.0 59.999997 82.0 48.0 1.0 557.0 521.0 570.0 485.99997 861.0 32.0 210.0 197.0 550.0 124.0 212.0 148.0 607.0 22.0 111.0 504.0 359.0 232.00002 764.0 468.00003 226.0 483.0 271.0 371.0 320.0 603.0 605.0 944.00007 732.0 35.0 59.000004 358.0 910.0 695.0 136.0 444.0 113.0 683.0 646.0 997.0 109.0 931.0 350.0 410.0 404.0 362.0 407.0 699.0 847.0 323.0 3.0 171.0 83.0 418.0 272.0 788.0 264.0 979.99994 662.0 503.00003 250.0 843.0 546.0 591.0 500.0 498.0 16.0 426.0 831.0 268.0 57.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 65 225) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10125) (5050) (6850) (8575) (3525) (4400) (5875) (5450) (9000) (4025) (7725) (6550) (8025) (7925) (4600) (4050) (5375) (6025) (4725) (5300) (9175) (5125) (9300) (8375) (8175) (9850) (4625) (7875) (5650) (5125) (5325) (9225) (6475) (8300) (9025) (6025) (7300) (6300) (4450) (6525) (9650) (8100) (7450) (8225) (7650) (8600) (7050) (8050) (6725) (8275) (7150) (5350) (10100) (8850) (8325) (8200) (6400) (6825) (8150) (8475) (8825) (5975) (7725) (8425) (8575) (9975) (10050) (8125) (5025) (7050) (7550) (6725) (5900) (7300) (7375) (6900) (6375) (5975) (5050) (8450) (8400) (6725) (7550) (8275) (7225) (5900) (4525) (6075) (6650) (4100) (8450) (8325) (6200) (7600) (8425) (9425) (5850) (8150) (5300) (8100) (10275) (6225) (4250) (7400) (8475) (10625) (7350) (8275) (3575) (7650) (4225) (3550) (9100) (5350) (3525) (9500) (7200) (4950) (5025) (7925) (6250) (10850) (4000) (6750) (9475) (4900) (10700) (4375) (6300) (10175) (6375) (6000) (9525) (6500) (5325) (8600) (10400) (8350) (10475) (8625) (6025) (6100) (8275) (4000) (4325) (8700) (4450) (9150) (6075) (8300) (10400) (10475) (9925) (10225) (9750) (7375) (6950) (5525) (10725) (9550) (5975) (4500) (6525) (8300) (7300) (7775) (5650) (7500) (5775) (8275) (8425) (7625) (5250) (3975) (4550) (7775) (9675) (6125) (4425) (7200) (6650) (5875) (5950) (7375) (4850) (3300) (6550) (9175) (6125) (4225) (4625) (6275) (8650) (8350) (6350) (7075) (9400) (9800) (8100) (7275) (9100) (9275) (7225) (7100) (7825) (6950) (7500) (5925) (5275) (5050) (5775) (5550) (7650) (7725) (6425) (9875) (7200) (8475) (10225) (6250) (9775) (10425) (5125) (8300) (5850) (9975) (5450) (5600) (3425) (8050) (8025) (7775) (3925) (10475) (10775) (4075) (6550) (5325) (5100) (4900) (4175) (9625) (9875) (3425) (10475) (7825) (8375) (6825) (5650) (10275) (9200) (3900) (6025) (9000) (7725) (8125) (4575) (9250) (3975) (10550) (9100) (8825) (7125) (4225) (8575) (4775) (8475) (9800) (9100) (4125) (6650) (6850) (5250) (5850) (7600) (7325) (8175) (7725) (3525) (8550) (5675) (5350) (5825) (7600) (5525) (3500) (5475) (5550) (6650) (9300) (9250) (8275) (7925) (8450) (9100) (7950) (8575) (7350) (5225) (5050) (5400) (4875) (3900) (6125) (6950))) :lonset (quoteldur (quote ((355) (341) (328) (314) (303) (292) (282) (272) (265) (258) (252) (248) (245) (245) (247) (251) (258) (268) (280) (287) (293) (297) (298) (297) (294) (288) (280) (270) (258) (243) (232) (222) (215) (209) (206) (206) (207) (212) (218) (226) (237) (250) (259) (268) (275) (279) (281) (282) (281) (277) (272) (266) (256) (248) (240) (234) (230) (227) (225) (226) (227) (231) (236) (242) (249) (256) (260) (262) (262) (259) (253) (246) (236) (223) (208) (191) (173) (155) (137) (124) (111) (100) (90) (83) (78) (73) (71) (71) (71) (73) (74) (75) (78) (80) (81) (84) (86) (88) (91) (94) (97) (100) (102) (104) (106) (108) (109) (110) (111) (111) (111) (111) (111) (112) (113) (114) (116) (118) (121) (125) (128) (131) (136) (142) (146) (152) (159) (164) (171) (178) (185) (193) (200) (208) (218) (225) (232) (237) (240) (240) (238) (234) (228) (221) (211) (198) (185) (170) (157) (145) (137) (130) (125) (121) (120) (121) (124) (128) (134) (141) (148) (153) (159) (163) (167) (170) (173) (175) (176) (177) (177) (177) (177) (177) (176) (176) (175) (174) (173) (172) (171) (169) (168) (167) (168) (169) (172) (175) (179) (185) (191) (198) (207) (216) (227) (235) (242) (249) (254) (259) (262) (264) (264) (264) (263) (260) (257) (253) (248) (244) (238) (232) (225) (218) (210) (202) (192) (183) (175) (169) (164) (163) (162) (164) (168) (174) (182) (193) (204) (217) (228) (238) (243) (247) (247) (245) (240) (234) (222) (210) (195) (178) (163) (155) (148) (145) (146) (150) (158) (169) (185) (202) (223) (248) (265) (281) (292) (301) (305) (306) (303) (296) (287) (273) (255) (238) (223) (210) (198) (191) (183) (178) (176) (175) (176) (180) (186) (190) (193) (195) (195) (193) (190) (185) (180) (172) (163) (152) (142) (132) (125) (118) (115) (112) (110) (108) (108) (108) (110) (111) (113) (116) (119) (123) (127))) :lvel (quote ((62) (62) (62) (62) (62) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (65) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (66) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (68) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (69) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (73) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (72) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (71) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (69) (69) (69) (69) (69) (69) (69) (69) (69) (68) (68) (68) (68) (68) (68) (68) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (65) (65) (65) (65) (64) (64) (64) (64) (63) (63) (63) (63) (63) (62) (62) (62) (61) (61) (61) (61) (60) (60) (60) (60) (59) (59) (59) (59) (58) (58) (58) (57) (57) (57) (57) (56))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 808 289) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 217 14) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 151 10) (om-make-point 55 30) 58901 "58901" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 262 14) (om-make-point 34 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 58 17) (om-make-point 97 30) (list 3000 11000) "(3000 11000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((31 0 2 0 nil 0) (32 0 3 0 nil 0) (30 0 3 1 nil 0) (29 0 3 2 nil 0) (31 0 3 3 nil 0) (2 0 3 4 nil 0) (3 0 4 0 nil 0) (17 0 5 0 nil 0) (19 0 5 1 nil 0) (18 0 5 2 nil 0) (20 1 6 0 nil 0) (12 0 6 1 nil 0) (16 1 6 2 nil 0) (15 0 6 3 nil 0) (14 0 6 4 nil 0) (11 0 6 5 nil 0) (13 0 6 6 nil 0) (21 1 7 0 nil 0) (23 0 8 0 nil 0) (22 0 8 1 nil 0) (27 1 8 2 nil 0) (26 0 9 0 nil 0) (24 0 9 1 nil 0) (25 0 9 2 nil 0) (6 0 10 1 nil 0) (5 0 16 1 nil 0) (7 0 20 1 nil 0) (8 0 21 1 nil 0) (28 0 23 0 nil 0) (9 0 27 1 nil 0) (4 0 28 0 nil 0))) nil 6.13))
