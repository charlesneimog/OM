; OM File Header - Saved 2020/09/23 20:55:23
; (6.13 :patc (om-make-point 388 110) (om-make-point 477 23) (om-make-point 803 720) "" 183 0 nil "2020/09/23 20:55:23")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "profile-pitch-multiseq-demo-omruben" (quote ((let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 197 393) (om-make-point 119 30) (list 9 10 12 17 9 16) "(9 10 12 17 9 16)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 104 430) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 391 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-PROFILE-PITCH-MULTISEQ" (quote r-profile-pitch-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "bpfs-list" "BPFS-LIST" (list 0)))) (om-make-point 66 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 566 51) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 482 37) (om-make-point 63 30) (list 99 156) "(99 156)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 415 40) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 239 267) (om-make-point 147 106) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 8.264462 16.528925 24.793389 33.05785 41.322316 49.586777 57.851235 66.1157 74.380165 82.64463 90.90909 99.17355 107.43801 115.70247 123.96694 132.2314 140.49587 148.76033 157.0248 165.28926 173.55373 181.81818 190.08263 198.3471 206.61157 214.87602 223.14052 231.40494 239.66942 247.93389 256.19833 264.4628 272.72726 280.99173 289.2562 297.52066 305.78513 314.0496 322.31406 330.57852 338.843 347.10745 355.37186 363.63635 371.90082 380.16525 388.42975 396.6942 404.95865 413.22314 421.4876 429.75204 438.01654 446.28104 454.54544 462.80988 471.07434 479.33884 487.6033 495.86777 504.13223 512.39667 520.66114 528.9256 537.19007 545.4545 553.719 561.98346 570.2479 578.5124 586.77686 595.0413 603.3058 611.57026 619.8347 628.0992 636.36365 644.6281 652.8925 661.15705 669.4215 677.686 685.95044 694.2149 702.4793 710.7437 719.00824 727.2727 735.5372 743.80164 752.0661 760.3305 768.59504 776.8595 785.12397 793.3884 801.6529 809.9173 818.1818 826.4463 834.71076 842.9752 851.2397 859.5041 867.7686 876.0331 884.2975 892.5621 900.8264 909.0909 917.3553 925.61976 933.8842 942.1487 950.41327 958.6777 966.94214 975.2066 983.47107 991.73554 1000.0)) (quote (300.0 856.0 196.0 626.0 870.0 230.0 541.0 475.0 572.0 491.0 158.0 989.0 17.0 629.0 420.0 858.0 316.0 855.0 312.0 661.0 377.0 187.0 841.0 616.0 13.0 545.0 404.0 38.0 224.0 266.0 112.0 444.0 590.0 67.0 674.0 208.0 638.0 628.0 794.0 79.0 377.0 920.99994 573.0 801.0 474.00003 217.0 106.0 215.0 650.0 634.0 787.0 250.0 564.0 353.0 744.0 803.0 263.0 657.0 435.0 225.0 526.0 626.0 8.0 868.0 78.0 919.0 175.0 102.0 994.99994 321.0 889.00007 862.0 946.0 805.0 627.0 751.0 193.0 717.0 816.0 165.0 418.0 473.0 807.0 792.0 738.0 452.0 457.0 503.00003 592.0 383.0 97.0 622.0 472.00003 325.0 237.99999 866.0 377.0 427.0 582.0 410.0 823.0 388.0 815.0 51.0 259.0 56.0 713.0 90.0 553.0 259.0 123.0 606.0 175.0 680.0 505.00003 97.0 333.0 105.0 301.0 295.0 959.99994 41.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 8.333333 16.666666 25.0 33.333332 41.666668 50.0 58.333332 66.666664 75.0 83.333336 91.666664 100.0 108.333336 116.666664 125.0 133.33333 141.66667 150.0 158.33333 166.66667 175.0 183.33333 191.66667 200.0 208.33333 216.66667 225.0 233.33333 241.66667 250.0 258.33334 266.66666 275.0 283.33334 291.66666 300.0 308.3333 316.66666 325.0 333.33334 341.66663 350.0 358.33334 366.66666 375.0 383.33334 391.66666 400.0 408.33334 416.66666 425.0 433.33334 441.66666 450.0 458.33334 466.66666 475.0 483.33334 491.66666 500.0 508.33334 516.6667 525.0 533.3333 541.6667 550.0 558.3333 566.6667 574.99994 583.3333 591.6667 600.0 608.3333 616.6666 625.0 633.3333 641.6667 650.0 658.3333 666.6667 675.0 683.33326 691.6667 700.0 708.3333 716.6667 724.99994 733.3333 741.6667 750.0 758.3333 766.6667 775.0 783.3333 791.6667 800.0 808.3333 816.6667 825.0 833.3333 841.6667 850.0 858.33326 866.6667 875.0 883.3333 891.6667 900.0 908.33326 916.6667 924.99994 933.3333 941.6666 950.0 958.3334 966.6667 974.99994 983.3333 991.6666 1000.0)) (quote (762.0 143.0 634.0 676.0 354.0 421.0 683.0 821.0 641.0 269.0 432.0 288.0 23.0 5.0 844.0 296.0 192.0 142.0 562.0 804.0 243.99999 700.0 496.0 741.0 973.0 959.00007 271.0 219.0 798.0 467.0 760.0 408.0 91.0 177.0 102.0 432.0 622.0 900.0 366.0 282.0 695.0 178.0 927.0 207.0 875.0 533.0 244.99999 69.0 649.0 376.0 878.0 450.0 426.0 801.0 169.0 592.0 811.0 135.0 786.0 42.0 940.00007 186.0 280.0 963.99994 967.99994 572.0 588.0 880.0 376.0 899.0 261.0 791.0 295.0 38.0 51.0 483.0 654.0 910.0 564.0 769.0 406.0 362.0 197.0 764.0 946.0 688.0 412.0 144.0 31.0 19.0 859.0 275.0 264.0 901.00007 843.0 473.0 322.0 616.0 357.0 186.0 154.0 990.99994 775.0 139.0 238.99999 4.0 547.0 103.0 857.0 361.0 955.0 524.0 162.0 901.00007 572.0 808.0 180.0 163.0 440.0 893.99994 561.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 8.403361 16.806723 25.210085 33.613446 42.016808 50.42017 58.82353 67.22689 75.63025 84.033615 92.43697 100.84034 109.2437 117.64706 126.05042 134.45378 142.85715 151.2605 159.66387 168.06723 176.47058 184.87395 193.27732 201.68068 210.08403 218.4874 226.89078 235.29412 243.69748 252.10085 260.5042 268.90756 277.3109 285.7143 294.11765 302.521 310.92438 319.32773 327.73108 336.13446 344.5378 352.94116 361.34454 369.7479 378.15128 386.55463 394.95798 403.36136 411.7647 420.16806 428.57144 436.9748 445.37814 453.78156 462.18488 470.58823 478.9916 487.39496 495.7983 504.2017 512.60505 521.0084 529.41175 537.8151 546.2185 554.6218 563.02515 571.4286 579.8319 588.2353 596.6387 605.042 613.4454 621.84876 630.2521 638.65546 647.05884 655.46216 663.86554 672.2689 680.67225 689.0756 697.479 705.8823 714.28565 722.6891 731.0924 739.4958 747.8991 756.30256 764.7059 773.10926 781.51264 789.91596 798.31934 806.7227 815.12604 823.5294 831.9328 840.3361 848.7395 857.1429 865.54615 873.9496 882.353 890.7563 899.15967 907.5631 915.9664 924.36976 932.77314 941.17646 949.57984 957.9832 966.38654 974.7899 983.1933 991.5966 1000.0)) (quote (594.0 562.0 52.0 609.0 923.0 434.0 635.0 413.0 29.000002 757.0 123.0 282.0 80.0 930.0 524.0 455.0 335.0 110.0 868.0 932.99994 942.0 924.99994 580.0 452.0 194.0 674.0 509.00003 765.0 264.0 957.0 28.0 744.0 943.0 635.0 630.0 855.0 426.0 119.99999 459.0 238.99999 213.0 81.0 651.0 896.0 448.0 99.0 710.0 766.0 481.0 46.0 928.00007 60.999997 207.0 589.0 337.0 862.0 687.0 237.99999 777.0 217.0 755.0 872.0 268.0 327.0 204.0 932.99994 333.0 735.0 623.0 164.0 458.0 591.0 271.0 217.0 2.0 131.0 526.0 146.0 55.0 718.0 104.0 899.0 481.0 68.0 257.0 369.0 627.0 839.0 920.0 545.0 518.0 743.0 623.0 697.0 161.0 710.0 868.0 255.0 936.99994 625.0 213.0 178.0 198.0 508.0 183.0 900.0 275.0 203.0 706.0 487.99997 883.0 515.0 679.0 735.0 855.0 852.0 322.0 846.0 914.0 157.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 6.535948 13.071896 19.607844 26.143792 32.679737 39.215687 45.751633 52.287583 58.82353 65.359474 71.895424 78.43137 84.967316 91.503266 98.039215 104.575165 111.11111 117.64706 124.183 130.71895 137.2549 143.79085 150.3268 156.86275 163.3987 169.93463 176.47058 183.00653 189.54247 196.07843 202.61438 209.15033 215.68628 222.22222 228.75815 235.29412 241.83007 248.366 254.90196 261.4379 267.97385 274.5098 281.04575 287.5817 294.11765 300.6536 307.18954 313.7255 320.26144 326.7974 333.33334 339.86926 346.40524 352.94116 359.4771 366.01306 372.549 379.08493 385.6209 392.15686 398.6928 405.22876 411.7647 418.30066 424.8366 431.37256 437.9085 444.44443 450.98038 457.5163 464.05228 470.58823 477.12415 483.66013 490.19608 496.732 503.26798 509.80392 516.33985 522.8758 529.41175 535.9477 542.48365 549.0196 555.55555 562.0915 568.62745 575.1634 581.69935 588.2353 594.77124 601.3072 607.84314 614.3791 620.91504 627.451 633.98694 640.5229 647.05884 653.5948 660.1307 666.6667 673.20264 679.7385 686.27454 692.8105 699.3464 705.8823 712.4183 718.9542 725.4902 732.0261 738.562 745.098 751.634 758.16987 764.7059 771.2418 777.7777 784.3137 790.8497 797.3856 803.9216 810.4575 816.99347 823.5294 830.06537 836.6013 843.13727 849.6732 856.20917 862.7451 869.28107 875.817 882.353 888.88886 895.42487 901.96076 908.4967 915.0326 921.5686 928.10456 934.64045 941.17646 947.7124 954.2483 960.7843 967.32026 973.85614 980.39216 986.9281 993.464 1000.0)) (quote (946.0 28.0 605.0 377.0 636.0 146.0 779.0 400.0 901.99994 406.0 86.0 209.0 901.00007 600.0 619.0 577.0 215.0 923.0 466.00003 691.0 472.00003 109.0 76.0 489.99997 546.0 705.0 357.0 690.0 665.0 487.99997 267.0 514.0 700.0 711.0 422.0 78.0 155.0 126.0 760.0 114.0 197.0 669.0 754.0 317.0 349.0 591.0 168.0 280.0 559.0 566.0 369.0 510.0 759.0 424.0 459.0 728.0 673.0 156.0 71.0 659.0 262.0 517.0 373.0 961.0 755.0 320.0 217.0 306.0 567.0 745.0 495.0 481.0 31.0 417.0 982.0 225.0 858.0 949.0 273.0 377.0 871.0 761.0 323.0 107.0 784.0 887.0 660.0 823.0 742.0 295.0 819.0 693.0 862.0 967.00007 35.0 700.0 170.0 298.0 574.0 448.0 116.00001 553.0 936.00007 436.0 487.0 833.0 866.0 565.0 703.0 745.0 495.0 255.0 366.0 477.0 312.0 378.0 339.0 996.0 454.0 489.99997 873.0 880.0 14.0 218.0 405.0 774.0 467.0 904.0 171.0 448.0 422.0 651.0 17.0 872.0 125.0 483.99997 157.0 419.0 519.0 583.0 12.0 276.0 589.0 525.0 698.0 64.0 437.0 729.0 809.0 524.0 73.0 827.0 21.0 227.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 8.403361 16.806723 25.210085 33.613446 42.016808 50.42017 58.82353 67.22689 75.63025 84.033615 92.43697 100.84034 109.2437 117.64706 126.05042 134.45378 142.85715 151.2605 159.66387 168.06723 176.47058 184.87395 193.27732 201.68068 210.08403 218.4874 226.89078 235.29412 243.69748 252.10085 260.5042 268.90756 277.3109 285.7143 294.11765 302.521 310.92438 319.32773 327.73108 336.13446 344.5378 352.94116 361.34454 369.7479 378.15128 386.55463 394.95798 403.36136 411.7647 420.16806 428.57144 436.9748 445.37814 453.78156 462.18488 470.58823 478.9916 487.39496 495.7983 504.2017 512.60505 521.0084 529.41175 537.8151 546.2185 554.6218 563.02515 571.4286 579.8319 588.2353 596.6387 605.042 613.4454 621.84876 630.2521 638.65546 647.05884 655.46216 663.86554 672.2689 680.67225 689.0756 697.479 705.8823 714.28565 722.6891 731.0924 739.4958 747.8991 756.30256 764.7059 773.10926 781.51264 789.91596 798.31934 806.7227 815.12604 823.5294 831.9328 840.3361 848.7395 857.1429 865.54615 873.9496 882.353 890.7563 899.15967 907.5631 915.9664 924.36976 932.77314 941.17646 949.57984 957.9832 966.38654 974.7899 983.1933 991.5966 1000.0)) (quote (124.0 928.00007 807.0 561.0 971.00007 990.0 642.0 440.99997 285.0 757.0 128.0 844.0 891.0 532.0 734.0 172.0 67.0 161.0 335.0 920.99994 699.0 901.00007 599.0 700.0 690.0 580.0 385.0 874.0 518.0 446.99997 863.0 293.0 131.0 1000.0 969.0 732.0 689.0 510.0 691.0 7.0 173.0 969.0 867.0 223.0 955.99994 663.0 136.0 418.0 746.0 266.0 304.0 344.0 468.00003 446.99997 775.0 416.0 806.0 887.0 59.000004 35.0 509.00003 131.0 650.0 287.0 96.0 710.0 471.0 487.0 754.0 666.0 843.0 907.0 601.0 582.0 400.0 726.0 45.0 832.0 105.0 743.0 629.0 290.0 553.0 955.99994 351.0 300.0 776.0 95.0 35.0 560.0 175.0 263.0 356.0 850.0 437.0 927.0 448.0 981.0 38.0 65.0 325.0 523.0 487.99997 252.0 594.0 254.0 423.0 155.0 74.0 191.0 258.0 279.0 619.0 210.0 772.0 845.0 857.0 724.0 380.0 515.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 6.8965516 13.793103 20.689656 27.586207 34.482758 41.37931 48.275864 55.172413 62.068963 68.965515 75.86207 82.75862 89.655175 96.55173 103.44827 110.344826 117.24137 124.137925 131.03449 137.93103 144.82759 151.72414 158.6207 165.51725 172.41379 179.31035 186.2069 193.10346 200.0 206.89655 213.7931 220.68965 227.58621 234.48274 241.37932 248.27585 255.17241 262.06897 268.9655 275.86206 282.7586 289.65518 296.5517 303.44827 310.34482 317.2414 324.13794 331.0345 337.93103 344.82758 351.72412 358.6207 365.51724 372.4138 379.31033 386.2069 393.10345 400.0 406.89655 413.7931 420.68967 427.5862 434.48276 441.3793 448.27585 455.17242 462.06897 468.96548 475.86203 482.75864 489.65515 496.5517 503.44827 510.34482 517.2414 524.13794 531.0345 537.931 544.8276 551.7241 558.62067 565.5172 572.4138 579.31037 586.2069 593.1034 600.0 606.89655 613.7931 620.68964 627.5862 634.4828 641.37934 648.2759 655.1724 662.069 668.96546 675.86207 682.7586 689.65516 696.5517 703.44825 710.34485 717.2414 724.13794 731.0345 737.931 744.8276 751.7241 758.62067 765.5172 772.4138 779.31037 786.2069 793.10346 800.0 806.89655 813.7931 820.68964 827.5862 834.4828 841.37934 848.2759 855.1724 862.0689 868.9655 875.86207 882.7586 889.6552 896.5517 903.44825 910.34485 917.24134 924.13794 931.0345 937.93097 944.8276 951.72406 958.62067 965.5173 972.4138 979.3103 986.2069 993.1034 1000.0)) (quote (450.99997 525.0 819.0 990.99994 723.0 752.0 210.0 533.0 654.0 506.0 200.0 263.0 296.0 0.0 908.0 909.00007 119.99999 84.0 553.0 156.0 499.00003 475.0 550.0 10.0 57.0 439.0 704.0 572.0 188.0 136.0 981.0 634.0 544.0 623.0 588.0 176.0 846.0 517.0 860.0 374.0 865.0 65.0 588.0 47.0 90.0 829.0 987.00007 625.0 568.0 905.99994 786.0 269.0 516.0 495.0 442.0 426.0 440.99997 578.0 899.0 597.0 727.0 392.0 27.0 370.0 265.0 208.0 343.0 448.0 93.0 895.0 745.0 652.0 816.0 299.0 125.0 348.0 402.0 452.0 483.0 237.00002 639.0 828.0 785.0 863.0 730.0 18.0 271.0 888.0 796.0 519.0 293.0 610.0 111.0 475.99997 516.0 881.0 243.99999 172.0 438.0 230.0 796.0 465.0 805.0 544.0 613.0 411.0 736.0 582.0 460.0 697.0 686.0 731.0 775.0 889.99994 336.0 861.0 503.00003 242.99999 145.0 452.0 515.0 885.99994 681.0 690.0 567.0 456.0 359.0 269.0 536.0 83.0 341.0 269.0 537.0 280.0 369.0 602.0 31.0 556.0 590.0 879.0 514.0 390.0 247.0 391.0 536.0 290.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 8.0 16.0 24.0 32.0 40.0 48.0 56.0 64.0 72.0 80.0 88.0 96.0 103.99999 112.0 119.99999 128.0 136.0 144.0 152.0 160.0 168.0 176.0 184.0 192.0 200.0 207.99999 216.0 224.0 232.00002 239.99999 248.0 256.0 264.0 272.0 280.0 288.0 296.0 304.0 312.0 320.0 328.0 336.0 343.99997 352.0 360.0 368.0 376.0 384.0 392.0 400.0 408.0 415.99997 424.0 432.0 440.0 448.0 456.0 464.00003 471.99997 479.99997 487.99997 496.0 504.0 512.0 520.0 528.0 536.0 544.0 552.0 560.0 568.0 576.0 584.0 592.0 600.0 608.0 616.0 624.0 632.0 640.0 648.0 656.0 664.0 672.0 680.0 687.99994 696.0 704.0 712.0 720.0 728.0 736.0 744.0 752.0 759.99994 768.0 776.0 784.0 792.0 800.0 808.0 816.0 824.0 831.99994 840.0 848.0 856.0 864.0 872.0 880.0 888.0 896.0 904.0 912.0 920.0 928.00007 935.99994 943.99994 951.99994 959.99994 967.99994 975.99994 984.0 992.0 1000.0)) (quote (801.0 42.0 329.0 238.99999 513.0 708.0 879.0 571.0 64.0 1.0 84.0 270.0 572.0 442.0 291.0 529.0 338.0 210.0 433.0 335.0 523.0 783.0 984.0 661.0 545.0 572.0 742.0 965.0 580.0 120.99999 609.0 111.0 568.0 897.99994 629.0 841.0 978.0 732.0 870.0 965.0 747.0 713.0 60.999997 124.0 814.0 539.0 608.0 781.0 85.0 489.0 569.0 328.0 657.0 256.0 269.0 610.0 226.0 225.0 353.0 42.0 610.0 798.0 386.0 105.0 154.0 331.0 696.0 613.0 187.0 494.0 475.99997 653.0 279.0 904.0 851.0 439.0 238.99999 287.0 512.0 155.0 324.0 317.0 622.0 88.0 764.0 497.00003 673.0 51.0 317.0 536.0 948.00007 276.0 363.0 440.0 399.0 349.0 322.0 332.0 610.0 135.0 895.0 292.0 239.99999 170.0 242.99999 307.0 745.0 19.0 766.0 640.0 277.0 900.0 889.00007 990.0 242.99999 518.0 826.0 862.0 503.00003 653.0 27.0 222.0 680.0 746.0 125.0 250.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1019 470))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 194 225) (quote "profile-multiseq uses a bpf-lib to reorder notes after pitch, using the original onset-list.$A straight line will simply create an ascending or descending scale, while more complex curves will give a$ richer result.") "" (om-make-point 144 543) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 361 402) (om-make-point 254 269) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7794) (9450) (7796) (8470) (9442) (9188) (7796) (9096) (8696) (9096) (8698) (7056) (9184) (9186) (6340) (9184) (8466) (9460) (8466) (9284) (9096) (8468) (9180) (7796) (6348) (9190) (6346) (7796) (8698) (7794) (6302) (6350) (7056) (6322) (7796) (9096) (7796) (7056) (7054) (9188) (9188) (9442) (7796) (9096) (9764) (9184) (9096) (7794) (6330) (6332) (7796) (9188) (9188) (9446) (7796) (8696) (8466) (9096) (9442) (7796) (9188) (7056) (8466) (9096) (8286) (9442) (6308) (7796) (6322) (9096) (9318) (8696) (10084) (10084) (10086) (9762) (9286) (9286) (9096) (7796) (7796) (8468) (9188) (9452) (9444) (9286) (8468) (8468) (8698) (9096) (8696) (7056) (7056) (9184) (7796) (7056) (9184) (8286) (8696) (9096) (8468) (9452) (9286) (7796) (6322) (6342) (9188) (6312) (8698) (7796) (6334) (7796) (8468) (7794) (8698) (7056) (6342) (6342) (7794) (8468) (9764) (5810))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 4998 5039 9102)) :ldur (quote ((3936) (17) (93) (35) (93) (389) (93) (70) (4975) (70) (12) (4348) (163) (493) (17) (163) (1683) (29) (1683) (52) (70) (116) (12) (93) (17) (75) (52) (93) (12) (3936) (41) (35) (4348) (342) (93) (70) (93) (4348) (17) (389) (389) (93) (93) (70) (17) (163) (70) (3936) (255) (58) (93) (389) (389) (186) (93) (4975) (1683) (70) (93) (93) (389) (4348) (1683) (70) (4894) (93) (163) (93) (342) (70) (17) (4975) (75) (75) (35) (17) (139) (139) (70) (93) (93) (116) (389) (81) (41) (139) (116) (116) (12) (70) (4975) (4348) (4348) (163) (93) (4348) (163) (4894) (4975) (70) (116) (81) (139) (93) (342) (17) (389) (163) (12) (93) (35) (93) (116) (3936) (12) (4348) (17) (17) (3936) (116) (17) (3419))) :lvel (quote ((38) (22) (14) (12) (20) (20) (14) (11) (26) (11) (11) (15) (37) (37) (10) (37) (31) (13) (31) (17) (11) (13) (11) (14) (13) (11) (14) (14) (11) (38) (12) (11) (15) (46) (14) (11) (14) (15) (18) (20) (20) (20) (14) (11) (17) (37) (11) (38) (17) (14) (14) (20) (20) (23) (14) (26) (31) (11) (20) (14) (20) (15) (31) (11) (40) (20) (20) (14) (46) (11) (13) (26) (36) (36) (46) (14) (30) (30) (11) (14) (14) (13) (20) (36) (11) (30) (13) (13) (11) (11) (26) (15) (15) (37) (14) (15) (37) (40) (26) (11) (13) (36) (30) (14) (46) (19) (20) (44) (11) (14) (12) (14) (13) (38) (11) (15) (19) (19) (38) (13) (17) (27))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9442) (6350) (8698) (9190) (9096) (7796) (8696) (9286) (9456) (9284) (7796) (7796) (7796) (6346) (4164) (5810) (9442) (8466) (6332) (7796) (9188) (9318) (7054) (9188) (9096) (9188) (10080) (10586) (7056) (9286) (9096) (9188) (9186) (7796) (6312) (6334) (6312) (7796) (9096) (9442) (9286) (7796) (7796) (9286) (7054) (8698) (9096) (9442) (8696) (6360) (6304) (9096) (8468) (9286) (8468) (8698) (9444) (8698) (8468) (8286) (9184) (6332) (10364) (7792) (7056) (9286) (10480) (9762) (9096) (9188) (10084) (8470) (9440) (9096) (8698) (9188) (7056) (5802) (6214) (8286) (9184) (9450) (9188) (9290) (8466) (7796) (7054) (9096) (9764) (9188) (8286) (6330) (4164) (8698) (9186) (7056) (7796) (10084) (9764) (9096) (7796) (8696) (9094) (7796) (6336) (10084) (8286) (6340) (6332) (6320) (8698) (9290) (9286) (9442) (8466) (7794) (10084) (9186) (9442) (8286) (7056) (9096) (9764) (9096))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 4998 5039 5056 5056 9886)) :ldur (quote ((93) (35) (12) (75) (70) (93) (4975) (139) (110) (52) (93) (93) (93) (52) (12) (3419) (93) (1683) (58) (93) (389) (17) (17) (389) (70) (389) (12) (17) (4348) (139) (70) (389) (493) (93) (163) (35) (163) (93) (70) (93) (139) (93) (93) (139) (17) (12) (70) (93) (4975) (41) (157) (70) (116) (139) (116) (12) (41) (12) (116) (4894) (163) (58) (17) (267) (4348) (139) (1045) (17) (70) (389) (75) (35) (52) (70) (12) (389) (4348) (23) (12) (4894) (163) (17) (389) (29) (1683) (93) (17) (70) (17) (389) (4894) (255) (12) (12) (493) (4348) (93) (75) (17) (70) (93) (4975) (3071) (93) (12) (75) (4894) (17) (58) (110) (12) (29) (139) (93) (1683) (3936) (75) (493) (93) (4894) (4348) (70) (17) (70))) :lvel (quote ((20) (11) (11) (11) (11) (14) (26) (30) (28) (17) (14) (14) (14) (14) (14) (27) (20) (31) (14) (14) (20) (13) (18) (20) (11) (20) (21) (28) (15) (30) (11) (20) (37) (14) (44) (12) (44) (14) (11) (20) (30) (14) (14) (30) (18) (11) (11) (20) (26) (11) (16) (11) (13) (30) (13) (11) (11) (11) (13) (40) (37) (14) (26) (15) (15) (30) (34) (14) (11) (20) (36) (12) (12) (11) (11) (20) (15) (11) (22) (40) (37) (22) (20) (35) (31) (14) (18) (11) (17) (20) (40) (17) (14) (11) (37) (15) (14) (36) (17) (11) (14) (26) (33) (14) (46) (36) (40) (10) (14) (14) (11) (35) (30) (20) (31) (38) (36) (37) (20) (40) (15) (11) (17) (11))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quotelegato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9184) (9096) (6342) (7796) (9442) (9442) (8696) (9188) (8466) (6320) (8698) (8468) (6336) (7054) (6322) (10084) (9186) (8696) (8286) (7054) (7794) (10084) (10086) (10364) (10086) (9318) (9096) (7796) (7056) (9284) (9096) (9286) (8470) (9180) (9190) (6332) (9442) (10086) (9288) (9188) (9440) (9288) (7796) (6322) (8468) (7792) (6350) (6322) (7796) (9288) (9764) (8468) (6330) (9096) (9188) (7796) (10086) (6332) (6332) (8466) (8696) (8698) (9464) (9278) (7056) (8466) (8698) (9452) (7056) (7796) (9286) (9186) (8698) (9288) (9096) (6334) (8466) (9096) (8466) (7054) (4164) (6322) (8696) (7054) (6308) (7796) (9094) (7056) (10084) (6332) (6340) (7796) (9764) (10086) (9188) (9096) (9188) (9286) (9188) (9188) (6332) (9188) (9096) (9764) (9096) (6346) (6342) (8286) (7796) (8466) (9444) (7056) (9186) (9096) (9286) (9442) (9096) (9286) (9762) (10080) (9096) (9096) (10084) (9456) (6332))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 4998 5039 5056 5056 5068 8946)) :ldur (quote ((163) (70) (17) (93) (93) (93) (4975) (389) (1683) (110) (12) (116) (12) (17) (342) (75) (493) (4975) (4894) (17) (3936) (75) (35) (17) (35) (17) (70) (93) (4348) (52) (70) (139) (35) (12) (75) (58) (93) (35) (70) (389) (52) (70) (93) (342) (116) (267) (35) (342) (93) (70) (17) (116) (255) (70) (389) (93) (35) (58) (58) (1683) (4975) (12) (41) (29) (4348) (1683) (12) (81) (4348) (93) (139) (493) (12) (70) (70) (35) (1683) (70) (1683) (17) (12) (342) (4975) (17) (163) (93) (3071) (4348) (75) (58) (17) (93) (17) (35) (389) (70) (389) (139) (389) (389) (58) (389) (70) (17) (70) (52) (17) (4894) (93) (1683) (41) (4348) (493) (70) (139) (93) (70) (139) (17) (12) (70) (70) (75) (110) (58))) :lvel (quote ((37) (11) (19) (14) (20) (20) (26) (20) (31) (14) (11) (13) (46) (18) (46) (36) (37) (26) (40) (18) (38) (36) (46) (26) (46) (13) (11) (14) (15) (17) (11) (30) (12) (11) (11) (14) (20) (46) (39) (20) (12) (39) (14) (46) (13) (15) (11) (46) (14) (39) (17) (13) (17) (11) (20) (14) (46) (14) (14) (31) (26) (11) (23) (31) (15) (31) (11) (36) (15) (14) (30) (37) (11) (39) (11) (12) (31) (11) (31) (18) (14) (46) (26) (18) (20) (14) (33) (15) (36) (14) (10) (14) (17) (46) (20) (11) (20) (30) (20) (20) (14) (20) (11) (17) (11) (14) (19) (40) (14) (31) (11) (15) (37) (11) (30) (20) (11) (30) (14) (21) (11) (11) (36) (28) (14))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10480) (6308) (9096) (8470) (8466) (8698) (9096) (9446) (8696) (6308) (7056) (9764) (9186) (9186) (8286) (9190) (9184) (8696) (6312) (6322) (8698) (9186) (9096) (9096) (9284) (9096) (7792) (9096) (9288) (9188) (7794) (6318) (6322) (9096) (7054) (6340) (9286) (7796) (8466) (8286) (6360) (8696) (9096) (8286) (8698) (9290) (8466) (9096) (9288) (8286) (6312) (9096) (7796) (9094) (8466) (10086) (9188) (7056) (7056) (8696) (9286) (9096) (8696) (6244) (9442) (8696) (10084) (9096) (7796) (9442) (7796) (6346) (9456) (9452) (9440) (9444) (8466) (9290) (9288) (10084) (9764) (6342) (8468) (8698) (8698) (10086) (8468) (9096) (9764) (9318) (9188) (9096) (7794) (7796) (7796) (7796) (9186) (9288) (8696) (10084) (6214) (8696) (9286) (9188) (9096) (7796) (8466) (9186) (9764) (6336) (8286) (7056) (9096) (6350) (9096) (9096) (9188) (6330) (9096) (9442) (9188) (6348) (9278) (6312))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 4998 5039 5056 5056 9207)) :ldur (quote ((1045) (163) (70) (35) (1683) (12) (70) (186) (4975) (163) (4348) (17) (493) (493) (4894) (75) (163) (4975) (163) (342) (12) (493) (70) (70) (52) (70) (267) (70) (70) (389) (3936) (969) (342) (70) (17) (17) (139) (93) (1683) (4894) (41) (4975) (70) (4894) (12) (29) (1683) (70) (70) (4894) (163) (70) (93) (3071) (1683) (35) (389) (4348) (4348) (4975) (139) (70) (4975) (12) (93) (4975) (75) (70) (93) (93) (93) (52) (110) (81) (52) (41) (1683) (29) (70) (75) (17) (17) (116) (12) (12) (35) (116) (70) (17) (17) (389) (70) (3936) (93) (93) (93) (493) (70) (4975) (75) (12) (4975) (139) (389) (70) (93) (1683) (493) (17) (12) (4894) (4348) (70) (35) (70) (70) (389) (255) (70) (93) (389) (17) (29) (163))) :lvel (quote ((34) (20) (11) (12) (31) (11) (11) (23) (26) (20) (15) (17) (37) (37) (40) (11) (37) (26) (44) (46) (11) (37) (11) (11) (17) (11) (15) (11) (39) (20) (38) (33) (46) (11) (18) (10) (30) (14) (31) (40) (11) (26) (11) (40) (11) (35) (31) (11) (39) (40) (44) (11) (14) (33) (31) (46) (20) (15) (15) (26) (30) (11) (26) (10) (20) (26) (36) (11) (14) (20) (14) (14) (28) (36) (12) (11) (31) (35) (39) (36) (17) (19) (13) (11) (11) (46) (13) (11) (17) (13) (20) (11) (38) (14) (14) (14) (37) (39) (26) (36) (22) (26) (30) (20) (11) (14) (31) (37) (17) (46) (40) (15) (11) (11) (11) (11) (20) (17) (11) (20) (20) (13) (31) (44))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6320) (9460) (9764) (9190) (9442) (10616) (10086) (9188) (8470) (7796) (9180) (8468) (7796) (10080) (10084) (9096) (9286) (7796) (6318) (6312) (6342) (8286) (10084) (9440) (9764) (9318) (9188) (9286) (9284) (8466) (9442) (8698) (9442) (7792) (6322) (9452) (10616) (9290) (9188) (9096) (9286) (6322) (9184) (10086) (9288) (7796) (10364) (9288) (7794) (7794) (9096) (9186) (7056) (7796) (7796) (8466) (8468) (9186) (8698) (9456) (10084) (7054) (5810) (7056) (7796) (7054) (9188) (7796) (6322) (8698) (8696) (9096) (9442) (9278) (10084) (9184) (9096) (8468) (9288) (9188) (8286) (8466) (9288) (9096) (7796) (9096) (10084) (9096) (7796) (8696) (9188) (6308) (5802) (7794) (6350) (7796) (8698) (9452) (8468) (9184) (9442) (9096) (6312) (7796) (8698) (8698) (7796) (8466) (8696) (7794) (8466) (6334) (6308) (6330) (7056) (7796) (9452) (9188) (8286) (9094))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 9799)) :ldur (quote ((110) (29) (17) (75) (93) (691) (35) (389) (35) (93) (12) (116) (93) (12) (75) (70) (139) (93) (969) (163) (17) (4894) (75) (52) (17) (17) (389) (139) (52) (1683) (93) (12) (93) (267) (342) (81) (691) (29) (389) (70) (139) (342) (163) (35) (70) (93) (17) (70) (3936) (3936) (70) (493) (4348) (93) (93) (1683) (116) (493) (12) (110) (75) (17) (3419) (4348) (93) (17) (389) (93) (342) (12) (4975) (70) (93) (29) (75) (163) (70) (116) (70) (389) (4894) (1683) (70) (70) (93) (70) (75) (70) (93) (4975) (389) (163) (23) (3936) (35) (93) (12) (81) (116) (163) (93) (70) (163) (93) (12) (12) (93) (1683) (4975) (3936) (1683) (35) (163) (255) (4348) (93) (81) (389) (4894) (3071))) :lvel (quote ((14) (13) (17) (11) (20) (42) (46) (20) (12) (14) (11) (13) (14) (21) (36) (11) (30) (14) (33) (44) (19) (40) (36) (12) (17) (13) (20) (30) (17) (31) (20) (11) (20) (15) (46) (36) (42) (35) (20) (11) (30) (46) (37) (46) (39) (14) (26) (39) (38) (38) (11) (37) (15) (14) (14) (31) (13) (37) (11) (28) (36) (18) (27) (15) (14) (18) (20) (14) (46) (11) (26) (11) (20) (31) (36) (37) (11) (13) (39) (20) (40) (31) (39) (11) (14) (11) (36) (11) (14) (26) (20) (20) (11) (38) (11) (14) (11) (36) (13) (37) (20) (11) (44) (14) (11) (11) (14) (31) (26) (38) (31) (12) (20) (17) (15) (14) (36) (20) (40) (33))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8468) (9096) (9762) (10480) (9318) (9188) (7796) (9096) (9184) (7796) (6360) (7792) (6318) (9186) (10084) (7796) (6308) (8698) (6340) (8698) (8696) (9094) (4164) (6320) (8698) (9278) (8468) (6332) (8698) (9460) (9184) (9184) (9186) (7796) (9190) (9184) (9452) (8466) (9464) (6304) (9096) (6214) (10080) (10084) (9186) (9286) (10084) (9096) (8286) (8698) (8470) (8466) (8466) (9096) (9188) (9288) (8466) (5800) (7796) (7056) (6350) (7796) (7796) (7796) (9764) (9288) (9290) (9096) (6342) (7056) (7796) (8466) (8696) (9180) (9456) (9450) (10084) (9286) (5810) (7796) (10084) (9290) (8468) (8466) (8466) (8698) (9290) (8698) (6342) (7796) (7056) (9286) (8698) (9444) (9096) (9186) (8466) (9290) (9096) (9286) (9288) (9442) (9188) (9188) (9188) (7796) (6334) (7796) (8698) (9288) (9286) (9096) (8468) (7796) (7796) (8468) (6322) (7796) (7796) (8466) (7796) (8698) (7794) (7796) (9186) (8466) (7056) (7796) (9096) (7794))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 4998 5039 5056 5056 5068 5074 5108 5178 5201 5312 9456)) :ldur (quote ((116) (70) (17) (1045) (17) (389) (93) (70) (163) (93) (41) (267) (969) (493) (75) (93) (163) (12) (17) (12) (4975) (3071) (12) (110) (12) (29) (116) (58) (12) (29) (163) (163) (493) (93) (75) (163) (81) (1683) (41) (157) (70) (12) (12) (75) (493) (139) (75) (70) (4894) (12) (35) (1683) (1683) (70) (389) (70) (1683) (12) (93) (4348) (35) (93) (93) (93) (17) (70) (29) (70) (17) (4348) (93) (1683) (4975) (12) (110) (17) (75) (139) (3419) (93) (75) (29) (116) (1683) (1683) (12) (29) (12) (17) (93) (4348) (139) (12) (41) (70) (493) (1683) (29) (70) (139) (70) (93) (389) (389) (389) (93) (35) (93) (12) (70) (139) (70) (116) (93) (93) (116) (342) (93) (93) (1683) (93) (12) (3936) (93) (493) (1683) (4348) (93) (70) (3936))) :lvel (quote ((13) (11) (14) (34) (13) (20) (14) (11) (37) (14) (11) (15) (33) (37) (36) (14) (20) (11) (10) (11) (26) (33) (14) (14) (11) (31) (13) (14) (11) (13) (37) (37) (37) (14) (11) (37) (36) (31) (23) (16) (11) (22) (21) (36) (37) (30) (36) (11) (40) (11) (12) (31) (31) (11) (20) (39) (31) (11) (14) (15) (11) (14) (14) (14) (17) (39) (35) (11) (19) (15) (14) (31) (26) (11) (28) (22) (36) (30) (27) (14) (36) (35) (13) (31) (31) (11) (35) (11) (19) (14) (15) (30) (11) (11) (11) (37) (31) (35) (11) (30) (39) (20) (20) (20) (20) (14) (12) (14) (11) (39) (30) (11) (13) (14) (14) (13) (46) (14) (14) (31) (14) (11) (38) (14) (37) (31) (15) (14) (11) (38))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quotelegato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (cursor-mode approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list (quote :normal) 8 16 (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 578 509) (om-make-point 684 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 177 43) (quote "A bpf-lib as pointer to the pitch-order") "" (om-make-point 254 214) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 49 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 166 217) (om-make-point 21 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 100 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 43) (quote "A Tam-tam spectrum") "" (om-make-point 107 37) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 99 63) (om-make-point 170 136) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5810) (6336) (7794) (8286) (8466) (8696) (9094) (9290) (10086) (10480) (10616) (10718) (10942) (9184) (6322) (9278) (9452) (10586) (10084) (9288) (9456) (10364) (9186) (10086) (9286) (9464) (10084) (9446) (6312) (10080) (7054) (10084) (9450) (7056) (9286) (6318) (9452) (6214) (10616) (4164) (9286) (9764) (10084) (9188) (9442) (10084) (9442) (4164) (9290) (4164) (10086) (9284) (4164) (9318) (9460) (9764) (10480) (9442) (9762) (9288) (10480) (9188) (6342) (10084) (9442) (10084) (9444) (9184) (6312) (10086) (9440) (8466) (6348) (9188) (9188) (9186) (8466) (9188) (6322) (9180) (8466) (9188) (6244) (8466) (9190) (6308) (8468) (6330) (8468) (9096) (9096) (6304) (8468) (9096) (9096) (5802) (6320) (5800) (9096) (8470) (6342) (9096) (6322) (9096) (9096) (6288) (7792) (6332) (6360) (6302) (7794) (6346) (7796) (6332) (7796) (7796) (6308) (6350) (7796) (7054) (8286) (8698) (6334) (7796) (7056) (8696) (8698) (8698) (7796) (8698) (7796) (7056) (7796) (6340) (7796) (7056) (7796) (7796) (7796))) :lonset (quote (46 46 46 46 46 46 46 46 46 46 46 64 75 81 93 93 110 128 151 197 232 267 273 290 348 360 406 441 459 493 511 540 621 627 633 650 708 743 766 778 784 795 818 830 882 952 1010 1016 1051 1062 1080 1097 1132 1138 1155 1167 1190 1225 1236 1248 1260 1271 1324 1358 1364 1486 1532 1602 1625 1631 1654 1759 1805 1840 2119 2188 2206 2310 2322 2421 2473 2485 2508 2653 2664 2810 2897 2978 3129 3146 3262 3286 3349 3373 3466 3483 3512 3541 3576 3605 3645 3680 3785 3802 3918 4005 4005 4052 4162 4272 4313 4354 4464 4557 4603 4754 4766 4859 4905 4992 4998 5039 5056 5056 5068 5074 5108 5178 5201 5312 5352 5404 5497 5561 5654 5741 5799 5950 6107 6124)) :ldur (quote ((3419) (12) (3936) (4894) (1683) (4975) (3071) (29) (35) (1045) (691) (23) (29) (163) (342) (29) (81) (17) (75) (70) (110) (17) (493) (64) (139) (41) (46) (186) (163) (12) (17) (70) (17) (4348) (70) (969) (104) (12) (12) (12) (157) (17) (58) (389) (93) (58) (46) (12) (17) (23) (52) (52) (3489) (17) (29) (23) (52) (41) (17) (99) (52) (308) (17) (52) (29) (29) (41) (157) (650) (17) (52) (383) (17) (99) (29) (23) (174) (64) (418) (12) (93) (75) (12) (145) (75) (163) (116) (255) (104) (70) (52) (157) (52) (58) (75) (23) (110) (12) (64) (35) (75) (64) (128) (46) (17) (12) (267) (58) (41) (41) (104) (52) (93) (46) (99) (93) (23) (35) (93) (41) (215) (12) (35) (75) (209) (12) (12) (12) (70) (12) (64) (134) (64) (17) (46) (87) (46) (35) (17))) :lvel (quote ((27) (46) (38) (40) (31) (26) (33) (35) (46) (34) (42) (31) (32) (37) (46) (31) (36) (28) (36) (39) (28) (26) (37) (29) (30) (23) (27) (23) (44) (21) (18) (23) (22) (15) (24) (33) (18) (22) (14) (14) (20) (17) (23) (20) (20) (20) (15) (14) (15) (14) (16) (17) (12) (13) (13) (11) (12) (15) (14) (14) (13) (20) (19) (13) (13) (11) (11) (17) (25) (11) (12) (19) (13) (13) (11) (11) (16) (13) (20) (11) (16) (13) (10) (13) (11) (20) (13) (17) (12) (11) (11) (16) (12) (11) (11) (11) (14) (11) (11) (12) (14) (11) (14) (10) (10) (11) (15) (14) (11) (12) (14) (14) (14) (13) (13) (13) (11) (11) (13) (10) (11) (11) (12) (13) (11) (10) (11) (11) (12) (10) (12) (11) (11) (10) (11) (10) (11) (10) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx cursor-mode)) (list 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 742 405) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff)) 16 8 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (6 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 2 2 nil 0) (11 0 3 0 nil 0) (7 1 3 1 nil 0) (2 0 7 1 nil 0) (1 0 9 1 nil 0) (13 0 11 0 nil 0) (15 1 13 0 nil 0) (12 0 13 1 nil 0))) nil 6.13))
