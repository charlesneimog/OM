; OM File Header - Saved 2020/09/23 20:55:19
; (6.13 :patc (om-make-point 172 60) (om-make-point 50 23) (om-make-point 947 720) "" 183 0 nil "2020/09/23 20:55:19")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "time-pointer-martin-arnold-looping" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 357 387) (om-make-point 222 77) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0 998.00007 998.99994 1000.0)) (quote (674.5248 668.7828 663.5497 658.9898 655.24854 652.44684 650.67725 650.0 650.4398 651.98456 654.5849 658.15455 662.5728 667.68824 673.3225 679.2766 685.3378 691.28644 696.9038 701.9814 706.32654 709.7722 712.1831 713.4603 713.5481 712.43476 710.155 706.7903 702.46424 697.3411 691.6183 685.5196 679.2868 673.1693 667.41474 662.2586 657.9133 654.5598 652.33887 651.3441 651.6176 653.147 655.86487 659.65125 664.33777 669.7145 675.5387 681.54535 687.4588 693.00574 697.92676 701.9899 705.0017 706.81574 707.34174 706.55036 704.4743 701.20917 696.9094 691.78016 686.0692 680.0558 674.0351 668.305 663.15107 658.8315 655.56354 653.51215 652.7807 653.40455 655.34876 658.50904 662.71625 667.7447 673.3238 679.152 684.9127 690.29114 694.99164 698.7552 701.372 702.6951 702.64966 701.23664 698.53357 694.6922 689.9298 684.5165 678.7615 672.9955 667.55085 662.7426 658.8501 656.0999 654.6521 654.5899 655.91425 658.5434 662.31635 667.0026 672.3155 677.92914 683.49805 688.6789 693.15076 696.63605 698.91797 699.8546 699.38794 697.54865 694.45484 690.3046 685.3641 679.9512 674.4151 669.11396 664.3915 660.555 657.8543 656.46564 656.47925 657.89295 660.6117 664.4533 669.1604 674.4172 679.8702 685.152 689.906 693.81104 696.60364 698.09546 698.1872 696.876 694.2562 690.513 685.90986 680.7706 675.45795 670.3469 665.7993 662.1379 659.6234 658.4361 658.6619 660.2866 663.1958 667.18317 671.9647 677.19886 682.51087 687.5197 691.86615 695.23835 697.39527 698.1846 697.5535 695.55384 692.33796 688.14856 683.3007 678.159 673.1102 668.5352 664.7804 662.1318 660.7934 660.87165 662.36725 665.1743 669.08844 673.8215 679.0231 684.3072 689.2807 693.5733 696.86597 698.9149 699.5709 698.7908 696.6407 693.2921 689.0086 684.126 679.0268 674.1116 669.7677 666.33967 664.10267 663.24085 663.8334 665.84736 669.1404 673.471 678.5173 683.9011 689.2176 694.06574 698.0801 700.9586 702.48676 702.55414 701.1632 698.4298 694.57447 689.90534 684.79505 679.6519 674.8884 670.88904 667.98096 666.40815 666.3121 667.7208 670.54645 674.59125 679.5628 685.09607 690.7818 696.19727 700.93915 704.6545 707.0682 708.0043 707.39966 705.3094 701.9028 697.4509 692.3064 686.87616 681.59125 676.87384 673.1052 670.59656 669.5657 670.11976 672.2473 675.8185 680.59467 686.2461 692.37507 698.5478 704.32544 709.29596 713.10535 715.4844 716.2684 715.40955 712.9811 709.1712 704.26996 698.64734 692.729 686.97077 681.8163 677.66657 674.851 673.6033 674.0446 676.17536 679.87494 684.91126 690.9573 697.61475 704.4425 710.9878 716.8182 721.5514 724.88117 726.59864 726.60547 724.9198 721.6739 717.1039 711.53394 705.35267 698.9868 692.8725 687.4269 683.02045 679.95417 678.4403 678.59076 680.4109 683.8011 688.5649 694.42225 701.0292 707.9994 714.92926 721.423 727.1153 731.6934 734.91425 736.61774 736.7337 735.2841 732.3793 728.20936 723.0323 717.15686 710.9239 704.68677 698.7918 693.5608 689.27436 686.1584 684.37476 684.0146 685.0958 687.5646 691.29975 696.121 701.79895 708.06836 714.6409 721.22016 727.5148 733.25257 738.1921 742.1326 744.9221 746.4623 746.71155 745.6854 743.4542 740.138 735.90027 730.94007 725.4826 719.76954 714.04737 708.5586 703.5317 699.1725 695.6563 693.12214 691.66834 691.34955 692.17634 694.1156 697.0933 700.9981 705.6866 710.989 716.7166 722.66907 728.6415 734.4323 739.84955 744.7181 748.885 752.22425 754.6405 756.0714 756.489 755.89954 754.3428 751.8899 748.64 744.7168 740.2634 735.43787 730.40705 725.3418 720.41144 715.7783 711.59247 707.9878 705.0787 702.9557 701.6843 701.30335 701.82435 703.23114 705.48175 708.51026 712.2272 716.52295 721.27387 726.346 731.59766 736.8835 742.0598 746.9876 751.53656 755.58905 759.0427 761.8131 763.83637 765.06995 765.4935 765.1095 763.9424 762.038 759.4618 756.2965 752.6398 748.6016 744.3012 739.86304 735.4141 731.0803 726.9827 723.2349 719.9402 717.1881 715.05286 713.59186 712.84345 712.82666 713.54114 714.9668 717.0647 719.7789 723.03705 726.7529 730.8293 735.1604 739.63477 744.1381 748.556 752.77674 756.6949 760.2133 763.24585 765.7197 767.577 768.776 769.2928 769.12134 768.27326 766.7786 764.684 762.05134 758.957 755.4892 751.74555 747.83106 743.85486 739.9274 736.15766 732.6503 729.50275 726.8025 724.6249 723.0308 722.06556 721.757 722.11487 723.1304 724.7771 727.0102 729.76886 732.97736 736.54706 740.37867 744.3658 748.3966 752.3577 756.1377 759.62946 762.7339 765.363 767.442 768.9119 769.7317 769.8793 769.35224 768.169 766.3678 764.0051 761.15625 757.91077 754.37165 750.6517 746.87024 743.14875 739.6089 736.3666 733.5286 731.1905 729.4316 728.3127 727.8744 728.1346 729.08765 730.70466 732.93384 735.70124 738.9142 742.4629 746.225 750.06855 753.8584 757.4587 760.7394 763.58045 765.8765 767.54157 768.5119 768.74915 768.2425 767.00696 765.09156 762.56995 759.54017 756.1219 752.45105 748.67664 744.95197 741.43116 738.2611 735.57605 733.4907 732.0963 731.45484 731.5963 732.5175 734.1803 736.5132 739.41425 742.7545 746.38324 750.13526 753.83735 757.31647 760.4085 762.9654 764.8627 766.0067 766.339 765.8395 764.52967 762.47107 759.76307 756.5395 752.9614 749.20966 745.4763 741.9545 738.82776 736.261 734.39087 733.3177 733.0996 733.74854 735.228 737.45545 740.30506 743.61414 747.1923 750.8317 754.3182 757.44434 760.0221 761.89374 762.94184 763.09784 762.34644 760.7276 758.3359 755.31434 751.8471 748.14856 744.4495 740.98334 737.9706 735.60395 734.0353 733.3652 733.6345 734.821 736.8398 739.5477 742.7525 746.22547 749.7165 752.9714 755.75104 757.84784 759.1012 759.41144 758.7469 757.1477 754.7252 751.6534 748.1563 744.4932 740.93836 737.7596 735.1983 733.4489 732.64277 732.837 734.008 736.0521 738.7932 741.9954 745.3818 748.6575 751.5342 753.75446 755.1151 755.4855 754.8202 753.1645 750.6522 747.4949 743.964 740.36817 737.02454 734.22986 732.2329 731.20997 731.2466 732.3286 734.341 737.0773 740.25867 743.5593 746.6381 749.17286 750.89216 751.60425 751.21857 749.7559 747.3485 744.23017 740.7138 737.1565 733.9218 731.34357 729.68885 729.1266 729.7077 731.35767 733.88215 736.9861 740.30597 743.45057 746.04407 747.771 748.41394 747.8816 746.22095 743.61487 740.363 736.8473 733.4868 730.68677 728.7882 728.0242 728.48816 730.119 732.70624 735.91407 739.3226 742.4807 744.9649 746.4361 746.68677 745.6713 743.516 740.50415 737.0415 733.60175 730.6624 728.63746 727.8173 728.3247 730.09357 732.8751 736.2696 739.7822 742.8943 745.1398 746.17646 745.8404 744.17475 741.4277 738.01844 734.4756 731.3573 729.1632 728.2543 728.79114 730.70466 733.7012 737.3059 740.9372 744.0 745.98554 746.5586 745.6182 743.3208 740.0585 736.3976 732.9833 730.4285 729.20514 729.55616 731.4468 734.56415 738.36756 742.1823 745.3212 747.21204 747.50666 746.1514 743.4037 739.7893 736.0078 732.80164 730.8136 730.45984 731.84467 734.7336 738.593 742.6906 746.237 748.54236 749.1568 747.96546 745.21766 741.4826 737.53894 734.2187 732.2366 732.0411 733.71674 736.9603 741.1382 745.4133 748.9185 750.93836 751.06336 749.2812 745.98615 741.9003 737.9246 734.9473 733.65284 734.3707 736.99927 741.0214 745.61097 749.8088 752.7307 753.7625 752.6981 749.79114 745.70496 741.37177 737.7953 735.8162 735.92786 738.1634 742.0835 746.86896 751.4996 754.98084 756.56684 755.93116 753.2444 749.1414 744.58277 740.6413 738.2605 738.0398 740.0946 744.02576 749.00477 753.9579 757.80787 759.7195 759.2922 756.65564 752.4448 747.6604 743.4432 740.81446 740.44135 742.48114 746.5404 751.76044 757.0099 761.1416 763.2551 762.9056 760.2093 755.8219 750.79206 746.3246 743.50544 743.0516 745.1439 749.3817 754.8701 760.4211 764.8238 767.12146 766.832 764.0613 759.4836 754.1913 749.4483 746.40235 745.8226 747.9219 752.3046 758.05335 763.93354 768.67316 771.2506 771.12854 768.3777 763.6651 758.1058 753.01386 749.6063 748.72834 750.66077 755.0542 761.0044 767.25257 772.46607 775.5366 775.82837 773.3229 768.6251 762.83167 757.2893 753.2963 751.8147 753.2562 757.38935 763.38794 770.0115 775.8755 779.7562 780.8585 778.9911 774.61036 768.7222 762.665 757.8201 755.31287 755.76795 759.1743 764.8854 771.75715 778.3926 783.4401 785.8819 785.25116 781.7329 776.1251 769.6709 763.79615 759.8098 758.6289 760.58576 765.35846 772.03687 779.31214 785.7478 790.0776 791.46644 789.68244 785.1443 778.83606 772.106 766.39075 762.92505 762.49097 765.2604 770.76105 777.9713 785.526 791.9892 796.1398 797.213 795.0516 790.1362 783.4899 776.47504 770.5278 766.8792 766.31574 769.02814 774.5755 781.973 789.88154 796.8622 801.6532 803.40717 801.84974 797.3293 790.7506 783.4022 776.71766 772.0062 770.2124 771.74396 776.3989 783.4044 791.5605 799.4596 805.74134 809.33735 809.66224 806.7154 801.0778 793.8059 786.24366 779.785 775.6284 774.56965 776.866 782.19465 789.7113 798.19916 806.27796 812.64057 816.272 816.62024 813.68494 808.0136 800.60694 792.7498 785.7981 780.956 779.0802 780.54267 785.17536 792.3007 800.8449 809.51166 816.9898 822.16077 824.27186 823.0525 818.7501 812.0886 804.15235 796.2155 789.5474 785.2199 783.94715 785.9812 791.0801 798.54786 807.34327 816.23316 823.9785 829.51337 832.09705 831.41675 827.628 821.32825 813.46546 805.20166 797.74866 792.19825 789.3725 789.71314 793.2281 799.4938 807.7179 816.851 825.7304 833.2346 838.4318 840.69904 839.7993 835.90717 829.58155 821.6863 813.28095 805.4782 799.3055 795.5819 794.81476 797.14454 802.33045 809.78937 818.6687 827.9523 836.58606 843.6041 848.2362 850.0 848.74866 844.68415 838.3271 830.4535 822.0018 813.9643 807.2801 802.6835)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 19" (quote list) (quote nil) (om-make-point 476 286) (om-make-point 76 30) (list 650 850) "(650 850)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 18" (quote list) (quote nil) (om-make-point 404 280) (om-make-point 56 30) (list 1 0.5) "(1 .5 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 365 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 17" (quote list) (quote nil) (om-make-point 359 33) (om-make-point 19 25) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 324 10) (om-make-point 38 30) (list 3 7) "(3 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 244 10) (om-make-point 69 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB 4" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 308 147) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.5003743 2.998494 4.4943595 5.9879704 7.4793263 8.96843 10.455276 11.939868 13.422207 14.90229 16.38012 17.855694 19.329014 20.80008 22.268889 23.735444 25.199746 26.66179 28.121586 29.579123 31.034405 32.487435 33.938214 35.38673 36.832993 38.277 39.718758 41.158265 42.59551 44.030503 45.46324 46.893723 48.32195 49.747933 51.171647 52.593113 54.01233 55.42928 56.843987 58.25644 59.66663 61.07457 62.48025 63.88368 65.28485 66.68378 68.080445 69.47485 70.86701 72.25692 73.64457 75.02996 76.41309 77.79398 79.172615 80.54899 81.92311 83.29497 84.66459 86.031945 87.39705 88.75989 90.12049 91.478836 92.83492 94.18875 95.54031 96.88963 98.23671 99.58152 100.92408 102.26439 103.60243 104.93823 106.27177 107.60306 108.93208 110.258866 111.58339 112.905655 114.225655 115.54342 116.85892 118.17217 119.48316 120.79191 122.09839 123.40263 124.7046 126.00433 127.3018 128.59702 129.88997 131.18068 132.46913 133.75533 135.03926 136.32096 137.60039 138.87757 140.15248 141.42516 142.69556 143.96372 145.22962 146.49327 147.75467 149.01383 150.2707 151.52533 152.77771 154.02785 155.27571 156.52132 157.76468 159.00579 160.24463 161.48125 162.71558 163.94766 165.17749 166.40508 167.63039 168.85346 170.07428 171.29283 172.50914 173.72318 174.935 176.14452 177.35182 178.55686 179.75963 180.96018 182.15842 183.35445 184.5482 185.73972 186.92896 188.11597 189.3007 190.4832 191.66342 192.8414 194.01714 195.19062 196.36182 197.53078 198.69747 199.86194 201.02413 202.18407 203.34177 204.4972 205.65036 206.80132 207.94998 209.09639 210.24056 211.38246 212.52211 213.65952 214.79465 215.92754 217.05818 218.18657 219.3127 220.43656 221.55815 222.67754 223.79465 224.90952 226.02211 227.13245 228.24053 229.34638 230.44995 231.5513 232.65036 233.74718 234.8417 235.93405 237.02408 238.1119 239.19744 240.28072 241.36176 242.44055 243.51708 244.59137 245.66335 246.73313 247.80063 248.86588 249.92891 250.98961 252.0481 253.10436 254.15834 255.21006 256.25952 257.30676 258.3517 259.39444 260.43488 261.47308 262.50903 263.54272 264.57416 265.60333 266.63025 267.65494 268.67734 269.6975 270.71542 271.73108 272.74448 273.75565 274.76453 275.77115 276.7755 277.77768 278.77753 279.77518 280.7705 281.76364 282.7545 283.74307 284.72943 285.71353 286.69537 287.67496 288.65228 289.62735 290.60016 291.57074 292.53903 293.50513 294.46887 295.43048 296.38974 297.3468 298.30157 299.2541 300.20435 301.1524 302.09814 303.0417 303.9829 304.92194 305.85864 306.79315 307.7254 308.6554 309.58307 310.50858 311.4318 312.35278 313.27148 314.18793 315.10214 316.0141 316.92377 317.83124 318.7364 319.63934 320.53998 321.43842 322.3346 323.22852 324.12018 325.00958 325.89673 326.78162 327.66425 328.54465 329.42276 330.29865 331.17227 332.04364 332.91272 333.7796 334.6442 335.50656 336.36664 337.2245 338.08008 338.9334 339.7845 340.6333 341.47986 342.32416 343.16623 344.00604 344.84357 345.6789 346.5119 347.3427 348.17123 348.9975 349.82153 350.6433 351.46283 352.2801 353.0951 353.90784 354.71832 355.52658 356.33255 357.1363 357.93774 358.737 359.53394 360.32867 361.1211 361.91135 362.69928 363.485 364.26843 365.04962 365.82855 366.60522 367.3796 368.1518 368.92172 369.6894 370.45477 371.21796 371.97882 372.7375 373.49387 374.24802 374.99985 375.75064 376.50137 377.2521 378.00287 378.75363 379.5044 380.25513 381.0059 381.75665 382.5074 383.25815 384.0089 384.75964 385.5104 386.26114 387.0119 387.76263 388.5134 389.26416 390.0149 390.76566 391.5164 392.26712 393.0179 393.76862 394.51938 395.27014 396.0209 396.7716 397.5224 398.27316 399.0239 399.77463 400.5254 401.27615 402.02692 402.77765 403.52838 404.27914 405.0299 405.78064 406.5314 407.28214 408.0329 408.78366 409.53436 410.28513 411.0359 411.78665 412.5374 413.28815 414.03894 414.78964 415.5404 416.29117 417.0419 417.79266 418.5434 419.29413 420.0449 420.79562 421.5464 422.29712 423.0479 423.7986 424.5494 425.30017 426.05093 426.80164 427.5524 428.30316 429.0539 429.80466 430.55542 431.30615 432.0569 432.80768 433.55844 434.30914 435.0599 435.81067 436.5614 437.3122 438.0629 438.81366 439.56442 440.31516 441.06592 441.81665 442.56738 443.3181 444.0689 444.81967 445.5704 446.32114 447.0719 447.82263 448.57343 449.32416 450.07492 450.82565 451.57645 452.32718 453.07788 453.8286 454.5794 455.33017 456.0809 456.8317 457.58243 458.33316 459.08392 459.83466 460.58545 461.33615 462.08688 462.83768 463.5884 464.33917 465.0899 465.84064 466.59143 467.34213 468.09287 468.84366 469.59442 470.34515 471.09595 471.84668 472.5974 473.34818 474.09897 474.8497 475.6004 476.35114 477.10193 477.85266 478.60342 479.35422 480.10495 480.85568 481.60645 482.35712 483.1079 483.85864 484.6094 485.3602 486.11093 486.8617 487.61243 488.36316 489.11395 489.86465 490.61545 491.36618 492.11694 492.86768 493.61847 494.36914 495.1199 495.87064 496.62143 497.37216 498.12293 498.87366 499.62445 500.37518 501.12595 501.87668 502.62747 503.37817 504.1289 504.8797 505.63043 506.38116 507.13193 507.88266 508.63345 509.38416 510.13495 510.88574 511.63644 512.3872 513.13794 513.8887 514.6394 515.3902 516.1409 516.8917 517.64246 518.3932 519.1439 519.89466 520.64545 521.3962 522.147 522.8977 523.64844 524.3992 525.1499 525.9007 526.6514 527.40217 528.15296 528.9037 529.6545 530.4052 531.15595 531.90674 532.6574 533.4082 534.15894 534.90967 535.6604 536.4112 537.162 537.9127 538.66346 539.4142 540.165 540.9157 541.6665 542.41724 543.16797 543.9187 544.6695 545.42017 546.17096 546.9217 547.6725 548.42316 549.17395 549.9247 550.6754 551.4262 552.17695 552.92774 553.67847 554.4292 555.17994 555.93067 556.68146 557.43226 558.183 558.9337 559.68445 560.4352 561.1859 561.9367 562.6875 563.43824 564.18897 564.9397 565.6904 566.4412 567.19196 567.94275 568.6935 569.4442 570.19495 570.9457 571.6964 572.4472 573.198 573.9487 574.69947 575.4502 576.201 576.9517 577.7025 578.45325 579.204 579.9547 580.70545 581.45624 582.207 582.9577 583.7085 584.4592 585.20997 585.9607 586.7115 587.4622 588.21296 588.96375 589.7145 590.4652 591.21595 591.9667 592.71747 593.4682 594.219 594.9697 595.72046 596.4712 597.222 597.9727 598.7235 599.47425 600.225 600.9757 601.72644 602.47724 603.22797 603.97876 604.7295 605.4802 606.23096 606.9817 607.7325 608.4832 609.234 609.98475 610.7355 611.4862 612.23694 612.9877 613.73847 614.48926 615.24 615.9907 616.74146 617.4922 618.2429 618.9937 619.7445 620.49524 621.246 621.9967 622.7475 623.4982 624.24897 624.99976 625.7516 626.50574 627.2622 628.0209 628.78174 629.545 630.3104 631.0781 631.8481 632.6202 633.39466 634.1713 634.9503 635.73157 636.5151 637.3007 638.08875 638.87897 639.6715 640.46625 641.26325 642.06257 642.86396 643.6678 644.47376 645.28205 646.0925 646.90534 647.72034 648.53766 649.3573 650.179 651.0031 651.8294 652.6579 653.4888 654.32184 655.15717 655.9948 656.8346 657.6767 658.5211 659.3677 660.21656 661.0676 661.921 662.7767 663.63446 664.49457 665.357 666.2216 667.08857 667.9577 668.8291 669.70276 670.57874 671.45685 672.3373 673.22 674.10486 674.9921 675.8815 676.77326 677.6672 678.5634 679.4619 680.36255 681.2655 682.1708 683.07825 683.9879 684.8999 685.8142 686.7307 687.6495 688.57044 689.4937 690.4192 691.347 692.27704 693.2093 694.1438 695.0806 696.01966 696.961 697.90455 698.85035 699.79847 700.74866 701.7013 702.6561 703.61316 704.5725 705.5341 706.498 707.4641 708.4325 709.4031 710.3759 711.351 712.3284 713.30805 714.29 715.27405 716.26044 717.24915 718.24 719.23316 720.2285 721.22626 722.22614 723.22834 724.2328 725.23945 726.2484 727.25965 728.2731 729.28876 730.30665 731.32697 732.34937 733.3741 734.4011 735.4303 736.4618 737.49555 738.53156 739.56977 740.61036 741.6531 742.69806 743.74537 744.7949 745.8467 746.9007 747.95704 749.01557 750.07636 751.1394 752.2047 753.2722 754.34205 755.4141 756.48847 757.56507 758.64386 759.725 760.8083 761.8939 762.98175 764.0719 765.1642 766.25885 767.3557 768.45484 769.5563 770.6599 771.76575 772.8739 773.9844 775.09705 776.21186 777.3291 778.4485 779.5701 780.69404 781.8203 782.9487 784.0794 785.21235 786.34754 787.485 788.6247 789.7666 790.9109 792.0574 793.2061 794.35706 795.51026 796.6658 797.82355 798.9835 800.1459 801.31037 802.4771 803.6461 804.8174 805.99097 807.16675 808.3448 809.525 810.70765 811.89246 813.07947 814.2688 815.4604 816.65424 817.85035 819.0486 820.24915 821.452 822.6571 823.8645 825.0741 826.286 827.5001 828.71644 829.93506 831.1559 832.37915 833.6045 834.83216 836.062 837.2942 838.5286 839.76526 841.00415 842.24537 843.4888 844.73444 845.9824 847.23255 848.485 849.73975 850.9967 852.25586 853.51734 854.7811 856.04706 857.3153 858.58576 859.8585 861.13355 862.41077 863.69025 864.97205 866.256 867.5423 868.8308 870.1216 871.41456 872.70997 874.00745 875.30726 876.60926 877.9136 879.2201 880.52894 881.84 883.15326 884.46906 885.7868 887.1068 888.4292 889.7537 891.08075 892.40967 893.7411 895.07477 896.41065 897.7487 899.0891 900.4317 901.7766 903.12384 904.47315 905.8248 907.17865 908.5349 909.8933 911.25385 912.6169 913.98206 915.3495 916.71924 918.0911 919.46534 920.8418 922.2205 923.60144 924.98475 926.3701 927.75794 929.1478 930.5401 931.93464 933.3313 934.73035 936.13166 937.53504 938.94086 940.3489 941.75916 943.1717 944.5864 946.0035 947.4227 948.84436 950.26825 951.6942 953.12244 954.5531 955.986 957.42096 958.8583 960.298 961.73975 963.18384 964.6301 966.07874 967.52967 968.98267 970.438 971.89576 973.3556 974.8178 976.28217 977.7488 979.21766 980.6889 982.16236 983.6378 985.11585 986.59595 988.0784 989.5631 991.05005 992.53925 994.03064 995.52436 997.0203 998.51844 1000.0)) (quote (155.0 155.31372 155.63022 155.94956 156.2717 156.59662 156.92436 157.25492 157.58824 157.92441 158.26335 158.60512 158.94969 159.29706 159.64722 160.00023 160.35599 160.71459 161.07598 161.44017 161.80718 162.17699 162.54958 162.92502 163.30323 163.68425 164.0681 164.45473 164.84415 165.23639 165.63144 166.0293 166.42995 166.83342 167.23969 167.64875 168.06063 168.47531 168.8928 169.31308 169.73619 170.16208 170.59079 171.0223 171.4566 171.89373 172.33365 172.77637 173.2219 173.67024 174.12137 174.57532 175.03208 175.49163 175.95398 176.41915 176.88712 177.35788 177.83147 178.30785 178.78704 179.26903 179.7538 180.24143 180.73183 181.22504 181.72104 182.21985 182.72148 183.22592 183.73313 184.24317 184.75601 185.27167 185.79015 186.31137 186.83544 187.36229 187.89197 188.42444 188.95972 189.4978 190.03867 190.58237 191.12888 191.67816 192.23027 192.78519 193.34291 193.90343 194.46674 195.03289 195.6018 196.17356 196.7481 197.32544 197.9056 198.48856 199.0743 199.66287 200.25426 200.8484 201.44539 202.04518 202.64777 203.25315 203.86136 204.47237 205.08615 205.70279 206.3222 206.94443 207.56946 208.19728 208.8279 209.46134 210.0976 210.73664 211.37851 212.02315 212.67061 213.32088 213.97394 214.62982 215.2885 215.94998 216.61428 217.28137 217.95127 218.62398 219.29949 219.97783 220.65892 221.34284 222.02957 222.71909 223.41144 224.1066 224.80452 225.50527 226.20883 226.9152 227.62436 228.3363 229.0511 229.76866 230.48906 231.21222 231.93822 232.667 233.39862 234.13303 234.87023 235.61026 236.35308 237.09867 237.84714 238.59836 239.35239 240.10926 240.86887 241.63132 242.39659 243.16464 243.9355 244.7092 245.48567 246.26493 247.04703 247.83191 248.6196 249.4101 250.2034 250.9995 251.7984 252.6001 253.40465 254.21198 255.0221 255.83504 256.65076 257.4693 258.29068 259.1148 259.94177 260.7715 261.6041 262.43945 263.27765 264.11862 264.9624 265.809 266.6584 267.5106 268.3656 269.2234 270.08398 270.94742 271.81366 272.68268 273.5545 274.42914 275.30658 276.18683 277.0699 277.95572 278.8444 279.73584 280.63013 281.5272 282.42706 283.32974 284.23523 285.14352 286.05463 286.9685 287.88525 288.80472 289.72705 290.65216 291.58008 292.5108 293.44434 294.38068 295.31982 296.26178 297.2065 298.15405 299.10443 300.0576 301.01355 301.97232 302.9339 303.8983 304.86548 305.83545 306.80826 307.78387 308.76227 309.74347 310.7275 311.71433 312.70395 313.69635 314.6916 315.68964 316.6905 317.69415 318.7006 319.70984 320.72192 321.73676 322.75443 323.7749 324.7982 325.82428 326.85315 327.88483 328.91937 329.95667 330.99677 332.03967 333.0854 334.1339 335.18524 336.23935 337.2963 338.35602 339.41858 340.4839 341.55206 342.62305 343.69678 344.77338 345.85272 346.93494 348.0199 349.10767 350.19827 351.29166 352.38788 353.48685 354.58868 355.6933 356.80072 357.91092 359.02396 360.13977 361.25842 362.37985 363.50412 364.63116 365.76102 366.89365 368.0291 369.1674 370.30847 371.45233 372.59903 373.7485 374.9008 376.05588 377.2138 378.37448 379.53803 380.70435 381.87344 383.04535 384.2201 385.39758 386.57794 387.76108 388.94708 390.1358 391.32736 392.52173 393.7189 394.91882 396.12164 397.3272 398.53558 399.74677 400.9608 402.17755 403.39716 404.61957 405.8448 407.07278 408.30362 409.53723 410.77368 412.01288 413.25494 414.49976 415.7436 416.9824 418.21625 419.4452 420.66913 421.88818 423.10223 424.3113 425.5155 426.71472 427.909 429.0983 430.28262 431.46207 432.63654 433.80603 434.97058 436.1302 437.28488 438.43457 439.5793 440.71912 441.85397 442.9839 444.1088 445.22882 446.34384 447.45395 448.5591 449.65933 450.75458 451.84476 452.9302 454.01056 455.08603 456.15652 457.22202 458.2826 459.33826 460.38895 461.43466 462.47543 463.51132 464.54218 465.5681 466.58905 467.6052 468.6162 469.6223 470.62344 471.61975 472.61096 473.59732 474.57867 475.55518 476.5266 477.4931 478.45468 479.41132 480.363 481.3097 482.25147 483.18826 484.12015 485.04703 485.96906 486.88602 487.79807 488.7052 489.60733 490.50455 491.39685 492.2841 493.16647 494.04388 494.91635 495.7838 496.6464 497.50403 498.35666 499.20435 500.04712 500.88495 501.71777 502.5457 503.3686 504.18658 504.99966 505.80768 506.6109 507.40906 508.20227 508.9906 509.77387 510.55228 511.32578 512.0942 512.8577 513.61634 514.37 515.11866 515.86237 516.6012 517.33497 518.06385 518.78785 519.5068 520.2208 520.9299 521.634 522.3332 523.0274 523.7167 524.401 525.0803 525.75477 526.42426 527.08875 527.7483 528.40296 529.05256 529.6973 530.33704 530.9719 531.60175 532.2267 532.8466 533.4616 534.07166 534.67676 535.277 535.87214 536.4624 537.0477 537.62806 538.2034 538.7739 539.3394 539.8999 540.45557 541.0062 541.5519 542.09266 542.6284 543.1593 543.6852 544.2061 544.7221 545.23316 545.7392 546.24036 546.7366 547.2278 547.7141 548.1954 548.67176 549.1432 549.6097 550.0712 550.52784 550.97944 551.42615 551.86786 552.30457 552.7364 553.1633 553.5852 554.0022 554.41425 554.8213 555.22345 555.6206 556.0128 556.4001 556.7824 557.1598 557.53217 557.8996 558.26215 558.6197 558.9723 559.31995 559.66266 560.0005 560.33326 560.66114 560.984 561.302 561.615 561.923 562.22614 562.52424 562.8175 563.1057 563.389 563.66736 563.94074 564.20917 564.4727 564.7312 564.9848 565.23346 565.4772 565.7159 565.9497 566.1785 566.4024 566.62134 566.8353 567.0444 567.2484 567.44764 567.6417 567.831 568.01526 568.19465 568.369 568.5384 568.7029 568.8624 569.01697 569.1666 569.3113 569.451 569.5858 569.7156 569.8405 569.9604 570.0753 570.18537 570.2904 570.39057 570.4857 570.5759 570.6612 570.7415 570.8169 570.88727 570.95276 571.01325 571.0688 571.1194 571.16504 571.2058 571.2415 571.27234 571.2982 571.3191 571.335 571.346 571.35206 571.35315 571.3493 571.3405 571.3268 571.30805 571.2844 571.25574 571.22217 571.1837 571.14026 571.0918 571.03846 570.98017 570.9169 570.8487 570.7755 570.6974 570.6143 570.5263 570.43335 570.3354 570.23255 570.12476 570.01197 569.8942 569.7716 569.6439 569.51136 569.37384 569.2314 569.0839 568.9315 568.7742 568.61194 568.4447 568.2725 568.09534 567.9133 567.72626 567.53425 567.3373 567.13544 566.9286 566.7168 566.50007 566.2784 566.05176 565.8201 565.58356 565.34205 565.09565 564.84424 564.5879 564.3266 564.06037 563.7891 563.513 563.2319 562.9458 562.65485 562.3589 562.0579 561.7521 561.4413 561.1255 560.8048 560.4792 560.14856 559.813 559.4725 559.127 558.7766 558.42127 558.0609 557.6957 557.32544 556.95026 556.5701 556.18506 555.79505 555.4001 555.0001 554.60206 554.2126 553.83185 553.4598 553.09626 552.74146 552.3953 552.05787 551.729 551.4088 551.0973 550.79444 550.50025 550.2148 549.93787 549.6696 549.41004 549.1592 548.917 548.68335 548.4584 548.2421 548.03455 547.8355 547.6452 547.4636 547.2906 547.1262 546.97065 546.8236 546.68525 546.55555 546.4345 546.32215 546.2184 546.1233 546.0369 545.95917 545.8901 545.82966 545.7779 545.7348 545.7003 545.67457 545.65735 545.6489 545.6491 545.6579 545.6754 545.7016 545.7363 545.77985 545.832 545.8927 545.96216 546.0403 546.1271 546.2224 546.32654 546.4392 546.5606 546.6906 546.82935 546.97675 547.13276 547.29737 547.47077 547.6527 547.8434 548.0427 548.2506 548.4673 548.69257 548.9265 549.16907 549.42035 549.6803 549.9488 550.2261 550.51197 550.8065 551.1097 551.4216 551.74207 552.0713 552.4091 552.7556 553.1107 553.47455 553.84705 554.22815 554.6179 555.01636 555.4235 555.8393 556.2637 556.6967 557.1384 557.58887 558.0479 558.51557 558.99195 559.477 559.9707 560.473 560.984 561.5036 562.032 562.5689 563.1146 563.6688 564.2318 564.8034 565.38367 565.9726 566.5702 567.1764 567.79126 568.4148 569.04706 569.68787 570.3374 570.9956 571.6624 572.33796 573.0221 573.7149 574.4164 575.1265 575.84534 576.57276 577.30884 578.0536 578.807 579.5691 580.33985 581.11927 581.9073 582.704 583.50934 584.32337 585.14606 585.9774 586.8174 587.6661 588.5234 589.38935 590.264 591.1473 592.0392 592.9398 593.8491 594.767 595.6936 596.62885 597.57276 598.52527 599.4865 600.45636 601.43494 602.4221 603.4179 604.4224 605.43555 606.4574 607.48786 608.527 609.57477 610.6313 611.69635 612.77015 613.85254 614.9436 616.04334 617.15174 618.2688 619.39454 620.52894 621.67194 622.8236 623.9839 625.15296 626.3307 627.51697 628.7119 629.9155 631.1278 632.34876 633.57837 634.81665 636.0636 637.31916 638.5834 639.8563 641.1378 642.4281 643.7269 645.03455 646.3507 647.67554 649.009 650.35114 651.702 653.0615 654.4296 655.8064 657.19184 658.58594 659.9888 661.40015 662.82026 664.249 665.6864 667.13245 668.58716 670.05054 671.5226 673.00324 674.49256 675.9906 677.4973 679.0126 680.5366 682.0692 683.6105 685.16047 686.7191 688.2864 689.8623 691.4469 693.0401 694.642 696.25257 697.87177 699.49964 701.1362 702.7814 704.43525 706.0977 707.7689 709.4487 711.1372 712.83436 714.54017 716.2546 717.97767 719.7095 721.4499 723.199 724.9568 726.72315 728.49817 730.2819 732.0743 733.8753 735.68506 737.5034 739.3304 741.1661 743.0104 744.8634 746.72504 748.59534 750.4743 752.3619 754.2582 756.1631 758.07666 759.9989 761.9299 763.8694 765.8176 767.77454 769.74006 771.71424 773.6971 775.6886 777.6888 779.6976 781.715 783.7412 785.776 787.81946 789.8716 791.9324 794.00184 796.07996 798.1666 800.2621 802.36615 804.4789 806.6002 808.7302 810.86896 813.0163 815.1723 817.337 819.5104 821.6923 823.883 826.0823 828.2902 830.50684 832.73206 834.966 837.2086 839.4599 841.7198 843.9884 846.2656 848.5515 850.846 853.14924 855.46106 857.78156 860.1107 862.4486 864.79505 867.1502 869.51404 871.88654 874.26764 876.6574 879.05585 881.4629 883.87867 886.303 888.7362 891.1779 893.62824 896.08735 898.555 901.00007)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS 3" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 255 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-BFP-MODULATION" (quote r-bfp-modulation) (quote ((om-load-inputfun (quote input-funbox) "lists-of-bpfs-1000x1000" "LISTS-OF-BPFS-1000X1000" nil) (om-load-inputfun (quote input-funbox) "scaling-of-each-bpf" "SCALING-OF-EACH-BPF" nil) (om-load-inputfun (quote input-funbox) "y-min-max" "Y-MIN-MAX" nil))) (om-make-point 342 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB 3" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 730 271) (om-make-point 146 71) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (274.56537 217.82462 166.09415 120.99734 83.96989 56.207344 38.621746 31.801596 35.985733 51.045624 76.48095 111.4288 154.68358 204.73232 259.80353 317.91815 376.9657 434.77017 489.17114 538.11176 579.6996 612.30237 634.6043 645.6589 644.9519 632.4049 608.4053 573.80256 529.86176 478.24808 420.94943 360.20657 298.42966 238.09412 181.64313 131.3886 89.39933 57.41911 36.781643 28.344407 32.44571 48.87903 76.89347 115.218865 162.11142 215.42688 272.7136 331.31296 388.48392 441.53442 487.92947 525.4314 552.2083 566.90955 568.76026 557.5987 533.8816 498.69028 453.67615 400.9797 343.14597 282.99616 223.48287 167.54956 117.98017 77.24984 47.396874 29.91081 25.645483 34.769356 56.74714 90.35915 133.75785 184.56284 239.97913 296.94696 352.3087 402.9696 446.08157 479.20752 500.43982 508.53268 502.98108 484.03937 452.7262 410.77756 360.54697 304.87134 246.92293 190.02252 137.43697 92.19914 56.92021 33.62821 23.646586 27.504933 44.90181 74.715004 115.06351 163.41771 216.74637 271.69995 324.82083 372.7558 412.456 441.38602 457.68417 460.2774 448.9579 424.40842 388.1681 342.51944 290.36597 235.04149 180.09819 129.067 85.2362 51.428833 29.814194 21.758599 27.730572 47.262974 78.980225 120.68326 169.49732 222.0572 274.7407 323.9064 366.1459 398.52078 418.77405 425.46985 418.11514 397.19397 364.1406 321.23932 271.46603 218.29175 165.4326 116.59279 75.19394 44.13749 25.590699 20.831679 30.151112 52.827393 87.17465 130.66042 180.08718 231.8212 282.05298 327.07892 363.5696 388.81918 400.9501 399.04297 383.21588 354.62134 315.36203 268.3396 217.04117 165.27513 116.89437 75.50647 44.20107 25.314276 20.251004 29.375399 51.98018 86.335884 129.8183 179.10659 230.4306 279.86316 323.61212 358.31357 381.29102 390.76334 385.98456 367.3039 336.14298 294.89023 246.71796 195.33818 144.7238 98.798615 61.131825 34.662705 21.469594 22.606017 38.015976 66.53438 105.97462 153.29431 204.83275 256.5903 304.54044 344.9445 374.6438 391.3086 393.62064 381.3805 355.52634 318.0645 271.91568 220.6893 168.40555 119.18163 76.909386 44.95501 25.889672 21.289757 31.611025 56.148537 93.08891 139.64768 192.28183 246.96654 299.50287 345.84393 382.40964 406.36722 415.85062 410.10757 389.5628 355.78668 311.37878 259.77148 204.96654 151.23062 102.769806 63.40534 36.281224 23.625475 26.574547 45.085755 77.936646 122.81557 176.49312 235.05669 294.21854 349.62927 397.1972 433.39777 455.54395 461.98392 452.22476 426.9776 388.0945 338.44122 281.67517 222.00055 163.89357 111.74187 69.508934 40.445778 26.851906 29.907378 49.590928 84.6827 132.85518 190.84487 254.6879 320.00604 382.3179 437.3569 481.37116 511.37436 525.3616 522.43165 502.8431 467.98538 420.27216 362.9778 299.99765 235.5832 174.0527 119.50925 75.56855 45.129486 30.195155 31.75655 49.742985 83.04398 129.59632 186.52799 250.35559 317.20578 383.0687 444.0465 496.57785 537.6547 564.98554 577.12427 573.5264 554.5633 521.47767 476.28583 421.6575 360.73343 296.9366 233.77759 174.6614 122.711876 80.61312 50.480355 33.773663 31.238236 42.889046 68.03278 105.323204 152.84232 208.21404 268.73547 331.50885 393.58963 452.12064 504.46692 548.32947 581.8374 603.6214 612.8608 609.3023 593.26044 565.58094 527.5911 481.029 427.95947 370.6805 311.61884 253.21988 197.85778 147.73915 104.816216 70.71692 46.6904 33.567055 31.74074 41.164692 61.363755 91.465836 130.24355 176.16919 227.48088 282.2528 338.47 394.10117 447.17242 495.83484 538.42994 573.54096 600.0321 617.0866 624.2247 621.30854 608.5417 586.4495 555.8618 517.873 473.80005 425.13416 373.48752 320.54324 267.99725 217.50429 170.62427 128.78034 93.21507 64.95439 44.783963 33.228436 30.541602 36.704323 51.430638 74.18194 104.188095 140.47464 181.89559 227.17014 274.92368 323.72693 372.14084 418.75818 462.2408 501.3601 535.02466 562.31147 582.4937 595.051 599.68384 596.3156 585.09205 566.3804 540.7471 508.94205 471.87555 430.59073 386.23615 340.0291 293.22513 247.07929 202.81581 161.59639 124.48731 92.43222 66.22932 46.511982 33.732514 28.152049 29.837037 38.658764 54.29814 76.25707 103.87282 136.33716 172.71819 211.99086 253.07015 294.82678 336.1219 375.83814 412.90585 446.33246 475.22965 498.8318 516.51716 527.8248 532.4642 530.32215 521.4663 506.14246 484.76706 457.91577 426.30728 390.78647 352.30096 311.87384 270.57877 229.51192 189.75885 152.36904 118.32912 88.53097 63.750412 44.626923 31.643816 25.115546 25.177826 31.783888 44.70444 63.5337 87.69947 116.47699 149.0111 184.33666 221.40914 259.12766 296.37045 332.02597 365.02435 394.3705 419.1715 438.6657 452.2441 459.47195 460.10367 454.09015 441.58456 422.93854 398.69473 369.5726 336.44565 300.32068 262.3048 223.57271 185.33167 148.78456 115.08394 85.30162 60.39044 41.150574 28.201298 21.957518 22.612368 30.126925 44.228123 64.41437 89.968285 119.97808 153.36649 188.92476 225.35396 261.3127 295.45956 326.5048 353.25815 374.6768 389.90595 398.3132 399.51923 393.41718 380.18207 360.27023 334.40802 303.5671 268.93008 231.84859 193.79033 156.27918 120.83499 88.90996 61.82506 40.71169 26.457884 19.66493 20.617205 29.261464 45.20259 67.71528 95.76999 128.07366 163.12285 199.26967 234.79749 267.99793 297.2529 321.11496 338.37982 348.14917 349.88162 343.42566 329.03546 307.36694 279.45032 246.64765 210.58692 173.08199 136.04465 101.38266 70.89767 46.189038 28.562767 18.953484 17.866257 25.339987 40.93705 63.758564 92.48566 125.44757 160.71263 196.19469 229.77126 259.4097 283.2919 299.9255 308.2393 307.66 298.15408 280.24164 254.97444 223.87772 188.8632 152.11235 115.94266 82.65843 54.396973 32.985623 19.814494 15.734902 20.990422 35.189686 57.322052 85.81761 118.64618 153.45095 187.71109 218.92122 244.77185 263.32105 273.14328 273.4448 264.13376 245.84049 219.88547 188.18141 153.09949 117.29575 83.50887 54.34608 32.072556 18.425536 14.465468 20.477362 35.93323 59.521855 89.24475 122.56998 156.63538 188.49097 215.34752 234.8189 245.14008 245.333 235.30745 215.882 188.7292 156.23886 121.31251 87.10672 56.74342 33.0172 18.127038 13.457212 19.429186 35.44364 59.920693 90.43583 123.94482 157.07447 186.45464 209.05867 222.51706 225.37358 217.2528 198.9152 172.20287 139.8654 105.280655 72.104294 43.88034 23.655253 13.630889 14.90555 27.332663 49.511357 78.92347 112.197464 145.48009 174.87512 196.89279 208.87125 209.30669 198.05484 176.37548 146.8043 112.87265 78.69063 48.449273 25.899519 13.872994 13.905144 26.012709 48.661194 78.934235 112.88453 146.03234 173.94753 192.84247 200.0936 194.61754 177.05425 149.71277 116.28536 81.36194 49.805214 26.069697 13.555587 14.099392 27.677773 52.369988 84.59941 119.62751 152.23342 177.48557 191.49343 192.02193 178.86879 153.94139 121.00482 85.13184 51.93698 26.693045 13.481046 14.507408 29.703625 56.68381 91.08897 127.263665 159.1689 181.39147 190.07265 183.60196 162.94724 131.54412 94.75749 58.98478 30.548348 14.572095 14.032999 29.172299 57.386605 93.63837 131.32892 163.48744 184.06996 189.11238 177.5265 151.36962 115.512184 76.76391 42.5912 19.680439 12.614645 22.931883 48.764615 85.14309 124.931275 160.21837 183.89264 191.09564 180.24892 153.43242 116.02214 75.639046 40.61522 18.27576 13.40165 27.189335 56.941616 96.575325 137.85112 172.08574 191.99105 193.24698 175.47042 142.35674 100.941246 60.13284 28.810036 13.894869 18.819628 42.729023 80.610665 124.334465 164.3999 192.01059 201.0269 189.35738 159.47702 117.93347 73.94395 37.365158 16.505677 16.243172 36.887753 74.057656 119.60646 163.41594 195.65723 209.01659 200.38446 171.6085 129.13219 82.581345 42.610238 18.481787 15.936962 35.84399 73.94478 121.7763 168.56295 203.66259 219.01418 211.01729 181.40468 136.89818 87.71703 45.255467 19.465876 16.552958 37.503704 77.80681 128.4449 177.93163 214.9447 230.93972 222.15381 190.51883 143.26459 91.29306 46.69568 19.96429 17.553282 40.35493 83.44575 137.17694 189.36135 228.07306 244.39719 234.50942 200.59908 150.40741 95.489556 48.580235 20.669764 18.465399 42.819764 88.49698 145.33078 200.52033 241.55432 259.06726 249.00797 213.59462 160.85019 102.8022 52.77247 22.347138 18.734787 43.10578 90.29403 149.93265 208.77317 253.66745 274.53116 266.63388 231.68953 177.49614 116.21738 61.677216 26.268769 18.18371 39.568303 86.020905 147.54639 210.75215 261.8036 289.4872 287.68878 256.75934 203.4592 139.48577 78.933976 35.21767 18.134852 31.72782 73.395356 134.43044 201.90543 261.44672 300.3363 310.2432 289.02255 241.19072 176.9535 110.05962 54.858113 23.27703 22.284367 52.416832 107.66533 176.72682 245.37505 299.42496 327.70026 324.34924 290.0603 231.90847 161.92234 94.572296 43.83124 20.30875 29.082833 68.68475 131.395 204.80796 274.3484 326.19153 350.04236 341.16617 301.34378 238.49829 165.12189 95.75969 44.227803 20.838854 30.424807 71.41073 136.12172 212.3091 285.4882 341.77206 370.48947 366.2217 329.81985 268.21436 193.08126 118.64804 59.01186 25.476906 24.511969 56.553238 115.92891 191.98256 270.99042 338.70767 382.95303 395.82224 375.0626 324.46176 253.14543 173.89308 100.88676 47.18297 22.411473 31.12016 72.00917 138.18018 218.41434 299.05454 366.43954 409.1948 420.1637 397.58365 345.34464 272.32245 190.78195 114.4098 55.97948 25.277199 27.495728 62.45202 124.6544 204.2085 288.51242 364.21088 419.39954 445.45108 438.39383 399.4529 334.81833 254.67516 171.49886 98.22271 46.177155 23.423796 33.53232 75.11669 142.08144 224.58647 310.5395 387.4011 444.05176 472.38544 468.43414 432.91608 371.08838 291.88956 206.69344 127.631096 65.912026 30.223982 25.605914 52.790104 108.12093 184.18088 270.75885 356.3345 429.58243 480.9416 503.77658 495.26505 456.707 393.26416 313.27533 227.14258 145.95626 80.03063 37.755085 24.449418 41.80108 87.709 156.59618 240.15494 328.35278 410.73526 477.6361 521.2932 536.7753 522.4748 480.26395 415.20102 334.88846 248.6082 166.17498 96.91927 48.547478 0.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 861 179) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 841 159) (om-make-point 62 30) (list 0 360) "(0 360)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 785 159) (om-make-point 48 30) (list 1 1) "(1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 742 157) (om-make-point 38 30) (list 1 1) "(1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 424 111) (om-make-point 69 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 478 157) (om-make-point 79 30) (list (list 10 100)) "((10 100))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 759 28) (om-make-point 19 25) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 724 5) (om-make-point 38 30) (list 3 7) "(3 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 644 5) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB 2" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 680 145) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.6662475 3.32832 4.9862175 6.63994 8.289488 9.934859 11.576058 13.213081 14.845929 16.474602 18.099099 19.719422 21.33557 22.94754 24.555338 26.158959 27.758408 29.353672 30.944773 32.531697 34.114438 35.693013 37.267407 38.83763 40.403675 41.96555 43.523243 45.076764 46.62611 48.171288 49.71228 51.249104 52.781746 54.31022 55.834515 57.354638 58.870575 60.382355 61.88995 63.39337 64.89262 66.38769 67.87858 69.3653 70.847855 72.32622 73.800415 75.27045 76.73628 78.19796 79.65546 81.10877 82.557915 84.00289 85.44369 86.88031 88.31276 89.741036 91.165116 92.58505 94.00079 95.41237 96.819756 98.22298 99.622025 101.0169 102.40759 103.79411 105.17645 106.554634 107.928635 109.29846 110.66409 112.02556 113.382866 114.736 116.08492 117.429695 118.77029 120.1067 121.43896 122.767044 124.09092 125.410645 126.72619 128.03759 129.34476 130.64778 131.94663 133.2413 134.5318 135.81812 137.10025 138.37824 139.65203 140.92165 142.1871 143.44837 144.70546 145.95838 147.20713 148.4517 149.69208 150.92832 152.16036 153.38823 154.61193 155.83145 157.04679 158.25797 159.46497 160.66779 161.86643 163.0609 164.25119 165.43732 166.61927 167.79703 168.97063 170.14005 171.3053 172.46637 173.62326 174.77599 175.92453 177.0689 178.20909 179.34513 180.47696 181.60462 182.72812 183.84745 184.96259 186.07358 187.18036 188.28299 189.38143 190.4757 191.56578 192.65172 193.73345 194.81104 195.88442 196.95365 198.01868 199.07956 200.13623 201.18877 202.2371 203.2813 204.32126 205.3571 206.38874 207.41622 208.4395 209.45864 210.47357 211.48435 212.49094 213.49338 214.49161 215.48569 216.47557 217.4613 218.44284 219.42021 220.3934 221.36241 222.32726 223.28795 224.24443 225.19676 226.1449 227.08887 228.02866 228.96431 229.89572 230.82302 231.7461 232.66501 233.57978 234.49036 235.39675 236.29897 237.19699 238.09087 238.98056 239.86606 240.7474 241.6246 242.49759 243.36641 244.23105 245.09154 245.94783 246.79996 247.64789 248.49167 249.33124 250.16675 251.00095 251.83509 252.66928 253.50345 254.33759 255.17176 256.00592 256.8401 257.6743 258.50845 259.3426 260.17676 261.01093 261.8451 262.67926 263.51346 264.34763 265.18176 266.01593 266.8501 267.6843 268.51846 269.3526 270.18677 271.02094 271.8551 272.68924 273.52344 274.3576 275.19177 276.02594 276.8601 277.69424 278.5284 279.3626 280.19678 281.03095 281.86508 282.69928 283.53345 284.3676 285.20178 286.03595 286.87012 287.70425 288.53845 289.3726 290.2068 291.04095 291.8751 292.7093 293.54346 294.3776 295.21176 296.04596 296.8801 297.7143 298.54843 299.38263 300.21677 301.05093 301.88513 302.71927 303.55344 304.3876 305.2218 306.05597 306.89014 307.7243 308.55844 309.3926 310.22678 311.06094 311.8951 312.7293 313.56342 314.39764 315.23178 316.06595 316.90015 317.73425 318.56845 319.40262 320.23682 321.07095 321.90515 322.7393 323.57346 324.40762 325.2418 326.07596 326.91016 327.74426 328.5785 329.41266 330.2468 331.08096 331.9151 332.74927 333.58344 334.4176 335.2518 336.086 336.92014 337.7543 338.58847 339.42264 340.2568 341.09097 341.92514 342.75928 343.59348 344.4276 345.2618 346.09598 346.93015 347.7643 348.59848 349.43262 350.2668 351.10095 351.93515 352.7693 353.60345 354.43765 355.2718 356.10596 356.94016 357.77432 358.60846 359.44266 360.27683 361.11096 361.94513 362.7793 363.61346 364.44763 365.2818 366.11597 366.95013 367.7843 368.61847 369.45264 370.2868 371.12097 371.95514 372.7893 373.62347 374.45764 375.2918 376.12598 376.96014 377.7943 378.62848 379.46265 380.2968 381.13098 381.96515 382.79932 383.63348 384.46765 385.30182 386.136 386.97015 387.80432 388.6385 389.47266 390.30682 391.141 391.97516 392.80933 393.6435 394.47766 395.31183 396.146 396.98016 397.81433 398.6485 399.48267 400.31683 401.151 401.98517 402.81934 403.6535 404.48767 405.32184 406.156 406.99014 407.82434 408.6585 409.49268 410.3268 411.161 411.99518 412.8293 413.66348 414.49768 415.33182 416.166 417.00018 417.83435 418.66858 419.50278 420.3369 421.17108 422.00528 422.8395 423.67365 424.5079 425.34204 426.17624 427.0104 427.84464 428.67877 429.513 430.3472 431.18137 432.01553 432.84973 433.68393 434.51813 435.3523 436.18646 437.02066 437.85486 438.68903 439.52322 440.35742 441.1916 442.0258 442.85992 443.69412 444.52832 445.36252 446.19672 447.0309 447.8651 448.6993 449.53345 450.3677 451.20184 452.03604 452.8702 453.70438 454.5386 455.37274 456.20694 457.04114 457.87527 458.70947 459.54373 460.37787 461.21207 462.04626 462.88046 463.71466 464.54883 465.38303 466.21722 467.05136 467.88556 468.71976 469.55396 470.38815 471.2223 472.0565 472.8907 473.72488 474.55908 475.39328 476.22742 477.06165 477.8958 478.72998 479.56418 480.39838 481.2325 482.06677 482.9009 483.73517 484.56937 485.4035 486.2377 487.0719 487.90604 488.74023 489.57443 490.4086 491.24286 492.077 492.9112 493.7454 494.57953 495.4138 496.24793 497.08218 497.91632 498.75052 499.58472 500.41885 501.25305 502.08722 502.92142 503.7556 504.58975 505.42395 506.25815 507.0924 507.92648 508.76068 509.59494 510.42914 511.26334 512.09754 512.9317 513.76587 514.60004 515.4342 516.26844 517.10267 517.93677 518.771 519.60517 520.43934 521.27356 522.1077 522.94196 523.7761 524.6103 525.44446 526.2787 527.11286 527.947 528.7812 529.6154 530.4496 531.2838 532.118 532.95215 533.7864 534.62055 535.4547 536.28894 537.12305 537.9573 538.79145 539.6256 540.45984 541.294 542.1282 542.9624 543.79664 544.6308 545.46497 546.29914 547.1333 547.9675 548.8017 549.63587 550.4701 551.30426 552.1384 552.97266 553.8068 554.641 555.4752 556.3094 557.14356 557.9778 558.81196 559.6461 560.48035 561.3145 562.1487 562.9829 563.8171 564.65125 565.4855 566.3196 567.1538 567.98804 568.8222 569.6564 570.4906 571.32477 572.15894 572.9931 573.82734 574.6615 575.49567 576.32984 577.16407 577.9983 578.8324 579.6666 580.5008 581.33497 582.1692 583.00336 583.8375 584.67176 585.5059 586.34015 587.1743 588.00855 588.8427 589.6769 590.51105 591.3452 592.17945 593.0136 593.8478 594.682 595.5162 596.35035 597.1846 598.01874 598.8529 599.6871 600.5213 601.35547 602.1897 603.02387 603.85804 604.6922 605.5264 606.3606 607.1948 608.029 608.86316 609.6973 610.53156 611.3657 612.1999 613.03406 613.8683 614.70246 615.5367 616.3708 617.205 618.03925 618.8734 619.70765 620.5418 621.376 622.21015 623.0443 623.87854 624.7127 625.5469 626.3811 627.2153 628.04944 628.8836 629.7179 630.552 631.3862 632.2204 633.05457 633.8888 634.72297 635.5571 636.3913 637.2255 638.0597 638.8939 639.7281 640.56226 641.3965 642.23066 643.0649 643.899 644.7332 645.5673 646.40155 647.2358 648.07 648.9041 649.7383 650.5725 651.4067 652.24097 653.0751 653.9093 654.7434 655.57764 656.4118 657.24604 658.0802 658.91437 659.74854 660.58277 661.4169 662.2511 663.0853 663.9195 664.7537 665.5879 666.4221 667.2563 668.09046 668.9246 669.7588 670.59296 671.4272 672.2614 673.0956 673.92975 674.7639 675.59815 676.43226 677.2665 678.10065 678.9348 679.76905 680.6033 681.43744 682.27167 683.1058 683.94 684.7742 685.6084 686.44257 687.27674 688.11097 688.9451 689.7793 690.6134 691.44764 692.28186 693.1161 693.9502 694.7844 695.6186 696.4528 697.287 698.1212 698.9553 699.78956 700.6237 701.4579 702.2921 703.1263 703.96045 704.7947 705.62885 706.463 707.29725 708.1314 708.9656 709.7998 710.634 711.46814 712.30237 713.13654 713.9707 714.80494 715.6391 716.47327 717.3075 718.14167 718.9758 719.81 720.64417 721.4784 722.3126 723.1467 723.98096 724.8151 725.64936 726.4835 727.3176 728.15186 728.9861 729.82026 730.6544 731.48865 732.3228 733.157 733.9912 734.8254 735.65955 736.4938 737.32795 738.1621 738.9963 739.8305 740.6647 741.4989 742.33307 743.16724 744.00147 744.83564 745.6698 746.50397 747.3382 748.17237 749.0066 749.8407 750.6763 751.51587 752.3596 753.20765 754.05976 754.9161 755.7766 756.6412 757.5101 758.38306 759.26026 760.1416 761.02717 761.9168 762.8107 763.70874 764.611 765.51746 766.42804 767.3428 768.2617 769.1848 770.11207 771.0435 771.9792 772.919 773.86304 774.81116 775.7635 776.72 777.6807 778.6455 779.61457 780.58777 781.56507 782.5467 783.5325 784.52234 785.5164 786.5147 787.5171 788.5237 789.5344 790.54944 791.5686 792.5918 793.6193 794.651 795.6868 796.72687 797.771 798.81934 799.87195 800.9286 801.98945 803.05445 804.1238 805.1971 806.2748 807.35645 808.44245 809.5325 810.6268 811.7252 812.8279 813.9347 815.04554 816.16077 817.2801 818.4036 819.53125 820.663 821.7992 822.93934 824.08374 825.23224 826.385 827.5418 828.70295 829.86817 831.0376 832.2112 833.389 834.5709 835.757 836.9474 838.1418 839.3405 840.5433 841.75037 842.9614 844.1768 845.39637 846.62 847.8479 849.07996 850.3161 851.5566 852.801 854.0498 855.3028 856.5598 857.8211 859.08655 860.3562 861.63 862.90796 864.19007 865.47644 866.7669 868.0615 869.36036 870.6633 871.97065 873.282 874.59754 875.91724 877.2411 878.5692 879.90155 881.23774 882.5784 883.9233 885.27216 886.62525 887.9825 889.344 890.7097 892.07947 893.4534 894.8316 896.21405 897.60047 898.9912 900.386 901.78504 903.1883 904.5956 906.0072 907.4229 908.8429 910.26697 911.6952 913.1277 914.5642 916.00495 917.45 918.8991 920.3525 921.81 923.2716 924.73737 926.2075 927.6817 929.16 930.64246 932.1292 933.6201 935.1152 936.6144 938.11774 939.62537 941.13715 942.65296 944.17316 945.6974 947.2259 948.7585 950.2954 951.83625 953.3815 954.93085 956.4843 958.04194 959.6039 961.16987 962.7401 964.31446 965.89307 967.47565 969.06257 970.6537 972.2489 973.8484 975.45197 977.05976 978.67176 980.2878 981.90815 983.5326 985.16126 986.7941 988.431 990.07227 991.7177 993.3671 995.02094 996.6787 998.3408 1000.0)) (quote (713.0 708.15357 703.3441 698.5715 693.83576 689.13697 684.47504 679.85 675.26185 670.7107 666.1962 661.7188 657.2783 652.87464 648.50794 644.1781 639.8852 635.62915 631.41004 627.2278 623.08246 618.974 614.90247 610.86786 606.8701 602.9093 598.98536 595.0982 591.2481 587.4348 583.65857 579.91907 576.2165 572.55085 568.92206 565.3302 561.77527 558.25727 554.776 551.33185 547.92444 544.55396 541.2204 537.9237 534.664 531.4411 528.2551 525.1061 521.9939 518.91864 515.88025 512.8788 509.9142 506.9865 504.0958 501.24188 498.42487 495.64478 492.9016 490.19534 487.5259 484.89346 482.29788 479.73914 477.21738 474.7325 472.28452 469.8734 467.4992 465.16183 462.86154 460.59802 458.37143 456.18167 454.0289 451.91293 449.83395 447.79187 445.78662 443.81833 441.8869 439.9924 438.1348 436.31406 434.5302 432.78333 431.07333 429.40018 427.76395 426.1646 424.6022 423.07666 421.58804 420.1363 418.72147 417.34357 416.00253 414.69843 413.43118 412.2008 411.0074 409.85083 408.7312 407.64844 406.60263 405.59366 404.6216 403.68646 402.78818 401.92688 401.10242 400.31488 399.5642 398.85046 398.17358 397.53363 396.9306 396.36438 395.83514 395.34277 394.88733 394.46875 394.0871 393.7423 393.43445 393.16348 392.9294 392.73224 392.57196 392.44858 392.36212 392.3125 392.29984 392.32404 392.3852 392.4832 392.6181 392.78992 392.99863 393.24426 393.52676 393.84613 394.20248 394.59564 395.02582 395.4928 395.9967 396.53748 397.11517 397.72974 398.3813 399.06964 399.79495 400.55713 401.35626 402.19223 403.06512 403.9749 404.9216 405.9052 406.9257 407.98303 409.07733 410.2085 411.3766 412.58154 413.82343 415.10223 416.41788 417.77045 419.15994 420.5863 422.0496 423.54974 425.08682 426.66077 428.27167 429.9194 431.60407 433.32562 435.08405 436.87943 438.71167 440.58087 442.48697 444.4298 446.4097 448.42645 450.48004 452.57065 454.6981 456.86243 459.0637 461.30182 463.57687 465.88882 468.23764 470.62335 473.04602 475.50558 478.00082 480.4936 482.9653 485.416 487.8455 490.25394 492.6414 495.00778 497.35306 499.6773 501.98044 504.2625 506.52356 508.76346 510.98242 513.18024 515.357 517.5127 519.6473 521.7608 523.8533 525.92475 527.9751 530.0044 532.0126 533.9997 535.9658 537.9109 539.83484 541.7377 543.6195 545.4802 547.31995 549.1385 550.9361 552.7126 554.46796 556.20234 557.9156 559.6078 561.27894 562.929 564.55805 566.16596 567.75287 569.31867 570.86347 572.387 573.8897 575.3712 576.8317 578.2711 579.68946 581.08674 582.4629 583.81806 585.15217 586.46515 587.757 589.028 590.2777 591.5065 592.71424 593.90076 595.0663 596.21076 597.33417 598.43647 599.51777 600.578 601.6171 602.63514 603.63215 604.6081 605.563 606.4967 607.4095 608.30115 609.17176 610.0213 610.84974 611.6571 612.4434 613.20874 613.9529 614.676 615.3781 616.05915 616.719 617.35785 617.9757 618.5723 619.148 619.70264 620.23615 620.7486 621.24 621.7103 622.1595 622.58777 622.9948 623.3809 623.7459 624.08985 624.4127 624.7144 624.9952 625.2549 625.4934 625.71094 625.9074 626.08277 626.23707 626.3703 626.48255 626.5736 626.6436 626.6926 626.7205 626.72736 626.7132 626.67786 626.6215 626.5441 626.44556 626.32605 626.1854 626.02375 625.84095 625.63715 625.4122 625.1663 624.8993 624.6112 624.302 623.97175 623.6204 623.24817 622.85474 622.4402 622.00464 621.548 621.0703 620.57154 620.0517 619.51075 618.9488 618.3658 617.7617 617.13654 616.4903 615.823 615.1346 614.4252 613.69465 612.9432 612.1705 611.3768 610.562 609.72614 608.86927 607.9913 607.0922 606.1721 605.23096 604.2687 603.2854 602.281 601.25556 600.2091 599.1415 598.05286 596.9431 595.8124 594.6605 593.4876 592.2936 591.0786 589.84247 588.58527 587.30707 586.0077 584.6874 583.3459 581.9834 580.59986 579.1951 577.7694 576.32264 574.8548 573.36585 571.8559 570.3248 568.7727 567.1995 565.6053 563.99 562.3536 560.6961 559.01764 557.3198 555.6206 553.92426 552.23066 550.53986 548.8518 547.1667 545.48426 543.8047 542.12787 540.4539 538.7828 537.1145 535.4489 533.7862 532.1262 530.46906 528.81476 527.1632 525.5146 523.8686 522.2255 520.5852 518.94776 517.313 515.68116 514.05207 512.42585 510.80237 509.1817 507.5639 505.94882 504.33658 502.72714 501.1205 499.5167 497.91568 496.3175 494.72208 493.12952 491.53967 489.95264 488.3685 486.78714 485.20856 483.6328 482.0598 480.48965 478.92236 477.35782 475.79608 474.23712 472.68103 471.12766 469.57718 468.02942 466.48456 464.94247 463.40317 461.8667 460.33298 458.8022 457.27408 455.74884 454.2264 452.70676 451.18988 449.67584 448.16464 446.6562 445.15054 443.6478 442.14774 440.65054 439.15613 437.66455 436.17578 434.68976 433.2066 431.72623 430.24866 428.77393 427.30194 425.83282 424.3665 422.90295 421.4422 419.9843 418.52918 417.0769 415.62735 414.18066 412.73676 411.29565 409.8574 408.4219 406.98923 405.5594 404.1323 402.70807 401.28665 399.86798 398.45215 397.03906 395.62888 394.22147 392.81683 391.41504 390.01602 388.61984 387.22644 385.83585 384.44806 383.0631 381.6809 380.30157 378.92505 377.55124 376.18033 374.8122 373.44687 372.08432 370.7246 369.36768 368.01358 366.66226 365.31378 363.96808 362.62518 361.28513 359.9478 358.61337 357.28174 355.95282 354.62677 353.30353 351.9831 350.66547 349.3506 348.0386 346.72937 345.42297 344.11935 342.81857 341.52057 340.22534 338.93298 337.6434 336.35663 335.07266 333.79147 332.51312 331.2376 329.96487 328.6949 327.42777 326.16342 324.90195 323.64322 322.3873 321.13422 319.8839 318.6364 317.3917 316.14984 314.91077 313.6745 312.44104 311.2104 309.98254 308.75748 307.53522 306.3158 305.09918 303.88535 302.67435 301.46613 300.2607 299.0581 297.8583 296.66132 295.46713 294.27576 293.0872 291.90143 290.71845 289.53833 288.36096 287.18643 286.01468 284.84576 283.67963 282.5163 281.35577 280.19806 279.04318 277.89105 276.74176 275.5953 274.45163 273.3117 272.17938 271.05508 269.9388 268.83054 267.73032 266.63806 265.55383 264.47766 263.40945 262.34927 261.29712 260.253 259.2169 258.1888 257.1687 256.15665 255.15259 254.15656 253.16857 252.18854 251.21652 250.25258 249.29663 248.34868 247.40879 246.47686 245.55298 244.6371 243.72925 242.8294 241.9376 241.05379 240.17798 239.31024 238.45046 237.59873 236.75502 235.91927 235.0916 234.27193 233.46028 232.65663 231.86103 231.07338 230.2938 229.52222 228.75868 228.00313 227.2556 226.51609 225.7846 225.06111 224.34568 223.63822 222.9388 222.24736 221.56398 220.8886 220.22126 219.56188 218.91056 218.26725 217.63193 217.00466 216.38539 215.77416 215.17093 214.5757 213.9885 213.40932 212.83815 212.27501 211.71988 211.17273 210.63365 210.10256 209.5795 209.06446 208.5574 208.0584 207.56739 207.08441 206.60944 206.14247 205.68354 205.2326 204.7897 204.35482 203.92797 203.50911 203.09825 202.69545 202.30063 201.91385 201.53507 201.1643 200.80158 200.44686 200.10015 199.76148 199.43079 199.10813 198.79349 198.48686 198.18825 197.89766 197.61508 197.34053 197.07399 196.81546 196.56494 196.32245 196.08797 195.86151 195.64305 195.43262 195.23023 195.03583 194.84946 194.67108 194.50074 194.33841 194.1841 194.0378 193.89954 193.76926 193.647 193.53278 193.42656 193.32836 193.23818 193.156 193.08185 193.01573 192.95761 192.9075 192.86544 192.83136 192.8053 192.78726 192.77725 192.77526 192.78127 192.79529 192.81735 192.84741 192.8855 192.93158 192.98569 193.04782 193.11797 193.19614 193.2823 193.3765 193.47872 193.58895 193.70719 193.83344 193.96772 194.11002 194.26032 194.41864 194.58499 194.75936 194.94173 195.13211 195.33054 195.53696 195.75139 195.97385 196.20432 196.44281 196.68933 196.94385 197.20639 197.47693 197.7555 198.0421 198.3367 198.63932 198.94995 199.26862 199.59528 199.92996 200.27268 200.62339 200.98212 201.34888 201.72365 202.10642 202.49723 202.89606 203.30289 203.71775 204.1406 204.57149 205.01039 205.4573 205.91223 206.37671 206.8539 207.34383 207.84654 208.36205 208.89032 209.43138 209.98519 210.55179 211.13115 211.72332 212.32823 212.94594 213.5764 214.21967 214.87566 215.54447 216.22602 216.92038 217.62749 218.34741 219.08007 219.82552 220.58371 221.3547 222.13849 222.93508 223.74436 224.56644 225.40135 226.249 227.1094 227.9826 228.86856 229.7673 230.67884 231.60312 232.54018 233.49 234.45265 235.42804 236.41622 237.41716 238.43088 239.45738 240.49665 241.54868 242.61354 243.69109 244.78147 245.88463 247.00055 248.12921 249.27069 250.42493 251.59197 252.77175 253.96433 255.16967 256.3878 257.61868 258.86234 260.11877 261.388 262.66998 263.96475 265.27228 266.59262 267.9257 269.27158 270.6302 272.00162 273.38583 274.78278 276.1925 277.61505 279.05035 280.4984 281.95923 283.43286 284.91925 286.4184 287.93036 289.45508 290.99255 292.54282 294.10584 295.6817 297.27026 298.87164 300.48578 302.11267 303.75238 305.40482 307.07007 308.7481 310.4389 312.14246 313.8588 315.5879 317.3298 319.08444 320.8519 322.6321 324.4251 326.23087 328.0494 329.8807 331.7248 333.58167 335.4513 337.3337 339.22888 341.13687 343.05762 344.99112 346.9374 348.89648 350.86835 352.8529 354.8503 356.86047 358.88342 360.91913 362.9676 365.02887 367.1029 369.18973 371.2893 373.40167 375.5268 377.66473 379.8154 381.97888 384.1551 386.34412 388.5459 390.76044 392.9878 395.22788 397.4808 399.74646 402.02484 404.3161 406.62006 408.93686 411.2664 413.6087 415.96378 418.33163 420.71228 423.10565 425.51184 427.93082 430.36255 432.80707 435.26434 437.73438 440.21722 442.7129 445.22122 447.74237 450.27637 452.823 455.3825 457.95477 460.53976 463.1376 465.7482 468.37152 471.0077 473.65656 476.31833 478.9927 481.67996 484.37997 487.09274 489.81833 492.5566 495.30777 498.0716 500.8483 503.63773 506.4399 509.25494 512.08265 514.92316 517.7765 520.6426 523.5215 526.4131 529.3175 532.2347 535.1646 538.10737 541.06287 544.0311 547.0122 550.006 553.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS 2" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 655 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 610 34) (om-make-point 19 25) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 575 11) (om-make-point 38 30) (list 3 7) "(3 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 495 11) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 559 148) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.5999984 3.1967905 4.790376 6.3807554 7.9679275 9.551893 11.132654 12.710208 14.2845545 15.855698 17.423632 18.98836 20.549881 22.108197 23.663308 25.215207 26.7639 28.309393 29.851675 31.390748 32.92662 34.459282 35.98874 37.514985 39.038033 40.557873 42.074498 43.587925 45.09814 46.605156 48.108963 49.60956 51.10695 52.60114 54.092114 55.579888 57.064457 58.54581 60.02397 61.498925 62.970658 64.43919 65.904526 67.366646 68.825554 70.28127 71.73377 73.18307 74.62916 76.07204 77.51172 78.9482 80.381455 81.811516 83.238365 84.66201 86.08245 87.49968 88.91371 90.32453 91.73213 93.13655 94.53775 95.93574 97.330536 98.722115 100.11049 101.49565 102.877625 104.25637 105.63192 107.004265 108.3734 109.739334 111.10205 112.461586 113.81788 115.17099 116.52088 117.86757 119.21106 120.55134 121.88841 123.22227 124.55294 125.880394 127.20464 128.52567 129.8435 131.15814 132.46958 133.77777 135.08278 136.38459 137.68318 138.97856 140.27075 141.55973 142.84549 144.12805 145.40743 146.68357 147.95652 149.22626 150.49277 151.7561 153.01622 154.27313 155.52684 156.77735 158.02463 159.26873 160.5096 161.74727 162.98174 164.213 165.44106 166.6659 167.88755 169.10599 170.3212 171.53324 172.74204 173.94766 175.15006 176.34926 177.54524 178.73802 179.92761 181.11399 182.29714 183.4771 184.65384 185.8274 186.99773 188.16487 189.3288 190.48952 191.64704 192.80133 193.95244 195.10034 196.24503 197.3865 198.52478 199.65985 200.7917 201.92037 203.0458 204.16806 205.28708 206.40293 207.51557 208.62497 209.73117 210.83417 211.93398 213.03055 214.12395 215.21414 216.30109 217.38489 218.46543 219.54279 220.6169 221.68787 222.7556 223.82012 224.88147 225.93958 226.99448 228.04618 229.09467 230.13997 231.18204 232.22092 233.25659 234.28905 235.31832 236.34436 237.36722 238.38683 239.40328 240.4165 241.42653 242.43334 243.43697 244.43735 245.43453 246.42852 247.4193 248.40686 249.39125 250.37239 251.35036 252.3251 253.29665 254.26497 255.2301 256.19205 257.15076 258.10626 259.05856 260.00766 260.95355 261.89624 262.83572 263.77197 264.70505 265.6349 266.56155 267.48502 268.40524 269.32227 270.2361 271.14673 272.05414 272.95834 273.85934 274.75714 275.65173 276.54312 277.43127 278.31625 279.198 280.07657 280.9519 281.82407 282.693 283.55875 284.42126 285.28058 286.1367 286.9896 287.8393 288.6858 289.52908 290.36914 291.20602 292.03967 292.87015 293.6974 294.52145 295.3423 296.1599 296.97437 297.78558 298.5936 299.3984 300.2001 301.00092 301.8017 302.6025 303.40332 304.20413 305.0049 305.80573 306.6065 307.4073 308.20813 309.0089 309.80972 310.6105 311.41132 312.21213 313.0129 313.81372 314.6145 315.41528 316.21613 317.0169 317.81772 318.6185 319.4193 320.22012 321.0209 321.82172 322.62253 323.42334 324.22412 325.0249 325.8257 326.62653 327.4273 328.22812 329.02893 329.8297 330.63052 331.4313 332.23212 333.03293 333.83368 334.6345 335.4353 336.2361 337.03693 337.8377 338.63852 339.43933 340.2401 341.04092 341.8417 342.64252 343.44333 344.24414 345.04492 345.8457 346.6465 347.44733 348.2481 349.04895 349.84973 350.6505 351.45132 352.25214 353.05292 353.8537 354.6545 355.45535 356.25613 357.05695 357.85773 358.65854 359.45935 360.26013 361.06094 361.8617 362.66254 363.46335 364.26413 365.06494 365.86572 366.6665 367.46735 368.26813 369.0689 369.86972 370.67053 371.4713 372.27213 373.0729 373.87372 374.67453 375.47534 376.27612 377.07694 377.87772 378.67853 379.47934 380.28015 381.08093 381.88174 382.68253 383.48334 384.28415 385.08493 385.88574 386.68655 387.4873 388.28815 389.08893 389.8897 390.69055 391.49136 392.29215 393.09293 393.89374 394.69458 395.49536 396.29614 397.09692 397.89774 398.69855 399.49933 400.30014 401.10095 401.90173 402.70258 403.50336 404.30414 405.10492 405.90573 406.70654 407.50735 408.30817 409.10895 409.90973 410.71057 411.51135 412.31213 413.1129 413.91373 414.71457 415.51538 416.31616 417.11697 417.9178 418.71857 419.51935 420.32016 421.1209 421.92175 422.72253 423.52338 424.32413 425.12497 425.92578 426.72653 427.52734 428.32816 429.12897 429.92975 430.73056 431.53137 432.33215 433.13293 433.93378 434.7346 435.53534 436.33618 437.13696 437.93774 438.7386 439.53937 440.34015 441.14102 441.94174 442.74255 443.54334 444.34415 445.14496 445.94574 446.74655 447.5474 448.34818 449.14893 449.94977 450.75058 451.55136 452.35217 453.15298 453.9537 454.75458 455.55536 456.35617 457.15695 457.95776 458.75855 459.55942 460.36014 461.16095 461.9618 462.7626 463.56332 464.3642 465.16498 465.9658 466.76657 467.56738 468.36816 469.1689 469.96976 470.77057 471.57138 472.37222 473.17297 473.97376 474.7746 475.57535 476.37616 477.177 477.97778 478.77853 479.5794 480.3802 481.181 481.98178 482.7826 483.58337 484.3842 485.18497 485.98578 486.78656 487.58737 488.38815 489.18897 489.9898 490.79062 491.59137 492.3922 493.193 493.9938 494.7946 495.5954 496.39618 497.19693 497.9978 498.79858 499.5994 500.40024 501.20102 502.00177 502.8026 503.60342 504.4042 505.20502 506.00583 506.8066 507.60742 508.4082 509.209 510.0098 510.8106 511.6114 512.41224 513.213 514.0138 514.8146 515.6154 516.41626 517.217 518.01777 518.8186 519.61945 520.4202 521.221 522.02186 522.82264 523.6234 524.42426 525.22504 526.0258 526.82666 527.62745 528.4283 529.229 530.02985 530.83057 531.6315 532.43226 533.23304 534.0338 534.83466 535.63544 536.4363 537.237 538.03785 538.8386 539.6394 540.44025 541.241 542.0418 542.84266 543.64344 544.4442 545.24506 546.04584 546.8466 547.6474 548.44825 549.249 550.04987 550.85065 551.6514 552.4523 553.253 554.0538 554.8547 555.65546 556.45624 557.257 558.0578 558.8586 559.6594 560.4602 561.2611 562.0618 562.8626 563.66346 564.46424 565.2651 566.06586 566.86664 567.6675 568.4682 569.26905 570.0699 570.87067 571.6714 572.4722 573.273 574.07386 574.87464 575.6754 576.47626 577.27704 578.0778 578.8786 579.67945 580.4802 581.28107 582.08185 582.8826 583.6835 584.48426 585.28504 586.0858 586.8867 587.68744 588.4883 589.28907 590.08985 590.8907 591.69147 592.49225 593.2931 594.0938 594.89466 595.69544 596.4962 597.29706 598.09784 598.8987 599.6994 600.50025 601.301 602.10187 602.90265 603.7034 604.5042 605.30506 606.10584 606.9066 607.70746 608.50824 609.3091 610.10987 610.91065 611.7114 612.51227 613.31305 614.1139 614.9147 615.71546 616.51624 617.3171 618.11786 618.91864 619.7195 620.52027 621.32105 622.1218 622.92267 623.7235 624.52424 625.3251 626.12586 626.9267 627.7275 628.52826 629.3291 630.1298 630.93067 631.7315 632.5323 633.33307 634.13385 634.9347 635.7355 636.53626 637.33704 638.1379 638.9386 639.73945 640.5403 641.34107 642.14185 642.9427 643.74347 644.54425 645.3451 646.1459 646.94666 647.7475 648.5483 649.34906 650.1499 650.9507 651.75147 652.55225 653.353 654.1539 654.95466 655.7555 656.5563 657.35706 658.1579 658.9587 659.75946 660.5603 661.3611 662.16187 662.96265 663.7635 664.5643 665.3651 666.1659 666.9667 667.76746 668.56824 669.3691 670.1699 670.97065 671.7715 672.57227 673.37305 674.1738 674.97474 675.7755 676.5763 677.3771 678.17786 678.9787 679.7795 680.58027 681.3811 682.1819 682.98267 683.7835 684.5843 685.38514 686.1859 686.9867 687.7875 688.58826 689.3891 690.18995 690.9907 691.7915 692.5923 693.39307 694.19385 694.9947 695.7955 696.5963 697.3971 698.1979 698.99866 699.7995 700.6012 701.406 702.214 703.0252 703.8396 704.6573 705.4781 706.3022 707.12946 707.95984 708.7936 709.6304 710.4706 711.3138 712.1603 713.00995 713.8629 714.71894 715.5783 716.4408 717.3065 718.1755 719.04767 719.923 720.8015 721.68335 722.56824 723.4564 724.34784 725.2424 726.1402 727.0412 727.9454 728.8528 729.7634 730.67725 731.59424 732.5145 733.438 734.3646 735.29444 736.22754 737.1638 738.1033 739.046 739.9919 740.9409 741.8932 742.84876 743.8075 744.7694 745.73456 746.7029 747.67444 748.6491 749.62714 750.6083 751.5926 752.58027 753.571 754.56495 755.56214 756.56257 757.5661 758.57294 759.583 760.5962 761.6127 762.6322 763.65516 764.68116 765.71045 766.7429 767.77857 768.81745 769.8595 770.9047 771.9533 773.005 774.05994 775.118 776.17926 777.2439 778.3116 779.38257 780.45667 781.53406 782.61457 783.69837 784.78534 785.8755 786.9688 788.0654 789.1652 790.26825 791.37446 792.4839 793.5965 794.71235 795.8313 796.9536 798.079 799.2077 800.3396 801.4746 802.6129 803.7544 804.8991 806.047 807.19806 808.3524 809.5099 810.67066 811.83454 813.0017 814.17194 815.3455 816.52234 817.7023 818.88544 820.0718 821.26136 822.45417 823.65015 824.84937 826.0517 827.2573 828.46607 829.67817 830.89344 832.1119 833.33344 834.55835 835.78626 837.01764 838.2521 839.48975 840.7307 841.97474 843.22205 844.47254 845.7262 846.9831 848.24317 849.50654 850.7731 852.04285 853.3158 854.592 855.8713 857.1539 858.4396 859.7286 861.02076 862.31617 863.61475 864.9165 866.22156 867.5298 868.8411 870.1558 871.47364 872.79474 874.1189 875.4463 876.7771 878.11084 879.448 880.7882 882.1318 883.47846 884.82825 886.18134 887.5377 888.89716 890.26 891.62586 892.995 894.36725 895.7429 897.1217 898.5037 899.88874 901.27717 902.6688 904.06354 905.46155 906.86274 908.2671 909.6747 911.0856 912.49946 913.9167 915.33735 916.76087 918.1878 919.6178 921.051 922.48755 923.9272 925.3701 926.8162 928.26545 929.718 931.17365 932.63257 934.09467 935.56006 937.02857 938.50025 939.9752 941.4535 942.9348 944.41925 945.9071 947.3981 948.8923 950.38965 951.89026 953.39405 954.90107 956.4113 957.92475 959.4414 960.96106 962.48426 964.01044 965.5399 967.0726 968.60846 970.1475 971.6898 973.2353 974.78406 976.3358 977.891 979.44935 981.0108 982.5755 984.1435 985.7146 987.28894 988.8665 990.44727 992.03125 993.61847 995.2088 996.80237 998.3991 1000.0)) (quote (201.0 203.4502 205.88388 208.30107 210.70174 213.08588 215.45352 217.80464 220.13925 222.45737 224.75894 227.04402 229.31256 231.56462 233.80016 236.01918 238.22165 240.40766 242.57714 244.73012 246.86653 248.98653 251.08994 253.17684 255.24723 257.30112 259.3385 261.35938 263.36374 265.35153 267.3229 269.27768 271.216 273.13776 275.04306 276.9318 278.80405 280.6598 282.499 284.32172 286.1279 287.91757 289.69074 291.4474 293.18756 294.91116 296.6183 298.3089 299.983 301.64053 303.28162 304.9062 306.51422 308.10574 309.68076 311.23926 312.78122 314.3067 315.81567 317.3081 318.78406 320.24347 321.68637 323.1128 324.52264 325.91602 327.29288 328.65323 329.99707 331.32437 332.63516 333.92947 335.20725 336.4685 337.71326 338.9415 340.15323 341.34842 342.52713 343.68933 344.835 345.96417 347.0768 348.17297 349.25256 350.31567 351.3623 352.39236 353.40595 354.403 355.38358 356.3476 357.29507 358.2261 359.14063 360.03857 360.92004 361.78497 362.63345 363.46533 364.28073 365.0797 365.86206 366.62793 367.37726 368.11014 368.82648 369.5263 370.20966 370.87643 371.5267 372.1605 372.77774 373.37848 373.96268 374.53043 375.08163 375.61633 376.1345 376.63617 377.12134 377.58997 378.0421 378.4777 378.89682 379.29938 379.6855 380.05505 380.4081 380.74463 381.06464 381.36816 381.65515 381.92563 382.17963 382.41708 382.63806 382.8425 383.03037 383.20178 383.3567 383.49506 383.61697 383.7223 383.8111 383.88345 383.93927 383.97858 384.00137 384.00766 383.9974 383.97067 383.9274 383.86765 383.79138 383.69858 383.58923 383.4634 383.32105 383.16223 382.98688 382.79498 382.58658 382.36166 382.12027 381.86237 381.58786 381.29694 380.9895 380.6655 380.32498 379.96796 379.59448 379.2044 378.79788 378.37482 377.93524 377.47916 377.0066 376.51746 376.01184 375.4897 374.95105 374.39584 373.8242 373.23596 372.63132 372.01007 371.37238 370.7181 370.04736 369.3601 368.65628 367.93604 367.19922 366.4459 365.6761 364.8897 364.08685 363.2675 362.4316 361.5792 360.7103 359.82486 358.92294 358.0045 357.06952 356.11807 355.15002 354.1656 353.16452 352.14697 351.11298 350.06244 348.99533 347.9118 346.8117 345.69507 344.56198 343.41232 342.24622 341.06354 339.86438 338.64868 337.41647 336.16776 334.9026 333.62085 332.32257 331.0078 329.6765 328.32874 326.96442 325.58362 324.1863 322.77243 321.3421 319.89526 318.4319 316.95197 315.45557 313.94266 312.4132 310.86725 309.3048 307.72586 306.13034 304.5184 302.88986 301.24484 299.58414 297.9269 296.28095 294.64624 293.02274 291.41055 289.80957 288.2199 286.64145 285.07425 283.51834 281.97363 280.44022 278.91806 277.4071 275.90747 274.41907 272.94193 271.47604 270.02136 268.57797 267.14587 265.72498 264.31534 262.91696 261.52985 260.154 258.78937 257.43604 256.09393 254.76308 253.4435 252.13516 250.83808 249.55226 248.27767 247.01436 245.76229 244.5215 243.29192 242.07363 240.86656 239.67079 238.48627 237.31296 236.15093 235.0002 233.86066 232.73239 231.61537 230.50962 229.41513 228.33188 227.25989 226.19916 225.14966 224.11144 223.08448 222.06874 221.06429 220.07106 219.0891 218.11841 217.15895 216.21077 215.27382 214.34815 213.43372 212.53055 211.63861 210.75795 209.88855 209.03038 208.18349 207.34783 206.52344 205.71031 204.90842 204.11779 203.33841 202.57028 201.81342 201.06781 200.33344 199.61035 198.89852 198.19792 197.50858 196.83048 196.16367 195.50809 194.86374 194.23069 193.60889 192.99834 192.399 191.81099 191.23418 190.66863 190.11435 189.57132 189.03955 188.51902 188.00975 187.51174 187.02498 186.54947 186.08522 185.63224 185.19049 184.76001 184.34078 183.93277 183.53607 183.15059 182.7764 182.41342 182.0617 181.72127 181.39208 181.07413 180.76744 180.47202 180.18784 179.9149 179.65326 179.40285 179.16367 178.93576 178.71912 178.51372 178.31957 178.13668 177.96504 177.80467 177.65555 177.51769 177.39107 177.2757 177.1716 177.07875 176.99715 176.9268 176.8677 176.81989 176.78331 176.758 176.74391 176.74109 176.74953 176.76923 176.80017 176.84238 176.89583 176.96054 177.0365 177.12372 177.2222 177.33193 177.45291 177.58515 177.72864 177.88339 178.04941 178.22666 178.41516 178.61492 178.82595 179.04822 179.28174 179.52652 179.78256 180.04985 180.3284 180.6182 180.91925 181.23157 181.55513 181.88996 182.23603 182.59336 182.96193 183.34177 183.73285 184.1352 184.5488 184.97367 185.40976 185.85712 186.31574 186.78562 187.26676 187.75913 188.26276 188.77765 189.3038 189.8412 190.38986 190.94977 191.52092 192.10334 192.697 193.30194 193.91812 194.54557 195.18425 195.83419 196.49539 197.16785 197.85155 198.54651 199.25272 199.97019 200.69892 201.4389 202.19014 202.95264 203.72638 204.51137 205.30762 206.11513 206.93389 207.76392 208.60518 209.4577 210.32147 211.19652 212.08281 212.98035 213.88915 214.80919 215.74051 216.68306 217.63687 218.60195 219.57828 220.56584 221.56468 222.57479 223.59609 224.62871 225.67259 226.72766 227.794 228.87163 229.9605 231.06064 232.172 233.29467 234.42855 235.5728 236.72183 237.87474 239.0316 240.19232 241.35692 242.52545 243.69788 244.87419 246.05438 247.2385 248.42649 249.61837 250.81417 252.01384 253.21746 254.42491 255.63628 256.85153 258.0707 259.29376 260.52072 261.75156 262.98633 264.22498 265.4675 266.71393 267.96426 269.2185 270.47662 271.73865 273.00458 274.27435 275.54807 276.82568 278.10718 279.39255 280.68185 281.97504 283.2721 284.57306 285.87793 287.1867 288.4994 289.81592 291.13638 292.4607 293.78897 295.12112 296.45715 297.7971 299.1409 300.48865 301.84024 303.19577 304.55518 305.9185 307.28568 308.6568 310.03177 311.41068 312.79346 314.18015 315.57074 316.96518 318.36356 319.7658 321.172 322.58203 323.99603 325.41385 326.8356 328.26123 329.6908 331.1242 332.56152 334.00278 335.44788 336.89688 338.3498 339.80658 341.2673 342.73187 344.2004 345.67282 347.14905 348.62927 350.1133 351.6013 353.09314 354.58893 356.0886 357.59213 359.0996 360.61096 362.12622 363.64532 365.16837 366.69528 368.22614 369.76086 371.29944 372.84198 374.3884 375.9387 377.4929 379.051 380.61298 382.17886 383.74866 385.32233 386.89993 388.48138 390.06677 391.656 393.24915 394.84622 396.44714 398.052 399.66074 401.2734 402.88992 404.5103 406.13467 407.7629 409.395 411.03104 412.67096 414.31473 415.96243 417.614 419.26953 420.9289 422.59216 424.25937 425.93045 427.60544 429.28427 430.96704 432.65375 434.34424 436.0387 437.73706 439.4393 441.14542 442.85547 444.56937 446.2872 448.0089 449.73456 451.46402 453.19742 454.93475 456.67596 458.42108 460.1701 461.923 463.67972 465.4404 467.20493 468.97348 470.74582 472.52206 474.3022 476.08633 477.87424 479.66605 481.4618 483.26147 485.06497 486.87244 488.68372 490.49896 492.31808 494.14108 495.96796 497.79877 499.63345 501.47205 503.31454 505.16092 507.01123 508.8654 510.72345 512.5854 514.4513 516.32105 518.1947 520.07227 521.95374 523.83905 525.7283 527.62146 529.51844 531.4194 533.3242 535.2329 537.1455 539.062 540.9824 542.90674 544.83497 546.767 548.703 550.6429 552.5867 554.53437 556.48597 558.4414 560.40076 562.364 564.3312 566.3022 568.27717 570.256 572.2388 574.22535 576.2159 578.2103 580.2086 582.2108 584.2169 586.227 588.24085 590.25867 592.2804 594.30597 596.33545 598.36884 600.4061 602.44727 604.4923 606.54126 608.5942 610.65094 612.71155 614.7761 616.8446 618.9169 620.99317 623.0733 625.15735 627.24524 629.33704 631.43274 633.53235 635.63587 637.7433 639.8546 641.9698 644.0815 646.1717 648.23957 650.2851 652.30835 654.3092 656.2877 658.24396 660.17786 662.0894 663.97864 665.8455 667.69007 669.5123 671.31214 673.0898 674.845 676.57776 678.2884 679.9766 681.64246 683.2861 684.9073 686.5061 688.08277 689.63697 691.1688 692.6784 694.16565 695.6305 697.0732 698.49335 699.89124 701.2668 702.62006 703.95087 705.25946 706.5457 707.80964 709.0512 710.27045 711.46735 712.64197 713.7941 714.92414 716.0316 717.1169 718.17975 719.22034 720.2386 721.2345 722.20807 723.15937 724.08826 724.9949 725.8791 726.741 727.58057 728.3978 729.1928 729.9654 730.71564 731.44355 732.14905 732.83234 733.4933 734.1319 734.74817 735.34205 735.9137 736.4629 736.9898 737.4945 737.9767 738.43665 738.8742 739.2894 739.68244 740.05304 740.40125 740.7272 741.03077 741.31214 741.57105 741.8077 742.02186 742.2138 742.38337 742.5307 742.65564 742.7582 742.8385 742.8965 742.93207 742.9453 742.9362 742.9049 742.85114 742.77515 742.6767 742.556 742.41297 742.24756 742.0599 741.8498 741.6174 741.36274 741.0857 740.78626 740.4646 740.12055 739.75415 739.3655 738.95447 738.52106 738.0653 737.5873 737.0869 736.5642 736.01917 735.4517 734.8621 734.25007 733.61567 732.959 732.27997 731.57856 730.8549 730.1088 729.3405 728.5498 727.73676 726.90137 726.0436 725.1636 724.2613 723.33655 722.3895 721.4202 720.4285 719.4145 718.3782 717.3194 716.2384 715.135 714.00934 712.86145 711.69104 710.49836 709.28327 708.046 706.7863 705.5043 704.1999 702.8733 701.52424 700.15284 698.7593 697.3432 695.9048 694.44416 692.9612 691.4558 689.9281 688.3781 686.80585 685.21106 683.5942 681.9548 680.2931 678.60914 676.9028 675.1741 673.4231 671.6497 669.8541 668.0361 666.1958 664.33307 662.4481 660.5408 658.61115 656.6591 654.6848 652.6882 650.6692 648.6278 646.5642 644.47815 642.3699 640.23926 638.0862 635.9109 633.71326 631.4933 629.251 626.9863 624.69935 622.39 620.05835 617.70435 615.328 612.9294 610.5084 608.0652 605.5995 603.1115 600.6012 598.06855 595.51355 592.9363 590.3367 587.71467 585.0704 582.4037 579.7147 577.0034 574.2698 571.51386 568.73554 565.93494 563.11194 560.26667 557.39905 554.50904 551.59675 548.6621 545.70514 542.7258 539.72425 536.7003 533.654 530.5854 527.4944 524.3811 521.2455 518.0875 514.9072 511.70462 508.47968 505.2324 501.96277 498.6708 495.35654 492.0199 488.661 485.27972 481.8761 478.45013 475.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 506 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GLISS-AMP-ADDITIVE-SINE-BPFS" (quote r-gliss-amp-additive-sine-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-range-minmax" "Y-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "min-max-freqs-lists" "MIN-MAX-FREQS-LISTS" nil) (om-load-inputfun (quote input-funbox) "freq-bpfs-1000x1000" "FREQ-BPFS-1000X1000" nil) (om-load-inputfun (quote input-funbox) "amp-bpfs-1000x1000" "AMP-BPFS-1000X1000" nil) (om-load-inputfun (quote input-funbox) "min-max-freqs-pr-bpf" "MIN-MAX-FREQS-PR-BPF" nil) (om-load-inputfun (quote input-funbox) "min-max-amp" "MIN-MAX-AMP" nil) (om-load-inputfun (quote input-funbox) "min-max-phase" "MIN-MAX-PHASE" nil) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" nil))) (om-make-point 530 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 692 372) (om-make-point 101 30) (list 9 12 10 17 9) "(9 12 10 17 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 610 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-POLY-TO-MULTISEQ" (quote r-poly-to-multiseq) (quote ((om-load-inputfun (quote input-funbox) "voices-list" "VOICES-LIST" (list 0)))) (om-make-point 94 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-POINTER" (quote r-multiseq-pointer) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "time-pointer-bpf" "TIME-POINTER-BPF" nil) (om-load-inputfun (quote input-funbox) "number-of-windows-1000" "NUMBER-OF-WINDOWS" nil))) (om-make-point 92 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 302 76) (quote "To simulate variable film loops used by Martin Arnold, we use variable sine waves combined$ with a random LFO, within a narrow time window of the original. ") "" (om-make-point 4 389) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 30) (quote "Voices") "" (om-make-point 90 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 61 474) (om-make-point 841 246) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8500) (8000) (7800) (6600) (8300) (8500) (6600) (6600) (6600) (8500) (7800) (7300) (8300) (7300) (8000) (7800) (6600) (6900) (8100) (8500) (6900) (6600))) :lonset (quote (557 897 1004 1117 1553 3457 6757 7339 8154 8800 9005 9591 9657 13443 19935 21206 22478 22605 22656 22953 23081 23625 23750)) :ldur (quote ((250) (250) (125) (125) (250) (250) (125) (125) (125) (125) (125) (125) (250) (125) (250) (125) (125) (125) (125) (500) (125) (125))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7300) (8000) (7300) (7600) (7300) (7600) (6800) (7100) (7800) (7800) (7300) (7600) (7300) (7600) (7800))) :lonset (quote (557 859 897 1004 1441 1528 1553 1860 3430 3457 8800 9005 9657 21206 22656 22953 23453)) :ldur (quote ((125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (250) (125) (125) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7300))) :lonset (quote (21992 22953 23453)) :ldur (quote ((500) (500))) :lvel (quote ((100) (100))) :loffset (quote ((0) (0))) :lchan (quote ((10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (6900) (7400) (7200) (7400) (7400) (6900) (7200) (7400))) :lonset (quote (557 945 3457 6758 9492 9657 21992 22304 22953 23953)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (500) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6300) (6600) (6800) (6300) (6600) (6800))) :lonset (quote (557 945 6758 9492 21992 22304 22953 23953)) :ldur (quote ((1000) (500) (500) (1000) (500) (500) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (5900) (6200) (6400) (5900) (6200) (6400))) :lonset (quote (557 945 6758 9492 21992 22304 22953 23953)) :ldur (quote ((1000) (500) (500) (1000) (500) (500) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx cursor-mode)) (list 0 nil (quote t) 1 0 (om-make-point 561 275) (om-make-point 655 319) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 16 8 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 210 201) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "VOICES" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 61 51) (om-make-point 130 108) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-1 1)) 1)) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (1 1)) (1 (1 -1 2)))) ((2 4) (1 (1 (2 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) (1 (1 (1 1 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) (1 (1 (1 1 1 1)))) ((2 4) ((1 (1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 2 2)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (-1 1 1 1)) (1 (-1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil (7300) nil nil nil nil nil nil nil nil nil nil (7300) nil nil nil nil nil nil nil nil (8500) nil nil nil nil nil nil nil nil nil (8500) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-4 -1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 -1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((8 (1 1 1 1 1 1 1 1)) (3 (-2 1)) (5 (-1 -2 1 -1)))) ((2 4) ((1 (-2 1 -1 2 -2)) (1 (-2 1 -1 -2 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (-1 1 2)) (1 (-1 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) ((2 (-2 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (-1 1 2)) (1 (-1 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-2 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) (1 1)) ((2 4) (1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-1 1)) 1)) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (1 1)) (1 (1 -1 2)))) ((2 4) ((2 (6 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) ((2 (1 -3)))) ((2 4) (1 (1 (1 1)))) ((2 4) ((2 (1 -3)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 1)) ((2 4) ((1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil (6100) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (2)) ((2 4) (1 (1 (1 1)))) ((2 4) (2)) ((2 4) (1 (1 (1 1)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 1)) ((2 4) (1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode player scale)) (list (quote t) 1 0 (om-make-point 253 26) (om-make-point 804 433) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 24 8 0 (quote :osc-scoreplayer) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (7 1 3 0 nil 0) (10 1 3 1 nil 0) (8 0 7 1 nil 0) (6 0 8 0 nil 0) (5 0 8 1 nil 0) (4 0 8 2 nil 0) (3 0 9 0 nil 0) (2 0 9 1 nil 0) (1 0 9 2 nil 0) (27 0 10 1 nil 0) (21 0 20 1 nil 0) (19 0 21 0 nil 0) (18 0 21 1 nil 0) (17 0 21 2 nil 0) (26 0 25 1 nil 0) (24 0 26 0 nil 0) (23 0 26 1 nil 0) (22 0 26 2 nil 0) (15 0 27 0 nil 0) (16 0 27 1 nil 0) (25 1 27 2 nil 0) (20 1 27 3 nil 0) (14 0 27 4 nil 0) (13 0 27 5 nil 0) (12 0 27 6 nil 0) (11 0 27 7 nil 0) (31 0 29 0 nil 0) (28 0 29 1 nil 0) (36 1 30 0 nil 0) (30 0 31 0 nil 0) (0 0 31 1 nil 0) (35 0 31 2 nil 0) (29 0 34 1 nil 0))) nil 6.13))
