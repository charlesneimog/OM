; OM File Header - Saved 2020/09/23 20:56:11
; (6.13 :patc (om-make-point 10 110) (om-make-point 8 23) (om-make-point 671 488) "" 183 0 nil "2020/09/23 20:55:45")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "05-export-curves" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 261 101) (quote "Converts bpf to antescofo curves. This can be connected to a score export function and inserted at various antescofo events.") "" (om-make-point 337 324) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 338 227) (om-make-point 67 30) (list 0.1 0.05) "(0.1 0.05)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 220 233) (om-make-point 68 30) (list "" "" "") "(\"\" \"\" \"\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-BPFS-TO-ANTESCOFO-CURVES" (quote r-bpfs-to-antescofo-curves) (quote ((om-load-inputfun (quote input-funbox) "list-of-bpfs" "LIST-OF-BPFS" nil) (om-load-inputfun (quote input-funbox) "list-of-curve-names" "LIST-OF-CURVE-NAMES" nil) (om-load-inputfun (quote input-funbox) "lists-of-y-ranges" "LISTS-OF-Y-RANGES" nil) (om-load-inputfun (quote input-funbox) "list-of-x-ranges" "LISTS-OF-X-RANGES" nil) (om-load-inputfun (quote input-funbox) "time-format-list" "TIME-FORMAT-LIST" nil) (om-load-inputfun (quote input-funbox) "list-of-curves-types" "LIST-OF-CURVES-TYPES" nil) (om-load-inputfun (quote input-funbox) "list-of-grains" "LIST-OF-GRAINS" nil) (om-load-inputfun (quote input-funbox) "curve-samples" "CURVE-SAMPLES" nil))) (om-make-point 167 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 449 222) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 350 171) (om-make-point 139 30) (list (list (quote cubic) (quote sine)) (list (quote linear))) "((cubic sine) (linear))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 299 101) (om-make-point 58 30) (list (list 1 7)) "((1 7))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 214 113) (om-make-point 93 30) (list (list 200 7000)) "((200 7000))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 145 160) (om-make-point 172 30) (list (quote filtercurve1) (quote filtercurve) 2) "(FilterCurve1 FilterCurve 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 143 27) (om-make-point 55 30) (list 7 19) "(7 19)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 200 23) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 66 181) (om-make-point 78 114) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 125.0 250.0 375.0 500.0 625.0 750.0 875.0 1000.0)) (quote (910.0 265.0 775.0 550.0 296.0 775.0 362.0 315.0 261.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 83.333336 166.66667 250.0 333.33334 416.66666 500.0 583.3333 666.6667 750.0 833.3333 916.6667 1000.0)) (quote (446.0 201.0 679.0 719.0 52.0 164.0 136.0 554.0 459.0 363.0 852.0 94.0 948.00007)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 125.0 250.0 375.0 500.0 625.0 750.0 875.0 1000.0)) (quote (119.99999 908.0 464.00003 633.0 928.00007 491.0 591.0 990.0 620.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 76 24) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 122 72) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 1 3 0 nil 0) (8 0 3 1 nil 0) (7 0 3 2 nil 0) (6 0 3 3 nil 0) (2 0 3 4 nil 0) (5 0 3 5 nil 0) (1 0 3 6 nil 0) (4 0 3 7 nil 0) (13 0 11 1 nil 0) (12 0 13 0 nil 0) (9 0 13 1 nil 0) (10 0 13 2 nil 0))) nil 6.13))
