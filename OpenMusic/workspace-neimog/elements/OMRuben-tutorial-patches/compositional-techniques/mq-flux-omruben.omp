; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 172 60) (om-make-point 198 25) (om-make-point 892 705) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "mq-flux-omruben" (quote ((let ((box (om-load-editor-box1 "MULTI-SEQ 5" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 771 471) (om-make-point 103 157) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7584) (7856) (8342) (8106) (8006) (8171) (8200) (8493) (8130) (8133) (8172) (8280) (8482) (8479) (8412) (8505) (8568) (7557) (8221) (8704) (9153) (9009) (8685) (8541) (8541) (8953) (8965) (8578) (9007) (8795) (8632) (8989) (8989) (8791) (8532) (8327))) :lonset (quote (521 638 687 1201 1264 1474 2679 3325 3488 4817 5262 6201 6993 7547 10625 12611 13543 14194 14323 14335 14497 15233 15839 17057 17490 18028 19458 19531 20949 21070 22269 22340 23219 23252 23346 23566 23968 24093)) :ldur (quote ((125) (250) (250) (250) (500) (250) (250) (125) (500) (125) (250) (250) (500) (500) (1000) (500) (500) (500) (125) (125) (125) (500) (250) (500) (250) (250) (250) (375) (250) (375) (250) (125) (250) (250) (500) (250) (125))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (7008) (7216) (7216) (7446) (7180) (7137) (7407) (7094) (7247) (7173) (7173) (7333) (7030) (7041) (6816) (7009) (7046) (7013) (7013) (7144) (7118) (7125) (7008) (6626) (6590) (6482) (6546) (6486) (6305) (7487) (7419) (7669) (7571) (7545) (7602) (7602) (7602) (7602) (7602) (7602) (7624) (7624) (7784) (7917) (7806) (7646) (7646) (7646) (7727) (7682) (7754) (7857) (7807) (7807) (7643) (8785) (7956) (9150) (8511) (8150) (7904) (7936) (7648) (7540) (7810) (7905) (7924) (7924) (7746) (8335) (8425) (8526) (8608) (8568))) :lonset (quote (687 1201 1400 1434 1474 1536 1587 1635 1678 1911 2035 2056 2147 2286 2679 2702 2906 3742 3789 4243 4963 5000 5262 5302 5846 5905 6201 6256 6670 6769 6825 6993 7344 8208 8329 8968 9740 9812 9849 10093 11143 11928 12040 12054 12092 12188 12227 12484 12786 13227 13254 13696 14194 14335 15020 15089 15568 15839 16394 17295 18399 19458 19531 20097 20218 22183 22269 22340 22449 23000 23154 23219 23420 23566 23968 24468)) :ldur (quote ((750) (125) (250) (250) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (250) (125) (125) (125) (125) (250) (125) (250) (125) (125) (125) (125) (500) (125) (125) (125) (125) (125) (125) (125) (125) (250) (250) (125) (375) (250) (125) (125) (125) (250) (125) (125) (125) (500) (250) (125) (125) (125) (250) (250) (125) (125) (125) (125) (250) (125) (125) (125) (500) (250) (125) (125) (125) (125) (250) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900) (5900) (5929) (6217) (6328) (6328) (5936))) :lonset (quote (687 6201 6993 7813 14194 15839 23566 23816)) :ldur (quote ((750) (250) (500) (1000) (500) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7160) (7034) (7187) (7186) (7257) (6949) (6977) (7003) (6783) (6805) (6931) (7005) (6874) (6929) (6875) (6875) (6672) (6693) (6777) (6731) (7608) (6729) (6601) (6619) (6721) (6772))) :lonset (quote (1264 1474 2679 3488 4297 5262 6993 7403 7547 7813 9369 10625 12306 12532 12611 14194 14902 15070 15233 17057 19458 20783 20949 21097 23219 23252 23346 23846)) :ldur (quote ((500) (500) (500) (500) (500) (500) (1000) (500) (500) (500) (500) (500) (500) (500) (500) (1000) (500) (500) (500) (500) (500) (1000) (500) (500) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6519) (6332) (6675) (6246) (6246) (6324) (6566) (6646) (6608) (6940) (7071) (7029) (7029) (6929) (6718) (7559) (7837) (7820) (7743))) :lonset (quote (1264 1474 2679 3488 6201 6993 7403 7547 7813 10625 12306 12611 14194 14902 15233 17057 20783 21097 23219 23346 24219)) :ldur (quote ((500) (250) (250) (500) (500) (1000) (500) (500) (500) (1000) (500) (500) (1000) (1000) (500) (500) (500) (500) (1000) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (5795) (6112) (6112) (6250) (6164) (6164) (6104) (5939) (5082) (5067))) :lonset (quote (1264 6993 7403 7813 12306 14194 14902 15233 20783 21097 23219 24219)) :ldur (quote ((500) (1000) (500) (500) (500) (1000) (1000) (500) (1000) (500) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 836 540) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 4" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 771 324) (om-make-point 98 141) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8800) (9159) (9165) (9075) (9139) (9654) (9312) (8726) (8726) (8978) (8963) (8882) (9122) (9122) (9122) (8976) (9023) (8855) (8983) (8862) (8897) (8918) (8889) (8974) (8875) (8886) (8895) (8895) (8865) (8890) (9010) (9010) (9028) (8734) (8815) (8879) (9123) (8939) (9127) (8866) (8937) (9126) (9178) (8880) (9008) (8982) (8976))) :lonset (quote (1046 1131 1333 1539 1987 2117 2431 3344 3508 3618 4179 4417 4561 5610 5641 6067 6132 7300 7578 7585 7730 8400 8549 8690 9637 9903 10071 10556 10576 12219 12499 13147 13198 13456 14421 15137 16184 16654 17095 17432 17446 17840 17873 19552 20817 21230 21490 21990)) :ldur (quote ((250) (125) (250) (250) (1000) (125) (500) (125) (250) (250) (250) (125) (250) (125) (250) (500) (250) (250) (125) (250) (500) (250) (125) (250) (500) (250) (375) (250) (125) (125) (250) (500) (250) (500) (250) (500) (250) (250) (250) (500) (500) (250) (250) (250) (250) (125) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7062) (7020) (6954) (7149) (6872) (7153) (7343) (7125) (6936) (6589) (6886) (7446) (6957) (7263) (7103) (7070) (7045) (7139) (6878) (6960) (7028) (7074) (7030) (7211) (7137) (7053) (7193) (7020) (7020) (7174) (7025) (7195) (7006) (7029) (7084) (7136) (7018) (7127) (7044) (7044) (7018) (7056) (7103) (7071) (7078) (7080) (7052) (7111) (7021) (7054) (7065) (7001) (7137) (7190) (7130) (7289) (7009) (7319) (6889) (7350) (7280) (7100) (6767) (6955) (7105) (6956) (7323) (7323) (6991) (6899) (7092) (6971) (6889) (6955) (7052) (7029) (7029) (7044) (7031))) :lonset (quote (609 956 1046 1255 1333 1539 1730 2117 2161 2563 2700 2792 2907 3369 3618 3992 4179 4417 5061 5268 5480 5985 6132 6672 6825 6842 7049 7065 7178 7300 7372 7585 7767 8400 8549 8690 8766 9637 9747 9903 9979 10071 10286 10802 11611 11761 12499 12559 13198 13279 13428 13525 13690 13730 14421 15251 15487 15791 16184 16475 16654 17095 17168 17399 17493 17525 17648 17840 17873 18618 19152 19552 19672 19912 20279 20817 21230 21711 23714 23753 23878)) :ldur (quote ((125) (125) (125) (125) (125) (750) (125) (250) (125) (125) (250) (125) (125) (375) (125) (125) (250) (500) (125) (125) (125) (125) (125) (250) (125) (125) (125) (125) (125) (125) (250) (125) (250) (125) (250) (125) (250) (500) (125) (500) (125) (125) (250) (125) (125) (125) (250) (250) (125) (125) (125) (125) (250) (250) (125) (125) (125) (250) (125) (125) (125) (125) (125) (125) (250) (125) (125) (125) (125) (125) (125) (125) (125) (250) (125) (750) (500) (125) (125) (125))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900) (5900) (6298) (6329) (6315) (6281) (6281))) :lonset (quote (1539 4179 9637 9903 12499 20817 21426 22426)) :ldur (quote ((750) (250) (500) (500) (250) (750) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7157) (7247) (7204) (7058) (6995) (6902) (6925) (7053) (6941) (6941) (6984) (7002) (6986) (6987) (7017) (7017) (6995) (6995) (6884) (6884) (6947) (6887) (6887))) :lonset (quote (1333 1987 2431 5600 6067 6132 7300 7730 8690 9637 13147 13198 13456 14421 15137 16802 17095 17432 17446 17840 18359 19720 20049 21426 21926)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (500) (500) (1000) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6457) (6554) (6554) (6079) (6214) (6278) (6347) (6197) (6223) (6304) (6216) (6216) (6227) (6224) (6279) (6239) (6298) (6045) (6233) (6135) (6241) (6211))) :lonset (quote (1333 1987 2431 3618 4179 5600 6067 6132 7730 8400 8690 9637 13147 14421 15137 16802 17432 17446 19552 19720 20049 20817 21426 21926)) :ldur (quote ((250) (1000) (500) (250) (500) (500) (500) (250) (500) (250) (250) (1000) (1000) (250) (500) (1000) (500) (500) (250) (500) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6162) (6162) (6267) (6211) (6211) (6131) (6131))) :lonset (quote (5600 9637 13147 15137 16802 19720 20049 21426 21926)) :ldur (quote ((500) (1000) (1000) (500) (1000) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 836 540) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 3" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 773 162) (om-make-point 99 152) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8000) (8006) (8067) (8111) (7946) (7767) (7701) (6839) (6839) (7044) (7319) (7064) (7064) (7131) (5484) (6134) (6004) (6154) (6062) (6224) (6217) (6489) (6255) (5651) (5647) (5497) (5497) (4923) (5368) (5086) (5052) (5885) (5846) (5343) (5521) (5834) (5682) (5144) (6337) (6709) (6474) (6822) (6803) (7165) (7059))) :lonset (quote (1590 1672 2343 2478 2558 2856 3805 3946 3996 4039 4152 4385 4759 4953 5072 5671 5783 5824 6369 6840 7128 7489 7518 8629 9126 9361 10039 11051 11138 11314 12480 13177 13547 13775 14294 14526 15763 18281 19691 20632 22186 22542 22612 23261 23723 23973)) :ldur (quote ((375) (250) (1000) (250) (1000) (500) (125) (125) (125) (125) (250) (375) (250) (500) (250) (500) (500) (250) (250) (250) (500) (500) (125) (125) (250) (1000) (250) (500) (125) (250) (250) (250) (125) (500) (250) (500) (1000) (125) (250) (500) (250) (250) (125) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6596) (6596) (6883) (6704) (6998) (6775) (6603) (6546) (6725) (6840) (7056) (6301) (6565) (6478) (6606) (6606) (6606) (6854) (6716) (6710) (6747) (6386) (6386) (6123) (6126) (5427) (6433) (6245) (6266) (6262) (6292) (6170) (6090) (5991) (6938) (6477) (6052) (6899) (6816) (6750) (6819) (6848) (6707) (6569) (6743) (6355) (6943) (6943) (6977) (6935) (6582) (6613) (6508) (6398) (6616) (6616) (6690) (6518) (6638) (6924) (6924) (6924) (7005) (6802) (7292) (7710) (7582) (7651) (7651) (7739) (7882) (7975) (7957))) :lonset (quote (480 600 714 1057 1446 1590 1672 2001 2085 2291 2360 2478 2702 2841 3302 3344 3356 3483 3805 4039 4152 4953 5386 5425 5751 5807 5824 5939 6015 6055 6710 6788 6840 7128 7422 8629 9045 9126 9516 9630 10039 10367 10660 10790 11114 11138 11314 11399 11702 11757 12291 12480 12565 13224 13564 13986 14158 14294 14391 14943 15551 15916 17946 18200 19691 20056 20280 20292 20336 20367 20459 21716 22186 23723 23848)) :ldur (quote ((125) (125) (125) (125) (125) (125) (750) (250) (125) (250) (125) (125) (250) (125) (250) (125) (125) (125) (250) (500) (750) (500) (250) (250) (125) (250) (125) (125) (125) (125) (125) (125) (125) (500) (250) (250) (125) (125) (250) (250) (250) (125) (125) (375) (125) (500) (125) (125) (125) (250) (125) (125) (125) (125) (125) (250) (125) (125) (125) (375) (125) (125) (125) (125) (125) (125) (125) (125) (125) (250) (250) (125) (125) (125))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7104) (7479) (7479))) :lonset (quote (1672 4953 7128 10039 10289)) :ldur (quote ((750) (500) (500) (250))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6228) (6228) (6043) (6064) (6064) (6017) (6017) (6154) (5692) (6012) (6027) (5965) (5892) (5829) (5842) (5842) (5800) (5800) (5768) (5946) (5914) (5652) (5332) (5411) (5706))) :lonset (quote (1630 2343 2558 2856 4152 4953 5671 5783 6369 6840 7128 7489 9126 9361 11051 11090 11314 13041 13775 14294 14526 15016 15763 20632 20957 23261 23761)) :ldur (quote ((1000) (500) (500) (500) (500) (1000) (500) (500) (500) (500) (1000) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (5722) (5750) (5750) (5440) (5627) (5567) (5746) (5914) (5904) (5769) (5266) (5225) (4833) (4786) (4786) (4911) (5201) (5154) (5275) (5397))) :lonset (quote (1630 1672 2343 2558 2856 4953 5671 5783 5824 6840 7128 7489 9361 11051 13041 13775 14294 14526 15016 15763 20632 21132)) :ldur (quote ((500) (500) (2000) (2000) (500) (1000) (500) (500) (250) (250) (1000) (500) (1500) (1000) (500) (500) (250) (500) (500) (1000) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5200) (5228) (5228) (5168) (5760) (5156) (5281) (5281) (5281))) :lonset (quote (1630 2343 2558 4953 7128 11051 13041 13775 15016 15516)) :ldur (quote ((1000) (2000) (2000) (1000) (1000) (1000) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 836 540) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 764 25) (om-make-point 95 134) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (8357) (8111) (7858) (7438) (7742) (7731) (7666) (7865) (8002) (8002) (7977) (7597) (7473) (7754) (7785) (7912) (7152) (7392) (7509) (7916) (7074) (6991) (6991) (6902) (7145) (7145) (7317) (7253) (7438) (7681) (7813) (7633) (8377) (7726) (8727) (8427) (8427) (8495) (7815) (6740) (6886) (7290) (7114) (7274) (7066))) :lonset (quote (921 1591 1910 2000 2914 4351 4661 4793 4827 5282 5304 5479 6472 6755 6881 7002 8620 8702 9363 9430 9624 9903 10030 10158 10182 10272 10732 11292 12139 12375 12907 13039 13331 13847 14501 15786 16407 17281 17366 18141 18451 18830 19849 20047 21091 23013 23513)) :ldur (quote ((1000) (1000) (500) (250) (250) (500) (500) (250) (250) (250) (250) (250) (500) (375) (125) (125) (250) (125) (250) (500) (250) (500) (1000) (500) (250) (500) (250) (500) (250) (250) (125) (125) (500) (500) (250) (250) (375) (250) (250) (250) (250) (250) (250) (250) (250) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6507) (6827) (7004) (6877) (6945) (6945) (7040) (7270) (7233) (7149) (7121) (6873) (7269) (7362) (7164) (7164) (7080) (7100) (7290) (6783) (6685) (6737) (6783) (6833) (6844) (6802) (6529) (6664) (6823) (6823) (6930) (7236) (6486) (5884) (6740) (6050) (7209) (6674) (6382) (6941) (6345) (6876) (6808) (6808) (6952) (6668) (6646) (6700) (6621) (6541) (6541) (6275) (6437) (6579) (6719) (6902) (6978) (5974) (5817) (6280) (6423) (6071) (6071) (6155) (6155) (6603) (6891) (6466) (6366) (6366) (6252) (6166) (6062) (6087) (6218) (6016) (5903))) :lonset (quote (601 1033 1072 1575 1616 1651 1807 2000 2166 2324 2478 2894 2914 2942 3440 3459 3732 3996 4793 4827 4898 5282 5304 5479 5880 6047 6096 6202 6349 6374 7201 7417 7574 8004 8226 8702 9363 9624 10182 10676 10732 10867 12139 12375 12635 13452 13819 13950 13973 14069 14074 14501 14702 14771 14883 15643 15786 16407 16636 16651 17119 17366 17764 17789 18215 18350 18451 18830 19827 19849 20047 20265 21250 22161 22339 22596 23013 23413 23538)) :ldur (quote ((375) (125) (125) (125) (250) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (250) (125) (125) (125) (125) (125) (125) (125) (750) (125) (125) (250) (125) (125) (125) (125) (125) (125) (125) (250) (500) (250) (125) (125) (125) (125) (250) (125) (125) (125) (250) (125) (125) (125) (125) (125) (125) (125) (125) (125) (250) (125) (125) (250) (125) (125) (500) (125) (250) (250) (125) (125) (250) (125) (750) (125) (125) (250) (125) (125) (125) (500) (125))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6043) (6153) (6153) (6196) (6196))) :lonset (quote (5479 9363 12962 17366 18830 23013 23513)) :ldur (quote ((750) (250) (1000) (500) (250) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7505) (7407) (7709) (7720) (7424) (7424) (7437) (7437) (7488) (7361) (7801) (8284) (7901) (7826) (7826) (7814) (7698) (7927) (7993) (7944) (8195) (8095) (8149) (8117) (8056) (7900) (7528))) :lonset (quote (921 1591 1910 2000 4201 4351 4661 4793 5304 6472 8782 9223 9624 9903 10030 10158 10182 10272 11292 11666 12962 13847 15786 19849 20047 21091 22947 23013 24013)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (1000) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (6893) (6835) (7212) (7150) (7132) (7126) (7126) (7099) (6829) (6932) (6849) (7322) (7280) (7280) (7291) (7356) (7356) (7106) (7234) (7079) (6898) (6983) (6783))) :lonset (quote (921 1591 1910 2000 4351 4661 5304 5479 6472 8782 9223 9363 9903 10030 10158 10182 10272 10732 12962 13847 14501 20047 22947 23013 24013)) :ldur (quote ((1500) (2000) (500) (250) (500) (500) (1000) (500) (500) (500) (500) (500) (500) (1000) (500) (250) (500) (250) (500) (500) (250) (250) (500) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6424) (6506) (6736) (7337) (7251) (7251) (7457))) :lonset (quote (1591 5304 8782 9223 12962 13847 22947 23013 24013)) :ldur (quote ((2000) (1000) (500) (1000) (500) (500) (500) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 836 540) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 295 439) (om-make-point 91 30) (list 9 12 10 17 9) "(9 12 10 17 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 211 476) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 356 235) (quote "Traditional MODUS QUATERNION offers 4 variations$of a material with their transpositions: $Original, retrograde, inversion, retrograde inversion.$$This patch takes this transformation of time and pitch$as a starting point, adding transformation curves on$both dimensions. This is not just \"quaternion\", but a $source of endless transformations of a limited material.$$Results can vary between slightly recognizable and$completely distorted.$$A few examples are inserted, and new versions can $be found evaluating the multiseq below.") "" (om-make-point 405 241) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-POLY-TO-MULTISEQ" (quote r-poly-to-multiseq) (quote ((om-load-inputfun (quote input-funbox) "voices-list" "VOICES-LIST" (list 0)))) (om-make-point 5 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 36 544) (om-make-point 586 172) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7419) (7419) (6850) (7151) (7720) (7720) (7753) (7745) (7939) (8217) (7695) (8291) (7419) (8232) (8369) (7937) (8081) (8244) (7616) (7811) (7811) (7913) (7801) (8712) (7717) (7290) (9017) (7678) (7940) (7768) (7339) (7682) (7768) (7257) (8756) (7952) (8334) (7969) (8686) (7602) (7452) (8953) (8727) (7849) (8158) (8222) (8301) (7886))) :lonset (quote (603 1095 1265 1316 1340 1387 2140 2217 2606 2915 3053 3492 3731 3753 4657 5669 6258 6767 7294 7386 8469 8516 8677 9227 10927 10957 11438 11738 11804 12168 12198 13845 14782 15926 16241 16709 17233 17421 18687 19005 20243 20497 22755 22818 22850 23187 23239 23410 23886 24239)) :ldur (quote ((500) (250) (250) (125) (125) (500) (250) (250) (125) (125) (500) (500) (250) (250) (1000) (250) (250) (250) (250) (125) (250) (500) (500) (500) (125) (250) (250) (125) (125) (250) (500) (1000) (500) (250) (250) (250) (125) (125) (250) (250) (250) (250) (125) (125) (250) (500) (1000) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6604) (6618) (6716) (6815) (6815) (6815) (6910) (6442) (6912) (6706) (6480) (6474) (6256) (6564) (6444) (6951) (6383) (6728) (7340) (6999) (6201) (6772) (7011) (6605) (6850) (6850) (7001) (7174) (6767) (6522) (6751) (6572) (6572) (6539) (6284) (6622) (7202) (6511) (7279) (7279) (6643) (6464) (7081) (7081) (6908) (5877) (6048) (6220) (6478) (6049) (6475) (6896) (6482) (6806) (6806) (6881) (7323) (6312) (6527) (6527) (6088) (6539) (6539) (6146) (6891) (6558) (6389) (6303) (6444) (6409) (6391) (6541) (6406))) :lonset (quote (720 772 846 993 1095 1236 1265 1387 1505 2217 2255 2304 2436 2606 2840 2915 3053 3434 3487 3582 3731 3753 4676 4835 5012 5669 6598 6767 7294 7552 7735 7798 7875 7933 8260 8346 8469 8475 8631 8886 8906 9231 9260 10567 10597 10666 10957 11438 11804 11898 12168 12317 12360 12668 13309 13545 14281 14405 15053 15199 15664 16241 17233 18313 18687 18980 19651 20243 20497 21000 22850 23204 23410 23886 24011)) :ldur (quote ((125) (125) (125) (125) (125) (125) (125) (500) (125) (125) (125) (125) (125) (125) (125) (125) (500) (125) (125) (125) (250) (500) (125) (125) (125) (500) (125) (125) (250) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (250) (125) (125) (500) (125) (125) (125))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7275) (7275) (6547) (6547) (7609) (6454) (6612))) :lonset (quote (1387 3053 3731 3753 5417 5669 7294 22850 23350)) :ldur (quote ((500) (500) (250) (500) (500) (500) (250) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6910) (6910) (6819) (6994) (6919) (7009) (7480) (6520) (6884) (6847) (6719) (7107) (7044) (6914) (6843) (7023) (6846) (6932) (6675) (7017) (7182) (7182) (6895) (6895) (6974) (7299) (7109) (7069))) :lonset (quote (603 1095 1387 1913 2140 2217 2323 3053 3492 4657 5417 6330 7631 8516 8677 9227 10091 11438 12198 13845 14782 16241 19347 20243 20497 23187 23239 23660 23886 24660)) :ldur (quote ((250) (500) (1000) (500) (500) (500) (250) (1000) (250) (250) (500) (1000) (500) (250) (250) (500) (500) (500) (250) (500) (500) (500) (500) (500) (500) (250) (250) (1000) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6213) (6144) (5669) (6005) (6005) (6567) (6396) (6737) (6749) (6749) (6869) (6776) (6947) (6947) (6775) (6603) (6941) (6941) (6797) (7092) (7324) (6941) (6927))) :lonset (quote (603 1387 1913 3053 3492 3753 4657 5417 6330 6767 8469 8677 9227 10091 12168 12198 13845 14782 18687 20497 23187 23239 23660 23886 24739)) :ldur (quote ((500) (1000) (500) (1000) (500) (500) (1000) (500) (500) (250) (250) (500) (1000) (500) (250) (500) (500) (500) (250) (1000) (500) (1500) (500) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6396) (5936) (5460) (5888) (6475) (6617) (6271) (6608) (6464) (6464))) :lonset (quote (1387 1913 3053 5417 6330 9227 10091 13845 14782 20497 23660 24660)) :ldur (quote ((1000) (500) (1000) (500) (1000) (1000) (500) (2000) (500) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 836 540) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 524 90) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 469 12) (om-make-point 48 30) (list 1 3) "(1 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FLOAT-RANDOM" (quote r-float-random) (quote ((om-load-inputfun (quote input-funbox) "MINMAX-LIST" "MINMAX-LIST" nil))) (om-make-point 426 51) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SAWTOOTH-BPFS" (quote r-random-sawtooth-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 8)) (om-load-inputfun (quote input-funbox) "divide-in-n-circles" "DIVIDE-IN-N-CIRCLES" 3) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 2))) (om-make-point 352 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 210 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 258 158) (om-make-point 57 77) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.924394 3.8186958 5.682907 7.517027 9.321054 11.094991 12.838837 14.552591 16.236254 17.889824 19.513304 21.106694 22.66999 24.203198 25.70631 27.179335 28.622265 30.035103 31.417855 32.770508 34.09307 35.385548 36.64793 37.88022 39.08242 40.254528 41.396546 42.50847 43.5903 44.642044 45.663697 46.655255 47.62574 48.59546 49.56518 50.534897 51.504616 52.47434 53.444058 54.413777 55.383496 56.35322 57.32293 58.292653 59.262375 60.232094 61.201817 62.171524 63.14125 64.11096 65.08069 66.05041 67.02013 67.989846 68.959565 69.92928 70.899 71.86872 72.83844 73.80816 74.77788 75.7476 76.717316 77.68704 78.65675 79.62648 80.59621 81.565926 82.535645 83.50538 84.4751 85.44482 86.414536 87.38426 88.35399 89.32371 90.293434 91.263146 92.23289 93.2026 94.172325 95.142044 96.11176 97.0815 98.051216 99.020935 99.990654 100.96038 101.9301 102.899826 103.86955 104.83928 105.80899 106.77872 107.74844 108.71816 109.68789 110.6576 111.627335 112.597046 113.56677 114.53649 115.50623 116.47595 117.44568 118.4154 119.385125 120.354836 121.32457 122.29428 123.264 124.233734 125.20346 126.17317 127.14289 128.11261 129.08234 130.05207 131.02179 131.99152 132.96125 133.93096 134.90068 135.8704 136.84012 137.80985 138.77957 139.7493 140.71903 141.68874 142.65847 143.62818 144.5979 145.56763 146.53734 147.50708 148.47678 149.44652 150.41625 151.38596 152.3557 153.32541 154.29514 155.26485 156.23458 157.2043 158.17401 159.14376 160.11347 161.08319 162.05292 163.02265 163.99237 164.96208 165.93181 166.90154 167.87125 168.84098 169.8107 170.78043 171.75016 172.71987 173.68959 174.65932 175.62903 176.59876 177.56848 178.5382 179.50794 180.47765 181.44736 182.4171 183.38681 184.35654 185.32627 186.29599 187.2657 188.23542 189.20516 190.1749 191.14459 192.11434 193.08405 194.05377 195.02349 195.99321 196.96294 197.93265 198.90239 199.8721 200.84183 201.81156 202.78128 203.75099 204.72072 205.69046 206.66017 207.6299 208.59961 209.56932 210.53907 211.50879 212.47852 213.44823 214.41796 215.38767 216.35739 217.32712 218.29685 219.26656 220.23627 221.20603 222.17575 223.14545 224.11516 225.08492 226.05464 227.02436 227.99408 228.96378 229.9335 230.90325 231.87296 232.84267 233.81243 234.78215 235.75185 236.72156 237.69132 238.66104 239.63074 240.60045 241.57018 242.5399 243.50963 244.47936 245.44907 246.41883 247.38855 248.35825 249.32796 250.29769 251.26741 252.23714 253.20688 254.17658 255.14633 256.11603 257.08575 258.05548 259.0252 259.99493 260.96463 261.9344 262.9041 263.8738 264.84354 265.81326 266.78296 267.7527 268.72238 269.6921 270.66183 271.6315 272.6012 273.57092 274.54065 275.51035 276.48004 277.44977 278.41946 279.3892 280.3589 281.32858 282.2983 283.268 284.2377 285.2074 286.17712 287.14685 288.11655 289.08624 290.05597 291.02567 291.9954 292.9651 293.93478 294.9045 295.8742 296.8439 297.81363 298.78333 299.75305 300.72275 301.69247 302.66217 303.6319 304.60156 305.57132 306.541 307.5107 308.4804 309.4501 310.41983 311.38953 312.35925 313.32898 314.29865 315.26837 316.23807 317.2078 318.1775 319.14722 320.1169 321.0866 322.05634 323.02603 323.99573 324.96545 325.93515 326.90485 327.87457 328.84427 329.81397 330.7837 331.7534 332.7231 333.69284 334.66254 335.63226 336.60193 337.5717 338.54135 339.51108 340.48074 341.45047 342.4202 343.3899 344.35962 345.32928 346.29904 347.26874 348.23843 349.20813 350.17786 351.14758 352.11728 353.08698 354.0567 355.0264 355.9961 356.96582 357.93552 358.9052 359.8749 360.84464 361.81436 362.78406 363.75375 364.72345 365.6932 366.6629 367.6326 368.6023 369.57202 370.54175 371.51144 372.4811 373.4508 374.42056 375.39026 376.35996 377.32968 378.29938 379.26904 380.2388 381.20847 382.17822 383.14792 384.1176 385.08734 386.05704 387.02673 387.99646 388.96616 389.93585 390.90558 391.87527 392.845 393.81467 394.78442 395.75412 396.72382 397.69354 398.66324 399.63297 400.60266 401.57236 402.54208 403.51175 404.48145 405.45117 406.4209 407.3906 408.3603 409.33002 410.2997 411.26947 412.23914 413.20886 414.1786 415.14825 416.11798 417.08768 418.0574 419.0271 419.99683 420.96652 421.93622 422.90595 423.87564 424.84537 425.81503 426.78476 427.7545 428.72418 429.6939 430.66357 431.63333 432.60303 433.57272 434.54245 435.51212 436.48184 437.4516 438.42126 439.391 440.36072 441.33038 442.3001 443.26984 444.2395 445.20923 446.17896 447.14868 448.11838 449.08807 450.05777 451.0275 451.9972 452.9669 453.9366 454.90634 455.876 456.84573 457.81546 458.78513 459.75485 460.72452 461.69424 462.66397 463.63364 464.60342 465.57315 466.54282 467.51254 468.4822 469.45194 470.42166 471.3914 472.3611 473.33078 474.3005 475.2702 476.2399 477.20963 478.1793 479.14902 480.1187 481.08844 482.05814 483.02783 483.99753 484.96722 485.93695 486.90668 487.87634 488.84607 489.8158 490.78552 491.7552 492.7249 493.6947 494.6643 495.63403 496.6037 497.5735 498.5432 499.51282 500.4826 501.45233 502.422 503.39172 504.3614 505.33112 506.30084 507.27057 508.24023 509.2099 510.17963 511.14935 512.1191 513.08875 514.0585 515.0282 515.99787 516.9676 517.9373 518.90705 519.8768 520.8464 521.81617 522.7858 523.75556 524.7253 525.695 526.6647 527.6344 528.6041 529.5738 530.5435 531.51325 532.4829 533.45264 534.42237 535.392 536.36176 537.3314 538.3012 539.2709 540.2406 541.2103 542.18006 543.1497 544.11945 545.0891 546.05884 547.0286 547.9983 548.96796 549.93775 550.9074 551.87714 552.84687 553.8165 554.78626 555.756 556.72565 557.69544 558.6651 559.6348 560.6045 561.5742 562.54395 563.5136 564.4833 565.45307 566.4227 567.39246 568.3622 569.3319 570.30164 571.2713 572.241 573.2107 574.1804 575.15015 576.1199 577.08954 578.05927 579.02894 579.99866 580.9684 581.9381 582.90784 583.8775 584.8472 585.8169 586.7866 587.7563 588.726 589.69574 590.66547 591.6352 592.60486 593.5746 594.5443 595.514 596.4837 597.4534 598.42316 599.3928 600.36255 601.3322 602.30195 603.27167 604.2414 605.21106 606.1808 607.1505 608.12024 609.0899 610.05964 611.0293 611.999 612.9687 613.9385 614.90815 615.8778 616.8476 617.81727 618.78705 619.7567 620.72644 621.6961 622.6658 623.63556 624.6052 625.57496 626.5447 627.5144 628.4841 629.4538 630.42347 631.3932 632.3629 633.33265 634.30237 635.27204 636.2417 637.2114 638.18116 639.1509 640.1206 641.0902 642.06 643.0297 643.9994 644.9691 645.9388 646.9085 647.87824 648.84797 649.8177 650.78736 651.7571 652.7268 653.6965 654.66614 655.63587 656.6056 657.5753 658.545 659.5148 660.48444 661.45417 662.4238 663.39356 664.3633 665.33295 666.3027 667.2724 668.24207 669.2118 670.1815 671.15125 672.1209 673.09064 674.0603 675.03 675.9998 676.9694 677.93915 678.9089 679.8786 680.8483 681.818 682.78766 683.75745 684.7272 685.69684 686.6665 687.6363 688.6059 689.5757 690.54535 691.5151 692.4848 693.4545 694.4242 695.3939 696.36365 697.3333 698.30304 699.27277 700.24244 701.21216 702.1819 703.15155 704.1213 705.091 706.06067 707.0304 708.0001 708.9698 709.9395 710.9093 711.87897 712.8487 713.8184 714.7881 715.7578 716.72754 717.6972 718.6669 719.6366 720.6064 721.57605 722.5457 723.51545 724.48517 725.45484 726.42457 727.3943 728.36396 729.33374 730.3034 731.27314 732.2428 733.2125 734.18226 735.152 736.1217 737.0914 738.0611 739.03077 740.0005 740.97016 741.93995 742.9096 743.87934 744.84906 745.8187 746.78846 747.7582 748.7278 749.6976 750.66736 751.63697 752.6067 753.5764 754.5461 755.5158 756.4855 757.4552 758.4249 759.39466 760.3644 761.3341 762.3038 763.27344 764.24317 765.2129 766.18256 767.1523 768.122 769.09174 770.06147 771.0311 772.00086 772.9706 773.94025 774.91 775.87964 776.84937 777.8191 778.78876 779.75855 780.7283 781.69794 782.66767 783.6374 784.60706 785.5768 786.5464 787.5161 788.48584 789.45557 790.4253 791.39496 792.36475 793.3344 794.3041 795.2738 796.2435 797.21326 798.1829 799.15265 800.1224 801.09205 802.0617 803.03144 804.0012 804.97095 805.94056 806.9103 807.88 808.84974 809.8194 810.78907 811.75885 812.7286 813.6982 814.66797 815.6377 816.6073 817.577 818.54676 819.5165 820.4862 821.45594 822.42566 823.3954 824.36506 825.3347 826.30445 827.2742 828.2439 829.21357 830.18335 831.153 832.12275 833.09247 834.06214 835.0319 836.0016 836.97126 837.941 838.91065 839.8804 840.85016 841.8198 842.7896 843.7593 844.72895 845.69867 846.6684 847.63807 848.6078 849.5775 850.54725 851.5169 852.4866 853.45636 854.4261 855.3957 856.3654 857.33515 858.3049 859.27454 860.24427 861.2139 862.1837 863.1534 864.1231 865.09284 866.06257 867.0322 868.00196 868.9716 869.94135 870.9111 871.8808 872.85047 873.8202 874.7899 875.7595 876.7293 877.699 878.6687 879.6384 880.60816 881.5779 882.54755 883.5172 884.48694 885.45667 886.42634 887.3961 888.36585 889.33545 890.3052 891.2749 892.2446 893.21436 894.18396 895.1537 896.1234 897.09314 898.06287 899.0325 900.0022 900.9719 901.94165 902.9114 903.8811 904.8508 905.82056 906.79017 907.7599 908.7296 909.6992 910.66907 911.6388 912.6084 913.5781 914.54786 915.5176 916.4873 917.45704 918.42676 919.3965 920.3661 921.33594 922.30567 923.27527 924.245 925.2147 926.18445 927.1542 928.1238 929.0935 930.06324 931.03296 932.0027 932.9724 933.9421 934.9118 935.8815 936.8512 937.8209 938.7906 939.7603 940.73 941.6997 942.66944 943.6391 944.6088 945.57856 946.5482 947.518 948.4876 949.45734 950.42707 951.3968 952.3665 953.337 954.3282 955.3496 956.4011 957.4827 958.5944 959.73615 960.9079 962.1099 963.342 964.60407 965.8964 967.2187 968.5711 969.95356 971.3661 972.8087 974.28144 975.7843 977.3173 978.8803 980.4734 982.0967 983.75 985.43335 987.14686 988.89045 990.66407 992.46784 994.3017 996.1658 998.0597 1000.0)) (quote (316.68155 315.72565 316.68936 319.57275 324.3757 331.09827 339.74045 350.3023 362.78372 377.18478 393.50546 411.74576 431.90567 453.98517 477.98434 503.90317 531.7416 561.4996 593.1771 626.7744 662.29126 699.72767 739.0838 780.3595 823.55475 868.66974 915.70435 964.65845 5.532135 58.32551 113.03852 169.67118 228.2234 287.011 342.2414 393.77115 441.60056 485.72928 526.1577 562.8853 595.91254 625.23926 650.86536 672.79096 691.0162 705.54065 716.3647 723.4883 726.9112 726.634 722.6556 714.9773 703.5982 688.5186 669.7384 647.2576 621.0766 591.19465 557.6126 520.32984 479.34662 434.6627 386.27844 334.19354 278.40814 219.92186 163.7046 110.43523 60.113263 12.73885 978.31196 936.8327 898.301 862.71686 830.0803 800.3912 773.6498 749.85596 729.0096 711.11084 696.1596 684.156 675.1 668.9914 665.8305 665.61707 668.3512 674.03296 682.6623 694.2391 708.76355 726.23554 746.6551 770.0222 796.3369 825.5991 857.80896 892.6978 926.56037 958.21326 987.6571 4.891102 29.91588 52.731263 73.33718 91.733635 107.9207 121.898285 133.66641 143.22516 150.57434 155.71424 158.64464 159.36566 157.87715 154.1794 148.27202 140.15532 129.82917 117.293465 102.54838 85.59397 66.43002 45.05669 21.473885 -4.3183103 977.6801 947.46894 915.04847 880.4393 846.2008 814.10975 784.1662 756.3703 730.72175 707.22095 685.86744 666.6615 649.6031 634.6922 621.9287 611.31287 602.8445 596.5237 592.3503 590.32435 590.446 592.7152 597.1319 603.6961 612.4078 623.267 636.2737 651.4279 668.7297 688.1789 709.77564 733.5199 759.41175 787.451 817.63776 849.9721 883.45075 916.4562 948.966 980.9804 2.4995137 33.523198 64.051545 94.08456 123.622 152.66419 181.21096 209.26245 236.81832 263.879 290.44418 316.51404 342.08847 367.16757 391.75116 415.83926 439.43237 462.52982 485.13193 507.23853 528.8499 549.9659 570.5865 590.7116 610.3414 629.47577 648.11475 666.2583 683.88697 700.9319 717.3874 733.2534 748.52985 763.2169 777.31415 790.8223 803.7405 816.0694 827.80884 838.9587 849.519 859.4901 868.8715 877.6632 885.86554 893.4783 900.50147 906.9353 912.77967 918.03425 922.6996 926.7753 930.2617 933.1583 935.4653 937.18305 938.3112 938.85 938.79914 938.1589 937.0135 936.07807 935.51447 935.322 935.5012 936.05207 936.97437 938.2681 939.93366 941.9705 944.3791 947.1593 950.3108 953.8339 957.7284 961.9947 966.6324 971.6418 977.0225 982.7749 988.8988 995.39435 -7.738879 -0.50021554 7.1099115 15.0915 23.444554 32.169228 41.26552 50.733277 60.57266 70.783646 81.33188 91.03749 99.316445 106.16873 111.59419 115.593155 118.1653 119.31092 119.02973 117.321724 114.18737 109.62604 103.63819 96.223694 87.38252 77.11469 65.420044 52.298886 37.75075 21.776267 4.374963 995.5469 975.29236 953.6111 930.503 905.9685 880.00715 852.61896 823.8047 793.5631 761.895 728.8004 694.279 659.0283 623.8387 588.71125 553.6453 518.6416 483.6997 448.8199 414.00174 379.24576 344.55148 309.91922 275.3489 240.84046 206.39406 172.00954 137.68689 103.42609 69.22723 35.090378 1.0153885 977.0024 943.0513 909.16205 875.3349 841.5695 807.8661 774.2245 740.64496 707.1273 673.6716 640.2778 606.94587 574.0486 542.5229 512.41407 483.72183 456.4465 430.58786 406.14606 383.12097 361.51267 341.32117 322.5464 305.18842 289.24713 274.72272 261.61502 249.9241 239.64992 230.79254 223.35193 217.32808 212.72101 209.53067 207.75714 207.40036 208.46035 210.9371 214.83065 220.14096 226.868 235.01184 244.5724 255.54978 267.88565 281.25134 295.5954 310.91776 327.21857 344.4977 362.75522 381.9911 402.20523 423.3978 445.56882 468.71814 492.84576 517.9518 544.0362 571.09894 599.14 628.1596 658.1574 689.1336 721.0882 754.0211 787.93244 822.822 858.69 895.53644 933.3612 972.16425 1.945773 42.70561 84.44379 127.16041 170.77568 213.94956 256.20166 297.53253 337.94223 377.43036 415.99707 453.64233 490.3663 526.1688 561.0501 595.00995 628.04804 660.165 691.36066 721.63477 750.98774 779.41907 806.929 833.5177 859.1849 883.93067 907.75495 930.6581 952.6397 973.6999 993.8387 3.056159 21.35221 38.72698 55.18 70.71206 85.31922 98.10016 108.34743 116.06086 121.24029 123.886086 123.99786 121.57565 116.61978 109.13039 99.10669 86.54964 71.45828 53.83341 33.67439 10.981699 995.7551 967.9948 937.7008 904.87287 869.511 831.6151 791.1856 748.2223 702.72516 654.69416 604.12934 551.0305 495.39816 437.23154 376.53122 313.2974 247.5295 181.38004 118.76033 59.751694 4.354474 962.56855 914.3939 869.8304 828.8783 791.5374 757.8078 727.68946 701.18244 678.2866 659.0021 643.32886 631.2669 622.81617 617.97675 616.7486 619.1317 625.1261 634.73175 647.9488 664.7769 685.21644 709.2672 736.9292 768.2025 803.08716 841.58295 883.69007 929.4085 977.555 13.449982 56.613182 97.04425 134.74344 169.71051 201.94577 231.4489 258.22006 282.25928 303.56653 322.14172 337.98496 351.09637 361.47553 369.12283 374.03806 376.22147 375.6729 372.3922 366.37958 357.63498 346.15823 331.94986 315.0092 295.33655 272.9322 247.79558 219.9271 189.32669 155.99408 119.92958 81.40991 43.20518 6.0258236 979.8721 944.74347 910.64057 877.563 845.5107 814.48395 784.4826 755.5067 727.5563 700.63117 674.7315 649.85724 626.00837 603.1851 581.38715 560.61457 540.8675 522.1458 504.4496 487.7787 472.13336 457.5133 443.91873 431.34958 419.80585 409.28757 399.79468 391.32727 383.8852 377.47232 372.27683 368.40402 365.8538 364.62628 364.72134 366.13913 368.8795 372.9425 378.32822 385.03653 393.06754 402.42114 413.0974 425.09634 438.4179 453.0621 469.029 486.31848 504.93066 524.8655 546.1229 568.703 592.60584 617.8311 644.3792 672.24994 701.44324 731.9592 763.79786 796.95917 831.44306 867.24964 903.40265 938.6373 972.9477 -3.6657377 28.797013 60.335976 90.951065 120.64207 149.40956 177.25296 204.17243 230.16826 255.23996 279.3879 302.61194 324.91214 346.28854 366.741 386.2695 404.87436 422.5551 439.3121 455.14517 470.05435 484.03967 497.10117 509.23883 520.45246 530.74244 540.1083 548.55054 556.06867 562.59766 567.95154 572.11896 575.1001 576.8948 577.503 576.92475 575.16004 572.20905 568.0715 562.7476 556.23725 548.54047 539.6572 529.5878 518.33185 505.88944 492.2605 477.44516 461.44363 444.25543 425.88086 406.32004 385.57272 363.63898 340.51877 316.21213 290.71902 264.0396 236.17368 207.12152 176.88277 145.69988 115.151276 85.521515 56.81053 29.018538 2.1455565 986.1914 961.1561 937.0398 913.84247 891.564 870.20447 849.7639 830.2422 811.63935 793.95545 777.19056 761.34455 746.41736 732.4091 719.3198 707.1495 695.89795 685.5654 676.15186 667.65717 660.08136 653.42457 647.6866 642.86756 638.96747 635.98627 633.9465 633.3295 634.32996 636.9477 641.183 647.0355 654.5055 663.5929 674.2978 686.6199 700.55945 716.1165 733.2908 752.0825 772.49176 794.5183 818.16224 843.4235 870.30225 898.79847 928.91187 960.6428 993.9911 18.956852 55.539925 93.74042 133.55825 174.99365 218.04633 262.71634 309.00375 356.9087 406.42914 454.89597 499.9126 541.47876 579.59485 614.2607 645.4762 673.2414 697.55634 718.42096 735.83545 749.7997 760.31354 767.37714 770.9902 771.15314 767.866 761.12854 750.9406 737.3026 720.2142 699.67554 675.6868 648.2477 617.35804 583.01825 545.2284 503.98798 459.29746 411.1566 359.56543 304.52405 246.03235 186.13127 129.01215 74.80121 23.497857 985.10254 939.615 897.0353 857.3633 820.5992 786.74305 755.7947 727.7542 702.6215 680.39667 661.0797 644.6706 631.16925 620.5758 612.8902 608.1124 606.24244 607.2804 611.22614 618.0798 627.8412 640.5104 656.0875 674.5725 695.96534 720.2659 747.4744 777.5908 809.78486 840.31965 868.74164 895.05085 919.2475 941.331 961.30195 979.16004 994.90546 -1.4619217 10.057909 19.464985 26.759305 31.940867 35.009678 35.965657 34.808876 31.53942 26.157128 18.661927 9.054127 -2.6663513 993.5002 977.55414 959.4953 939.3235 917.03907 892.64197 866.1319 837.50916 806.77375 773.9254 739.2847 706.68067 677.2296 650.9317 627.78675 607.79487 590.95606 577.2703 566.7377 559.3579 555.1314 554.05787 556.1374 561.36994 569.7555 581.29425 595.98597 613.8306 634.8285 658.9794 686.28327 716.74024 750.3503 787.11335 827.02955 870.0987 916.321 965.6962 8.224535 63.90593 122.74036 184.72785 249.8145 313.63715 373.43283 429.20096 480.94156 528.65497 572.34095 611.9996 647.63056 679.23456 706.8107 730.35975 749.8815 765.3757 776.8427 784.282 787.6941 787.0788 782.43634 773.7661 761.06855 744.34394 723.59144 698.8119 670.005 637.17054 600.3087 559.4195 514.5029 465.55893 412.5878 355.58908 294.56302 232.25118 172.69925 115.94358 61.984478 10.821638 972.45527 926.8851 884.11145 844.13434 806.95337 772.56885 740.98084 712.18897 686.1936 662.99457 642.59205 624.9859 610.17597 598.1625 588.9455 582.52485 578.9005 578.0726 580.0411 584.8059 592.3672 602.72486 615.87885 631.82917 650.5759 672.1191 696.4586 722.67164 747.79535 771.6062 794.10444 815.28986 835.16254 853.72254 870.9698 886.9041 901.5261 914.83497 926.8314 937.5149 946.88575 954.9437 961.6891 967.12165 971.2414 974.04865 975.54297 975.7246 974.5935 972.1495 968.39307 963.3236 956.9416 949.2468 940.2392 929.91895 918.2858 905.3401 891.08167 875.7325 860.9763 847.1613 834.2876 822.35505 811.36365 801.3136 792.20466 784.0369 776.8104 770.52515 765.181 760.7782 757.3165 754.79596 753.21674 752.57874 752.8819 754.1262 756.3118 759.43866 763.5066 768.51587 774.46625 781.35785 789.1908 797.9648 807.6801 818.3365 829.9342 842.47315 855.9532 870.40705 886.75464 905.41547 926.38984 949.67756 975.2786 -6.806925 23.421006 55.962258 90.816986 127.98496 167.46659 209.26136 253.36954 299.7913 348.52628 399.57465 452.93658 508.61185 566.6004 626.9024 689.51795 754.4467 821.6888 891.2446 963.1134 27.295777 103.79159 182.60063 263.72324 347.15942 432.9087 521.7172)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 375 52) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 314 50) (om-make-point 55 30) (list 8 89) "(8 89)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 215 54) (om-make-point 81 30) (list -10 1000) "(-10 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 173 209) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 132 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 219 391) (om-make-point 57 77) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.7977438 3.5873714 5.3688827 7.1422773 8.9075575 10.66472 12.413767 14.154698 15.887509 17.61221 19.32879 21.037259 22.737607 24.429839 26.113953 27.789952 29.457837 31.1176 32.76925 34.41279 36.048207 37.67551 39.294693 40.90576 42.50872 44.103554 45.690274 47.26888 48.839367 50.40174 51.955994 53.502137 55.04016 56.570065 58.091858 59.60553 61.111096 62.60853 64.097855 65.57907 67.05216 68.517136 69.97401 71.42275 72.86338 74.29589 75.72029 77.136566 78.54473 79.94478 81.336716 82.72053 84.09623 85.463806 86.82328 88.17464 89.51787 90.85299 92.17999 93.49887 94.80965 96.112305 97.40684 98.69325 99.97156 101.241745 102.503815 103.75778 105.00362 106.24135 107.47095 108.69244 109.90582 111.11107 112.30822 113.49725 114.67815 115.85095 117.01563 118.17218 119.32063 120.460976 121.59318 122.71728 123.833245 124.941124 126.04086 127.132485 128.216 129.29141 130.3587 131.41785 132.4689 133.51184 134.54666 135.57337 136.59195 137.60243 138.60478 139.59902 140.58513 141.56314 142.53302 143.4948 144.44846 145.394 146.33142 147.26073 148.18192 149.095 149.99996 150.90085 151.80175 152.70264 153.60355 154.50446 155.40535 156.30625 157.20716 158.10807 159.00896 159.90985 160.81076 161.71167 162.61257 163.51346 164.41437 165.31526 166.21616 167.11705 168.01796 168.91886 169.81977 170.72066 171.62155 172.52246 173.42337 174.32427 175.22516 176.12607 177.02696 177.92787 178.82877 179.72968 180.63057 181.53145 182.43239 183.33325 184.23415 185.13506 186.03597 186.93686 187.83779 188.73867 189.63956 190.54047 191.44138 192.34227 193.24317 194.14408 195.04499 195.94586 196.84677 197.74768 198.64856 199.54947 200.45038 201.35129 202.25218 203.15308 204.05399 204.95487 205.85578 206.75669 207.65756 208.55849 209.45938 210.36028 211.26117 212.16207 213.06298 213.96389 214.86478 215.76569 216.6666 217.56749 218.46839 219.3693 220.27017 221.17108 222.07199 222.97287 223.87378 224.77469 225.6756 226.57649 227.4774 228.37828 229.27919 230.18007 231.08098 231.98188 232.88278 233.78369 234.68457 235.58548 236.48639 237.3873 238.2882 239.1891 240.09001 240.99089 241.89177 242.7927 243.69358 244.59449 245.49539 246.39627 247.29721 248.19809 249.09902 249.9999 250.9008 251.80171 252.70262 253.6035 254.50447 255.40535 256.30627 257.20718 258.1081 259.00897 259.90994 260.81085 261.71173 262.61267 263.51358 264.4145 265.31537 266.2163 267.11722 268.01813 268.91904 269.81995 270.7209 271.6218 272.52267 273.4236 274.32452 275.22543 276.12634 277.02725 277.92816 278.8291 279.72998 280.6309 281.5318 282.43274 283.33362 284.23456 285.13547 286.03638 286.9373 287.8382 288.7391 289.64005 290.54095 291.44186 292.34277 293.24365 294.1446 295.0455 295.9464 296.84732 297.74823 298.64914 299.55005 300.45096 301.35187 302.25278 303.15372 304.05463 304.95554 305.85645 306.75735 307.65826 308.55917 309.46008 310.36102 311.2619 312.1628 313.06372 313.96466 314.86557 315.76648 316.6674 317.5683 318.4692 319.37012 320.27103 321.17194 322.07288 322.9738 323.8747 324.7756 325.6765 326.57742 327.47833 328.37924 329.28015 330.1811 331.082 331.9829 332.88382 333.78473 334.6856 335.58655 336.48743 337.38837 338.2893 339.1902 340.0911 340.992 341.89294 342.79382 343.69476 344.59567 345.49658 346.3975 347.2984 348.1993 349.10022 350.00116 350.90207 351.80298 352.7039 353.6048 354.5057 355.40662 356.30756 357.20847 358.10934 359.01028 359.91116 360.8121 361.713 362.61392 363.5148 364.41574 365.31665 366.21756 367.11847 368.01938 368.9203 369.82123 370.72214 371.62305 372.52396 373.42487 374.32578 375.22668 376.1276 377.02853 377.9294 378.83032 379.73126 380.63217 381.53308 382.43396 383.33493 384.2358 385.13675 386.03763 386.93857 387.83948 388.7404 389.64127 390.54218 391.44315 392.34402 393.24493 394.14584 395.04675 395.9477 396.8486 397.7495 398.6504 399.5513 400.4522 401.35315 402.2541 403.15497 404.05588 404.9568 405.8577 406.7586 407.65952 408.56043 409.46137 410.36227 411.26318 412.16406 413.065 413.9659 414.86688 415.76776 416.66864 417.56958 418.47046 419.37143 420.27228 421.17322 422.07413 422.97504 423.87595 424.77686 425.6778 426.5787 427.47958 428.38055 429.28143 430.1823 431.08322 431.9842 432.88507 433.78598 434.6869 435.58783 436.4887 437.38965 438.29053 439.19147 440.09238 440.99326 441.8942 442.79507 443.696 444.5969 445.49783 446.3987 447.29965 448.2006 449.10147 450.00238 450.90326 451.8042 452.70508 453.6059 454.50678 455.4077 456.3086 457.2095 458.11038 459.01126 459.91214 460.81308 461.71396 462.61484 463.5157 464.41663 465.3175 466.21838 467.11926 468.02014 468.92105 469.82193 470.72287 471.6237 472.52463 473.42545 474.32636 475.22723 476.12817 477.02905 477.92993 478.83075 479.7317 480.63257 481.53348 482.43442 483.3353 484.23618 485.137 486.03793 486.9388 487.83972 488.7406 489.64148 490.54236 491.44324 492.34412 493.24503 494.1459 495.04684 495.94772 496.8486 497.74948 498.65036 499.55124 500.45215 501.35303 502.25397 503.1548 504.05566 504.95654 505.85745 506.75833 507.65927 508.5601 509.46103 510.36185 511.2628 512.1637 513.0646 513.96546 514.86634 515.7673 516.66816 517.569 518.4699 519.3708 520.27167 521.1726 522.0735 522.97437 523.87525 524.7761 525.677 526.5779 527.47876 528.37964 529.2806 530.18146 531.08234 531.9832 532.88416 533.78504 534.6859 535.5868 536.4877 537.38855 538.2894 539.1903 540.09125 540.99207 541.89295 542.7939 543.69477 544.5957 545.4966 546.39747 547.29834 548.1992 549.1001 550.001 550.90186 551.8028 552.7037 553.60456 554.50544 555.4064 556.30726 557.2081 558.10895 559.0099 559.91077 560.8117 561.7126 562.61347 563.5143 564.4152 565.3161 566.217 567.11786 568.01874 568.9197 569.8205 570.7214 571.62226 572.5232 573.4241 574.32496 575.2259 576.1268 577.02765 577.9285 578.82947 579.7303 580.6312 581.53205 582.43305 583.33387 584.2348 585.1356 586.03656 586.9374 587.8383 588.7392 589.64014 590.54096 591.44184 592.3428 593.24366 594.14454 595.0454 595.9463 596.8472 597.74805 598.64905 599.5499 600.45075 601.3516 602.2525 603.15345 604.0543 604.9552 605.8561 606.757 607.6579 608.5587 609.4596 610.3605 611.26136 612.16236 613.06324 613.9641 614.8649 615.76587 616.66675 617.5676 618.4685 619.3694 620.27027 621.17115 622.0721 622.97297 623.87384 624.7747 625.6756 626.57654 627.4774 628.3783 629.2792 630.18006 631.08094 631.9818 632.8827 633.7836 634.6845 635.58545 636.4863 637.3872 638.2881 639.18897 640.08985 640.9907 641.8916 642.7925 643.69336 644.59424 645.4952 646.39606 647.29694 648.1979 649.09876 649.99964 650.90046 651.80146 652.70234 653.60315 654.5041 655.40497 656.30585 657.2067 658.1076 659.00855 659.9094 660.8103 661.7112 662.61207 663.513 664.4139 665.31476 666.2156 667.11646 668.0174 668.9182 669.81916 670.7201 671.621 672.52186 673.4227 674.3236 675.2245 676.1254 677.0263 677.9271 678.82807 679.7289 680.6299 681.53077 682.4316 683.33246 684.23334 685.1342 686.03516 686.93604 687.837 688.7378 689.6387 690.53956 691.4405 692.3414 693.24225 694.1431 695.04407 695.9449 696.8458 697.7467 698.6475 699.54847 700.44935 701.3502 702.2511 703.15204 704.05286 704.9538 705.85474 706.7556 707.65644 708.55744 709.45826 710.35914 711.26 712.1609 713.06177 713.9627 714.8636 715.76447 716.66535 717.5663 718.4671 719.368 720.2689 721.1698 722.0707 722.97156 723.87244 724.7733 725.67426 726.57514 727.476 728.37696 729.27784 730.1787 731.0796 731.98047 732.88135 733.7822 734.6831 735.584 736.48487 737.38575 738.28675 739.1876 740.08844 740.9894 741.89026 742.79114 743.692 744.5929 745.4938 746.39466 747.29554 748.1965 749.09736 749.9983 750.8991 751.8 752.7009 753.6018 754.5027 755.4035 756.30445 757.2054 758.1062 759.0071 759.908 760.8089 761.7098 762.61066 763.5116 764.4125 765.31336 766.21424 767.1151 768.016 768.9169 769.8178 770.7187 771.61957 772.52045 773.4214 774.3222 775.22315 776.12397 777.0249 777.9257 778.82666 779.72754 780.6284 781.5293 782.4302 783.3311 784.23206 785.1329 786.0338 786.9347 787.8356 788.73645 789.6373 790.5382 791.43915 792.3399 793.2409 794.1417 795.04267 795.9435 796.8444 797.7453 798.64624 799.5471 800.448 801.3488 802.24976 803.15064 804.0515 804.9524 805.85334 806.75415 807.6551 808.55597 809.45685 810.3578 811.25867 812.15955 813.0604 813.96125 814.8622 815.7631 816.66394 817.56495 818.46576 819.3667 820.26746 821.1684 822.06934 822.9702 823.8711 824.77204 825.67286 826.5737 827.4746 828.37555 829.27637 830.17725 831.0781 831.9791 832.88 833.7809 834.68177 835.58265 836.4835 837.3844 838.2853 839.18616 840.08704 840.988 841.88886 842.78974 843.6907 844.59156 845.49244 846.3933 847.2942 848.19507 849.09595 849.9968 850.90186 851.81495 852.7361 853.6654 854.6028 855.54834 856.5021 857.46387 858.43384 859.4118 860.39795 861.39216 862.39454 863.405 864.42365 865.4503 866.48517 867.5281 868.5792 869.6384 870.7057 871.78107 872.8646 873.9563 875.0561 876.16394 877.28 878.40406 879.53626 880.67664 881.82514 882.98175 884.14637 885.3192 886.50025 887.68934 888.88636 890.09174 891.3051 892.5266 893.7563 894.99415 896.2398 897.4939 898.7561 900.02625 901.3046 902.59107 903.8856 905.1883 906.4992 907.8181 909.14515 910.48035 911.82355 913.1749 914.5344 915.9021 917.27784 918.66175 920.0536 921.4538 922.86194 924.2782 925.7026 927.13526 928.576 930.0247 931.48175 932.9467 934.41987 935.9012 937.39045 938.88794 940.39356 941.9073 943.4292 944.95905 946.49726 948.04334 949.5978 951.1603 952.7307 954.30945 955.8961 957.49115 959.0941 960.7052 962.32447 963.95185 965.5873 967.23096 968.88257 970.5424 972.2104 973.8865 975.5707 977.263 978.9633 980.6719 982.38855 984.11335 985.8463 987.5873 989.33637 991.09357 992.85895 994.63245 996.41407 998.2037 1000.0)) (quote (21.0 37.336667 53.373677 69.11104 84.548745 99.68681 114.52522 129.06398 143.30309 157.24253 170.88236 184.22249 197.263 210.00385 222.44504 234.58658 246.42847 257.9707 269.2133 280.1562 290.7995 301.14313 311.18713 320.9315 330.3762 339.5212 348.36655 356.9123 365.1584 373.10486 380.75162 388.09872 395.1462 401.89404 408.34222 414.49075 420.3396 425.88886 431.1384 436.08835 440.73868 445.0892 449.14023 452.89157 456.34317 459.49524 462.34763 464.90027 467.1533 469.10678 470.76062 472.1147 473.1692 473.924 474.3791 474.5347 474.39047 473.94672 473.20328 472.1602 470.81744 469.1751 467.23303 464.9913 462.44995 459.609 456.46835 453.02805 449.28812 445.2485 440.9092 436.2704 431.3318 426.09366 420.5558 414.7183 408.58112 402.1443 395.40784 388.3717 381.036 373.4006 365.46558 357.23084 348.6965 339.86246 330.7288 321.29553 311.56253 301.52997 291.19763 280.56577 269.63422 258.40305 246.8721 235.04161 222.91149 210.48166 197.75217 184.72309 171.39435 157.76593 143.8378 129.6101 115.08267 100.255646 85.129 69.70273 53.976715 37.95111 21.625855 5.0009155 -11.693867 -28.228875 -44.603863 -60.81908 -76.87436 -92.769745 -108.50521 -124.080826 -139.49655 -154.75237 -169.84827 -184.78433 -199.5605 -214.17679 -228.63312 -242.92963 -257.0662 -271.0429 -284.8597 -298.51666 -312.01367 -325.3509 -338.5281 -351.5455 -364.403 -377.10065 -389.63824 -402.01605 -414.234 -426.29205 -438.19022 -449.9285 -461.5068 -472.9253 -484.18384 -495.2826 -506.22134 -517.0003 -527.6193 -538.0785 -548.3777 -558.5171 -568.4965 -578.3162 -587.9758 -597.47565 -606.8156 -615.9956 -625.01575 -633.8759 -642.5763 -651.11676 -659.49744 -667.7181 -675.7789 -683.6799 -691.42084 -699.0019 -706.4231 -713.6845 -720.7861 -727.7276 -734.5093 -741.131 -747.59296 -753.89496 -760.0371 -766.01935 -771.8417 -777.50415 -783.00666 -788.34937 -793.53217 -798.555 -803.4181 -808.1212 -812.6644 -817.0477 -821.27124 -825.3348 -829.23847 -832.98224 -836.56617 -839.9902 -843.2542 -846.35846 -849.3028 -852.0873 -854.71186 -857.1765 -859.4813 -861.62616 -863.6112 -865.4363 -867.10157 -868.6069 -869.95234 -871.1379 -872.16346 -873.0293 -873.7352 -874.2811 -874.6673 -874.89356 -874.95984 -874.8663 -874.6128 -874.19947 -873.6263 -872.8931 -872.0001 -870.95984 -869.7847 -868.475 -867.0304 -865.4512 -863.7371 -861.8884 -859.9049 -857.78675 -855.5338 -853.1461 -850.6238 -847.9666 -845.17475 -842.2482 -839.1869 -835.9908 -832.66 -829.19446 -825.59424 -821.8593 -817.9895 -813.98505 -809.8459 -805.57196 -801.16327 -796.6199 -791.94184 -787.129 -782.18134 -777.0991 -771.882 -766.5302 -761.0437 -755.4225 -749.66657 -743.7758 -737.7503 -731.5901 -725.2953 -718.8656 -712.3012 -705.6021 -698.7683 -691.7997 -684.6964 -677.4584 -670.0856 -662.57807 -654.93586 -647.1589 -639.24714 -631.20075 -623.01954 -614.7036 -606.2531 -597.66767 -588.9476 -580.0928 -571.10315 -561.9788 -552.71985 -543.32605 -533.7976 -524.1344 -514.3364 -504.40375 -494.3363 -484.1341 -473.79724 -463.32556 -452.71927 -441.97815 -431.10233 -420.09174 -408.94647 -397.66644 -386.2517 -374.7022 -363.018 -351.19904 -339.24527 -327.15695 -314.9338 -302.57587 -290.08328 -277.456 -264.6939 -251.79701 -238.76548 -225.59925 -212.29819 -198.86246 -185.29196 -171.58676 -157.74689 -143.77216 -129.66275 -115.41861 -101.039734 -86.526184 -71.87784 -57.094727 -42.17688 -27.12436 -11.937164 3.3849182 18.841614 34.433106 50.1593 66.02023 81.79854 97.27785 112.45828 127.33984 141.92235 156.20604 170.19074 183.87657 197.26337 210.35129 223.14034 235.63042 247.82154 259.71378 271.30704 282.60147 293.59692 304.2933 314.691 324.78958 334.58933 344.09015 353.292 362.1949 370.7989 379.10394 387.11014 394.8174 402.22577 409.33502 416.14554 422.657 428.86963 434.7833 440.39798 445.7138 450.7307 455.4486 459.86765 463.9877 467.80893 471.33115 474.55447 477.47882 480.10425 482.43073 484.45837 486.18704 487.61682 488.74762 489.5795 490.11246 490.34644 490.2816 489.91766 489.2549 488.29327 487.03268 485.47308 483.61456 481.45725 479.0009 476.2456 473.1914 469.83838 466.1863 462.23538 457.9855 453.43668 448.58878 443.4422 437.99658 432.25198 426.20856 419.8662 413.2249 406.2846 399.0454 391.5073 383.67023 375.53436 367.09943 358.3655 349.3328 340.0012 330.37064 320.441 310.2126 299.6852 288.85886 277.73367 266.30948 254.58637 242.56433 230.24341 217.62348 204.70475 191.48691 177.9703 164.15473 150.04016 135.62671 120.91437 105.903046 90.592835 74.98367 59.075558 42.86847 26.36261 9.557709 -7.5456543 -24.71477 -41.718975 -58.558297 -75.23265 -91.742096 -108.08663 -124.26622 -140.28087 -156.13068 -171.8156 -187.33548 -202.69058 -217.88065 -232.90587 -247.76612 -262.4615 -276.99197 -291.35748 -305.55804 -319.59375 -333.46454 -347.17038 -360.7113 -374.08734 -387.29855 -400.34473 -413.226 -425.9423 -438.49374 -450.88028 -463.1019 -475.15854 -487.05035 -498.7772 -510.3391 -521.73615 -532.96827 -544.03547 -554.9377 -565.6751 -576.2475 -586.65497 -596.89765 -606.9753 -616.88807 -626.636 -636.2188 -645.63685 -654.88996 -663.97815 -672.90137 -681.6597 -690.2532 -698.68165 -706.94526 -715.04395 -722.9777 -730.7465 -738.35047 -745.7895 -753.06354 -760.1727 -767.11695 -773.89637 -780.51075 -786.9603 -793.2448 -799.36457 -805.3193 -811.10914 -816.7341 -822.194 -827.4892 -832.61927 -837.5846 -842.3848 -847.0203 -851.49085 -855.7964 -859.937 -863.9128 -867.7237 -871.3696 -874.8506 -878.1666 -881.3179 -884.3041 -887.12537 -889.78174 -892.27326 -894.59986 -896.7615 -898.7583 -900.59 -902.25696 -903.75904 -905.09607 -906.2683 -907.2756 -908.1178 -908.79517 -909.3076 -909.6553 -909.8379 -909.8557 -909.7085 -909.3964 -908.91944 -908.27747 -907.4706 -906.4988 -905.45044 -904.4134 -903.3876 -902.3729 -901.3697 -900.3777 -899.3971 -898.42756 -897.4695 -896.52265 -895.5871 -894.6628 -893.74964 -892.848 -891.9575 -891.0784 -890.2104 -889.35395 -888.50855 -887.6745 -886.8518 -886.04035 -885.24006 -884.45124 -883.67347 -882.90705 -882.1522 -881.4083 -880.6757 -879.9546 -879.2447 -878.54596 -877.8585 -877.1825 -876.51764 -875.8641 -875.2218 -874.5909 -873.9711 -873.36274 -872.7656 -872.1798 -871.60517 -871.0419 -870.48987 -869.94916 -869.4197 -868.90155 -868.39466 -867.89905 -867.4147 -866.94165 -866.4799 -866.0294 -865.5902 -865.1623 -864.74567 -864.3403 -863.9462 -863.5635 -863.1919 -862.8317 -862.4827 -862.1451 -861.8187 -861.50354 -861.19977 -860.9072 -860.626 -860.35596 -860.09736 -859.84986 -859.6138 -859.38886 -859.1753 -858.973 -858.782 -858.60224 -858.43384 -858.2766 -858.13074 -857.99616 -857.87287 -857.7608 -857.66004 -857.57056 -857.4923 -857.4254 -857.3698 -857.32544 -857.29236 -857.2705 -857.26 -857.2608 -857.2728 -857.29615 -857.3308 -857.3767 -857.4339 -857.5023 -857.5821 -857.6731 -857.7754 -857.88904 -858.0138 -858.14997 -858.29737 -858.4561 -858.6261 -858.8074 -858.9999 -859.1887 -859.35865 -859.50977 -859.642 -859.75556 -859.8502 -859.926 -859.98304 -860.0211 -860.04047 -860.041 -860.0227 -859.9855 -859.9295 -859.8547 -859.76105 -859.6486 -859.51734 -859.3671 -859.1981 -859.0104 -858.8038 -858.5783 -858.33405 -858.0709 -857.78894 -857.4882 -857.1686 -856.8302 -856.4729 -856.0968 -855.70197 -855.28815 -854.85566 -854.4042 -853.934 -853.4449 -852.9371 -852.41034 -851.86475 -851.30036 -850.71717 -850.1152 -849.49427 -848.85456 -848.19605 -847.5187 -846.82245 -846.10755 -845.3737 -844.621 -843.84955 -843.0592 -842.25007 -841.42206 -840.5752 -839.70966 -838.82514 -837.9219 -836.99976 -836.0587 -835.099 -834.1203 -833.1229 -832.1067 -831.07154 -830.0176 -828.94477 -827.8532 -826.7428 -825.6136 -824.46546 -823.2986 -822.11286 -820.90827 -819.68494 -818.4426 -817.1816 -815.90174 -814.603 -813.2854 -811.9491 -810.59394 -809.21985 -807.827 -806.4153 -804.9848 -803.53547 -802.06727 -800.5803 -799.0745 -797.5498 -796.0063 -794.44404 -792.8628 -791.2629 -789.64405 -788.0065 -786.3499 -784.6747 -782.9806 -781.2676 -779.53577 -777.7852 -776.01575 -774.2275 -772.42035 -770.5945 -768.74976 -766.8861 -765.00367 -763.13025 -761.2939 -759.4944 -757.732 -756.00666 -754.31824 -752.6668 -751.05256 -749.4751 -747.93476 -746.4314 -744.9651 -743.53577 -742.1435 -740.78815 -739.46985 -738.1886 -736.9442 -735.737 -734.5667 -733.4335 -732.3372 -731.278 -730.25574 -729.2705 -728.3223 -727.41114 -726.537 -725.69977 -724.8996 -724.1364 -723.4103 -722.72107 -722.069 -721.4538 -720.87574 -720.3346 -719.8305 -719.3634 -718.93335 -718.5403 -718.1842 -717.8651 -717.5831 -717.338 -717.13 -716.959 -716.825 -716.72797 -716.668 -716.645 -716.65906 -716.7101 -716.7981 -716.92316 -717.0852 -717.28425 -717.5203 -717.7934 -718.1035 -718.45057 -718.8347 -719.25586 -719.714 -720.20917 -720.7412 -721.3104 -721.9166 -722.5598 -723.24 -723.95716 -724.71137 -725.50257 -726.33075 -727.19605 -728.0982 -729.0375 -730.01374 -731.027 -732.0773 -733.16456 -734.2889 -735.4502 -736.64844 -737.8838 -739.1561 -740.46546 -741.81177 -743.1952 -744.6155 -746.0729 -747.56727 -749.09864 -750.6671 -752.27247 -753.9149 -755.59436 -757.3108 -759.0642 -760.8547 -762.6821 -764.54664 -766.4481 -768.38654 -770.36207 -772.3745 -774.4241 -776.5106 -778.63416 -780.7947 -782.99225 -785.07227 -786.87775 -788.4086 -789.6652 -790.6471 -791.3546 -791.78754 -791.94587 -791.8299 -791.4392 -790.7741 -789.8345 -788.6203 -787.13166 -785.3685 -783.3308 -781.0186 -778.43195 -775.57074 -772.43506 -769.0247 -765.34 -761.3808 -757.147 -752.63874 -747.8559 -742.79865 -737.4668 -731.8604 -725.97956 -719.8242 -713.3943 -706.68995 -699.71106 -692.45765 -684.9298 -677.12726 -669.05036 -660.69886 -652.073 -643.1725 -633.99744 -624.548 -614.824 -604.82544 -594.55237 -584.0049 -573.18274 -562.0862 -550.715 -539.0696 -527.1493 -514.9547 -502.4856 -489.74194 -476.72382 -463.43115 -449.86395 -436.02222 -421.906 -407.51526 -392.85007 -377.91028 -362.69608 -347.20734 -331.44397 -315.40625 -299.09393 -282.50708 -265.64572 -248.50986 -231.09952 -213.41468 -195.45523 -177.22135 -158.71298 -139.93006 -120.87262 -101.54068 -81.934235 -62.053288 -41.897736 -21.467774 -0.76327515 20.215729 41.46924 62.997345 84.799866 106.87689 129.22852 151.85459 174.75522 197.9303 221.37993 245.10407 269.10275 293.3759 317.92352 342.74573 367.8424 393.21362 418.85938 444.77963 470.9743 497.4436 524.1874 551.2057 578.4985 606.0658 633.90754 662.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 380 259) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 319 257) (om-make-point 55 30) (list 8 89) "(8 89)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 220 261) (om-make-point 95 30) (list -1000 1000) "(-1000 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 194 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-SCALE-TO-INVERSION-MULTISEQ" (quote r-scale-to-inversion-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "bpf-1000to1000" "BPF-1000TO1000" nil))) (om-make-point 0 414) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-POINTER" (quote r-multiseq-pointer) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "time-pointer-bpf" "TIME-POINTER-BPF" nil) (om-load-inputfun (quote input-funbox) "number-of-windows-1000" "NUMBER-OF-WINDOWS" nil))) (om-make-point 73 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "VOICES" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 24 38) (om-make-point 174 118) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-1 1)) 1)) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (1 1)) (1 (1 -1 2)))) ((2 4) (1 (1 (2 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) (1 (1 (1 1 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) (1 (1 (1 1 1 1)))) ((2 4) ((1 (1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 2 2)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (-1 1 1 1)) (1 (-1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil (7300) nil nil nil nil nil nil nil nil nil nil (7300) nil nil nil nil nil nil nil nil (8500) nil nil nil nil nil nil nil nil nil (8500) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-4 -1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 -1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((8 (1 1 1 1 1 1 1 1)) (3 (-2 1)) (5 (-1 -2 1 -1)))) ((2 4) ((1 (-2 1 -1 2 -2)) (1 (-2 1 -1 -2 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (-1 1 2)) (1 (-1 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) ((2 (-2 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (-1 1 2)) (1 (-1 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-2 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) (1 1)) ((2 4) (1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-1 1)) 1)) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (1 1)) (1 (1 -1 2)))) ((2 4) ((2 (6 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) ((2 (1 -3)))) ((2 4) (1 (1 (1 1)))) ((2 4) ((2 (1 -3)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 1)) ((2 4) ((1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil (6100) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (2)) ((2 4) (1 (1 (1 1)))) ((2 4) (2)) ((2 4) (1 (1 (1 1)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 1)) ((2 4) (1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode player scale)) (list (quote t) 1 0 (om-make-point 253 26) (om-make-point 804 433) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 24 8 0 (quote :osc-scoreplayer) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((25 0 5 0 nil 0) (4 0 5 1 nil 0) (27 1 7 0 nil 0) (5 0 8 1 nil 0) (10 0 11 0 nil 0) (17 0 12 0 nil 0) (16 0 12 1 nil 0) (11 0 12 2 nil 0) (9 0 12 3 nil 0) (12 0 13 0 nil 0) (13 0 14 0 nil 0) (24 0 19 0 nil 0) (19 0 20 0 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 0) (21 0 24 2 nil 0) (26 0 25 0 nil 0) (20 0 25 1 nil 0) (7 0 26 0 nil 0) (14 0 26 1 nil 0) (18 0 26 2 nil 0))) nil 6.13))
