; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 10 10) (om-make-point 342 29) (om-make-point 856 710) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "nono-a-carlo-scarpa" (quote ((let ((box (om-load-boxcall (quote abstraction) "time-scaling" (om-load-patch-abs1 "time-scaling" (quote ((let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 97 67) (om-make-point 23 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 278 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 321 134) (om-make-point 24 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 259 105) (om-make-point 66 30) (list 123 345) "(123 345)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 213 67) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 229 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 114 370) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 156 244) (om-make-point 38 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 80 220) (om-make-point 59 30) (list 0.1 11) "(.1 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-TIME-SCALER" (quote r-time-scaler) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "scaling-factor-minmax" "SCALING-FACTOR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "scaling-bpf-1000x1000" "SCALING-BPF-1000X1000" nil) (om-load-inputfun (quote input-funbox) "window-resolution" "WINDOW-RESOLUTION" nil))) (om-make-point 76 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 29 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 28 131) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 41 362) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (9 0 6 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (1 0 9 2 nil 0) (7 0 9 3 nil 0) (11 0 10 0 nil 0) (13 0 11 1 nil 0) (0 0 11 6 nil 0) (6 0 12 0 nil 0))) 6.13 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 445 459) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4912 4975) (2613 3663 5013 6126 6188 7188 8688 8513) (2687 3837 6387 6462 7537 8737 8787 8662) (1350 2612 2700 2700 3675 7400 7400 7400 8575) (2825 2625 7488 7425 8688) (5000 6138 7313) (5013 6288 7288) (1563 1488 3963 5063 5213 8788) (1500 2712 2700 2775 3950 5175 5050 6400) (2688 4050 6312 7425 7575) (1424 1487 2537 2600 3787 5162 6137 7462 8462) (2637 2887 3837 3787 8637 8687) (1500 2600 2575 4875 7350 7500) (1538 1538 1400 3763 5063 6176 7363 7538 8576) (3975 3950 3850 5112 7475) (5337 6287 7662 7524) (1475 1450 1475 5075) (4000 3775) (1412 6312) (2538 2500 3775 4938 5000 6225 6125 8475) (1700 1550 2662 3950 5300 7450 8625) (2650 5200) (1387 1487 4987 4862 6237 7387) (1562 1462 2687 5137 5087 7462 7362 7437 8724 8700) (1413 1463 2576 2538 3938 3938 5063 6138) (5000 6300 6238 6238 7400) (6263 7638 7463) (4012 4912 8587 8512) (1600 2575) (2575 2800 5125) (2687 3887 3662) (1550 7500 7550 8625) (1363 2863 2613 5013 7363 7426 8563) (1725 1512 3875 3875 5175 6225 8625) (5975 7250 8675) (1550 1588 5288 5063 4988 6363 6188 6388 7513) (1262 1387 3824 3837 6237 7437 7487 7387 7562 8562) (1337 1437 2574 6237 6312) (1237 1262 2487 3637 4924 5137 6087 6187 6262 7387) (1350 1350 1450 2575 2550 6150 7275 7500 8675 8775) (2925 2625 4950 6350) (1463 1338) (2750 2375 2450 3575 8450 8450) (1563 2488 3813 3888 4926 5013) (2462 2762 3962 3762 6224) (1425 6375 7375 8775 8525) (5025 6350 7450) (1350 1450 2600 6450 7650 8600) (1713 2838 2738 3963 5113 5113 7713) (1487 5212 5050 6112 8612) (1437 2662 3887 3924 4962 5262 4962 5124 6162 8737) (4950 4988 6100) (1425 2725 7675) (1488 3850 3863) (1725 2675 4050 5175) (2737 4062 8937) (1338 1238 1613 1338 1313 3838 6113 6163) (4013 5288 5088 6263 7613 7388 8963 8726) (1538 1750 1550 3850 5175 6275 6275 6400 7450 8875) (1388 3825 3875 4925 6125 6275 6125 8525 8675 8675) (1650 2775 5050 5112 6450 7488) (1426 1426 1588 2650 2788 3988 5263 5113 7363 8626) (2550 5050 6188 6200 6100 7350 7425 8500) (1412 2575 3875 3875 7325 8575) (1312 1387 1687 1437 4012 6274 7312 7437 8737) (1725 2775 6325 6525 7475 7512))) :lonset (quote (475 4217 8814 13292 19028 24261 29804 36941 44193 47747 52134 58951 65923 72103 74415 81696 86066 92192 96982 105159 111353 117547 121774 125708 130493 134331 139443 145284 152613 156536 162469 169244 172354 180695 186579 191738 197705 201667 205275 211042 218648 225143 230049 235022 239422 242267 246897 250560 258242 265463 273818 276460 280173 284223 289086 295902 300717 306545 311617 316920 320554 326200 330888 336128 343785 350017 356249)) :ldur (quote ((3742 3742) (4596 4596 4596 4596 4596 4596 4596 4596) (4479 4479 4479 4479 4479 4479 4479 4479) (5735 5735 5735 5735 5735 5735 5735 5735 5735) (5233 5233 5233 5233 5233) (5543 5543 5543) (7137 7137 7137) (7252 7252 7252 7252 7252 7252) (3554 3554 3554 3554 3554 3554 3554 3554) (4387 4387 4387 4387 4387) (6817 6817 6817 6817 6817 6817 6817 6817 6817) (6972 6972 6972 6972 6972 6972) (6180 6180 6180 6180 6180 6180) (2312 2312 2312 2312 2312 2312 2312 2312 2312) (7281 7281 7281 7281 7281) (4370 4370 4370 4370) (6126 6126 6126 6126) (4790 4790) (8177 8177) (6194 6194 6194 6194 6194 6194 6194 6194) (6194 6194 6194 6194 6194 6194 6194) (4227 4227) (3934 3934 3934 3934 3934 3934) (4786 4786 4786 4786 4786 4786 4786 4786 4786 4786) (3837 3837 3837 3837 3837 3837 3837 3837) (5112 5112 5112 5112 5112) (5841 5841 5841) (7329 7329 7329 7329) (3923 3923) (5933 5933 5933) (6775 6775 6775) (3111 3111 3111 3111) (8341 8341 8341 8341 8341 8341 8341) (5884 5884 5884 5884 5884 5884 5884) (5159 5159 5159) (5968 5968 5968 5968 5968 5968 5968 5968 5968) (3962 3962 3962 3962 3962 3962 3962 3962 3962 3962) (3608 3608 3608 3608 3608) (5767 5767 5767 5767 5767 5767 5767 5767 5767 5767) (7606 7606 7606 7606 7606 7606 7606 7606 7606 7606) (6494 6494 6494 6494) (4906 4906) (4974 4974 4974 4974 4974 4974) (4399 4399 4399 4399 4399 4399) (2845 2845 2845 2845 2845) (4631 4631 4631 4631 4631) (3663 3663 3663) (7682 7682 7682 7682 7682 7682) (7221 7221 7221 7221 7221 7221 7221) (8354 8354 8354 8354 8354) (2642 2642 2642 2642 2642 2642 2642 2642 2642 2642) (3713 3713 3713) (4050 4050 4050) (4863 4863 4863) (6817 6817 6817 6817) (4814 4814 4814) (5828 5828 5828 5828 5828 5828 5828 5828) (5072 5072 5072 5072 5072 5072 5072 5072) (5303 5303 5303 5303 5303 5303 5303 5303 5303 5303) (3634 3634 3634 3634 3634 3634 3634 3634 3634 3634) (5646 5646 5646 5646 5646 5646) (4687 4687 4687 4687 4687 4687 4687 4687 4687 4687) (5240 5240 5240 5240 5240 5240 5240 5240) (7657 7657 7657 7657 7657 7657) (6232 6232 6232 6232 6232 6232 6232 6232 6232) (6232 6232 6232 6232 6232 6232))) :lvel (quote ((100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100 100) (100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3) (3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3) (3 3 3 3) (3 3) (3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3) (3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3) (3 3 3 3) (3 3) (3 3 3) (3 3 3) (3 3 3 3) (3 3 3 3 3 3 3) (3 3 3 3 3 3 3) (3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3) (3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3) (3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3) (3 3 3) (3 3 3) (3 3 3 3) (3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "time-scaling"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "time-scaling" (om-load-patch-abs1 "time-scaling" (quote ((let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 108 83) (om-make-point 22 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 278 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 321 134) (om-make-point 24 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 259 105) (om-make-point 66 30) (list 123 345) "(123 345)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 213 67) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 229 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 114 370) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 156 244) (om-make-point 38 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 80 220) (om-make-point 59 30) (list 0.1 11) "(.1 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-TIME-SCALER" (quote r-time-scaler) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "scaling-factor-minmax" "SCALING-FACTOR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "scaling-bpf-1000x1000" "SCALING-BPF-1000X1000" nil) (om-load-inputfun (quote input-funbox) "window-resolution" "WINDOW-RESOLUTION" nil))) (om-make-point 76 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 29 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 28 131) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 41 362) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (9 0 6 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (1 0 9 2 nil 0) (7 0 9 3 nil 0) (11 0 10 0 nil 0) (13 0 11 1 nil 0) (0 0 11 6 nil 0) (6 0 12 0 nil 0))) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 54 443) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6050 7150) (3612 5988 6025 8375) (6325 7475 7512 8688 8750 9850) (5150 6250) (6325 7475 7512 8688 8750 9850) (2750 6250 6312 9888) (3625 4775 4850 5950) (2712 3875 3950 5050 5125 6288 6312 7475 7550 8650 8725 9888) (2450 3550 3612 4788 4825 5975) (4825 5975 6050 7150) (2450 5950 6012 9588) (2400 3600 4800 6000 7200 8400 9600 2700 3900 5100 6300 7500 8700 9900) (6350 7450 7525 8675) (6325 7475 7512 8688 8750 9850) (2750 3850 3912 5088 5125 6275) (3612 5988 6025 8375) (2450 3550 3612 4788 4825 5975))) :lonset (quote (63 5041 10620 16785 22967 28285 33502 38674 44531 50321 55139 60568 66535 72662 78242 83463 89188 94913)) :ldur (quote ((4977 4977) (5579 5579 5579 5579) (6165 6165 6165 6165 6165 6165) (6182 6182) (5318 5318 5318 5318 5318 5318) (5217 5217 5217 5217) (5172 5172 5172 5172) (5857 5857 5857 5857 5857 5857 5857 5857 5857 5857 5857 5857) (5790 5790 5790 5790 5790 5790) (4817 4817 4817 4817) (5429 5429 5429 5429) (5967 5967 5967 5967 5967 5967 5967 5967 5967 5967 5967 5967 5967 5967) (6127 6127 6127 6127) (5580 5580 5580 5580 5580 5580) (5221 5221 5221 5221 5221 5221) (5725 5725 5725 5725) (5725 5725 5725 5725 5725 5725))) :lvel (quote ((100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((3 3) (3 3 3 3) (3 3 3 3 3 3) (3 3) (3 3 3 3 3 3) (3 3 3 3) (3 3 3 3) (3 3 3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3) (3 3 3 3) (3 3 3 3 3 3 3 3 3 3 3 3 3 3) (3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3) (3 3 3 3 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "time-scaling"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 229 175) (quote "This is a study on the harmonic$disposition for Luigi Nono's 'A Carlo$ Scarpa'. Below are the original$ 1/16-tone symmetries and $detunings for Nonos piece.$To the right is an expermient$replacing the input materials.") "" (om-make-point 23 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 431 227) (om-make-point 358 30) (list 12.5 -12.5 25 225 150 -25 -50 -75 75 -150 -75 -25 50 75) "(12.5 -12.5 25 225 150 -25 -50 -75 75 -150 -75 -25 50  75)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "choose-detunings" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 579 299) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 242 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 226 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 99 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 294 341) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 12 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 251 38) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 342 420) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 242 420) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 3 0 nil 0) (6 0 4 0 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "choose-detunings" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 482 195) (om-make-point 92 30) (list 1 2 3 4 5 6 7) "(1 2 3 4 5 6 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "choose-octaves" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "fundamentals" nil) (om-load-inputfun (quote input-funbox) "" "possible-octaves" nil))) (om-make-point 456 257) nil nil "&" (list (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 324 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 365 217) (om-make-point 28 26) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 259) (om-make-point 33 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 289 180) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 361 89) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 135 58) (quote "Number of chord notes") "" (om-make-point 143 159) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 119 159) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 71 158) (om-make-point 26 33) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 51 224) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 7 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 261 425) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "possible-octaves" 1 (om-make-point 167 40) "" "possible-octaves" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "fundamentals" 0 (om-make-point 5 40) "" "fundamentals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 308 506) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 208 506) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (8 0 3 1 nil 0) (11 0 4 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (12 0 9 0 nil 0) (0 0 10 0 nil 0) (10 1 13 0 nil 0) (10 0 14 0 nil 0))) 1 "choose-octaves" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 266 254) (om-make-point 168 96) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2500) (2538) (2712) (2625) (2675) (2588) (2638) (2738) (2725) (2700) (2612) (2662) (2625) (2588) (2725) (2712) (2600) (2650) (2662) (2550) (2675) (2575) (2612) (2712) (2588) (2625) (2688) (2662) (2725) (2650) (2612) (2675) (2638) (2700) (2525) (2738) (2612) (2562) (2512) (2625) (2700) (2588) (2525) (2538) (2612) (2550) (2675) (2625) (2688) (2662) (2712) (2575) (2650) (2638) (2700) (2712) (2588) (2738) (2725) (2600) (2700) (2638) (2575) (2600) (2662) (2700))) :lonset (quote (0 160 283 431 572 807 989 1196 1464 1599 1793 2092 2251 2354 2444 2657 2966 3102 3393 3754 4040 4256 4379 4558 4805 4989 5198 5450 5748 6004 6139 6289 6486 6648 6963 7231 7488 7691 7898 8064 8306 8468 8623 8715 8844 8941 9092 9237 9435 9767 9937 10087 10232 10472 10708 10920 11170 11478 11645 11805 12007 12249 12445 12715 13058 13292 13432)) :ldur (quote ((160) (123) (148) (141) (235) (182) (207) (268) (135) (194) (299) (159) (103) (90) (213) (309) (136) (291) (361) (286) (216) (123) (179) (247) (184) (209) (252) (298) (256) (135) (150) (197) (162) (315) (268) (257) (203) (207) (166) (242) (162) (155) (92) (129) (97) (151) (145) (198) (332) (170) (150) (145) (240) (236) (212) (250) (308) (167) (160) (202) (242) (196) (270) (343) (234) (140))) :lvel (quote ((63) (63) (63) (64) (64) (64) (64) (65) (65) (65) (66) (66) (67) (67) (68) (69) (70) (70) (71) (72) (72) (73) (73) (73) (73) (72) (72) (71) (71) (70) (69) (69) (68) (68) (67) (67) (66) (66) (66) (65) (65) (65) (65) (64) (64) (64) (64) (64) (64) (64) (63) (63) (63) (63) (62) (62) (62) (61) (61) (60) (60) (59) (58) (58) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 708 389) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ff) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-REBUILD-CHORDSEQ" (quote r-rebuild-chordseq) (quote ((om-load-inputfun (quote input-funbox) "instead-of-chordseq-list" "INSTEAD-OF-CHORDSEQ-LIST" (list 0)))) (om-make-point 277 173) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 340 20) (om-make-point 55 30) 13400 "13400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 254 24) (om-make-point 90 30) (list 2500 2750) "(2500 2750)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 367 68) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 389 53) (om-make-point 35 30) 12.5 "12.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 470 16) (om-make-point 45 30) 12.5 "12.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FULL-RANGE" (quote r-full-range) (quote ((om-load-inputfun (quote input-funbox) "CENTS-STEP" "CENTS-STEP" nil))) (om-make-point 434 60) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GENERAL-BPF-MELODY" (quote r-general-bpf-melody) (quote ((om-load-inputfun (quote input-funbox) "midicents-range-minmax" "MIDICENTS-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil) (om-load-inputfun (quote input-funbox) "cents-interval-size" "CENTS-INTERVAL-SIZE" nil) (om-load-inputfun (quote input-funbox) "instrumental-range-midicents" "INSTRUMENTAL-RANGE-MIDICENTS" nil))) (om-make-point 317 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 414 529) (om-make-point 222 155) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4912 4975) (2613 3663 5013 6126 6188 7188 8688 8513) (2687 3837 6387 6462 7537 8737 8787 8662) (1350 2612 2700 2700 3675 7400 7400 7400 8575) (2825 2625 7488 7425 8688) (5000 6138 7313) (5013 6288 7288) (1563 1488 3963 5063 5213 8788) (1500 2712 2700 2775 3950 5175 5050 6400) (2688 4050 6312 7425 7575) (1424 1487 2537 2600 3787 5162 6137 7462 8462) (2637 2887 3837 3787 8637 8687) (1500 2600 2575 4875 7350 7500) (1538 1538 1400 3763 5063 6176 7363 7538 8576) (3975 3950 3850 5112 7475) (5337 6287 7662 7524) (1475 1450 1475 5075) (4000 3775) (1412 6312) (2538 2500 3775 4938 5000 6225 6125 8475) (1700 1550 2662 3950 5300 7450 8625) (2650 5200) (1387 1487 4987 4862 6237 7387) (1562 1462 2687 5137 5087 7462 7362 7437 8724 8700) (1413 1463 2576 2538 3938 3938 5063 6138) (5000 6300 6238 6238 7400) (6263 7638 7463) (4012 4912 8587 8512) (1600 2575) (2575 2800 5125) (2687 3887 3662) (1550 7500 7550 8625) (1363 2863 2613 5013 7363 7426 8563) (1725 1512 3875 3875 5175 6225 8625) (5975 7250 8675) (1550 1588 5288 5063 4988 6363 6188 6388 7513) (1262 1387 3824 3837 6237 7437 7487 7387 7562 8562) (1337 1437 2574 6237 6312) (1237 1262 2487 3637 4924 5137 6087 6187 6262 7387) (1350 1350 1450 2575 2550 6150 7275 7500 8675 8775) (2925 2625 4950 6350) (1463 1338) (2750 2375 2450 3575 8450 8450) (1563 2488 3813 3888 4926 5013) (2462 2762 3962 3762 6224) (1425 6375 7375 8775 8525) (5025 6350 7450) (1350 1450 2600 6450 7650 8600) (1713 2838 2738 3963 5113 5113 7713) (1487 5212 5050 6112 8612) (1437 2662 3887 3924 4962 5262 4962 5124 6162 8737) (4950 4988 6100) (1425 2725 7675) (1488 3850 3863) (1725 2675 4050 5175) (2737 4062 8937) (1338 1238 1613 1338 1313 3838 6113 6163) (4013 5288 5088 6263 7613 7388 8963 8726) (1538 1750 1550 3850 5175 6275 6275 6400 7450 8875) (1388 3825 3875 4925 6125 6275 6125 8525 8675 8675) (1650 2775 5050 5112 6450 7488) (1426 1426 1588 2650 2788 3988 5263 5113 7363 8626) (2550 5050 6188 6200 6100 7350 7425 8500) (1412 2575 3875 3875 7325 8575) (1312 1387 1687 1437 4012 6274 7312 7437 8737) (1725 2775 6325 6525 7475 7512))) :lonset (quote (475 4217 8814 13292 19028 24261 29804 36941 44193 47747 52134 58951 65923 72103 74415 81696 86066 92192 96982 105159 111353 117547 121774 125708 130493 134331 139443 145284 152613 156536 162469 169244 172354 180695 186579 191738 197705 201667 205275 211042 218648 225143 230049 235022 239422 242267 246897 250560 258242 265463 273818 276460 280173 284223 289086 295902 300717 306545 311617 316920 320554 326200 330888 336128 343785 350017 356249)) :ldur (quote ((3742 3742) (4596 4596 4596 4596 4596 4596 4596 4596) (4479 4479 4479 4479 4479 4479 4479 4479) (5735 5735 5735 5735 5735 5735 5735 5735 5735) (5233 5233 5233 5233 5233) (5543 5543 5543) (7137 7137 7137) (7252 7252 7252 7252 7252 7252) (3554 3554 3554 3554 3554 3554 3554 3554) (4387 4387 4387 4387 4387) (6817 6817 6817 6817 6817 6817 6817 6817 6817) (6972 6972 6972 6972 6972 6972) (6180 6180 6180 6180 6180 6180) (2312 2312 2312 2312 2312 2312 2312 2312 2312) (7281 7281 7281 7281 7281) (4370 4370 4370 4370) (6126 6126 6126 6126) (4790 4790) (8177 8177) (6194 6194 6194 6194 6194 6194 6194 6194) (6194 6194 6194 6194 6194 6194 6194) (4227 4227) (3934 3934 3934 3934 3934 3934) (4786 4786 4786 4786 4786 4786 4786 4786 4786 4786) (3837 3837 3837 3837 3837 3837 3837 3837) (5112 5112 5112 5112 5112) (5841 5841 5841) (7329 7329 7329 7329) (3923 3923) (5933 5933 5933) (6775 6775 6775) (3111 3111 3111 3111) (8341 8341 8341 8341 8341 8341 8341) (5884 5884 5884 5884 5884 5884 5884) (5159 5159 5159) (5968 5968 5968 5968 5968 5968 5968 5968 5968) (3962 3962 3962 3962 3962 3962 3962 3962 3962 3962) (3608 3608 3608 3608 3608) (5767 5767 5767 5767 5767 5767 5767 5767 5767 5767) (7606 7606 7606 7606 7606 7606 7606 7606 7606 7606) (6494 6494 6494 6494) (4906 4906) (4974 4974 4974 4974 4974 4974) (4399 4399 4399 4399 4399 4399) (2845 2845 2845 2845 2845) (4631 4631 4631 4631 4631) (3663 3663 3663) (7682 7682 7682 7682 7682 7682) (7221 7221 7221 7221 7221 7221 7221) (8354 8354 8354 8354 8354) (2642 2642 2642 2642 2642 2642 2642 2642 2642 2642) (3713 3713 3713) (4050 4050 4050) (4863 4863 4863) (6817 6817 6817 6817) (4814 4814 4814) (5828 5828 5828 5828 5828 5828 5828 5828) (5072 5072 5072 5072 5072 5072 5072 5072) (5303 5303 5303 5303 5303 5303 5303 5303 5303 5303) (3634 3634 3634 3634 3634 3634 3634 3634 3634 3634) (5646 5646 5646 5646 5646 5646) (4687 4687 4687 4687 4687 4687 4687 4687 4687 4687) (5240 5240 5240 5240 5240 5240 5240 5240) (7657 7657 7657 7657 7657 7657) (6232 6232 6232 6232 6232 6232 6232 6232 6232) (6232 6232 6232 6232 6232 6232))) :lvel (quote ((100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100 100) (100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3) (3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3) (3 3 3 3) (3 3) (3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3) (3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3) (3 3 3 3) (3 3) (3 3 3) (3 3 3) (3 3 3 3) (3 3 3 3 3 3 3) (3 3 3 3 3 3 3) (3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3) (3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3) (3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3) (3 3 3) (3 3 3) (3 3 3 3) (3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 880 700) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-NONO-A-CARLO-SCARPA 2" (quote r-nono-a-carlo-scarpa) (quote ((om-load-inputfun (quote input-funbox) "fund-notes" "FUND-NOTES" nil) (om-load-inputfun (quote input-funbox) "octaves-1-7-lists" "OCTAVES-1-7-LISTS" nil) (om-load-inputfun (quote input-funbox) "cents-detuning-lists" "CENTS-DETUNING-LISTS" nil))) (om-make-point 424 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 41 514) (om-make-point 222 155) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6050 7150) (3612 5988 6025 8375) (6325 7475 7512 8688 8750 9850) (5150 6250) (6325 7475 7512 8688 8750 9850) (2750 6250 6312 9888) (3625 4775 4850 5950) (2712 3875 3950 5050 5125 6288 6312 7475 7550 8650 8725 9888) (2450 3550 3612 4788 4825 5975) (4825 5975 6050 7150) (2450 5950 6012 9588) (2400 3600 4800 6000 7200 8400 9600 2700 3900 5100 6300 7500 8700 9900) (6350 7450 7525 8675) (6325 7475 7512 8688 8750 9850) (2750 3850 3912 5088 5125 6275) (3612 5988 6025 8375) (2450 3550 3612 4788 4825 5975))) :lonset (quote (63 5041 10620 16785 22967 28285 33502 38674 44531 50321 55139 60568 66535 72662 78242 83463 89188 94913)) :ldur (quote ((4977 4977) (5579 5579 5579 5579) (6165 6165 6165 6165 6165 6165) (6182 6182) (5318 5318 5318 5318 5318 5318) (5217 5217 5217 5217) (5172 5172 5172 5172) (5857 5857 5857 5857 5857 5857 5857 5857 5857 5857 5857 5857) (5790 5790 5790 5790 5790 5790) (4817 4817 4817 4817) (5429 5429 5429 5429) (5967 5967 5967 5967 5967 5967 5967 5967 5967 5967 5967 5967 5967 5967) (6127 6127 6127 6127) (5580 5580 5580 5580 5580 5580) (5221 5221 5221 5221 5221 5221) (5725 5725 5725 5725) (5725 5725 5725 5725 5725 5725))) :lvel (quote ((100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((3 3) (3 3 3 3) (3 3 3 3 3 3) (3 3) (3 3 3 3 3 3) (3 3 3 3) (3 3 3 3) (3 3 3 3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3) (3 3 3 3) (3 3 3 3 3 3 3 3 3 3 3 3 3 3) (3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3) (3 3 3 3 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 880 700) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 106 220) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-A-CARLO-SCARPA-NONO-PRESET" (quote r-a-carlo-scarpa-nono-preset) (quote ((om-load-inputfun (quote input-funbox) "" "NOTHING" nil))) (om-make-point 29 263) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-NONO-A-CARLO-SCARPA" (quote r-nono-a-carlo-scarpa) (quote ((om-load-inputfun (quote input-funbox) "fund-notes" "FUND-NOTES" nil) (om-load-inputfun (quote input-funbox) "octaves-1-7-lists" "OCTAVES-1-7-LISTS" nil) (om-load-inputfun (quote input-funbox) "cents-detuning-lists" "CENTS-DETUNING-LISTS" nil))) (om-make-point 47 354) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 0 0 nil 0) (21 0 1 0 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (7 1 6 0 nil 0) (5 0 6 1 nil 0) (8 0 7 0 nil 0) (15 0 8 0 nil 0) (13 0 14 0 nil 0) (10 0 15 0 nil 0) (9 0 15 1 nil 0) (11 0 15 2 nil 0) (12 0 15 3 nil 0) (14 0 15 4 nil 0) (0 0 16 0 nil 0) (7 1 17 0 nil 0) (6 0 17 1 nil 0) (4 0 17 2 nil 0) (1 0 18 0 nil 0) (19 0 20 0 nil 0) (20 0 21 0 nil 0) (20 1 21 1 nil 0) (20 2 21 2 nil 0))) nil 6.13))
