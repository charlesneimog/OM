; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 10 10) (om-make-point 565 23) (om-make-point 501 591) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "lachenmann-klangtypen" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 150 41) (quote "With some additions.") "" (om-make-point 23 52) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 192 85) (quote "Evaluate to see suggestions of \"Klangtypen der neuen Musik\".") "" (om-make-point 82 407) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 334 350) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 288 420) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 326 280) (om-make-point 38 30) 2000 "2000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 265 314) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 330 96) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-PROBABILITY-OF-LIST-ELEMENTS" (quote r-probability-of-list-elements) (quote ((om-load-inputfun (quote input-funbox) "any-kind-of-list" "ANY-KIND-OF-LIST" nil) (om-load-inputfun (quote input-funbox) "probability-of-each-element" "PROBABILITY-OF-EACH-ELEMENT" nil) (om-load-inputfun (quote input-funbox) "output-length" "OUTPUT-LENGTH" nil))) (om-make-point 152 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 228 64) (om-make-point 106 30) (list 2 1 1 1 1 1 1) "(2 1 1 1  1 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 50 17) (om-make-point 329 30) (list (quote klang) (quote kadenz) (quote chaos) (quote fluktuation) (quote struktur) (quote textur) (quote kollaps)) "(klang kadenz chaos fluktuation struktur textur kollaps)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (9 0 7 0 nil 0) (8 0 7 1 nil 0) (6 0 7 2 nil 0))) nil 6.13))
