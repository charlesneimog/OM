; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 442 60) (om-make-point 109 115) (om-make-point 870 628) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "micro-messiaen" (quote ((let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 596 344) (om-make-point 17 30) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 344 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 230 86) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 164 89) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 170 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 395 48) (om-make-point 193 56) (list (list 0 4 5 6 8) (list 0 4 7 13 17) (list 0 4 8 9 14 17 23) (list 0 2 3 5 6) (list 0 1 3 5 8 9)) "((0 4 5 6 8) (0 4 7 13 17)$(0 4 8 9 14 17 23 ) (0 2 3 5 6)$ (0 1 3 5 8 9))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 268 91) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 9 33) (om-make-point 268 56) (list (list 150 50 225 150 75 200 150 25 250) (list 150 150 150 150 150 150) (list 75 25 125 50 250 75 50 250 25 175 200)) "((150 50 225 150 75 200 150 25 250)$(150 150 150 150 150 150)$ (75 25 125 50 250 75 50 250 25 175 200))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-CUSTOM-MESSIAEN-MODES" (quote r-custom-messiaen-modes) (quote ((om-load-inputfun (quote input-funbox) "" "CUSTOM-MODES" nil) (om-load-inputfun (quote input-funbox) "" "WHICH-MODE" nil) (om-load-inputfun (quote input-funbox) "" "TRANSPOSISTION-CENTS" nil))) (om-make-point 136 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 401 281) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 406 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 599 300) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 509 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 742 38) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 718 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 680 27) (om-make-point 34 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 593 20) (om-make-point 34 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 610 51) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 344 19) (om-make-point 48 30) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 290 9) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 298 87) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 621 133) (om-make-point 122 119) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 8300 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MESSIAEN-CHORDS-ON-FUNDAMENTAL" (quote r-messiaen-chords-on-fundamental) (quote ((om-load-inputfun (quote input-funbox) "" "LISTS-OF-CHORDS" nil) (om-load-inputfun (quote input-funbox) "" "FUNDAMENTAL" nil))) (om-make-point 395 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MESSIAEN-STEP-CHORDS" (quote r-messiaen-step-chords) (quote ((om-load-inputfun (quote input-funbox) "" "MIDICENTS-MODE" nil) (om-load-inputfun (quote input-funbox) "" "PATTERN-INCREMENT" nil))) (om-make-point 200 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 98 397) (om-make-point 590 205) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400 7800 8250 8825 9475) (7400 7900 8200 9000 9475) (7400 8050 8275 8975 9450) (7400 7875 8075 8900 9325) (7400 7875 8300 9075 9350) (7400 7825 8200 8975 9425) (7400 7675 8050 8800 9300) (7400 7850 8225 8850 9275) (7400 7900 8225 8875 9500) (7400 7825 8275 9000 9400) (7400 8025 8425 9025 9525) (4600 5200 5350 5500 5800) (5000 5300 5450 5750 5900) (7900 8125 8325 8500 8750) (7900 8250 8275 8675 8725) (7900 8075 8325 8525 8750) (7900 8300 8350 8725 8800) (7900 8100 8325 8550 8750) (7900 8175 8325 8600 8750) (7900 8275 8350 8700 8725) (4800 5300 5500 5650 5925) (4800 5450 5600 5625 6025) (4800 5375 5400 5650 5850) (4800 5250 5500 5650 5925) (4800 5425 5575 5625 6000) (4800 5375 5425 5650 5875) (4800 5275 5500 5650 5925) (4800 5475 5625 5700 6050) (4800 5375 5450 5650 5825) (7900 8325 8575 8600 8975) (7900 8525 8550 8725 9000) (7900 8300 8475 8675 8775) (7900 8400 8600 8675 8825) (7900 8550 8625 8650 8825) (7900 8375 8400 8525 8825) (7900 8375 8500 8550 8875) (7900 8325 8375 8625 8750) (7900 8175 8425 8500 8800) (7900 8350 8425 8475 8750) (7900 8400 8450 8700 8900) (7700 8125 8375 8400 8775) (7700 8325 8350 8525 8800) (7700 8100 8275 8475 8575) (7700 8200 8400 8475 8625) (7700 8350 8425 8450 8625) (7700 8175 8200 8325 8625) (7700 8175 8300 8350 8675) (7700 8125 8175 8425 8550) (7700 7975 8225 8300 8600) (7700 8150 8225 8275 8550) (7700 8200 8250 8500 8700) (8000 8600 8750 8900 9200) (8300 8700 9150 9725 10375) (8300 8800 9100 9900 10375) (8300 8950 9175 9875 10350) (8300 8775 8975 9800 10225) (8300 8775 9200 9975 10250) (8300 8725 9100 9875 10325) (8300 8575 8950 9700 10200) (8300 8750 9125 9750 10175) (8300 8800 9125 9775 10400) (8300 8725 9175 9900 10300) (8300 8925 9325 9925 10425) (6000 6225 6425 6600 6850) (6000 6350 6375 6775 6825) (6000 6175 6425 6625 6850) (6000 6400 6450 6825 6900) (6000 6200 6425 6650 6850) (6000 6275 6425 6700 6850) (6000 6375 6450 6800 6825) (7400 7900 8275 9175 9800) (7400 8050 8475 9325 9900) (7400 7975 8400 9250 9725) (7400 7850 8300 9125 9800) (7400 8025 8450 9300 9875) (7400 7975 8400 9250 9750) (7400 7875 8325 9150 9800) (7400 8075 8500 9350 9925) (7400 7975 8400 9250 9700) (4300 4525 4725 4900 5150) (4300 4650 4675 5075 5125) (4300 4475 4725 4925 5150) (4300 4700 4750 5125 5200) (4300 4500 4725 4950 5150) (4300 4575 4725 5000 5150) (4300 4675 4750 5100 5125) (6200 6350 6650 6950 7400 7550) (7300 7600 7750 8050 8200) (8300 8700 9150 9725 10375) (8300 8800 9100 9900 10375) (8300 8950 9175 9875 10350) (8300 8775 8975 9800 10225) (8300 8775 9200 9975 10250) (8300 8725 9100 9875 10325) (8300 8575 8950 9700 10200) (8300 8750 9125 9750 10175) (8300 8800 9125 9775 10400) (8300 8725 9175 9900 10300) (8300 8925 9325 9925 10425) (6300 6800 7000 7150 7425) (6300 6950 7100 7125 7525) (6300 6875 6900 7150 7350) (6300 6750 7000 7150 7425) (6300 6925 7075 7125 7500) (6300 6875 6925 7150 7375) (6300 6775 7000 7150 7425) (6300 6975 7125 7200 7550) (6300 6875 6950 7150 7325) (5600 6025 6450 6700 7200 7625 8400) (5600 5875 6500 6525 7125 7500 8275) (5600 6050 6450 6625 7100 7475 8225) (5600 6100 6600 6800 7325 7700 8325) (5600 6025 6675 6750 7275 7600 8250) (5600 6225 6700 6725 7275 7725 8450) (5600 6000 6475 6600 7275 7675 8275) (5600 6100 6525 6575 7225 7675 8250) (5600 6250 6525 6775 7350 7650 8450) (5600 6075 6525 6600 7300 7525 8225) (5600 6075 6575 6625 7350 7550 8375) (7500 7725 7925 8100 8350) (7500 7850 7875 8275 8325) (7500 7675 7925 8125 8350) (7500 7900 7950 8325 8400) (7500 7700 7925 8150 8350) (7500 7775 7925 8200 8350) (7500 7875 7950 8300 8325) (4800 5100 5250 5550 5700) (6200 6325 6575 6775 6975) (6200 6500 6525 6900 6975) (6200 6475 6650 6925 6950) (6200 6400 6600 6700 6825) (6200 6575 6650 6800 6850) (6200 6475 6500 6675 6925) (6200 6300 6425 6725 6800) (6200 6350 6400 6725 6775) (6200 6375 6625 6750 7000) (6200 6500 6575 6875 6900) (6200 6525 6575 6850 7025) (6900 7500 7950 8850 9450) (6100 6525 6950 7200 7700 8125 8900) (6100 6375 7000 7025 7625 8000 8775) (6100 6550 6950 7125 7600 7975 8725) (6100 6600 7100 7300 7825 8200 8825) (6100 6525 7175 7250 7775 8100 8750) (6100 6725 7200 7225 7775 8225 8950) (6100 6500 6975 7100 7775 8175 8775) (6100 6600 7025 7075 7725 8175 8750) (6100 6750 7025 7275 7850 8150 8950) (6100 6575 7025 7100 7800 8025 8725) (6100 6575 7075 7125 7850 8050 8875) (8000 8400 8850 9425 10075) (8000 8500 8800 9600 10075) (8000 8650 8875 9575 10050) (8000 8475 8675 9500 9925) (8000 8475 8900 9675 9950) (8000 8425 8800 9575 10025) (8000 8275 8650 9400 9900) (8000 8450 8825 9450 9875) (8000 8500 8825 9475 10100) (8000 8425 8875 9600 10000) (8000 8625 9025 9625 10125) (4700 5000 5150 5450 5600) (5400 5850 6525 6675 7375 7800 8650) (5400 6025 6600 6675 7450 7875 8725) (5400 5975 6475 6675 7300 7750 8575) (5400 5875 6525 6675 7375 7800 8650) (5400 6075 6650 6675 7500 7925 8775) (5400 5975 6425 6675 7325 7700 8600) (5400 5900 6525 6675 7375 7800 8650) (5400 6050 6625 6675 7475 7900 8750) (5400 5975 6450 6675 7275 7725 8550) (6000 6125 6375 6575 6775) (6000 6300 6325 6700 6775) (6000 6275 6450 6725 6750) (6000 6200 6400 6500 6625) (6000 6375 6450 6600 6650) (6000 6275 6300 6475 6725) (6000 6100 6225 6525 6600) (6000 6150 6200 6525 6575) (6000 6175 6425 6550 6800) (6000 6300 6375 6675 6700) (6000 6325 6375 6650 6825) (8300 8800 9175 10075 10700) (8300 8950 9375 10225 10800) (8300 8875 9300 10150 10625) (8300 8750 9200 10025 10700) (8300 8925 9350 10200 10775) (8300 8875 9300 10150 10650) (8300 8775 9225 10050 10700) (8300 8975 9400 10250 10825) (8300 8875 9300 10150 10600) (6700 7300 7900 8050 8800 9250 10150) (6100 6700 6850 7000 7300) (4200 4625 4875 4900 5275) (4200 4825 4850 5025 5300) (4200 4600 4775 4975 5075) (4200 4700 4900 4975 5125) (4200 4850 4925 4950 5125) (4200 4675 4700 4825 5125) (4200 4675 4800 4850 5175) (4200 4625 4675 4925 5050) (4200 4475 4725 4800 5100) (4200 4650 4725 4775 5050) (4200 4700 4750 5000 5200) (4100 4225 4475 4675 4875) (4100 4400 4425 4800 4875) (4100 4375 4550 4825 4850) (4100 4300 4500 4600 4725) (4100 4475 4550 4700 4750) (4100 4375 4400 4575 4825) (4100 4200 4325 4625 4700) (4100 4250 4300 4625 4675) (4100 4275 4525 4650 4900) (4100 4400 4475 4775 4800) (4100 4425 4475 4750 4925) (7800 8225 8650 8900 9400 9825 10600) (7800 8075 8700 8725 9325 9700 10475) (7800 8250 8650 8825 9300 9675 10425) (7800 8300 8800 9000 9525 9900 10525) (7800 8225 8875 8950 9475 9800 10450) (7800 8425 8900 8925 9475 9925 10650) (7800 8200 8675 8800 9475 9875 10475) (7800 8300 8725 8775 9425 9875 10450) (7800 8450 8725 8975 9550 9850 10650) (7800 8275 8725 8800 9500 9725 10425) (7800 8275 8775 8825 9550 9750 10575) (5300 5800 6175 7075 7700) (5300 5950 6375 7225 7800) (5300 5875 6300 7150 7625) (5300 5750 6200 7025 7700) (5300 5925 6350 7200 7775) (5300 5875 6300 7150 7650) (5300 5775 6225 7050 7700) (5300 5975 6400 7250 7825) (5300 5875 6300 7150 7600) (8600 9050 9725 9875 10575 11000 11850) (8600 9225 9800 9875 10650 11075 11925) (8600 9175 9675 9875 10500 10950 11775) (8600 9075 9725 9875 10575 11000 11850) (8600 9275 9850 9875 10700 11125 11975) (8600 9175 9625 9875 10525 10900 11800) (8600 9100 9725 9875 10575 11000 11850) (8600 9250 9825 9875 10675 11100 11950) (8600 9175 9650 9875 10475 10925 11750) (6400 7000 7150 7300 7600) (8000 8400 8850 9425 10075) (8000 8500 8800 9600 10075) (8000 8650 8875 9575 10050) (8000 8475 8675 9500 9925) (8000 8475 8900 9675 9950) (8000 8425 8800 9575 10025) (8000 8275 8650 9400 9900) (8000 8450 8825 9450 9875) (8000 8500 8825 9475 10100) (8000 8425 8875 9600 10000) (8000 8625 9025 9625 10125) (5600 5750 6050 6350 6800 6950) (5600 6100 6475 7375 8000) (5600 6250 6675 7525 8100) (5600 6175 6600 7450 7925) (5600 6050 6500 7325 8000) (5600 6225 6650 7500 8075) (5600 6175 6600 7450 7950) (5600 6075 6525 7350 8000) (5600 6275 6700 7550 8125) (5600 6175 6600 7450 7900) (9000 9600 9750 9900 10200) (5900 6325 6575 6600 6975) (5900 6525 6550 6725 7000) (5900 6300 6475 6675 6775) (5900 6400 6600 6675 6825) (5900 6550 6625 6650 6825) (5900 6375 6400 6525 6825) (5900 6375 6500 6550 6875) (5900 6325 6375 6625 6750) (5900 6175 6425 6500 6800) (5900 6350 6425 6475 6750) (5900 6400 6450 6700 6900) (5500 5950 6625 6775 7475 7900 8750) (5500 6125 6700 6775 7550 7975 8825) (5500 6075 6575 6775 7400 7850 8675) (5500 5975 6625 6775 7475 7900 8750) (5500 6175 6750 6775 7600 8025 8875) (5500 6075 6525 6775 7425 7800 8700) (5500 6000 6625 6775 7475 7900 8750) (5500 6150 6725 6775 7575 8000 8850) (5500 6075 6550 6775 7375 7825 8650) (8800 9200 9650 10225 10875) (8800 9300 9600 10400 10875) (8800 9450 9675 10375 10850) (8800 9275 9475 10300 10725) (8800 9275 9700 10475 10750) (8800 9225 9600 10375 10825) (8800 9075 9450 10200 10700) (8800 9250 9625 10250 10675) (8800 9300 9625 10275 10900) (8800 9225 9675 10400 10800) (8800 9425 9825 10425 10925) (4700 5300 5750 6650 7250) (5300 5900 6350 7250 7850) (6100 6250 6550 6850 7300 7450) (8400 8900 9100 9250 9525) (8400 9050 9200 9225 9625) (8400 8975 9000 9250 9450) (8400 8850 9100 9250 9525) (8400 9025 9175 9225 9600) (8400 8975 9025 9250 9475) (8400 8875 9100 9250 9525) (8400 9075 9225 9300 9650) (8400 8975 9050 9250 9425) (6000 6450 7125 7275 7975 8400 9250) (6000 6625 7200 7275 8050 8475 9325) (6000 6575 7075 7275 7900 8350 9175) (6000 6475 7125 7275 7975 8400 9250) (6000 6675 7250 7275 8100 8525 9375) (6000 6575 7025 7275 7925 8300 9200) (6000 6500 7125 7275 7975 8400 9250) (6000 6650 7225 7275 8075 8500 9350) (6000 6575 7050 7275 7875 8325 9150) (5300 5700 6150 6725 7375) (5300 5800 6100 6900 7375) (5300 5950 6175 6875 7350) (5300 5775 5975 6800 7225) (5300 5775 6200 6975 7250) (5300 5725 6100 6875 7325) (5300 5575 5950 6700 7200) (5300 5750 6125 6750 7175) (5300 5800 6125 6775 7400) (5300 5725 6175 6900 7300) (5300 5925 6325 6925 7425) (5000 5600 6050 6950 7550) (8300 8725 8975 9000 9375) (8300 8925 8950 9125 9400) (8300 8700 8875 9075 9175) (8300 8800 9000 9075 9225) (8300 8950 9025 9050 9225) (8300 8775 8800 8925 9225) (8300 8775 8900 8950 9275) (8300 8725 8775 9025 9150) (8300 8575 8825 8900 9200) (8300 8750 8825 8875 9150) (8300 8800 8850 9100 9300))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000 114000 115000 116000 117000 118000 119000 120000 121000 122000 123000 124000 125000 126000 127000 128000 129000 130000 131000 132000 133000 134000 135000 136000 137000 138000 139000 140000 141000 142000 143000 144000 145000 146000 147000 148000 149000 150000 151000 152000 153000 154000 155000 156000 157000 158000 159000 160000 161000 162000 163000 164000 165000 166000 167000 168000 169000 170000 171000 172000 173000 174000 175000 176000 177000 178000 179000 180000 181000 182000 183000 184000 185000 186000 187000 188000 189000 190000 191000 192000 193000 194000 195000 196000 197000 198000 199000 200000 201000 202000 203000 204000 205000 206000 207000 208000 209000 210000 211000 212000 213000 214000 215000 216000 217000 218000 219000 220000 221000 222000 223000 224000 225000 226000 227000 228000 229000 230000 231000 232000 233000 234000 235000 236000 237000 238000 239000 240000 241000 242000 243000 244000 245000 246000 247000 248000 249000 250000 251000 252000 253000 254000 255000 256000 257000 258000 259000 260000 261000 262000 263000 264000 265000 266000 267000 268000 269000 270000 271000 272000 273000 274000 275000 276000 277000 278000 279000 280000 281000 282000 283000 284000 285000 286000 287000 288000 289000 290000 291000 292000 293000 294000 295000 296000 297000 298000 299000 300000 301000 302000 303000 304000 305000 306000 307000 308000 309000 310000 311000 312000 313000 314000 315000 316000 317000 318000 319000 320000 321000 322000 323000 324000 325000 326000 327000 328000 329000 330000 331000 332000 333000 334000 335000 336000 337000 338000 339000 340000 341000 342000)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quoteloffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9) (9 9 9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 808 640) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (20 0 8 2 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0) (22 0 12 0 nil 0) (11 0 12 1 nil 0) (17 0 14 0 nil 0) (13 0 14 1 nil 0) (16 0 17 0 nil 0) (15 0 17 1 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (14 0 21 1 nil 0) (23 0 22 0 nil 0) (21 1 22 1 nil 0) (8 0 23 0 nil 0) (1 0 23 1 nil 0) (10 0 24 1 nil 0) (0 0 24 6 nil 0))) nil 6.13))
