; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 10 10) (om-make-point 45 59) (om-make-point 1235 684) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "recursive-pitch-loop-visualization" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 385 182) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (6400) (6750) (9550) (5250) (3850) (8150) (2700))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 44 23) (om-make-point 699 411) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 176 248) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6650) (6500) (7300) (7800) (7550) (6900) (6200) (7050) (7000) (7750))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 880 693) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 7 229) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (7250) (8300) (7500) (7550) (6700) (8100) (8050) (8000) (7350) (6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 163 23) (om-make-point 880 483) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 417 64) (quote "Wrapped into a practical midicent range, we can see less ordered noiselike shapes.") "" (om-make-point 704 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 351 82) (quote "Visual shape of the material without range limitation. It's not clear where the patterns will repeat themselves in new transpositions. So far, we can always see differences in details, while not in the overall shapes.") "" (om-make-point 372 296) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 635 101) (om-make-point 565 199) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21400 21500 21600 21700 21800 21900 22000 22100 22200 22300 22400 22500 22600 22700 22800 22900 23000 23100 23200 23300 23400 23500 23600 23700 23800 23900 24000 24100 24200 24300 24400 24500 24600 24700 24800 24900 25000 25100 25200 25300 25400 25500 25600 25700 25800 25900 26000 26100 26200 26300 26400 26500 26600 26700 26800 26900 27000 27100 27200 27300 27400 27500 27600 27700 27800 27900 28000 28100 28200 28300 28400 28500 28600 28700 28800 28900 29000 29100 29200 29300 29400 29500 29600 29700 29800 29900 30000 30100 30200 30300 30400 30500 30600 30700 30800 30900 31000 31100 31200 31300 31400 31500 31600 31700 31800 31900 32000 32100 32200 32300 32400 32500 32600 32700 32800 32900 33000 33100 33200 33300 33400 33500 33600 33700 33800 33900 34000 34100 34200 34300 34400 34500 34600 34700 34800 34900 35000 35100 35200 35300 35400 35500 35600 35700 35800 35900 36000 36100 36200 36300 36400 36500 36600 36700 36800 36900 37000 37100 37200 37300 37400 37500 37600 37700 37800 37900 38000 38100 38200 38300 38400 38500 38600 38700 38800 38900 39000 39100 39200 39300 39400 39500 39600 39700 39800 39900 40000 40100 40200 40300 40400 40500 40600 40700 40800 40900 41000 41100 41200 41300 41400 41500 41600 41700 41800 41900 42000 42100 42200 42300 42400 42500 42600 42700 42800 42900 43000 43100 43200 43300 43400 43500 43600 43700 43800 43900 44000 44100 44200 44300 44400 44500 44600 44700 44800 44900 45000 45100 45200 45300 45400 45500 45600 45700 45800 45900 46000 46100 46200 46300 46400 46500 46600 46700 46800 46900 47000 47100 47200 47300 47400 47500 47600 47700 47800 47900 48000 48100 48200 48300 48400 48500 48600 48700 48800 48900 49000 49100 49200 49300 49400 49500 49600 49700 49800 49900)) (quote (7350 7150 7750 9250 5250 3650 10050 3700 8800 6000 6100 10400 5100 3800 9850 8250 5250 9400 3450 10600 4600 3450 4050 7200 4050 9350 8800 7750 7650 6750 4900 8000 3950 9850 6400 6700 8400 5600 8900 2600 7900 4800 7450 5700 7550 3350 8650 4050 6400 7550 2700 3750 9950 3500 6300 3350 4950 8000 3800 8200 6150 7250 4600 4850 3750 5800 3900 7450 6250 7100 2500 2350 7750 3200 4050 6400 4850 7900 8600 8400 8250 2400 9000 2300 8100 8200 8350 7700 8700 7250 8500 4100 7550 5050 2900 3900 2600 7700 7450 3300 5850 5850 4950 2450 5300 2400 4450 5100 5950 3550 4800 9250 6350 3550 8850 7950 8650 8450 6250 8100 4700 4700 8700 8100 8450 5800 2700 4300 9250 4900 8200 7750 2650 4750 8700 4250 7400 9250 4050 3850 3500 5550 8600 4750 5000 8200 4800 2700 7500 7350 5350 6900 6050 7200 3950 7650 7250 8800 3850 2450 8500 5250 6350 7800 4900 8100 2400 2900 2400 2500 2550 4350 3200 2400 8400 7900 2500 8950 2650 4200 8300 7100 5200 5300 2650 7900 8450 5000 7200 5950 5700 4500 7600 3800 4500 5300 6950 5250 6150 9350 7100 5600 3950 9350 8700 8650 7250 2600 6050 4800 2250 2950 3550 7200 2750 4500 3050 6600 2350 7850 3400 6800 3800 5650 7450 2250 5050 5550 4850 5650 9350 6800 7300 2400 4850 2900 8500 9050 6700 7000 6800 9250 6250 9050 7300 9000 4850 4150 2650 5350 7100 2650 7200 2300 2450 3100 3400 4200 3900 4450 3950 4450 3500 9300 2550 9150 3650 5900 2450 7200 5950 7350 4950 9300 8500 5200 8200 7650 7050 4600 8350 5850 6800 6700 7000 5450 7150 3850 8450 5700 4700 4200 3800 2850 7300 2800 7050 6500 3600 3050 4300 9250 5050 5900 3100 6800 3350 2350 4750 6900 4550 7700 2550 3650 5100 5750 5850 7350 3500 6900 8050 4450 7150 4300 8550 9250 7700 8700 8150 9350 7000 3900 2400 3200 4900 4350 3650 7050 8450 2750 7950 4350 4750 4500 3450 4400 4900 6150 5300 4550 4250 4150 4850 3350 3700 6100 3450 8900 7300 7450 5700 4150 3600 6600 8250 7850 8050 6300 2500 5950 7550 8750 9300 6850 7200 4050 2250 7400 6050 4300 4550 4900 2400 4200 7100 6700 4600 4750 5650 9350 5800 7950 5400 8200 3400 2550 5750 8600 5900 7800 3300 5700 7400 7150 5900 7550 4500 8600 2200 4550 7900 6350 3650 3450 7750 8900 9150 3850 8350 4000 3150 5250 7200 5750 3700 7250 2250 4450 9300 4450 5500 6550 5750 5800 4950 6350 6300 6250 5600 4250 5600 5400 6000 7500 3500 9100 8300 9150 7050 4250 4350 8650 3350 9250 8100 6500 3500 7650 8900 8850 2850 8900 2300 5450 2300 7600 7050 6000 5900 5000 3150 6250 2200 8100 4650 4950 6650 3850 7150 8050 6150 3050 5700 3950 5800 8800 6900 2300 4650 5800 8150 9200 8200 8950 4550 8800 3200 6250 9250 6450)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1213 701))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-WRAP-TO-RANGE" (quote r-wrap-to-range) (quote ((om-load-inputfun (quote input-funbox) "midicents-lists" "MIDICENTS-LISTS" nil) (om-load-inputfun (quote input-funbox) "minmax-midicents" "MINMAX-MIDICENTS" nil) (om-load-inputfun (quote input-funbox) "wrapping-interval" "WRAPPING-INTERVAL" nil) (om-load-inputfun (quote input-funbox) "number-of-wrapping-intervals" "NUMBER-OF-WRAPPING-INTERVALS" nil))) (om-make-point 519 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 451 41) (om-make-point 97 30) (list 2200 10800) "(2200 10800)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 565 45) (om-make-point 48 30) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 628 40) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 32 332) (om-make-point 245 210) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21400 21500 21600 21700 21800 21900 22000 22100 22200 22300 22400 22500 22600 22700 22800 22900 23000 23100 23200 23300 23400 23500 23600 23700 23800 23900 24000 24100 24200 24300 24400 24500 24600 24700 24800 24900 25000 25100 25200 25300 25400 25500 25600 25700 25800 25900 26000 26100 26200 26300 26400 26500 26600 26700 26800 26900 27000 27100 27200 27300 27400 27500 27600 27700 27800 27900 28000 28100 28200 28300 28400 28500 28600 28700 28800 28900 29000 29100 29200 29300 29400 29500 29600 29700 29800 29900 30000 30100 30200 30300 30400 30500 30600 30700 30800 30900 31000 31100 31200 31300 31400 31500 31600 31700 31800 31900 32000 32100 32200 32300 32400 32500 32600 32700 32800 32900 33000 33100 33200 33300 33400 33500 33600 33700 33800 33900 34000 34100 34200 34300 34400 34500 34600 34700 34800 34900 35000 35100 35200 35300 35400 35500 35600 35700 35800 35900 36000 36100 36200 36300 36400 36500 36600 36700 36800 36900 37000 37100 37200 37300 37400 37500 37600 37700 37800 37900 38000 38100 38200 38300 38400 38500 38600 38700 38800 38900 39000 39100 39200 39300 39400 39500 39600 39700 39800 39900 40000 40100 40200 40300 40400 40500 40600 40700 40800 40900 41000 41100 41200 41300 41400 41500 41600 41700 41800 41900 42000 42100 42200 42300 42400 42500 42600 42700 42800 42900 43000 43100 43200 43300 43400 43500 43600 43700 43800 43900 44000 44100 44200 44300 44400 44500 44600 44700 44800 44900 45000 45100 45200 45300 45400 45500 45600 45700 45800 45900 46000 46100 46200 46300 46400 46500 46600 46700 46800 46900 47000 47100 47200 47300 47400 47500 47600 47700 47800 47900 48000 48100 48200 48300 48400 48500 48600 48700 48800 48900 49000 49100 49200 49300 49400 49500 49600 49700 49800 49900)) (quote (5050 7350 8850 5750 9850 9750 6150 12400 7200 8700 5900 2000 9400 12800 5150 14050 8150 6800 12650 5400 10100 8550 1150 14500 12550 5650 13500 5650 8550 16550 3900 13900 8050 2550 15300 9900 6600 16700 4500 13600 15400 4000 14450 6300 4850 18350 7950 10950 15900 5850 13500 12350 6050 18400 5700 9050 16750 8600 11200 14100 7250 16150 11500 11150 18150 6200 8500 14250 10350 15100 12600 11050 15650 12900 11950 15500 7150 11700 13100 15400 13950 12700 11600 13900 15200 15000 13550 11500 10900 14450 15300 10900 14750 15550 13300 19400 13400 14200 11750 9100 15850 17950 10050 19850 15300 13800 18850 10900 15950 15650 7600 19650 17450 11450 20650 12650 14750 22050 9750 21000 14500 7700 20200 15700 13750 23700 10700 19100 21250 11100 20900 11450 9750 24150 15100 17950 22100 11350 19350 19450 12500 23550 10600 14850 23900 15600 17400 19600 13100 23250 17950 16300 23050 12000 15650 21250 16550 20600 18450 18150 22100 18050 16850 21300 14300 18700 19300 20900 19800 19800 18050 19050 20100 20800 20700 18500 17100 19950 21150 18000 21200 20700 18200 25200 20550 21200 17950 14600 21700 25050 16500 25000 20200 19600 26000 17900 22150 21150 13450 26750 23900 16600 25550 18450 21900 29050 15950 26500 20350 14800 26650 20850 18650 29500 17850 26100 27450 16600 26750 18550 16200 29300 20000 23750 29250 18350 25550 24950 18350 30650 17050 20000 28800 21400 24550 26600 19300 28750 23800 23400 29500 17150 20550 27050 23700 27600 24650 23650 27950 25150 23300 26450 19200 24500 26450 27900 26000 25300 23900 26150 26550 25950 25600 24300 24250 26950 27350 23500 27050 27800 24650 30350 25450 27000 25100 21600 27900 30550 22350 32100 26650 24750 30900 23700 29300 28150 19650 32250 29750 23700 32000 23600 26800 34850 23100 33500 26550 20300 32500 27950 25100 34650 22750 31900 34600 23600 32950 24050 22050 36400 26450 28900 34150 24150 32700 31950 24550 36150 22900 27100 35250 26550 29450 32400 26450 35750 30000 28900 35350 24250 27000 32200 28600 33400 31800 30650 34150 30650 29150 33550 25650 29650 31350 33700 33150 32300 30100 31650 32400 33050 32050 29450 29150 32750 34500 30500 33250 33300 30500 37450 31900 32150 30000 27400 35050 37550 28550 37600 32500 31850 37350 28850 34200 33950 26800 39250 35950 29200 37850 30700 33250 40000 28000 39300 33700 27300 38700 33450 30950 41750 29200 37050 39500 29400 40100 31050 28250 41900 32300 36000 40600 29300 37600 37750 31700 43150 29100 32600 41100 33650 35900 37550 31350 41550 37150 35900 41550 29750 32850 39300 35050 38550 36700 36450 41300 37650 35350 39050 31500 36750 37800 38850 38050 38100 37250 38650 38600 38550 37900 36550 35600 37900 39400 36300 40400 40300 36700 42950 37750 39250 36450 32550 39950 43350 35700 44600 38700 37350 43200 35950 40650 39100 31700 45050 43100 36200 44050 36200 39100 47100 34450 44450 38600 33100 45850 40450 37150 47250 35050 44150 45950 34550 45000 36850 35400 48900 38500 41500 46450 36400 44050 42900 36600 48950 36250 39600 47300 39150 41750 44650)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 582 331))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 169 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 300 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 290 380) (om-make-point 649 282) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21400 21500 21600 21700 21800 21900 22000 22100 22200 22300 22400 22500 22600 22700 22800 22900 23000 23100 23200 23300 23400 23500 23600 23700 23800 23900 24000 24100 24200 24300 24400 24500 24600 24700 24800 24900 25000 25100 25200 25300 25400 25500 25600 25700 25800 25900 26000 26100 26200 26300 26400 26500 26600 26700 26800 26900 27000 27100 27200 27300 27400 27500 27600 27700 27800 27900 28000 28100 28200 28300 28400 28500 28600 28700 28800 28900 29000 29100 29200 29300 29400 29500 29600 29700 29800 29900 30000 30100 30200 30300 30400 30500 30600 30700 30800 30900 31000 31100 31200 31300 31400 31500 31600 31700 31800 31900 32000 32100 32200 32300 32400 32500 32600 32700 32800 32900 33000 33100 33200 33300 33400 33500 33600 33700 33800 33900 34000 34100 34200 34300 34400 34500 34600 34700 34800 34900 35000 35100 35200 35300 35400 35500 35600 35700 35800 35900 36000 36100 36200 36300 36400 36500 36600 36700 36800 36900 37000 37100 37200 37300 37400 37500 37600 37700 37800 37900 38000 38100 38200 38300 38400 38500 38600 38700 38800 38900 39000 39100 39200 39300 39400 39500 39600 39700 39800 39900 40000 40100 40200 40300 40400 40500 40600 40700 40800 40900 41000 41100 41200 41300 41400 41500 41600 41700 41800 41900 42000 42100 42200 42300 42400 42500 42600 42700 42800 42900 43000 43100 43200 43300 43400 43500 43600 43700 43800 43900 44000 44100 44200 44300 44400 44500 44600 44700 44800 44900 45000 45100 45200 45300 45400 45500 45600 45700 45800 45900 46000 46100 46200 46300 46400 46500 46600 46700 46800 46900 47000 47100 47200 47300 47400 47500 47600 47700 47800 47900 48000 48100 48200 48300 48400 48500 48600 48700 48800 48900 49000 49100 49200 49300 49400 49500 49600 49700 49800 49900)) (quote (7350 7150 7750 9250 5250 3650 10050 3700 8800 6000 6100 10400 5100 3800 9850 1050 5250 9400 3450 10600 4600 3450 11250 0 4050 9350 1600 7750 7650 -450 12100 800 3950 9850 -800 6700 8400 -1600 8900 2600 700 12000 250 5700 7550 -3850 8650 4050 -800 7550 2700 3750 9950 -3700 6300 3350 -2250 8000 3800 1000 6150 50 4600 4850 -3450 5800 3900 250 6250 -100 2500 2350 550 3200 4050 -800 4850 700 1400 1200 1050 2400 1800 2300 900 1000 1150 500 1500 50 1300 4100 350 -2150 2900 -3300 2600 500 250 3300 -1350 -1350 4950 -4750 -1900 2400 -2750 5100 -1250 -3650 4800 -5150 -850 3550 -5550 750 1450 -5950 6250 -6300 -2500 4700 -5700 900 1250 -8600 2700 -2900 -5150 4900 -6200 550 2650 -9650 1500 -2950 -7000 2050 -3150 -3350 3500 -8850 1400 -2450 -9400 1000 -2400 -4500 300 -7050 -1850 -300 -8350 0 -3250 -6750 50 -5600 -3350 -4750 -5900 -1950 -850 -6600 -2300 -6300 -4800 -4300 -4800 -4700 -4650 -2850 -4000 -4800 -6000 -6500 -4700 -5450 -4550 -3000 -6100 -7300 -2000 -9100 -4550 -6500 -5950 -2200 -7200 -8450 -1500 -9900 -6800 -3400 -9900 -1900 -7450 -9150 -1050 -12250 -7300 -1600 -10450 -5050 -5700 -12950 50 -11800 -8350 -2400 -12150 -4250 -3650 -14400 -4450 -9900 -11350 -600 -12050 -6550 -3800 -14800 -3400 -8750 -14150 -4950 -9350 -8850 -2350 -15950 -5050 -7600 -14300 -4800 -9550 -11500 -5900 -12550 -7700 -7400 -14800 -5150 -8150 -12550 -7100 -12600 -9550 -10250 -11750 -9050 -7300 -11750 -7200 -12100 -11950 -11300 -11000 -10200 -10500 -9950 -10450 -9950 -10900 -12300 -11850 -12450 -10750 -8500 -11950 -14400 -8450 -14250 -9450 -12300 -13100 -9200 -13400 -13950 -7350 -17000 -13250 -8550 -14800 -7700 -14600 -16150 -7250 -17750 -13150 -8700 -16900 -10200 -10600 -18750 -7100 -18800 -14550 -7900 -18000 -11350 -10100 -19550 -9350 -15700 -18500 -7600 -18250 -12050 -9650 -21900 -9850 -13900 -19050 -10750 -16500 -15850 -8550 -21450 -10900 -14700 -20750 -9950 -14450 -17300 -13050 -19550 -13900 -12900 -20650 -12250 -14600 -17700 -12000 -18400 -16700 -17250 -17950 -14550 -13150 -18850 -13650 -17250 -16850 -17100 -18150 -17200 -16700 -15450 -16300 -17050 -17350 -17450 -16750 -18250 -17900 -15500 -18150 -19900 -14300 -21350 -15900 -17450 -18000 -15000 -20550 -20950 -13550 -22500 -19100 -15650 -21250 -12850 -19500 -21950 -14400 -24750 -19350 -14200 -22750 -17300 -17050 -23900 -12000 -24600 -21700 -14900 -24200 -16850 -15950 -26650 -15800 -20850 -23400 -13400 -25400 -19050 -15850 -27400 -15700 -21000 -25500 -15900 -21400 -21650 -15700 -28450 -17100 -20200 -26600 -17050 -20900 -22450 -17950 -25350 -21050 -19900 -26850 -17750 -20450 -24800 -18450 -23550 -21600 -23050 -25100 -21550 -19350 -24350 -19500 -24350 -23300 -22250 -23050 -23000 -23850 -22450 -22500 -22550 -23200 -24550 -23200 -23400 -22800 -21300 -25300 -26900 -20500 -26850 -21750 -24550 -24450 -20150 -25450 -26750 -20700 -29500 -25300 -21150 -27100 -19950 -25950 -27100 -19300 -30550 -26500 -21200 -28950 -22800 -22900 -31000 -18450 -29750 -26600 -20700 -31350 -23850 -22150 -32150 -21650 -27950 -29850 -18550 -30300 -24850 -23000 -34400 -21900 -26500 -31350 -23000 -27850 -26800 -20600 -34250 -24250 -27200 -32800 -22550 -26750 -29550)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1210 703))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 101 180) (quote "CIRCLES$material$$Connecting input materials differently will give new curve results.") "" (om-make-point 29 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 400 69) (om-make-point 41 30) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-CIRCLES-MATERIAL 2" (quote r-circles-material) (quote ((om-load-inputfun (quote input-funbox) "" "NOTHING" nil))) (om-make-point 283 4) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-CIRCLES-MATERIAL" (quote r-circles-material) (quote ((om-load-inputfun (quote input-funbox) "" "NOTHING" nil))) (om-make-point 137 25) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-FEEDBACK-A-B+C" (quote r-feedback-a-b+c) (quote ((om-load-inputfun (quote input-funbox) "midicentsA" "MIDICENTSA" nil) (om-load-inputfun (quote input-funbox) "midicentsB" "MIDICENTSB" nil) (om-load-inputfun (quote input-funbox) "midicentsC" "MIDICENTSC" nil) (om-load-inputfun (quote input-funbox) "number-of-notes" "NUMBER-OF-NOTES" nil))) (om-make-point 290 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-FEEDBACK-A+B-C" (quote r-feedback-a+b-c) (quote ((om-load-inputfun (quote input-funbox) "midicentsA" "MIDICENTSA" nil) (om-load-inputfun (quote input-funbox) "midicentsB" "MIDICENTSB" nil) (om-load-inputfun (quote input-funbox) "midicentsC" "MIDICENTSC" nil) (om-load-inputfun (quote input-funbox) "number-of-notes" "NUMBER-OF-NOTES" nil))) (om-make-point 144 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 251 40) (om-make-point 41 30) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 2 0 1 nil 0) (17 1 1 1 nil 0) (17 0 2 1 nil 0) (6 0 5 2 nil 0) (12 0 6 0 nil 0) (7 0 6 1 nil 0) (8 0 6 2 nil 0) (9 0 6 3 nil 0) (11 0 10 2 nil 0) (19 0 11 0 nil 0) (18 0 12 0 nil 0) (12 0 13 2 nil 0) (16 0 18 0 nil 0) (16 1 18 1 nil 0) (16 2 18 2 nil 0) (15 0 18 3 nil 0) (17 0 19 0 nil 0) (17 1 19 1 nil 0) (17 2 19 2 nil 0) (20 0 19 3 nil 0))) nil 6.13))
