; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 10 10) (om-make-point 45 23) (om-make-point 1235 684) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "recursive-pitch-loop-visualization-new" (quote ((let ((box (om-load-boxcall (quote genfun) "FLAT 5" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 444 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 314 11) (om-make-point 169 90) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (6676) (5352) (4600))) :lonset (quote (0 722 1861 2625 3625)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 16 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 583 351) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 125 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 311 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 192 15) (om-make-point 120 79) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5950) (6100) (6050) (6300) (6400) (6550) (6500))) :lonset (quote (0 486 1069 1361 1958 2528 2972 3417 4417)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 583 351) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 63 13) (om-make-point 127 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6700) (7350) (8100))) :lonset (quote (0 486 1069 1361 2361)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 583 351) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 417 64) (quote "Wrapped into a practical midicent range, we can see less ordered noiselike shapes.") "" (om-make-point 704 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 351 82) (quote "Visual shape of the material without range limitation. It's not clear where the patterns will repeat themselves in new transpositions. So far, we can always see differences in details, while not in the overall shapes.") "" (om-make-point 372 296) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 635 101) (om-make-point 565 199) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21400 21500 21600 21700 21800 21900 22000 22100 22200 22300 22400 22500 22600 22700 22800 22900 23000 23100 23200 23300 23400 23500 23600 23700 23800 23900 24000 24100 24200 24300 24400 24500 24600 24700 24800 24900 25000 25100 25200 25300 25400 25500 25600 25700 25800 25900 26000 26100 26200 26300 26400 26500 26600 26700 26800 26900 27000 27100 27200 27300 27400 27500 27600 27700 27800 27900 28000 28100 28200 28300 28400 28500 28600 28700 28800 28900 29000 29100 29200 29300 29400 29500 29600 29700 29800 29900 30000 30100 30200 30300 30400 30500 30600 30700 30800 30900 31000 31100 31200 31300 31400 31500 31600 31700 31800 31900 32000 32100 32200 32300 32400 32500 32600 32700 32800 32900 33000 33100 33200 33300 33400 33500 33600 33700 33800 33900 34000 34100 34200 34300 34400 34500 34600 34700 34800 34900 35000 35100 35200 35300 35400 35500 35600 35700 35800 35900 36000 36100 36200 36300 36400 36500 36600 36700 36800 36900 37000 37100 37200 37300 37400 37500 37600 37700 37800 37900 38000 38100 38200 38300 38400 38500 38600 38700 38800 38900 39000 39100 39200 39300 39400 39500 39600 39700 39800 39900 40000 40100 40200 40300 40400 40500 40600 40700 40800 40900 41000 41100 41200 41300 41400 41500 41600 41700 41800 41900 42000 42100 42200 42300 42400 42500 42600 42700 42800 42900 43000 43100 43200 43300 43400 43500 43600 43700 43800 43900 44000 44100 44200 44300 44400 44500 44600 44700 44800 44900 45000 45100 45200 45300 45400 45500 45600 45700 45800 45900 46000 46100 46200 46300 46400 46500 46600 46700 46800 46900 47000 47100 47200 47300 47400 47500 47600 47700 47800 47900 48000 48100 48200 48300 48400 48500 48600 48700 48800 48900 49000 49100 49200 49300 49400 49500 49600 49700 49800 49900)) (quote (7500 7426 6602 6650 8700 7702 5404 4750 10200 8428 4656 3300 4200 8704 3458 8600 5700 9430 2710 7150 6900 9706 8712 5250 8400 10432 7964 3800 9600 10708 6766 9100 3900 4234 6018 7650 5100 4510 4820 5750 6600 5236 4072 4300 7800 5512 2874 2400 9300 6238 9326 8150 10500 6514 8128 6250 4800 7240 7380 4800 6000 7516 6182 2900 7500 8242 5434 8650 8700 8518 4236 6750 10200 9244 3488 5300 4200 9520 2290 3400 5700 10246 8742 9150 6900 10522 7544 7250 8400 4048 6796 5800 9600 4324 5598 3900 3900 5050 4850 2450 5100 5326 3652 7750 6600 6052 2904 6300 7800 6328 8906 4400 9300 7054 8158 2950 10500 7330 6960 8250 4800 8056 6212 6800 6000 8332 5014 4900 7500 9058 4266 3450 8700 9334 3068 8750 10200 10060 2320 7300 4200 10336 8322 5400 5700 3862 7574 3950 6900 4138 6376 9250 8400 4864 5628 7800 9600 5140 4430 5900 3900 5866 3682 4450 5100 6142 2484 2550 6600 6868 8936 8300 7800 7144 7738 6400 9300 7870 6990 4950 10500 8146 5792 3050 4800 8872 5044 8800 6000 9148 3846 6900 7500 9874 3098 5450 8700 10150 9100 3550 10200 3676 8352 9300 4200 3952 7154 7400 5700 4678 6406 5950 6900 4954 5208 4050 8400 5680 4460 2600 9600 5956 3262 7900 3900 6682 2514 6450 5100 6958 8516 4550 6600 7684 7768 3100 7800 7960 6570 8400 9300 8686 5822 6950 10500 8962 4624 5050 4800 9688 3876 3600 6000 9964 2678 8900 7500 10690 9130 7450 8700 3766 7932 5550 10200 4492 7184 4100 4200 4768 5986 9400 5700 5494 5238 7950 6900 5770 4040 6050 8400 6496 3292 4600 9600 6772 9294 2700 3900 7498 8546 8450 5100 7774 7348 6550 6600 8500 6600 5100 7800 8776 5402 3200 9300 9502 4654 8950 10500 9778 3456 7050 4800 10504 2708 5600 6000 10780 8710 3700 7500 4306 7962 2250 8700 4582 6764 7550 10200 5308 6016 6100 4200 5584 4818 4200 5700 6310 4070 2750 6900 6586 2872 8050 8400 7312 9324 6600 9600 7588 8126 4700 3900 8314 7378 3250 5100 8590 6180 8550 6600 9316 5432 7100 7800 9592 4234 5200 9300 10318 3486 3750 10500 10594 2288 9050 4800 4120 8740 7600 6000 4396 7542 5700 7500 5122 6794 4250 8700 5398 5596 2350 10200 6124 4848 8100 4200 6400 3650 6200 5700 7126 2902 4750 6900 7402 8904 2850 8400 8128 8156 8600 9600 8404 6958 6700 3900 9130 6210 5250 5100 9406 5012 3350 6600 10132 4264 9100 7800 10408 3066 7200 9300 3934 2318 5750 10500 4210 8320 3850 4800 4936 7572 2400 6000 5212 6374 7700 7500 5938 5626 6250 8700 6214 4428 4350 10200 6940 3680 2900 4200 7216 2482 8200 5700 7942 8934 6750 6900 8218 7736 4850 8400 8944 6988 3400 9600 9220 5790 8700 3900 9946 5042 7250 5100 10222 3844 5350 6600 3748 3096 3900 7800 4024 9098 9200 9300 4750 8350 7750)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 582 331) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-WRAP-TO-RANGE" (quote r-wrap-to-range) (quote ((om-load-inputfun (quote input-funbox) "midicents-lists" "MIDICENTS-LISTS" nil) (om-load-inputfun (quote input-funbox) "minmax-midicents" "MINMAX-MIDICENTS" nil) (om-load-inputfun (quote input-funbox) "wrapping-interval" "WRAPPING-INTERVAL" nil) (om-load-inputfun (quote input-funbox) "number-of-wrapping-intervals" "NUMBER-OF-WRAPPING-INTERVALS" nil))) (om-make-point 519 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 542 8) (om-make-point 97 30) (list 2200 10800) "(2200 10800)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 565 45) (om-make-point 48 30) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 628 40) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 32 332) (om-make-point 245 210) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21400 21500 21600 21700 21800 21900 22000 22100 22200 22300 22400 22500 22600 22700 22800 22900 23000 23100 23200 23300 23400 23500 23600 23700 23800 23900 24000 24100 24200 24300 24400 24500 24600 24700 24800 24900 25000 25100 25200 25300 25400 25500 25600 25700 25800 25900 26000 26100 26200 26300 26400 26500 26600 26700 26800 26900 27000 27100 27200 27300 27400 27500 27600 27700 27800 27900 28000 28100 28200 28300 28400 28500 28600 28700 28800 28900 29000 29100 29200 29300 29400 29500 29600 29700 29800 29900 30000 30100 30200 30300 30400 30500 30600 30700 30800 30900 31000 31100 31200 31300 31400 31500 31600 31700 31800 31900 32000 32100 32200 32300 32400 32500 32600 32700 32800 32900 33000 33100 33200 33300 33400 33500 33600 33700 33800 33900 34000 34100 34200 34300 34400 34500 34600 34700 34800 34900 35000 35100 35200 35300 35400 35500 35600 35700 35800 35900 36000 36100 36200 36300 36400 36500 36600 36700 36800 36900 37000 37100 37200 37300 37400 37500 37600 37700 37800 37900 38000 38100 38200 38300 38400 38500 38600 38700 38800 38900 39000 39100 39200 39300 39400 39500 39600 39700 39800 39900 40000 40100 40200 40300 40400 40500 40600 40700 40800 40900 41000 41100 41200 41300 41400 41500 41600 41700 41800 41900 42000 42100 42200 42300 42400 42500 42600 42700 42800 42900 43000 43100 43200 43300 43400 43500 43600 43700 43800 43900 44000 44100 44200 44300 44400 44500 44600 44700 44800 44900 45000 45100 45200 45300 45400 45500 45600 45700 45800 45900 46000 46100 46200 46300 46400 46500 46600 46700 46800 46900 47000 47100 47200 47300 47400 47500 47600 47700 47800 47900 48000 48100 48200 48300 48400 48500 48600 48700 48800 48900 49000 49100 49200 49300 49400 49500 49600 49700 49800 49900)) (quote (4500 5974 8098 9550 3300 5698 9296 11450 1800 4972 10044 12900 600 4696 11242 14800 -900 3970 11990 16250 -2100 3694 13188 18150 -3600 2968 13936 19600 -4800 2692 15134 21500 -6300 1966 15882 22950 -7500 1690 17080 24850 -9000 964 17828 26300 -10200 688 19026 28200 -11700 -38 19774 29650 -12900 -314 20972 31550 -14400 -1040 21720 33000 -15600 -1316 22918 34900 -17100 -2042 23666 36350 -18300 -2318 24864 38250 -19800 -3044 25612 39700 -21000 -3320 26810 41600 -22500 -4046 27558 43050 -23700 -4322 28756 44950 -25200 -5048 29504 46400 -26400 -5324 30702 48300 -27900 -6050 31450 49750 -29100 -6326 32648 51650 -30600 -7052 33396 53100 -31800 -7328 34594 55000 -33300 -8054 35342 56450 -34500 -8330 36540 58350 -36000 -9056 37288 59800 -37200 -9332 38486 61700 -38700 -10058 39234 63150 -39900 -10334 40432 65050 -41400 -11060 41180 66500 -42600 -11336 42378 68400 -44100 -12062 43126 69850 -45300 -12338 44324 71750 -46800 -13064 45072 73200 -48000 -13340 46270 75100 -49500 -14066 47018 76550 -50700 -14342 48216 78450 -52200 -15068 48964 79900 -53400 -15344 50162 81800 -54900 -16070 50910 83250 -56100 -16346 52108 85150 -57600 -17072 52856 86600 -58800 -17348 54054 88500 -60300 -18074 54802 89950 -61500 -18350 56000 91850 -63000 -19076 56748 93300 -64200 -19352 57946 95200 -65700 -20078 58694 96650 -66900 -20354 59892 98550 -68400 -21080 60640 100000 -69600 -21356 61838 101900 -71100 -22082 62586 103350 -72300 -22358 63784 105250 -73800 -23084 64532 106700 -75000 -23360 65730 108600 -76500 -24086 66478 110050 -77700 -24362 67676 111950 -79200 -25088 68424 113400 -80400 -25364 69622 115300 -81900 -26090 70370 116750 -83100 -26366 71568 118650 -84600 -27092 72316 120100 -85800 -27368 73514 122000 -87300 -28094 74262 123450 -88500 -28370 75460 125350 -90000 -29096 76208 126800 -91200 -29372 77406 128700 -92700 -30098 78154 130150 -93900 -30374 79352 132050 -95400 -31100 80100 133500 -96600 -31376 81298 135400 -98100 -32102 82046 136850 -99300 -32378 83244 138750 -100800 -33104 83992 140200 -102000 -33380 85190 142100 -103500 -34106 85938 143550 -104700 -34382 87136 145450 -106200 -35108 87884 146900 -107400 -35384 89082 148800 -108900 -36110 89830 150250 -110100 -36386 91028 152150 -111600 -37112 91776 153600 -112800 -37388 92974 155500 -114300 -38114 93722 156950 -115500 -38390 94920 158850 -117000 -39116 95668 160300 -118200 -39392 96866 162200 -119700 -40118 97614 163650 -120900 -40394 98812 165550 -122400 -41120 99560 167000 -123600 -41396 100758 168900 -125100 -42122 101506 170350 -126300 -42398 102704 172250 -127800 -43124 103452 173700 -129000 -43400 104650 175600 -130500 -44126 105398 177050 -131700 -44402 106596 178950 -133200 -45128 107344 180400 -134400 -45404 108542 182300 -135900 -46130 109290 183750 -137100 -46406 110488 185650 -138600 -47132 111236 187100 -139800 -47408 112434 189000 -141300 -48134 113182 190450 -142500 -48410 114380 192350 -144000 -49136 115128 193800 -145200 -49412 116326 195700 -146700 -50138 117074 197150 -147900 -50414 118272 199050 -149400 -51140 119020 200500 -150600 -51416 120218 202400 -152100 -52142 120966 203850 -153300 -52418 122164 205750 -154800 -53144 122912 207200 -156000 -53420 124110 209100 -157500 -54146 124858 210550 -158700 -54422 126056 212450 -160200 -55148 126804 213900 -161400 -55424 128002 215800 -162900 -56150 128750 217250)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 582 331) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 151 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 296 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 290 384) (om-make-point 649 282) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21400 21500 21600 21700 21800 21900 22000 22100 22200 22300 22400 22500 22600 22700 22800 22900 23000 23100 23200 23300 23400 23500 23600 23700 23800 23900 24000 24100 24200 24300 24400 24500 24600 24700 24800 24900 25000 25100 25200 25300 25400 25500 25600 25700 25800 25900 26000 26100 26200 26300 26400 26500 26600 26700 26800 26900 27000 27100 27200 27300 27400 27500 27600 27700 27800 27900 28000 28100 28200 28300 28400 28500 28600 28700 28800 28900 29000 29100 29200 29300 29400 29500 29600 29700 29800 29900 30000 30100 30200 30300 30400 30500 30600 30700 30800 30900 31000 31100 31200 31300 31400 31500 31600 31700 31800 31900 32000 32100 32200 32300 32400 32500 32600 32700 32800 32900 33000 33100 33200 33300 33400 33500 33600 33700 33800 33900 34000 34100 34200 34300 34400 34500 34600 34700 34800 34900 35000 35100 35200 35300 35400 35500 35600 35700 35800 35900 36000 36100 36200 36300 36400 36500 36600 36700 36800 36900 37000 37100 37200 37300 37400 37500 37600 37700 37800 37900 38000 38100 38200 38300 38400 38500 38600 38700 38800 38900 39000 39100 39200 39300 39400 39500 39600 39700 39800 39900 40000 40100 40200 40300 40400 40500 40600 40700 40800 40900 41000 41100 41200 41300 41400 41500 41600 41700 41800 41900 42000 42100 42200 42300 42400 42500 42600 42700 42800 42900 43000 43100 43200 43300 43400 43500 43600 43700 43800 43900 44000 44100 44200 44300 44400 44500 44600 44700 44800 44900 45000 45100 45200 45300 45400 45500 45600 45700 45800 45900 46000 46100 46200 46300 46400 46500 46600 46700 46800 46900 47000 47100 47200 47300 47400 47500 47600 47700 47800 47900 48000 48100 48200 48300 48400 48500 48600 48700 48800 48900 49000 49100 49200 49300 49400 49500 49600 49700 49800 49900)) (quote (7500 7426 6602 6650 8700 7702 5404 4750 10200 8428 4656 3300 11400 8704 3458 1400 12900 9430 2710 -50 14100 9706 1512 -1950 15600 10432 764 -3400 16800 10708 -434 -5300 18300 11434 -1182 -6750 19500 11710 -2380 -8650 21000 12436 -3128 -10100 22200 12712 -4326 -12000 23700 13438 -5074 -13450 24900 13714 -6272 -15350 26400 14440 -7020 -16800 27600 14716 -8218 -18700 29100 15442 -8966 -20150 30300 15718 -10164 -22050 31800 16444 -10912 -23500 33000 16720 -12110 -25400 34500 17446 -12858 -26850 35700 17722 -14056 -28750 37200 18448 -14804 -30200 38400 18724 -16002 -32100 39900 19450 -16750 -33550 41100 19726 -17948 -35450 42600 20452 -18696 -36900 43800 20728 -19894 -38800 45300 21454 -20642 -40250 46500 21730 -21840 -42150 48000 22456 -22588 -43600 49200 22732 -23786 -45500 50700 23458 -24534 -46950 51900 23734 -25732 -48850 53400 24460 -26480 -50300 54600 24736 -27678 -52200 56100 25462 -28426 -53650 57300 25738 -29624 -55550 58800 26464 -30372 -57000 60000 26740 -31570 -58900 61500 27466 -32318 -60350 62700 27742 -33516 -62250 64200 28468 -34264 -63700 65400 28744 -35462 -65600 66900 29470 -36210 -67050 68100 29746 -37408 -68950 69600 30472 -38156 -70400 70800 30748 -39354 -72300 72300 31474 -40102 -73750 73500 31750 -41300 -75650 75000 32476 -42048 -77100 76200 32752 -43246 -79000 77700 33478 -43994 -80450 78900 33754 -45192 -82350 80400 34480 -45940 -83800 81600 34756 -47138 -85700 83100 35482 -47886 -87150 84300 35758 -49084 -89050 85800 36484 -49832 -90500 87000 36760 -51030 -92400 88500 37486 -51778 -93850 89700 37762 -52976 -95750 91200 38488 -53724 -97200 92400 38764 -54922 -99100 93900 39490 -55670 -100550 95100 39766 -56868 -102450 96600 40492 -57616 -103900 97800 40768 -58814 -105800 99300 41494 -59562 -107250 100500 41770 -60760 -109150 102000 42496 -61508 -110600 103200 42772 -62706 -112500 104700 43498 -63454 -113950 105900 43774 -64652 -115850 107400 44500 -65400 -117300 108600 44776 -66598 -119200 110100 45502 -67346 -120650 111300 45778 -68544 -122550 112800 46504 -69292 -124000 114000 46780 -70490 -125900 115500 47506 -71238 -127350 116700 47782 -72436 -129250 118200 48508 -73184 -130700 119400 48784 -74382 -132600 120900 49510 -75130 -134050 122100 49786 -76328 -135950 123600 50512 -77076 -137400 124800 50788 -78274 -139300 126300 51514 -79022 -140750 127500 51790 -80220 -142650 129000 52516 -80968 -144100 130200 52792 -82166 -146000 131700 53518 -82914 -147450 132900 53794 -84112 -149350 134400 54520 -84860 -150800 135600 54796 -86058 -152700 137100 55522 -86806 -154150 138300 55798 -88004 -156050 139800 56524 -88752 -157500 141000 56800 -89950 -159400 142500 57526 -90698 -160850 143700 57802 -91896 -162750 145200 58528 -92644 -164200 146400 58804 -93842 -166100 147900 59530 -94590 -167550 149100 59806 -95788 -169450 150600 60532 -96536 -170900 151800 60808 -97734 -172800 153300 61534 -98482 -174250 154500 61810 -99680 -176150 156000 62536 -100428 -177600 157200 62812 -101626 -179500 158700 63538 -102374 -180950 159900 63814 -103572 -182850 161400 64540 -104320 -184300 162600 64816 -105518 -186200 164100 65542 -106266 -187650 165300 65818 -107464 -189550 166800 66544 -108212 -191000 168000 66820 -109410 -192900 169500 67546 -110158 -194350 170700 67822 -111356 -196250 172200 68548 -112104 -197700 173400 68824 -113302 -199600 174900 69550 -114050 -201050)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 933 513) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 235) (quote "Using the feedback machine for other materials.$$Connecting input materials differently will give new curve results.") "" (om-make-point 11 108) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 368 123) (om-make-point 41 30) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-FEEDBACK-A-B+C" (quote r-feedback-a-b+c) (quote ((om-load-inputfun (quote input-funbox) "midicentsA" "MIDICENTSA" nil) (om-load-inputfun (quote input-funbox) "midicentsB" "MIDICENTSB" nil) (om-load-inputfun (quote input-funbox) "midicentsC" "MIDICENTSC" nil) (om-load-inputfun (quote input-funbox) "number-of-notes" "NUMBER-OF-NOTES" nil))) (om-make-point 289 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-FEEDBACK-A+B-C" (quote r-feedback-a+b-c) (quote ((om-load-inputfun (quote input-funbox) "midicentsA" "MIDICENTSA" nil) (om-load-inputfun (quote input-funbox) "midicentsB" "MIDICENTSB" nil) (om-load-inputfun (quote input-funbox) "midicentsC" "MIDICENTSC" nil) (om-load-inputfun (quote input-funbox) "number-of-notes" "NUMBER-OF-NOTES" nil))) (om-make-point 138 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 216 118) (om-make-point 41 30) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 1 0 0 nil 0) (5 1 2 0 nil 0) (4 1 3 0 nil 0) (9 0 8 2 nil 0) (15 0 9 0 nil 0) (10 0 9 1 nil 0) (11 0 9 2 nil 0) (12 0 9 3 nil 0) (14 0 13 2 nil 0) (20 0 14 0 nil 0) (19 0 15 0 nil 0) (15 0 16 2 nil 0) (2 0 19 0 nil 0) (3 0 19 1 nil 0) (0 0 19 2 nil 0) (18 0 19 3 nil 0) (2 0 20 0 nil 0) (3 0 20 1 nil 0) (0 0 20 2 nil 0) (21 0 20 3 nil 0))) nil 6.13))
