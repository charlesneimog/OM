; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 442 60) (om-make-point 248 23) (om-make-point 1032 627) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "messiaen-modes" (quote ((let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 614 346) (om-make-point 24 27) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 384 284) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 406 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 558 277) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 509 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 742 38) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 718 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 680 27) (om-make-point 34 30) 70 "70" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 593 20) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 610 51) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 155 135) (quote "Random transposition$of mode. With $limited transpositions$no more than 6 are$relevant.$") "" (om-make-point 385 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 114 84) (quote "4 settings$to reproduce $chord progressions$from Traité.") "" (om-make-point 126 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 355 18) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 307 9) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 298 48) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MESSIAEN-CHORD-PRESETS" (quote r-messiaen-chord-presets) (quote ((om-load-inputfun (quote input-funbox) "" "PRESET-NUMBER" nil))) (om-make-point 40 160) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 95 48) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 51 55) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 39 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 621 133) (om-make-point 122 119) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 5200 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 300 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MESSIAEN-CHORDS-ON-FUNDAMENTAL" (quote r-messiaen-chords-on-fundamental) (quote ((om-load-inputfun (quote input-funbox) "" "LISTS-OF-CHORDS" nil) (om-load-inputfun (quote input-funbox) "" "FUNDAMENTAL" nil))) (om-make-point 396 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MESSIAEN-STEP-CHORDS" (quote r-messiaen-step-chords) (quote ((om-load-inputfun (quote input-funbox) "" "MIDICENTS-MODE" nil) (om-load-inputfun (quote input-funbox) "" "PATTERN-INCREMENT" nil))) (om-make-point 200 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 147 392) (om-make-point 590 205) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300 5800 6200 6600 7100 7600 8000 8400) (5300 5800 6300 6700 7100 7600 8100 8500) (5300 5700 6200 6700 7100 7500 8000 8500) (5300 5700 6100 6600 7100 7500 7900 8400) (6100 6500 6900 7300 7700 8100 8500 8900) (6700 7300 7700 8100) (6700 7200 7600 8000) (6900 7500 7900 8400) (6900 7500 8000 8400) (7000 7500 7900 8400 8800 9300 9700 10200) (7000 7400 7900 8300 8800 9200 9700 10100) (7000 7500 7900 8100) (7000 7400 7900 8000) (5100 5600 6000 6500 6900 7400 7800 8300) (5100 5500 6000 6400 6900 7300 7800 8200) (6900 7400 7800 8000) (6900 7300 7800 7900) (5000 5400 5800 6200 6600 7000 7400 7800) (6000 6400 6900 7000) (6000 6400 6800 7000) (6000 6500 6900 7100) (6000 6500 7000 7100) (5100 5600 6000 6400 6900 7400 7800 8200) (5100 5600 6100 6500 6900 7400 7900 8300) (5100 5500 6000 6500 6900 7300 7800 8300) (5100 5500 5900 6400 6900 7300 7700 8200) (5100 5500 5900 6300 6700 7100 7500 7900) (7000 7500 7900 8300 8800 9300 9700 10100) (7000 7500 8000 8400 8800 9300 9800 10200) (7000 7400 7900 8400 8800 9200 9700 10200) (7000 7400 7800 8300 8800 9200 9600 10100) (6400 6800 7000 7500 8000 8200) (6400 6700 7000 7400 7900 8200) (6400 6600 7000 7400 7800 8200) (6400 6700 7000 7500 7900 8200) (5900 6200 6500 6900 7300 7500) (5900 6100 6400 6800 7200 7500) (5900 6200 6400 6800 7200 7500) (5300 5800 6200 6700 7100 7600 8000 8500) (5300 5700 6200 6600 7100 7500 8000 8400) (5800 6400 6800 7300) (5800 6400 6900 7300) (7000 7300 7600 8000 8500 8800) (7000 7300 7600 8100 8500 8800) (6500 7100 7500 7900) (6500 7100 7600 8000) (6500 7100 7600 8100) (6500 7100 7500 8000) (5100 5600 6000 6500 6900 7400 7800 8300) (5100 5500 6000 6400 6900 7300 7800 8200) (5900 6200 6500 6900 7400 7700) (5900 6200 6500 7000 7400 7700) (7000 7600 8000 8500) (7000 7600 8100 8500) (5300 5800 6300 6400) (5300 5600 6100 6200) (5300 5800 6100 6400) (6700 6900 7300 7800 8100 8500) (6700 7100 7300 7800 8300 8500) (6700 6900 7300 7600 8100 8500) (5600 5900 6400 6900 7400 7700 8200 8700) (5600 6100 6400 6900 7400 7900 8200 8700) (5600 6100 6600 6900 7400 7900 8400 8700) (5600 6100 6600 7100 7400 7900 8400 8900) (5600 6000 6400 6600) (5600 6000 6400 6500) (5300 5700 6200 6300) (5300 5700 6100 6300) (5300 5800 6200 6400) (5300 5800 6300 6400) (6300 6500 6900 7400 7700 8100) (6300 6700 6900 7400 7900 8100) (6300 6500 6900 7200 7700 8100) (6100 6600 7000 7400 7900 8400 8800 9200) (6100 6600 7100 7500 7900 8400 8900 9300) (6100 6500 7000 7500 7900 8300 8800 9300) (6100 6500 6900 7400 7900 8300 8700 9200) (6200 6500 6800 7200 7700 8000) (6200 6500 6800 7300 7700 8000) (6000 6600 7000 7500) (6000 6600 7100 7500) (6200 6500 6800 7200 7600 7800) (6200 6400 6700 7100 7500 7800) (6200 6500 6700 7100 7500 7800) (5000 5400 5900 6000) (5000 5400 5800 6000) (5000 5500 5900 6100) (5000 5500 6000 6100) (6500 6800 7100 7500 8000 8300) (6500 6800 7100 7600 8000 8300) (6500 7100 7500 8000) (6500 7100 7600 8000) (5900 6400 6800 7300 7700 8200 8600 9100) (5900 6300 6800 7200 7700 8100 8600 9000) (5100 5400 5900 6400 6900 7200 7700 8200) (5100 5600 5900 6400 6900 7400 7700 8200) (5100 5600 6100 6400 6900 7400 7900 8200) (5100 5600 6100 6600 6900 7400 7900 8400) (5500 5900 6400 6500) (5500 5900 6300 6500) (5500 6000 6400 6600) (5500 6000 6500 6600) (5000 5500 5900 6300 6800 7300 7700 8100) (5000 5500 6000 6400 6800 7300 7800 8200) (5000 5400 5900 6400 6800 7200 7700 8200) (5000 5400 5800 6300 6800 7200 7600 8100) (5500 6100 6400 6900) (5500 6100 6600 6900) (5500 6100 6600 7100) (6700 6900 7300 7800 8100 8500) (6700 7100 7300 7800 8300 8500) (6700 6900 7300 7600 8100 8500) (6400 6700 7000 7400 7900 8200) (6400 6700 7000 7500 7900 8200) (5400 6000 6300 6800) (5400 6000 6500 6800) (5400 6000 6500 7000) (6500 6900 7300 7700 8100 8500 8900 9300) (5500 5800 6300 6800 7300 7600 8100 8600) (5500 6000 6300 6800 7300 7800 8100 8600) (5500 6000 6500 6800 7300 7800 8300 8600) (5500 6000 6500 7000 7300 7800 8300 8800) (6900 7500 7900 8400) (6900 7500 8000 8400) (6800 7100 7400 7800 8300 8600) (6800 7100 7400 7900 8300 8600) (5300 5700 6100 6500 6900 7300 7700 8100) (6600 7000 7400 7800 8200 8600 9000 9400) (5200 5700 6100 6600 7000 7500 7900 8400) (5200 5600 6100 6500 7000 7400 7900 8300))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000 114000 115000 116000 117000 118000 119000 120000 121000 122000 123000 124000 125000 126000 127000 128000 129000 130000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 808 640) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MESSIAEN-MODES" (quote r-messiaen-modes) (quote ((om-load-inputfun (quote input-funbox) "" "WHICH-MESSIAEN-MODE" nil) (om-load-inputfun (quote input-funbox) "" "TRANSPOSISTION" nil))) (om-make-point 186 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 2 0 nil 0) (1 0 2 1 nil 0) (20 0 4 0 nil 0) (3 0 4 1 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (18 0 15 0 nil 0) (17 0 18 0 nil 0) (16 0 18 1 nil 0) (6 0 19 1 nil 0) (21 0 20 0 nil 0) (19 1 20 1 nil 0) (23 0 21 0 nil 0) (15 1 21 1 nil 0) (2 0 22 1 nil 0) (0 0 22 6 nil 0) (15 0 23 0 nil 0) (14 0 23 1 nil 0))) nil 6.13))
