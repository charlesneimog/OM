; OM File Header - Saved 2020/09/23 20:55:23
; (6.13 :patc (om-make-point 10 110) (om-make-point 309 23) (om-make-point 946 720) "" 183 0 nil "2020/09/23 20:55:23")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "timescale-ligeti-canon" (quote ((let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 515 340) (om-make-point 24 30) 14 "14" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNEL-MULTISEQ" (quote r-apply-channel-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channel" "CHANNEL" nil))) (om-make-point 403 383) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FULL-RANGE" (quote r-full-range) (quote ((om-load-inputfun (quote input-funbox) "CENTS-STEP" "CENTS-STEP" nil))) (om-make-point 181 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GENERAL-BPF-MELODY 2" (quote r-general-bpf-melody) (quote ((om-load-inputfun (quote input-funbox) "midicents-range-minmax" "MIDICENTS-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil) (om-load-inputfun (quote input-funbox) "cents-interval-size" "CENTS-INTERVAL-SIZE" nil) (om-load-inputfun (quote input-funbox) "instrumental-range-midicents" "INSTRUMENTAL-RANGE-MIDICENTS" nil))) (om-make-point 48 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 192 27) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-REBUILD-CHORDSEQ" (quote r-rebuild-chordseq) (quote ((om-load-inputfun (quote input-funbox) "instead-of-chordseq-list" "INSTEAD-OF-CHORDSEQ-LIST" (list 0)))) (om-make-point 16 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 377 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-TO-POLY-LEGATO-TIE" (quote r-multiseq-to-poly-legato-tie) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "tempo" "TEMPO" 0) (om-load-inputfun (quote input-funbox) "time-signature-list" "TIME-SIGNATURE-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "multiplication-factor " "MULTIPLICATION-FACTOR" 0) (om-load-inputfun (quote input-funbox) "ms-rest-treshold" "MS-REST-TRESHOLD" 0) (om-load-inputfun (quote input-funbox) "ms-tie-treshold" "MS-TIE-TRESHOLD" 0))) (om-make-point 575 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 710 299) (om-make-point 35 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 662 298) (om-make-point 28 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 300 185) (quote "This principle is used in several$orchestra works by Ligeti:$A single melody is time stretched into a dense$texture. These are not exact techniques from$Ligeti, individual curves are used to create a$different phasing of the rhythm for each string player.") "" (om-make-point 538 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 502 467) (om-make-point 304 194) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1.0 1 2 1)) (1 (1.0 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((3 4) ((1 (2 1 1 1 1 1)) (1 (2 1 1 1 1)) (1 (1 1 1 2 1)))) ((3 4) ((1 (1.0 -1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (231)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (144)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (144)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (192)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (330)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 2 1)) (1 (1.0 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (2 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (2 2 2)))) ((3 4) ((1 (2 2 1)) (1 (1.0 1 2 2)) (1 (1 1 2 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1 1)) (1 (1.0 2 2 1)))) ((3 4) ((1 (1.0 1 1 1 1)) (1 (2 1 -1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (231)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (385)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (192)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (385)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (82)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (82)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (82)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (82)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (82)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (82)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (82)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (82)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (82)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (82)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (82)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (82)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (82)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (82)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (144)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (144)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (144)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (144)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (577)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (288)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 2 2)) (1 (4 2 1)) (1 (1.0 1 2 1)))) ((3 4) ((1 (1.0 1 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 2 1)) (1 (1.0 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1)) (1 (1 2 2 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1)) (1 (1.0 -2)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (659)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (330)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (192)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (231)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (231)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (231)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (330)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (165)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (144)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (385)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (385)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (144)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1)) (1 (2 1 1 1)) (1 (1.0 1 1 2 1)))) ((3 4) ((1 (2 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 2 1 1 1 1)) (1 (2 2 1)) (1 (1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 -2)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (231)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (462)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (330)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (330)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (462)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (462)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (144)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (144)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 1)) (1 (2 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1)) (1 (1.0 2 1 1)))) ((3 4) ((1 (2 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (2 1 1 1 1 1 1)) (1 (1.0 1 2 2)) (1 (2 1 1 1)))) ((3 4) ((1 (2 1 1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (288)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (288)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (288)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (288)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (330)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (165)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (288)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (144)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (144)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (144)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (144)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (144)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (144)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (288)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (144)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (144)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (144)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (462)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (577)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (288)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (288)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (2 1 2)) (1 (2 2 1)) (1 (2.0 1 1 1)))) ((3 4) ((1 (2 2 1 1)) (1 (1 1 1 1 1)) (1 (2 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1)) (1 (2 2 1 1)) (1 (1.0 2 1 1 1)))) ((3 4) ((1 (2.0 2 1 1)) (1 (1.0 2 1 1 1)) (1 (1.0 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1.0 1 1 1 1)))) ((3 4) ((1 (2 2)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (462)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (462)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (462)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (231)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (385)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (385)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (231)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (231)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (231)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (231)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (231)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (385)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (385)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (115)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (115)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (115)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (115)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (577)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (577)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 2 1)) (1 (2.0 2 1)) (1 (1.0 1 1 1 2 1)))) ((3 4) ((1 (1.0 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 1)))) ((3 4) ((1 (2 2 1 1)) (1 (1.0 1 1 1 1)) (1 (2 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1)) (1 (1.0 -2)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (462)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (231)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (330)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (192)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (96)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (96)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (96)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (96)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (144)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (144)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (144)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (128)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (128)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (128)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (128)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (128)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (128)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (192)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (231)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (231)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (231)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (96)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (96)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (96)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (96)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (115)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (115)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (115)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (115)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (115)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (115)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (115)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (288)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (288)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (288)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 1 1 1)) (1 (1.0 1 1 1 2 1)) (1 (1.0 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1)) (1 (1.0 1 2 1 1)) (1 (1.0 2 2 1)))) ((3 4) ((1 (2.0 2 1 1)) (1 (1.0 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1)) (1 (1 1 1 2 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1 -2)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (330)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (144)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (144)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (144)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (144)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (144)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (144)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (144)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (165)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (165)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (165)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (165)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (385)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (192)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (2 1 2)) (1 (4 2 1)) (1 (2.0 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1)) (1 (1.0 2 1 1 1)) (1 (1.0 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1)) (1 (1.0 2 2 1)))) ((3 4) ((1 (2.0 2 1 1)) (1 (1.0 1 1 1 1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (462)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (659)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (330)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (128)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (128)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (128)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (128)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (128)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (128)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (128)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (128)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (165)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (128)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (128)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 2 1)) (1 (2.0 2 1)) (1 (1.0 1 1 2)))) ((3 4) ((1 (2 2 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1)) (1 (2 1 1 1 1)) (1 (1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1)) (1 (1.0 1 1 2)) (1 (1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (462)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (231)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (385)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (385)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (192)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (165)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (128)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (128)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (128)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (128)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1154)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 2 1)) (1 (1.0 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1)) (1 (1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1)) (1 (2 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1)))) ((3 4) ((1 (1 -1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (128)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (128)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (128)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (128)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (128)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (128)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (128)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (128)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (128)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (144)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (144)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (144)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (144)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (144)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (144)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (144)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (330)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (144)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (144)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (144)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (231)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (231)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (577)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 2 1)) (1 (2.0 2 1)) (1 (1.0 1 1 1)))) ((3 4) ((1 (4 2 1 1)) (1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1)))) ((3 4) ((1 (1.0 2 1 2 1)) (1 (2.0 2 2)) (1 (2 1 1 1)))) ((3 4) ((1 (1.0 2 1 1)) (1 (2 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)))) ((3 4) ((1 (2.0 2 1 1 1)) (1 (1 1 2 1)) (1 (1.0 2 2 1)))) ((3 4) ((1 (2 1 2 1)) (1 (1.0 2 -1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (462)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (231)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (288)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (288)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (288)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (577)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (288)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (165)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (330)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (330)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (115)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (115)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (115)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (115)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (115)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (115)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (330)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (231)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (231)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (462)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (577)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 2 1)) (1 (1.0 2 2 1)) (1 (1 2 2 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1)) (1 (2 1 1 1 1)) (1 (1 1 1 1)))) ((3 4) ((1 (1 1 2 1)) (1 (2 2 1 1)) (1 (1.0 1 2 1 1)))) ((3 4) ((1 (1.0 2 1 1 1)) (1 (1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1)) (1 (1.0 1 1 1 1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (385)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (385)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (385)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (192)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (385)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (288)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (288)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (288)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (288)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (385)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (144)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (144)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (144)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (144)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (144)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (165)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 2 1)) (1 (2.0 2 1)) (1 (1 1 2 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1)) (1 (1.0 2 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1.0 2 2 1)) (1 (1.0 1 1 1 1)))) ((3 4) ((1 (2 2 1)) (1 (1.0 -2)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (462)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (462)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (231)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (128)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (128)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (128)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (128)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (128)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (128)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (128)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (385)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (96)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (96)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (96)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (96)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 1 1 1)) (1 (1 1 1 2 1)) (1 (1.0 1 1 1 1 1)))) ((3 4) ((1 (2 1 1 1)) (1 (1 1 1 1 1)) (1 (1.0 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1)) (1 (1 1 1 1 1)) (1 (2 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1)) (1 (2 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1)) (1 (2.0 2 -1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (385)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (192)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (462)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (231)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (288)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (144)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (144)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (144)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (462)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (2 1 2)) (1 (2 2 1)) (1 (1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1.0 1 1 1 1)))) ((3 4) ((1 (1.0 2 2 1)) (1 (1.0 2 1 1)) (1 (2 1 1 1)))) ((3 4) ((1 (2 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1)) (1 (1 -1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (462)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (462)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (462)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (231)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (231)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (144)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (231)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (210)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (105)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (105)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (105)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (105)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (105)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (105)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (105)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (105)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (105)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (96)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (96)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (96)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (96)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (96)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (96)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (96)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (288)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (288)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (288)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (288)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (577)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 1 1)) (1 (1.0 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 2 1 1 1)) (1 (1.0 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1)) (1 (2 2 1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (231)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (231)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (165)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (165)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (385)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (192)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (128)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (96)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (96)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (96)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (96)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (96)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (115)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (144)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (144)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (144)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (144)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (144)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (2 1 2 1)) (1 (1.0 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1)) (1 (1 1 1 1 1)))) ((3 4) ((1 (1.0 2 1 2)) (1 (2 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 2 1)) (1 (1.0 1 1 1 1 1)) (1 (1.0 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (385)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (192)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (192)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (144)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (144)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (128)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (128)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (128)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (128)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (128)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (128)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (128)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (128)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (128)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (385)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (330)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (165)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (165)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (165)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (165)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (330)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (192)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((3 4) ((1 (1 1 1 2 1)) (1 (1.0 2 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1)) (1 (2 1 2 1)) (1 (1.0 1 2 1)))) ((3 4) ((1 (1.0 2 2 1)) (1 (1.0 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1 1 1 1 1 1 1)) (1 (2 1 1 1 1 1)) (1 (1.0 2 2 1)))) ((3 4) ((1 (1.0 1 1 1 1)) (1 (2 2 2)) (1 (1.0 -2)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (192)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (330)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (165)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (165)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (165)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (165)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (144)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (144)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (144)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (144)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (231)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (231)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (385)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (385)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (462)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (385)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (192)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (192)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (89)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (89)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (89)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (89)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (89)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (89)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (89)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (89)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (89)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (89)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (89)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (89)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (89)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (330)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (165)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (165)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (165)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8550)) :ldur (quote (385)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (192)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (231)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (385)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (cursor-mode approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list (quote :normal) 8 8 (list (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 854 599) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 536 247) (om-make-point 28 30) 52 "52" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 618 307) (om-make-point 21 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 597 215) (om-make-point 52 30) (list (list 3 4)) "((3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 334 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 125 479) (om-make-point 310 188) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (14 232 400 629 847 1028 1212 1333 1454 1695 2013 2292 2449 2543 2655 2796 2958 3147 3303 3419 3533 3637 3762 3966 4203 4503 4845 5102 5474 5882 6172 6464 6691 6821 6935 7101 7275 7378 7552 7762 7923 8062 8169 8254 8371 8544 8721 8831 8911 9084 9354 9523 9631 9741 9908 10238 10554 10734 10873 10986 11142 11404 11682 11935 12149 12304 12458 12628 12783 13051 13439 13827)) :ldur (quote ((218) (168) (229) (218) (182) (184) (120) (121) (241) (319) (278) (158) (94) (112) (141) (161) (189) (155) (116) (115) (104) (125) (204) (237) (300) (342) (257) (372) (408) (290) (292) (227) (130) (115) (166) (174) (104) (174) (209) (161) (140) (107) (85) (117) (172) (177) (111) (79) (174) (269) (169) (108) (110) (167) (330) (316) (180) (138) (114) (155) (262) (278) (253) (214) (155) (155) (170) (155) (268) (388) (388))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (13 238 433 739 1089 1432 1758 1932 2083 2327 2572 2739 2847 2923 3029 3187 3407 3735 4047 4273 4485 4628 4751 4887 5045 5260 5519 5721 6038 6460 6830 7295 7748 8064 8352 8750 9134 9343 9659 9988 10187 10323 10410 10469 10541 10626 10694 10737 10770 10846 10977 11069 11134 11205 11323 11568 11784 11898 11979 12043 12127 12334 12672 13117 13561 13882 14161 14407 14594 14863 15170 15477)) :ldur (quote ((225) (195) (306) (350) (342) (327) (174) (151) (244) (245) (167) (108) (77) (106) (157) (220) (328) (312) (226) (211) (144) (123) (136) (158) (215) (259) (202) (317) (422) (370) (465) (452) (317) (287) (399) (384) (209) (316) (329) (199) (136) (87) (60) (71) (85) (68) (43) (33) (76) (130) (93) (65) (71) (118) (245) (216) (113) (82) (63) (84) (207) (339) (445) (445) (321) (279) (246) (187) (269) (307) (307))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (8 180 367 723 1208 1716 2228 2511 2764 3185 3634 3957 4140 4253 4395 4583 4814 5115 5383 5590 5799 5954 6102 6288 6459 6632 6791 6890 7033 7223 7390 7601 7790 7911 8010 8132 8288 8413 8675 9071 9370 9594 9750 9865 10013 10213 10401 10514 10596 10773 11046 11225 11346 11474 11678 12083 12422 12591 12706 12791 12893 13082 13321 13581 13826 14008 14172 14322 14438 14603 14786 14969)) :ldur (quote ((171) (187) (357) (485) (509) (511) (283) (253) (422) (448) (323) (182) (113) (142) (188) (232) (300) (269) (207) (208) (156) (148) (186) (170) (173) (159) (100) (142) (190) (167) (210) (190) (120) (99) (122) (156) (126) (262) (395) (299) (225) (156) (115) (149) (200) (187) (114) (81) (177) (273) (180) (121) (127) (204) (405) (340) (168) (115) (85) (102) (189) (238) (260) (245) (183) (164) (149) (117) (165) (183) (183))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (12 205 363 597 847 1089 1327 1456 1573 1779 2039 2282 2438 2541 2675 2864 3111 3442 3739 3984 4246 4456 4670 4963 5249 5558 5863 6067 6359 6703 6958 7230 7460 7604 7733 7917 8106 8217 8400 8612 8755 8863 8938 8993 9065 9162 9254 9313 9358 9461 9633 9754 9839 9930 10082 10430 10806 11026 11200 11345 11547 11900 12284 12617 12880 13055 13194 13313 13407 13546 13712 13878)) :ldur (quote ((193) (158) (234) (250) (242) (238) (129) (117) (206) (260) (243) (156) (103) (134) (188) (248) (330) (298) (244) (263) (210) (214) (293) (286) (309) (304) (205) (291) (344) (256) (272) (230) (144) (129) (184) (189) (111) (183) (212) (143) (108) (75) (55) (72) (97) (92) (59) (44) (103) (172) (121) (85) (92) (152) (347) (376) (221) (173) (145) (202) (352) (384) (333) (262) (175) (140) (119) (94) (139) (166) (166))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (19 332 573 901 1213 1467 1660 1742 1823 2013 2309 2595 2765 2868 2996 3161 3360 3608 3829 4009 4201 4354 4508 4720 4940 5199 5474 5672 5961 6313 6596 6923 7202 7369 7501 7650 7799 7901 8091 8350 8545 8698 8808 8891 9001 9155 9304 9396 9461 9602 9819 9961 10057 10157 10317 10634 10902 11035 11126 11193 11277 11468 11767 12149 12547 12867 13172 13469 13708 14022 14319 14616)) :ldur (quote ((313) (241) (329) (312) (253) (193) (82) (80) (191) (296) (285) (170) (104) (128) (165) (198) (248) (221) (180) (192) (153) (154) (212) (220) (259) (275) (197) (289) (352) (283) (327) (279) (168) (132) (149) (149) (102) (190) (259) (195) (153) (110) (83) (110) (154) (150) (92) (65) (141) (217) (142) (95) (100) (160) (317) (267) (133) (91) (67) (84) (191) (299) (382) (399) (319) (306) (296) (240) (314) (297) (297))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (22 389 693 1147 1640 2123 2591 2844 3071 3467 3915 4259 4454 4575 4724 4920 5159 5463 5738 5966 6211 6409 6611 6889 7161 7458 7751 7949 8235 8597 8901 9267 9629 9892 10136 10486 10849 11064 11422 11849 12142 12361 12511 12621 12764 12953 13129 13230 13299 13441 13639 13758 13833 13908 14022 14241 14443 14555 14638 14704 14794 14970 15199 15456 15722 15948 16176 16407 16606 16929 17367 17805)) :ldur (quote ((367) (304) (454) (493) (483) (468) (252) (227) (396) (448) (344) (196) (120) (150) (196) (238) (304) (275) (227) (246) (197) (202) (278) (272) (296) (293) (198) (286) (363) (303) (367) (362) (262) (244) (350) (363) (215) (358) (427) (293) (218) (151) (110) (142) (190) (176) (101) (69) (142) (198) (119) (75) (76) (114) (219) (202) (111) (83) (67) (90) (175) (229) (258) (266) (227) (228) (231) (199) (323) (438) (438))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (18 334 615 1067 1598 2078 2468 2647 2790 3053 3403 3709 3898 4018 4164 4351 4570 4837 5067 5248 5444 5602 5764 5988 6209 6459 6729 6923 7221 7614 7921 8254 8541 8727 8899 9153 9427 9594 9873 10171 10357 10488 10575 10636 10714 10824 10933 10999 11045 11146 11296 11393 11458 11525 11633 11864 12113 12268 12395 12501 12644 12877 13111 13315 13515 13685 13856 14029 14174 14400 14690 14980)) :ldur (quote ((316) (281) (452) (531) (480) (390) (179) (142) (264) (349) (306) (189) (120) (146) (187) (219) (267) (230) (181) (195) (158) (162) (225) (221) (250) (269) (195) (297) (393) (308) (332) (288) (185) (172) (254) (274) (167) (279) (298) (186) (131) (87) (61) (78) (110) (109) (66) (47) (100) (151) (97) (64) (68) (108) (231) (249) (155) (127) (106) (143) (233) (234) (204) (200) (170) (171) (173) (146) (226) (290) (290))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (7 123 219 363 519 677 841 933 1019 1183 1437 1689 1854 1964 2110 2312 2555 2856 3121 3334 3558 3731 3896 4101 4277 4439 4569 4649 4763 4901 5013 5146 5300 5428 5558 5763 5991 6127 6352 6621 6810 6956 7057 7132 7229 7359 7480 7551 7599 7699 7843 7932 7990 8049 8141 8329 8517 8626 8710 8777 8868 9015 9162 9326 9536 9742 9967 10206 10396 10667 10974 11281)) :ldur (quote ((116) (96) (144) (156) (158) (164) (92) (86) (164) (255) (251) (165) (110) (146) (202) (243) (301) (265) (213) (224) (173) (165) (205) (176) (162) (130) (80) (114) (139) (111) (133) (154) (127) (130) (205) (228) (136) (225) (268) (190) (146) (101) (75) (97) (130) (122) (71) (48) (100) (143) (89) (58) (59) (92) (187) (188) (110) (83) (68) (91) (148) (147) (163) (211) (205) (225) (239) (190) (271) (307) (307))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (14 240 411 642 865 1092 1323 1455 1587 1847 2189 2480 2651 2759 2895 3078 3308 3589 3809 3966 4108 4202 4308 4494 4723 5026 5369 5607 5956 6400 6767 7199 7611 7900 8149 8464 8740 8880 9112 9413 9643 9832 9972 10079 10224 10429 10633 10758 10846 11035 11315 11492 11607 11727 11914 12299 12659 12836 12957 13046 13149 13291 13487 13729 13984 14167 14320 14449 14543 14685 14867 15049)) :ldur (quote ((226) (172) (231) (223) (227) (231) (132) (132) (260) (342) (290) (171) (108) (136) (183) (230) (281) (220) (156) (142) (94) (106) (186) (229) (303) (343) (238) (349) (443) (368) (431) (412) (290) (249) (315) (276) (140) (232) (302) (230) (189) (139) (107) (145) (205) (204) (125) (88) (189) (280) (177) (116) (119) (187) (386) (359) (177) (121) (89) (103) (141) (196) (242) (255) (183) (153) (129) (94) (142) (182) (182))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (22 402 718 1196 1721 2241 2743 2993 3201 3526 3837 4032 4127 4179 4239 4321 4430 4582 4732 4866 5021 5154 5296 5504 5706 5922 6132 6271 6466 6701 6889 7135 7402 7610 7815 8124 8466 8674 8994 9337 9554 9710 9814 9888 9982 10103 10209 10274 10321 10426 10590 10700 10775 10855 10985 11270 11588 11791 11958 12101 12307 12681 13123 13576 14009 14346 14639 14896 15090 15360 15652 15943)) :ldur (quote ((379) (317) (478) (524) (520) (503) (249) (208) (326) (310) (196) (94) (52) (60) (83) (109) (152) (151) (134) (155) (132) (143) (207) (202) (216) (210) (139) (195) (235) (188) (246) (267) (208) (204) (310) (342) (208) (321) (342) (217) (156) (104) (75) (94) (120) (107) (65) (47) (104) (164) (110) (75) (80) (130) (286) (317) (203) (167) (144) (206) (375) (442) (453) (433) (337) (293) (257) (194) (270) (291) (291))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (19 344 619 1040 1510 1986 2461 2723 2963 3388 3866 4216 4408 4524 4665 4845 5058 5318 5543 5720 5903 6044 6181 6362 6539 6736 6935 7072 7271 7521 7730 7980 8225 8402 8568 8810 9065 9219 9477 9790 10015 10193 10322 10419 10549 10730 10907 11012 11085 11236 11454 11589 11676 11765 11902 12180 12454 12615 12741 12847 12994 13249 13536 13837 14135 14382 14623 14863 15066 15390 15821 16252)) :ldur (quote ((325) (275) (421) (471) (476) (475) (262) (239) (425) (478) (350) (192) (116) (141) (181) (213) (260) (225) (177) (183) (140) (138) (180) (178) (197) (199) (137) (199) (250) (208) (250) (245) (177) (166) (242) (255) (154) (258) (313) (225) (178) (128) (97) (130) (181) (177) (105) (72) (151) (218) (135) (87) (89) (137) (277) (275) (161) (126) (106) (147) (255) (286) (302) (298) (246) (242) (240) (203) (324) (431) (431))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (18 319 560 905 1260 1586 1882 2033 2163 2379 2604 2763 2855 2913 2987 3088 3215 3385 3548 3689 3847 3979 4119 4320 4525 4759 5001 5172 5422 5735 5996 6308 6613 6832 7035 7324 7622 7798 8088 8431 8671 8855 8986 9083 9211 9387 9555 9654 9723 9868 10079 10210 10295 10383 10519 10797 11076 11242 11373 11484 11640 11909 12205 12487 12736 12924 13095 13253 13379 13565 13789 14013)) :ldur (quote ((301) (241) (345) (354) (326) (296) (151) (131) (216) (225) (160) (92) (58) (74) (100) (127) (171) (163) (141) (158) (132) (140) (200) (205) (234) (243) (170) (250) (314) (260) (312) (305) (219) (203) (289) (298) (176) (290) (343) (240) (185) (130) (97) (128) (176) (168) (99) (69) (145) (211) (131) (85) (88) (136) (278) (279) (166) (131) (111) (156) (270) (296) (281) (249) (188) (171) (158) (126) (187) (224) (224))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (17 313 576 999 1498 2028 2544 2819 3066 3491 3966 4305 4483 4587 4711 4863 5034 5226 5381 5522 5697 5853 6030 6300 6595 6948 7303 7544 7889 8316 8665 9079 9487 9781 10054 10444 10843 11058 11370 11673 11842 11951 12015 12060 12128 12240 12367 12452 12514 12658 12894 13058 13172 13294 13495 13892 14263 14470 14626 14753 14923 15201 15542 15923 16315 16649 16979 17285 17525 17874 18282 18690)) :ldur (quote ((296) (263) (423) (500) (529) (516) (275) (246) (425) (475) (339) (178) (104) (124) (153) (170) (192) (154) (141) (175) (157) (176) (270) (295) (353) (355) (241) (346) (427) (348) (414) (407) (294) (273) (390) (399) (215) (313) (303) (170) (108) (64) (45) (68) (112) (127) (85) (63) (143) (236) (164) (114) (123) (201) (396) (371) (207) (156) (127) (170) (279) (340) (381) (392) (333) (331) (306) (240) (349) (408) (408))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (17 305 547 911 1312 1710 2102 2315 2508 2848 3238 3541 3715 3823 3957 4135 4354 4635 4894 5110 5346 5537 5735 6010 6283 6583 6884 7089 7385 7755 8060 8423 8775 9027 9260 9589 9926 10124 10449 10832 11099 11307 11455 11565 11712 11914 12108 12223 12302 12467 12705 12853 12948 13045 13195 13498 13797 13973 14110 14225 14386 14664 14970 15263 15524 15722 15902 16070 16204 16403 16644 16885)) :ldur (quote ((288) (241) (365) (401) (398) (392) (213) (193) (340) (390) (303) (174) (108) (135) (178) (218) (282) (259) (216) (236) (191) (198) (275) (273) (300) (301) (205) (296) (370) (305) (363) (353) (252) (232) (329) (337) (198) (325) (382) (268) (208) (148) (111) (146) (202) (194) (115) (79) (165) (238) (147) (95) (97) (150) (303) (300) (175) (138) (115) (160) (278) (307) (293) (261) (198) (181) (167) (134) (200) (241) (241))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (7 161 328 649 1094 1595 2049 2279 2476 2798 3149 3429 3593 3695 3823 3995 4209 4473 4686 4844 4995 5102 5197 5308 5426 5576 5744 5870 6068 6316 6495 6681 6831 6923 7029 7234 7511 7704 8073 8526 8804 8996 9121 9208 9314 9445 9553 9616 9660 9754 9896 9987 10047 10109 10208 10417 10647 10800 10929 11044 11215 11544 11949 12340 12688 12950 13189 13418 13616 13938 14376 14813)) :ldur (quote ((153) (168) (321) (444) (501) (455) (230) (197) (322) (351) (280) (163) (102) (129) (172) (214) (264) (214) (158) (151) (106) (95) (111) (119) (149) (169) (126) (198) (247) (180) (185) (150) (92) (106) (205) (277) (193) (368) (454) (277) (193) (125) (87) (106) (130) (108) (63) (44) (95) (142) (91) (60) (63) (99) (209) (230) (152) (129) (115) (171) (329) (405) (391) (347) (263) (239) (229) (198) (322) (437) (437))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (6 119 226 410 643 905 1193 1362 1522 1821 2190 2495 2679 2795 2943 3143 3397 3727 4024 4267 4528 4736 4948 5237 5518 5820 6115 6312 6592 6931 7203 7517 7812 8018 8205 8468 8735 8890 9142 9436 9639 9796 9906 9989 10098 10247 10389 10474 10532 10655 10834 10945 11018 11092 11208 11443 11685 11833 11954 12057 12205 12474 12791 13115 13424 13672 13910 14142 14335 14638 15031 15424)) :ldur (quote ((113) (107) (184) (233) (262) (288) (169) (160) (299) (369) (306) (183) (116) (148) (200) (254) (330) (297) (243) (261) (208) (212) (289) (280) (302) (295) (197) (280) (339) (272) (314) (296) (206) (187) (263) (266) (155) (253) (294) (203) (157) (111) (83) (109) (149) (142) (84) (58) (123) (179) (111) (72) (74) (116) (236) (242) (148) (120) (103) (148) (269) (317) (324) (309) (248) (238) (232) (193) (303) (393) (393))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (24 416 727 1167 1610 2010 2366 2554 2721 3010 3332 3576 3714 3798 3902 4042 4215 4442 4655 4835 5035 5199 5371 5614 5868 6162 6472 6694 7027 7464 7840 8275 8678 8955 9201 9535 9860 10042 10321 10615 10799 10931 11018 11080 11157 11254 11340 11390 11426 11502 11617 11692 11742 11793 11876 12051 12237 12353 12448 12532 12654 12885 13168 13471 13770 14007 14212 14391 14525 14711 14908 15105)) :ldur (quote ((392) (311) (440) (443) (399) (356) (188) (168) (289) (322) (244) (137) (84) (104) (139) (173) (227) (213) (180) (200) (164) (172) (243) (253) (294) (311) (221) (333) (438) (376) (435) (403) (276) (246) (334) (325) (182) (278) (294) (185) (131) (87) (62) (77) (98) (85) (50) (35) (76) (115) (75) (50) (52) (82) (175) (186) (115) (95) (84) (122) (231) (284) (303) (299) (237) (205) (179) (134) (186) (197) (197))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (20 332 560 850 1111 1374 1643 1790 1911 2098 2270 2419 2542 2630 2755 2944 3212 3585 3921 4197 4493 4729 4953 5218 5427 5596 5720 5805 5930 6088 6220 6380 6538 6652 6753 6888 7016 7086 7201 7345 7450 7535 7599 7650 7721 7827 7938 8007 8057 8167 8337 8448 8523 8602 8729 9004 9280 9431 9543 9633 9752 9941 10133 10301 10453 10629 10848 11105 11349 11710 12111 12512)) :ldur (quote ((312) (228) (290) (260) (263) (269) (146) (121) (186) (172) (150) (122) (89) (125) (189) (268) (373) (336) (275) (296) (236) (224) (265) (209) (169) (124) (85) (125) (158) (132) (160) (158) (114) (101) (135) (128) (70) (116) (144) (105) (85) (64) (51) (71) (106) (110) (69) (50) (110) (170) (112) (75) (79) (127) (274) (276) (151) (112) (90) (119) (189) (192) (168) (152) (176) (219) (257) (244) (362) (401) (401))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (24 400 673 1014 1292 1539 1823 1995 2161 2468 2786 3003 3116 3181 3259 3354 3468 3608 3732 3831 3935 4019 4119 4282 4471 4711 4983 5164 5397 5642 5805 5970 6190 6394 6617 6987 7404 7636 7994 8379 8625 8812 8948 9051 9190 9386 9579 9696 9778 9954 10217 10386 10497 10613 10796 11181 11585 11827 12010 12159 12359 12685 13010 13302 13566 13769 13956 14131 14268 14467 14697 14927)) :ldur (quote ((376) (273) (341) (278) (246) (284) (172) (166) (307) (318) (217) (113) (66) (77) (96) (113) (141) (123) (99) (104) (84) (100) (163) (189) (240) (272) (181) (234) (245) (163) (165) (221) (204) (222) (370) (417) (232) (358) (385) (246) (187) (136) (104) (139) (196) (193) (117) (82) (176) (263) (168) (111) (116) (183) (385) (404) (242) (183) (149) (200) (326) (325) (292) (264) (203) (187) (175) (137) (199) (230) (230))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (9 177 342 634 1012 1412 1739 1886 2002 2165 2336 2506 2618 2693 2792 2933 3121 3381 3633 3853 4103 4313 4537 4860 5185 5549 5919 6175 6549 7007 7360 7755 8109 8345 8555 8839 9116 9272 9518 9785 9954 10076 10157 10214 10287 10380 10463 10514 10551 10636 10772 10864 10928 10997 11109 11360 11638 11813 11956 12081 12261 12594 12991 13377 13725 13992 14238 14475 14679 15008 15452 15896)) :ldur (quote ((168) (165) (292) (378) (400) (326) (148) (116) (162) (171) (170) (112) (75) (99) (141) (187) (260) (252) (220) (250) (210) (224) (323) (326) (364) (370) (256) (374) (458) (354) (394) (354) (236) (209) (285) (277) (156) (246) (267) (169) (121) (81) (58) (73) (93) (83) (51) (37) (84) (136) (93) (64) (68) (112) (251) (278) (174) (143) (125) (180) (334) (396) (386) (348) (267) (246) (237) (204) (329) (444) (444))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 16 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 880 732) (om-make-point 244 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 99 349) (om-make-point 46 30) (list 0.5 2) "(.5 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 487 142) (om-make-point 28 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 454 80) (om-make-point 49 30) (list 4 17) "(4 17)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 354 123) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 349 227) (om-make-point 122 108) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0)) (quote (585.0 938.0 403.0 866.0 5.0 838.0 766.0 194.0 520.0 797.0 173.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 66.666664 133.33333 200.0 266.66666 333.33334 400.0 466.66666 533.3333 600.0 666.6667 733.3333 800.0 866.6667 933.3333 1000.0)) (quote (618.0 489.99997 550.0 818.0 65.0 876.0 277.0 6.0 109.0 507.00003 992.0 546.0 915.0 29.000002 415.0 696.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 66.666664 133.33333 200.0 266.66666 333.33334 400.0 466.66666 533.3333 600.0 666.6667 733.3333 800.0 866.6667 933.3333 1000.0)) (quote (883.0 142.0 41.0 308.0 268.0 661.0 860.0 731.0 986.0 164.0 352.0 14.0 816.0 625.0 759.0 977.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 83.333336 166.66667 250.0 333.33334 416.66666 500.0 583.3333 666.6667 750.0 833.3333 916.6667 1000.0)) (quote (695.0 751.0 744.0 160.0 261.0 347.0 767.0 756.0 855.0 191.0 324.0 853.0 955.99994)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 66.666664 133.33333 200.0 266.66666 333.33334 400.0 466.66666 533.3333 600.0 666.6667 733.3333 800.0 866.6667 933.3333 1000.0)) (quote (262.0 596.0 990.99994 359.0 475.0 566.0 335.0 421.0 932.00007 594.0 542.0 300.0 919.0 225.0 136.0 982.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 200.0 400.0 600.0 800.0 1000.0)) (quote (130.0 222.0 361.0 182.0 870.0 124.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 71.42857 142.85715 214.28572 285.7143 357.14282 428.57144 500.0 571.4286 642.8571 714.28565 785.7143 857.1429 928.5714 1000.0)) (quote (342.0 34.0 649.0 230.0 501.00003 516.0 231.00002 603.0 439.0 791.0 682.0 527.0 822.0 628.0 597.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 76.92307 153.84615 230.76921 307.6923 384.61536 461.53842 538.46155 615.3846 692.3077 769.2307 846.1539 923.07685 1000.0)) (quote (951.99994 963.99994 889.00007 198.0 413.0 932.99994 971.00007 642.0 603.0 739.0 773.0 986.0 355.0 707.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 62.5 125.0 187.5 250.0 312.5 375.0 437.5 500.0 562.5 625.0 687.5 750.0 812.49994 875.0 937.5 1000.0)) (quote (555.0 813.0 752.0 410.0 277.0 875.0 180.0 102.0 162.0 644.0 384.0 177.0 149.0 955.0 590.0 889.00007 867.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 111.11111 222.22222 333.33334 444.44443 555.55555 666.6667 777.7777 888.88886 1000.0)) (quote (96.0 77.0 903.0 565.0 716.0 246.0 782.0 294.0 93.0 802.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 166.66667 333.33334 500.0 666.6667 833.3333 1000.0)) (quote (283.0 104.0 681.0 618.0 393.0 604.0 180.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 200.0 400.0 600.0 800.0 1000.0)) (quote (325.0 831.0 481.0 411.0 516.0 821.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 90.90909 181.81818 272.72726 363.63635 454.54544 545.4545 636.36365 727.2727 818.1818 909.0909 1000.0)) (quote (405.0 40.0 148.0 763.0 128.0 178.0 109.0 936.00007 53.0 540.0 55.0 446.99997)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 333.33334 666.6667 1000.0)) (quote (393.0 324.0 305.0 774.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 83.333336 166.66667 250.0 333.33334 416.66666 500.0 583.3333 666.6667 750.0 833.3333 916.6667 1000.0)) (quote (932.00007 92.0 465.0 355.0 949.0 618.0 983.00007 48.0 782.0 683.0 269.0 440.0 125.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 250.0 500.0 750.0 1000.0)) (quote (998.00007 159.0 507.00003 617.0 315.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 111.11111 222.22222 333.33334 444.44443 555.55555 666.6667 777.7777 888.88886 1000.0)) (quote (11.0 466.00003 570.0 444.0 67.0 382.0 893.99994 748.0 459.0 987.00007)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 62.5 125.0 187.5 250.0 312.5 375.0 437.5 500.0 562.5 625.0 687.5 750.0 812.49994 875.0 937.5 1000.0)) (quote (235.00002 733.0 652.0 962.0 7.0 99.0 920.99994 893.99994 871.0 979.99994 912.0 657.0 463.0 774.0 951.99994 105.0 553.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 76.92307 153.84615 230.76921 307.6923 384.61536 461.53842 538.46155 615.3846 692.3077 769.2307 846.1539 923.07685 1000.0)) (quote (2.0 793.0 433.0 803.0 905.99994 379.0 916.99994 37.0 425.0 250.0 99.0 564.0 633.0 842.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 83.333336 166.66667 250.0 333.33334 416.66666 500.0 583.3333 666.6667 750.0 833.3333 916.6667 1000.0)) (quote (846.0 319.0 959.99994 438.0 145.0 42.0 391.0 588.0 908.0 519.0 299.0 407.0 117.00001)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) "&" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "ligeti-canon" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chordseq-self" nil) (om-load-inputfun (quote input-funbox) "" "scale-minmax" nil) (om-load-inputfun (quote input-funbox) "" "bpfs" nil))) (om-make-point 79 392) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "R-TIME-SCALER" (quote r-time-scaler) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "scaling-factor-minmax" "SCALING-FACTOR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "scaling-bpf-1000x1000" "SCALING-BPF-1000X1000" nil) (om-load-inputfun (quote input-funbox) "window-resolution" "WINDOW-RESOLUTION" nil))) (om-make-point 137 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "bpfs" 2 (om-make-point 266 54) "" "bpfs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 185 246) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 203 419) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 47 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "scale-minmax" 1 (om-make-point 120 54) "" "scale-minmax" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chordseq-self" 0 (om-make-point 40 43) "" "chordseq-self" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 286 510) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 186 510) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (6 0 0 1 nil 0) (4 0 0 2 nil 0) (2 0 0 3 nil 0) (0 0 3 0 nil 0) (1 0 4 0 nil 0) (7 0 5 0 nil 0) (3 1 8 0 nil 0) (3 0 9 0 nil 0))) 1 "ligeti-canon" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 47 234) (om-make-point 256 109) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8350) (9200) (5900) (7200) (7650) (7900) (8050) (8200) (7250) (8750) (8500) (5850) (8600) (7450) (7900) (7750) (6650) (9000) (8000) (8050) (6250) (7050) (6500) (6400) (7150) (8100) (6300) (6100) (8400) (7550) (8300) (7250) (8200) (6200) (5950) (7500) (7950) (6400) (8950) (8100) (8550) (9100) (8200) (8750) (8500) (8250) (6850) (7700) (7650) (7100) (7750) (7350) (8800) (7050) (9400) (6250) (8350) (8700) (9200) (7650) (8600) (7300) (8550) (7750) (6400) (6000) (8750) (6950) (8900) (8700) (7100))) :lonset (quote (0 204 374 630 910 1187 1458 1605 1738 1971 2237 2443 2561 2634 2725 2845 2992 3181 3354 3498 3655 3782 3913 4095 4275 4473 4671 4806 5001 5244 5444 5682 5913 6078 6230 6445 6665 6794 7006 7255 7429 7564 7660 7732 7827 7958 8084 8159 8211 8321 8482 8583 8649 8717 8823 9041 9263 9396 9502 9592 9719 9945 10203 10459 10696 10882 11057 11224 11361 11572 11839 12095)) :ldur (quote ((204) (170) (256) (280) (277) (271) (147) (133) (233) (266) (206) (118) (73) (91) (120) (147) (189) (173) (144) (157) (127) (131) (182) (180) (198) (198) (135) (195) (243) (200) (238) (231) (165) (152) (215) (220) (129) (212) (249) (174) (135) (96) (72) (95) (131) (126) (75) (52) (110) (161) (101) (66) (68) (106) (218) (222) (133) (106) (90) (127) (226) (258) (256) (237) (186) (175) (167) (137) (211) (267) (256))) :lvel (quote ((56) (56) (57) (58) (59) (60) (62) (65) (67) (69) (71) (72) (73) (73) (73) (72) (72) (71) (70) (70) (69) (69) (68) (68) (68) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (67) (66) (66) (66) (66) (66) (66) (66) (65) (65) (64) (64) (63) (63) (63) (62) (62) (62) (62) (62) (61) (61) (60) (59) (59) (59) (58) (58) (58) (58) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 16 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 880 488) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 164 16) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 19) (om-make-point 49 30) 12056 "12056" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 19 36) (om-make-point 90 30) (list 5700 9600) "(5700 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 1 1 0 nil 0) (0 0 1 1 nil 0) (4 0 2 0 nil 0) (26 0 3 0 nil 0) (25 0 3 1 nil 0) (24 0 3 2 nil 0) (4 0 3 3 nil 0) (2 0 3 4 nil 0) (3 0 5 0 nil 0) (20 0 6 0 nil 0) (19 0 6 1 nil 0) (18 0 6 2 nil 0) (1 0 7 0 nil 0) (12 0 7 1 nil 0) (14 0 7 2 nil 0) (13 0 7 3 nil 0) (9 0 7 4 nil 0) (8 0 7 5 nil 0) (7 0 11 1 nil 0) (22 0 15 0 nil 0) (15 0 16 1 nil 0) (6 0 21 1 nil 0) (23 0 22 0 nil 0) (17 0 22 1 nil 0) (21 1 22 2 nil 0) (5 0 23 0 nil 0))) nil 6.13))
