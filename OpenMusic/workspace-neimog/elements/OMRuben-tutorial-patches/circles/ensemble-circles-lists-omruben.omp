; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 10 10) (om-make-point 233 23) (om-make-point 1047 720) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "ensemble-circles-lists-omruben" (quote ((let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 111 338) (om-make-point 24 30) 18 "18" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNEL-MULTISEQ" (quote r-apply-channel-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channel" "CHANNEL" nil))) (om-make-point 36 383) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-ENSEMBLE-CIRCLES-LISTS" (quote r-ensemble-circles-lists) (quote ((om-load-inputfun (quote input-funbox) "circles-bpf-1000x1000" "CIRCLES-BPF-1000X1000" nil) (om-load-inputfun (quote input-funbox) "overall-duration-seconds" "OVERALL-DURATION-SECONDS" nil) (om-load-inputfun (quote input-funbox) "attack-blur-minmax" "ATTACK-BLUR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "decal-blur-minmax" "DECAY-BLUR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "reading-resolution-1000" "READING-RESOLUTION-1000" nil) (om-load-inputfun (quote input-funbox) "flatlist-of-lambda-gestures" "FLATLIST-OF-LAMBDA-GESTURES" nil) (om-load-inputfun (quote input-funbox) "gest-index-lists" "GEST-INDEX-LISTS" nil) (om-load-inputfun (quote input-funbox) "chordseq-startnotes" "CHORDSEQ-STARTNOTES" nil) (om-load-inputfun (quote input-funbox) "speed-ratios" "SPEED-RATIOS" nil))) (om-make-point 161 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GEST-RAPID-TREMOLO" (quote r-gest-rapid-tremolo) (quote ((om-load-inputfun (quote input-funbox) "macromel-chord" "MACROMEL-CHORD" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil))) (om-make-point 383 68) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 407 57) (quote "Use bpf to create circling movements between different instruments in an ensemble.") "" (om-make-point 326 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 53 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-TO-POLY" (quote r-multiseq-to-poly) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "tempo" "TEMPO" 0) (om-load-inputfun (quote input-funbox) "time-signature-list" "TIME-SIGNATURE-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "multiplication-factor" "MULTIPLICATION-FACTOR" 0))) (om-make-point 143 620) (om-make-point 111 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GEST-INFLECT-CHORD" (quote r-gest-inflect-chord) (quote ((om-load-inputfun (quote input-funbox) "macromelody-chord" "MACROMELODY-CHORD" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil))) (om-make-point 264 72) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 472 166) (om-make-point 70 50) (load-buffer-textfile (quote ("(0 0 1 0 0 0 1 1 0)" "(0 0 0 0 1  1 1 0 1)" "(0 0 1 1 0 0 1)" "(0 0 0 1)" "(0 0 0 1 1 0)" "(1 0 0 1 1 0 0)" "(0 0 0 1 0)" "(0 0 0 0 0 0 1 1 1 1)" "( 0 0 0 0 1 1 0 0 0)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 384 383) (om-make-point 516 314) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1 8 2.0 -2)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (10277)) :ldur (quote (410)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-8 -1.0 3)) (1 (1.0)) (1 (2.0 -8 -1.0)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-4 8 1.0)) (1 (8.0 1.0 -3 1)))) ((3 4) ((1 (4.0 8 1.0)) (1 (8.0 1.0 -4)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (10062)) :ldur (quote (167)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10099)) :ldur (quote (410)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10049)) :ldur (quote (51)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10032)) :ldur (quote (410)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-1)) (1 (-2 8 1.0 -2)) (1 (-8 -1.0 2)))) ((3 4) ((1 (8.0 1.0 -2)) (1 (-1 2 2 2 2 -1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-3 2 2 2 2 1)))) ((3 4) ((1 (2.0 2 2 -4 1)) (1 (2.0 8 2.0 -2)) (1 (-2 2 3 2 -1)))) ((3 4) ((1 (-1 2 2 -4)) (1 (-8 -2.0 2 2)) (1 (2.0 3 2 2 2 1)))) ((3 4) ((1 (1.0 2 2 2 -4)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9333)) :ldur (quote (410)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9281)) :ldur (quote (121)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (133)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (133)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (133)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (133)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (111)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (56)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (121)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (121)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (61)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9337)) :ldur (quote (381)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (133)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (200)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (133)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (148)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (148)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (95)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (95)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (167)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (111)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (111)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (111)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (56)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (121)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (121)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (121)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-1)) (1 (-2 2 8 1.0)) (1 (4.0 -4 2)))) ((3 4) ((1 (8.0 1.0 -3)) (1 (-3 2 2 -3)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-8 -1.0 4)) (1 (3.0 8 3.0 -1 2)))) ((3 4) ((1 (8.0 1.0 -1)) (1 (-1 3 -2 3 1)) (1 (1.0)))) ((3 4) ((1 (1.0 -4 4 -1)) (1 (-1 8 2.0 2)) (1 (2.0 -1 8 1.0)))) ((3 4) ((1 (1.0 8 1.0)) (1 (1.0 8 1.0)) (1 (2.0 -8 -1.0 2)))) ((3 4) ((1 (8.0 2.0 -4 1)) (1 (8.0 1.0 -2)) (1 (-8 -1.0 4)))) ((3 4) ((1 (2.0 -8 -1.0)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9146)) :ldur (quote (103)) :lvel (quote (45)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9155)) :ldur (quote (410)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9158)) :ldur (quote (133)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9150)) :ldur (quote (133)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9150)) :ldur (quote (133)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9110)) :ldur (quote (205)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9113)) :ldur (quote (314)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9163)) :ldur (quote (78)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9104)) :ldur (quote (200)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9170)) :ldur (quote (200)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9145)) :ldur (quote (67)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9183)) :ldur (quote (267)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9195)) :ldur (quote (410)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9156)) :ldur (quote (103)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9102)) :ldur (quote (444)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9121)) :ldur (quote (533)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9129)) :ldur (quote (533)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9111)) :ldur (quote (103)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9118)) :ldur (quote (44)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9109)) :ldur (quote (205)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-1)) (1 (-1 3 -1 8 2.0)) (1 (3.0 -4 2)))) ((3 4) ((1 (8.0 1.0 -2)) (1 (-3 2 2 2 -2)) (1 (-1)))) ((3 4) ((1 (-1 3 2 2 -2)) (1 (-3 4 2 1)) (1 (1.0 2 2 -3 2 1)))) ((3 4) ((1 (2.0 2 2 -4 2 1)) (1 (2.0 2 2 2 2 2 -1)) (1 (-1)))) ((3 4) ((1 (-3 2 2 2 1)) (1 (2.0 2 2 -1 2 2 1)) (1 (2.0 2 -4 1)))) ((3 4) ((1 (1.0 2 2 -2 2 2)) (1 (1.0 2 2 2 2 2 1)) (1 (1.0 2 2 2 2 1)))) ((3 4) ((1 (2.0 2 2 2 2 1)) (1 (2.0 3 -4)) (1 (-1 2 2 -1 2 2 -1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7309)) :ldur (quote (133)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7269)) :ldur (quote (356)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7255)) :ldur (quote (148)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (200)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7329)) :ldur (quote (267)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (67)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (61)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (103)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (103)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (103)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (51)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (103)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (103)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (103)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (103)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (103)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (67)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (56)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (148)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (74)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (56)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (133)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (67)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (61)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (222)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (121)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (3 3 -3)) (1 (-1 8 2.0 4)) (1 (8.0 2.0 2 2)))) ((3 4) ((1 (1.0 2 2 -8 -2.0)) (1 (-4 2 2 -3)) (1 (-8 -1.0 4)))) ((3 4) ((1 (4.0 8 1.0)) (1 (1.0 -1 3 3 3)) (1 (1.0 3 -8 -3.0 2)))) ((3 4) ((1 (1.0 2 2 2 -2 2 2 -1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-3 2 2 2 2)) (1 (1.0 -3 2 2 2 -2)) (1 (-1)))) ((3 4) ((1 (-1 2 2 2 2 2 1)) (1 (1.0 2 2 2 2 2)) (1 (1.0 2 2 2 -4 1)))) ((3 4) ((1 (1.0 1 2 2 2 2 2 1)) (1 (1.0 2 2 2 2 1)) (1 (2.0 2 2 2 2 -1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (222)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (222)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7252)) :ldur (quote (356)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7287)) :ldur (quote (178)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (95)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (95)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (89)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (89)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7235)) :ldur (quote (205)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7260)) :ldur (quote (410)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (182)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (182)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (182)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (118)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (78)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (95)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (95)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (95)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (95)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (95)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (56)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (56)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (51)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (103)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (103)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (103)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (103)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (103)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (51)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (133)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (133)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (133)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (133)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (67)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (121)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-2 8 2.0 1)) (1 (1.0)) (1 (1.0 -2 4 3 1)))) ((3 4) ((1 (2.0 -8 -1.0)) (1 (-8 -1.0 4)) (1 (3.0 2 2 2 2 1)))) ((3 4) ((1 (2.0 2 2 2 -2 2 1)) (1 (1.0 2 2 2 2 2 -1)) (1 (-1)))) ((3 4) ((1 (-1 2 2 -3 2 1)) (1 (1.0 -8 -1.0)) (1 (-1)))) ((3 4) ((1 (-4 2 2 2)) (1 (1.0 -8 -1.0)) (1 (-1)))) ((3 4) ((1 (-2 2 2 2 1)) (1 (2.0 2 -8 -1.0)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-2 2 2 -2 2)) (1 (1.0 3 -2 2 -2)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6253)) :ldur (quote (410)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6208)) :ldur (quote (51)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182)) :ldur (quote (242)) :lvel (quote (47)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (182)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (61)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6187)) :ldur (quote (205)) :lvel (quote (47)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (56)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (103)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (103)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (103)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (103)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (51)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (111)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (121)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (121)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (121)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (61)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (133)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (133)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (133)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (148)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (148)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (148)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (74)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (103)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (133)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (133)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (133)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (200)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (133)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-3 8 1.0 1)) (1 (4.0 -8 -1.0)) (1 (-3 2 4)))) ((3 4) ((1 (4.0 -8 -1.0)) (1 (-8 -1.0 3)) (1 (4.0 -8 -1.0)))) ((3 4) ((1 (-8 -1.0 1)) (1 (8.0 1.0 -4)) (1 (-1)))) ((3 4) ((1 (-1 1 2 2 2 2)) (1 (1.0 2 2 -8 -2.0)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-2 2 2 2 2 2 1)) (1 (1.0 -4 1 -3)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5141)) :ldur (quote (410)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5077)) :ldur (quote (51)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5102)) :ldur (quote (148)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5076)) :ldur (quote (296)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5138)) :ldur (quote (167)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5061)) :ldur (quote (67)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (67)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (133)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (133)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (133)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (133)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (89)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (89)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (103)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (103)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (103)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (103)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (103)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (51)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (74)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((3 4) ((1 (-8 -1.0 4)) (1 (4.0 -8 -1.0)) (1 (-4 8 1.0)))) ((3 4) ((1 (8.0 1.0 -4)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-2 8 1.0 -2)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-3 4 -3)) (1 (-8 -1.0 1 -3)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4366)) :ldur (quote (205)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4321)) :ldur (quote (410)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4357)) :ldur (quote (410)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4366)) :ldur (quote (267)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (51)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx cursor-mode)) (list 0 nil (quote t) 1 0 (om-make-point 330 23) (om-make-point 950 720) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 16 8 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 306 582) (om-make-point 28 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 239 580) (om-make-point 52 30) (list (list 3 4)) "((3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 193 576) (om-make-point 28 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 152 217) (om-make-point 42 30) (list 0 0) "(0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 37 479) (om-make-point 283 76) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10277))) :lonset (quote (7731 8235)) :ldur (quote ((504))) :lvel (quote ((53))) :loffset (quote ((0))) :lchan (quote ((18))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10062) (10099) (10049) (10032))) :lonset (quote (2357 6602 7553 7870 8608)) :ldur (quote ((950) (730) (317) (738))) :lvel (quote ((78) (58) (87) (56))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9333) (9281) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9294) (9337) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300) (9300))) :lonset (quote (827 1902 2701 2841 2977 3110 5473 5599 5721 5832 5953 6066 6169 6552 6745 7407 7572 7743 8002 8146 9023 9178 9347 9520 9625 9743 9861 9984 10089 10189 10294)) :ldur (quote ((402) (608) (140) (136) (133) (138) (126) (122) (111) (121) (113) (103) (109) (193) (446) (165) (171) (160) (144) (149) (155) (169) (173) (105) (118) (118) (123) (105) (100) (105))) :lvel (quote ((63) (63) (59) (69) (73) (57) (57) (65) (72) (71) (66) (62) (55) (82) (64) (56) (69) (56) (56) (56) (61) (72) (55) (55) (63) (68) (73) (75) (71) (58))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9146) (9155) (9158) (9150) (9150) (9110) (9113) (9163) (9104) (9170) (9145) (9183) (9195) (9156) (9102) (9121) (9129) (9111) (9118) (9109))) :lonset (quote (758 910 1847 2798 2927 4921 5362 5720 6506 6823 7043 8049 8449 8959 9235 9745 10406 11509 12295 13329 13743)) :ldur (quote ((152) (654) (556) (129) (125) (441) (352) (677) (197) (220) (756) (316) (510) (203) (510) (662) (720) (487) (529) (414))) :lvel (quote ((45) (81) (72) (63) (56) (82) (56) (52) (62) (77) (77) (61) (52) (83) (73) (68) (85) (78) (65) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7309) (7269) (7255) (7300) (7300) (7300) (7300) (7300) (7300) (7329) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300))) :lonset (quote (717 979 1820 2867 2982 3088 3998 4167 4328 4840 5102 5212 5348 5481 5834 5931 6025 6124 6471 6587 6693 6793 6900 7010 7125 8111 8259 8415 8555 8695 8801 8917 9066 9224 9376 9856 9958 10080 10354 10468 10572 10673 10782 10894 11008 11147 11286 11406 11564 11710 11845 11988 12129 12250 12385 12527 12706 13272 13397 13549 13686 13823)) :ldur (quote ((212) (520) (664) (115) (106) (111) (169) (161) (164) (262) (110) (136) (133) (113) (97) (94) (99) (99) (116) (106) (100) (107) (110) (115) (115) (148) (156) (140) (140) (106) (108) (149) (158) (152) (151) (102) (122) (115) (114) (104) (101) (109) (112) (114) (139) (139) (120) (158) (146) (135) (143) (141) (121) (135) (142) (179) (176) (125) (138) (137) (137))) :lvel (quote ((89) (48) (89) (62) (74) (59) (56) (75) (56) (87) (55) (62) (69) (62) (56) (71) (70) (56) (60) (64) (72) (70) (60) (62) (62) (60) (57) (61) (61) (58) (56) (56) (64) (71) (67) (59) (72) (60) (58) (73) (66) (58) (56) (68) (74) (69) (59) (68) (55) (56) (64) (68) (66) (56) (55) (55) (55) (56) (55) (56) (56))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7250) (7250) (7252) (7287) (7250) (7250) (7250) (7250) (7250) (7250) (7235) (7260) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250) (7250))) :lonset (quote (0 226 676 1034 1778 1885 2014 2144 2924 3010 3738 4317 4772 4962 5152 5338 5904 6007 6110 6213 6431 6548 8204 8314 8412 8551 8862 8989 9116 10048 10145 10241 10339 10467 10597 10736 10872 11002 11142 11246 11341 11445 11559 11972 12061 12144 12231 12317 12402 12505 12595 12694 12845 13001 13151 13302 13437 13575 13716 13822 13928)) :ldur (quote ((226) (211) (358) (744) (107) (129) (130) (122) (86) (86) (579) (384) (190) (190) (186) (177) (103) (103) (103) (101) (117) (117) (110) (98) (139) (139) (127) (127) (132) (97) (96) (98) (128) (130) (139) (136) (130) (140) (104) (95) (104) (114) (111) (89) (83) (87) (86) (85) (103) (90) (99) (151) (156) (150) (151) (135) (138) (141) (106) (106))) :lvel (quote ((57) (56) (68) (65) (67) (73) (70) (56) (66) (66) (85) (58) (57) (66) (73) (61) (60) (75) (64) (57) (65) (65) (58) (56) (74) (74) (62) (69) (55) (56) (72) (55) (56) (62) (66) (72) (62) (56) (61) (70) (66) (58) (55) (58) (69) (74) (69) (66) (64) (61) (58) (59) (73) (69) (59) (59) (69) (56) (60) (60))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6253) (6208) (6182) (6225) (6225) (6187) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225) (6225))) :lonset (quote (110 647 1446 1735 1903 2990 3514 3620 3729 3841 3955 4060 4161 4276 4483 4585 4687 4789 4887 4985 5094 5973 6082 6401 6542 8218 8350 8498 10079 10227 10375 10518 10684 12658 12802 13100 13290 13652 13762)) :ldur (quote ((537) (714) (289) (168) (165) (524) (106) (109) (112) (114) (105) (101) (115) (122) (102) (102) (102) (98) (98) (109) (122) (109) (126) (141) (141) (132) (148) (158) (148) (148) (143) (166) (156) (144) (152) (190) (203) (110))) :lvel (quote ((64) (70) (47) (55) (55) (47) (59) (71) (74) (68) (65) (62) (61) (55) (67) (67) (65) (74) (66) (62) (55) (55) (62) (70) (70) (55) (68) (56) (58) (70) (72) (62) (55) (59) (55) (60) (67) (72))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5141) (5077) (5102) (5076) (5138) (5061) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100))) :lonset (quote (234 592 1515 1680 3086 4602 6049 6131 6225 6326 6489 6639 6795 12724 12854 12987 13077 13169 13257 13677 13746)) :ldur (quote ((358) (321) (165) (600) (548) (447) (82) (94) (101) (163) (150) (156) (131) (130) (133) (90) (92) (88) (91) (69))) :lvel (quote ((74) (77) (66) (90) (67) (77) (56) (75) (61) (56) (69) (69) (57) (56) (56) (65) (71) (65) (58) (55))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4366) (4321) (4357) (4366) (4350))) :lonset (quote (345 1585 6147 12831 13727 13741)) :ldur (quote ((597) (748) (401) (296) (14))) :lvel (quote ((77) (78) (62) (71) (65))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0)) ((0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 16 (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1000 751) (om-make-point 280 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 590 117) (om-make-point 175 134) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10250) (10075) (9300) (9150) (7300) (7250) (6225) (5100) (4350) (3000))) :lonset (quote (0 333 688 1433 1854 2312 2833 3479 3833 4354 5354)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode cursor-mode)) (list 8 16 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 815 373) (om-make-point 465 70) 0 1 (quote t) nil 0 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 201 216) (om-make-point 50 30) (list 0.1 0.7) "(.1 .7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 418 309) (om-make-point 170 30) (list 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9) "(.9 .9 .9 .9 .9 .9 .9 .9 .9 .9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 312 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 101 219) (om-make-point 46 30) 13.74 "13.74" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 260 224) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 53 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 157 42) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 97 44) (om-make-point 56 30) (list 45 65) "(45 65)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 22 52) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 44 162) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.937904 3.827692 5.6693635 7.462918 9.208358 10.905681 12.554886 14.155977 15.708955 17.21381 18.670552 20.079178 21.439688 22.752079 24.016358 25.232518 26.400563 27.52049 28.592303 29.616002 30.600598 31.581576 32.562554 33.543538 34.524517 35.505497 36.486477 37.46746 38.448437 39.429417 40.4104 41.39138 42.37236 43.35334 44.33432 45.3153 46.29628 47.277264 48.25824 49.23922 50.2202 51.201184 52.182167 53.16315 54.14413 55.125107 56.1061 57.08708 58.06806 59.04905 60.030034 61.01101 61.99199 62.97298 63.953953 64.93494 65.915924 66.896904 67.87789 68.85887 69.83985 70.82084 71.80182 72.78281 73.763794 74.744774 75.72576 76.70674 77.68772 78.6687 79.64969 80.63066 81.61165 82.592636 83.573616 84.554596 85.53558 86.51657 87.49755 88.47853 89.45952 90.4405 91.42147 92.40244 93.38342 94.3644 95.34538 96.326355 97.30734 98.28832 99.26929 100.250275 101.23125 102.212235 103.19321 104.17418 105.15516 106.13614 107.11711 108.0981 109.07907 110.06006 111.04102 112.02201 113.002976 113.98396 114.96494 115.94591 116.926895 117.90786 118.88885 119.86983 120.85079 121.83178 122.81276 123.79373 124.77473 125.75571 126.73668 127.71766 128.69863 129.67961 130.66059 131.64157 132.62255 133.60352 134.5845 135.56548 136.54647 137.52744 138.50843 139.4894 140.47037 141.45136 142.43231 143.4133 144.39429 145.37526 146.35623 147.33722 148.31819 149.29918 150.28014 151.26113 152.24211 153.22309 154.20407 155.18503 156.16603 157.14699 158.12798 159.10897 160.08994 161.0709 162.0519 163.03287 164.01384 164.99481 165.9758 166.95679 167.93776 168.91873 169.89972 170.8807 171.8617 172.84268 173.82366 174.80464 175.78563 176.76663 177.7476 178.7286 179.70958 180.69058 181.67157 182.65256 183.63355 184.61454 185.59552 186.5765 187.5575 188.53849 189.51946 190.50046 191.48143 192.46244 193.4434 194.4244 195.40538 196.38639 197.36737 198.34836 199.32935 200.31034 201.29129 202.2723 203.2533 204.23427 205.21526 206.19626 207.17725 208.15824 209.13922 210.1202 211.10118 212.08219 213.06316 214.04416 215.02513 216.00612 216.98712 217.96811 218.9491 219.93009 220.91109 221.89205 222.87302 223.85404 224.83499 225.81601 226.79698 227.77794 228.75897 229.73996 230.72093 231.70192 232.68289 233.6639 234.64485 235.62586 236.60684 237.58782 238.56882 239.5498 240.5308 241.5118 242.4928 243.47377 244.45476 245.43576 246.41672 247.39769 248.37871 249.35968 250.34069 251.32167 252.30268 253.28363 254.26464 255.24562 256.22662 257.2076 258.1886 259.1696 260.15054 261.13156 262.11255 263.0935 264.07452 265.0555 266.0365 267.0175 267.99847 268.97946 269.96045 270.94144 271.92242 272.9034 273.88437 274.86536 275.84637 276.82736 277.80832 278.78934 279.77032 280.7513 281.7323 282.7133 283.69428 284.67526 285.65625 286.6372 287.61823 288.59918 289.5802 290.5612 291.5422 292.52316 293.50415 294.48514 295.46613 296.4471 297.4281 298.4091 299.39005 300.37106 301.35205 302.33304 303.31403 304.295 305.276 306.257 307.23798 308.21896 309.19995 310.18094 311.1619 312.1429 313.1239 314.1049 315.08588 316.06683 317.04785 318.02887 319.00983 319.99078 320.9718 321.9528 322.93378 323.91473 324.89575 325.87674 326.85773 327.83868 328.8197 329.8007 330.78168 331.76267 332.74365 333.72464 334.70563 335.6866 336.6676 337.6486 338.62958 339.61057 340.59155 341.5725 342.55353 343.53452 344.5155 345.4965 346.47748 347.45844 348.43945 349.4204 350.40143 351.38242 352.36337 353.3444 354.32538 355.30637 356.28738 357.26837 358.24933 359.23032 360.21127 361.1923 362.17328 363.15424 364.13525 365.1162 366.09723 367.0782 368.05917 369.04016 370.02115 371.00217 371.9831 372.9641 373.9451 374.92606 375.9071 376.88806 377.86905 378.85004 379.83102 380.81204 381.793 382.774 383.75497 384.73596 385.71698 386.69794 387.67892 388.6599 389.6409 390.6219 391.6029 392.5839 393.56488 394.54587 395.52686 396.50787 397.48883 398.4698 399.45078 400.4318 401.4128 402.3938 403.37476 404.35574 405.3367 406.31772 407.2987 408.27966 409.26068 410.24167 411.22266 412.20364 413.18463 414.1656 415.1466 416.12756 417.1086 418.08954 419.07056 420.05154 421.03253 422.0135 422.9945 423.97546 424.95648 425.93747 426.91846 427.8994 428.88043 429.8614 430.8424 431.8234 432.80435 433.78537 434.76633 435.74738 436.72833 437.7093 438.6903 439.67126 440.65228 441.63327 442.61426 443.5952 444.57626 445.5572 446.53818 447.51923 448.50018 449.48117 450.46213 451.44318 452.42416 453.4051 454.3861 455.3671 456.34808 457.32904 458.3101 459.29102 460.272 461.25302 462.23395 463.21494 464.19598 465.17694 466.15793 467.13892 468.11993 469.10086 470.08188 471.0629 472.04385 473.02484 474.0058 474.98685 475.96777 476.9488 477.92984 478.91077 479.89175 480.87277 481.85376 482.8347 483.8157 484.79675 485.77768 486.75867 487.7397 488.7206 489.70166 490.68265 491.6636 492.6446 493.62558 494.6066 495.58752 496.5685 497.54956 498.53058 499.5115 500.4925 501.4735 502.45444 503.4355 504.41644 505.39743 506.37842 507.35944 508.34042 509.3214 510.3024 511.28336 512.26435 513.24537 514.2263 515.20734 516.1883 517.1693 518.15027 519.1313 520.11225 521.09327 522.0742 523.05524 524.0362 525.0172 525.99817 526.9791 527.96015 528.9411 529.9221 530.9031 531.8841 532.86506 533.846 534.827 535.808 536.789 537.76996 538.751 539.732 540.71296 541.694 542.6749 543.6559 544.63697 545.6179 546.5989 547.57984 548.5609 549.5419 550.5229 551.5038 552.4848 553.4658 554.44684 555.4278 556.40876 557.38984 558.3708 559.35175 560.33277 561.3137 562.29474 563.27576 564.2567 565.2377 566.2187 567.1997 568.18067 569.1616 570.1426 571.12366 572.1046 573.08564 574.0666 575.04755 576.02857 577.0095 577.99054 578.97156 579.95246 580.9335 581.9145 582.89545 583.87647 584.8574 585.83844 586.81946 587.8004 588.7814 589.7624 590.74335 591.7243 592.7053 593.68634 594.6673 595.64826 596.6293 597.6102 598.59125 599.57227 600.5532 601.53425 602.51526 603.49616 604.4772 605.4582 606.43915 607.42017 608.4011 609.3821 610.36316 611.3441 612.3251 613.3061 614.28705 615.26807 616.2491 617.23005 618.21106 619.192 620.173 621.15394 622.13495 623.11597 624.0969 625.07795 626.05896 627.0399 628.0209 629.0019 629.9829 630.9638 631.9448 632.92585 633.9068 634.8878 635.8688 636.84974 637.8308 638.81177 639.7928 640.7737 641.75477 642.7357 643.7167 644.6977 645.6787 646.65967 647.6406 648.62165 649.6026 650.5836 651.5646 652.54554 653.52655 654.5075 655.4885 656.4695 657.4505 658.43146 659.4125 660.39344 661.37446 662.3554 663.33637 664.3174 665.2984 666.2794 667.2604 668.24134 669.2223 670.2033 671.1843 672.16535 673.1463 674.12726 675.1082 676.08924 677.0702 678.0513 679.0322 680.01325 680.9942 681.97516 682.9561 683.9372 684.91816 685.8991 686.8801 687.8611 688.8421 689.82306 690.804 691.78504 692.766 693.747 694.728 695.70905 696.69 697.671 698.6519 699.63294 700.6139 701.595 702.57587 703.5569 704.5379 705.5189 706.4999 707.48084 708.46186 709.4428 710.4238 711.4048 712.3858 713.36676 714.3477 715.32874 716.30976 717.2908 718.2717 719.25275 720.23365 721.2147 722.1957 723.17664 724.1576 725.1387 726.1196 727.1006 728.0816 729.06257 730.0436 731.02454 732.00556 732.9866 733.9675 734.94855 735.92945 736.9104 737.8914 738.87244 739.8534 740.8344 741.8154 742.7964 743.7774 744.75837 745.7393 746.72034 747.7013 748.68226 749.66327 750.6442 751.62525 752.60627 753.5872 754.5683 755.54926 756.53016 757.51117 758.4921 759.47315 760.45417 761.4352 762.4161 763.3971 764.37806 765.35914 766.3401 767.32105 768.30207 769.2831 770.26404 771.245 772.22596 773.20704 774.188 775.16895 776.14997 777.131 778.11194 779.09296 780.074 781.05494 782.0359 783.0169 783.99787 784.9788 785.95984 786.94086 787.9218 788.90284 789.8838 790.8648 791.84577 792.8267 793.80774 794.7887 795.7697 796.75074 797.7317 798.7127 799.69367 800.6747 801.6557 802.6367 803.6176 804.59864 805.5796 806.5606 807.54157 808.5226 809.50354 810.48456 811.4655 812.4465 813.42756 814.4085 815.38947 816.3704 817.35144 818.3324 819.3135 820.2944 821.2754 822.25635 823.2374 824.2184 825.19935 826.1803 827.16126 828.14234 829.1233 830.1044 831.08527 832.0663 833.04725 834.0282 835.0092 835.9902 836.9712 837.9523 838.93317 839.9142 840.89515 841.87616 842.8571 843.83814 844.8191 845.8001 846.7811 847.7621 848.74305 849.72406 850.705 851.68604 852.667 853.648 854.629 855.61 856.59095 857.57196 858.55286 859.53394 860.51496 861.4959 862.4769 863.4579 864.43885 865.4199 866.4008 867.38184 868.3628 869.3438 870.32477 871.3057 872.28675 873.2677 874.2488 875.22974 876.2107 877.19165 878.1727 879.1537 880.13465 881.1156 882.0966 883.0777 884.0586 885.03956 886.0206 887.0015 887.9825 888.96357 889.94446 890.92554 891.9065 892.8874 893.8686 894.8494 895.83045 896.8115 897.7924 898.7734 899.75446 900.7354 901.71644 902.6974 903.6784 904.65925 905.6403 906.62134 907.6023 908.58326 909.5643 910.54535 911.5263 912.5072 913.48816 914.46924 915.45014 916.43134 917.41224 918.3932 919.37415 920.35517 921.33625 922.3171 923.2981 924.2792 925.26014 926.241 927.2221 928.20307 929.18396 930.1649 931.146 932.1269 933.108 934.0889 935.0698 936.0509 937.03186 938.0129 938.99396 939.97486 940.9558 941.9369 942.9178 943.89875 944.8798 945.8607 946.8418 947.82276 948.80365 949.7847 950.7657 951.7467 952.7278 953.7087 954.68964 955.6707 956.6516 957.63257 958.61365 959.5946 960.5756 961.5566 962.5376 963.51856 964.4995 965.4805 966.4615 967.44257 968.42347 969.4044 970.38916 971.4131 972.48517 973.6054 974.7737 975.99 977.2546 978.5673 979.92817 981.3369 982.7939 984.29926 985.85236 987.4538 989.1032 990.80085 992.5465 994.3403 996.18226 998.07227 1000.0)) (quote (485.0 463.35992 442.19138 421.49426 401.26883 381.51486 362.23245 343.42154 325.0822 307.21445 289.81818 272.89343 256.44025 240.45864 224.94855 209.90998 195.34296 181.24747 167.62354 154.47113 141.79027 129.9971 120.72911 114.15321 110.26941 109.077706 110.578095 114.77059 121.65518 131.23186 143.50064 158.46152 176.11449 196.45957 219.49674 245.22599 273.64737 304.76083 338.5664 375.06403 414.2538 455.98218 496.14496 532.9106 566.27924 596.2508 622.8253 646.003 665.78357 682.1671 695.1537 704.74317 710.93567 713.73114 713.12964 709.13117 701.73554 690.94294 676.75336 659.1668 638.18317 613.80256 587.8635 563.70936 541.41004 520.9657 502.37616 485.64157 470.76187 457.73703 446.56702 437.25195 429.7918 424.18652 420.4361 418.5406 418.49994 420.31415 423.98328 429.50732 436.88623 446.12003 456.83075 466.217 473.70993 479.30948 483.01575 484.82855 484.74805 482.77414 478.90695 473.14633 465.49234 455.945 444.50436 431.17035 415.94293 398.8222 379.80808 358.9006 336.09976 311.40555 284.82803 259.3607 237.36974 218.85515 203.81693 192.2551 184.16963 179.56055 178.42783 180.77147 186.59149 195.88788 208.66068 224.9098 244.63533 267.83722 294.5155 324.6701 358.30115 395.40854 435.99228 478.64563 518.9018 556.4296 591.22944 623.301 652.6444 679.25965 703.14667 724.3056 742.7363 758.43885 771.41327 781.6594 789.1775 793.9673 796.02906 795.36255 791.9679 785.845 776.994 765.5796 754.4455 744.6226 736.1107 728.91016 723.0207 718.4424 715.1752 713.21924 712.5744 713.24067 715.21814 718.50684 723.10657 729.0175 736.2396 744.77295 754.6173 765.77295 778.2397 792.0176 806.1324 819.15314 831.06727 841.8747 851.5753 860.16944 867.6567 874.03736 879.3113 883.47864 886.53925 888.49317 889.3403 889.08075 887.71467 885.2418 881.6623 876.9761 871.1831 864.28357 856.32526 847.58405 838.1044 827.88605 816.92914 805.2336 792.7995 779.62684 765.7155 751.0657 735.6771 719.55005 702.6843 685.08014 666.73725 647.6558 627.8358 607.27717 585.98 563.94416 541.1815 518.645 496.9385 476.06204 456.0156 436.79916 418.41275 400.85635 384.12994 368.2336 353.1672 338.93088 325.52454 312.9482 301.20194 290.28564 280.19937 270.94315 262.5169 254.92067 248.15448 242.18125 236.90572 232.32308 228.4333 225.23644 222.73244 220.92133 219.80309 219.37775 219.6453 220.60572 222.259 224.6052 227.64426 231.37619 235.80104 240.91875 246.72933 253.2328 260.42917 268.2659 276.1101 283.77628 291.2644 298.57452 305.70657 312.66064 319.43665 326.03458 332.45456 338.69647 344.76038 350.64618 356.354 361.8838 367.23553 372.40927 377.40497 382.2226 386.86224 391.32382 395.737 400.2534 404.87326 409.59656 414.4233 419.35352 424.38718 429.52426 434.76483 440.10886 445.5563 451.10724 456.7616 462.51944 468.38065 474.3453 480.41354 486.58514 492.86023 499.23877 505.6168 511.52133 516.8941 521.7352 526.0447 529.82245 533.0685 535.7829 537.9656 539.6165 540.73584 541.3234 541.3794 540.9036 539.8961 538.35694 536.28614 533.6836 530.5493 526.8834 522.687 518.00715 512.86774 507.26877 501.2103 494.69235 487.71487 480.27786 472.38135 464.0254 455.20975 445.93472 436.20017 426.00604 415.35245 404.23932 392.6667 380.63452 368.14285 355.19165 341.78098 328.6837 317.51132 308.31415 301.0922 295.84543 292.57388 291.27747 291.9563 294.61032 299.23953 305.84393 314.42355 324.97833 337.50833 352.01355 368.49393 386.9495 407.38028 429.78626 454.16742 480.19086 504.9067 527.6208 548.33326 567.04407 583.7532 598.4608 611.1666 621.87085 630.57325 637.2741 641.9733 644.6709 645.36676 644.06104 640.75354 635.44446 628.1337 618.8213 607.5072 594.19227 580.6957 568.68824 558.1701 549.14106 541.6014 535.5508 530.9895 527.91736 526.3345 526.2408 527.6363 530.52106 534.8951 540.75824 548.1106 556.9523 567.2831 579.10315 592.4124 607.2109 622.9987 637.9547 651.91224 664.87146 676.8322 687.7945 697.7584 706.72394 714.691 721.6596 727.62977 732.60157 736.57496 739.54987 741.5263 742.5044 742.48414 741.46534 739.4481 736.43256 732.4228 727.5163 721.75324 715.1338 707.65784 699.3253 690.1364 680.09107 669.18915 657.4308 644.8159 631.34467 617.01685 601.8326 585.7918 568.8946 551.14087 532.53064 513.06397 492.7408 471.56116 450.09012 429.27975 409.1455 389.6873 370.90506 352.79895 335.3688 318.61475 302.5367 287.1347 272.40875 258.3589 244.98503 232.28722 220.26543 208.91968 198.24997 188.25634 178.93869 170.29714 162.5345 157.02063 154.01123 153.5063 155.50586 160.00992 167.01845 176.53145 188.54894 203.07089 220.09737 239.62827 261.66367 286.20358 313.24796 342.79678 374.85013 409.40796 446.47025 486.037 528.08905 569.4473 607.7959 643.13477 675.46387 704.7833 731.093 754.393 774.6835 791.96405 806.2349 817.4961 825.7476 830.9893 833.22144 832.44385 828.6565 821.85944 812.05274 799.2362 783.41004 765.52765 748.3919 732.18476 716.9062 702.55634 689.13514 676.6426 665.07874 654.44355 644.73694 635.959 628.10975 621.18915 615.1972 610.13385 605.9992 602.7932 600.51587 599.16724 598.7472 599.22217 600.08777 601.1747 602.483 604.0126 605.7635 607.7357 609.9294 612.3443 614.98066 617.83826 620.9172 624.2175 627.73914 631.4821 635.4464 639.6321 644.03907 648.66736 653.5171 658.588 663.9018 669.48725 675.34455 681.4737 687.87476 694.5476 701.4924 708.7089 716.19745 723.95777 731.99 740.29407 748.86994 757.7177 766.83735 776.2288 785.89216 795.8274 806.0344 816.51337 827.13154 837.18995 846.5866 855.3218 863.3954 870.8073 877.5576 883.6463 889.0734 893.839 897.94294 901.3852 904.1659 906.285 907.7424 908.5384 908.6726 908.14527 906.95636 905.1057 902.5844 898.84546 893.5692 886.75544 878.40455 868.51636 857.09064 844.12775 829.62745 813.5899 796.0149 776.9026 756.25306 734.066 710.3418 685.08014 658.2812 629.9449 600.07135 568.6604 535.71216 502.59973 472.59253 445.83078 422.31448 402.04367 385.0184 371.23856 360.7042 353.41534 349.37195 348.57404 351.0216 356.71466 365.65323 377.83722 393.26672 411.9417 433.86215 459.02808 487.43945 518.68274 548.3305 575.18506 599.2465 620.5147 638.9898 654.6717 667.56037 677.6559 684.9582 689.4674 691.1833 690.1061 686.2357 679.572 670.11524 657.8654 642.8222 624.9859 604.35645 580.9338 557.2867 536.1673 517.5765 501.51413 487.98044 476.9752 468.4985 462.55035 459.13074 458.23972 459.87717 464.0432 470.7378 479.96088 491.71252 505.9927 522.8014 542.1387 564.00446 588.3988 614.5007 638.87867 661.1516 681.3194 699.382 715.3396 729.1921 740.9394 750.58167 758.1187 763.5508 766.87775 768.0995 767.2162 764.2277 759.13416 751.9355 742.6317 731.22284 717.70887 702.16767 687.0077 673.3683 661.2492 650.6508 641.57276 634.0153 627.9783 623.4618 620.46576 618.9903 619.0352 620.60065 623.6866 628.293 634.42 642.0674 651.23536 661.9237 674.13257 687.862 702.05726 714.68445 725.69245 735.0814 742.8512 749.0019 753.5333 756.44574 757.739 757.4132 755.46814 751.904 746.72077 739.91846 731.4969 721.45624 709.7964 696.5176 681.6195 665.1023 647.1687 629.4381 612.2608 595.6368 579.5662 564.04895 549.085 534.6745 520.81727 507.51337 494.7628 482.56558 470.92172 459.83124 449.29407 439.31024 429.87976 421.0026 412.67883 404.90836 397.69193 391.408 386.37512 382.59323 380.0624 378.78265 378.75388 379.97614 382.4495 386.17386 391.14923 397.37567 404.85315 413.58167 423.56125 434.7918 447.27344 461.00613 475.9898 492.22455 509.71033 527.9713 545.4071 561.88776 577.4133 591.98377 605.59906 618.2593 629.96436 640.7143 650.50916 659.3489 667.2335 674.16297 680.1373 685.1566 689.2207 692.3297 694.4836 695.6824 695.926 695.2328 693.95295 692.2208 690.03644 687.39966 684.3106 680.7692 676.7757 672.3298 667.4316 662.08106 656.27826 650.0231 643.3157 636.156 628.54395 620.4797 611.9631 602.99415 593.573 583.69947 573.6962 564.06476 554.8111 545.9351 537.43696 529.3164 521.57367 514.20856 507.22116 500.6115 494.37958 488.52536 483.04886 477.9501 473.22907 468.8857 464.9201 461.33218 458.12195 455.2895 452.87494 451.1255 450.0833 449.74857 450.12112 451.2009 452.98798 455.48248 458.68427 462.5934 467.20975 472.53348 478.56458 485.30295 492.74863 500.9016 509.76193 519.3296 529.6045 540.5868 552.26655 563.6089 573.919 583.197 591.443 598.6568 604.83857 609.98816 614.1057 617.19117 619.24445 620.2657 620.25477 619.21174 617.1366 614.0294 609.8901 604.7186 598.51514 591.2795 583.0117 574.02625 565.1779 556.5148 548.0369 539.74427 531.6369 523.7148 515.9779 508.4263 501.0599 493.8788 486.88293 480.07227 473.4469 467.0068 460.7519 454.6823 448.7979 443.09882 437.58493 432.3084 427.9548 424.73676 422.65427 421.70737 421.896 423.22015 425.67993 429.2752 434.0061 439.8725 446.87445 455.01205 464.28506 474.69373 486.23795 498.9177 512.73304 527.6839 543.7704 560.9924 578.00715 593.1455 606.40235 617.77796 627.27216 634.88495 640.6165 644.46656 646.43525 646.5226 644.7286 641.0532 635.49646 628.05835 618.73884 607.53797 594.45575 579.4921 562.64716 543.9209 523.67817 503.68353 484.1701 465.13782 446.58673 428.51678 410.92804 393.82047 377.19403 361.04877 345.38467 330.20175 315.49997 301.27942 287.54 274.28177 261.5047 249.20877 237.39402 226.06043 215.222 205.50989 197.26535 190.48838 185.17896 181.33712 178.96282 178.05609 178.61693 180.64534 184.1413 189.10483 195.5359 203.43457 212.80078 223.63457 235.93592 249.70479 264.94128 281.6453 299.8169 318.93124 337.83203 356.47778 374.86856 393.00424 410.88492 428.51062 445.88132 462.9969 479.85757 496.46314 512.8138 528.9093 544.7499 560.3354 575.6659 590.7414 605.5618 620.1273 634.43775 648.19147 658.50287 664.65217 666.6394 664.4645 658.12745 647.6284 632.9673 614.14386 591.15845 564.0109 532.7013 497.22955 457.59573 413.79977 365.84174 313.72156 257.4393 196.99492 132.38845 64.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1073 655))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (21 0 2 0 nil 0) (19 0 2 1 nil 0) (13 0 2 2 nil 0) (16 0 2 3 nil 0) (20 0 2 4 nil 0) (18 0 2 5 nil 0) (8 1 2 6 nil 0) (15 0 2 7 nil 0) (17 0 2 8 nil 0) (24 0 5 0 nil 0) (23 0 5 1 nil 0) (22 0 5 2 nil 0) (14 1 6 0 nil 0) (12 0 6 1 nil 0) (11 0 6 2 nil 0) (10 0 6 3 nil 0) (6 0 9 1 nil 0) (1 0 14 1 nil 0) (7 0 18 0 nil 0) (3 0 18 1 nil 0) (25 1 21 0 nil 0) (5 0 25 1 nil 0))) nil 6.13))
