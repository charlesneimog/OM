; OM File Header - Saved 2020/09/23 20:55:44
; (6.13 :patc (om-make-point 10 10) (om-make-point 227 23) (om-make-point 1053 720) "" 183 0 nil "2020/09/23 20:55:44")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "ensemble-circles-omruben" (quote ((let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 313 366) (om-make-point 44 30) (list 18) "(18)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 210 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 317 310) (om-make-point 71 30) (list 0.9 0.9 0.9) "(.9 .9 .9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-ENSEMBLE-CIRCLES" (quote r-ensemble-circles) (quote ((om-load-inputfun (quote input-funbox) "circles-bpf-1000x1000" "CIRCLES-BPF-1000X1000" nil) (om-load-inputfun (quote input-funbox) "overall-duration-seconds" "OVERALL-DURATION-SECONDS" nil) (om-load-inputfun (quote input-funbox) "attack-blur-minmax" "ATTACK-BLUR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "decal-blur-minmax" "DECAL-BLUR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "reading-resolution-1000" "READING-RESOLUTION-1000" nil) (om-load-inputfun (quote input-funbox) "list-of-lambda-gestures" "LIST-OF-LAMBDA-GESTURES" nil) (om-load-inputfun (quote input-funbox) "chordseq-startnotes" "CHORDSEQ-STARTNOTES" nil) (om-load-inputfun (quote input-funbox) "speed-ratios" "SPEED-RATIOS" nil))) (om-make-point 160 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GEST-INFLECT-CHORD" (quote r-gest-inflect-chord) (quote ((om-load-inputfun (quote input-funbox) "macromelody-chord" "MACROMELODY-CHORD" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil))) (om-make-point 432 72) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GEST-SINGLE-CHORD 2" (quote r-gest-single-chord) (quote ((om-load-inputfun (quote input-funbox) "macromelody-chord" "MACROMELODY-CHORD" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil))) (om-make-point 329 83) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-TO-POLY" (quote r-multiseq-to-poly) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "tempo" "TEMPO" 0) (om-load-inputfun (quote input-funbox) "time-signature-list" "TIME-SIGNATURE-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "multiplication-factor" "MULTIPLICATION-FACTOR" 0))) (om-make-point 152 625) (om-make-point 111 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 44 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 407 57) (quote "Use bpf to create circling movements between different instruments in an ensemble.") "" (om-make-point 327 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 451 362) (om-make-point 491 340) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-8 -1.0 2)) (1 (1.0)))) ((3 4) ((1 (1.0)) (1 (8.0 1.0 -1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (10250)) :ldur (quote (121)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (8 1.0 -1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-2 8 1.0)) (1 (8.0 1.0 -4)) (1 (-8 -1.0 1)))) ((3 4) ((1 (1.0)) (1 (1.0)) (1 (1.0)))) ((3 4) ((1 (3.0 -8 -1.0)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (10106)) :ldur (quote (533)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10050)) :ldur (quote (485)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10110)) :ldur (quote (67)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-2 8 1.0 -1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-2 8 1.0)) (1 (1.0 -8 -1.0)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-2 8 1.0)) (1 (1.0)) (1 (1.0 -8 -1.0)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (444)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (485)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (485)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-4 8 1.0)) (1 (3.0 -8 -1.0)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-8 -1.0 4)))) ((3 4) ((1 (8.0 1.0 -3)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-8 -1.0 3)) (1 (1.0)) (1 (2.0 -8 -1.0)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9136)) :ldur (quote (410)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9128)) :ldur (quote (205)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9189)) :ldur (quote (167)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-8 -1.0 3)) (1 (8.0 1.0 -1)) (1 (-8 -1.0 4)))) ((3 4) ((1 (1.0)) (1 (4.0 -8 -2.0 1)) (1 (8.0 1.0 -1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-2 8 1.0)) (1 (1.0)))) ((3 4) ((1 (1.0)) (1 (8.0 1.0 -4)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-4 8 1.0)) (1 (2.0 -8 -1.0)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (47)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (205)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (44)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (485)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (410)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-1)) (1 (-1 8 1.0)) (1 (1.0 -3 8 1.0)))) ((3 4) ((1 (4.0 -8 -1.0)) (1 (-3 8 1.0)) (1 (1.0)))) ((3 4) ((1 (3.0 -8 -1.0)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-4 8 1.0)) (1 (2.0 -8 -1.0)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1 8 1.0)) (1 (1.0)))) ((3 4) ((1 (1.0 -8 -1.0)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7225)) :ldur (quote (533)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7289)) :ldur (quote (410)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7297)) :ldur (quote (444)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7269)) :ldur (quote (410)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7227)) :ldur (quote (533)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-1)) (1 (-4 8 1.0)) (1 (1.0)))) ((3 4) ((1 (2.0 -8 -1.0)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-8 -1.0 2)) (1 (4.0 -8 -1.0)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-3 8 1.0)))) ((3 4) ((1 (1.0)) (1 (3.0 -8 -1.0)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (410)) :lvel (quote (49)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (121)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6225)) :ldur (quote (444)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-3 8 1.0)))) ((3 4) ((1 (3.0 -8 -1.0)) (1 (-3 8 1.0)) (1 (1.0)))) ((3 4) ((1 (8.0 1.0 -3)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5057)) :ldur (quote (444)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5130)) :ldur (quote (444)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-8 -1.0 1)))) ((3 4) ((1 (1.0)) (1 (1.0)) (1 (8.0 1.0 -3)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1)))) ((3 4) ((1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4378)) :ldur (quote (67)) :lvel (quote (45)) :loffset (quote (0)) :lchan (quote (18))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx cursor-mode)) (list 0 nil (quote t) 1 0 (om-make-point 63 23) (om-make-point 1170 720) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 16 8 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 310 584) (om-make-point 28 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 238 575) (om-make-point 52 30) (list (list 3 4)) "((3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 192 577) (om-make-point 28 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 152 217) (om-make-point 48 30) (list 0 0) "(0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 65 489) (om-make-point 283 76) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10250))) :lonset (quote (4574 6461)) :ldur (quote ((1887))) :lvel (quote ((52))) :loffset (quote ((0))) :lchan (quote ((18))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10106) (10050) (10110))) :lonset (quote (0 4107 5942 8227)) :ldur (quote ((653) (933) (2285))) :lvel (quote ((56) (71) (58))) :loffset (quote ((0) (0) (0))) :lchan (quote ((18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9300) (9300) (9300))) :lonset (quote (135 3791 7537 8702)) :ldur (quote ((434) (578) (1165))) :lvel (quote ((64) (85) (81))) :loffset (quote ((0) (0) (0))) :lchan (quote ((18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9136) (9128) (9189))) :lonset (quote (286 3521 8004 8905)) :ldur (quote ((501) (689) (901))) :lvel (quote ((86) (54) (54))) :loffset (quote ((0) (0) (0))) :lchan (quote ((18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7300) (7300) (7300) (7300))) :lonset (quote (451 1700 3205 8531 14564 15000)) :ldur (quote ((842) (1139) (665) (2213) (436))) :lvel (quote ((47) (78) (46) (48) (66))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7225) (7289) (7297) (7269) (7227))) :lonset (quote (632 1490 2648 10095 13616 14831)) :ldur (quote ((663) (619) (1208) (522) (1215))) :lvel (quote ((64) (88) (54) (81) (56))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6225) (6225) (6225))) :lonset (quote (888 10366 12548 13771)) :ldur (quote ((1080) (378) (1223))) :lvel (quote ((49) (61) (57))) :loffset (quote ((0) (0) (0))) :lchan (quote ((18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5057) (5130))) :lonset (quote (10547 11781 13188)) :ldur (quote ((567) (1407))) :lvel (quote ((51) (54))) :loffset (quote ((0) (0))) :lchan (quote ((18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4378))) :lonset (quote (10757 12378)) :ldur (quote ((1621))) :lvel (quote ((45))) :loffset (quote ((0))) :lchan (quote ((18))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0)) ((0) (0)) ((0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode cursor-mode)) (list 8 16 (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) (quote :default) 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1000 720) (om-make-point 280 23) 0 1 (quote t) nil 0 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 511 152) (om-make-point 175 134) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10250) (10075) (9300) (9150) (7300) (7250) (6225) (5100) (4350) (3000))) :lonset (quote (0 333 688 1433 1854 2312 2833 3479 3833 4354 5354)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode cursor-mode)) (list 8 16 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 815 373) (om-make-point 465 70) 0 1 (quote t) nil 0 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 201 216) (om-make-point 50 30) (list 0.1 0.7) "(.1 .7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 307 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 108 219) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 260 224) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 53 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 189 42) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 97 44) (om-make-point 62 30) (list 13 20) "(13 20)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 22 52) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 44 162) (om-make-point 40 60) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8619888 3.7108844 5.546688 7.3693977 9.179016 10.97554 12.758972 14.529311 16.286557 18.03071 19.76177 21.479739 23.184617 24.876397 26.555087 28.220686 29.87319 31.512598 33.138916 34.752137 36.35227 37.93931 39.513256 41.074105 42.621865 44.156533 45.678105 47.18659 48.681977 50.164273 51.633477 53.089585 54.5326 55.96253 57.379364 58.7831 60.173748 61.5513 62.91576 64.26712 65.6054 66.93058 68.242676 69.54167 70.82757 72.10038 73.3601 74.60672 75.840256 77.06069 78.26804 79.462296 80.64345 81.81152 82.96649 84.10838 85.23717 86.35286 87.45547 88.544976 89.6214 90.68472 91.734955 92.772095 93.796135 94.80709 95.80495 96.78972 97.7614 98.71998 99.665474 100.60057 101.53483 102.46911 103.40338 104.33764 105.271904 106.20618 107.14044 108.074715 109.00898 109.943245 110.87752 111.81178 112.74604 113.68032 114.614586 115.54884 116.48311 117.41738 118.35163 119.28591 120.220185 121.154435 122.088715 123.02297 123.957245 124.891526 125.825775 126.76005 127.69433 128.62859 129.56284 130.49712 131.43138 132.36565 133.29991 134.23419 135.16846 136.10272 137.03699 137.97126 138.90552 139.83979 140.77405 141.70832 142.6426 143.57685 144.51114 145.44539 146.37966 147.31392 148.2482 149.18247 150.11673 151.051 151.98526 152.91953 153.85379 154.78806 155.72232 156.6566 157.59087 158.52512 159.4594 160.39366 161.32794 162.2622 163.19647 164.13074 165.065 165.99927 166.93354 167.86782 168.80208 169.73633 170.67061 171.60488 172.53914 173.47342 174.40769 175.34195 176.2762 177.21047 178.14475 179.07898 180.01328 180.94753 181.88182 182.81606 183.75034 184.68462 185.61888 186.55313 187.4874 188.42166 189.35596 190.2902 191.22449 192.15874 193.09302 194.02729 194.96155 195.89582 196.83008 197.76436 198.69861 199.63288 200.56716 201.50142 202.43569 203.36994 204.30423 205.2385 206.17276 207.10703 208.04129 208.97556 209.90982 210.84409 211.77835 212.71262 213.64688 214.58115 215.51541 216.44969 217.38394 218.31822 219.25249 220.18675 221.12104 222.05529 222.98955 223.92383 224.85811 225.79236 226.72661 227.6609 228.59516 229.5294 230.46369 231.39795 232.33223 233.26651 234.20076 235.13504 236.06928 237.00356 237.93784 238.87209 239.80637 240.74063 241.67491 242.60919 243.54341 244.47769 245.41197 246.34624 247.28052 248.21477 249.14902 250.0833 251.01757 251.95185 252.8861 253.82038 254.75464 255.68892 256.62317 257.55743 258.4917 259.42596 260.36023 261.2945 262.22876 263.16303 264.09732 265.03156 265.96582 266.9001 267.83438 268.76865 269.7029 270.63718 271.57144 272.5057 273.43997 274.37424 275.3085 276.2428 277.17703 278.1113 279.0456 279.97983 280.91412 281.8484 282.78262 283.71692 284.65118 285.58545 286.5197 287.45398 288.38824 289.3225 290.25678 291.19104 292.1253 293.05957 293.99384 294.9281 295.86237 296.79663 297.7309 298.66516 299.5995 300.53375 301.46802 302.4023 303.33658 304.27084 305.20514 306.13944 307.07373 308.008 308.94226 309.87656 310.81085 311.74515 312.67944 313.6137 314.548 315.48227 316.41657 317.35083 318.2851 319.21942 320.15366 321.08798 322.02225 322.95654 323.8908 324.8251 325.7594 326.69366 327.62796 328.56223 329.4965 330.4308 331.36508 332.29935 333.23364 334.16794 335.1022 336.0365 336.9708 337.90506 338.83936 339.77362 340.70792 341.6422 342.57648 343.51077 344.44504 345.37933 346.3136 347.2479 348.1822 349.11646 350.05075 350.98502 351.9193 352.85358 353.78787 354.72217 355.65643 356.59073 357.525 358.4593 359.39355 360.32785 361.26215 362.1964 363.13068 364.065 364.99927 365.93353 366.86786 367.80212 368.7364 369.67065 370.60495 371.53925 372.47354 373.40778 374.3421 375.27637 376.21066 377.14493 378.07925 379.0135 379.94778 380.88208 381.81635 382.75064 383.68494 384.6192 385.5535 386.48776 387.42206 388.35632 389.29062 390.22488 391.15918 392.09348 393.02777 393.96204 394.89636 395.8306 396.76486 397.6992 398.63345 399.56775 400.502 401.4363 402.37058 403.30484 404.23914 405.17343 406.10773 407.042 407.97626 408.91055 409.84485 410.7791 411.7134 412.6477 413.582 414.51624 415.45053 416.38483 417.3191 418.25342 419.18768 420.12195 421.0562 421.9905 422.9248 423.85907 424.79337 425.72766 426.66193 427.59622 428.53052 429.46478 430.39905 431.33334 432.26764 433.2019 434.1362 435.07047 436.00476 436.93906 437.87332 438.8076 439.74188 440.67618 441.61044 442.54474 443.479 444.41336 445.3476 446.28186 447.21616 448.15048 449.08475 450.01898 450.95328 451.88754 452.82184 453.7561 454.6904 455.62466 456.55902 457.49323 458.42758 459.36185 460.29608 461.23035 462.1647 463.09897 464.03326 464.96753 465.90183 466.8361 467.77032 468.70465 469.639 470.5732 471.5075 472.4418 473.37607 474.3104 475.24463 476.17892 477.1132 478.04752 478.98175 479.91605 480.8503 481.78467 482.71887 483.65323 484.5875 485.52173 486.456 487.39035 488.32455 489.25885 490.19318 491.12747 492.0617 492.99603 493.9303 494.8646 495.79886 496.73315 497.66742 498.6017 499.536 500.47028 501.4046 502.33884 503.27313 504.2074 505.1417 506.07596 507.01025 507.94452 508.87888 509.81308 510.74738 511.6817 512.61597 513.55024 514.4845 515.4188 516.353 517.28736 518.2217 519.15595 520.0902 521.02454 521.9588 522.89307 523.8274 524.76166 525.6959 526.6302 527.56446 528.4987 529.43305 530.3673 531.3016 532.2359 533.17017 534.10444 535.0387 535.973 536.9073 537.84156 538.7759 539.71015 540.6445 541.57874 542.513 543.44727 544.3816 545.31586 546.2501 547.18445 548.1187 549.053 549.98725 550.9216 551.85584 552.79017 553.72437 554.6587 555.59296 556.5273 557.46155 558.39576 559.3301 560.2644 561.19867 562.13294 563.06727 564.00147 564.9358 565.8701 566.8044 567.73865 568.673 569.6072 570.5415 571.47577 572.41004 573.34436 574.2786 575.21296 576.14716 577.0815 578.01575 578.95 579.88434 580.8186 581.75287 582.68714 583.62146 584.5558 585.49 586.4243 587.3586 588.2929 589.2272 590.16144 591.0957 592.02997 592.9643 593.8986 594.8329 595.76716 596.7015 597.63575 598.57 599.5043 600.43854 601.3728 602.3071 603.2414 604.1757 605.11 606.04425 606.9785 607.91285 608.84717 609.78144 610.7157 611.6499 612.5842 613.5185 614.4528 615.3871 616.3214 617.2556 618.18995 619.1242 620.05854 620.9928 621.92707 622.8613 623.79566 624.7299 625.6642 626.5985 627.5328 628.46705 629.40137 630.33564 631.2699 632.2042 633.1385 634.07276 635.007 635.94135 636.8756 637.8099 638.7442 639.67847 640.61274 641.547 642.4813 643.4156 644.3499 645.2841 646.21845 647.1527 648.08704 649.0213 649.9556 650.8899 651.8241 652.7584 653.6927 654.627 655.5613 656.49555 657.4298 658.36414 659.2984 660.23267 661.167 662.10126 663.0355 663.96985 664.9041 665.8384 666.77265 667.7069 668.6412 669.57557 670.50977 671.4441 672.37836 673.3126 674.24695 675.1812 676.1155 677.04975 677.9841 678.91834 679.85267 680.78687 681.7212 682.6555 683.5898 684.52405 685.4583 686.39264 687.3269 688.26117 689.19544 690.12977 691.064 691.9983 692.9326 693.8668 694.80115 695.7355 696.6697 697.604 698.53827 699.47254 700.40686 701.34107 702.2754 703.20966 704.144 705.0783 706.0125 706.9468 707.8811 708.8154 709.7497 710.6839 711.6182 712.5525 713.48676 714.4211 715.35535 716.2896 717.22394 718.15815 719.09247 720.0268 720.96106 721.89527 722.82966 723.76386 724.6982 725.63245 726.56684 727.50104 728.43537 729.36957 730.30396 731.2381 732.1725 733.10675 734.041 734.97535 735.90955 736.8439 737.77814 738.7124 739.6467 740.58106 741.51526 742.4496 743.3838 744.3182 745.25245 746.18665 747.121 748.0553 748.9895 749.92377 750.8581 751.79236 752.7267 753.66095 754.5952 755.52955 756.46375 757.3981 758.3324 759.26667 760.2009 761.13526 762.0695 763.0038 763.93805 764.8724 765.80665 766.7409 767.67524 768.6095 769.54377 770.4781 771.41236 772.34656 773.28095 774.21515 775.1495 776.0837 777.018 777.95234 778.88666 779.82087 780.7552 781.6894 782.6237 783.558 784.4923 785.4266 786.36097 787.29517 788.2294 789.1637 790.098 791.0323 791.9665 792.9008 793.83515 794.7694 795.70374 796.638 797.57227 798.50654 799.4408 800.3751 801.30945 802.2437 803.178 804.1123 805.0466 805.9808 806.91504 807.84937 808.78357 809.71796 810.6522 811.58655 812.52076 813.45514 814.38935 815.3236 816.25794 817.1922 818.12647 819.0607 819.99506 820.9293 821.86365 822.7979 823.7322 824.6665 825.60077 826.53504 827.46936 828.40357 829.3379 830.2722 831.2065 832.14075 833.075 834.0093 834.9436 835.87787 836.8122 837.74646 838.6808 839.61506 840.54926 841.4835 842.4179 843.3521 844.28644 845.2207 846.15497 847.08924 848.02356 848.9578 849.8921 850.8264 851.7607 852.695 853.6293 854.5635 855.49787 856.4321 857.36634 858.30066 859.2349 860.16925 861.10346 862.0378 862.9721 863.9063 864.84064 865.7749 866.70917 867.6435 868.5778 869.5121 870.44635 871.3807 872.31495 873.2492 874.1835 875.1178 876.05207 876.9863 877.9206 878.8549 879.7891 880.7234 881.6577 882.592 883.52637 884.4605 885.3949 886.3291 887.26337 888.19776 889.1321 890.06635 891.0006 891.9348 892.8692 893.80347 894.73774 895.672 896.6063 897.54047 898.47474 899.4091 900.34424 901.28986 902.24866 903.2205 904.20545 905.20337 906.2145 907.2388 908.276 909.32636 910.38984 911.4665 912.5562 913.659 914.77485 915.9037 917.04566 918.20087 919.3691 920.5504 921.7449 922.9523 924.173 925.4066 926.65345 927.9133 929.1863 930.47236 931.77155 933.08374 934.40906 935.74756 937.09906 938.4637 939.8414 941.23224 942.63605 944.0532 945.48316 946.9264 948.3827 949.85206 951.33454 952.8301 954.3388 955.8605 957.39527 958.9433 960.50434 962.0784 963.66565 965.2659 966.8792 968.5059 970.1453 971.7981 973.46375 975.14264 976.83466 978.53974 980.2578 981.98914 983.7334 985.49085 987.26136 989.0451 990.84174 992.6514 994.4744 996.31037 998.1594 1000.0)) (quote (899.0 878.01215 857.42695 837.2442 817.46405 798.0866 779.11176 760.5395 742.3699 724.60285 707.23835 690.27655 673.7172 657.56067 641.8067 626.45514 611.5063 596.96015 582.81647 569.0755 555.73707 542.80134 530.2682 518.1376 506.4096 495.08423 484.1615 473.6413 463.52374 453.80887 444.49646 435.58673 427.0796 418.9751 411.2732 403.97385 397.07715 390.58304 384.49152 378.8026 373.5163 368.63263 364.15152 360.07306 356.39716 353.1239 350.25324 347.78516 345.71967 344.05682 342.79657 341.9389 341.48386 341.43143 341.78156 342.53436 343.6897 345.2477 347.20825 349.57147 352.33725 355.50565 359.07663 363.05023 367.42645 372.20523 377.3867 382.9707 388.9573 395.34653 402.13837 409.3328 416.8129 424.16592 431.35577 438.38242 445.24582 451.946 458.48303 464.8568 471.06747 477.1148 482.99902 488.72003 494.27792 499.67246 504.9038 509.97205 514.877 519.61884 524.19745 528.6128 532.865 536.954 540.87977 544.6424 548.2417 551.67786 554.95087 558.0606 561.0072 563.7905 566.41077 568.8676 571.1615 573.292 575.25934 577.06354 578.70447 580.1822 581.49677 582.64814 583.6362 584.4612 585.1229 585.62146 585.9568 586.12897 586.1378 585.98365 585.6661 585.1854 584.54157 583.7345 582.76416 581.63074 580.334 578.87415 577.25104 575.4647 573.51526 571.4025 569.1267 566.68757 564.08527 561.31977 558.39106 555.29914 552.04407 548.62574 545.0442 541.2995 537.3916 533.33277 529.33576 525.4776 521.75824 518.17786 514.73615 511.4334 508.26947 505.2444 502.3582 499.61087 497.00226 494.53262 492.20184 490.00983 487.95667 486.0424 484.26706 482.63043 481.1327 479.7738 478.55377 477.4726 476.5303 475.72678 475.0622 474.53638 474.14938 473.90137 473.79208 473.82178 473.99023 474.29752 474.74368 475.32874 476.05255 476.91528 477.9168 479.05725 480.33646 481.7546 483.31152 485.0074 486.84204 488.81555 490.92792 493.17905 495.56918 498.09808 500.7658 503.57245 506.51788 509.60217 512.8253 516.1873 519.6882 523.3279 527.10645 531.0238 535.0801 539.27515 543.60914 548.0819 552.69355 557.4441 562.3334 567.3616 572.5287 577.83454 583.27924 588.86286 594.58527 600.3666 606.1017 611.7899 617.43146 623.0263 628.57435 634.0756 639.5302 644.93805 650.2992 655.6135 660.88117 666.102 671.2762 676.40357 681.4842 686.51807 691.50525 696.44574 701.3394 706.1864 710.9866 715.74 720.4467 725.1067 729.7199 734.2864 738.80616 743.2792 747.7055 752.08497 756.4178 760.7039 764.9432 769.13575 773.28156 777.3806 781.4329 785.4386 789.3974 793.3095 797.1749 800.9936 804.76545 808.4906 812.169 815.80066 819.3856 822.9238 826.41517 829.8599 833.2578 836.6091 839.9136 843.17127 846.3823 849.5465 852.66407 855.73487 858.7589 861.7362 864.66675 867.55054 870.3876 873.17786 875.9215 878.6183 881.2685 883.87177 886.4283 888.9383 891.4003 893.80945 896.16486 898.4667 900.7149 902.9094 905.0506 907.1379 909.1716 911.15174 913.07825 914.9511 916.7704 918.53614 920.2481 921.90656 923.5114 925.06257 926.5601 928.00415 929.3944 930.73114 932.0143 933.2438 934.4196 935.54194 936.61066 937.6257 938.5871 939.4948 940.349 941.1495 941.8966 942.58985 943.22944 943.8156 944.34815 944.8271 945.25214 945.6239 945.9418 946.20624 946.417 946.5742 946.6777 946.7277 946.7238 946.66657 946.55567 946.3911 946.17304 945.90125 945.57587 945.1968 944.76416 944.27784 943.73804 943.14454 942.49744 941.79676 941.0424 940.2344 939.37287 938.4578 937.4889 936.46656 935.3905 934.26087 933.07764 931.84064 930.5502 929.2079 927.8666 926.5503 925.25904 923.9931 922.7523 921.5366 920.34607 919.18055 918.04047 916.9251 915.8352 914.77027 913.73047 912.716 911.72644 910.7622 909.823 908.90894 908.02 907.1563 906.3177 905.5042 904.716 903.9527 903.21467 902.5016 901.81397 901.15125 900.5138 899.9014 899.3143 898.7521 898.21515 897.7033 897.21656 896.7552 896.31867 895.9074 895.52137 895.1604 894.8246 894.51386 894.2282 893.9679 893.73255 893.52247 893.33747 893.17756 893.0429 892.9332 892.8488 892.7896 892.75544 892.7464 892.76246 892.8038 892.87 892.96155 893.07825 893.22016 893.38697 893.57905 893.7963 894.03864 894.3063 894.5989 894.9166 895.2595 895.6277 896.02076 896.439 896.8551 897.22297 897.5415 897.81104 898.03144 898.20264 898.3249 898.398 898.422 898.39686 898.3227 898.1994 898.02704 897.80555 897.5348 897.2151 896.84644 896.42847 895.96155 895.44544 894.88025 894.26587 893.6024 892.89 892.1285 891.3177 890.4579 889.54895 888.591 887.5839 886.52784 885.4224 884.268 883.0646 881.8121 880.5103 879.1594 877.7596 876.31067 874.81257 873.2653 871.669 870.0236 868.3292 866.5855 864.79285 862.95105 861.0602 859.12024 857.1311 855.0929 853.0056 850.86927 848.6837 846.4492 844.16547 841.8327 839.4508 837.01984 834.53974 832.01056 829.43226 826.8048 824.12836 821.40284 818.62806 815.8043 812.93146 810.00946 807.0383 804.0182 800.956 797.89374 794.8384 791.7899 788.7483 785.71357 782.6858 779.6648 776.6507 773.64344 770.6431 767.6496 764.663 761.6833 758.7103 755.74445 752.7853 749.83307 746.8877 743.9492 741.0176 738.09284 735.175 732.2639 729.35987 726.4626 723.57227 720.6887 717.81214 714.9424 712.07947 709.2235 706.3743 703.5321 700.69666 697.8682 695.04664 692.2318 689.4239 686.62287 683.82874 681.0415 678.2611 675.4877 672.72095 669.9612 667.2083 664.4622 661.72315 658.99085 656.26545 653.54694 650.83527 648.1305 645.4326 642.74164 640.05744 637.3802 634.7097 632.0462 629.3895 626.7398 624.09687 621.4608 618.83167 616.20936 613.594 610.9854 608.3838 605.78894 603.20105 600.62055 598.0771 595.58814 593.15357 590.7733 588.4476 586.17615 583.95917 581.7966 579.6884 577.63465 575.63526 573.6903 571.7997 569.96357 568.1818 566.4544 564.78144 563.1629 561.59876 560.089 558.6336 557.2327 555.8861 554.594 553.35627 552.1729 551.044 549.9695 548.94935 547.9836 547.07227 546.21534 545.41285 544.66474 543.97095 543.33167 542.74677 542.21625 541.7402 541.3185 540.9512 540.6383 540.37977 540.1757 540.026 539.9307 539.88984 539.9034 539.97126 540.0936 540.2703 540.50147 540.787 541.1269 541.52124 541.97 542.47315 543.03064 543.6426 544.30896 545.0297 545.8049 546.63446 547.5184 548.4568 549.4495 550.4967 551.59827 552.7542 553.9646 555.2294 556.49024 557.62336 558.62476 559.49427 560.23206 560.8381 561.3123 561.6547 561.86536 561.9442 561.8913 561.7066 561.39014 560.94184 560.3618 559.64997 558.80634 557.831 556.7237 555.4848 554.114 552.61145 550.9772 549.21106 547.3132 545.2835 543.122 540.8288 538.40375 535.847 533.1584 530.338 527.3858 524.3019 521.0862 517.73865 514.25934 510.64822 506.90543 503.03073 499.02435 494.88608 490.6161 486.21433 481.68073 477.0154 472.2183 467.28934 462.22867 457.03622 451.71185 446.25592 440.66794 434.9484 429.097 423.1138 416.99884 410.75208 404.37357 397.86322 391.22113 384.44724 377.54157 370.5041 363.33484 356.0338 348.60104 341.03644 333.34006 325.51187 317.55197 309.48798 301.5382 293.7493 286.12122 278.65402 271.34766 264.20212 257.2175 250.39366 243.73072 237.2286 230.88736 224.70696 218.6874 212.82869 207.13082 201.59384 196.2177 191.00238 185.94794 181.05434 176.32158 171.74968 167.33864 163.08846 158.99909 155.07062 151.30297 147.69618 144.25023 140.96514 137.8409 134.8775 132.07497 129.43328 126.95246 124.63246 122.47332 120.47504 118.6376 116.96102 115.4453 114.0904 112.89638 111.863205 110.99087 110.279396 109.72876 109.33899 109.11006 109.041985 109.134766 109.38839 109.80287 110.37821 111.11437 112.011406 113.06929 114.28802 115.667595 117.208046 118.90932 120.77146 122.79443 124.97828 127.32296 129.8285 132.49489 135.32213 138.31023 141.45917 144.76834 148.12609 151.44985 154.73964 157.99546 161.21729 164.40515 167.55904 170.67893 173.76486 176.8168 179.8348 182.81877 185.76882 188.68485 191.56691 194.415 197.2291 200.00923 202.75542 205.46758 208.14579 210.79001 213.40026 215.97652 218.51882 221.02713 223.50147 225.94187 228.34824 230.72064 233.05907 235.36353 237.634 239.87052 242.07305 244.24158 246.37615 248.47676 250.54337 252.576 254.57468 256.53934 258.47006 260.3668 262.22955 264.05832 265.85312 267.61395 269.3408 271.03366 272.69257 274.31747 275.9084 277.46536 278.98834 280.47736 281.93237 283.35345 284.7405 286.09363 287.41272 288.69788 289.94904 291.16626 292.3495 293.4987 294.61395 295.69525 296.74255 297.75586 298.73523 299.69196 300.65646 301.6304 302.61374 303.60654 304.60873 305.6204 306.64145 307.67194 308.71185 309.7612 310.81998 311.88818 312.96582 314.05286 315.14935 316.25528 317.37058 318.49536 319.62955 320.77316 321.92624 323.08865 324.2606 325.44193 326.63266 327.83282 329.04245 330.2615 331.48996 332.72784 333.97516 335.2319 336.49808 337.77368 339.0587 340.35315 341.65704 342.97037 344.2931 345.62524 346.96683 348.31784 349.67828 351.04816 352.42746 353.81616 355.21433 356.62192 358.0389 359.46536 360.9012 362.3465 363.8012 365.26532 366.73892 368.22192 369.71436 371.2162 372.72745 374.24817 375.77832 377.31787 378.86682 380.42523 381.9931 383.57037 385.15704 386.75317 388.35873 389.9737 391.59854 393.23822 394.89392 396.56574 398.2537 399.9577 401.67786 403.41412 405.16647 406.93494 408.71948 410.52017 412.33698 414.16986 416.01886 417.88394 419.76514 421.6624 423.5758 425.50534 427.45093 429.41263 431.3905 433.3844 435.39444 437.4206 439.46283 441.52118 443.5956 445.68613 447.79282 449.9156 452.05444 454.2094 456.38055 458.56772 460.77097 462.9904 465.22592 467.47748 469.74518 472.02908 474.32892 476.64496 478.97705 481.32532 483.68967 486.07007 488.46664 490.87933 493.30804 495.7529 498.21384 500.69095 503.18414 505.69333 508.21872 510.76025 513.3178 515.89155 518.4813 521.0873 523.7093 526.34736 529.0016 531.67194 534.3584 537.0609 539.77955 542.51435 545.26514 548.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1073 655))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (20 0 3 0 nil 0) (18 0 3 1 nil 0) (13 0 3 2 nil 0) (16 0 3 3 nil 0) (19 0 3 4 nil 0) (17 0 3 5 nil 0) (15 0 3 6 nil 0) (2 0 3 7 nil 0) (14 1 6 0 nil 0) (12 0 6 1 nil 0) (11 0 6 2 nil 0) (10 0 6 3 nil 0) (23 0 7 0 nil 0) (22 0 7 1 nil 0) (21 0 7 2 nil 0) (6 0 9 1 nil 0) (1 0 14 1 nil 0) (5 0 17 0 nil 0) (4 0 17 1 nil 0) (5 0 17 2 nil 0) (4 0 17 3 nil 0) (5 0 17 4 nil 0) (4 0 17 5 nil 0) (5 0 17 6 nil 0) (4 0 17 7 nil 0) (4 0 17 8 nil 0) (5 0 17 9 nil 0) (24 1 20 0 nil 0) (7 0 24 1 nil 0))) nil 6.13))
