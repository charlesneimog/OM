; OM File Header - Saved 2020/09/23 20:55:45
; (6.13 :patc (om-make-point 10 210) (om-make-point 318 27) (om-make-point 962 676) "" 183 0 nil "2020/09/23 20:55:45")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "atonal-multiseq-demo-omruben" (quote ((let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 182 371) (om-make-point 44 30) (list 10) "(10)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ 2" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 76 399) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 503 368) (om-make-point 44 30) (list 10) "(10)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 365 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 371 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 378 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FORBIDDEN-INTERVALS 2" (quote r-forbidden-intervals) (quote ((om-load-inputfun (quote input-funbox) "NOTHING" "NOTHING" nil))) (om-make-point 419 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FORBIDDEN-INTERVALS" (quote r-forbidden-intervals) (quote ((om-load-inputfun (quote input-funbox) "NOTHING" "NOTHING" nil))) (om-make-point 81 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-ATONAL-MONOPHONIC-RANDOM" (quote r-atonal-monophonic-random) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "forbidden-triads-lists" "FORBIDDEN-TRIADS-LISTS" (list 0)))) (om-make-point 235 341) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-ATONAL-PRECISE-MULTISEQ" (quote r-atonal-precise-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "forbidden-triads-lists" "FORBIDDEN-TRIADS-LISTS" (list 0)))) (om-make-point 18 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 14 477) (om-make-point 231 159) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4168 4768) (4168 4168) (4568 3968) (4168) (4668 4668) (4968) (4068 4068) (4068 3768) (4768 4768) (3968 3968) (4868 4768) (3868 4068) (3968) (4768) (4868 4668) (3868 3968) (4068 3868) (4968) (4968 4568) (3968) (4168 3768) (5068 4768) (3968 3668) (4268 4568) (3768) (5068) (5268) (4268) (4468 4468) (5168 3868) (4868 2368) (3468) (4768) (4268 4168) (4268) (4168 4468) (4868) (4868) (4568 4568) (3968) (4868) (4068 5168) (1868) (5368) (4468) (3868 4468) (5268 3768) (4568) (3368) (4768) (4868 4468) (4268 3568) (6968 4868) (4068) (3668 5668) (5968) (3868 3768) (5368 3668) (6068 4868) (3768 3468) (4868 4068) (4868 6568) (4868 4568) (5168 3868) (4768 4468) (5468 6168) (3268 5968) (2768 3868) (4468 3668) (2468 3668) (4868 3568) (6168 4168) (6168) (5868 4468) (2868 4268) (2868 2868) (5868 5868) (6018 4568) (4418 4268) (4218) (5868 3468) (4768 4168) (3918 4768) (3618 5218) (4218 4268) (1768) (4568 4518) (4568 4868) (3568) (4768 3768) (4868 4568) (3868) (4568 3568) (4218 3968) (5268 3868) (6468 3868) (4768 3418) (3368) (4668 5068) (3768 3868) (3768) (5268 4468) (4268 3468) (3468 6068) (5918 5118) (3968 4168) (4068 4168))) :lonset (quote (0 2000 3000 4000 7000 9000 10000 12000 13000 14000 17000 19000 20000 22000 23000 25000 26000 27000 28000 29000 30000 31000 32000 37000 38000 41000 42000 44000 45000 46000 47000 48000 49000 50000 51000 53000 54000 55000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 114000 115000 116000 117000 118000 119000 120000 121000 122000 123000 124000 125000 126000 127000 128000 129000 130000 131000)) :ldur (quotelvel (quoteloffset (quote ((0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 16 (list (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 692 402) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 188 183) (quote "atonal-multiseq removes third interval from a list of unwanted triads in any transposition. It will filter both notes and chords.$$((300 300)( 400 400))$in the textfile means that a minor third cannot follow a minor third etc.") "" (om-make-point 449 183) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 376 53) (om-make-point 42 30) 7000 "7000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 317 60) (om-make-point 42 30) 4000 "4000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 316 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 37 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 300 476) (om-make-point 231 159) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4966) (4366) (4166) (4366) (4866) (5166) (4266) (4266) (4966) (4166) (4966) (4066) (4166) (4966) (4866) (4066) (4266) (5166) (5166) (4166) (3966) (5266) (4166) (4766) (3966) (5266) (5466) (4466) (4666) (4066) (5066) (3666) (4966) (4466) (4466) (4666) (5066) (5066) (4766) (4166) (5066) (5366) (2066) (5566) (4666) (4066) (3966) (4766) (3566) (4966) (4666) (3766) (7166) (4266) (3866) (6166) (3966) (5566) (6266) (3666) (5066) (5066) (4766) (4066) (4966) (6366) (3466) (4066) (3866) (3866) (3766) (4366) (6366) (4666) (3066) (3066) (6066) (4766) (4616) (4416) (6066) (4366) (4116) (5416) (4416) (1966) (4766) (4766) (3766) (3966) (4766) (4066) (3766) (4166) (4066) (6666) (4966) (3566) (5266) (3966) (3966) (4666) (4466) (6266) (6116) (4366) (4366))) :lonset (quote (0 2000 3000 4000 7000 9000 10000 12000 13000 14000 17000 19000 20000 22000 23000 25000 26000 27000 28000 29000 30000 31000 32000 37000 38000 41000 42000 44000 45000 46000 47000 48000 49000 50000 51000 53000 54000 55000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 114000 115000 116000 117000 118000 119000 120000 121000 122000 123000 124000 125000 126000 127000 128000 129000 130000 131000)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quotelegato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode cursor-mode)) (list 8 16 (list (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 692 402) (om-make-point 400 23) 0 1 (quote t) nil 0 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 28 67) (om-make-point 247 101) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4168 4768) (4568 4568) (4168 4168) (4568 3968) (4768 4168) (4468 4468) (4268 4268) (4668 4668) (4668 4968) (4968 4668) (4068 4068) (3768 4068) (4068 3768) (4768 4768) (3968 3968) (4768 4668) (4668 4868) (4868 4768) (4068 3968) (3868 4068) (3968 3868) (4668 4768) (4768 4868) (4868 4668) (3968 4068) (3868 3968) (4068 3868) (4768 4968) (4968 4568) (3768 3968) (4168 3768) (5068 4768) (3968 3668) (4968 4668) (4068 3768) (4568 4268) (4068 4468) (4268 4568) (3868 3768) (4468 4768) (4568 4468) (5068 4268) (5268 4068) (4168 4268) (4268 4068) (4468 4468) (5168 3868) (4868 2368) (3468 4868) (4768 4468) (4268 4168) (4268 4868) (4568 4268) (4168 4468) (4868 3468) (4868 3968) (4168 4168) (4568 4568) (4468 3968) (5468 4868) (4068 5168) (1868 5968) (5368 4468) (4068 4468) (3868 4468) (5268 3768) (4468 4568) (4268 3368) (4168 4768) (3868 4068) (4568 4768) (4868 4468) (4268 3568) (6968 4868) (4068 3868) (3668 5668) (4868 5968) (3868 3768) (5368 3668) (6068 4868) (3768 3468) (4868 4068) (4868 6568) (4868 4568) (5168 3868) (4768 4468) (5468 6168) (3268 5968) (2768 3868) (4468 3668) (2468 3668) (4868 3568) (6168 4168) (6168 4668) (5868 4468) (2868 4268) (2868 2868) (5868 5868) (6018 4568) (4418 4268) (4168 4218) (5868 3468) (4768 4168) (3918 4768) (3618 5218) (4218 4268) (4268 1768) (4568 4518) (4568 4868) (4868 3568) (4768 3768) (4568 4868) (3868 4568) (3868 4168) (4868 4568) (4168 3868) (4568 3568) (4218 3968) (5268 3868) (6468 3868) (4768 3418) (4768 3368) (4668 5068) (3768 3868) (3768 2668) (5268 4468) (4268 3468) (3468 6068) (5918 5118) (3968 4168) (4068 4168))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000 114000 115000 116000 117000 118000 119000 120000 121000 122000 123000 124000 125000 126000 127000 128000 129000 130000 131000)) :ldur (quotelvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100))) :loffset (quotelchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (cursor-mode approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list (quote :normal) 8 16 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 747 304) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (8 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (14 0 5 0 nil 0) (6 0 5 1 nil 0) (15 0 8 0 nil 0) (7 0 8 1 nil 0) (15 0 9 0 nil 0) (7 0 9 1 nil 0) (1 0 10 1 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (17 0 15 0 nil 0) (3 0 16 1 nil 0) (4 0 17 1 nil 0))) nil 6.13))
