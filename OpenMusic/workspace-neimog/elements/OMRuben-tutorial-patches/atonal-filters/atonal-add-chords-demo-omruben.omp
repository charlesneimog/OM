; OM File Header - Saved 2020/09/23 20:55:45
; (6.13 :patc (om-make-point 604 110) (om-make-point 15 23) (om-make-point 1219 720) "" 183 0 nil "2020/09/23 20:55:45")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "atonal-add-chords-demo-omruben" (quote ((let ((box (om-load-boxcall (quote bastype) "list 22" (quote list) (quote nil) (om-make-point 990 85) (om-make-point 44 30) (list 15) "(15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNELS-MULTISEQ" (quote r-apply-channels-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channels" "CHANNELS" nil))) (om-make-point 897 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 21" (quote list) (quote nil) (om-make-point 1166 279) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 20" (quote list) (quote nil) (om-make-point 1101 272) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-TO-POLY-LEGATO-TIE" (quote r-multiseq-to-poly-legato-tie) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "tempo" "TEMPO" 0) (om-load-inputfun (quote input-funbox) "time-signature-list" "TIME-SIGNATURE-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "multiplication-factor " "MULTIPLICATION-FACTOR" 0) (om-load-inputfun (quote input-funbox) "ms-rest-treshold" "MS-REST-TRESHOLD" 0) (om-load-inputfun (quote input-funbox) "ms-tie-treshold" "MS-TIE-TRESHOLD" 0))) (om-make-point 907 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MY-INSTRUMENT-MULTISEQ" (quote r-my-instrument-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "flat-list-of-mode-mc" "FLATLIST-MODE" (list 0)) (om-load-inputfun (quote input-funbox) "max-cent-distance" "MAX-CENT-DISTANCE" (list 0)))) (om-make-point 32 615) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RUBEN-PIANO-CHORDS" (quote r-ruben-piano-chords) (quote ((om-load-inputfun (quote input-funbox) "" "NOTHING" nil))) (om-make-point 130 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-ADD-CHORDS-MULTISEQ" (quote r-add-chords-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "lists-of-chords" "LISTS-OF-CHORDS" nil) (om-load-inputfun (quote input-funbox) "percent-chance-of-chord" "PERCENT-CHANCE-OF-CHORD" nil))) (om-make-point 58 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-TIME-SCALER" (quote r-time-scaler) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "scaling-factor-minmax" "SCALING-FACTOR-MINMAX" nil) (om-load-inputfun (quote input-funbox) "scaling-bpf-1000x1000" "SCALING-BPF-1000X1000" nil) (om-load-inputfun (quote input-funbox) "window-resolution" "WINDOW-RESOLUTION" nil))) (om-make-point 325 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 612 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-PIANO-RANGE" (quote r-piano-range) (quote ((om-load-inputfun (quote input-funbox) "NOTHING" "NOTHING" nil))) (om-make-point 161 522) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-REMOVE-OCTAVES-MULTISEQ" (quote r-remove-octaves-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil))) (om-make-point 0 501) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-FORBIDDEN-INTERVALS 2" (quote r-forbidden-intervals) (quote ((om-load-inputfun (quote input-funbox) "" "NOTHING" nil))) (om-make-point 170 345) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-ATONAL-PRECISE-MULTISEQ 2" (quote r-atonal-precise-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "forbidden-triads-lists" "FORBIDDEN-TRIADS-LISTS" (list 0)))) (om-make-point 136 438) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-CENT-APPROX-MULTISEQ" (quote r-cent-approx-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "interval-size" "INTERVAL-SIZE" 0))) (om-make-point 14 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-MULTISEQ 2" (quote r-random-multiseq) (quote ((om-load-inputfun (quote input-funbox) "pitch-minmax-list" "PITCH-MINMAX-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "intervalsize-cent" "INTERVALSIZE-CENT" 0) (om-load-inputfun (quote input-funbox) "number-of-chordseqs" "NUMBER-OF-CHORDSEQS" 0) (om-load-inputfun (quote input-funbox) "number-of-notes" "NUMBER-OF-NOTES" 0) (om-load-inputfun (quote input-funbox) "ms-speed" "MS-SPEED" 0) (om-load-inputfun (quote input-funbox) "velocity-midi" "VELOCITY-MIDI" 0) (om-load-inputfun (quote input-funbox) "midi-channel" "MIDI-CHANNEL" 0))) (om-make-point 34 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil))) (om-make-point 178 144) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 3" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 613 176) (om-make-point 130 65) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4200) (9500) (4300) (7300) (3900) (8800) (3400) (9500) (2700) (6400) (5600) (3800) (7700 9400 10500) (3900) (4800) (6600) (8500) (3500) (6400) (10100) (2600) (10400) (10200) (8200) (6100 6400) (7200) (5700) (9100 9800) (8900) (8400) (2500) (6500) (6300) (2100) (5200) (10200) (9500) (9200 9400) (2800) (7700) (8600) (9900) (6000) (9100) (6900) (8500) (5600) (7400) (2900 3500 4300) (4900) (9600) (8700) (7600) (2200) (9900) (7700) (3000) (7900) (8600) (5200) (5700) (4400) (10700) (9700) (6600) (5500 6000) (8200) (8900) (5900) (3100) (7500) (5600) (4200) (3800 5800) (7700 8800) (6700) (9300 10000) (5400) (3900) (4900) (9400) (5900) (8000) (7200) (6400) (6500) (2200) (6800) (3800) (5400) (4000) (9400) (9300) (3100) (8700) (2800) (4700) (3700) (10200) (4300) (8600 9900) (8000) (7200) (4300) (7100 8500 9400) (4300 6600) (10700) (6100 6800 7700) (10600) (9000) (3300) (2900) (5600) (3300 6000) (5000) (2700) (5300 5600 6100) (9300) (4000) (8200) (8300) (7300) (6500 7800) (5600) (4300) (7500) (9500) (4600 5400) (5300 6900) (6200 6800) (8500) (2800) (3400) (9500 10400) (9900) (6600) (8400) (4000) (8300) (5800) (4100) (8600) (3600) (10400) (3400) (5100) (8500) (6500) (3300) (3000) (7500) (5600) (10700) (9400) (10300) (8900 10500) (7800) (6300) (8600) (2800) (7900) (6500) (5700) (10800) (10400) (3700) (4300) (10000) (2600) (9400 10500) (9900 10200) (9500) (6100) (2900 3600 5000) (6700) (8100) (8800) (6000) (8700) (9200) (10500) (7000 8500) (9100) (6000) (3800 5200) (5100) (4300) (4100) (8100) (10700) (6000) (7800) (3100) (2900 4900) (4000) (10400) (10700) (8600) (5400) (3900) (4300) (8100 8600) (3000 3700) (8900) (2800) (5000) (10700) (5200 5700) (3700) (5500) (2600) (4500 5800) (3600) (10400) (7000) (7900 9900) (6400) (5300) (7200) (8600) (8700) (7700) (8500) (5700) (5400) (9600 10400) (6200) (3500 4000 4600 5500))) :lonset (quote (313 363 402 442 465 570 674 737 1214 1439 1784 1886 1917 2023 2048 2246 2762 2866 3059 3299 3476 3578 3637 3682 3771 3819 4031 4225 4338 4812 4969 5135 5224 5508 5817 6257 6810 6916 7120 7206 7347 7436 7463 7483 7508 7536 7642 7936 8026 8125 8351 8684 8896 8999 9708 9809 9900 10313 10450 10528 10616 10711 10923 11011 11148 11234 11266 11705 11953 12025 12156 12284 12359 12621 12722 13301 13454 13533 13591 13637 13728 13750 13938 14229 14347 14728 14868 14927 14988 15175 15239 15644 15786 15861 15943 16033 16233 16345 16464 16783 16980 17084 17187 17253 17752 18201 18305 18367 18494 18623 18775 18949 19353 19637 19726 19896 20356 20456 20556 20652 21076 21149 21216 21385 21469 21933 22115 22160 22354 22423 22504 22594 23089 23427 23595 23655 23718 23862 24122 24221 24423 24708 24888 25110 25166 25242 25264 25313 25640 25814 25940 25983 26049 26105 26199 26255 26324 26399 26474 26783 26863 27023 27102 27259 27641 27783 27851 27983 28314 28381 28605 28691 29093 29196 29292 29707 29785 30120 30210 30302 30498 30601 30931 31280 31512 31858 31970 32179 32374 32741 33042 33148 33360 33849 34192 34413 34478 34688 34916 34998 35244 35313 35584 35736 35788 35841 35953 36383 36668 36688 36710 36756 36831 37045 37114 37146 37313 37378 37498 37581 37646 37714 37744 37759 37775 37790 37805 37820 37835)) :ldur (quote ((50) (39) (17) (23) (27) (48) (63) (76) (121) (93) (35) (31) (29 29 29) (25) (25) (56) (105) (99) (86) (70) (41) (16) (20) (27) (48 48) (59) (90) (112 112) (104) (80) (82) (88) (92) (101) (107) (114) (106) (104 104) (86) (75) (51) (27) (19) (25) (29) (32) (43) (90) (100 100 100) (110) (113) (107) (103) (101) (101) (91) (85) (65) (78) (88) (96) (103) (88) (75) (48) (20 20) (29) (89) (72) (69) (60) (75) (79) (101 101) (103 103) (56) (43 43) (31) (23) (23) (22) (25) (84) (118) (110) (76) (58) (61) (62) (64) (65) (71) (74) (83) (90) (95) (112) (119) (120) (77) (36 36) (49) (66) (74) (84 84 84) (48 48) (12) (35 35 35) (61) (73) (83) (96) (98) (90 90) (86) (87) (100 100 100) (100) (97) (92) (73) (67) (61 61) (45) (37) (67) (45) (38 38) (69 69) (81 81) (90) (106) (72) (54 54) (60) (63) (69) (79) (99) (102) (97) (92) (85) (56) (43) (23) (19) (44) (95) (67) (43) (32) (23) (42) (57) (69 69) (75) (75) (76) (80) (80) (79) (79) (78) (72) (68) (66) (66) (67) (69 69) (85 85) (93) (103) (96 96 96) (92) (78) (80) (90) (93) (95) (103) (107 107) (117) (116) (116 116) (111) (106) (99) (91) (97) (106) (107) (102) (91 91) (77) (65) (58) (22) (82) (88) (69) (63 63) (50 50) (52) (53) (55) (63) (68 68) (20) (22) (23) (24 24) (27) (35) (32) (30 30) (32) (37) (43) (34) (26) (15) (15) (15) (15) (15 15) (15) (15 15 15 15))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1 1) (1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5100 5500) (10400) (7800) (7700 8800) (8300) (7400) (7000) (6700) (3300 4700) (3600) (3400) (8900) (2800) (9900) (2300 3000) (2200) (2400 4400) (4300) (8700 8900) (4900) (4400) (7100) (7000) (8600) (6900) (4800) (7300) (7600) (7700) (2700) (9400 10800) (10300) (5400) (9900 10700) (8800) (4500) (7200 7400) (5500) (6500) (7800) (10600) (2500) (3200) (3900 5000) (7800) (7700) (4300) (3300 4000) (7800 8600) (3900) (6700) (4800) (5600) (10700) (7600) (3700) (10300) (10600) (5300) (6900) (8400) (4400) (9500) (3000) (6300 7200) (10000) (7000) (5700) (6500 7900) (9800) (3500) (8500 9600) (7800) (3400) (2900) (2700) (4500) (3600 5000) (7300) (7800) (6500) (3600) (9000) (6700) (8600) (3900 5300) (7100 8400) (7300) (5500) (5600) (10500) (6000) (3400) (9700) (8600 9900) (8200) (10400) (9600 10300) (3700) (10400) (10000) (3100) (7700 8300) (7600) (2200) (10800) (6300) (5200) (9000) (3700) (9800) (8300) (5100) (5700 6500) (5500) (8400) (3200) (9400) (3700 4300) (7700) (6300) (6700) (10600) (8100) (4800) (7100) (7500) (2600 3700) (6400) (7900) (8900) (2800 3400) (9600) (4400) (6600) (8900) (5200 7800) (3500 4800) (6900) (6800) (7700 7900) (10700) (5700) (10800) (6400) (3400) (8700) (2300) (4300) (8400) (7700) (5600) (4900) (9400) (10800) (5200) (5700) (7000 7100 7400 8500) (7500) (9000 10400) (8900) (3800) (3300 4200) (9600) (7600) (3200 4600) (6100) (5700) (9100) (10100) (5600) (9400 10100) (6800) (6000) (7900) (3400) (7100) (8600) (5300 5400) (10300) (5900) (10100 10600) (7800) (5600) (8500) (9100) (7400) (7100) (4300 4900 5600 6500 7600) (7500) (5800) (5900) (6600) (6500) (3200) (7400) (5700) (6400) (2700) (3400 4400) (9500) (6700) (3000) (7300) (2600) (4000) (10800) (6100) (9400 10100) (3000) (7600 8700) (10500) (4400) (4300) (3600) (10600) (3500) (10200) (7600) (6200) (6000) (6500) (10400) (2500 3900) (7000) (5700) (3000))) :lonset (quote (247 313 402 442 465 528 899 1214 1334 1819 1854 1886 1999 2023 2866 2965 3426 3476 3637 3682 3739 3819 3879 3949 4442 4542 4638 4892 4969 5050 5315 5508 5712 6144 6372 6810 6916 7120 7281 7347 7463 7508 7536 7568 7642 7732 8125 8351 8464 8999 9202 9303 9405 9607 9708 9809 10134 10313 10378 10528 11011 11086 11234 11384 11448 11524 11794 11953 12359 12438 12621 12722 12825 13169 13240 13357 13497 13533 13565 13614 13637 13776 13873 13938 14457 14555 14804 15175 15370 15437 15505 15574 15714 16233 16783 16925 17016 17187 17253 17582 17668 18000 18249 18318 18367 18445 18554 18858 18949 19251 19450 19545 19983 20073 20356 20456 20556 21076 21216 21335 21430 21716 21782 21857 22001 22061 22198 22258 22354 22504 23089 23277 23324 23481 23595 23942 24423 24615 24888 25209 25264 25313 25357 25412 25640 25814 26049 26072 26105 26255 26324 26474 26626 26783 27102 27259 27492 27568 27713 27851 28048 28247 28524 28691 28784 28882 29196 29471 29555 29632 30120 30498 31280 31396 31512 31744 31970 32277 32374 33042 33148 33756 33849 34111 34269 34582 34620 34682 34998 35169 35244 35377 35535 35584 35634 35684 35841 36153 36304 36511 36608 36642 36668 36688 36710 36733 36831 36945 36977 37080 37205 37233 37259 37284 37313 37345 37456 37541 37646 37672 37714 37729 37744 37775 37790 37805 37820 37835)) :ldur (quote ((66 66) (50) (17) (23 23) (27) (42) (96) (121) (105 105) (35) (32) (31) (24) (25) (99 99) (94) (50 50) (41) (20 20) (27) (32) (59) (71) (82) (100) (96) (90) (77) (82) (85) (94 94) (101) (105) (113 113) (112) (106) (104 104) (86) (66) (51) (19) (29) (32) (35 35) (43) (59) (110) (113 113) (111 111) (101) (101) (101) (101) (101) (101) (91) (67) (65) (72) (88) (75) (61) (20) (64) (76 76) (87) (82) (72) (79 79) (88) (101) (103 103) (97) (71) (62) (51) (36) (31 31) (26) (23) (23) (42) (65) (84) (99) (90 90) (65 65) (64) (67) (68) (69) (70) (72) (112) (77 77) (55) (28) (66 66) (74) (85) (84) (79) (34 34) (8) (35) (49) (68) (91) (96) (102) (95) (92) (90) (91 91) (100) (100) (97) (73) (61 61) (50) (39) (66) (74) (77) (60) (55) (30) (40 40) (69) (90) (72) (48 48) (50) (56) (60) (87) (97 97) (93 93) (85) (33) (19 19) (44) (55) (66) (95) (67) (23) (34) (42) (69) (75) (76) (78) (80) (79) (78) (75) (73 73 73 73) (70) (66 66) (66) (67) (81 81) (93) (99) (104 104) (96) (84) (78) (75) (90) (103 103) (116) (116) (116) (114) (106) (96) (91 91) (106) (107) (93 93) (91) (81) (74) (38) (29) (7) (88 88 88 88 88) (75) (69) (59) (49) (50) (50) (51) (55) (73) (79) (54 54) (34) (26) (20) (22) (23) (23) (27) (32) (33 33) (34) (28 28) (26) (25) (29) (32) (34) (43) (40) (26) (24) (15) (15) (15) (15 15) (15) (15) (15))) :lvel (quoteloffset (quote ((0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0))) :lchan (quote ((1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0)) ((0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 23) (om-make-point 741 382) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff)) 16 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 18" (quote list) (quote nil) (om-make-point 155 584) (om-make-point 28 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 209 362) (quote "This chain creates randomized$piano music in 2 voices.  A text file contains chord intervals to add, both single and lists of intervals for $larger chord. Repeated elements$in the list will have higher $probability of being added, and $in this case 40 percent of the notes will get an added chord.$Filters remove certain interval$ combinations and keeps the $result within the instrumental $range. Time scaling add$trajectories of speed.$The 2 voices are syncronized at the first, but filters and quantification bring them $out of sync.") "" (om-make-point 322 210) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 17" (quote list) (quote nil) (om-make-point 714 40) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 199 601) (om-make-point 134 85) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4200) (9500) (4300) (7300) (3900) (8800) (3400) (9500) (2700) (6400) (5600) (3800) (7700 9400 10500) (3900) (4800) (6600) (8500) (3500) (6400) (10100) (2600) (10400) (10200) (8200) (6100 6400) (7200) (5700) (9100 9800) (8900) (8400) (2500) (6500) (6300) (2100) (5200) (10200) (9500) (9200 9400) (2800) (7700) (8600) (9900) (6000) (9100) (6900) (8500) (5600) (7400) (2900 3500 4300) (4900) (9600) (8700) (7600) (2200) (9900) (7700) (3000) (7900) (8600) (5200) (5700) (4400) (10700) (9700) (6600) (5500 6000) (8200) (8900) (5900) (3100) (7500) (5600) (4200) (3800 5800) (7700 8800) (6700) (9300 10000) (5400) (3900) (4900) (9400) (5900) (8000) (7200) (6400) (6500) (2200) (6800) (3800) (5400) (4000) (9400) (9300) (3100) (8700) (2800) (4700) (3700) (10200) (4300) (8600 9900) (8000) (7200) (4300) (7100 8500 9400) (4300 6600) (10700) (6100 6800 7700) (10600) (9000) (3300) (2900) (5600) (3300 6000) (5000) (2700) (5300 5600 6100) (9300) (4000) (8200) (8300) (7300) (6500 7800) (5600) (4300) (7500) (9500) (4600 5400) (5300 6900) (6200 6800) (8500) (2800) (3400) (9500 10400) (9900) (6600) (8400) (4000) (8300) (5800) (4100) (8600) (3600) (10400) (3400) (5100) (8500) (6500) (3300) (3000) (7500) (5600) (10700) (9400) (10300) (8900 10500) (7800) (6300) (8600) (2800) (7900) (6500) (5700) (10800) (10400) (3700) (4300) (10000) (2600) (9400 10500) (9900 10200) (9500) (6100) (2900 3600 5000) (6700) (8100) (8800) (6000) (8700) (9200) (10500) (7000 8500) (9100) (6000) (3800 5200) (5100) (4300) (4100) (8100) (10700) (6000) (7800) (3100) (2900 4900) (4000) (10400) (10700) (8600) (5400) (3900) (4300) (8100 8600) (3000 3700) (8900) (2800) (5000) (10700) (5200 5700) (3700) (5500) (2600) (4500 5800) (3600) (10400) (7000) (7900 9900) (6400) (5300) (7200) (8600) (8700) (7700) (8500) (5700) (5400) (9600 10400) (6200) (3500 4000 4600 5500))) :lonset (quote (360 480 600 960 1080 1440 1680 1800 2400 2640 3240 3600 3720 4200 4320 5160 5880 6000 6240 6600 6960 7320 7800 8040 8400 8520 8880 9120 9240 9840 10080 10320 10440 10800 11160 11640 12240 12360 12600 12720 12960 13200 13320 13440 13560 13680 14040 14640 14760 14880 15120 15480 15720 15840 16680 16800 16920 17640 17880 18000 18120 18240 18480 18600 18840 19080 19320 20160 20520 20640 20880 21120 21240 21600 21720 22560 22920 23160 23400 23640 24120 24240 24720 25080 25200 25680 25920 26040 26160 26520 26640 27360 27600 27720 27840 27960 28200 28320 28440 28800 29160 29520 29760 29880 30600 31320 31680 32160 32520 32760 33000 33240 33720 34080 34200 34440 35040 35160 35280 35400 36000 36120 36240 36600 36840 37800 38160 38280 38880 39000 39120 39240 39840 40560 40920 41040 41160 41400 41760 41880 42120 42480 42720 43080 43200 43440 43560 43800 44400 44640 44880 45000 45360 45600 45840 45960 46080 46200 46320 46800 46920 47160 47280 47520 48120 48360 48480 48720 49320 49440 49800 49920 50400 50520 50640 51240 51360 51840 51960 52080 52320 52440 52800 53160 53400 53760 53880 54120 54360 54840 55200 55320 55560 56160 56640 57000 57120 57960 58560 58680 59040 59160 59760 60120 60240 60360 60600 61320 62040 62160 62280 62520 62880 63720 63960 64080 64800 65040 65400 65640 65880 66240 66480 66600 66720 66840 66960 67080 67200)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1 1) (1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5100 5500) (10400) (7800) (7700 8800) (8300) (7400) (7000) (6700) (3300 4700) (3600) (3400) (8900) (2800) (9900) (2300 3000) (2200) (2400 4400) (4300) (8700 8900) (4900) (4400) (7100) (7000) (8600) (6900) (4800) (7300) (7600) (7700) (2700) (9400 10800) (10300) (5400) (9900 10700) (8800) (4500) (7200 7400) (5500) (6500) (7800) (10600) (2500) (3200) (3900 5000) (7800) (7700) (4300) (3300 4000) (7800 8600) (3900) (6700) (4800) (5600) (10700) (7600) (3700) (10300) (10600) (5300) (6900) (8400) (4400) (9500) (3000) (6300 7200) (10000) (7000) (5700) (6500 7900) (9800) (3500) (8500 9600) (7800) (3400) (2900) (2700) (4500) (3600 5000) (7300) (7800) (6500) (3600) (9000) (6700) (8600) (3900 5300) (7100 8400) (7300) (5500) (5600) (10500) (6000) (3400) (9700) (8600 9900) (8200) (10400) (9600 10300) (3700) (10400) (10000) (3100) (7700 8300) (7600) (2200) (10800) (6300) (5200) (9000) (3700) (9800) (8300) (5100) (5700 6500) (5500) (8400) (3200) (9400) (3700 4300) (7700) (6300) (6700) (10600) (8100) (4800) (7100) (7500) (2600 3700) (6400) (7900) (8900) (2800 3400) (9600) (4400) (6600) (8900) (5200 7800) (3500 4800) (6900) (6800) (7700 7900) (10700) (5700) (10800) (6400) (3400) (8700) (2300) (4300) (8400) (7700) (5600) (4900) (9400) (10800) (5200) (5700) (7000 7100 7400 8500) (7500) (9000 10400) (8900) (3800) (3300 4200) (9600) (7600) (3200 4600) (6100) (5700) (9100) (10100) (5600) (9400 10100) (6800) (6000) (7900) (3400) (7100) (8600) (5300 5400) (10300) (5900) (10100 10600) (7800) (5600) (8500) (9100) (7400) (7100) (4300 4900 5600 6500 7600) (7500) (5800) (5900) (6600) (6500) (3200) (7400) (5700) (6400) (2700) (3400 4400) (9500) (6700) (3000) (7300) (2600) (4000) (10800) (6100) (9400 10100) (3000) (7600 8700) (10500) (4400) (4300) (3600) (10600) (3500) (10200) (7600) (6200) (6000) (6500) (10400) (2500 3900) (7000) (5700) (3000))) :lonset (quote (240 360 600 960 1080 1320 2040 2400 2520 3360 3480 3600 4080 4200 6000 6120 6840 6960 7800 8040 8280 8520 8640 8760 9360 9480 9600 9960 10080 10200 10560 10800 11040 11520 11760 12240 12360 12600 12840 12960 13320 13560 13680 13800 14040 14280 14880 15120 15240 15840 16080 16200 16320 16560 16680 16800 17280 17640 17760 18000 18600 18720 19080 19680 19800 19920 20280 20520 21240 21360 21600 21720 21840 22320 22440 22680 23040 23160 23280 23520 23640 24360 24600 24720 25320 25440 25800 26520 26880 27000 27120 27240 27480 28200 28800 29040 29280 29760 29880 30360 30480 30960 31440 31800 32160 32400 32640 33120 33240 33600 33840 33960 34560 34680 35040 35160 35280 36000 36240 36480 36720 37440 37560 37680 37920 38040 38400 38640 38880 39120 39840 40200 40320 40680 40920 41520 42120 42360 42720 43320 43560 43800 43920 44040 44400 44640 45360 45480 45600 45960 46080 46320 46560 46800 47280 47520 47880 48000 48240 48480 48840 49200 49680 49920 50040 50160 50520 50880 51000 51120 51840 52320 53160 53280 53400 53640 53880 54240 54360 55200 55320 56040 56160 56520 56760 57360 57480 57840 58680 58920 59040 59280 59640 59760 59880 60000 60360 60960 61200 61560 61800 61920 62040 62160 62280 62400 62880 63360 63480 63840 64320 64440 64560 64680 64800 64920 65280 65520 65880 66000 66240 66360 66480 66720 66840 66960 67080 67200)) :ldur (quotelvel (quoteloffset (quote ((0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0))) :lchan (quote ((1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0)) ((0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 16 (list (quote ggff) (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 756 392) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 11 385) (om-make-point 134 85) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3100) (7000 7100 7300 8300) (9900 10200 10700 11800) (4200) (9500) (4300) (9300) (9900) (7300) (3900) (4800) (8100) (8800) (4800) (3400 4800) (9500 10800) (6900) (3700) (4800) (9300) (2700) (9100) (6400) (3000 3300 3800 4400 5300) (3400) (2400 3700) (4100 4700 6100) (5600 5800 6700 7800) (3600 4200 5000 5900 7000) (2400) (3800) (7100 7700 8500 9400 10500) (4300) (6700) (7800 7900 9000) (3900 4000 4300 4800 5400) (4800) (6100) (10500 10700) (10000) (9100 10100 11200) (7800 9100) (4200 4400) (6600) (5600) (9500 9700) (8300 9100 10400) (10100 11500) (5700) (8500 9200 10600) (2200 3500) (5300) (5000 6400) (4600) (8000) (9200 9400 10100) (5700) (9900) (2400 2600 3600) (7000) (4600 4800 5500) (9500 9600 9900 10400 11100) (6400) (2200) (10500) (10200) (4600 6000) (8200 8300 9100) (10700) (6900 7000 8400) (6100 6200 6400 7400) (7200 8300) (2300) (9200) (5700) (3100) (8900 9100 9800) (8900) (10400) (5900) (3000) (5900) (8400) (4900) (2500 3900) (2700) (4400 5100 6500) (6300 6600 7100) (7100) (6400) (2100) (6000) (6600) (5200) (5400 5600) (8000) (2600 3600 4700) (10200 10400) (6500) (7500 8600) (6300) (9600) (9500) (9200 9400 10100) (6000) (2800) (7700) (4900) (8600) (2700) (9900) (6000) (6700 6800 7300 8000 9100) (6900) (8500) (5200) (9400) (5600) (7600) (10600) (3900 5300) (3800) (7400) (2400 2900 3500 4300 5400) (4900 5100 6400) (5800 6000) (9400 9600) (4400) (6300) (8700) (3000 3200) (6600 7600) (2200) (5000) (6900) (10500) (4500 4800 5900) (2500) (5400 6800) (9900) (7700 8400 9800) (3000) (6900) (8100 8400 8800 9700 10800) (3800 4500 5900) (2600) (6800) (7900) (9200 10600) (6500 7200 8600) (4700 4800 5200 6100) (5700 6800) (4400) (8400) (10700 11800) (9700) (3600) (5200 5500 6600) (5500) (5100 5500 6000 6600 7500) (8100) (8200) (7600) (8300) (10700) (10700 11600 12900) (3900 5300) (8600) (8900) (9900) (6400 7500) (3800 4500 5900) (3100) (4500) (7500 8600) (6100) (4900 5600 7000) (2100 2800 4200) (3600) (7300) (3800 4500 5800) (7700 8800) (9300 9500) (5900) (9100) (3200) (8400 9100 10500) (4900) (6700) (3400 3700 4200 4900 5800) (2300) (9300 10000 10900 12000 13300) (4400) (5400) (9400 10800) (3900) (9200) (4700 4900) (7700) (5300) (6800 7000) (9400) (5700 5900 7200) (8100) (10300 11700) (4100) (8000) (6500) (3100) (7200) (6400) (9800) (6700) (5300) (6500) (10500 11500) (2200) (6800) (3800) (9100 10200) (6400 6600) (5400) (3300 4000 5300 6700) (5700) (4900 6300) (7300) (9100) (3900 4500 5900) (9400 10800) (3300) (9300) (3100) (8700) (2800 3000 3600 4900) (2700 3000 3500) (3600 3800 4700) (3700) (10200) (8600) (3300) (4300 5600) (6500) (4800) (7700 8600 9900) (5600) (10400 11700) (8000) (8200) (5900 7200) (2200 2900 4300) (2100) (3300) (8800) (3700 4700) (7700) (7100 7700 8500 9400 10500) (6400) (8600) (3000) (5700) (7400) (4300 4400 5200 6600) (4100) (9300) (10700) (3800) (3600) (8600 8800 9700) (6000 6100 6800 7700) (7500) (8200) (10600 10800 11700) (3800 5200) (9000) (7500) (3300) (4800 5900) (2500 2600 2900 4000) (9900) (2800) (6800) (4700 4900 5600) (4300) (8400) (2700 3300 4000 4900 6000) (5000) (7100) (2700 3700) (4300 5400) (4900) (10200) (5300) (5300 5600 6100 6700 7600) (9300 9500) (4000 4200) (8200 9600) (3000) (4200) (6700) (4300) (8300) (7200 7300 8400) (6500 7800) (6800) (4700) (5400 5600 6500) (6300) (4300 5700) (10600) (3300 3600 4600) (6900 7600 8400 9500 10800) (10700) (5800) (5000 5200 6300) (10500 10700 11200 11800 12900) (7500 8600) (2600) (2500 3600) (8000 8300 8800 9500 10400) (4500 4600 5400 6800) (5600) (4500) (8100) (5000 5200) (4500 4800 5300 6000 6900) (6200 6800 7600 8500 9600) (8500) (2800) (10700 11800) (7500) (7000 8400) (2200 3600) (2300 3400) (7500) (6600) (8300) (7100) (8000 8700 10100) (8100 8400 8900 9500 10400) (5400) (7300 8700) (8600 9900) (6600) (8400) (3700) (2500 2600 2900 3400 4000) (8100) (2900) (8100 8300 9200) (5800) (3700 5000) (4100) (3300) (9200) (8400 8600 9200 10500) (7300) (3200 3300 3600) (2500) (2100) (10400 10700 11200) (3400) (10200) (5100) (8500) (4700) (6500) (3300) (6600 7900) (2100) (4700) (3300) (8300) (3000) (6100 6300 6700) (7500) (5600) (6500) (2400) (9600 10700) (7200 8500) (8800 9400 10100 11500) (2800 3000 3600 4900) (10300) (8800 8900 9600 10500) (6300 6400 7800) (5200 6300) (8600 8800 9700 10800) (10000) (2300) (9400) (2800) (7900) (10600) (6500) (4800 4900 5700 7100) (9400) (10600 10800) (5000) (7100) (6800 7000 7400) (8300 9700) (10400) (4300) (3700) (4300 4500) (3500 3600 3900 5000) (9900 10000 11400) (4600) (2600) (5100) (2300 3400) (2600) (9400 10500) (2400) (9200) (9900 10200 10700) (9500 9700) (2400) (3200 4300) (6100) (6100) (2900 3600 5000) (6700) (2200) (2700) (10500) (4400) (8100 8300) (8800) (4600) (8900) (2900) (3900 4600 6000) (7300 8700) (9200) (10100 10300 10700) (10500) (7000 7100 8500) (5300) (3800) (8900 9100) (2300 3000 4400) (6200) (4700 5300 6000 7400) (3500) (3800 5200) (10600 10700 12100) (7100) (4400 5100 6500) (3000 3200 4300) (7800) (3000 4100) (9500 10900) (4800 5400 6100 7000 8100) (9200) (3400) (9600) (10700 10900 11800) (3400) (3200) (6000) (7700 7800 8200 9100) (4300) (3100) (2500 2700 4000) (6500) (3200) (3800 5100) (2200 2500 2900 3800 4900) (9600 11000) (5600 6300 7600) (4700) (4000 4200) (3000) (7000 7100 7500 8400) (10200 10400) (9400 10700) (9100) (3900) (9300) (4200) (9300) (9800 10100 10600 11700) (8400 8600 9000) (5700) (5100) (4800) (7700 7900) (4800 4900 5400 6100 7200) (2300 2500 2800 3300 3900 4600) (3400 3600 4500) (7000) (4100 4300 5300) (7300 7400 7700 8100 8600) (2800 3500 4900) (4100) (7000 8400) (9500 9700 10000 11300) (2900 3000 3700 4600) (2400 3500) (8900) (8900) (2800) (5000) (6300) (10700) (7000 8400) (8400) (3400) (6100) (6300) (4700 4900 5200 5700) (3600 3800) (4300) (2200) (9600) (9400) (3700 5100) (4400 5500) (2600) (10600 10800 11200) (4400 4500 4800 5800) (2400) (7600 8700) (3600 4700) (5300) (6800) (7000) (6700) (6400 7100 8500) (6800) (10400 11100 12500) (7800) (4700 5000 5500 6100 7000) (6600 7200 7900 8800 9900) (2100) (3300) (8400 9800) (4500 4700 5300 6600) (3600 3700 4000 4500 5200) (6400 7100 8500) (9800) (5300) (10800 11500 12900) (5600 6700) (7200 7500 8600) (9500 10200 11600) (8600 9700) (5900 7300) (8700 8800 9100) (3100 3200 3500 4500) (5400 6700) (7100 7700 9100) (7000) (8400 8500 8800 9200) (5700) (5400) (9500 9600 10400) (6200) (3100 3500 4000 4600 5500))) :lonset (quote (0 120 240 360 480 600 720 840 960 1080 1200 1320 1440 1560 1680 1800 1920 2040 2160 2280 2400 2520 2640 2760 2880 3000 3120 3240 3360 3480 3600 3720 3840 3960 4080 4200 4320 4440 4560 4680 4800 4920 5040 5160 5280 5400 5520 5640 5760 5880 6000 6120 6240 6360 6480 6600 6720 6840 6960 7080 7200 7320 7440 7560 7680 7800 7920 8040 8160 8280 8400 8520 8640 8760 8880 9000 9120 9240 9360 9480 9600 9720 9840 9960 10080 10200 10320 10440 10560 10680 10800 10920 11040 11160 11280 11400 11520 11640 11760 11880 12000 12120 12240 12360 12480 12600 12720 12840 12960 13080 13200 13320 13440 13560 13680 13800 13920 14040 14160 14280 14400 14520 14640 14760 14880 15000 15120 15240 15360 15480 15600 15720 15840 15960 16080 16200 16320 16440 16560 16680 16800 16920 17040 17160 17280 17400 17520 17640 17760 17880 18000 18120 18240 18360 18480 18600 18720 18840 18960 19080 19200 19320 19440 19560 19680 19800 19920 20040 20160 20280 20400 20520 20640 20760 20880 21000 21120 21240 21360 21480 21600 21720 21840 21960 22080 22200 22320 22440 22560 22680 22800 22920 23040 23160 23280 23400 23520 23640 23760 23880 24000 24120 24240 24360 24480 24600 24720 24840 24960 25080 25200 25320 25440 25560 25680 25800 25920 26040 26160 26280 26400 26520 26640 26760 26880 27000 27120 27240 27360 27480 27600 27720 27840 27960 28080 28200 28320 28440 28560 28680 28800 28920 29040 29160 29280 29400 29520 29640 29760 29880 30000 30120 30240 30360 30480 30600 30720 30840 30960 31080 31200 31320 31440 31560 31680 31800 31920 32040 32160 32280 32400 32520 32640 32760 32880 33000 33120 33240 33360 33480 33600 33720 33840 33960 34080 34200 34320 34440 34560 34680 34800 34920 35040 35160 35280 35400 35520 35640 35760 35880 36000 36120 36240 36360 36480 36600 36720 36840 36960 37080 37200 37320 37440 37560 37680 37800 37920 38040 38160 38280 38400 38520 38640 38760 38880 39000 39120 39240 39360 39480 39600 39720 39840 39960 40080 40200 40320 40440 40560 40680 40800 40920 41040 41160 41280 41400 41520 41640 41760 41880 42000 42120 42240 42360 42480 42600 42720 42840 42960 43080 43200 43320 43440 43560 43680 43800 43920 44040 44160 44280 44400 44520 44640 44760 44880 45000 45120 45240 45360 45480 45600 45720 45840 45960 46080 46200 46320 46440 46560 46680 46800 46920 47040 47160 47280 47400 47520 47640 47760 47880 48000 48120 48240 48360 48480 48600 48720 48840 48960 49080 49200 49320 49440 49560 49680 49800 49920 50040 50160 50280 50400 50520 50640 50760 50880 51000 51120 51240 51360 51480 51600 51720 51840 51960 52080 52200 52320 52440 52560 52680 52800 52920 53040 53160 53280 53400 53520 53640 53760 53880 54000 54120 54240 54360 54480 54600 54720 54840 54960 55080 55200 55320 55440 55560 55680 55800 55920 56040 56160 56280 56400 56520 56640 56760 56880 57000 57120 57240 57360 57480 57600 57720 57840 57960 58080 58200 58320 58440 58560 58680 58800 58920 59040 59160 59280 59400 59520 59640 59760 59880 60000 60120 60240 60360 60480 60600 60720 60840 60960 61080 61200 61320 61440 61560 61680 61800 61920 62040 62160 62280 62400 62520 62640 62760 62880 63000 63120 63240 63360 63480 63600 63720 63840 63960 64080 64200 64320 64440 64560 64680 64800 64920 65040 65160 65280 65400 65520 65640 65760 65880 66000 66120 66240 66360 66480 66600 66720 66840 66960 67080 67200)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4600) (10700) (4900 5100 5500) (10200 10400) (5300) (7800) (3500 3800 4800) (7700) (7300 7700 8200 8800 9700) (8300) (7200) (7400 8500) (2200) (3600) (5100) (9300) (7200 8500) (5100 5700 7000) (7200) (8500 8700 9000 9500 10100 10800) (5400 5500 5700 6700) (2400 2500 3300 4700) (7700) (8700) (6600) (4400) (7200) (7800 8500 9900) (3600) (3400) (8900) (4900) (10500 11400 12800) (8600 8800 9700) (2800) (9900) (6900 8300) (4900) (4100) (3600) (3700 4700 5800) (5000 6100) (3500 3700 4200 4800 5900) (3300) (3400) (2100) (4900) (2700 3200 3800 4700 5800) (10600 11700) (10800) (2300 3000 4300) (2200) (7500) (9800) (7300) (10300 10400 11500) (2600) (2200 2400 3300 4400) (4300 5700) (3800) (6300 7400) (9700) (8700) (9700) (10000 10100 10600 11300 12400) (8700 8900 9300) (3200) (4900) (5000) (3300 4400) (7800) (4800 5400 6200 7100 8200) (7000 7800 8800) (8600) (5400) (7600) (6500 6700 7000 7500 8100 8800) (5100 6500) (6000 6100 6400 6900 7600) (4800) (7300) (10000 11400) (5300 5800 6400 7200 8300) (7600) (7700 7800 8600) (2700) (9400 9500 9800 10200 10700) (7800) (9400 10800) (2300) (9500 9800 10300 10900) (7800) (5200 5400) (9300) (6400) (9900) (9900 10000 10700 11600) (6500 7200 8600) (8800) (6500) (7900 8100) (6600 8000) (4500) (7200 7400 7700 9000) (10100) (5300 5500 6800) (4200) (6500 7800) (7800 9200) (8800) (8200) (9500 9700 10600 11700) (4400) (2500) (3200) (3900 5000) (7200) (5200 5900 6700 7800 9100) (8900) (7700) (7600) (2800) (9400 10800) (9100) (3600 4300 5700) (7100) (3300 4000 5400) (7800 8000 8600 9900) (8500 9900) (9700) (2200) (10800) (3900) (10700) (5900 6100 6700 8000) (3500 4800) (5600) (8600) (9400 10700 12100) (7600) (3700 3800 4600 6000) (5800) (6200) (7800) (10300 11400) (6300) (3300) (10600) (2600 3200 3900 5300) (2400) (6900) (4200) (7600 7800) (6600) (7800 8000 8600 9900) (8400) (4400) (2200 3500) (2800) (8700 9000 9500 10200 11100) (10600) (5000 5100 5800 6700) (4500) (10300) (3000) (4900 5200 5700 6300 7200) (10000) (10600) (7300) (5000 5500 6100 7000 8100) (6900) (5700) (9100) (3800) (9700) (8300) (5000) (5900 6500 7900) (9800) (9400 9600) (3500) (8500 9600) (6400 7800) (9400) (5100) (4500) (3400) (2900 4000) (8600) (2700) (5300 5600 6000) (5000) (3500 3600 4000 4500 5600) (3600 5000) (7300) (4000) (7800) (6500) (7600) (9200) (7100) (9500) (9800) (3600) (4400) (8400 9000 10300) (6100 6700 7400 8800) (9400 9500 10000 10700 11800) (10000) (9700) (5200) (8600 9900 11300) (3200 3900 5300) (3200) (4700 5800) (6400 7100 8400) (6100 6800 8100) (6800 7000) (4900) (10500) (5600) (7300) (5600) (10000) (5500 5700) (4600 5600) (10500) (6000 7400) (7100) (3400) (3500) (5100 6400) (8500) (3700) (10000) (9500 9700) (7400 8100 9500) (3100 3800 5200) (9300 10100 11400) (8300) (7900 8600 9900 11300) (5600) (8200) (6000) (10400 10500 11200 12100) (8300 8500) (2500) (6900 7100) (9600 10300 11700) (3700) (2900) (2700) (8800) (10400) (10000) (7100) (2600) (2700 2900) (3100) (4900) (7100) (7700) (7500 7700 8300 9600) (6800) (8600 8700 9200 9900 11000) (6000 6100 6800 7600) (7200) (2600) (2200) (6800) (10800) (5400) (6300 7400) (2500) (6100) (5200 6600) (5200) (9000 9200) (10400) (5000) (2300 3700) (6900) (9800) (8300) (9100 9400 9900) (10400) (4300) (10100) (5100) (5700 5800 6100 6500) (7900) (3200 4300) (5200 5500 6000 7100) (8200 8400) (2500 3200 4600) (9800 10900) (8600) (10000) (4700) (2700) (9400) (6500) (3700 4300 5100 6000 7100) (3800) (7700) (10400 11000 12400) (6300) (8700 9600 11000) (9600) (9300 9500) (10400 10700 11800) (5500) (6700) (10600 11700) (8100 9200) (10800) (4800 6200) (7100) (7500) (3700) (6200 6800 7500 8900) (5300) (2600 2800 3700) (5300) (6400) (7000 7700 9100) (7900 8900) (8000) (5700) (9300 10400) (2900) (7700) (8900 9900) (4500 4700) (5700) (2700 2800 3400) (9600) (5600) (9100) (4400) (9300 9500 9800 11100) (6600) (6700) (9900) (2300) (3700) (8400 8900 9500 10300) (3700) (7400 7600 8100 8700 9800) (6700 6900 7600) (5700 7100) (4700 5200 5800 6700 7800) (3100) (3400 3500 3900 4800) (6300) (4400 4600 5700) (6100 6200 6500 6900) (7300) (8200) (9100) (9700 11100) (6800) (3100 3900 5200) (7700 7900 8800 9900) (6200 6400 7000 8300) (10000 10700 12100) (5700) (10800 12200) (9700 9900) (8200) (6400) (3700 3900) (3400) (7300) (8900 9100 9500 10100) (6300) (3900) (9500 9800 10300 10900) (8700) (2300 3600) (4300) (5400 5600 6500) (3800) (8100 8400 8900 9600 10500) (7700 9000) (8600 9700) (5600) (8600) (4900 6200) (6200) (9400) (4500 5200 6600) (6400) (8600 8800) (10800) (7800 8900) (3100 3300 3900 5200) (7900 9200) (6300) (5500 5700) (7000 7100 7400 8500) (10100 10300 11400) (7500) (9000) (9000 10400) (6400) (9100) (8900) (4000) (7900) (3800) (10000) (3600) (7600) (3300 3400 3700 4200 4800) (2400) (9600 10300 11600) (7600 8300 9700) (3200 4600) (2300) (2700) (6100) (4300) (4300) (5700) (9100) (10100 10700 11400 12300 13400) (5400) (4400) (4400) (10700 10900 11400 12000 13100) (2700) (5600) (3900) (3500) (6900) (9300 9400 10100 11000) (9300) (7900) (7300 8400) (2300) (9600 9800 11100) (5000) (6800 7900) (4700 6000) (6600 6900 7900) (8600) (3400 4100 5000 6100 7400) (8900) (7100) (6300 6500 7800) (10100) (8600 10000) (5300 5400 6100 6900) (7500) (4900 5100 5500) (9300) (10300) (4900) (4900 5200 5700 6300 7200) (7600 7900 8300 9200 10300) (5900) (9200) (8100) (2600) (4200) (8300) (10100 10600 11200 12100 13200) (7800 8500 9900) (8800) (10800) (5600 5900 6400 7500) (8100 8300 8600 9900) (6400 7100 8500) (10700 11000 11500) (3900) (7500) (9700 9900) (8400 8700 9100 10000 11100) (7400 8300 9600) (9500 10800) (8100 9500) (7100) (9900 10100 10500 11100) (5700 6000 6500 7600) (9700) (2800 3400 4800) (4300) (5500 5700 6000 6500) (4300 4900 5600 6500 7600) (8600) (6200 7500) (5800) (7200 7400) (5900) (6900) (9300) (6600) (6400 6500 6800 7900) (3200) (7400) (9600) (5500) (5700) (3600) (6400) (7600 8200 9500) (8800) (6400) (5500 6200 7100 8200 9500) (2700) (4800) (7100) (2600 3400 4400) (2900) (9500) (5400 6700) (3000 3800 4800) (7300) (2600 4000) (4000 4100 4800 5700) (5700) (8900) (5300) (9400 10800) (8900) (2900) (7800) (6100 6300) (9300 9400 10100 11000) (5500) (5100) (3000) (7900) (3500) (4400) (7600 8700) (10500 11900) (4400) (4300) (3600) (9500 10600) (5900) (6100) (3500 4900) (4200) (8800 10200) (5600) (3800) (7600) (6200) (10600) (4900 6000) (6500) (10400) (10500) (2500 3900) (7000) (5700) (3000))) :lonset (quote (0 120 240 360 480 600 720 840 960 1080 1200 1320 1440 1560 1680 1800 1920 2040 2160 2280 2400 2520 2640 2760 2880 3000 3120 3240 3360 3480 3600 3720 3840 3960 4080 4200 4320 4440 4560 4680 4800 4920 5040 5160 5280 5400 5520 5640 5760 5880 6000 6120 6240 6360 6480 6600 6720 6840 6960 7080 7200 7320 7440 7560 7680 7800 7920 8040 8160 8280 8400 8520 8640 8760 8880 9000 9120 9240 9360 9480 9600 9720 9840 9960 10080 10200 10320 10440 10560 10680 10800 10920 11040 11160 11280 11400 11520 11640 11760 11880 12000 12120 12240 12360 12480 12600 12720 12840 12960 13080 13200 13320 13440 13560 13680 13800 13920 14040 14160 14280 14400 14520 14640 14760 14880 15000 15120 15240 15360 15480 15600 15720 15840 15960 16080 16200 16320 16440 16560 16680 16800 16920 17040 17160 17280 17400 17520 17640 17760 17880 18000 18120 18240 18360 18480 18600 18720 18840 18960 19080 19200 19320 19440 19560 19680 19800 19920 20040 20160 20280 20400 20520 20640 20760 20880 21000 21120 21240 21360 21480 21600 21720 21840 21960 22080 22200 22320 22440 22560 22680 22800 22920 23040 23160 23280 23400 23520 23640 23760 23880 24000 24120 24240 24360 24480 24600 24720 24840 24960 25080 25200 25320 25440 25560 25680 25800 25920 26040 26160 26280 26400 26520 26640 26760 26880 27000 27120 27240 27360 27480 27600 27720 27840 27960 28080 28200 28320 28440 28560 28680 28800 28920 29040 29160 29280 29400 29520 29640 29760 29880 30000 30120 30240 30360 30480 30600 30720 30840 30960 31080 31200 31320 31440 31560 31680 31800 31920 32040 32160 32280 32400 32520 32640 32760 32880 33000 33120 33240 33360 33480 33600 33720 33840 33960 34080 34200 34320 34440 34560 34680 34800 34920 35040 35160 35280 35400 35520 35640 35760 35880 36000 36120 36240 36360 36480 36600 36720 36840 36960 37080 37200 37320 37440 37560 37680 37800 37920 38040 38160 38280 38400 38520 38640 38760 38880 39000 39120 39240 39360 39480 39600 39720 39840 39960 40080 40200 40320 40440 40560 40680 40800 40920 41040 41160 41280 41400 41520 41640 41760 41880 42000 42120 42240 42360 42480 42600 42720 42840 42960 43080 43200 43320 43440 43560 43680 43800 43920 44040 44160 44280 44400 44520 44640 44760 44880 45000 45120 45240 45360 45480 45600 45720 45840 45960 46080 46200 46320 46440 46560 46680 46800 46920 47040 47160 47280 47400 47520 47640 47760 47880 48000 48120 48240 48360 48480 48600 48720 48840 48960 49080 49200 49320 49440 49560 49680 49800 49920 50040 50160 50280 50400 50520 50640 50760 50880 51000 51120 51240 51360 51480 51600 51720 51840 51960 52080 52200 52320 52440 52560 52680 52800 52920 53040 53160 53280 53400 53520 53640 53760 53880 54000 54120 54240 54360 54480 54600 54720 54840 54960 55080 55200 55320 55440 55560 55680 55800 55920 56040 56160 56280 56400 56520 56640 56760 56880 57000 57120 57240 57360 57480 57600 57720 57840 57960 58080 58200 58320 58440 58560 58680 58800 58920 59040 59160 59280 59400 59520 59640 59760 59880 60000 60120 60240 60360 60480 60600 60720 60840 60960 61080 61200 61320 61440 61560 61680 61800 61920 62040 62160 62280 62400 62520 62640 62760 62880 63000 63120 63240 63360 63480 63600 63720 63840 63960 64080 64200 64320 64440 64560 64680 64800 64920 65040 65160 65280 65400 65520 65640 65760 65880 66000 66120 66240 66360 66480 66600 66720 66840 66960 67080 67200)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0 0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0) (0) (0) (0 0 0 0 0) (0) (0) (0 0 0) (0 0 0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0 0 0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0 0) (0 0 0 0 0) (0) (0) (0 0 0) (0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0 0 0 0) (0) (0) (0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0 0) (0 0 0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0) (0 0 0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0 0) (0) (0) (0 0) (0 0 0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0) (0 0 0) (0 0 0 0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0) (0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0) (0) (0 0 0 0) (0) (0) (0 0 0) (0) (0 0 0 0 0)) ((0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0 0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0 0) (0 0 0) (0) (0) (0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0) (0) (0) (0 0) (0 0 0 0 0) (0) (0 0 0) (0) (0 0 0 0 0) (0) (0 0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0 0) (0 0 0 0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0) (0) (0 0 0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0 0 0) (0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0 0 0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0 0) (0 0 0 0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 16 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 710 209) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 982 235) (om-make-point 28 30) 46 "46" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 1020 239) (om-make-point 52 30) (list (list 3 4)) "((3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 1056 275) (om-make-point 38 30) 2.7 "2.7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 553 451) (om-make-point 506 246) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (15/2 (((3 4) ((1 (1 1 1 1 1 1 1 1 -1 1)) (1 (1.0 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (-1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 -1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 -1 1 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 -1 1 1 1 1)) (1 (1 1 1 1 1 -1 1 1 1)) (1 (1.0 1 1 1 1 -1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1)) (1 (1 1 1 1 -1 1)) (1 (1.0 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) (1 (1 -3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2700)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 9400 10500)) :ldur (quote (163 163 163)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (15 15 15))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10200)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6400)) :ldur (quote (130 130)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100 9800)) :ldur (quote (217 217)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (326)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2100)) :ldur (quote (326)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (326)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10200)) :ldur (quote (326)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200 9400)) :ldur (quote (119 119)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900 3500 4300)) :ldur (quote (186 186 186)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (15 15 15))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2200)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9700)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6000)) :ldur (quote (119 119)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 5800)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 8800)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300 10000)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2200)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10200)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600 9900)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 8500 9400)) :ldur (quote (186 186 186)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (15 15 15))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 6600)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6800 7700)) :ldur (quote (186 186 186)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (15 15 15))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 6000)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2700)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5600 6100)) :ldur (quote (163 163 163)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (15 15 15))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 7800)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 5400)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 6900)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6800)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500 10400)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (109)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10300)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900 10500)) :ldur (quote (119 119)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10800)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10000)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400 10500)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900 10200)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900 3600 5000)) :ldur (quote (217 217 217)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (15 15 15))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10500)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000 8500)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 5200)) :ldur (quote (217 217)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900 4900)) :ldur (quote (217 217)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 8600)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000 3700)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 5700)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5800)) :ldur (quote (69 69)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 9900)) :ldur (quote (69 69)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9600 10400)) :ldur (quote (69 69)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (69)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500 4000 4600 5500)) :ldur (quote (326 326 326 326)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (15 15 15 15))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 46) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (15/2 (((3 4) ((1 (1 1 1 1 1 1 1 1)) (1 (1.0 1 -1 1 1 1 1 1 -1)) (1 (1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 -1 1 1 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 -1 1)) (1 (1 1 1 1 1 1 1 1 1)) (1 (1.0 1 -1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 -1 1 -1 1 1)) (1 (1.0 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 -1 1 1 1)))) ((3 4) ((1 (1 1 1 -1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1 1 1 1)))) ((3 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)) (1 (1 1 -2 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1)) (1 (-1 1 1 -1 1 1)) (1 (1.0 1 1 1 1 1 1 1)))) ((3 4) ((1 (1.0 1 1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) (1 (1 -3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100 5500)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 8800)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 4700)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2300 3000)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2200)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2400 4400)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700 8900)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400 10800)) :ldur (quote (261 261)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10300)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900 10700)) :ldur (quote (261 261)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7400)) :ldur (quote (119 119)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10600)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 5000)) :ldur (quote (119 119)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 4000)) :ldur (quote (261 261)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 8600)) :ldur (quote (261 261)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 7200)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10000)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 7900)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500 9600)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2700)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 5000)) :ldur (quote (119 119)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (119)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 5300)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 8400)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10500)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9700)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600 9900)) :ldur (quote (217 217)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9600 10300)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10000)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 8300)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2200)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10800)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6500)) :ldur (quote (217 217)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700 4300)) :ldur (quote (145 145)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600 3700)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800 3400)) :ldur (quote (163 163)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9600)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 7800)) :ldur (quote (217 217)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500 4800)) :ldur (quote (217 217)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7900)) :ldur (quote (130 130)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10700)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10800)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2300)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10800)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (145)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000 7100 7400 8500)) :ldur (quote (186 186 186 186)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (15 15 15 15))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000 10400)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 4200)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200 4600)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400 10100)) :ldur (quote (261 261)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (186)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5400)) :ldur (quote (186 186)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10300)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100 10600)) :ldur (quote (217 217)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (217)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 4900 5600 6500 7600)) :ldur (quote (163 163 163 163 163)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (15 15 15 15 15))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (163)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2700)) :ldur (quote (130)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400 4400)) :ldur (quote (48 48)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10800)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400 10100)) :ldur (quote (48 48)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 8700)) :ldur (quote (48 48)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10500)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10600)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10200)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10400)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500 3900)) :ldur (quote (48 48)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (15 15))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (48)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (326)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 46) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode cursor-mode)) (list 8 16 (list (quote ggff) (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1022 556) (om-make-point 129 33) 0 1 (quote t) nil 0 (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 493 29) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 437 90) (om-make-point 153 110) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.5 25.0 37.5 50.0 62.5 75.0 87.5 100.0 112.5 125.0 137.5 150.0 162.5 175.0 187.5 200.0 212.5 225.0 237.5 250.0 262.5 275.0 287.49997 300.0 312.5 325.0 337.5 350.0 362.49997 375.0 387.5 400.0 412.5 425.0 437.5 450.0 462.49997 475.0 487.49997 500.0 512.5 525.0 537.5 550.0 562.5 574.99994 587.5 600.0 612.5 625.0 637.5 650.0 662.5 675.0 687.5 700.0 712.5 724.99994 737.5 750.0 762.5 775.0 787.5 800.0 812.49994 825.0 837.5 850.0 862.5 875.0 887.49994 900.0 912.5 924.99994 937.5 950.0 962.49994 974.99994 987.5 1000.0)) (quote (22.0 936.99994 580.0 14.999999 704.0 804.0 788.0 83.0 434.0 911.0 743.0 99.0 378.0 188.0 76.0 167.0 839.0 639.0 64.0 177.0 184.0 565.0 127.0 901.99994 236.00002 523.0 151.0 531.0 811.0 822.0 35.0 517.0 470.00003 414.0 0.0 769.0 296.0 341.0 955.0 471.0 150.0 322.0 183.0 395.0 712.0 373.0 790.0 82.0 615.0 505.00003 173.0 291.0 867.0 229.0 897.00007 406.0 351.0 373.0 472.00003 457.0 128.0 395.0 262.0 59.999997 64.0 282.0 130.0 257.0 448.99997 957.0 278.0 611.0 569.0 350.0 833.0 789.0 714.0 798.0 642.0 874.0 881.99994)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 609 22) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 671 10) (om-make-point 63 30) (list 67 195) "(67 195)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 405 56) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 339 32) (om-make-point 84 30) (list 0.001 1.03) "(.001 1.03)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 191 294) (om-make-point 28 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 125 195) (om-make-point 35 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 10 22) (om-make-point 72 78) (let ((thechord (make-instance (quote chord) :lmidic (quote (2100 10800)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 16 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :osc-scoreplayer) 1 nil 1000 3 (om-make-point 632 299) (om-make-point 400 23) 0 0 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 156 55) (om-make-point 24 26) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 173 35) (om-make-point 35 30) 560 "560" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 213 47) (om-make-point 41 30) 120 "120" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 114 46) (om-make-point 28 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 252 47) (om-make-point 35 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 290 54) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 1 1 0 nil 0) (0 0 1 1 nil 0) (1 0 4 0 nil 0) (23 0 4 1 nil 0) (24 0 4 2 nil 0) (25 0 4 3 nil 0) (3 0 4 4 nil 0) (2 0 4 5 nil 0) (11 0 5 0 nil 0) (10 0 5 1 nil 0) (18 0 5 2 nil 0) (14 0 7 0 nil 0) (6 0 7 1 nil 0) (33 0 7 2 nil 0) (21 1 8 0 nil 0) (32 0 8 1 nil 0) (28 0 8 2 nil 0) (31 0 8 3 nil 0) (29 0 9 0 nil 0) (30 0 9 1 nil 0) (20 0 9 2 nil 0) (13 0 11 0 nil 0) (22 1 13 0 nil 0) (12 0 13 1 nil 0) (15 0 14 0 nil 0) (34 0 14 1 nil 0) (35 1 15 0 nil 0) (39 0 15 1 nil 0) (36 0 15 2 nil 0) (37 0 15 3 nil 0) (38 0 15 4 nil 0) (40 0 15 5 nil 0) (41 0 15 6 nil 0) (35 1 16 0 nil 0) (8 0 17 1 nil 0) (5 1 21 1 nil 0) (7 0 22 1 nil 0) (4 0 26 1 nil 0) (9 0 27 0 nil 0) (27 0 28 0 nil 0))) nil 6.13))
