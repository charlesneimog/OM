; OM File Header - Saved 2020/09/23 20:55:27
; (6.13 :patc (om-make-point 10 10) (om-make-point 133 23) (om-make-point 1147 656) "" 183 0 nil "2020/09/23 20:55:26")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "03-gesture-synchronous-events" (quote ((let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 385 543) (om-make-point 130 90) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-8 6)) (1 (16.0 4.0 2 2 2 2 2 1)) (1 (2.0 2 2 2 3 3 3 3 3 -2)) (1 (-1)) (1 (-2 2 2 2 2 3 3 3 3 2)))) ((5 4) ((1 (2.0 3 2 2 2 1 1 2 2 2 2 2 -3)) (1 (-12 -3.0 3)) (1 (4 2 2 3 3 3 3 3 3 1)) (1 (3.0 -8)) (1 (-8 -1.0 6)))) ((5 4) ((1 (1.0)) (1 (1.0)) (1 (7.0 -6)) (1 (-1 3 4 4 3 3 3 3)) (1 (3 1 1 1 1 1 1 -3)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (643)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (97)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9402)) :ldur (quote (97)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (97)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9402)) :ldur (quote (97)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (97)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9402)) :ldur (quote (48)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9402)) :ldur (quote (120)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9402)) :ldur (quote (180)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (180)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9402)) :ldur (quote (180)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (180)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9402)) :ldur (quote (180)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (125)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (125)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (188)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (188)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (188)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (188)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (125)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (173)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (115)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (115)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (58)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (58)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (115)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (115)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (115)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (115)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9502)) :ldur (quote (115)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (250)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9602)) :ldur (quote (222)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (111)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9602)) :ldur (quote (111)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (167)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9602)) :ldur (quote (167)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (167)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9602)) :ldur (quote (167)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (167)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9602)) :ldur (quote (167)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (56)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (600)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (188)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9202)) :ldur (quote (250)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (250)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9202)) :ldur (quote (188)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (188)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9202)) :ldur (quote (188)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (188)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9202)) :ldur (quote (375)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (125)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9202)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9202)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9452)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9202)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-8 -1.0 3 2 2 3 2 1)) (1 (2 1 2 2 2 3 3 3 3 3 1)) (1 (2.0 2 2 2 2 2 -8 -1.0)) (1 (-8 4 4 4 1.0 1)) (1 (4.0 4 1.0 4 4 4 1.0 1)))) ((5 4) ((1 (4.0 4 -4 -1.0)) (1 (-4 -1.0 3 3 3 3 3 2)) (1 (3.0 4 4 4 -6)) (1 (-8 2 3 4 3 1)) (1 (2.0 3 3 2 3 3 3 3 1)))) ((5 4) ((1 (3 3 3 3 3 3 2 2 2 1)) (1 (3 1 2 2 2 2 2 -7)) (1 (-2 4 4 4 4 3 1)) (1 (3.0 3 3 3 -8 -1.0)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (205)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (136)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (136)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (205)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (136)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (68)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (120)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (60)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (120)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (180)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (180)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (180)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (180)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (180)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (60)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9466)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6212)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10200)) :ldur (quote (273)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1575)) :ldur (quote (273)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8538)) :ldur (quote (68)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11862)) :ldur (quote (261)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4862)) :ldur (quote (261)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3438)) :ldur (quote (261)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9762)) :ldur (quote (261)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5525)) :ldur (quote (65)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (462)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9275)) :ldur (quote (205)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1525)) :ldur (quote (205)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3225)) :ldur (quote (205)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11050)) :ldur (quote (205)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (205)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7062)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10688)) :ldur (quote (286)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5838)) :ldur (quote (286)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2762)) :ldur (quote (286)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3962)) :ldur (quote (214)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7912)) :ldur (quote (286)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11925)) :ldur (quote (214)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2000)) :ldur (quote (71)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (196)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10925)) :ldur (quote (196)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (975)) :ldur (quote (130)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5562)) :ldur (quote (196)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (938)) :ldur (quote (196)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5738)) :ldur (quote (196)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (65)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (180)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (180)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (180)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (180)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (180)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (180)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (120)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (120)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (120)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (60)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (214)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (71)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (143)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9316)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (273)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5012)) :ldur (quote (273)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (273)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7462)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9675)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6712)) :ldur (quote (68)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3350)) :ldur (quote (214)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (214)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1462)) :ldur (quote (214)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-8 3)) (1 (4 3 3 4 4 2 2 1)) (1 (3.0 3 2 2 2 2 2 2 -4)) (1 (-8 -1.0 3 3)) (1 (4 3 4 1.0 4 1.0 4 1.0 2)))) ((5 4) ((1 (8.0 -4)) (1 (-4 -1.0 7 -2)) (1 (-3 7 2 3 2 2 2 2)) (1 (2 2 7 -6 4)) (1 (4.0 -8 2 1)))) ((5 4) ((1 (4 2 2 2 3 3 3 2 2 3 1)) (1 (2.0 2 2 2 2 2 2 2 3 4 2)) (1 (3.0 4 4 1.0 4 4 3 1)) (1 (3.0 -3 2 3 2)) (1 (4 3 3 7 4 1)))) ((5 4) ((1 (3.0 4 -8)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (409)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10000)) :ldur (quote (261)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9188)) :ldur (quote (196)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8912)) :ldur (quote (196)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6288)) :ldur (quote (261)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4288)) :ldur (quote (261)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (130)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (130)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (65)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (205)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (136)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (300)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1362)) :ldur (quote (300)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4475)) :ldur (quote (250)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1538)) :ldur (quote (188)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2888)) :ldur (quote (250)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9438)) :ldur (quote (250)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6438)) :ldur (quote (250)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (125)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (750)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11050)) :ldur (quote (457)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (130)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (196)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (130)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9242)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2062)) :ldur (quote (500)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7612)) :ldur (quote (286)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (100)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (222)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (111)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (111)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (111)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (167)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (167)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (167)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (111)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (111)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (167)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (56)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8362)) :ldur (quote (180)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7888)) :ldur (quote (240)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2012)) :ldur (quote (120)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9412)) :ldur (quote (250)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3638)) :ldur (quote (250)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6638)) :ldur (quote (250)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3788)) :ldur (quote (188)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4462)) :ldur (quote (62)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (231)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (346)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (231)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (273)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (205)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (205)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (477)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10288)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (68)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (400)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (1)) (1 (8.0 2 2 2 2 2 3 3 1)) (1 (3.0 3 3 3 3 -7)) (1 (-1 8 2.0)) (1 (7.0 16 4.0)))) ((5 4) ((1 (2.0 -12 -3.0 1)) (1 (16.0 4.0 7)) (1 (7.0 -4 -1.0)) (1 (-3 12 1.0)) (1 (2.0 3 3 3 3 3 3 3 2 1)))) ((5 4) ((1 (3 2 2 16 4.0)) (1 (4.0 1.0 -3 2 2)) (1 (4 2 3 3 2 3 2 2 2 2 1)) (1 (3 -12 -3.0)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (1500)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (120)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (120)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (120)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (120)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (180)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (180)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (60)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (205)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (205)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (205)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (205)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (1091)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (889)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (83)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (389)) :lvel (quote (47)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (1125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (173)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (173)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (173)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (173)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (173)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (173)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (173)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (115)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (58)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (167)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (111)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9042)) :ldur (quote (111)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (889)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (250)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (250)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (231)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (115)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (173)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (173)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (115)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (173)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (115)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (115)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (115)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (115)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (58)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (250)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-6 6 1)) (1 (2.0 2 2 2 4 3 3 3 3)) (1 (3 8 3.0 -4)) (1 (-8 3 3 1)) (1 (4.0 2 3 3 3 3 2 2 1)))) ((5 4) ((1 (2.0 3 3 2 2 2 2 2 -3)) (1 (-4 2 2 3 3 1)) (1 (3.0 2 3 3 3 3 7)) (1 (8.0 1.0 -3)) (1 (-4 -1.0 8)))) ((5 4) ((1 (16.0 4.0 1 2 3 2 1)) (1 (3 3 3 2 2 3 3 2 2 2 1)) (1 (2 2 -8 8)) (1 (2.0 3 3 3 3 3 3 3 2)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (692)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (115)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (125)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (125)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (250)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (667)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (300)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9442)) :ldur (quote (300)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (100)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9442)) :ldur (quote (130)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9442)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9442)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (130)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (130)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (65)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (214)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (214)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (200)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (200)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (300)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (300)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (100)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (125)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (188)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (188)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (188)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9342)) :ldur (quote (188)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (438)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (923)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (52)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (103)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (155)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (103)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (52)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (173)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (173)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (173)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (115)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (115)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (173)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (173)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (115)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (115)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (115)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (58)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (150)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8992)) :ldur (quote (150)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (600)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (180)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (180)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (180)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (180)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (180)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (180)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192)) :ldur (quote (180)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142)) :ldur (quote (120)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-7 4)) (1 (7.0 2 3 3 2 2 3 1)) (1 (2.0 4 4 4 4 4 -1)) (1 (-1)) (1 (16 3.0 8 2.0)))) ((5 4) ((1 (3 3 2 3 2 2 2 2 -4)) (1 (-7 6)) (1 (8.0 -4 -1.0)) (1 (-8 2 2 3 3 3 2)) (1 (3 2 2 2 2 2 2 2 3 2 2 2)))) ((5 4) ((1 (2 2 2 2 2 2 3 3 3 3 3 1)) (1 (3.0 3 3 1 2 3 3 3 3 2)) (1 (2.0 3 -4 -1.0 3 1)) (1 (3 3 2 2 2 2 2 2 2 2 2 1)) (1 (2.0 3 2 2 2 2 2 -7)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (545)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (130)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (196)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (196)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (130)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (130)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (65)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (261)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (261)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (261)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (261)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (261)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (828)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (414)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (196)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (196)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (130)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (196)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (130)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (130)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (130)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9294)) :ldur (quote (130)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (692)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (130)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9394)) :ldur (quote (130)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (196)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9394)) :ldur (quote (196)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (196)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9394)) :ldur (quote (130)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (173)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9394)) :ldur (quote (115)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (115)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9394)) :ldur (quote (115)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (115)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9394)) :ldur (quote (115)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (115)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9394)) :ldur (quote (115)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (173)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (115)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (115)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (107)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (107)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (107)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (107)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (107)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (107)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (161)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (161)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (161)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (161)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (161)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9344)) :ldur (quote (54)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (173)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9344)) :ldur (quote (173)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (58)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9344)) :ldur (quote (115)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (173)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9344)) :ldur (quote (173)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (173)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9344)) :ldur (quote (173)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (115)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9344)) :ldur (quote (321)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (321)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (107)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (180)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (180)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (120)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (120)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (120)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (120)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (60)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (205)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8994)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-7 4 1.0)) (1 (1.0)) (1 (3.0 -12 -1.0)) (1 (3 3 3 3 3 3 3 2 1)) (1 (2.0 2 2 2 2 2 2 2 2 2 2 -2)))) ((5 4) ((1 (-8 6)) (1 (6.0 3 4 3 3 2)) (1 (4 3 3 -8 -1.0)) (1 (-4 -1.0 3 2 2 2 3 2 2 1)) (1 (3.0 3 2 2 3 3 3 3 1)))) ((5 4) ((1 (3.0 16 4.0)) (1 (2.0 -8 -1.0)) (1 (4 2 3 3 3 3 3)) (1 (4 4 4 4 4 -1)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (500)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4988)) :ldur (quote (188)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (188)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (38)) :ldur (quote (188)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10200)) :ldur (quote (188)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11625)) :ldur (quote (188)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (188)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5488)) :ldur (quote (188)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (125)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9346)) :ldur (quote (62)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (125)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9346)) :ldur (quote (125)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (125)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9346)) :ldur (quote (125)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9346)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9346)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9346)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (643)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (214)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9246)) :ldur (quote (286)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (214)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9246)) :ldur (quote (214)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (143)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9246)) :ldur (quote (316)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (237)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9246)) :ldur (quote (237)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (205)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9071)) :ldur (quote (136)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (136)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9071)) :ldur (quote (136)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (205)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9071)) :ldur (quote (136)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (136)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9071)) :ldur (quote (68)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (196)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9071)) :ldur (quote (130)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (130)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9071)) :ldur (quote (196)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9071)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9071)) :ldur (quote (65)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (1043)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (286)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9321)) :ldur (quote (143)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (214)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9321)) :ldur (quote (214)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (214)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9321)) :ldur (quote (214)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9096)) :ldur (quote (214)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9321)) :ldur (quote (286)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9238)) :ldur (quote (286)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9750)) :ldur (quote (286)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11600)) :ldur (quote (286)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (286)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (15))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-1)) (1 (-1)) (1 (-16 -2.0 1)) (1 (2 3 3 3 3 2 2 2 2 2)) (1 (2.0 3 3 4 3 3 -4)))) ((5 4) ((1 (-8 -2.0 3 3)) (1 (3 2 2 2 2 2 2 2 4 4 1.0 2)) (1 (2.0 4 -8 -1.0)) (1 (3 3 3 2 4 2 2 3 1)) (1 (2.0 2 2 3 3 2 3 3 2 1)))) ((5 4) ((1 (2.0 4 3 3 3 3 2 2)) (1 (-3 3 4 2)) (1 (2.0 3 3 3 3 3 -4 -1.0)) (1 (-1)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (79)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (125)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (188)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (188)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (188)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (188)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3650)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (205)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (205)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188)) :ldur (quote (273)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1938)) :ldur (quote (205)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2400)) :ldur (quote (205)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (281)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (281)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (161)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (107)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (107)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (107)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (107)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (107)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (107)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8714)) :ldur (quote (107)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11888)) :ldur (quote (214)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10425)) :ldur (quote (214)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7638)) :ldur (quote (107)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11775)) :ldur (quote (400)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3162)) :ldur (quote (196)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4888)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10788)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (0)) :ldur (quote (130)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11762)) :ldur (quote (261)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2300)) :ldur (quote (130)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7475)) :ldur (quote (130)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8212)) :ldur (quote (196)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1650)) :ldur (quote (65)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (130)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (130)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2175)) :ldur (quote (196)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7862)) :ldur (quote (196)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5188)) :ldur (quote (130)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11112)) :ldur (quote (196)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (238)) :ldur (quote (196)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7675)) :ldur (quote (130)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6912)) :ldur (quote (65)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5838)) :ldur (quote (273)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7675)) :ldur (quote (205)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5938)) :ldur (quote (205)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11875)) :ldur (quote (205)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1725)) :ldur (quote (205)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10475)) :ldur (quote (136)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9625)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (375)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5738)) :ldur (quote (500)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7925)) :ldur (quote (250)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10275)) :ldur (quote (205)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6575)) :ldur (quote (205)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2275)) :ldur (quote (205)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8388)) :ldur (quote (205)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6712)) :ldur (quote (205)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-4 3 3 2 2 2 2 2 2 1)) (1 (3 2 2 4 3 4 1.0 4 1)))) ((5 4) ((1 (4.0 -12 -1.0)) (1 (-2 3 3 2 3 3 2 2 2 2 1)) (1 (4 3 4 4 1.0 4 1.0 -1)) (1 (-8 -2.0 2 2 2 1)) (1 (2.0 3 2 2 2 3 2 3 3 2 2)))) ((5 4) ((1 (3 2 2 2 2 2 2 2 2 2 2 2 1)) (1 (4 4 4 4 4 2)) (1 (2.0 4 -4 3)) (1 (4 1.0 4 4 3 3 2 2 2)) (1 (3 2 2 -6)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (196)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (196)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (130)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (130)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (130)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (130)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (130)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (65)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (188)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (125)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (125)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1062)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6912)) :ldur (quote (188)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7588)) :ldur (quote (250)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (250)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3388)) :ldur (quote (62)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (180)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8864)) :ldur (quote (180)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (120)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8864)) :ldur (quote (180)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (180)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8864)) :ldur (quote (120)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (120)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8864)) :ldur (quote (120)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (120)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8864)) :ldur (quote (60)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5225)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1512)) :ldur (quote (205)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7612)) :ldur (quote (273)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4138)) :ldur (quote (273)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (273)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (176)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (176)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (176)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (88)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (173)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (115)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (115)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (115)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (173)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (115)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (173)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (173)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (115)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (115)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (173)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (115)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (115)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8889)) :ldur (quote (115)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (115)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8764)) :ldur (quote (115)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (115)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8764)) :ldur (quote (115)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (115)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8764)) :ldur (quote (115)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (115)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8764)) :ldur (quote (115)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (58)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8764)) :ldur (quote (273)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (273)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8764)) :ldur (quote (273)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8764)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (136)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8764)) :ldur (quote (462)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (346)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7775)) :ldur (quote (240)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9938)) :ldur (quote (240)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7812)) :ldur (quote (240)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (180)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8939)) :ldur (quote (180)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (120)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8939)) :ldur (quote (120)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (120)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8939)) :ldur (quote (346)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8914)) :ldur (quote (231)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8939)) :ldur (quote (231)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-8 -1.0 1)) (1 (1.0)) (1 (7.0 -6)) (1 (-4 2 2 2 2 3 3 3 1)) (1 (2.0 3 3 16 4.0)))) ((5 4) ((1 (16 4.0 1)) (1 (3 2 2 2 2 2 4 2 3)) (1 (4 3 3 3 3 2 3 1)) (1 (4 3 3 -4)) (1 (-2 16 1)))) ((5 4) ((1 (16.0 4.0 3)) (1 (8.0 1.0 -4 -1.0)) (1 (-4 -1.0 2 2 3 3 2 2 2 2)) (1 (2 2 3 2 2 2 2 2 2 2 -2)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (150)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8646)) :ldur (quote (136)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (136)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8646)) :ldur (quote (136)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (205)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8646)) :ldur (quote (205)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (205)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8646)) :ldur (quote (68)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (161)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8646)) :ldur (quote (161)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (857)) :lvel (quote (45)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (1143)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8446)) :ldur (quote (71)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (205)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8446)) :ldur (quote (136)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (136)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8446)) :ldur (quote (136)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (136)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8446)) :ldur (quote (136)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8646)) :ldur (quote (136)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8646)) :ldur (quote (273)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8646)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (205)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8946)) :ldur (quote (205)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (136)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8946)) :ldur (quote (205)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (68)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8946)) :ldur (quote (429)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (321)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8946)) :ldur (quote (321)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (1263)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (79)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (196)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (130)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (196)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (130)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (130)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (130)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (130)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (130)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (130)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (196)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (130)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8696)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8746)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-6 7 1)) (1 (4.0 4 4 1.0 4 1.0 2 2)) (1 (2 2 2 3 2 2 2 2 -4)) (1 (-14 3 1)) (1 (3.0 4 3 3 3 6)))) ((5 4) ((1 (8.0 2.0 -1)) (1 (-3 8 2.0 3 3 2)) (1 (3 2 2 2 2 4 3 3 1)) (1 (3.0 -8 -2.0 3)) (1 (4 3 3 3 3 4 3)))) ((5 4) ((1 (4 3 3 4 4 4 1)) (1 (3.0 4 3 3 3 3 3 1)) (1 (2.0 3 -7 3 3 3 1)) (1 (2.0 3 3 7 7)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (750)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7738)) :ldur (quote (107)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (273)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1888)) :ldur (quote (273)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (200)) :ldur (quote (273)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (136)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8695)) :ldur (quote (136)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (143)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8695)) :ldur (quote (143)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (143)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8695)) :ldur (quote (214)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (143)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8695)) :ldur (quote (143)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (143)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8695)) :ldur (quote (143)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8025)) :ldur (quote (250)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3738)) :ldur (quote (83)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9038)) :ldur (quote (273)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8725)) :ldur (quote (205)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11488)) :ldur (quote (205)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2650)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (409)) :lvel (quote (45)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (571)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (214)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8520)) :ldur (quote (214)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (143)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8520)) :ldur (quote (205)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8520)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8520)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8788)) :ldur (quote (273)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3788)) :ldur (quote (205)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6875)) :ldur (quote (205)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9112)) :ldur (quote (68)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5525)) :ldur (quote (281)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8088)) :ldur (quote (261)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1062)) :ldur (quote (196)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11338)) :ldur (quote (196)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2012)) :ldur (quote (196)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4162)) :ldur (quote (196)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2788)) :ldur (quote (261)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5938)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10850)) :ldur (quote (261)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5488)) :ldur (quote (196)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10875)) :ldur (quote (196)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8738)) :ldur (quote (261)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (261)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3625)) :ldur (quote (261)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3325)) :ldur (quote (65)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3188)) :ldur (quote (261)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (196)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9075)) :ldur (quote (196)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (196)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7388)) :ldur (quote (196)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1262)) :ldur (quote (196)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (65)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (12000)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (205)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8670)) :ldur (quote (205)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8670)) :ldur (quote (68)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8670)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (477)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8470)) :ldur (quote (477)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-7 4)) (1 (6.0 2 2 3 3 3 4 1)) (1 (4.0 4 4 4 -4 -1.0)) (1 (-2 8 1.0)) (1 (2.0 2 2 3 2 2 2 2 2 2 2 3)))) ((5 4) ((1 (8.0 -3)) (1 (-3 3 3 3 3 2 2 2)) (1 (3 12 -4)) (1 (-7 2 4 1)) (1 (3.0 3 2 2 4 4 2 2 2)))) ((5 4) ((1 (4 3 3 16 4.0)) (1 (8.0 3.0 -4)) (1 (-6 4 3 3 3 3 1)) (1 (2.0 2 2 2 2 2 2 2 2 -7)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (545)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (125)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (188)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (188)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (188)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (250)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (62)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (286)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (286)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (286)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (1091)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (173)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (115)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (173)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (214)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (214)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (214)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (214)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218)) :ldur (quote (237)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (947)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (214)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8493)) :ldur (quote (429)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (107)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8493)) :ldur (quote (188)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (125)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8493)) :ldur (quote (125)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (250)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8493)) :ldur (quote (250)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (125)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8493)) :ldur (quote (125)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8493)) :ldur (quote (200)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (150)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8493)) :ldur (quote (150)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (800)) :lvel (quote (45)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (261)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8268)) :ldur (quote (196)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8268)) :ldur (quote (196)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (196)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8268)) :ldur (quote (65)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8268)) :ldur (quote (120)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (120)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8268)) :ldur (quote (120)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8268)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8468)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8268)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-6 7)) (1 (4.0 2 2 2 2 2 2 2 2 2 2 1)) (1 (3 2 2 -8 -1.0)) (1 (-4 3 2 2 3 3 3 1)) (1 (2.0 3 3 3 16 4.0)))) ((5 4) ((1 (4.0 -12 -1.0)) (1 (-1 16 1.0 8)) (1 (3.0 -14)) (1 (2 3 2 2 2 2 2 2 3 4 1)) (1 (3.0 2 2 2 2 2 1 1 1 2 2 2 2 1)))) ((5 4) ((1 (2.0 3 3 2 2 2 2 2 2 2 2 2 2)) (1 (2 2 3 2 2 1)) (1 (2 2 2 2 7 3 2 3 1)) (1 (3.0 3 3 -4 -1.0)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (808)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (120)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (120)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (120)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (60)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (281)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (214)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8513)) :ldur (quote (143)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (143)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8513)) :ldur (quote (214)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (214)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8513)) :ldur (quote (214)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (71)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8513)) :ldur (quote (145)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (145)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8513)) :ldur (quote (145)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (774)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (923)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (462)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8238)) :ldur (quote (180)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8238)) :ldur (quote (120)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8238)) :ldur (quote (120)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8238)) :ldur (quote (120)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (180)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8238)) :ldur (quote (240)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (60)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8238)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8238)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8238)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (60)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (60)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (60)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (120)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (120)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (60)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (161)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (161)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (107)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (107)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (107)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (107)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (107)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (107)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (107)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (107)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (107)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (107)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (250)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8063)) :ldur (quote (250)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (375)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8488)) :ldur (quote (250)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (250)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8488)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8488)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8488)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (438)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8138)) :ldur (quote (125)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (188)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8138)) :ldur (quote (62)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (321)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8138)) :ldur (quote (321)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (10))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-6 7)) (1 (1.0)) (1 (8.0 -4 -1.0)) (1 (-4 2 2 2 2 2 3 3 3 1)) (1 (2.0 2 3 3 3 3 3 3 3 1)))) ((5 4) ((1 (3.0 -12 -3.0)) (1 (1)) (1 (6.0 -8)) (1 (1)) (1 (8.0 16 4.0)))) ((5 4) ((1 (8.0 1.0 -4 -1.0)) (1 (-7 2 2 2 2 3 3 2)) (1 (3 2 2 3 3 3 3 -4 -1.0)) (1 (-1)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (808)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (125)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (188)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (188)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (188)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (62)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (115)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (173)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (173)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (173)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (173)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (173)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (173)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (173)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (58)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (1500)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (1500)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (857)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (130)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (130)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (130)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (130)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (196)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (196)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (130)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (188)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (125)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8286)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8261)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-6 2 3 3 3 2 2 1)) (1 (2 2 2 2 2 2 2 3 2 3)) (1 (3 3 4 4 4 -4)) (1 (-8 -2.0 2 3 1)) (1 (3.0 2 2 3 3 3 3 2 3 1)))) ((5 4) ((1 (2.0 2 2 -8 -3.0)) (1 (3 3 3 3 3 3 3 2)) (1 (4 1.0 4 3 4 4 -3)) (1 (-8 -1.0 3 3 1)) (1 (2.0 3 3 3 3 3 3 2)))) ((5 4) ((1 (3 2 3 3 4 3 3 2)) (1 (6 3 4 4 -4)) (1 (-7 4 3 3 3 1)) (1 (2.0 3 7 -6 2)) (1 (4.0 1.0 3 2 2 2 2 2 -2)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7569)) :ldur (quote (205)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (205)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7569)) :ldur (quote (205)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (136)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7569)) :ldur (quote (136)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (68)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7569)) :ldur (quote (136)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7569)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7569)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7569)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1900)) :ldur (quote (205)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9162)) :ldur (quote (136)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4225)) :ldur (quote (205)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3450)) :ldur (quote (205)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6562)) :ldur (quote (205)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7112)) :ldur (quote (273)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5912)) :ldur (quote (273)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10975)) :ldur (quote (273)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (12000)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5862)) :ldur (quote (281)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1388)) :ldur (quote (94)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6475)) :ldur (quote (120)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11088)) :ldur (quote (120)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5075)) :ldur (quote (180)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4862)) :ldur (quote (180)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1462)) :ldur (quote (180)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9825)) :ldur (quote (180)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5262)) :ldur (quote (120)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3938)) :ldur (quote (180)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10512)) :ldur (quote (60)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (176)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2362)) :ldur (quote (176)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (196)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (196)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8850)) :ldur (quote (196)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (438)) :ldur (quote (196)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7688)) :ldur (quote (196)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2962)) :ldur (quote (130)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3450)) :ldur (quote (261)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (261)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10612)) :ldur (quote (196)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (388)) :ldur (quote (261)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8162)) :ldur (quote (261)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9088)) :ldur (quote (281)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6038)) :ldur (quote (281)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2862)) :ldur (quote (94)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6375)) :ldur (quote (205)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4738)) :ldur (quote (205)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5288)) :ldur (quote (205)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7925)) :ldur (quote (205)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6688)) :ldur (quote (205)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (562)) :ldur (quote (205)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8862)) :ldur (quote (136)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7125)) :ldur (quote (196)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7612)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9650)) :ldur (quote (196)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (261)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10688)) :ldur (quote (196)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6562)) :ldur (quote (196)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2138)) :ldur (quote (130)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (429)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (214)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1100)) :ldur (quote (286)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9650)) :ldur (quote (286)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (286)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8019)) :ldur (quote (214)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (214)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8019)) :ldur (quote (214)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (71)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8019)) :ldur (quote (225)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5438)) :ldur (quote (525)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4438)) :ldur (quote (150)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (150)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (150)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (150)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (150)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794)) :ldur (quote (150)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-7 4)) (1 (8.0 1.0 4 4 3 2)) (1 (2.0 4 4 4 -7)) (1 (-3 3 3 3 1)) (1 (2.0 2 3 2 2 2 2 4 3 1)))) ((5 4) ((1 (2.0 4 4 4 -7)) (1 (-4 8 2.0 2 2 2 1)) (1 (2.0 3 3 3 3 8 1.0)) (1 (16 4.0 1)) (1 (2.0 3 2 2 3 3 3 3 2 1)))) ((5 4) ((1 (3 2 2 2 2 3 4 3 2)) (1 (2.0 2 3 3 2 3 4 3 2)) (1 (1)) (1 (4.0 8 2.0 -4 -1.0)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (545)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6538)) :ldur (quote (273)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9362)) :ldur (quote (273)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (205)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4650)) :ldur (quote (136)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10012)) :ldur (quote (286)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3125)) :ldur (quote (286)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10875)) :ldur (quote (286)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (346)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (346)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (346)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (115)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (130)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (196)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8012)) :ldur (quote (261)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (196)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3225)) :ldur (quote (65)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (138)) :ldur (quote (286)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (286)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (538)) :ldur (quote (286)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (571)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (143)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (143)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (143)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (71)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (196)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (196)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (196)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (196)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (522)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (1143)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6588)) :ldur (quote (71)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (188)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6588)) :ldur (quote (125)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (125)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6588)) :ldur (quote (188)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (188)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6588)) :ldur (quote (188)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (188)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6588)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (62)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6588)) :ldur (quote (196)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6588)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6588)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (196)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5588)) :ldur (quote (261)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6688)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8438)) :ldur (quote (125)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (188)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3675)) :ldur (quote (188)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3888)) :ldur (quote (125)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11950)) :ldur (quote (188)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5338)) :ldur (quote (250)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6488)) :ldur (quote (188)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11150)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (1500)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6338)) :ldur (quote (632)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-4 -1.0 2 2 2 2 2 2 4 1)) (1 (4.0 4 4 4 4 2)) (1 (2.0 3 4 3 4 3 3 -1)) (1 (-16 -1.0 2)) (1 (4 3 2 2 2 2 2 4 2)))) ((5 4) ((1 (2.0 3 3 4 4 3 3)) (1 (-8 3 2 2)) (1 (2 3 3 2 2 2 2 2 2 2 1)) (1 (2.0 2 2 -8 -1.0 1)) (1 (3.0 4 3 2 2 2 2 2 2 2)))) ((5 4) ((1 (2 1 2 2 2 1 1 1 1 1 3 4 2)) (1 (2.0 4 4 4 4 4 1)) (1 (3.0 -1 3 3 2)) (1 (3 2 2 2 2 2 2 4 4 2)) (1 (3.0 4 1.0 -4 -1.0)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (136)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (136)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (136)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (68)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (273)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (273)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (136)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7575)) :ldur (quote (196)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8162)) :ldur (quote (261)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2350)) :ldur (quote (196)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8662)) :ldur (quote (261)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (196)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9050)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (158)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6557)) :ldur (quote (261)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6557)) :ldur (quote (130)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6557)) :ldur (quote (130)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6557)) :ldur (quote (130)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3538)) :ldur (quote (261)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5138)) :ldur (quote (130)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150)) :ldur (quote (205)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (200)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5188)) :ldur (quote (273)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3462)) :ldur (quote (273)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (205)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (205)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (300)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (200)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (200)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (130)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (196)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (196)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (130)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (130)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (130)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (65)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (188)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (94)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (250)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (125)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (125)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (125)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (125)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (65)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (130)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (65)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (65)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (65)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (65)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (65)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (788)) :ldur (quote (196)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11612)) :ldur (quote (261)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4325)) :ldur (quote (130)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (261)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3188)) :ldur (quote (261)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3875)) :ldur (quote (261)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2450)) :ldur (quote (261)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5112)) :ldur (quote (261)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (65)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (375)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6082)) :ldur (quote (375)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (250)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6082)) :ldur (quote (180)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (120)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6082)) :ldur (quote (120)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (120)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6082)) :ldur (quote (120)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (120)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6082)) :ldur (quote (120)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2050)) :ldur (quote (240)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5525)) :ldur (quote (240)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (120)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1712)) :ldur (quote (462)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (13))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-8 3 3 3 3 1)) (1 (2.0 2 2 2 2 2 2 2 3 3 4 2)) (1 (4 3 3 -1)) (1 (-8 -1.0 2 2 3 2 3 1)) (1 (2.0 2 2 3 3 3 3 3 2 1)))) ((5 4) ((1 (1)) (1 (2.0 2 2 3 3 3 3 3 3)) (1 (4 3 3 3 -7)) (1 (-6 4 3 2 2 2 2 2)) (1 (3 3 3 3 3 3 3 2)))) ((5 4) ((1 (3.0 4 4 4 4 2 1 2)) (1 (3 4 3 2 3 2 1 1 1 1 1 -1)) (1 (-6 2 2 3 2 2 2 2 2 1)) (1 (2.0 2 3 3 3 3 4 2)) (1 (2.0 4 4 4 4 -4)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (214)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (214)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (214)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (214)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (71)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (107)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (107)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (107)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (107)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (107)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (107)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (107)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9788)) :ldur (quote (161)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6112)) :ldur (quote (161)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (214)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (107)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11075)) :ldur (quote (545)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3538)) :ldur (quote (409)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1825)) :ldur (quote (409)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8088)) :ldur (quote (136)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1712)) :ldur (quote (136)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (205)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8288)) :ldur (quote (136)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4762)) :ldur (quote (205)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (68)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5538)) :ldur (quote (125)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5512)) :ldur (quote (125)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (725)) :ldur (quote (188)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9125)) :ldur (quote (188)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5038)) :ldur (quote (188)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (188)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4788)) :ldur (quote (188)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7838)) :ldur (quote (125)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (62)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (1500)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6307)) :ldur (quote (125)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6307)) :ldur (quote (188)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6307)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6307)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3425)) :ldur (quote (188)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9388)) :ldur (quote (300)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8975)) :ldur (quote (225)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (225)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8625)) :ldur (quote (225)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (261)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (196)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (130)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (130)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (196)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7788)) :ldur (quote (196)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4662)) :ldur (quote (196)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (130)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11000)) :ldur (quote (250)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3688)) :ldur (quote (250)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8275)) :ldur (quote (250)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2662)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532)) :ldur (quote (62)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532)) :ldur (quote (196)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (261)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532)) :ldur (quote (196)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532)) :ldur (quote (196)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532)) :ldur (quote (65)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (65)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532)) :ldur (quote (65)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (65)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532)) :ldur (quote (65)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (125)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6107)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (62)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (136)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (205)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-1 8 2.0)) (1 (1.0)) (1 (8.0 -3)) (1 (3 4 1.0 2 1)) (1 (2.0 2 2 3 3 3 3 3 3)))) ((5 4) ((1 (3 3 3 3 2 3 3 3 1)) (1 (2.0 3 -8 -3.0)) (1 (-4 -1.0 3 2 2 2 2 2 2 1)) (1 (4 1.0 3 2 2 2 2 2 3 2)) (1 (3 2 2 2 2)))) ((5 4) ((1 (-4 -1.0 2 2 2 2 2 2 3 2)) (1 (2.0 4 4 3 2 2 2 2 1)) (1 (1)) (1 (1.0 -8 -1.0)) (1 (-2 12 3.0)))) ((5 4) ((1 (6.0 -7)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (1091)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (409)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (545)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (136)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6582)) :ldur (quote (125)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (188)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (188)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (188)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6132)) :ldur (quote (188)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (188)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (125)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (62)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6282)) :ldur (quote (281)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (214)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6357)) :ldur (quote (143)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (143)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6357)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6357)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (143)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6357)) :ldur (quote (71)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (261)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (196)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (130)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6482)) :ldur (quote (130)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (196)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (130)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (409)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6382)) :ldur (quote (136)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6382)) :ldur (quote (136)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6382)) :ldur (quote (136)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (205)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6382)) :ldur (quote (136)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (273)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6382)) :ldur (quote (273)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (205)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6382)) :ldur (quote (136)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6382)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (136)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6382)) :ldur (quote (68)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (1500)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6332)) :ldur (quote (1059)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-4 -1.0 8)) (1 (16.0 -2)))) ((5 4) ((1 (-7 2 2 2 2)) (1 (4 2 2 2 2 2 7)) (1 (7.0 -6)) (1 (-1 16 1.0)) (1 (8.0 16 4.0)))) ((5 4) ((1 (8.0 1.0 -4 -1.0)) (1 (-4 3 4 3 2 3 3)) (1 (2 3 3 3 3 3 -4 -1.0)) (1 (-1)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (923)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (200)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (200)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (200)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (200)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (286)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (143)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (500)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (1333)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (857)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (205)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6526)) :ldur (quote (273)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (205)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6526)) :ldur (quote (136)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (205)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6526)) :ldur (quote (205)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (136)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6526)) :ldur (quote (205)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (205)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6526)) :ldur (quote (205)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6326)) :ldur (quote (205)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6526)) :ldur (quote (205)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-4 -1.0 8 2 1)) (1 (3 2 2 3 3 3 3 3 1)) (1 (3.0 3 3 3 2 2 2 2 2 2 -1)) (1 (-7 7)) (1 (1.0)))) ((5 4) ((1 (4.0 -12 -1.0)) (1 (16 2.0 6)) (1 (8.0 1.0 -2)) (1 (-4 -1.0 8)) (1 (16.0 4.0 8)))) ((5 4) ((1 (1.0)) (1 (2 3 2 3 2)) (1 (3 3 3 3 3 3 3 -2)) (1 (-1)) (1 (-1)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (750)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (188)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5568)) :ldur (quote (94)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (196)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5568)) :ldur (quote (130)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (130)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5568)) :ldur (quote (196)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5568)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5568)) :ldur (quote (196)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (65)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (180)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (180)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (180)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (120)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (120)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (750)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (1000)) :lvel (quote (47)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (375)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (923)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (429)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (250)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (375)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (250)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (375)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (250)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (196)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (196)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (196)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5818)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6018)) :ldur (quote (196)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (14))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-1 8 2.0)) (1 (8.0 4 2 3 3 3)) (1 (4 3 -6)) (1 (-6 2 3 2 3 2 3)) (1 (3 3 3 3 6 3 3)))) ((5 4) ((1 (4 1.0 4 -3)) (1 (-2 4 1.0 3 2 2 4 3 1)) (1 (4.0 2 1 3 4 4 -4)) (1 (-8 -2.0 3 2)) (1 (4 3 4 3 3 3 2)))) ((5 4) ((1 (3 3 2 2 2 2 1 2 2 2 2 2 3)) (1 (8.0 1.0 -4 -1.0)) (1 (-7 3 3 3 3 3 2)) (1 (8 -6 6)) (1 (2.0 7 -2)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (1091)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8838)) :ldur (quote (261)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3338)) :ldur (quote (130)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9025)) :ldur (quote (196)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6388)) :ldur (quote (196)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (225)) :ldur (quote (196)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (462)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9162)) :ldur (quote (346)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (143)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5866)) :ldur (quote (214)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (143)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5866)) :ldur (quote (214)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (143)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5866)) :ldur (quote (214)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (188)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5866)) :ldur (quote (188)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (188)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5866)) :ldur (quote (188)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (0)) :ldur (quote (375)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2375)) :ldur (quote (188)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5025)) :ldur (quote (188)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4625)) :ldur (quote (500)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4762)) :ldur (quote (273)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (812)) :ldur (quote (205)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10775)) :ldur (quote (136)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7238)) :ldur (quote (136)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2650)) :ldur (quote (273)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8462)) :ldur (quote (205)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (68)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5638)) :ldur (quote (136)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8338)) :ldur (quote (68)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8962)) :ldur (quote (205)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (0)) :ldur (quote (273)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5625)) :ldur (quote (273)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7525)) :ldur (quote (300)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (400)) :ldur (quote (200)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7262)) :ldur (quote (273)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10750)) :ldur (quote (205)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10512)) :ldur (quote (273)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4612)) :ldur (quote (205)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (205)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (205)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (136)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (161)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (161)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (107)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (107)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (107)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (107)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (54)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (107)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (107)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (107)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (107)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (107)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (161)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (188)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5666)) :ldur (quote (188)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (188)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5666)) :ldur (quote (188)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (188)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5666)) :ldur (quote (125)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8325)) :ldur (quote (600)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4712)) :ldur (quote (450)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (955)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (12))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((5 4) ((1 (-8 3)) (1 (1.0)) (1 (3.0 -12 -1.0)) (1 (-1 3 3 3 3 3 3 3 1)) (1 (2.0 16 4.0 3 4 2)))) ((5 4) ((1 (2.0 4 4 4 -6)) (1 (-6 6)) (1 (8 1.0 -4 -1.0)) (1 (-4 2 2 2 2 2)) (1 (4 3 3 2 2 2 2 3 2 3 1)))) ((5 4) ((1 (2.0 3 3 16 4.0)) (1 (8.0 -6)) (1 (-3 2 3 3 3 3 3 1)) (1 (2.0 2 2 2 2 2 2 2 4 1.0)) (1 (3.0 -14)))) ((5 4) ((1 (-1)) (1 (-1)) (1 (-1)) (1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (409)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (196)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5841)) :ldur (quote (196)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (196)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5841)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5841)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (196)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5841)) :ldur (quote (65)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (774)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (145)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (194)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (97)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (300)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (300)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (300)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (750)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (857)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (214)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (214)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (214)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (214)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (214)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (222)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (167)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (167)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (111)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (111)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (111)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (111)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (167)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (111)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (167)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (56)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (161)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (161)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (857)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (214)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (214)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (214)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (214)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5566)) :ldur (quote (214)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (71)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5841)) :ldur (quote (143)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (143)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5841)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5841)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5841)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816)) :ldur (quote (286)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (17))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 40) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 382 23) (om-make-point 847 720) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 16 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 294 521) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 238 510) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 201 501) (om-make-point 24 30) 13 "13" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 63 506) (om-make-point 24 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 140 504) (om-make-point 48 30) (list (list 5 4)) "((5 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MULTISEQ-TO-POLY-LEGATO-TIE" (quote r-multiseq-to-poly-legato-tie) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "tempo" "TEMPO" 0) (om-load-inputfun (quote input-funbox) "time-signature-list" "TIME-SIGNATURE-LIST" (list 0)) (om-load-inputfun (quote input-funbox) "multiplication-factor " "MULTIPLICATION-FACTOR" 0) (om-load-inputfun (quote input-funbox) "ms-rest-treshold" "MS-REST-TRESHOLD" 0) (om-load-inputfun (quote input-funbox) "ms-tie-treshold" "MS-TIE-TRESHOLD" 0))) (om-make-point 57 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 502 351) (quote "'r-gestures-chordseq' provides some possibilities to compose with $musical gestures in a single part. On a multi-seq level, this becomes a tool$for orchestral textures.$$'r-gesture-scripts' creates a number of vertical events, with attack$and decay shapes, and various probabilities for their internal horisontal$events. See the object documentation for more info. This example provides only a minimum of output information, meaning the result will be randomzied to a higher degree within these overall limits. By expanding the lists, $matching  number of chord-seqs from the input, it is possible to much more specificly define the role of each instrument.$$This high level control of the gesture patches require that each gesture patch $is well tested with many kinds of inputs, with tests to avoid nil, division by 0, $error or lists levels etc. This way interruptions of the whole process can be avoided. $$These textures are syncronized in the sense of a progression of vertical blocks,$while on a micro level, parts have individual attack and decay points. It would be possible to set attacks and decays to 0 for full syncronization. $Syncronizations will depend heavily on how precisely the gesture patches respect their duration.") "" (om-make-point 615 281) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sine-waves" (om-load-patch-abs1 "sine-waves" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 52 312) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 261 229) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GLISS-ADDITIVE-SINE-BPFS" (quote r-gliss-additive-sine-bpfs) (quote ((om-load-inputfun (quote input-funbox) "" "Y-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-FREQS-LISTS" nil) (om-load-inputfun (quote input-funbox) "" "FREQ-BPFS-1000X1000" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-FREQS-PR-BPF" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-AMP" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-PHASE" nil) (om-load-inputfun (quote input-funbox) "" "NUMBER-OF-BPFS" nil))) (om-make-point 72 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 50 103) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 56 50) (om-make-point 125 30) (list (list 1 10) (list 2 6) (list 4 14)) "((1 10) (2 6) (4 14))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 227 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 204 64) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 282 51) (om-make-point 55 30) (list 3 15) "(3 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 332 90) (om-make-point 23 29) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 156 172) (om-make-point 52 30) (list 0 360) "(0 360)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 145 134) (om-make-point 70 30) (list 0.0 1.0) "(0.0 1.0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 139 91) (om-make-point 45 30) (list 4 15) "(4 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (4 0 2 1 nil 0) (5 0 2 2 nil 0) (11 0 2 3 nil 0) (10 0 2 4 nil 0) (9 0 2 5 nil 0) (1 0 2 6 nil 0) (6 0 5 0 nil 0) (7 0 5 1 nil 0) (8 0 5 2 nil 0))) 6.13 nil "" (om-make-point 200 200) (om-make-point 457 437)) (quote nil) (om-make-point 9371/11 415/11) nil (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (552.80616 541.6372 530.5013 519.46344 508.58798 497.9383 487.57614 477.5614 467.9519 458.80286 450.16678 442.09274 434.62662 427.81033 421.68204 416.2755 411.62006 407.7405 404.65674 402.38385 400.9319 400.30557 400.5049 401.52435 403.35342 405.97647 409.37274 413.5167 418.3779 423.9214 430.10776 436.89316 444.23007 452.06702 460.3494 469.01944 478.01627 487.27698 496.7365 506.32816 515.98377 525.63477 535.21155 544.6451 553.86634 562.8071 571.40046 579.5812 587.28595 594.4541 601.02747 606.95136 612.1742 616.6488 620.33185 623.1844 625.17237 626.2666 626.4428 625.68256 623.9724 621.3048 617.67756 613.0946 607.5651 601.1042 593.73255 585.47644 576.3678 566.44336 555.7452 544.32026 532.2201 519.5003 506.22092 492.44537 478.24063 463.6758 448.82172 433.75235 418.5531 403.3112 388.11435 373.0508 358.20874 343.67557 329.53726 315.87875 302.78223 290.32788 278.5919 267.6474 257.56332 248.40425 240.22978 233.09426 227.04657 222.12917 218.37894 215.82585 214.4932 214.39731 215.5477 217.94641 221.58818 226.46077 232.54433 239.81172 248.22896 257.75446 268.34024 279.93155 292.46692 305.87878 320.09418 335.03406 350.6146 366.74777 383.34082 400.2979 417.5183 434.90054 452.34076 469.73294 486.97134 503.9493 520.5606 536.7004 552.26526 567.1547 581.27094 594.51996 606.8123 618.06354 628.1948 637.1336 644.814 651.178 656.175 659.763 661.90876 662.58844 661.78754 659.50147 655.73597 650.5066 643.8398 635.7722 626.35065 615.6324 603.685 590.5857 576.4215 561.29194 545.3286 528.7258 511.69223 494.3628 476.8696 459.33987 441.89688 424.65744 407.73254 391.22586 375.23416 359.8466 345.1443 331.20065 318.08096 305.8422 294.53308 284.19476 274.86047 266.55524 259.29736 253.09783 247.96065 243.88388 240.85916 238.8727 237.90557 237.93378 238.92913 240.85959 243.68964 247.38047 251.89098 257.17746 263.19458 269.89563 277.23257 285.15677 293.6191 302.57034 311.96173 321.74445 331.8707 342.29364 352.96707 363.8465 374.88904 386.05325 397.29913 408.58865 419.88568 431.15634 442.36853 453.49167 464.49826 475.36224 486.05963 496.56906 506.87042 516.9457 526.77936 536.358 545.6687 554.70124 563.4475 571.90027 580.0541 587.9051 595.45075 602.69 609.62287 616.2501 622.5745 628.5993 634.32856 639.76807 644.9274 649.829 654.50025 658.9468 663.1555 667.11237 670.80414 674.2178 677.3403 680.1589 682.6609 684.83436 686.66736 688.149 689.2687 690.0159 690.38166 690.3572 689.93476 689.10755 687.8705 686.21985 684.15284 681.6669 678.7608 675.4347 671.68976 667.5288 662.95655 657.97895 652.60346 646.8396 640.6985 634.193 627.33765 620.1491 612.6458 604.84784 596.77717 588.4572 579.91376 571.17426 562.2672 553.2233 544.0741 534.85285 525.5942 516.3338 507.10803 497.9537 488.90887 480.0115 471.29977 462.81207 454.58585 446.65814 439.06528 431.84213 425.02216 418.63696 412.7161 407.28668 402.37308 397.99673 394.1756 390.92374 388.2521 386.16715 384.67075 383.75998 383.4278 383.6621 384.44525 385.75476 387.56317 389.83786 392.5381 395.59885 398.91525 402.37552 405.90826 409.46426 412.9955 416.45615 419.8025 422.99362 425.99176 428.7619 431.27313 433.49808 435.4131 436.99924 438.2416 439.1294 439.65646 439.82123 439.6261 439.07816 438.1883 436.9717 435.44736 433.63785 431.56915 429.27042 426.77353 424.11285 421.32498 418.44827 415.52237 412.58804 409.6865 406.85928 404.14777 401.5923 399.23245 397.10654 395.25067 393.69867 392.48193 391.62903 391.16522 391.11206 391.48712 392.30426 393.57297 395.29825 397.4806 400.11548 403.19406 406.703 410.62372 414.93323 419.60403 424.6047 429.8992 435.44785 441.2074 447.1314 453.1706 459.27335 465.386 471.45325 477.419 483.2268 488.82034 494.1436 499.1421 503.7632 507.9568 511.67578 514.87635 517.5192 519.5696 521.0011 521.80927 522.0212 521.6776 520.8153 519.47034 517.68067 515.4857 512.92597 510.04236 506.87604 503.4676 499.85703 496.08313 492.18347 488.19345 484.1465 480.0739 476.00443 471.9644 467.97684 464.06213 460.23816 456.51975 452.91852 449.4437 446.1017 442.89618 439.82846 436.8977 434.10114 431.43375 428.88925 426.4601 424.13748 421.9117 419.7726 417.7099 415.7131 413.77197 411.87692 410.01926 408.1909 406.38516 404.5969 402.82214 401.0591 399.30774 397.5697 395.84888 394.15137 392.48535 390.86057 389.28934 387.78564 386.3658 385.04724 383.84897 382.79208 381.8987 381.19153 380.69415 380.43045 380.42477 380.7013 381.2836 382.1948 383.45657 385.08926 387.11163 389.5405 392.39017 395.67246 399.3963 403.56735 408.18802 413.2572 418.7712 424.7242 431.10355 437.88443 445.03412 452.51566 460.2887 468.30966 476.5315 484.90454 493.37698 501.895 510.40256 518.84296 527.1586 535.29157 543.1831 550.77564 558.01294 564.83967 571.20215 577.049 582.33167 587.0043 591.0247 594.3543 596.9586 598.8077 599.87574 600.1422 599.5917 598.2141 596.005 592.96515 589.10096 584.4246 578.9538 572.71125 565.7262 558.0322 549.66816 540.678 531.11084 521.0211 510.46713 499.5109 488.218 476.6567 464.89816 453.01596 441.08517 429.18155 417.38217 405.76468 394.40543 383.3803 372.76453 362.63126 353.0511 344.0918 335.818 328.2911 321.56836 315.70184 310.739 306.7227 303.68982 301.6713 300.69214 300.77136 301.92145 304.14853 307.45206 311.8247 317.2527 323.71542 331.18622 339.63208 349.0132 359.28366 370.39246 382.28345 394.8954 408.16196 422.01297 436.37482 451.16965 466.31702 481.73444 497.33707 513.03937 528.7542 544.39405 559.87214 575.10175 589.998 604.4784 618.46186 631.8701 644.62836 656.6657 667.91547 678.31507 687.80707 696.3393 703.86567 710.3458 715.74494 720.0345 723.1932 725.20545 726.0625 725.7627 724.3104 721.7166 717.9992 713.18177 707.2942 700.3722 692.4575 683.5972 673.84284 663.2505 651.881 639.7988 627.072 613.7713 599.9698 585.7431 571.1684 556.3233 541.28614 526.13477 510.94717 495.80072 480.77048 465.93002 451.35025 437.09958 423.24326 409.84253 396.9552 384.63458 372.92902 361.88303 351.53574 341.9206 333.0662 324.99533 317.7257 311.26965 305.63333 300.81766 296.81384 293.5901 291.10065 289.31046 288.19672 287.73645 287.90356 288.6698 290.00415 291.87378 294.24362 297.07718 300.33618 303.98236 307.97696 312.28082 316.85495 321.66122 326.66153 331.81946 337.09995 342.4695 347.89664 353.3519 358.80795 364.24017 369.62628 374.94672 380.1847 385.32632 390.36044 395.27838 400.0745 404.7458 409.29132 413.71252 418.01395 422.20114 426.2818 430.26508 434.16135 437.98212 441.7393 445.44605 449.11517 452.75913 456.3904 460.02042 463.65997 467.31918 471.00635 474.72812 478.48886 482.29132 486.13718 490.0244 493.94962 497.90704 501.88886 505.88455 509.88202 513.86695 517.823 521.732 525.57496 529.3314 532.9798 536.49817 539.8642 543.0555 546.0501 548.82685 551.3653 553.647 555.65516 557.3745 558.7933 559.9053 560.7175 561.2473 561.5125 561.5302 561.3173 560.8913 560.26954 559.4684 558.5055 557.39795 556.16156 554.8116 553.36347 551.83045 550.22614 548.56305 546.8524 545.105 543.32966 541.5353 539.73 537.92066 536.1129 534.3125 532.52405 530.7511 528.99677 527.2638 525.5542 523.86957 522.21094 520.57905 518.9743 517.39667 515.846 514.3221 512.82477 511.35297 509.90662 508.4847 507.08615 505.7099 504.3563 503.02435 501.71362 500.42303 499.15283 497.90262 496.6716 495.46017 494.26752 493.09412 491.93994 490.8053 489.69028 488.5952 487.52087 486.4667 485.43164 484.41605 483.4203 482.44443 481.48874 480.5541 479.6404 478.7488 477.87918 477.03192 476.2078 475.40686 474.62906 473.87518 473.14496 472.4386 471.7563 471.09842 470.46466 469.85693 469.27744 468.72815 468.21072 467.72696 467.27756 466.86374 466.486 466.1441 465.83823 465.56747 465.33035 465.12555 464.95044 464.80243 464.67786 464.57248 464.4821 464.40115 464.32388 464.24365 464.1529 464.0439 463.90906 463.73773 463.52023 463.2471 462.90704 462.48843 461.9799 461.36835 460.64236 459.78873 458.7938 457.64465 456.32785 454.83075 453.1398 451.2424 449.126 446.77957 444.1908 441.3492 438.24573 434.8711 431.21906 427.2822 423.05624 418.53803 413.72687 408.62317 403.2285 397.54837 391.5891 385.35956 378.87238 372.14102 365.18283 358.01654 350.665 343.15323 335.5084 327.762 319.94672 312.09872 304.25674 296.4621 288.7587 281.19168 273.8093 266.66193 259.80026 253.27797 247.14846 241.46726 236.28995 231.69268 227.74347 224.48578 221.95305 220.17299 219.16985 218.96228 219.56594 220.99196 223.24692 226.33408 230.25104 234.99288 240.55002 246.90947 254.05426 261.96387 270.61478 279.9803 290.03064 300.7334 312.05423 323.95615 336.39948 349.34473 362.74878 376.56967 390.7616 405.28027 420.08038 435.1155 450.3385 465.70557 481.16968 496.68707 512.2132 527.7033 543.1167 558.4083 573.544 588.4817 603.1858 617.6177 631.7485 645.54474 658.97687 672.0137 684.6349 696.81324 708.5278 719.75574 730.48395 740.6942 750.3731 759.50684 768.08857 776.10877 783.56196 790.4424 796.749 802.48066 807.63794 812.2222 816.23816 819.6911 822.5872 824.934 826.74085 828.0174 828.77497 829.02527 828.78095 828.0562 826.8646 825.2214 823.142 820.64155 817.7051 814.3195 810.4824 806.1935 801.45356 796.2626 790.6242 784.54206 778.0217 771.0674 763.6877 755.89075 747.68714 739.085 730.10016 720.7459 711.0366 700.9879 690.6208 679.9516 669.0039 657.7964 646.35395 634.7014 622.86536 610.87134 598.7501 586.52717 574.23536 561.9063 549.5712 537.26465 525.0164 512.86426 500.84116 488.98254 477.32065 465.89044 454.72852 443.86908 433.34256 423.18317 413.42435 404.09668 395.2274 386.84637 378.97845 371.65103 364.8833 358.69678 353.1099 348.1381 343.7923 340.0836 337.01807 334.60068 332.8289 331.70197 331.212 331.34943 332.09982 333.44733 335.3701 337.8432 340.84058 344.32944 348.27524 352.6428 357.38748 362.46906 367.84006 373.45267 379.25717 385.20108 391.2292 397.29092 403.3536)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (389.15637 380.4959 371.99927 363.6801 355.55173 347.62714 339.91852 332.43777 325.1963 318.2046 311.47263 305.01013 298.8255 292.92697 287.3216 282.01617 277.01624 272.32697 267.95258 263.89645 260.16107 256.7483 253.65895 250.8931 248.45023 246.32862 244.52562 243.0381 241.86212 240.99257 240.42369 240.14928 240.16179 240.4534 241.01509 241.83769 242.91104 244.22423 245.7658 247.52399 249.48607 251.63913 253.96945 256.46344 259.10648 261.88388 264.78082 267.7819 270.87173 274.03488 277.25543 280.51767 283.80615 287.1049 290.39847 293.67148 296.9088 300.0955 303.2169 306.25903 309.20822 312.0511 314.77487 317.3678 319.81815 322.11542 324.24942 326.21118 327.99225 329.58508 330.9833 332.18115 333.1741 333.95853 334.5318 334.89273 335.0407 334.97894 334.72385 334.31665 333.77206 333.10596 332.33472 331.47598 330.5473 329.56665 328.5532 327.52557 326.503 325.5047 324.5497 323.65704 322.84525 322.13287 321.5375 321.07608 320.76523 320.61996 320.65503 320.88312 321.31653 321.9658 322.8395 323.9456 325.2898 326.8758 328.70615 330.78095 333.09876 335.65598 338.44714 341.4644 344.6985 348.13785 351.76935 355.57755 359.54565 363.6555 367.88678 372.21826 376.6273 381.0903 385.5829 390.08032 394.55753 398.98886 403.3493 407.6144 411.76004 415.76352 419.60355 423.26035 426.71622 429.9557 432.9661 435.73755 438.2637 440.54086 442.56973 444.35516 445.9049 447.23218 448.3541 449.29218 450.0723 450.72488 451.2848 451.79086 452.2859 452.8168 453.43362 454.1897 455.1408 456.3482 457.89475 459.90433 462.48526 465.6615 469.44998 473.85953 478.8919 484.54132 490.79553 497.63535 505.03577 512.96607 521.39 530.26697 539.5523 549.19776 559.1523 569.3623 579.77247 590.32636 600.9669 611.6369 622.2796 632.8396 643.2624 653.4956 663.48945 673.1964 682.57227 691.5762 700.17096 708.32325 716.00385 723.1872 729.8526 735.9838 741.56855 746.59906 751.0721 754.9884 758.3533 761.17536 763.46747 765.2463 766.53156 767.3466 767.7176 767.6751 767.2508 766.4755 765.381 764.00074 762.3685 760.51874 758.4864 756.3062 754.01264 751.63935 749.2191 746.78357 744.3632 741.9866 739.68036 737.4692 735.37555 733.4195 731.61847 729.98755 728.5383 727.2798 726.2185 725.3576 724.6971 724.23414 723.9631 723.87476 723.95105 724.1496 724.40064 724.6421 724.8325 724.9288 724.8871 724.66297 724.21094 723.485 722.4405 721.03217 719.2156 716.94776 714.18665 710.8921 707.02625 702.5528 697.43854 691.6534 685.1687 677.9578 670.0004 661.2823 651.79346 641.52906 630.4887 618.677 606.10346 592.7827 578.73517 563.98584 548.5651 532.5091 515.8588 498.66034 480.96494 462.8285 444.3117 425.47946 406.40088 387.14896 367.79993 348.43265 329.12936 309.9742 291.05264 272.45157 254.25818 236.56035 219.44454 202.99614 187.2992 172.43521 158.48177 145.51398 133.60149 122.80949 113.19743 104.81825 97.71852 91.93711 87.50542 84.446045 82.77309 82.49162 83.597206 86.07569 89.90341 95.04634 101.46139 109.095665 117.88629 127.76098 138.63805 150.42725 163.02767 176.31534 190.1318 204.31595 218.74527 233.31665 247.92827 262.48096 276.87845 291.02747 304.8389 318.22766 331.11365 343.42148 355.08145 366.02957 376.20798 385.56488 394.05457 401.63864 408.2853 413.96893 418.67102 422.37976 425.09006 426.80374 427.52927 427.2814 426.08105 423.95535 420.93753 417.06653 412.3863 406.9463 400.80038 394.00726 386.62976 378.7344 370.3911 361.6729 352.65567 343.41708 334.0369 324.59653 315.1778 305.86334 296.73624 287.87894 279.37317 271.29974 263.73737 256.76297 250.45149 244.87453 240.10089 236.19553 233.21903 231.22852 230.27626 230.40903 231.66843 234.09082 237.70684 242.54085 248.61139 255.92996 264.5016 274.32504 285.392 297.6875 311.18942 325.86902 341.6907 358.61227 376.58447 395.55173 415.4522 436.2194 457.78793 480.09393 503.06418 526.6124 550.64466 575.06104 599.7571 624.62354 649.5475 674.4123 699.0986 723.4853 747.44996 770.86896 793.61866 815.5736 836.60627 856.59205 875.414 892.96216 909.1327 923.82764 936.9564 948.4357 958.1913 966.1567 972.27564 976.50184 978.7985 979.14 977.5115 973.909 968.3395 960.8214 951.38465 940.07007 926.9296 912.0257 895.43146 877.23017 857.51496 836.3878 813.9597 790.3496 765.68366 740.09485 713.7218 686.7085 659.203 631.35675 603.3234 575.2578 547.3153 519.6512 492.4191 465.7698 439.8503 414.8047 390.76993 367.87698 346.25024 326.00522 307.24893 290.0783 274.58057 260.83118 248.8942 238.82123 230.65207 224.41349 220.11878 217.76749 217.34642 218.82875 222.17404 227.32892 234.22289 242.7612 252.83225 264.32227 277.1154 291.08786 306.1085 322.03976 338.73798 356.05524 373.84042 391.94 410.19846 428.46048 446.57184 464.38028 481.7348 498.49088 514.50824 529.6523 543.7959 556.81995 568.61414 579.0767 588.11695 595.6556 601.62366 605.96405 608.6329 609.59827 608.8408 606.35474 602.1464 596.23536 588.65394 579.44696 568.6717 556.39637 542.7017 527.68494 511.4573 494.13608 475.8417 456.69977 436.84164 416.4031 395.52298 374.3431 353.00745 331.6594 310.4413 289.49432 268.9571 248.96526 229.64839 211.13127 193.53206 176.96176 161.52332 147.31111 134.41034 122.89613 112.833596 104.27701 97.26966 91.84402 88.02084 85.80949 85.208306 86.203995 88.77201 92.87747 98.4752 105.509545 113.91549 123.61896 134.53699 146.57973 159.6496 173.6428 188.45128 203.96144 220.05638 236.61647 253.51984 270.64395 287.86584 305.06357 322.1176 338.91058 355.3286 371.2623 386.60718 401.2648 415.14304 428.15695 440.2297 451.29312 461.28714 470.16107 477.87384 484.3942 489.70084 493.78262 496.63873 498.27786 498.71915 497.9916 496.13364 493.19263 489.22525 484.29657 478.47943 471.8539 464.50684 456.53137 448.02612 439.09338 429.83936 420.3743 410.81076 401.2616 391.84018 382.66025 373.83423 365.47247 357.6826 350.56824 344.22873 338.75873 334.247 330.77524 328.4184 327.24402 327.31097 328.66995 331.36267 335.42096 340.86975 347.72833 356.00583 365.6978 376.78793 389.24918 403.04428 418.1273 434.44196 451.9231 470.49777 490.08435 510.59323 531.9287 553.98865 576.6655 599.8475 623.4193 647.2614 671.2495 695.2565 719.15436 742.8148 766.10987 788.91254 811.09797 832.544 853.1323 872.74897 891.2853 908.63874 924.7131 939.41974 952.678 964.415 974.56696 983.07996 989.9093 995.0204 998.38874 1000.0 999.8509 997.948 994.3087 988.96045 981.9411 973.29767 963.08716 951.37555 938.2373 923.7555 908.02 891.1275 873.1816 854.29084 834.5688 814.1324 793.10206 771.60077 749.75257 727.6825 705.51435 683.37085 661.3737 639.6414 618.2885 597.42487 577.1555 557.57984 538.7906 520.8725 503.90317 487.95255 473.08105 459.34042 446.77255 435.41003 425.2763 416.3848 408.73825 402.32993 397.14423 393.1557 390.32895 388.62036 387.97812 388.34256 389.6465 391.81583 394.77048 398.42413 402.68634 407.45166 412.58524 417.95447 423.45056 428.97943 434.45383 439.7911 444.91327 449.7488 454.23254 458.3061 461.91776 465.02222 467.58148 469.56375 470.94394 471.70465 471.83392 471.32578 470.18042 468.404 466.00714 463.00592 459.42105 455.27713 450.60236 445.42847 439.79038 433.72452 427.27045 420.4696 413.36362 405.99567 398.40973 390.6494 382.75836 374.78046 366.7583 358.73334 350.74634 342.83618 335.04016 327.39395 319.93146 312.68445 305.6824 298.95236 292.51913 286.4058 280.63293 275.21793 270.17627 265.52136 261.26453 257.41473 253.97858 250.96051 248.36315 246.1884 244.4368 243.10535 242.18868 241.6804 241.57236 241.85558 242.51959 243.55327 244.94489 246.68199 248.75217 251.14208 253.83797 256.8264 260.09326 263.62497 267.4085 271.4305 275.69302 280.21652 285.01782 290.10565 295.4864 301.1637 307.13965 313.41666 319.9954 326.87488 334.05365 341.52902 349.29532 357.34674 365.6767 374.27417 383.12888 392.2283 401.55896 411.10483 420.8473 430.7679 440.84573 451.05817 461.3822 471.7904 482.2565 492.75317 503.2503 513.7167 524.1213 534.4337 544.6227 554.6535 564.4899 574.0966 583.4374 592.47675 601.1791 609.5102 617.436 624.9241 631.9431 638.4637 644.4587 649.9021 654.771 659.045 662.70624 665.74 668.13526 669.88306 670.9797 671.42426 671.22 670.3736 668.8957 666.8021 664.1123 660.8488 657.04 652.717 647.9159 642.6762 637.03974 631.05335 624.76777 618.2357 611.5126 604.65497 597.7239 590.78 583.8872 577.10834 570.50605 564.1444 558.086 552.4253 547.2405 542.57666 538.45936 534.9078 531.93647 529.5512 527.7544 526.5444 525.91114 525.8425 526.32087 527.3252 528.8286 530.8035 533.2162 536.0315 539.2126 542.7199 546.5095 550.54114 554.7684 559.1486 563.63514 568.1835 572.7486 577.28656 581.7537 586.108 590.309 594.3168 598.09467 601.60706 604.8211 607.7064 610.2337 612.378 614.1169 615.4292 616.29706 616.7066 616.6456 616.10517 615.07935 613.5635 611.5571 609.06214 606.08167 602.6242 598.6974 594.3119 589.4821 584.2227 578.54944 572.4828 566.03815 559.23835 552.10694 544.6692 536.94764 528.9692 520.7603 512.34894 503.761 495.02414 486.1652 477.2141 468.1953 459.13702 450.06577 441.0071 431.98685 423.03018 414.16037 405.39893 396.76834 388.29095 379.9124 371.60846 363.38132 355.24027 347.1933 339.24725 331.41064 323.69464 316.10944 308.66464 301.3716 294.24133 287.29004 280.52716 273.96878 267.62857 261.52393 255.66873 250.08155 244.7761 239.77379 235.09122 230.74532 226.75873 223.14769 219.93425 217.13414 214.76799 212.85585 211.4158 210.46492 210.02332 210.10604 210.73075 211.91117 213.66053 215.9932 218.91849 222.44638 226.58238 231.33353 236.70027 242.6857 249.28455 256.49387 264.3045 272.7072 281.68393 291.22238 301.299 311.89124 322.9675 334.50198 346.4579 358.7969 371.47705 384.4571 397.68475 411.11325 424.68298 438.34378 452.0332 465.69125 479.2522 492.65378 505.8314 518.716 531.241 543.3366 554.94025 565.9827 576.4023 586.1355 595.12446 603.3112 610.6423 617.9683)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (565.2911 565.7721 566.0433 566.1097 565.9776 565.6536 565.145 564.45997 563.6073 562.59626 561.43696 560.14014 558.71705 557.17957 555.5401 553.8117 552.0076 550.1419 548.2288 546.2829 544.3194 542.35334 540.4005 538.4766 536.5975 534.77894 533.0373 531.38825 529.8479 528.4319 527.1558 526.0349 525.0841 524.3182 523.7509 523.39594 523.26655 523.3745 523.7317 524.34894 525.2362 526.40235 527.8555 529.6026 531.6495 534.00104 536.66047 539.6303 542.91126 546.5029 550.4035 554.60956 559.1164 563.91767 569.0054 574.37037 580.0014 585.88617 592.01026 598.35804 604.91254 611.6541 618.56287 625.61664 632.79206 640.06434 647.4072 654.79285 662.19257 669.57624 676.9127 684.16987 691.3142 698.31226 705.1289 711.7288 718.0763 724.1327 729.8486 735.1565 740.0204 744.40467 748.27436 751.596 754.3367 756.4652 757.95136 758.7672 758.8861 758.2835 756.9374 754.8277 751.9371 748.25055 743.7562 738.44495 732.3107 725.35065 717.5653 708.9584 699.53846 689.3226 678.3394 666.60834 654.152 640.9958 627.1695 612.7055 597.63947 582.0106 565.86066 549.23475 532.1809 514.7494 496.9932 478.96796 460.73093 442.34094 423.8592 405.3475 386.87073 368.49234 350.27716 332.29053 314.59668 297.26086 280.34686 263.9174 248.03394 232.75627 218.14197 204.24692 191.12345 178.82163 167.38797 156.8656 147.2937 138.708 131.13924 124.61461 119.156 114.78126 111.50296 109.32941 108.2634 108.30307 109.44194 111.668495 114.966606 119.31547 124.69 131.06092 138.39482 146.65448 155.79965 165.79088 176.59609 188.1863 200.52944 213.59033 227.33017 241.70679 256.67465 272.1841 288.18298 304.6148 321.4202 338.5365 355.89853 373.438 391.08444 408.76486 426.40503 443.92896 461.25983 478.32047 495.03357 511.32245 527.1113 542.32575 556.8934 570.74476 583.81324 596.0355 607.35285 617.71125 627.06134 635.35944 642.56806 648.6559 653.59815 657.37745 659.98304 661.4122 661.6694 660.7668 658.72455 655.5704 651.33924 646.0761 639.8441 632.73774 624.86304 616.2989 607.12555 597.424 587.27576 576.7622 565.9637 554.9592 543.8266 532.6406 521.4736 510.39532 499.47168 488.76514 478.33398 468.23254 458.5114 449.2162 440.38834 432.0648 424.2775 417.05454 410.41928 404.39075 398.98386 394.20923 390.07352 386.5802 383.73438 381.5562 380.07852 379.31357 379.2468 379.86105 381.13586 383.04797 385.5723 388.68018 392.3424 396.52734 401.20172 406.33197 411.8818 417.81516 424.0953 430.6852 437.5469 444.64282 451.93543 459.388 466.96417 474.62738 482.34128 490.07065 497.78046 505.4373 513.0083 520.4616 527.7668 534.8947 541.8173 548.5079 554.9409 561.09284 566.94165 572.4664 577.6481 582.46936 586.9144 590.9696 594.62256 597.8629 600.6823 603.07416 605.03376 606.55854 607.6475 608.30207 608.5254 608.3226 607.7012 606.67005 605.24036 603.42566 601.24054 598.702 595.82886 592.64167 589.1625 585.4146 581.42365 577.2158 572.81855 568.2607 563.5716 558.7814 553.91944 549.01087 544.0653 539.0826 534.0796 529.09314 524.1599 519.31635 514.59766 510.03726 505.66376 501.4971 497.54993 493.83127 490.34747 487.10208 484.09546 481.32565 478.7886 476.47745 474.38287 472.49338 470.79578 469.2745 467.9132 466.6931 465.5948 464.5976 463.67993 462.81985 461.99472 461.18146 460.35733 459.49985 458.5868 457.59616 456.507 455.29898 453.95367 452.45288 450.78037 448.92114 446.8618 444.5906 442.09784 439.37555 436.41745 433.2192 429.7789 426.0961 422.17246 418.01218 413.62082 409.00595 404.17728 399.14597 393.92538 388.53043 382.9773 377.2836 371.4692 365.5546 359.56128 353.51227 347.4315 341.34345 335.2733 329.24655 323.28937 317.4284 311.69006 306.10086 300.68735 295.4757 290.49158 285.7601 281.30597 277.15317 273.32413 269.84097 266.72467 263.99454 261.6691 259.7655 258.29923 257.28268 256.72235 256.6188 256.97488 257.79877 259.09894 260.88263 263.15546 265.92163 269.18344 272.9416 277.19528 281.94165 287.1757 292.8909 299.08105 305.74805 312.90714 320.56937 328.72293 337.34216 346.398 355.8593 365.69244 375.86124 386.3268 397.0485 407.98334 419.0867 430.31216 441.6116 452.9355 464.2335 475.45425 486.5456 497.45514 508.13007 518.5178 528.5661 538.2232 547.43854 556.1626 564.3473 571.9462 578.91517 585.2121 590.79767 595.63544 599.69227 602.93787 605.3461 606.89466 607.5649 607.34266 606.21845 604.18744 601.2494 597.40876 592.67566 587.06464 580.5956 573.2937 565.1887 556.31635 546.7167 536.4347 525.5203 514.02845 502.01746 489.55063 476.69482 463.52112 450.10245 436.51605 422.8409 409.15833 395.5516 382.10632 368.91098 356.05347 343.61816 331.6859 320.3353 309.64258 299.6812 290.5217 282.23062 274.87027 268.49817 263.16724 258.92477 255.81255 253.86608 253.11428 253.57921 255.27625 258.2135 262.39148 267.8031 274.43366 282.26074 291.25418 301.37585 312.5801 324.8136 338.01556 352.11786 367.04532 382.7163 399.04318 415.93112 433.2811 450.98862 468.9443 487.03656 505.14572 523.1408 540.884 558.2449 575.1048 591.35206 606.87836 621.5809 635.36255 648.1318 659.8042 670.30286 679.55835 687.50995 694.10505 699.30036 703.06165 705.36384 706.19184 705.5401 703.4126 699.82306 694.7948 688.36 680.5601 671.4457 661.07544 649.5159 636.84174 623.13446 608.4822 592.97846 576.72254 559.8187 542.375 524.50226 506.31445 487.92746 469.45755 451.02222 432.73807 414.72012 397.08182 379.9337 363.38333 347.53464 332.4862 318.3308 305.156 293.0433 282.06662 272.29254 263.7801 256.58017 250.73526 246.27878 243.23558 241.62137 241.44283 242.6976 245.37429 249.45217 254.90207 261.68604 269.7579 279.0634 289.5406 301.12045 313.7266 327.2765 341.68234 356.85117 372.68445 389.08014 405.93317 423.13528 440.5768 458.14612 475.73065 493.21906 510.50043 527.4644 544.00324 560.012 575.3888 590.03614 603.861 616.7754 628.6972 639.54987 649.26325 657.77527 665.03034 670.9804 675.5859 678.8147 680.6433 681.05665 680.04755 677.6177 673.7841 668.5858 662.0753 654.30665 645.33564 635.2234 624.03675 611.849 598.7375 584.78394 570.07465 554.69977 538.75104 522.3222 505.5091 488.4083 471.11737 453.73434 436.35562 419.07526 401.98566 385.177 368.73578 352.7447 337.2833 322.42584 308.24176 294.79572 282.14655 270.3478 259.44666 249.48436 240.49555 232.50876 225.54689 219.6254 214.75351 210.93474 208.16629 206.4395 205.7401 206.04782 207.33728 209.57862 212.7369 216.77303 221.64453 227.30525 233.70581 240.79418 248.51598 256.8155 265.63553 274.91794 284.604 294.6353 304.95383 315.5013 326.22174 337.06055 347.96478 358.8834 369.76834 380.57443 391.2584 401.78095 412.10587 422.201 432.03784 441.5907 450.83768 459.7609 468.3459 476.58267 484.46475 491.9879 499.15186 505.95953 512.4171 518.53296 524.3175 529.7846 534.9494 539.8288 544.44086 548.8043 552.9393 556.8661 560.6055 564.17756 567.60236 570.8989 574.0866 577.18427 580.20405 583.1509 586.0248 588.82386 591.5447 594.1815 596.73175 599.19196 601.55085 603.78986 605.8886 607.8262 609.5813 611.1341 612.4643 613.55317 614.383 614.93836 615.2043 615.1689 614.8223 614.15625 613.16547 611.84754 610.20215 608.2322 605.943 603.3435 600.4445 597.2599 593.8072 590.1055 586.17695 582.0454 577.73786 573.2833 568.71235 564.0579 559.3538 554.63514 549.9386 545.3019 540.76185 536.357 532.1249 528.10315 524.3295 520.8404 517.671 514.85486 512.42457 510.4104 508.8408 507.74164 507.13596 507.04453 507.48474 508.4715 510.01578 512.1246 514.802 518.04816 521.8591 526.2269 531.1412 536.58594 542.54194 548.9871 555.8945 563.2329 570.9691 579.06537 587.48096 596.172 605.0927 614.1756 623.3373 632.5072 641.6261 650.63776 659.48737 668.1193 676.47754 684.50794 692.15644 699.3703 706.09864 712.29236 717.90424 722.8895 727.20594 730.8157 733.68244 735.77424 737.0635 737.52674 737.1446 735.9013 733.7874 730.7978 726.93146 722.1931 716.5925 710.14484 702.87037 694.7938 685.96827 676.46314 666.3453 655.67945 644.5301 632.96344 621.0441 608.83777 596.4094 583.82245 571.13807 558.4162 545.7137 533.08436 520.5804 508.2488 496.1343 484.277 472.71323 461.4759 450.59283 440.0874 429.98026 420.2872 411.01968 402.18506 393.78778 385.82562 378.29642 371.19397 364.50717 358.22394 352.32748 346.80093 341.62427 336.7757 332.23282 327.9721 323.96762 320.19562 316.63138 313.24924 310.0258 306.93753 303.96234 301.08054 298.28226 295.5659 292.9312 290.3763 287.9001 285.50363 283.1882 280.95636 278.81158 276.75922 274.80444 272.9512 271.20694 269.57806 268.0714 266.69327 265.45166 264.35184 263.4014 262.60852 261.97693 261.5133 261.22424 261.1134 261.1847 261.44406 261.89395 262.53668 263.37357 264.40637 265.63644 267.06186 268.6832 270.49915 272.50656 274.70428 277.08646 279.64954 282.39014 285.30212 288.3807 291.61832 295.0095 298.54675 302.2226 306.03003 309.9597 314.00473 318.157 322.40762 326.7471 331.16873 335.66275 340.2212 344.85168 349.5491 354.29898 359.08505 363.89148 368.70386 373.50525 378.2825 383.02045 387.7051 392.32318 396.8619 401.30914 405.65216 409.87967 413.9825 417.94843 421.7707 425.43863 428.94522 432.2832 435.44653 438.42874 441.26437 443.96347 446.5216 448.929 451.17966 453.26318 455.17432 456.9026 458.44278 459.78677 460.9269 461.85815 462.57245 463.06638 463.33203 463.36594 463.16556 462.72415 462.0406 461.11212 459.93805 458.51755 456.85016 454.93787 452.7836 450.38986 447.76083 444.90204 441.81928 438.52252 435.0189 431.3208 427.4368 423.38095 419.1683 414.815 410.33487 405.7475 401.0717 396.33078 391.5431 386.73282 381.92563 377.1448 372.41754 367.77032 363.23184 358.83014 354.59543 350.5579 346.7453 343.19095 339.92355 336.97607 334.3775 332.15802 330.3465 328.97217 328.06314 327.64563 327.74344 328.38217 329.58276 331.3658 333.7475 336.74457 340.37012 344.63284 349.54193 355.10004 361.30704 368.1633 375.66144 383.7915 392.53848 401.89 411.2469)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (749.43946 757.33716 765.00806 772.4409 779.6246 786.54804 793.20044 799.5709 805.6492 811.4249 816.88794 822.0284 826.8369 831.304 835.4207 839.1784 842.5686 845.58344 848.2152 850.45667 852.30097 853.7417 854.773 855.38935 855.5859 855.358 854.7017 853.61384 852.0917 850.13294 847.7361 844.90064 841.6259 837.9126 833.7621 829.1762 824.1577 818.7103 812.83814 806.5462 799.8409 792.7288 785.21766 777.3162 769.0337 760.3806 751.3683 742.009 732.3157 722.3027 711.9846 701.3776 690.49836 679.3647 667.995 656.4088 644.62635 632.6688 620.5581 608.3167 595.96796 583.5361 571.0457 558.52204 545.991 533.47876 521.01185 508.61728 496.32254 484.155 472.142 460.3114 448.69043 437.3067 426.18713 415.35834 404.8467 394.67392 384.8429 375.3281 366.15735 357.3581 348.95743 340.98172 333.45627 326.40588 319.854 313.82318 308.33432 303.407 299.05936 295.30765 292.16632 289.64767 287.7621 286.51758 285.91977 285.9717 286.6742 288.02496 290.0189 292.64838 295.9017 299.76193 304.20932 309.22153 314.77316 320.8362 327.37997 334.37143 341.77444 349.55078 357.65985 366.05875 374.70248 383.54385 392.53418 401.62296 410.75824 419.88693 428.95377 437.90393 446.68094 455.2285 463.49005 471.40857 478.92822 485.99295 492.54807 498.5398 503.91617 508.62698 512.62427 515.86255 518.2989 519.8941 520.6123 520.4213 519.2935 517.2057 514.1399 510.083 505.02744 498.97192 491.92114 483.88632 474.8852 464.94226 454.0896 442.3662 429.8181 416.49936 402.47107 387.80368 372.58673 356.9475 341.031 324.9527 308.82962 292.77896 276.91733 261.3603 246.22156 231.61125 217.63538 204.39627 191.99048 180.50885 170.03582 160.64833 152.41666 145.40274 139.6603 135.23459 132.16223 130.47135 130.18027 131.29874 133.82764 137.759 143.07564 149.75189 157.75392 167.03997 177.56018 189.25757 202.06806 215.92177 230.74219 246.44774 262.9522 280.1649 297.99197 316.3359 335.09805 354.17737 373.47195 392.87994 412.29984 431.6307 450.77045 469.6156 488.07043 506.0561 523.4976 540.3258 556.47657 571.89136 586.51746 600.30787 613.22187 625.2254 636.2897 646.3928 655.51935 663.6598 670.8105 676.9744 682.1606 686.38294 689.66144 692.0214 693.49384 694.11335 693.9196 692.9566 691.27204 688.91736 685.9466 682.4178 678.4005 673.9965 669.3333 664.5059 659.5686 654.5749 649.5775 644.6274 639.7738 635.06434 630.544 626.2544 622.2346 618.5204 615.1435 612.1321 609.51044 607.29804 605.5107 604.159 603.2471 602.7736 602.7336 603.11957 603.91987 605.1182 606.69404 608.6226 610.87507 613.41864 616.21735 619.2321 622.4204 625.7371 629.13544 632.5662 635.9792 639.3229 642.5457 645.5955 648.4206 650.9704 653.19556 655.0484 656.4834 657.4577 657.9319 657.87 657.2398 656.01325 654.1676 651.6844 648.5503 644.7578 640.3049 635.19507 629.4377 623.0479 616.04664 608.46045 600.32166 591.668 582.5421 572.9914 563.0679 552.82764 542.3303 531.63837 520.8176 509.9404 499.09345 488.3759 477.87683 467.66788 457.81708 448.38794 439.4387 431.01816 423.1591 415.87955 409.19217 403.10635 397.62613 392.7507 388.474 384.78497 381.668 379.1031 377.06665 375.531 374.46548 373.83688 373.60867 373.74274 374.1992 374.9369 375.91364 377.08688 378.41394 379.85233 381.3601 382.8962 384.4211 385.89667 387.2863 388.55585 389.67352 390.6096 391.33707 391.83215 392.07336 392.0429 391.72562 391.1093 390.18518 388.9474 387.393 385.52246 383.33905 380.84833 378.05887 374.98224 371.6315 368.0227 364.17392 360.10483 355.83694 351.39334 346.79822 342.07684 337.2557 332.36185 327.42294 322.46674 317.5211 312.61365 307.77225 303.0243 298.39587 293.91306 289.60104 285.4834 281.58298 277.92145 274.51883 271.3939 268.56406 266.04468 263.84973 261.9917 260.48117 259.32712 258.53687 258.11588 258.06918 258.40378 259.12933 260.25632 261.79337 263.74713 266.12235 268.92166 272.14545 275.79202 279.8575 284.33585 289.2186 294.49536 300.154 306.18433 312.57996 319.33167 326.42126 333.82437 341.515 349.46548 357.6465 366.02713 374.57562 383.2588 392.04266 400.8929 409.77423 418.6509 427.48764 436.24924 444.90006 453.4053 461.7312 469.84473 477.71417 485.30908 492.60083 499.5626 506.16928 512.3984 518.22944 523.6446 528.6291 533.1709 537.2606 540.8919 544.0621 546.7714 549.0233 550.8247 552.1856 553.11957 553.6434 553.77674 553.54206 552.96534 552.07514 550.90235 549.4808 547.84626 546.03614 544.08967 542.0479 539.9522 537.8454 535.7713 533.7727 531.89264 530.1735 528.6569 527.38324 526.3912 525.7171 525.39527 525.4578 525.9354 526.8538 528.2308 530.0781 532.4039 535.21137 538.4992 542.2613 546.48804 551.1651 556.274 561.7923 567.6935 573.9473 580.5204 587.3751 594.4722 601.7691 609.221 616.7808 624.40027 632.02955 639.6175 647.1131 654.46424 661.6197 668.5284 675.14 681.4056 687.2777 692.711 697.6623 702.0906 705.9576 709.22834 711.871 713.8571 715.16376 715.77576 715.6854 714.886 713.37 711.1324 708.1726 704.49427 700.1052 695.0181 689.2498 682.82105 675.75654 668.08594 659.8425 651.06336 641.7888 632.0627 621.9315 611.4453 600.65644 589.61884 578.38886 567.0242 555.5834 544.1261 532.7123 521.4023 510.255 499.3289 488.68192 478.36975 468.4464 458.96344 449.96997 441.51227 433.6327 426.3698 419.75955 413.83282 408.6165 404.133 400.39954 397.42844 395.2275 393.79996 393.14328 393.24982 394.10745 395.69934 398.0033 400.99234 404.63507 408.896 413.7357 419.11053 424.97314 431.27322 437.95798 444.9713 452.25497 459.74982 467.39456 475.1265 482.88263 490.6002 498.2166 505.6696 512.89844 519.8433 526.447 532.6548 538.4137 543.67457 548.39167 552.52247 556.02894 558.8773 561.03815 562.4872 563.2049 563.177 562.3942 560.85285 558.55445 555.50574 551.7193 547.2129 542.00934 536.13654 529.627 522.51856 514.85346 506.6777 498.04184 488.99976 479.6082 469.92703 460.0189 449.94843 439.79312 429.64954 419.61282 409.75922 400.1517 390.8487 381.90582 373.3762 365.31012 357.75403 350.75064 344.339 338.5535 333.42407 328.9764 325.23135 322.2047 319.90778 318.34753 317.52615 317.43988 318.0804 319.4346 321.4836 324.20438 327.56897 331.5449 336.09543 341.18018 346.75473 352.77097 359.17825 365.9233 372.95074 380.20255 387.61914 395.14063 402.706 410.25397 417.7247 425.0583 432.19565 439.08 445.656 451.87097 457.67578 463.02457 467.87457 472.18646 475.92685 479.0661 481.57877 483.44556 484.65173 485.1881 485.05145 484.24332 482.7709 480.6473 477.89136 474.52625 470.58084 466.08908 461.0896 455.6256 449.74454 443.497 436.93808 430.12582 423.12015 415.9833 408.77918 401.57333 394.4319 387.42096 380.60687 374.05444 367.82666 361.98535 356.59048 351.6983 347.36157 343.62958 340.54718 338.1551 336.4887 335.57773 335.44653 336.11414 337.59305 339.88928 343.00314 346.9288 351.65262 357.14862 363.3782 370.2957 377.85126 385.9901 394.65463 403.78653 413.32556 423.20725 433.36215 443.71866 454.20532 464.7507 475.28436 485.7369 496.0411 506.1313 515.9438 525.4186 534.49866 543.1305 551.2647 558.8553 565.8603 572.2425 577.9687 583.01014 587.3425 590.9466 593.80677 595.91346 597.26056 597.8462 597.67255 596.7463 595.07917 592.68537 589.5827 585.7935 581.3424 576.25794 570.5711 564.3158 557.52796 550.246 542.5099 534.36207 525.8463 517.00666 507.88928 498.5408 489.0085 479.34006 469.58252 459.7834 449.98993 440.24826 430.60236 421.09625 411.77267 402.67297 393.83792 385.30582 377.11365 369.29688 361.8879 354.918 348.41687 342.40982 336.9215 331.97363 327.58484 323.77148 320.54724 317.92322 315.8931 314.44144 313.56445 313.27084 313.5701 314.47037 315.9777 318.09677 320.82904 324.1747 328.1304 332.6923 337.8524 343.60168 349.9279 356.81754 364.25327 372.21668 380.68658 389.63965 399.0504 408.8918 419.13382 429.74478 440.69153 451.93805 463.44748 475.18262 487.102 499.16507 511.32928 523.53266 535.71564 547.8344 559.8521 571.73475 583.4466 594.95447 606.2257 617.2265 627.9255 638.2908 648.29145 657.8965 667.077 675.80335 684.0473 691.77997 698.9746 705.60517 711.64624 717.07227 721.8611 725.9899 729.4376 732.18525 734.21454 735.50855 736.0532 735.8364 734.8473 733.078 730.523 727.17926 723.04676 718.12885 712.4308 705.96204 698.73536 690.7668 682.0764 672.6876 662.62726 651.9266 640.6203 628.7473 616.34937 603.50324 590.2931 576.7949 563.07575 549.2015 535.2393 521.25354 507.30667 493.46198 479.7784 466.3133 453.12305 440.25925 427.77222 415.7084 404.11185 393.0211 382.47394 372.5038 363.13953 354.40735 346.33066 338.92886 332.216 326.20508 320.90485 316.32123 312.4544 309.30554 306.87054 305.14066 304.1088 303.76196 304.08716 305.06567 306.6803 308.9104 311.73416 315.1267 319.06253 323.5168 328.46158 333.86624 339.70425 345.94348 352.55637 359.5089 366.77252 374.31656 382.1086 390.11603 398.3118 406.66556 415.14667 423.74603 432.44992 441.23407 450.07507 458.94797 467.83115 476.7006 485.53613 494.31342 503.014 511.61786 520.10596 528.45795 536.6571 544.68555 552.5271 560.1639 567.58204 574.76624 581.701 588.37555 594.7749 600.8858 606.70844 612.22754 617.4217 622.2677 626.74244 630.82404 634.49115 637.72205 640.495 642.7915 644.5906 645.875 646.62665 646.82984 646.46845 645.529 643.9997 641.86927 639.1284 635.7694 631.7871 627.1776 621.938 616.06977 609.57496 602.4594 594.7285 586.39277 577.4631 567.95575 557.8865 547.2751 536.1422 524.5133 512.41517 499.87857 486.93143 473.61206 459.9552 446.00137 431.78793 417.36047 402.7629 388.0448 373.2489 358.4268 343.62802 328.9105 314.3173 299.90717 285.72998 271.8428 258.29388 245.13916 232.42633 220.21114 208.53614 197.45304 187.00487 177.23694 168.18727 159.89374 152.39081 145.71094 139.87886 134.92 130.85175 127.692856 125.45011 124.13022 123.7368 124.26349 125.703804 128.04471 131.26689 135.3485 139.43665)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (448.86655 446.4457 444.1426 441.96497 439.92026 438.01608 436.2597 434.6585 433.21954 431.94955 430.85544 429.94382 429.2209 428.69296 428.36572 428.24515 428.33637 428.64465 429.17468 429.93115 430.91803 432.13907 433.59802 435.29742 437.24027 439.42868 441.8642 444.54837 447.48154 450.6645 454.09653 457.77704 461.70447 465.87692 470.29175 474.94583 479.83536 484.95566 490.30176 495.8676 501.64694 507.63232 513.8158 520.18897 526.7422 533.4655 540.3481 547.37824 554.544 561.832 569.22895 576.7203 584.29096 591.9252 599.6067 607.31855 615.04297 622.76197 630.4566 638.10816 645.69684 653.2021 660.60395 667.8815 675.01374 681.9793 688.7569 695.325 701.66205 707.74646 713.5568 719.07196 724.27094 729.1329 733.63776 737.7656 741.4976 744.815 747.7005 750.1381 752.11115 753.6036 754.60077 755.0888 755.0555 754.4898 753.3819 751.72364 749.50824 746.73084 743.38794 739.47797 735.00104 729.9592 724.3563 718.19825 711.49305 704.2501 696.48145 688.2009 679.4242 670.17017 660.46 650.31574 639.76087 628.82056 617.52204 605.89386 593.9663 581.77167 569.34314 556.715 543.92304 531.00434 517.9969 504.93964 491.87173 478.83316 465.8646 453.0065 440.30035 427.78677 415.5061 403.49896 391.80432 380.46103 369.5076 358.98016 348.91467 339.34482 330.3032 321.8203 313.92462 306.6426 299.99872 294.014 288.70828 284.09753 280.19528 277.01257 274.5563 272.83127 271.83896 271.57712 272.04056 273.22076 275.10574 277.68042 280.92618 284.82166 289.34168 294.45844 300.14114 306.35675 313.07376 320.26828 327.913 335.96268 344.3702 353.086 362.0584 371.23453 380.5595 389.97797 399.43362 408.86957 418.22907 427.4556 436.493 445.28613 453.78098 461.9254 469.66876 476.96304 483.7627 490.02506 495.71057 500.78326 505.21094 508.9652 512.0222 514.3623 515.97046 516.83637 516.95496 516.32587 514.95386 512.8487 510.02548 506.5041 502.30954 497.47183 492.0255 486.00995 479.46857 472.44897 465.00293 457.18555 449.05518 440.6742 432.11545 423.469 414.82468 406.24564 397.79367 389.5269 381.501 373.7686 366.37817 359.37445 352.7988 346.68768 341.074 335.9855 331.44614 327.47504 324.0871 321.29263 319.098 317.50516 316.51215 316.11316 316.29892 317.05643 318.36932 320.21826 322.5817 325.4348 328.75092 332.50186 336.65915 341.1986 346.1016 351.34262 356.8888 362.7061 368.76126 375.02103 381.45194 388.0211 394.69672 401.44794 408.24554 415.06046 421.86612 428.63724 435.34967 441.98175 448.51324 454.92508 461.1979 467.311 473.2483 479.00153 484.56442 489.9332 495.1056 500.08157 504.8626 509.45203 513.855 518.078 522.1288 526.0167 529.752 533.3459 536.8103 540.1579 543.40204 546.5563 549.63446 552.6504 555.6176 558.5501 561.46076 564.36237 567.2671 570.1861 573.1299 576.10804 579.12897 582.20026 585.328 588.517 591.77094 595.0919 598.4809 601.9375 605.4596 609.04395 612.6855 616.3785 620.1151 623.88654 627.6829 631.49335 635.30524 639.10535 642.87885 646.608 650.26606 653.81977 657.2417 660.5145 663.6215 666.5457 669.27106 671.7826 674.0664 676.11036 677.9027 679.43305 680.69135 681.6687 682.3573 682.7501 682.84144 682.62635 682.10096 681.26264 680.10987 678.6419 676.8592 674.76337 672.35694 669.64356 666.6276 663.3151 659.7126 655.8274 651.668 647.24415 642.5659 637.6443 632.49115 627.11927 621.5421 615.77356 609.8285 603.7222 597.4705 591.08985 584.5969 578.009 571.3435 564.61817 557.851 551.06037 544.26435 537.4811 530.729 524.02625 517.3907 510.84006 504.39185 498.0629 491.8699 485.82907 479.95587 474.265 468.7705 463.48596 458.4237 453.59552 449.01166 444.68195 440.61508 436.81842 433.2981 430.05902 427.10516 424.4392 422.06223 419.97394 418.17294 416.65628 415.4197 414.45795 413.7641 413.3297 413.145 413.19916 413.48004 413.9748 414.66992 415.55182 416.60486 417.80994 419.14615 420.5918 422.12445 423.72037 425.35535 427.0047 428.6431 430.24512 431.78503 433.23706 434.57568 435.77548 436.81067 437.65485 438.28073 438.6613 438.77066 438.5843 438.07858 437.23123 436.02145 434.4302 432.44046 430.0373 427.20764 423.94058 420.22812 416.06473 411.44717 406.3751 400.85086 394.87967 388.46985 381.6326 374.38174 366.73438 358.7104 350.33282 341.62744 332.62268 323.34988 313.8428 304.13782 294.27377 284.29166 274.23462 264.14758 254.07733 244.07202 234.1811 224.455 214.94528 205.70395 196.78339 188.23581 180.11333 172.4677 165.34969 158.80902 152.89424 147.65254 143.12876 139.36577 136.40409 134.28147 133.03273 132.68956 133.2802 134.82938 137.35782 140.88231 145.41556 150.96596 157.53688 165.12743 173.73172 183.33904 193.934 205.49645 218.0017 231.42012 245.71759 260.8553 276.79 293.47418 310.85608 328.88 347.48666 366.61124 386.18826 406.14838 426.41885 446.92505 467.5901 488.33548 509.0808 529.74524 550.24714 570.50397 590.43384 609.95594 628.9895 647.4555 665.2769 682.3795 698.6907 714.1411 728.6656 742.20246 754.69416 766.0828 776.30347 785.29157 793.0031 799.4182 804.52894 808.3342 810.83985 812.05884 812.0105 810.7202 808.22016 804.5484 799.7481 793.8679 786.9614 779.0861 770.304 760.68067 750.2847 739.1877 727.46326 715.1869 702.4352 689.2857 675.8168 662.10627 648.23194 634.2706 620.2973 606.38544 592.6066 579.0296 565.7205 552.74244 540.1548 528.01337 516.3699 505.27176 494.76205 484.8795 475.65808 467.127 459.31064 452.22833 445.89404 440.31763 435.5039 431.45245 428.15848 425.6126 423.80087 422.70496 422.3025 422.5674 423.4697 424.97607 427.05017 429.65228 432.74002 436.26926 440.19366 444.4649 449.03305 453.84714 458.8555 464.00595 469.24603 474.5239 479.78796 484.98633 490.06882 494.9867 499.6926 504.14087 508.288 512.0924 515.51545 518.5206 521.0744 523.1467 524.7103 525.74097 526.2181 526.1242 525.4459 524.17304 522.299 519.8209 516.73957 513.0592 508.7874 503.93552 498.5182 492.55362 486.0628 479.06946 471.60135 463.68832 455.36252 446.65955 437.61932 428.28577 418.70496 408.92377 398.99002 388.9524 378.86008 368.76242 358.70847 348.74765 338.92816 329.29678 319.89978 310.78125 301.9843 293.5529 285.52948 277.9524 270.85574 264.27084 258.22617 252.74713 247.85659 243.57367 239.91408 236.89073 234.51293 232.78684 231.71575 231.29941 231.53415 232.41378 233.92864 236.0665 238.8122 242.1477 246.05266 250.5043 255.47794 260.9462 266.88034 273.24994 280.023 287.1659 294.64398 302.4223 310.46457 318.7341 327.19348 335.8061 344.53455 353.3418 362.1918 371.04877 379.8772 388.6429 397.31265 405.85446 414.23773 422.4336 430.41428 438.15378 445.62833 452.81543 459.69458 466.24716 472.45737 478.31113 483.7963 488.90237 493.62186 497.94904 501.88046 505.414 508.55066 511.29306 513.64557 515.6151 517.2098 518.4394 519.3162 519.8532 520.06556 519.96936 519.58265 518.9242 518.0135 516.8717 515.5207 513.983 512.2812 510.4425 508.5002 506.48654 504.42844 502.34958 500.2724 498.21848 496.20917 494.26267 492.39273 490.61145 488.93076 487.36298 485.91977 484.61197 483.45053 482.44525 481.6053 480.9395 480.45685 480.1655 480.07285 480.18616 480.5119 481.0557 481.8236 482.8205 484.05136 485.52014 487.23038 489.18533 491.38794 493.8401 496.54382 499.49982 502.70816 506.16867 509.88074 513.8428 518.05256 522.50715 527.2026 532.13446 537.2973 542.68464 548.2896 554.1042 560.11915 566.3242 572.70856 579.2599 585.9653 592.81037 599.7801 606.85724 614.0248 621.2639 628.5549 635.8788 643.2155 650.541 657.829 665.0519 672.18085 679.18616 686.0376 692.7038 699.15345 705.3543 711.2733 716.8778 722.1348 727.0115 731.4744 735.49115 739.03016 742.0596 744.5507 746.4786 747.8164 748.53827 748.61915 748.0358 746.7661 744.7902 742.09034 738.65125 734.46027 729.50745 723.7843 717.28626 710.012 701.9619 693.14106 683.5562 673.2194 662.1451 650.3506 637.85755 624.6904 610.87726 596.4495 581.4427 565.89515 549.84827 533.34607 516.437 499.1713 481.64 463.94147 446.15714 428.3573 410.60898 392.97723 375.52695 358.32095 341.42014 324.88232 308.7629 293.11536 277.98932 263.4322 249.48693 236.19348 223.5888 211.70606 200.57424 190.21923 180.66231 171.92279 164.01468 156.94875 150.7325 145.36977 140.8603 137.20143 134.38729 132.40859 131.25275 130.9045 131.34645 132.55825 134.51714 137.19768 140.57353 144.61573 149.29405 154.5761 160.42853 166.8169 173.70592 181.05841 188.83748 197.0055 205.52106 214.34365 223.43379 232.7549 242.26976 251.94298 261.73724 271.61728 281.54932 291.49954 301.43475 311.32397 321.1367 330.84338 340.41556 349.82617 359.05026 368.06384 376.84476 385.37225 393.62665 401.58987 409.24567 416.57953 423.57877 430.23163 436.52902 442.462 448.02374 453.21027 458.01694 462.44263 466.4866 470.14987 473.43417 476.34457 478.88513 481.0624 482.88303 484.35672 485.49368 486.3036 486.79858 486.99103 486.895 486.52463 485.8951 485.02118 483.9202 482.60788 481.10144 479.41843 477.57755 475.5957 473.50092 471.31406 469.0499 466.7227 464.3469 461.93552 459.5033 457.06363 454.62967 452.21475 449.83057 447.49112 445.20685 442.99008 440.8507 438.80017 436.84805 435.0037 433.2757 431.67212 430.19977 428.86505 427.6744 426.62317 425.7103 424.93802 424.31058 423.8277 423.4906 423.30045 423.2571 423.3596 423.60498 423.9912 424.51462 425.17255 425.96057 426.87302 427.90448 429.04923 430.30023 431.65082 433.09216 434.6181 436.21933 437.8881 439.61502 441.3905 443.2059 445.05246 446.91907 448.7964 450.67587 452.5461 454.399 456.22513 458.0156 459.76135 461.45276 463.08383 464.6429 466.12512 467.52264 468.82935 470.0372 471.1434 472.14038 473.02536 473.79483 474.44424 474.9711 475.3749 475.6545 475.80844 475.83908 475.74503 475.53125 475.19824 474.75027 474.19046 473.52713 472.76212 471.9047 470.96063 469.93784 468.84482 467.69122 466.48584 465.23953 463.96414 462.6688 461.36694 460.06992 458.78995 457.53912 456.3324 455.182 454.1015 453.1041 452.10712)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (365.66745 353.98367 342.36295 330.81363 319.3435 307.9608 296.67325 285.4888 274.41516 263.46033 252.63166 241.937 231.38368 220.97934 210.7313 200.64693 190.73354 180.99819 171.44812 162.09012 152.93138 143.97863 135.23854 126.718026 118.423485 110.3613 102.53801 94.959854 87.63279 80.56307 73.75616 67.21835 60.9547 54.97081 49.272007 43.863167 38.74932 33.935116 29.424954 25.222964 21.333289 17.759449 14.5050745 11.573147 8.966614 6.6880098 4.7394514 3.122927 1.8396869 0.89127064 0.2778707 0.0 0.057498236 0.45004472 1.1763889 2.234863 3.6240242 5.34105 7.38328 9.747057 12.428758 15.423637 18.726916 22.333142 26.236351 30.43026 34.90784 39.66166 44.683983 49.96625 55.4999 61.2758 67.28422 73.51529 79.95878 86.60417 93.44072 100.45785 107.64775 115.00768 122.52593 130.19156 137.99326 145.91948 153.9585 162.09909 170.32984 178.63938 187.01668 195.45076 203.93122 212.44748 220.99015 229.54936 238.11667 246.68364 255.24265 263.78656 272.3092 280.80508 289.26923 297.6973 306.08582 314.4351 322.74582 331.0197 339.25916 347.46707 355.64716 363.80356 371.94113 380.06503 388.18106 396.2952 404.414 412.54388 420.6919 428.86536 437.0713 445.31696 453.6089 461.95447 470.36032 478.83316 487.37912 496.00397 504.713 513.51105 522.40217 531.39 540.4774 549.6661 558.9576 568.3518 577.84827 587.44507 597.1396 606.92786 616.8051 626.76484 636.79987 646.90155 657.06006 667.2642 677.50165 687.7586 698.02 708.2695 718.4893 728.66077 738.76337 748.77564 758.6751 768.43714 778.0341 787.4304 796.5874 805.47205 814.0508 822.2903 830.1565 837.6158 844.635 851.1814 857.22327 862.73005 867.6721 872.02186 875.7529 878.8412 881.26447 883.0034 884.04004 884.36017 883.95166 882.8055 880.9155 878.2786 874.89496 870.7677 865.90357 860.312 854.0058 847.00135 839.3173 830.9761 822.0029 812.4253 802.2741 791.5827 780.3864 768.72284 756.6317 744.1546 731.3346 718.2157 704.84394 691.26496 677.5256 663.67395 649.76215 635.8505 621.9969 608.24274 594.6279 581.1915 567.9707 555.0002 542.31354 529.94147 517.9126 506.25327 494.98706 484.13477 473.71454 463.7415 454.22812 445.18375 436.61478 428.52475 420.91415 413.78052 407.11838 400.91962 395.17346 389.86646 384.98273 380.5042 376.41046 372.6786 369.281 366.17847 363.32037 360.66495 358.1816 355.83978 353.6085 351.45624 349.3522 347.26614 345.16815 343.02893 340.82092 338.5176 336.094 333.5269 330.7952 327.8799 324.76413 321.4337 317.87662 314.08408 310.05002 305.7709 301.24622 296.47873 291.47382 286.24023 280.78912 275.13498 269.29477 263.2882 257.1376 250.86783 244.50588 238.08118 231.62467 225.1689 218.7482 212.39797 206.15442 200.05477 194.13648 188.43685 182.99344 177.84313 173.02225 168.56606 164.50812 160.88101 157.71506 155.0382 152.87657 151.25357 150.18955 149.7018 149.80448 150.50864 151.82122 153.74611 156.28318 159.4288 163.17511 167.51073 172.42057 177.88552 183.88317 190.38742 197.36835 204.78961 212.60205 220.74533 229.16419 237.81389 246.64899 255.62369 264.6926 273.8101 282.9307 292.01212 301.01785 309.91452 318.67105 327.2588 335.65146 343.82578 351.76056 359.4376 366.84158 373.95996 380.7825 387.30203 393.51373 399.41553 405.0077 410.2928 415.27548 419.9627 424.36337 428.48785 432.34814 435.95795 439.33228 442.48685 445.43845 448.20483 450.80426 453.25537 455.57697 457.7881 459.90762 461.95425 463.94638 465.90204 467.8386 469.77252 471.71973 473.69525 475.71298 477.7857 479.92505 482.14175 484.44482 486.84256 489.34152 491.94672 494.66263 497.4919 500.43543 503.49344 506.6645 509.94574 513.33356 516.8227 520.40686 524.0786 527.8292 531.64936 535.5286 539.45545 543.4178 547.4025 551.3963 555.3848 559.35364 563.2876 567.1711 570.9885 574.7244 578.3627 581.8875 585.283 588.53394 591.6246 594.53956 597.26447 599.78766 602.10065 604.19587 606.06574 607.7038 609.1047 610.2632 611.1755 611.8384 612.2495 612.40705 612.3104 611.96045 611.3622 610.52765 609.47107 608.20276 606.7307 605.0632 603.2094 601.17914 598.98267 596.6307 594.13446 591.5057 588.75654 585.89936 582.947 579.9125 576.8089 573.65 570.44904 567.2198 563.9757 560.7302 557.4968 554.2888 551.1192 548.0004 544.9448 541.96436 539.07026 536.2733 533.5838 531.0112 528.56397 526.24994 524.07666 522.05024 520.17566 518.45716 516.89814 515.50055 514.2651 513.1918 512.2794 511.52515 510.92548 510.47537 510.16876 509.99863 509.9562 510.0317 510.2144 510.49216 510.85223 511.2808 511.76282 512.2828 512.82404 513.369 513.8998 514.39795 514.8444 515.21924 515.50165 515.6709 515.70807 515.59546 515.3157 514.85206 514.18824 513.3083 512.197 510.84027 509.22485 507.3383 505.16904 502.70694 499.94275 496.86862 493.47778 489.76483 485.7259 481.35815 476.66022 471.6324 466.27612 460.5944 454.59155 448.27344 441.64716 434.72153 427.50638 420.0129 412.25366 404.24213 395.99353 387.52405 378.8509 369.99228 360.96725 351.7993 342.5222 333.17767 323.80225 314.42337 305.0649 295.7507 286.5045 277.34937 268.3083 259.40387 250.65749 242.09006 233.72199 225.57238 217.65982 210.00179 202.61449 195.51323 188.71283 182.2268 176.06697 170.24402 164.76816 159.64852 154.89273 150.50763 146.49909 142.8714 139.62851 136.77349 134.30821 132.23387 130.5509 129.25905 128.3577 127.84541 127.720604 127.98102 128.62374 129.64604 131.04505 132.81743 134.96009 137.46991 140.3435 143.57793 147.1704 151.11812 155.41849 160.0695 165.06925 170.41585 176.10776 182.14408 188.52404 195.2472 202.31336 209.72246 217.47481 225.57088 234.01116 242.79622 251.92652 261.40265 271.22513 281.39417 291.90982 302.7714 313.97788 325.52792 337.41953 349.64996 362.21545 375.11127 388.33206 401.87155 415.72165 429.87283 444.3151 459.03726 474.02567 489.26514 504.73956 520.43116 536.32044 552.38605 568.60505 584.95295 601.4039 617.9297 634.5007 651.0859 667.65314 684.16877 700.5972 716.9018 733.04505 748.98865 764.693 780.1073 795.16394 809.79755 823.9617 837.6218 850.74665 863.3066 875.2737 886.6215 897.3255 907.36304 916.71314 925.3572 933.27875 940.46277 946.8958 952.56354 957.4522 961.5531 964.8624 967.3795 969.1058 970.0453 970.2044 969.5915 968.2174 966.09504 963.23945 959.66785 955.39966 950.4556 944.8588 938.6341 931.8079 924.40827 916.46467 908.00745 899.069 889.6817 879.8798 869.69794 859.17115 848.33594 837.22815 825.8837 814.3394 802.63135 790.7954 778.8675 766.88196 754.8734 742.87537 730.91987 719.0382 707.2605 695.6154 684.12977 672.82874 661.73627 650.8741 640.26246 629.91944 619.8606 610.0997 600.6487 591.5173 582.7126 574.2399 566.10224 558.30036 550.83307 543.6968 536.88636 530.3943 524.21106 518.32575 512.7256 507.3958 502.3206 497.48288 492.86374 488.44363 484.20172 480.1163 476.1658 472.3277 468.5786 464.89557 461.25543 457.63525 454.01245 450.36496 446.6677 442.89056 439.0093 435.00992 430.8844 426.6271 422.23456 417.70435 413.0328 408.21735 403.26056 398.16943 392.9528 387.62192 382.18744 376.6614 371.05676 365.38748 359.66693 353.90887 348.12756 342.33762 336.55313 330.78815 325.05713 319.37347 313.75006 308.19983 302.73477 297.3663 292.1058 286.96332 281.94824 277.06928 272.33353 267.7483 263.31976 259.05295 254.9521 251.02086 247.26157 243.67525 240.26367 237.02649 233.96256 231.07027 228.3479 225.79236 223.39995 221.16562 219.08539 217.15367 215.36473 213.71248 212.18993 210.79033 209.50659 208.33104 207.25641 206.27497 205.37908 204.56064 203.81224 203.1263 202.49521 201.91146 201.36824 200.85865 200.37627 199.91472 199.46833 199.03202 198.60047 198.16947 197.73494 197.29328 196.84198 196.38024 195.90982 195.43315 194.95146 194.46659 193.98079 193.49611 193.01538 192.54203 192.07921 191.63022 191.1999 190.79273 190.41365 190.06783 189.7608 189.49875 189.28768 189.13426 189.04566 189.02915 189.09194 189.2424 189.48827 189.83774 190.29956 190.88227 191.59549 192.44765 193.44863 194.60695 195.93038 197.42366 199.09181 200.93795 202.96672 205.18154 207.58608 210.18297 212.97464 215.96309 219.15062 222.53948 226.13019 229.92482 233.92386 238.12851 242.53993 247.15831 251.9844 257.0184 262.26028 267.71048 273.36926 279.23624 285.31125 291.59433 298.08508 304.78265 311.68637 318.79565 326.1094 333.62604 341.34445 349.26285 357.37875 365.68976 374.19342 382.88632 391.76453 400.82425 410.0604 419.468 429.0401 438.7715 448.654 458.68002 468.83273 479.094 489.4474 499.8774 510.36984 520.9091 531.47944 542.06434 552.649 563.21534 573.7481 584.2301 594.6456 604.97815 615.2119 625.33094 635.3198 645.1643 654.8495 664.3605 673.685 682.80896 691.7206 700.4081 708.86054 717.0668 725.01825 732.70496 740.1193 747.2541 754.10206 760.65754 766.9151 772.8714 778.5219 783.864 788.8954 793.6145 798.0203 802.11365 805.8947 809.36567 812.52717 815.38166 817.933 820.1847 822.1401 823.80506 825.1844 826.2831 827.10706 827.6632 827.95765 827.9983 827.79474 827.3527 826.6768 825.76905 824.6351 823.2782 821.70337 819.91504 817.9187 815.7195 813.32294 810.73444 807.9603 805.00666 801.88044 798.5869 795.13367 791.5278 787.77564 783.88465 779.862 775.71534 771.45185 767.0649 762.5551 757.93055 753.1992 748.3702 743.4529 738.45636 733.3911 728.26624 723.09217 717.8795 712.63727 707.37757 702.10956 696.84394 691.5915 686.36255 681.1669 676.01465 670.9159 665.8811 660.91895 656.0379 651.2472 646.5558 641.9704 637.4995 633.1498 628.92707 624.83796 620.88715 617.079 613.41706 609.90485 606.54395 603.336 600.28077 597.3786 594.62806 592.0271 589.57154 587.2585 585.0829 583.0385 581.11744 579.31305 577.61646 576.0184 574.5076 573.0729 571.70264 570.3842 569.1025 567.8441 566.5949 565.3382 564.05854 562.73884 561.36365 559.9154 558.37696 556.7311 554.9606 553.04877 550.97846 548.7325 546.29627 543.65357 540.79047 537.6921 534.34467 530.7366 526.85645 522.6951 518.243 513.4927 508.73978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (723.48377 730.47626 736.98737 742.98127 748.42365 753.28254 757.52814 761.1333 764.0731 766.32544 767.87067 768.6921 768.77607 768.11145 766.6906 764.5084 761.5629 757.85517 753.38947 748.1727 742.2149 735.5289 728.13044 720.0381 711.273 701.85877 691.82166 681.1901 669.9948 658.2686 646.046 633.36396 620.2601 606.77405 592.9469 578.82044 564.43744 549.8417 535.07734 520.189 505.2216 490.21976 475.2284 460.2919 445.4543 430.7587 416.24783 401.96304 387.94482 374.23245 360.8636 347.8745 335.30005 323.1728 311.52432 300.3834 289.77713 279.73053 270.26694 261.4065 253.16756 245.56636 238.61716 232.3307 226.7162 221.78096 217.52858 213.96149 211.07942 208.88002 207.3583 206.50724 206.31801 206.77964 207.87871 209.60012 211.9269 214.83992 218.31511 222.32147 226.83441 231.82817 237.27556 243.14824 249.41681 256.05084 263.01913 270.28967 277.83 285.60678 293.58664 301.73566 310.02002 318.40585 326.85907 335.34604 343.83368 352.28915 360.68024 368.97553 377.14325 385.14658 392.94183 400.50626 407.81863 414.8597 421.6126 428.06238 434.19663 440.00497 445.47934 450.61368 455.40454 459.8505 463.9521 467.71228 471.13577 474.22955 477.00262 479.4652 481.62946 483.5102 485.1221 486.4824 487.60934 488.52206 489.2411 489.78717 490.1827 490.4502 490.61215 490.69226 490.7136 490.69928 490.67264 490.6564 490.67297 490.74384 490.88974 491.13086 491.48615 491.97293 492.6077 493.40533 494.37946 495.54166 496.90183 498.4683 500.24765 502.2439 504.45963 506.89505 509.54865 512.4164 515.4925 518.7705 522.247 525.91987 529.7856 533.83905 538.0729 542.4784 547.04444 551.7575 556.6024 561.5609 566.6132 571.73694 576.90705 582.0969 587.2774 592.4169 597.4823 602.4386 607.2494 611.8761 616.27997 620.42035 624.25666 627.747 630.85065 633.52607 635.7324 637.4305 638.5812 639.14814 639.09577 638.3915 637.00507 634.9094 632.08045 628.49787 624.1449 619.0089 613.08185 606.36005 598.8444 590.54084 581.46 571.61835 561.03614 549.739 537.7577 525.1274 511.88812 498.08466 483.76703 468.98853 453.8061 438.28122 422.4783 406.4643 390.30866 374.0832 357.86093 341.7162 325.72376 309.95908 294.49698 279.4113 264.77432 250.65749 237.1289 224.25447 212.09654 200.71431 190.16269 180.49208 171.74784 163.97089 157.19915 151.47396 146.84084 143.33386 140.97078 139.76233 139.71273 140.81943 143.07302 146.45749 150.94992 156.52167 163.13782 170.75687 179.33208 188.81143 199.13726 210.24861 222.07917 234.55854 247.61074 261.15414 275.10687 289.3896 303.92188 318.6228 333.41135 348.2072 362.93088 377.50464 391.8529 405.9025 419.58344 432.8297 445.57904 457.77353 469.3603 480.29175 490.52548 500.02493 508.75964 516.70514 523.84314 530.1619 535.65625 540.327 544.1816 547.2334 549.5023 551.0138 551.7989 551.8944 551.34205 550.1882 548.48304 546.2813 543.6411 540.62336 537.29114 533.71 529.94635 526.06757 522.14155 518.2355 514.4161 510.74878 507.29718 504.1213 501.27966 498.8283 496.82224 495.31018 494.3248 493.88516 494.0038 494.6873 495.93665 497.7543 500.14926 503.12683 506.67334 510.7631 515.3656 520.4472 525.97034 531.89417 538.17615 544.77137 551.632 558.71 565.95636 573.32184 580.75684 588.2121 595.6393 602.99054 610.22 617.2833 624.1378 630.74335 637.0617 643.0576 648.69855 653.9545 658.7988 663.2076 667.1602 670.63916 673.62995 676.1217 678.106 679.5782 680.5363 680.98114 680.91645 680.3487 679.2866 677.7416 675.7272 673.2591 670.3545 667.03266 663.31397 659.22016 654.77387 649.99915 644.92017 639.5615 633.9479 628.104 622.05445 615.8232 609.4337 602.90845 596.26886 589.5352 582.7264 575.85956 568.9507 562.0132 555.059 548.0981 541.1383 534.18506 527.24195 520.31006 513.3885 506.47427 499.56226 492.64508 485.71335 478.75632 471.76132 464.7161 457.61444 450.45822 443.24664 435.9711 428.62094 421.1866 413.65842 406.0272 398.2848 390.42468 382.44077 374.32813 366.08365 357.7051 349.18988 340.52683 331.692 322.66495 313.44623 304.04938 294.4901 284.78577 274.9561 265.02307 255.00954 244.94025 234.84181 224.74167 214.66889 204.65341 194.72595 184.91855 175.26346 165.79319 156.54079 147.5396 138.82251 130.42221 122.371506 114.70218 107.445626 100.63265 94.29284 88.454796 83.145874 78.39215 74.21822 70.64731 67.70085 65.39861 63.758645 62.79689 62.52774 62.96348 64.11415 65.98748 68.58936 71.92384 75.99233 80.79393 86.32595 92.58354 99.558846 107.24286 115.62426 124.68913 134.42134 144.80367 155.81668 167.43848 179.64495 192.4115 205.71109 219.51543 233.79384 248.5143 263.64914 279.18308 295.1053 311.39246 328.01166 344.92828 362.10635 379.50906 397.09747 414.8321 432.67328 450.5806 468.51184 486.42532 504.27966 522.0322 539.6388 557.0581 574.24817 591.16675 607.772 624.0235 639.88196 655.3081 670.2633 684.7109 698.61597 711.9448 724.6649 736.7456 748.15815 758.87604 768.87525 778.13306 786.6296 794.3472 801.271 807.3883 812.69416 817.1996 820.92884 823.9018 826.12806 827.61445 828.3701 828.4061 827.7348 826.37 824.32734 821.6238 818.2779 814.3098 809.7402 804.5911 798.8854 792.6467 785.89997 778.67 770.9831 762.8656 754.34424 745.4461 736.198 726.6278 716.76294 706.6305 696.25745 685.67096 674.89777 663.96405 652.89545 641.7178 630.4559 619.13385 607.7752 596.4032 585.0401 573.70765 562.42695 551.2185 540.1017 529.09504 518.2165 507.48257 496.90942 486.51236 476.3061 466.30454 456.52036 446.9657 437.6523 428.5915 419.79373 411.26898 403.02634 395.07437 387.4218 380.07666 373.04645 366.33847 359.9598 353.9172 348.21683 342.86493 337.86777 333.2315 328.96237 325.06595 321.54776 318.41318 315.66794 313.31738 311.3671 309.8221 308.68753 307.9683 307.6691 307.79425 308.34793 309.33398 310.7559 312.61615 314.91727 317.66104 320.84808 324.47876 328.55277 333.06766 338.02042 343.4072 349.2227 355.46017 362.11136 369.16626 376.613 384.43835 392.6269 401.16162 410.01547 419.14233 428.4879 438.0041 447.6486 457.3801 467.157 476.93756 486.68045 496.34534 505.89188 515.2807 524.4733 533.4329 542.12336 550.5107 558.5667 566.267 573.586 580.49714 586.9758 592.99866 598.5445 603.5941 608.1305 612.1387 615.606 618.5226 620.8798 622.67206 623.89606 624.5512 624.6387 624.1617 623.12604 621.5406 619.41626 616.76514 613.60236 609.94446 605.8103 601.22077 596.1987 590.7683 584.9551 578.7863 572.29047 565.4972 558.4377 551.1439 543.64826 535.9832 528.18195 520.2786 512.3075 504.3023 496.2958 488.32043 480.40866 472.59168 464.9002 457.36322 450.00797 442.86078 435.94543 429.28427 422.89822 416.80478 411.01874 405.55386 400.42038 395.6261 391.17563 387.0709 383.31064 379.89075 376.8043 374.0413 371.58847 369.43024 367.5478 365.91965 364.52206 363.32852 362.31058 361.43787 360.67795 359.99673 359.35983 358.73172 358.07565 357.35547 356.53442 355.58267 354.48016 353.2125 351.77014 350.14526 348.3331 346.33087 344.1326 341.73114 339.12814 336.33487 333.36572 330.23694 326.9668 323.57574 320.08487 316.517 312.89517 309.2443 305.58878 301.9537 298.36566 294.84933 291.4293 288.13074 284.97745 281.99323 279.201 276.6221 274.2765 272.18335 270.3609 268.825 267.59036 266.6703 266.07632 265.8187 265.90466 266.34076 267.13135 268.2786 269.7849 271.64868 273.867 276.43622 279.35053 282.60275 286.18347 290.08304 294.2891 298.7884 303.5675 308.6108 313.90146 319.42154 325.15292 331.07593 337.172 343.42026 349.79895 356.28473 362.85437 369.4846 376.15106 382.82938 389.4954 396.12488 402.6941 409.17987 415.5581 421.80493 427.89856 433.81607 439.5361 445.03772 450.30048 455.32703 460.14114 464.75552 469.16846 473.37082 477.35577 481.11484 484.6408 487.9268 490.96713 493.75552 496.28662 498.55454 500.55548 502.2854 503.74036 504.91827 505.81686 506.4337 506.76807 506.81842 506.58637 506.0722 505.2769 504.20367 502.85486 501.23285 499.3428 497.18933 494.77762 492.11432 489.22476 486.13672 482.86517 479.42047 475.8109 472.04538 468.13242 464.08148 459.8998 455.59772 451.18274 446.664 442.05054 437.35178 432.57452 427.7275 422.82098 417.8625 412.86017 407.82425 402.76242 397.68387 392.5956 387.5067 382.42642 377.36325 372.32446 367.3199 362.35724 357.4442 352.58975 347.80267 343.09055 338.46143 333.92407 329.48572 325.15564 320.9409 316.84955 312.88974 309.06842 305.39374 301.8738 298.51492 295.32547 292.31177 289.48935 286.87756 284.4924 282.34885 280.46072 278.84033 277.50003 276.45123 275.70386 275.26727 275.15002 275.35996 275.90323 276.78616 278.01227 279.58566 281.5085 283.78357 286.4106 289.38852 292.71686 296.39294 300.4126 304.77252 309.46634 314.48853 319.83145 325.48816 331.44962 337.70435 344.24353 351.05554 358.1295 365.45142 373.00986 380.79056 388.77658 396.95697 405.31363 413.83295 422.49896 431.29495 440.2018 449.20557 458.28836 467.43414 476.62268 485.83804 495.06293 504.28195 513.4731 522.62256 531.7128 540.72687 549.6798 558.5743 567.3904 576.1109 584.7148 593.1848 601.50147 609.6475 617.6017 625.34736 632.8676 640.14386 647.1592 653.897 660.3412 666.4765 672.288 677.7609 682.8817 687.6373 692.0163 696.007 699.5984 702.7573 705.46515 707.7135 709.4963 710.8078 711.6452 712.0051 711.8855 711.2854 710.2063 708.6491 706.61615 704.11115 701.1386 697.7058 693.8185 689.4862 684.71784 679.5241 673.9161 667.9074 661.51307 654.74555 647.62366 640.16297 632.3814 624.2984 615.93427 607.31025 598.4462 589.3675 580.0971 570.6563 561.07044 551.3654 541.568 531.7007 521.7939 511.86908 501.9581 492.08514 482.27686 472.5604 462.9643 453.51205 444.23102 435.1471 426.28687 417.67166 409.32712 401.27765 393.5446 386.1479 379.11063 372.45 366.1856 360.3321 354.90756 349.92432 345.39633 341.33453 337.74838 334.64432 332.03116 329.91095 328.28848 327.16324 326.53537 326.40198 326.7581 327.5976 328.9121 330.6911 332.92447 335.59583 338.69263 341.79285)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (499.39752 500.9985 502.52948 503.9889 505.37537 506.6877 507.9246 509.08542 510.16888 511.17447 512.10144 512.9492 513.71717 514.40534 515.01337 515.54114 515.9888 516.3561 516.64344 516.8511 516.9795 517.02924 517.0006 516.8945 516.71155 516.4527 516.1188 515.7107 515.22974 514.6768 514.0532 513.36017 512.59906 511.77124 510.87817 509.9213 508.90213 507.82242 506.68372 505.48767 504.23602 502.9307 501.57333 500.16586 498.7102 497.2081 495.66165 494.07288 492.44363 490.77603 489.07214 487.33398 485.56366 483.7633 481.93524 480.0813 478.20383 476.3051 474.3872 472.45242 470.50293 468.54108 466.56897 464.58896 462.60342 460.61453 458.62466 456.636 454.65082 452.67163 450.70056 448.74005 446.7921 444.85938 442.94397 441.04822 439.17438 437.3247 435.50198 433.7099 431.95105 430.22855 428.54492 426.90292 425.3054 423.75497 422.2542 420.80573 419.4121 418.0757 416.79898 415.5842 414.43366 413.3493 412.3334 411.38776 410.5144 409.71487 408.99084 408.3439 407.775 407.28387 406.86874 406.53046 406.27008 406.08896 405.98752 405.96606 406.0258 406.1664 406.38837 406.69128 407.07523 407.53986 408.08444 408.7082 409.4102 410.18924 411.04416 411.97336 412.97498 414.04703 415.18744 416.394 417.66434 418.99558 420.38467 421.82874 423.32474 424.86877 426.4578 428.0881 429.75537 431.45605 433.1861 434.9411 436.71664 438.50864 440.31247 442.1237 443.93784 445.75024 447.55624 449.35147 451.13126 452.8912 454.62695 456.33414 458.0085 459.64584 461.24243 462.79422 464.29767 465.74857 467.13855 468.44897 469.6605 470.7692 471.7716 472.66467 473.44638 474.11533 474.6706 475.11203 475.44046 475.6572 475.7644 475.76498 475.66245 475.46137 475.16672 474.78436 474.32083 473.7833 473.17963 472.5184 471.8088 471.0603 470.28323 469.48846 468.68698 467.8905 467.11063 466.36014 465.6512 464.99664 464.40912 463.90155 463.48712 463.17834 462.9881 462.92883 463.01288 463.25223 463.65833 464.2425 465.0149 465.98572 467.16394 468.5591 470.18207 472.0467 474.16107 476.5201 479.11725 481.9444 484.99246 488.2513 491.71 495.3559 499.17627 503.15747 507.28488 511.54367 515.91816 520.39246 524.9507 529.5763 534.2527 538.96357 543.69214 548.4222 553.1377 557.8227 562.4616 567.03974 571.5422 575.955 580.265 584.45936 588.52607 592.4538 596.23114 599.8468 603.2899 606.55054 609.61994 612.4903 615.1546 617.60694 619.8428 621.85804 623.65027 625.2177 626.5595 627.67597 628.5685 629.23926 629.69135 629.92896 629.95704 629.78156 629.4088 628.8463 628.10236 627.1856 626.1055 624.8721 623.49634 621.989 620.3618 618.62647 616.79566 614.8817 612.89765 610.85645 608.77124 606.6553 604.52186 602.38416 600.2551 598.1481 596.0757 594.0506 592.085 590.19104 588.38007 586.6634 585.05164 583.55506 582.1833 580.94526 579.8495 578.90375 578.1151 577.49006 577.0341 576.75214 576.6483 576.726 576.9877 577.43494 578.0688 578.889 579.8949 581.08484 582.4562 584.0056 585.72876 587.6188 589.66376 591.84736 594.156 596.58094 599.113 601.7424 604.4584 607.24775 610.09217 612.97144 615.86866 618.7687 621.65577 624.5142 627.3284 630.08167 632.75776 635.3405 637.813 640.15876 642.3616 644.40497 646.2725 647.94825 649.4166 650.6626 651.67115 652.42756 652.91785 653.1286 653.04706 652.6608 651.95826 650.9291 649.56324 647.8516 645.7859 643.359 640.56476 637.3979 633.8542 629.9304 625.6248 620.9363 615.8653 610.4135 604.5835 598.37897 591.80506 584.8684 577.57636 569.93775 561.9624 553.66156 545.048 536.13495 526.93714 517.4702 507.7516 497.79886 487.63095 477.268 466.731 456.04123 445.22165 434.29538 423.28635 412.21927 401.11914 390.01187 378.9236 367.88058 356.90958 346.03748 335.291 324.69705 314.28244 304.074 294.09818 284.38086 274.9477 265.8236 257.03305 248.59981 240.54633 232.89192 225.6527 218.84243 212.47394 206.55898 201.10823 196.13132 191.63674 187.63193 184.123 181.11504 178.61186 176.61623 175.1282 174.14112 173.63828 173.60089 174.01758 174.88156 176.18485 177.91838 180.07231 182.63565 185.5966 188.9426 192.66039 196.73583 201.15438 205.90093 210.95975 216.31459 221.94947 227.84746 233.99141 240.36437 246.9489 253.72792 260.68433 267.80093 275.06058 282.44626 289.94125 297.5292 305.19406 312.92032 320.69272 328.49597 336.3156 344.13806 351.94986 359.73807 367.4901 375.19458 382.84048 390.41733 397.915 405.324 412.636 419.84293 426.93723 433.9125 440.76227 447.48074 454.06302 460.5049 466.80212 472.95114 478.9491 484.7935 490.48212 496.01367 501.3864 506.5993 511.6517 516.54316 521.27466 525.8497 530.2723 534.5435 538.6629 542.62946 546.44214 550.1001 553.60224 556.9474 560.13404 563.16065 566.0258 568.7274 571.2633 573.63105 575.82795 577.851 579.6967 581.3616 582.8418 584.13324 585.23114 586.13086 586.82746 587.3154 587.58936 587.64356 587.47187 587.0682 586.42646 585.5402 584.4032 583.00916 581.35206 579.42585 577.22455 574.7425 571.9739 568.9127 565.5552 561.9023 557.95856 553.7302 549.224 544.4476 539.4095 534.11884 528.5857 522.8205 516.8345 510.63925 504.2477 497.6733 490.9295 484.03055 476.99136 469.827 462.55347 455.18668 447.7434 440.24045 432.69473 425.12378 417.54523 409.97678 402.43607 394.94107 387.50992 380.16034 372.91 365.77676 358.77838 351.93222 345.25488 338.76324 332.474 326.403 320.56577 314.97748 309.65283 304.60593 299.85 295.3979 291.26187 287.45313 283.9823 280.85928 278.0932 275.6924 273.66434 272.01538 270.75107 269.8763 269.39508 269.31006 269.62323 270.3358 271.4477 272.9579 274.86456 277.16483 279.85486 282.93015 286.3849 290.2124 294.40527 298.9553 303.85303 309.08807 314.6498 320.5266 326.70572 333.17404 339.91748 346.92123 354.17007 361.64822 369.33933 377.22653 385.29196 393.51767 401.88574 410.37744 418.9737 427.65527 436.403 445.197 454.01743 462.8449 471.65967 480.4416 489.17102 497.8285 506.39493 514.85096 523.17737 531.3558 539.36585 547.1846 554.7898 562.16425 569.29407 576.16694 582.771 589.0952 595.1294 600.86396 606.2906 611.40235 616.19275 620.656 624.7871 628.582 632.03626 635.14624 637.9106 640.32917 642.4027 644.1329 645.5227 646.5756 647.29615 647.6891 647.76026 647.5159 646.9628 646.1089 644.9625 643.53266 641.8285 639.86 637.6374 635.1716 632.47376 629.55555 626.429 623.1062 619.59986 615.92267 612.08777 608.1081 603.9973 599.76844 595.4351 591.0112 586.5101 581.9454 577.3305 572.67896 568.0042 563.31977 558.6386 553.9734 549.3368 544.7419 540.20057 535.72486 531.32654 527.0168 522.80665 518.70704 514.7278 510.87912 507.17035 503.61044 500.20782 496.97076 493.90683 491.02255 488.32495 485.82 483.51303 481.40878 479.5115 477.8248 476.35193 475.09506 474.05624 473.2366 472.63678 472.25626 472.0945 472.15048 472.42203 472.9062 473.59964 474.4981 475.5971 476.89136 478.3685 480.00333 481.77103 483.65677 485.65192 487.74786 489.93604 492.2084 494.55383 496.9598 499.41782 501.92365 504.47342 507.0646 509.6939 512.358 515.0546 517.7815 520.53547 523.3145 526.1165 528.9394 531.781 534.63886 537.51136 540.3969 543.2932 546.19837 549.11127 552.02955 554.95124 557.87525 560.7988 563.7197 566.6365 569.54664 572.4479 575.3381 578.21454 581.0746 583.9152 586.73334 589.5262 592.2906 595.02265 597.7185 600.37446 602.9867 605.55054 608.0615 610.51465 612.90546 615.2295 617.481 619.654 621.7433 623.74347 625.6485 627.4521 629.14814 630.7307 632.1936 633.5298 634.7325 635.7953 636.7124 637.4773 638.0833 638.5233 638.7911 638.88086 638.78614 638.5011 638.02015 637.3371 636.44654 635.34424 634.016 632.4428 630.60956 628.5076 626.1322 623.47797 620.5399 617.3149 613.8004 609.9929 605.8903 601.4924 596.79865 591.8092 586.5251 580.9485 575.0817 568.9286 562.4931 555.78046 548.79755 541.55 534.04615 526.29444 518.30457 510.08688 501.65244 493.01227 484.18033 475.1694 465.99414 456.68988 447.29572 437.83762 428.33725 418.8125 409.282 399.76205 390.2711 380.8252 371.43997 362.13013 352.91083 343.7958 334.79788 325.92905 317.2007 308.62518 300.21246 291.971 283.91034 276.0386 268.363 260.8918 253.62993 246.58319 239.75754 233.15677 226.78508 220.646 214.74338 209.07863 203.65451 198.47171 193.53215 188.83683 184.38639 180.18045 176.21939 172.50316 169.03047 165.80008 162.811 160.06244 157.55272 155.27996 153.24242 151.44602 149.89568 148.58957 147.52266 146.68967 146.0848 145.70287 145.53775 145.58293 145.83261 146.28134 146.92223 147.74922 148.75637 149.93669 151.28408 152.79294 154.45616 156.26699 158.22026 160.30988 162.52913 164.87216 167.33255 169.90363 172.58119 175.35855 178.23055 181.19034 184.23374 187.35425 190.54721 193.80677 197.1288 200.50746 203.9382 207.41562 210.93492 214.49167 218.08196 221.70174 225.34609 229.00955 232.68964 236.3828 240.08437 243.78946 247.4963 251.20064 254.90018 258.58966 262.2669 265.92886 269.5723 273.2362 276.93765 280.67746 284.4533 288.2624 292.10324 295.9736 299.87097 303.7934 307.7382 311.7041 315.68845 319.68954 323.70477 327.7324 331.77042 335.8182 339.8711 343.9292 347.99027 352.05228 356.11398 360.17252 364.24576 368.34375 372.46475 376.60757 380.7721 384.95648 389.16028 393.3799 397.61527 401.86588 406.12943 410.40543 414.68976 418.98343 423.28427 427.59116 431.90006 436.21143 440.52408 444.8355 449.1418 453.4428 457.73813 462.02423 466.29886 470.5613 474.80728 479.03848 483.24936 487.4398 491.60547 495.74628 499.8599 503.94318 507.99344 512.0095 515.9892 519.92884 523.8271 527.68055 531.48835 535.2468 538.95405 542.60706 546.20417 549.74225 553.2184 556.63086 559.9773 563.255 566.4605 569.59205 572.6478 575.62446 578.51996 581.3312 584.0565 586.69214 589.23737 591.68934 594.0444 596.3034 598.4604 600.5154 602.46607 604.3094 606.0443 607.66877 609.1798 610.5771 611.85785 613.021 614.0647 614.98645 615.7862 616.4629 617.13874)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (319.04022 315.14478 311.42166 307.8835 304.5424 301.40945 298.49527 295.80942 293.36066 291.15674 289.20456 287.50995 286.07797 284.91232 284.016 283.39084 283.0376 282.95612 283.14523 283.60272 284.32565 285.30985 286.5505 288.0418 289.77713 291.74936 293.95047 296.37186 299.0042 301.838 304.863 308.0686 311.44418 314.97855 318.66052 322.47888 326.42224 330.47928 334.63892 338.8902 343.2225 347.62543 352.08896 356.60355 361.16022 365.75052 370.36652 375.0009 379.64716 384.29926 388.95206 393.60126 398.24286 402.8741 407.4929 412.0975 416.6874 421.2625 425.82355 430.37183 434.90945 439.43866 443.96274 448.48523 453.01004 457.54147 462.08423 466.6429 471.22293 475.8289 480.46606 485.13947 489.8539 494.61392 499.42386 504.28748 509.20822 514.18897 519.23206 524.3392 529.511 534.74744 540.0477 545.4099 550.83094 556.30726 561.8336 567.4041 573.01166 578.6482 584.30426 589.9697 595.6329 601.28144 606.9019 612.47974 617.9997 623.4455 628.8 634.0454 639.1632 644.13257 648.93116 653.5392 657.93726 662.1055 666.0242 669.67347 673.0341 676.08674 678.8124 681.1932 683.21137 684.8503 686.09394 686.9277 687.33765 687.3115 686.83814 685.90784 684.5126 682.6457 680.30256 677.48017 674.17707 670.3941 666.134 661.4012 656.2023 650.54584 644.4424 637.9046 630.9471 623.586 615.8401 607.72925 599.2758 590.50324 581.437 572.1039 562.53235 552.75184 542.79297 532.6877 522.46875 512.1696 501.82416 491.4672 481.13342 470.85767 460.67484 450.61957 440.7263 431.02924 421.5667 412.38544 403.52972 395.0257 386.8977 379.16733 371.854 364.97504 358.54538 352.57706 347.08026 342.0625 337.52866 333.48148 329.92126 326.8462 324.25174 322.13147 320.47662 319.27655 318.51865 318.1883 318.26904 318.743 319.59048 320.79068 322.32126 324.15863 326.27823 328.65475 331.26212 334.0731 337.06055 340.19675 343.4537 346.80365 350.21857 353.67062 357.13254 360.57773 363.97974 367.31332 370.55408 373.6783 376.66373 379.48932 382.13522 384.58292 386.81616 388.8213 390.58637 392.10144 393.35834 394.3509 395.07495 395.52814 395.71045 395.62347 395.27087 394.65842 393.7935 392.68555 391.34567 389.7867 388.0233 386.07135 383.94858 381.67395 379.2675 376.75058 374.14557 371.47583 368.76532 366.0388 363.32138 360.63886 358.0181 355.49078 353.0917 350.85034 348.79044 346.9351 345.30655 343.92667 342.81595 341.99387 341.4791 341.28854 341.43777 341.94095 342.8106 344.05756 345.6907 347.71716 350.14215 352.96875 356.1984 359.8301 363.86078 368.28546 373.0972 378.2867 383.84265 389.75195 395.99933 402.56784 409.43854 416.5907 424.00214 431.64896 439.50595 447.5465 455.7428 464.06598 472.4866 480.974 489.4972 498.02454 506.52423 514.9643 523.313 531.5387 539.61017 547.4967 555.16834 562.5962 569.75196 576.6091 583.142 589.32685 595.1414 600.56507 605.5792 610.16736 614.3146 618.0089 621.23987 623.99976 626.2831 628.0869 629.41047 630.2557 630.62665 630.53 629.9749 628.9722 627.53455 625.6769 623.41785 620.7795 617.7857 614.4624 610.8371 606.9393 602.8015 598.4581 593.94294 589.29017 584.5347 579.71174 574.85675 570.00507 565.1919 560.4521 555.81995 551.3285 547.0102 542.896 539.0155 535.39655 532.06525 529.0457 526.3597 524.0269 522.0644 520.48664 519.30555 518.5302 518.1666 518.218 518.68464 519.56354 520.84894 522.53174 524.60016 527.0391 529.8308 532.9544 536.38654 540.101 544.0693 548.2604 552.64106 557.176 561.8284 566.5597 571.3295 576.09675 580.8194 585.4547 589.9597 594.2908 598.4048 602.259 605.8115 609.02137 611.84845 614.2549 616.20417 617.66187 618.59595 618.97706 618.7786 617.9772 616.5524 614.4874 611.76917 608.38807 604.33887 599.62006 594.23426 588.18824 581.49335 574.1646 566.2217 557.68824 548.5921 538.96515 528.843 518.2675 507.29404 495.9917 484.4269 472.65607 460.73364 448.71478 436.65533 424.61087 412.6369 400.7883 389.11893 377.68137 366.52667 355.704 345.26074 335.24142 325.6875 316.63632 308.12155 300.17285 292.81607 286.07336 279.9624 274.49725 269.68793 265.5405 262.05728 259.23673 257.0733 255.55815 254.67888 254.4197 254.7618 255.68349 257.16016 259.16483 261.66806 264.63843 268.04257 271.8455 276.0109 280.50125 285.27835 290.30353 295.5375 300.94046 306.47293 312.0959 317.77094 323.46017 329.12653 334.73428 340.24887 345.63715 350.86758 355.91055 360.73816 365.3244 369.64536 373.67926 377.40662 380.81052 383.87564 386.58957 388.942 390.9251 392.53314 393.76297 394.61353 395.08597 395.18372 394.91217 394.27884 393.29306 391.96606 390.3107 388.34177 386.0757 383.52997 380.72275 377.67297 374.40088 370.92737 367.27432 363.4643 359.52042 355.46652 351.32663 347.1252 342.8866 338.63513 334.3953 330.19165 326.04794 321.98755 318.03345 314.20825 310.53363 307.03043 303.71887 300.61838 297.747 295.12186 292.75894 290.67355 288.87933 287.3887 286.2132 285.36273 284.84607 284.67072 284.84265 285.36673 286.2464 287.48456 289.08463 291.0498 293.38132 296.07755 299.13467 302.548 306.31198 310.41965 314.86264 319.63205 324.71835 330.11044 335.79672 341.7649 348.00143 354.4927 361.22437 368.18115 375.34756 382.70758 390.24493 397.94305 405.78494 413.7532 421.8308 430.00012 438.2436 446.5441 454.88416 463.24637 471.61362 479.96915 488.296 496.57785 504.7987 512.9427 520.9946 528.93976 536.7634 544.4515 551.9905 559.3676 566.5707 573.5876 580.40754 587.02015 593.4157 599.58484 605.51905 611.2106 616.6522 621.8374 626.7605 631.4162 635.8001 639.9083 643.73774 647.28577 650.5508 653.5314 656.22706 658.6376 660.76374 662.6067 664.1682 665.4504 666.4563 667.189 667.65235 667.85065 667.78876 667.4717 666.90485 666.09436 665.04645 663.7676 662.2646 660.545 658.6162 656.48566 654.1615 651.6518 648.9646 646.10877 643.0924 639.9244 636.6135 633.16834 629.59784 625.9107 622.11597 618.2222 614.23804 610.17255 606.0341 601.8313 597.5722 593.2651 588.9182 584.5378 580.128 575.69385 571.24335 566.7861 562.332 557.8905 553.47107 549.0828 544.7347 540.4352 536.1926 532.0151 527.91047 523.88575 519.9468 516.09467 512.32764 508.64798 505.06146 501.57465 498.19397 494.9255 491.77502 488.74768 485.84863 483.08264 480.45392 477.96628 475.62323 473.42734 471.38116 469.48657 467.74484 466.15662 464.72217 463.44083 462.31143 461.33212 460.50046 459.81342 459.26727 458.85727 458.5786 458.4252 458.3908 458.46832 458.6496 458.92664 459.2905 459.7314 460.23962 460.80447 461.415 462.05994 462.72766 463.40622 464.08316 464.74683 465.38486 465.9844 466.5334 467.0196 467.43137 467.7574 467.98654 468.10825 468.11237 467.98984 467.73248 467.33264 466.78363 466.08017 465.21805 464.19394 463.00577 461.65326 460.13727 458.46033 456.626 454.6397 452.5082 450.23987 447.84436 445.33328 442.71948 440.01724 437.2421 434.4107 431.5411 428.65234 425.76474 422.90204 420.09354 417.3663 414.74023 412.2311 409.85297 407.61844 405.53888 403.62103 401.86768 400.28232 398.86972 397.63443 396.5793 395.70633 395.01584 394.5067 394.177 394.0232 394.04074 394.2245 394.568 395.0643 395.70526 396.48248 397.38666 398.40796 399.53668 400.76273 402.0755 403.4642 404.91818 406.4269 407.97992 409.5667 411.17676 412.80063 414.42856 416.05164 417.66074 419.24762 420.80472 422.3245 423.80005 425.2253 426.5945 427.90292 429.1455 430.31833 431.41812 432.4424 433.38855 434.255 435.04028 435.7438 436.3658 436.90616 437.36584 437.74588 438.04803 438.27414 438.4267 438.50815 438.52145 438.4702 438.3575 438.18726 437.96344 437.69003 437.37155 437.0121 436.61624 436.1883 435.73312 435.2557 434.7604 434.25198 433.7373 433.22336 432.71423 432.21106 431.71478 431.2262 430.74606 430.2756 429.81564 429.36737 428.9317 428.5099 428.10297 427.71225 427.339 426.98474 426.65106 426.339 426.05038 425.78668 425.5497 425.34103 425.1623 425.01566 424.90274 424.82535 424.7853 424.7848 424.82553 424.90985 425.03964 425.2145 425.4347 425.70166 426.01758 426.38458 426.80527 427.28235 427.81772 428.4135 429.07217 429.7961 430.58743 431.44788 432.37958 433.38474 434.46472 435.62094 436.8556 438.16995 439.5651 441.04218 442.60208 444.2458 445.97354 447.7861 449.68335 451.66568 453.73267 455.88403 458.1185 460.4356 462.83417 465.31253 467.86917 470.50238 473.2096 475.98837 478.83585 481.7495 484.72595 487.76184 490.85275 493.9949 497.18427 500.41632 503.68573 506.98816 510.31888 513.6718 517.0402 520.4187 523.8015 527.18305 530.5558 533.9151 537.2547 540.56934 543.85297 547.1002 550.30555 553.4639 556.56995 559.6187 562.6062 565.52704 568.37714 571.1518 573.8475 576.4603 578.9862 581.4218 583.76435 586.0101 588.15644 590.20075 592.1405 593.97364 595.6973 597.3106 598.8111 600.19776 601.4689 602.62336 603.66016 604.57874 605.37824 606.05787 606.61786 607.05744 607.377 607.57654 607.6561 607.6161 607.45704 607.17957 606.7846 606.2724 605.64417 604.90094 604.04377 603.07465 601.9943 600.8043 599.50495 598.0978 596.58356 594.96326 593.238 591.4094 589.47846 587.4461 585.3143 583.08417 580.7569 578.3342 575.8177 573.2085 570.50837 567.7189 564.8421 561.8789 558.8316 555.70136 552.48066 549.166 545.75916 542.2622 538.6781 535.0075 531.25354 527.41925 523.5072 519.5192 515.4586 511.32806 507.13113 502.86972 498.54788 494.16812 489.73468 485.2492 480.7166 476.13937 471.52234 466.86746 462.17947 457.46088 452.71722 447.95062 443.1657 438.36627 433.5559 428.73895 423.91977 419.10187 414.28925 409.48587 404.69635 399.9254 395.17496 390.451 385.7561 381.09656 376.47476 371.89548 367.36163 362.8797 358.4518 354.08258 349.77527 345.5363 341.36615 337.2714 333.25412 329.31998 325.47092 321.71194 318.0459 314.47723 311.00836 307.64325 304.38507 301.23837 298.20428 295.28714 292.48993 289.81558 287.2666 284.8459 282.55627 280.40042 278.38025 276.4989 274.75818 273.15994 271.70593 270.39902 269.24033 268.2312 267.223)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (493.52756 493.05597 492.12717 490.77002 489.01553 486.8973 484.45044 481.71234 478.72165 475.51816 472.14285 468.6373 465.04382 461.40475 457.76242 454.15897 450.63577 447.2334 443.99124 440.9477 438.13898 435.59973 433.36252 431.45773 429.9129 428.75327 428.0009 427.67505 427.79184 428.36423 429.40164 430.9101 432.89243 435.34766 438.2718 441.65674 445.49176 449.76215 454.45007 459.5349 464.99255 470.79642 476.9169 483.32224 489.97806 496.8483 503.89478 511.07767 518.35627 525.6886 533.0319 540.3431 547.5787 554.69587 561.652 568.4052 574.91456 581.14075 587.04584 592.5943 597.7523 602.48865 606.77485 610.5853 613.8975 616.6923 618.9539 620.67035 621.8331 622.43757 622.48304 621.97284 620.91394 619.3174 617.198 614.57477 611.4697 607.91004 603.93177 599.5831 594.89966 589.91974 584.6841 579.23505 573.6176 567.87775 562.0623 556.21955 550.39777 544.64515 539.0099 533.53937 528.27967 523.2759 518.5708 514.2049 510.21658 506.6412 503.51083 500.85385 498.694 497.0471 495.91748 495.3148 495.24503 495.7098 496.70593 498.22647 500.2594 502.78885 505.79395 509.25027 513.1285 517.3956 522.01496 526.9458 532.1442 537.56305 543.15217 548.8592 554.6287 560.4044 566.12787 571.73945 577.17957 582.3874 587.3028 591.8661 596.01844 599.7027 602.8634 605.4473 607.40455 608.6874 609.25245 609.0601 608.0748 606.26587 603.6075 600.079 595.6656 590.3576 584.152 577.0514 569.06464 560.207 550.4998 539.9711 528.65485 516.5915 503.82745 490.41473 476.4115 461.88232 446.9046 431.58038 416.02307 400.32706 384.588 368.90216 353.3656 338.07346 323.11957 308.5951 294.58856 281.1854 268.46655 256.50888 245.38372 235.15721 225.89002 217.63591 210.44248 204.35051 199.39374 195.59818 192.98337 191.56087 191.33513 192.30301 194.45377 197.77039 202.22776 207.7941 214.43135 222.09508 230.73444 240.29334 250.7103 261.9186 273.8476 286.42246 299.56464 313.19287 327.22394 341.57202 356.15015 370.8708 385.64594 400.38745 415.00613 429.41126 443.5184 457.25583 470.55515 483.35153 495.58438 507.1975 518.13916 528.3628 537.8264 546.49384 554.3342 561.3221 567.438 572.66797 577.00385 580.4433 582.98926 584.6506 585.44147 585.3815 584.49506 582.81177 580.36554 577.1948 573.3417 568.85267 563.7772 558.1681 552.08796 545.6248 538.8897 531.9732 524.9371 517.8435 510.75357 503.72733 496.82437 490.103 483.61804 477.42285 471.56732 466.09854 461.06085 456.49396 452.43366 448.9118 445.95566 443.58792 441.82657 440.6845 440.16965 440.28506 441.02838 442.3925 444.36527 446.9295 450.06335 453.7404 457.92938 462.5951 467.69824 473.19592 479.04163 485.1857 491.5762 498.15823 504.87518 511.66864 518.4791 525.2467 531.9103 538.40955 544.6844 550.6759 556.32654 561.58014 566.38294 570.68384 574.43494 577.59144 580.1125 581.9604 583.10267 583.51117 583.1625 582.03815 580.12464 577.41394 573.9037 569.5965 564.5007 558.6301 552.0041 544.6469 536.58875 527.8645 518.5141 508.58646 498.14722 487.27536 476.0439 464.51404 452.74844 440.8104 428.76297 416.66852 404.58664 392.57504 380.69333 369.0016 357.55756 346.41785 335.6369 325.26727 315.35898 305.95956 297.11417 288.8652 281.25287 274.3139 268.08218 262.58936 257.86325 253.92903 250.8095 248.5239 247.08834 246.51624 246.81797 248.00104 250.07004 253.02637 256.86868 261.5928 267.1919 273.65598 280.97247 289.126 298.09836 307.86893 318.41437 329.7084 341.7223 354.42468 367.78192 381.75793 396.31393 411.4086 426.9988 443.0386 459.48007 476.273 493.36545 510.70355 528.2309 545.88965 563.6203 581.3619 599.0522 616.62775 634.02375 651.1746 668.01447 684.47687 700.49476 716.0016 730.93085 745.21686 758.7947 771.601 783.5737 794.6525 804.77967 813.9001 821.96155 828.9152 834.71644 839.3245 842.70337 844.8219 845.65455 845.18067 843.38477 840.2619 835.82587 830.10675 823.14374 814.98304 805.6773 795.28595 783.87415 771.51264 758.2768 744.2466 729.50574 714.141 698.2422 681.9012 665.2109 648.2616 631.14045 613.9319 596.7192 579.58374 562.6048 545.85846 529.4179 513.35297 497.72934 482.60858 468.04782 454.09995 440.8128 428.22943 416.38757 405.32007 395.05472 385.61414 377.01553 369.27115 362.3883 356.36963 351.21317 346.912 343.45486 340.82654 339.00772 337.9755 337.70358 338.1626 339.32025 341.14142 343.58856 346.62262 350.20255 354.28592 358.829 363.78748 369.11627 374.76984 380.70288 386.87048 393.2279 399.7315 406.33777 413.00497 419.69296 426.3629 432.9769 439.49948 445.89755 452.13974 458.1964 464.04095 469.6486 474.99707 480.06686 484.84042 489.30652 493.467 497.3279 500.88593 504.13202 507.0587 509.66006 511.9313 513.8694 515.47327 516.74317 517.68036 518.28785 518.5702 518.53296 518.1834 517.53 516.5818 515.349 513.84357 512.0777 510.06464 507.81848 505.3542 502.68707 499.833 496.80866 493.6309 490.3168 486.88416 483.35034 479.73312 476.05005 472.3189 468.55722 464.78235 461.01126 457.26035 453.54593 449.8843 446.29092 442.77927 439.3608 436.04633 432.84625 429.77026 426.8272 424.02557 421.37317 418.87695 416.54303 414.3772 412.38483 410.57047 408.93777 407.4897 406.2287 405.15683 404.27518 403.58463 403.08533 402.77658 402.65747 402.72586 402.97934 403.41525 404.0302 404.82004 405.78043 406.90637 408.19205 409.6313 411.2179 412.94473 414.80426 416.78867 418.88965 421.09848 423.40576 425.80203 428.2773 430.82117 433.4227 436.07092 438.75446 441.46176 444.18124 446.9008 449.60806 452.29047 454.93585 457.53192 460.06607 462.52557 464.89822 467.1718 469.334 471.37262 473.27615 475.03317 476.63257 478.06348 479.3158 480.37967 481.24594 481.90628 482.35245 482.57706 482.57397 482.33774 481.8635 481.14734 480.18616 478.97867 477.52414 475.82266 473.8757 471.6859 469.257 466.59393 463.70334 460.59283 457.27084 453.7472 450.03345 446.1424 442.08734 437.8828 433.5447 429.09042 424.53815 419.90692 415.2164 410.48734 405.7411 400.99985 396.28653 391.62396 387.0407 382.57312 378.25348 374.10236 370.13245 366.35477 362.77948 359.41498 356.2685 353.3465 350.65466 348.1976 345.97836 343.99973 342.2636 340.76904 339.50616 338.45856 337.6136 336.96426 336.50555 336.23227 336.13992 336.22504 336.48496 336.91708 337.52023 338.29407 339.23868 340.35562 341.64838 343.12116 344.77792 346.62485 348.66907 350.91885 353.38376 356.07333 358.9983 362.17017 365.6017 369.30545 373.29404 377.58084 382.17908 387.1022 392.3628 397.97308 403.94507 410.28925 417.01535 424.13196 431.64554 439.561 447.88193 456.6094 465.742 475.27673 485.20657 495.52283 506.2138 517.2638 528.6549 540.36554 552.37195 564.6453 577.15467 589.8654 602.73975 615.73737 628.8143 641.924 655.0173 668.0417 680.9437 693.6679 706.15705 718.3525 730.19446 741.6231 752.5788 763.0022 772.8346 782.01844 790.4984 798.2213 805.13764 811.20044 816.3669 820.5983 823.86127 826.1273 827.37256 827.5841 826.76777 824.9453 822.1474 818.4105 813.776 808.2892 801.98664 794.897 787.0576 778.5181 769.33344 759.56006 749.25605 738.4806 727.2916 715.7475 703.9049 691.82074 679.55054 667.1483 654.6653 642.1517 629.6545 617.2192 604.8885 592.7017 580.6967 568.9077 557.36676 546.1031 535.14234 524.50837 514.2228 504.30325 494.76575 485.62442 476.89047 468.57285 460.67892 453.2139 446.18103 439.58246 433.41858 427.6881 422.38892 417.51767 413.07016 409.04114 405.42484 402.2146 399.40295 396.9826 394.9455 393.2836 391.9886 391.0517 390.4642 390.2183 390.30454 390.7148 391.44064 392.47376 393.80576 395.42883 397.33453 399.51605 401.96567 404.67526 407.63803 410.8468 414.29422 417.974 421.8783 426.00067 430.33347 434.8825 439.66098 444.6713 449.9047 455.34848 460.98904 466.8119 472.80188 478.94254 485.2187 491.61255 498.10672 504.68277 511.32117 518.0035 524.7098 531.42084 538.11554 544.7733 551.3735 557.8948 564.31635 570.6166 576.7747 582.7689 588.579 594.18476 599.56434 604.6976 609.56556 614.1486 618.4003 622.2766 625.7519 628.8129 631.449 633.6512 635.41236 636.72706 637.5918 638.0049 637.96607 637.4764 636.5399 635.1604 633.3452 631.10206 628.4409 625.3723 621.9089 618.065 613.85547 609.29706 604.40717 599.20514 593.71106 587.94495 581.9292 575.6859 569.2398 562.6137 555.8316 548.9187 541.90094 534.8036 527.6523 520.47327 513.292 506.13406 499.0253 491.9903 485.05396 478.24088 471.57404 465.07663 458.7713 452.67838 446.81775 441.20276 435.8455 430.7561 425.94223 421.41248 417.17325 413.23105 409.5908 406.2556 403.22995 400.51453 398.11197 396.022 394.24457 392.77936 391.62354 390.77576 390.2318 389.9881 390.04114 390.38535 391.0148 391.9238 393.10635 394.5551 396.2624 398.22177 400.42282 402.85886 405.52063 408.39917 411.48465 414.76913 418.2416 421.89233 425.71155 429.68863 433.81348 438.07678 442.46637 446.97433 451.58765 456.29755 461.09247 465.963 470.89734 475.88705 480.92126 485.98914 491.082 496.18857 501.29974 506.40552 511.47907 516.50354 521.4697 526.3715 531.1989 535.94605 540.60645 545.1719 549.6343 553.9878 558.22455 562.3366 566.3167 570.159 573.85395 577.3971 580.7791 583.9924 587.0319 589.88764 592.5549 595.0255 597.29267 599.3348 601.13697 602.6861 603.9735 604.9886 605.7207 606.1619 606.3023 606.1334 605.64655 604.8345 603.6887 602.2044 600.3738 598.1916 595.6526 592.7533 589.4885 585.8561 581.8529 577.4802 572.73377 567.61567 562.12586 556.2674 550.0421 543.4534 536.50654 529.2063 521.5604 513.5757 505.26126 496.62393 487.67725 478.43063 468.89835 459.09042 449.0244 438.71375 428.17682 417.4275 406.48517 395.36884 384.10083 372.6962 361.179 349.5714 337.89676 326.17563 314.43393 302.6945 290.985 279.32666 267.74606 256.27 244.92455 233.73268 222.72316 211.91945 201.35169 191.0403 181.01233 171.29282 161.90647 152.87532 144.224 135.97345 128.14531 120.76077 113.83877 107.39903 101.45635 96.027565 91.12729 86.76968 82.96453 79.16272)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (136.72769 141.45835 146.60497 152.16944 158.15343 164.55779 171.38152 178.62363 186.28145 194.3513 202.82822 211.70688 220.98036 230.64061 240.67842 251.08402 261.8462 272.9522 284.38904 296.14233 308.1965 320.53506 333.1408 345.99512 359.07892 372.37177 385.85284 399.50024 413.29163 427.2034 441.21194 455.2924 469.4199 483.56885 497.7132 511.827 525.8833 539.8552 553.7161 567.4387 580.99604 594.3612 607.5072 620.4078 633.0366 645.3675 657.3753 669.0353 680.3228 691.21454 701.6878 711.72046 721.29157 730.38105 738.97004 747.04065 754.576 761.56116 767.9816 773.82477 779.0796 783.7356 787.7849 791.2206 794.0374 796.23175 797.8018 798.747 799.0689 798.7703 797.856 796.33246 794.20765 791.4911 788.1947 784.3308 779.9147 774.96186 769.4903 763.5191 757.0696 750.1636 742.8244 735.0771 726.9471 718.46106 709.6468 700.53345 691.1494 681.5252 671.6913 661.6785 651.51807 641.2416 630.88086 620.468 610.03394 599.61017 589.2281 578.9177 568.70954 558.6329 548.7164 538.9878 529.474 520.20087 511.19305 502.47385 494.06567 485.98843 478.2618 470.9031 463.92865 457.35214 451.18643 445.44254 440.12918 435.2532 430.82034 426.83398 423.2959 420.20554 417.5609 415.35852 413.59216 412.25528 411.33838 410.83118 410.7217 410.99622 411.63983 412.6365 413.96887 415.61844 417.56607 419.79135 422.2734 424.9907 427.92102 431.04218 434.3315 437.7662 441.3236 444.9814 448.71722 452.50925 456.33646 460.17792 464.014 467.82602 471.59573 475.3064 478.9423 482.48746 485.9183 489.19196 492.2637 495.11945 497.74823 500.14117 502.29318 504.20126 505.86566 507.2886 508.47525 509.43344 510.17285 510.70563 511.04584 511.20947 511.21445 511.07962 510.82517 510.4727 510.0442 509.5626 509.051 508.53278 508.0311 507.56845 507.16733 506.84882 506.63345 506.54007 506.58637 506.78848 507.16046 507.71433 508.4601 509.40524 510.55542 511.91327 513.479 515.25007 517.2217 519.3861 521.7331 524.24946 526.92 529.72644 532.64466 535.6411 538.6797 541.7335 544.7754 547.77857 550.7165 553.5631 556.2936 558.88337 561.3098 563.5516 565.5882 567.40186 568.97596 570.296 571.349 572.1245 572.61475 572.8128 572.7145 572.3176 571.62256 570.6311 569.3476 567.77826 565.9309 563.8152 561.4429 558.82715 555.98114 552.9169 549.64307 546.17145 542.51844 538.70136 534.7383 530.64814 526.45 522.16437 517.81134 513.41114 508.98404 504.5505 500.1307 495.74466 491.41183 487.15094 482.98087 478.9191 474.98248 471.18622 467.54532 464.074 460.78598 457.6935 454.80832 452.14084 449.69995 447.4943 445.5306 443.8151 442.3526 441.1466 440.19995 439.51413 439.08963 438.92584 439.02112 439.37293 439.97794 440.83185 441.92932 443.26444 444.8302 446.6192 448.62323 450.83337 453.24033 455.8343 458.60498 461.54138 464.63232 467.86633 471.23178 474.71668 478.30856 481.99542 485.7649 489.60446 493.50165 497.4443 501.41986 505.41614 509.42123 513.42316 517.41034 521.37146 525.2955 529.1738 533.00397 536.7886 540.52564 544.20716 547.8247 551.3699 554.83387 558.20264 561.4527 564.5594 567.51056 570.29926 572.92 575.3672 577.63605 579.7217 581.61994 583.32715 584.84064 586.15754 587.2757 588.1939 588.91095 589.4264 589.7404 589.8537 589.7677 589.48426 589.0057 588.3351 587.4759 586.4324 585.2092 583.8117 582.24567 580.51716 578.63306 576.60065 574.42786 572.1227 569.6937 567.1498 564.5003 561.75507 558.92365 556.01655 553.04395 550.01636 546.9447 543.8395 540.71137 537.5713 534.43 531.298 528.18555 525.10297 522.06025 519.0667 516.1316 513.2637 510.47122 507.76157 505.14206 502.6194 500.19885 497.88513 495.68268 493.5945 491.62308 489.77 488.03543 486.41882 484.91858 483.5321 482.25552 481.0841 480.01187 479.0319 478.1362 477.31583 476.56043 475.85895 475.19934 474.56604 473.9326 473.26236 472.5275 471.7147 470.81418 469.81757 468.71765 467.50793 466.18283 464.73785 463.1694 461.47467 459.6518 457.6998 455.618 453.40283 451.04544 448.53793 445.87985 443.07504 440.12875 437.04678 433.83563 430.50275 427.0561 423.5043 419.85666 416.1229 412.31348 408.4392 404.51126 400.54102 396.5405 392.5217 388.4968 384.4782 380.4785 376.51025 372.58597 368.71802 364.9189 361.20096 357.57596 354.05554 350.65125 347.37415 344.23502 341.24414 338.41116 335.74524 333.255 330.9489 328.8343 326.91763 325.20526 323.70236 322.41327 321.3418 320.49097 319.86322 319.4596 319.27994 319.3241 319.5911 320.07834 320.78293 321.70078 322.82636 324.15387 325.6771 327.38858 329.28027 331.343 333.56686 335.94162 338.4561 341.09818 343.85327 346.70645 349.6457 352.66064 355.74097 358.87592 362.05478 365.26715 368.5027 371.75095 375.00208 378.24652 381.4754 384.68045 387.85394 390.98846 394.07797 397.11758 400.10324 403.03186 405.90167 408.71213 411.46414 414.1601 416.80353 419.39966 421.95532 424.47894 426.98022 429.47052 431.96262 434.47107 437.01184 439.6021 442.26053 445.00662 447.86102 450.8466 453.98953 457.31708 460.8531 464.61752 468.62927 472.906 477.46375 482.3173 487.48026 492.96494 498.7816 504.9385 511.44232 518.2973 525.5055 533.0672 540.9801 549.2397 557.83875 566.7679 576.0155 585.5677 595.4079 605.5171 615.874 626.4557 637.2368 648.19 659.28547 670.49256 681.7789 693.1102 704.4509 715.76404 727.0124 738.1578 749.161 759.98237 770.5825 780.9219 790.9603 800.6589 809.9796 818.88495 827.338 835.3033 842.74744 849.6381 855.94434 861.63764 866.69147 871.08155 874.78577 877.7844 880.0608 881.60047 882.3919 882.42695 881.6995 880.2069 877.94904 874.9292 871.1534 866.6304 861.37214 855.3935 848.71186 841.3474 833.3225 824.6623 815.3946 805.5491 795.1575 784.2532 772.87146 761.0496 748.8257 736.2393 723.331 710.1418 696.7133 683.08765 669.3074 655.4151 641.45246 627.4609 613.4811 599.5534 585.71705 572.0093 558.46686 545.1246 532.01514 519.1699 506.61798 494.3865 482.5002 470.98154 459.8506 449.12476 438.818 428.94016 419.49753 410.49377 401.9302 393.80545 386.11575 378.85486 372.0143 365.58368 359.55075 353.9012 348.61908 343.68658 339.08133 334.76633 330.69626 326.8353 323.15732 319.63876 316.25656 312.98758 309.8083 306.69595 303.62866 300.585 297.54428 294.48764 291.39667 288.25412 285.0445 281.75314 278.368 274.87836 271.27466 267.54923 263.69666 259.7133 255.59755 251.34946 246.9711 242.46623 237.84069 233.10251 228.2612 223.32802 218.31623 213.24039 208.11676 202.96326 197.79915 192.64496 187.5222 182.45337 177.46213 172.57282 167.81066 163.20134 158.77059 154.54445 150.5489 146.8104 143.3547 140.20725 137.3926 134.9353 132.85848 131.18419 129.93354 129.12667 128.7818 128.9154 129.54247 130.67607 132.32764 134.5064 137.21945 140.47136 144.26454 148.59926 153.47277 158.88007 164.81392 171.26447 178.21897 185.66234 193.5775 201.94403 210.73926 219.9388 229.51506 239.41869 249.5587 259.84857 270.23822 280.6975 291.2003 301.7214 312.23773 322.72543 333.16245 343.5313 353.8165 364.00446 374.08292 384.04074 393.8679 403.5552 413.09412 422.47714 431.69647 440.74612 449.62036 458.3138 466.8212 475.138 483.25946 491.18137 498.8998 506.41074 513.71015 520.7945 527.6592 534.30024 540.7141 546.89716 552.84485 558.553 564.0179 569.2351 574.2 578.90925 583.35834 587.54346 591.4604 595.1057 598.47577 601.5676 604.37757 606.9036 609.14344 611.0954 612.7581 614.13105 615.2147 616.0098 616.5173 616.7398 616.6805 616.34595 615.74335 614.88 613.76404 612.403 610.8064 608.98444 606.94855 604.7105 602.28425 599.6834 596.92395 594.021 590.99305 587.858 584.63404 581.34125 578.00104 574.63367 571.2356 567.78656 564.2835 560.7422 557.18604 553.6372 550.1201 546.65796 543.2741 539.9927 536.836 533.8254 530.9828 528.329 525.88434 523.6673 521.6951 519.98377 518.54834 517.40107 516.55365 516.016 515.79474 515.8959 516.32264 517.0755 518.1542 519.55555 521.2731 523.29914 525.62397 528.2191 531.05164 534.0924 537.31556 540.6964 544.20844 547.8256 551.5212 555.26935 559.04377 562.8189 566.56977 570.2719 573.9018 577.43647 580.85517 584.13666 587.2615 590.21277 592.9736 595.5287 597.86426 599.96814 601.8295 603.4392 604.78956 605.87397 606.68824 607.22944 607.49457 607.48346 607.19654 606.63605 605.8057 604.7093 603.3524 601.74134 599.88367 597.78797 595.4627 592.91816 590.16456 587.21314 584.0746 580.76215 577.2878 573.65546 569.8686 565.93274 561.8577 557.65284 553.3277 548.8926 544.3571 539.73096 535.02515 530.2484 525.412 520.5248 515.59656 510.6374 505.65707 500.66348 495.6671 490.67538 485.6981 480.74194 475.81564 470.9267 466.08292 461.2905 456.55606 451.88586 447.28665 442.76453 438.32233 433.96814 429.70474 425.53708 421.46896 417.5049 413.64697 409.9 406.2651 402.7472 399.3469 396.06616 392.90692 389.87146 386.96146 384.17715 381.51962 378.9905 376.58942 374.3166 372.17224 370.1578 368.2717 366.51355 364.88345 363.35867 361.92938 360.59744 359.3664 358.2393 357.2189 356.3088 355.5118 354.83014 354.26755 353.8262 353.50848 353.31738 353.25504 353.3233 353.52448 353.86105 354.3342 354.94608 355.69748 356.59048 357.62598 358.8049 360.14298 361.6477 363.3199 365.15817 367.1629 369.33325 371.66776 374.16522 376.82437 379.64362 382.62152 385.75497 389.04205 392.48013 396.0668 399.7995 403.67392 407.6874 411.83643 416.1167 420.52322 425.055 429.70435 434.46744 439.3406 444.3174 449.39298 454.56253 459.8193 465.1586 470.5732 476.05722 481.60635 487.21115 492.8665 498.5649 504.30145 510.0669 515.85535 521.6583 527.4698 533.2817 539.08704 544.87635 550.64515 556.3831 562.0846 567.7399 573.3429 578.884 584.3592 589.7563 595.07135 600.29444 605.4181 610.4362 615.34144 620.12696 624.7843 629.30787 633.6903 637.9253 642.00727 645.92847 649.6844 653.2689 656.6757 659.90284 662.9421 665.7894 668.44086 670.89435 673.1434 675.18586 677.0199 678.642 680.2628)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (457.2231 459.1043 461.4548 464.29285 467.63406 471.491 475.87314 480.78662 486.23444 492.21603 498.7277 505.76196 513.3081 521.35187 529.87574 538.8587 548.2765 558.1016 568.3039 578.84955 589.7026 600.824 612.17255 623.7048 635.375 647.1361 658.93897 670.73346 682.4681 694.0912 705.55 716.79175 727.7636 738.41346 748.6895 758.54065 767.9177 776.7724 785.05835 792.73127 799.749 806.07215 811.6639 816.4904 820.52137 823.72907 826.0902 827.5847 828.1965 827.9131 826.7265 824.6328 821.63196 817.7282 812.93 807.2502 800.7053 793.3163 785.10785 776.10877 766.351 755.87134 744.70856 732.9055 720.5076 707.5632 694.1234 680.24146 665.97254 651.37354 636.5029 621.42035 606.186 590.86097 575.5065 560.18354 544.95264 529.876 515.0258 500.49103 486.32755 472.58954 459.32855 446.59375 434.4308 422.88254 411.98825 401.78366 392.30066 383.56717 375.60693 368.43976 362.08084 356.541 351.82697 347.9408 344.8801 342.63824 341.204 340.562 340.69305 341.57498 343.18317 345.48544 348.44653 352.02722 356.18494 360.87466 366.048 371.65466 377.64172 383.95474 390.53754 397.3328 404.28217 411.32697 418.40796 425.46634 432.44397 439.283 445.9267 452.3204 458.41064 464.1465 469.47934 474.3632 478.75494 482.61517 485.9076 488.5997 490.6629 492.0727 492.8091 492.85626 492.20294 490.84247 488.7729 485.99695 482.52213 478.3604 473.52853 468.04782 461.94406 455.24713 447.99103 440.21396 431.95782 423.26764 414.192 404.78253 395.09283 385.17972 375.1013 364.9201 354.7146 344.59424 334.66132 324.95963 315.52933 306.40686 297.62598 289.2166 281.20554 273.61655 266.47067 259.78665 253.58036 247.86579 242.65485 237.95778 233.78343 230.13936 227.03176 224.46631 222.44754 220.9798 220.0667 219.71164 219.91782 220.68824 222.0258 223.93315 226.41301 229.46825 233.10141 237.315 242.11119 247.49185 253.4583 260.01157 267.15253 274.88028 283.19357 292.09006 301.56625 311.6174 322.23663 333.41602 345.14545 357.4124 370.1985 383.4737 397.20465 411.3666 425.93256 440.87363 456.1586 471.75394 487.62442 503.7329 520.04 536.50415 553.0827 569.73114 586.4035 603.0527 619.62995 636.08606 652.3708 668.4332 684.22297 699.68854 714.7791 729.44416 743.6338 757.299 770.392 782.86615 794.67664 805.7808 816.139 825.7172 834.4854 842.40857 849.449 855.57264 860.74884 864.9516 868.15815 870.35035 871.5144 871.64124 870.7259 868.7682 865.77265 861.7485 856.709 850.67225 843.66144 835.7036 826.83057 817.0784 806.4875 795.1006 782.9646 770.12977 756.6493 742.5789 727.9774 712.90516 697.4254 681.60206 665.50037 649.1873 632.7295 616.194 599.648 583.1577 566.7885 550.605 534.6694 519.0422 503.78195 488.94403 474.58124 460.7432 447.4753 434.81955 422.81433 411.49316 400.88525 391.01514 381.90256 373.56247 366.00494 359.23468 353.25153 348.05048 343.62097 339.94812 337.012 334.7878 333.24634 332.35428 332.07382 332.36386 333.17972 334.4732 336.19345 338.2858 340.68988 343.34067 346.17484 349.13336 352.1577 355.1894 358.17133 361.04852 363.77155 366.29907 368.5951 370.62656 372.3636 373.7797 374.85153 375.55966 375.88834 375.82553 375.3631 374.49667 373.22617 371.55536 369.49152 367.04578 364.23328 361.07254 357.58563 353.7979 349.7376 345.4362 340.92786 336.249 331.43842 326.5368 321.58643 316.63092 311.7151 306.8844 302.18448 297.66135 293.36072 289.32776 285.60657 282.2401 279.26978 276.73505 274.67316 273.11884 272.10434 271.6589 271.8087 272.57587 273.9796 276.035 278.75342 282.14203 286.20398 290.93863 296.34058 302.40048 309.10544 316.4382 324.37756 332.8986 341.97293 351.56894 361.6517 372.1834 383.12408 394.43137 406.0607 417.96628 430.1011 442.41724 454.86652 467.40033 479.9706 492.5302 505.03284 517.4338 529.6901 541.761 553.60767 565.1995 576.5301 587.6161 598.4629 609.0497 619.34864 629.3315 638.9698 648.235 657.0982 665.5306 673.5037 680.9897 687.96155 694.3934 700.2597 705.53455 710.1919 714.2105 717.5782 720.28797 722.3356 723.7192 724.43964 724.5006 723.9085 722.6722 720.80274 718.31434 715.2237 711.54957 707.3132 702.53797 697.2489 691.4736 685.24115 678.58216 671.5286 664.11426 656.3736 648.34156 640.05426 631.54847 622.8606 614.028 605.08735 596.0749 587.0268 577.9784 568.9643 560.0177 551.1709 542.4545 533.8981 525.52894 517.3729 509.45374 501.7932 494.41113 487.3253 480.55096 474.10104 467.98572 462.21356 456.79047 451.72015 447.00366 442.64026 438.62668 434.95743 431.625 428.62006 425.93137 423.546 421.4492 419.6248 418.0557 416.72205 415.5982 414.65387 413.8596 413.18777 412.61093 412.1021 411.6354 411.18585 410.72925 410.2427 409.70526 409.09763 408.4017 407.60144 406.68326 405.6359 404.44928 403.11612 401.6319 399.9936 398.2006 396.25473 394.16016 391.92307 389.551 387.05466 384.44663 381.74023 378.9512 376.0967 373.19495 370.2658 367.33032 364.40964 361.52564 358.70117 355.9594 353.3202 350.79285 348.38025 346.09088 343.94165 341.95282 340.1443 338.53497 337.14285 335.98523 335.0784 334.43756 334.07642 334.00687 334.23935 334.78317 335.6459 336.83325 338.34906 340.19492 342.371 344.87582 347.70563 350.8548 354.31564 358.07883 362.13376 366.46783 371.06653 375.914 380.99326 386.2855 391.77078 397.42828 403.23618 409.17145 415.21054 421.3297 427.5043 433.70932 439.9196 446.11002 452.25613 458.33347 464.31757 470.18543 475.91467 481.4836 486.87146 492.05875 497.02676 501.7585 506.2382 510.4512 514.385 518.0286 521.3724 524.4083 527.1302 529.5336 531.6159 533.3756 534.8134 535.9317 536.7339 537.22516 537.41224 537.30347 536.90815 536.237 535.3017 534.1153 532.6914 531.04474 529.1902 527.14344 524.92115 522.54 520.0166 517.3679 514.6111 511.76288 508.83945 505.8569 502.83115 499.777 496.70963 493.64294 490.58945 487.561 484.569 481.62384 478.73523 475.9109 473.15793 470.48248 467.8895 465.383 462.96545 460.63898 458.40714 456.27438 454.2438 452.31516 450.4856 448.751 447.10635 445.54617 444.06445 442.65442 441.30884 440.01993 438.78018 437.58157 436.41595 435.274 434.14212 433.00684 431.8604 430.70035 429.52628 428.33868 427.13824 425.92657 424.70645 423.48114 422.25467 421.03168 419.8177 418.619 417.4422 416.29425 415.18314 414.11685 413.10327 412.15118 411.26904 410.46542 409.74893 409.1278 408.60986 408.20206 407.9115 407.7447 407.70657 407.80106 408.03207 408.40247 408.91354 409.5647 410.354 411.28012 412.339 413.52466 414.8304 416.24857 417.76984 419.38315 421.0766 422.8375 424.65115 426.50275 428.377 430.25745 432.12704 433.96912 435.76654 437.5018 439.1586 440.7211 442.17432 443.50366 444.69647 445.7417 446.62967 447.35294 447.906 448.28607 448.4932 448.52963 448.4006 448.1145 447.68277 447.12036 446.44498 445.67758 444.84244 443.96634 443.08035 442.217 441.4115 440.70227 440.13788 439.78476 439.7048 439.94174 440.5287 441.49402 442.86325 444.65857 446.90533 449.63138 452.8558 456.58746 460.82993 465.58405 470.84686 476.6119 482.8693 489.60696 496.81003 504.46054 512.5383 521.0216 529.8866 539.1073 548.6559 558.504 568.6227 578.9806 589.54627 600.28797 611.1741 622.1722 633.2498 644.3757 655.5182 666.64576 677.7281 688.7361 699.64057 710.41364 721.0282 731.45936 741.6818 751.6728 761.41065 770.87446 780.0438 788.90204 797.4323 805.6187 813.4481 820.9074 827.98517 834.6717 840.95795 846.83704 852.30237 857.3487 861.974 866.17835 869.9613 873.3231 876.26386 878.7844 880.8873 882.57465 883.8504 884.7181 885.1825 885.24915 884.9234 884.2114 883.11976 881.656 879.8269 877.63996 875.10297 872.2139 868.95917 865.3289 861.32227 856.9393 852.18177 847.052 841.5521 835.68476 829.4543 822.8639 815.9184 808.62256 800.982 793.0028 784.6912 776.05396 767.09925 757.8346 748.269 738.4111 728.2705 717.8579 707.1836 696.25965 685.09705 673.7088 662.10706 650.30555 638.31885 626.16144 613.85614 601.4274 588.89307 576.2687 563.5699 550.8111 538.00824 525.17774 512.3365 499.5012 486.6878 473.91473 461.19907 448.55862 436.0118 423.576 411.2701 399.1123 387.1207 375.3141 363.71143 352.3311 341.19037 330.30756 319.70102 309.38712 299.38312 289.7054 280.3699 271.39197 262.78723 254.56807 246.74735 239.33713 232.34882 225.79056 219.67133 213.99878 208.77674 204.01004 199.70038 195.84876 192.45429 189.51354 187.02068 184.9695 183.3219 182.03284 181.07105 180.41043 180.02713 179.89626 179.99269 180.2907 180.76575 181.39272 182.14488 182.99872 183.93033 184.9156 185.93152 186.95616 187.96762 188.94551 189.87055 190.72388 191.48973 192.15105 192.69281 193.10199 193.36617 193.475 193.41861 193.18903 192.77933 192.18456 191.40013 190.42305 189.25247 187.88826 186.33129 184.58367 182.64943 180.53275 178.23946 175.77547 173.14943 170.36948 167.4452 164.38652 161.2043 157.90987 154.51622 151.03562 147.48097 143.86603 140.20497 136.51126 132.80065 129.08614 125.39726 121.753136 118.17285 114.67066 111.263954 107.966545 104.79549 101.765236 98.89003 96.18412 93.66199 91.33785 89.224144 87.33382 85.679 84.27237 83.1241 82.2439 81.642746 81.32925 81.31296 81.60112 82.19958 83.05955 84.159905 85.50058 87.0858 88.92152 91.009796 93.35513 95.963394 98.83571 101.97765 105.393524 109.08691 113.057976 117.314514 121.85735 126.69112 131.81606 137.23668 142.95507 148.97344 155.29192 161.91374 168.83844 176.06844 183.60231 191.44077 199.58429 208.03022 216.77936 225.82573 235.16973 244.80774 254.73697 264.95105 275.4463 286.2154 297.2559 308.5587 320.11603 331.9182 343.95932 356.22845 368.71503 381.40506 394.29126 407.358 420.5929 433.9795 447.5063 461.15543 474.91235 488.7572 502.67606 516.64985 530.6586 544.68274 558.7064 572.7068 586.6653 600.5575 614.36786 628.0751 641.6568 655.0909 668.35926 681.43976 694.31537 706.9627 719.36286 731.4979 743.3473 754.89734 766.12836 777.0269 787.5738 797.75965 807.9443)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (394.11328 391.65265 389.3258 387.13727 385.0913 383.1923 381.44406 379.85037 378.4147 377.1405 376.03067 375.088 374.31497 373.71387 373.28662 373.03473 372.95972 373.0625 373.344 373.8044 374.44397 375.26227 376.25882 377.43268 378.78265 380.30692 382.00366 383.87045 385.90472 388.10318 390.4627 392.97925 395.6489 398.46704 401.4289 404.52927 407.76254 411.12305 414.60437 418.2001 421.90344 425.7071 429.60388 433.58588 437.64517 441.7735 445.9624 450.203 454.4867 458.8041 463.1462 467.50336 471.86603 476.22473 480.5696 484.8907 489.17868 493.42328 497.61475 501.74347 505.79977 509.77383 513.6564 517.4381 521.1101 524.6633 528.0892 531.37934 534.5258 537.52106 540.3577 543.029 545.5285 547.8503 549.9886 551.93885 553.6968 555.2606 556.642 557.8705 558.9406 559.8465 560.58344 561.1467 561.53205 561.7358 561.75495 561.58674 561.22895 560.6801 559.9394 559.0064 557.8818 556.5666 555.06275 553.37275 551.5003 549.4493 547.2248 544.833 542.28046 539.57465 536.7239 533.73774 530.6265 527.40125 524.07447 520.65925 517.16956 513.6202 510.02725 506.40717 502.77753 499.15677 495.564 492.01865 488.54163 485.1537 481.8765 478.73224 475.74353 472.9329 470.3231 467.9376 465.79886 463.93008 462.35364 461.09152 460.16553 459.59622 459.40338 459.60602 460.22144 461.26553 462.7532 464.6967 467.10675 469.99188 473.35794 477.2083 481.54395 486.3625 491.6582 497.42276 503.64404 510.30634 517.3901 524.87244 532.72657 540.92115 549.4217 558.1895 567.1818 576.35047 585.6329 594.93775 604.17 613.2698 622.1778 630.83674 639.19025 647.1841 654.7666 661.8886 668.504 674.56995 680.04694 684.8992 689.0949 692.6063 695.40955 697.4849 698.81727 699.3956 699.2129 698.267 696.55927 694.09577 690.88617 686.94416 682.2874 676.93677 670.91706 664.25574 656.98395 649.13495 640.7452 631.85285 622.4985 612.72437 602.5746 592.0943 581.3294 570.32685 559.1336 547.7973 536.3648 524.88294 513.3977 501.95422 490.59705 479.36862 468.3083 457.45007 446.82465 436.46027 426.38266 416.61462 407.1759 398.08395 389.35315 380.9954 373.02 365.43433 358.2427 351.44727 345.04825 339.0441 333.43106 328.20404 323.35596 318.87888 314.7635 310.9988 307.5734 304.4751 301.6906 299.2067 297.00894 295.0828 293.40613 291.93408 290.60364 289.3785 288.2536 287.2247 286.28818 285.44122 284.6822 284.01022 283.42465 282.92627 282.51663 282.1978 281.97275 281.84515 281.8192 281.89966 282.09186 282.40164 282.83603 283.40274 284.11008 284.9662 285.97934 287.15726 288.50772 290.03833 291.75623 293.66803 295.77954 298.09616 300.62238 303.36185 306.31726 309.48993 312.8806 316.48837 320.3109 324.34494 328.5855 333.0265 337.66022 342.47733 347.46707 352.6172 357.914 363.34222 368.88544 374.52545 380.24274 386.01694 391.8266 397.64902 403.4605 409.23685 414.95294 420.58337 426.10272 431.4854 436.70554 441.7378 446.55786 451.14124 455.4651 459.50797 463.24933 466.67062 469.7552 472.48645 474.84726 476.8203 478.39536 479.57028 480.34622 480.728 480.7236 480.3449 479.61032 478.5444 477.17447 475.5297 473.64032 471.5376 469.25317 466.81958 464.2694 461.63486 458.9481 456.24088 453.54398 450.88715 448.299 445.80676 443.4362 441.2113 439.15442 437.2857 435.62332 434.1833 432.97958 432.02408 431.32596 430.89218 430.72775 430.83514 431.21475 431.86478 432.78107 433.95786 435.38712 437.059 438.96213 441.0834 443.408 445.91995 448.602 451.43573 454.40204 457.48087 460.65134 463.89227 467.18228 470.49942 473.82193 477.1282 480.39655 483.60577 486.7353 489.7652 492.6759 495.4488 498.06653 500.51205 502.76987 504.82587 506.6669 508.2808 509.65707 510.7866 511.66153 512.2755 512.6235 512.7019 512.50885 512.04346 511.30643 510.29977 509.02707 507.4928 505.70288 503.66434 501.3856 498.87393 496.12943 493.14282 489.90796 486.42844 482.71106 478.7646 474.59912 470.2259 465.65744 460.9078 455.9924 450.9281 445.73257 440.42477 435.02496 429.55225 424.02475 418.46115 412.8824 407.3113 401.77176 396.28842 390.88647 385.59122 380.42822 375.42337 370.6027 365.9913 361.61438 357.49677 353.66248 350.13464 346.93533 344.0857 341.60562 339.51343 337.8259 336.55826 335.72388 335.33414 335.39847 335.92398 336.9156 338.3761 340.30588 342.70285 345.56253 348.8782 352.64063 356.83795 361.45575 366.47748 371.88455 377.65622 383.76883 390.19733 396.91516 403.89337 411.1017 418.50836 426.08014 433.78345 441.58368 449.4453 457.33255 465.20972 473.04083 480.7906 488.42392 495.90698 503.20642 510.29065 517.12915 523.6933 529.9566 535.8945 541.4843 546.7051 551.5394 555.97394 559.999 563.6084 566.79834 569.56794 571.919 573.85596 575.3859 576.5184 577.2652 577.6403 577.6596 577.3411 576.70405 575.7692 574.559 573.09656 571.4057 569.51117 567.43824 565.21186 562.8574 560.39985 557.8637 555.27326 552.6517 550.0216 547.4043 544.8198 542.28724 539.82404 537.4464 535.1685 533.00336 530.96247 529.05634 527.29676 525.69776 524.2725 523.0315 521.9824 521.13135 520.48194 520.03644 519.7952 519.7561 519.91565 520.26905 520.809 521.52717 522.4135 523.45667 524.6441 525.96216 527.3965 528.93134 530.55054 532.23755 533.97504 535.746 537.53296 539.3184 541.0851 542.8164 544.496 546.10804 547.63727 549.06977 550.39246 551.5927 552.6594 553.5831 554.3549 554.9672 555.4141 555.69104 555.7947 555.72284 555.4747 555.05097 554.4539 553.68665 552.7529 551.6582 550.4089 549.01197 547.4752 545.80707 544.0168 542.11384 540.10834 538.00995 535.8286 533.5743 531.2564 528.88465 526.4678 524.0141 521.53107 519.02546 516.503 513.96845 511.42554 508.87686 506.3238 503.76636 501.2034 498.63217 496.049 493.44864 490.82437 488.16855 485.4723 482.72522 479.9163 477.03336 474.0631 470.99152 467.804 464.48572 461.02118 457.3944 453.5895 449.59085 445.38312 440.95126 436.28064 431.3575 426.1693 420.70456 414.95267 408.9046 402.55347 395.89352 388.9211 381.63516 374.037 366.1311 357.92285 349.41913 340.6292 331.5645 322.239 312.6684 302.871 292.8677 282.68164 272.3378 261.86337 251.28812 240.64382 229.96636 219.29494 208.66788 198.12384 187.70217 177.44365 167.39019 157.58422 148.0692 138.88892 130.08736 121.708664 113.79663 106.39488 99.54573 93.2909 87.67079 82.72469 78.49012 75.00223 72.29401 70.39618 69.33713 69.14183 69.83239 71.42746 73.942536 77.38964 81.776436 87.10713 93.38226 100.59763 108.745285 117.81373 127.78599 138.64151 150.35634 162.90224 176.24626 190.35214 205.18048 220.6876 236.82666 253.54837 270.79956 288.52472 306.66696 325.1662 343.96133 362.98914 382.18564 401.48657 420.82642 440.14026 459.3636 478.43173 497.28162 515.8516 534.0817 551.9136 569.292 586.1638 602.4792 618.1914 633.25715 647.63715 661.29596 674.2022 686.3289 697.65345 708.1578 717.8286 726.65735 734.6392 741.77546 748.07105 753.53614 758.19025 762.06134 765.1834 767.5921 769.32544 770.42414 770.9296 770.8806 770.3126 769.2645 767.77796 765.8966 763.6638 761.1214 758.3111 755.2743 752.05 748.6765 745.1903 741.6264 738.0173 734.39374 730.784 727.2147 723.70984 720.2911 716.9779 713.787 710.7332 707.8292 705.0849 702.50776 700.10334 697.8752 695.82496 693.9519 692.25336 690.7254 689.3619 688.1547 687.0955 686.17347 685.37684 684.69245 684.1069 683.6045 683.16944 682.78547 682.43494 682.1002 681.7629 681.4043 681.00495 680.5467 680.0101 679.3758 678.625 677.7353 676.68287 675.4463 674.0072 672.34675 670.4478 668.29474 665.87085 663.1613 660.1527 656.83204 653.18714 649.20795 644.88465 640.20887 635.17395 629.774 624.00434 617.8624 611.3436 604.4398 597.1424 589.44446 581.34174 572.83185 563.9139 554.58814 544.85596 534.7216 524.1903 513.2698 501.9697 490.30023 478.27502 465.90894 453.21936 440.22534 426.94708 413.40808 399.63275 385.64816 371.48245 357.16617 342.73044 328.20956 313.63803 299.05243 284.49057 269.9911 255.59403 241.35643 227.3337 213.5707 200.10315 186.96706 174.1964 161.8253 149.88639 138.41028 127.4284 116.96994 107.06287 97.73378 89.008644 80.91076 73.46366 66.68858 60.604992 55.230793 50.582508 46.674714 43.520485 41.131024 39.5153 38.68079 38.632496 39.373814 40.906063 43.228024 46.336426 50.22575 54.888524 60.314106 66.49034 73.402504 81.032715 89.36239 98.36822 108.02609 118.309235 129.18856 140.63217 152.60672 165.07695 178.00388 191.34825 205.04114 219.00934 233.19384 247.54399 262.01022 276.54623 291.10614 305.6474 320.1272 334.50534 348.7455 362.8112 376.66922 390.28888 403.64276 416.70325 429.4478 441.8553 453.90704 465.58768 476.88184 487.77963 498.27167 508.34958 518.00977 527.24854 536.06495 544.46045 552.43665 559.9973 567.149 573.8979 580.252 586.22016 591.81324 597.0424 601.9187 606.4556 610.6649 614.5619 618.1584 621.47107 624.5114 627.29615 629.83936 632.1544 634.2554 636.15754 637.8738 639.41944 640.805 642.0438 643.15 644.13245 645.0024 645.7668 646.43354 647.01197 647.5074 647.92804 648.2811 648.57117 648.8047 648.9867 649.1225 649.2153 649.2714 649.29224 649.2822 649.2445 649.18165 649.09675 648.99054 648.8661 648.72565 648.5698 648.4006 648.23914 648.1012 647.9942 647.9275 647.90625 647.9394 648.0322 648.1915 648.4224 648.731 649.12165 649.6 650.1691 650.8317 651.59205 652.4505 653.40845 654.46686 655.6268 656.8854 658.24134 659.6927 661.2335 662.86194 664.57117 666.35535 668.20765 670.11927 672.0827 674.08497 676.1174 678.1686 680.22577 682.2774 684.3071 686.3009 688.2447 690.1229 691.91907 693.6156 695.197 696.6464 697.94654 699.0795 700.02894 700.7776 701.3093 701.6076 701.6573 701.44416 700.9528 700.17084 699.0868 697.68915 695.9687 693.91755 691.52875 688.799 685.7227 682.30176 678.53406 674.42444 669.976 665.198 660.0988 654.68946 648.9842 642.9969 636.74964 630.25934 623.5507 616.64515 609.57117 602.3565 595.031 587.62574 580.219)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (623.7827 624.38294 624.4489 623.9903 623.02045 621.5553 619.61384 617.2178 614.39167 611.16224 607.55866 603.6121 599.3559 594.82465 590.05475 585.0837 579.9501 574.69294 569.3522 563.96766 558.57966 553.2275 547.9505 542.7872 537.7747 532.94947 528.34607 523.9974 519.9346 516.1866 512.77985 509.7388 507.0849 504.83698 503.01083 501.61942 500.67264 500.17722 500.13647 500.55075 501.41724 502.7297 504.47876 506.65195 509.23386 512.20594 515.54676 519.2324 523.2363 527.5295 532.08045 536.856 541.8211 546.93897 552.1714 557.4792 562.82215 568.1595 573.4497 578.6518 583.72474 588.6271 593.3189 597.76075 601.915 605.7443 609.21405 612.2908 614.9431 617.1426 618.8626 620.07917 620.7716 620.9221 620.51514 619.53937 617.9861 615.85035 613.1308 609.83014 605.95246 601.505 596.49854 590.947 584.8673 578.2799 571.2076 563.6764 555.71485 547.3542 538.62726 529.57026 520.2202 510.61624 500.79932 490.81107 480.69446 470.49338 460.2521 450.0152 439.82782 429.73407 419.77936 410.00964 400.4701 391.20425 382.2551 373.66333 365.46805 357.70587 350.41165 343.6174 337.35263 331.6437 326.5145 321.98523 318.07352 314.79285 312.15414 310.16458 308.82806 308.14475 308.11173 308.72244 309.96722 311.8331 314.30392 317.36066 320.98117 325.1408 329.81235 334.96585 340.5696 346.58975 352.99054 359.7349 366.78452 374.0996 381.6399 389.3645 397.2319 405.201 413.2306 421.2799 429.30844 437.27747 445.14813 452.8839 460.4495 467.81097 474.93634 481.7958 488.3617 494.6096 500.52417 506.10953 511.3775 516.32264 520.9402 525.2272 529.18097 532.80024 536.0836 539.03077 541.64087 543.91364 545.8492 547.44684 548.7062 549.62684 550.20826 550.44904 550.3482 549.9045 549.11664 547.98304 546.5021 544.67225 542.4928 539.96247 537.0809 533.84766 530.2634 526.32947 522.0478 517.42164 512.4548 507.15253 501.5217 495.56964 489.30566 482.74078 475.8871 468.7581 461.36942 453.7379 445.8825 437.82303 429.58102 421.18005 412.64566 404.0063 395.29227 386.53244 377.75595 368.99344 360.2752 351.6318 343.09396 334.69275 326.45816 318.4202 310.60834 303.0511 295.77597 288.80936 282.1766 275.90128 270.00558 264.50986 259.43262 254.79071 250.59864 246.86894 243.61183 240.83518 238.54494 236.7444 235.43465 234.61553 234.2901 234.48036 235.22638 236.54755 238.43418 240.87467 243.85488 247.35852 251.36679 255.85875 260.81293 266.2048 272.00937 278.2003 284.74966 291.62946 298.81058 306.26373 313.9592 321.8676 329.95935 338.2062 346.5812 355.05728 363.6092 372.21283 380.84436 389.482 398.10486 406.69382 415.23114 423.70044 432.08685 440.3777 448.56174 456.62894 464.5715 472.3827 480.0576 487.59287 494.98627 502.23676 509.34512 516.31305 523.14264 529.83704 536.4006 542.8377 549.15345 555.3528 561.4412 567.4244 573.30695 579.09345 584.7884 590.3955 595.91785 601.3569 606.71375 611.98816 617.179 622.2833 627.29694 632.2148 637.0298 641.73377 646.31665 650.7674 655.0731 659.2188 663.1861 666.95124 670.4874 673.7689 676.7698 679.46375 681.8256 683.8329 685.46595 686.7042 687.5201 687.8841 687.76935 687.15027 686.004 684.31037 682.05115 679.212 675.7809 671.7497 667.1132 661.8701 656.0228 649.5771 642.5429 634.93317 626.76496 618.05945 608.841 599.1373 588.9807 578.4057 567.45026 556.1552 544.5649 532.7258 520.6872 508.5 496.21732 483.8937 471.58548 459.34988 447.2445 435.3277 423.6584 412.2944 401.29294 390.71082 380.6037 371.0251 362.02664 353.65775 345.96518 338.9928 332.78098 327.36633 322.78186 319.05618 316.21338 314.27283 313.24924 313.15195 313.9848 315.74637 318.42966 322.02216 326.50558 331.85593 338.0432 345.03214 352.78204 361.2465 370.37415 380.10895 390.38965 401.1507 412.32306 423.83377 435.6064 447.5625 459.6209 471.69888 483.7127 495.578 507.20984 518.5282 529.4629 539.95185 549.93726 559.3646 568.183 576.3456 583.80994 590.53705 596.4921 601.64484 605.9692 609.44257 612.047 613.76514 614.57917 614.4768 613.45655 611.52454 608.69104 604.97065 600.3816 594.9459 588.6897 581.6427 573.83747 565.31 556.09955 546.2482 535.80054 524.8039 513.3073 501.36224 489.02225 476.3426 463.37967 450.19122 436.83606 423.3738 409.86462 396.36905 382.94754 369.6605 356.5679 343.72916 331.20288 319.0465 307.31616 296.0665 285.35022 275.21777 265.7177 256.89597 248.79563 241.45703 234.91739 229.21067 224.3669 220.41269 217.37113 215.26107 214.09725 213.89009 214.64617 216.36754 219.05156 222.6912 227.27532 232.788 239.20905 246.5143 254.67452 263.65674 273.42407 283.9357 295.15064 307.0351 319.5553 332.66278 346.29874 360.4011 374.9045 389.7414 404.842 420.13553 435.54968 451.01132 466.44656 481.7823 496.94574 511.86527 526.46875 540.68805 554.45667 567.7105 580.38886 592.43415 603.7929 614.41535 624.2567 633.2763 641.4385 648.71326 655.0763 660.50824 664.9954 668.52985 671.11 672.7397 673.4286 673.19227 672.0515 670.03266 667.16785 663.4968 659.0652 653.9216 648.1167 641.70276 634.7349 627.2699 619.3663 611.0833 602.48114 593.6201 584.55964 575.35877 566.076 556.7682 547.4902 538.2945 529.23127 520.348 511.68958 503.2973 495.20874 487.45813 480.07636 473.09027 466.52243 460.39188 454.714 449.4997 444.75592 440.48624 436.6907 433.36563 430.5034 428.09375 426.12396 424.57785 423.436 422.67786 422.2809 422.22043 422.46994 423.0018 423.78763 424.79803 426.00333 427.37393 428.88037 430.49326 432.18433 433.92636 435.69293 437.45923 439.20203 440.89984 442.5332 444.0849 445.53967 446.88486 448.10974 449.2061 450.1686 450.995 451.68445 452.2385 452.6623 452.9625 453.1481 453.23056 453.2234 453.14145 453.00235 452.82468 452.62796 452.4337 452.26447 452.14236 452.09143 452.13574 452.29874 452.6042 453.07602 453.73712 454.60956 455.71396 457.0701 458.69626 460.60898 462.82288 465.3508 468.20328 471.3888 474.9131 478.7789 482.98663 487.53442 492.4177 497.62833 503.15564 508.98068 515.07227 521.39686 527.9258 534.63355 541.4947 548.48267 555.57007 562.72834 569.9276 577.13697 584.32557 591.46216 598.51557 605.45374 612.24494 618.8569 625.25495 631.4036 637.26777 642.8123 648.00385 652.8114 657.2055 661.1581 664.6435 667.6388 670.1232 672.0785 673.4893 674.34314 674.63086 674.3456 673.48304 672.0433 670.0294 667.44654 664.3035 660.6121 656.3866 651.6448 646.4066 640.69495 634.5351 627.9547 620.98334 613.6521 605.99427 598.04456 589.8384 581.412 572.80304 564.049 555.1873 546.25556 537.29047 528.3282 519.4035 510.55002 501.79993 493.18292 484.72668 476.45685 468.39566 460.5629 452.97534 445.64636 438.58652 431.80212 425.29657 419.06924 413.11594 407.4292 401.9983 396.80804 391.84094 387.07623 382.4897 378.0547 373.74304 369.52393 365.36392 361.22958 357.08637 352.89853 348.63104 344.2487 339.71744 335.00555 330.0822 324.91885 319.49072 313.78085 307.79007 301.5342 295.0345 288.31503 281.40234 274.32587 267.1188 259.81882 252.46764 245.10823 237.78366 230.53707 223.41184 216.4514 209.69799 203.1927 196.97638 191.08702 185.56159 180.4343 175.73696 171.49886 167.74614 164.50247 161.78832 159.62084 158.01332 156.977 156.51946 156.6443 157.35247 158.64173 160.50733 162.94043 165.93 169.4634 173.5234 178.09185 183.14817 188.66967 194.6321 201.00872 207.77219 214.89374 222.34349 230.09098 238.10498 246.35388 254.80559 263.42807 272.18887 281.0567 289.99985 298.98724 307.98923 316.97546 325.91818 334.79132 343.57034 352.22873 360.7416 369.0853 377.23633 385.17355 392.87717 400.32938 407.51334 414.4144 421.0198 427.31726 433.29846 438.95465 444.2788 449.268 453.91785 458.22794 462.22897 465.97595 469.50516 472.83002 475.95645 478.89148 481.64096 484.2128 486.61356 488.85107 490.934 492.86993 494.66635 496.33225 497.87625 499.30695 500.63245 501.86154 503.0031 504.06528 505.05676 505.9849 506.85858 507.68527 508.47247 509.2278 509.9586 510.67062 511.3709 512.06574 512.76117 513.46955 514.2045 514.9733 515.78186 516.63196 517.52686 518.4697 519.46076 520.501 521.5907 522.7292 523.9152 525.1481 526.4241 527.7411 529.0949 530.48206 531.8978 533.33747 534.795 536.2645 537.7399 539.2143 540.6807 542.13215 543.5601 544.9573 546.3155 547.6262 548.8822 550.0746 551.1948 552.2351 553.1869 554.0424 554.79267 555.4306 555.9494 556.34046 556.5973 556.7136 556.6832 556.49976 556.15766 555.65217 554.9781 554.14795 553.17444 552.0614 550.8082 549.4146 547.8807 546.20466 544.3868 542.4274 540.3272 538.0853 535.7033 533.18177 530.52247 527.7275 524.7985 521.73847 518.54975 515.2367 511.80234 508.25177 504.58957 500.82028 496.9509 492.98663 488.93442 484.8022 480.5961 476.3253 471.9971 467.62228 463.20892 458.76694 454.30673 449.83875 445.37363 440.9216 436.49524 432.10544 427.76358 423.48178 419.271 415.14554 411.11578 407.19272 403.38928 399.71796 396.1894 392.8148 389.606 386.57407 383.7288 381.07996 378.6377 376.41486 374.42148 372.6621 371.144 369.87293 368.85336 368.08737 367.58044 367.33487 367.35187 367.63156 368.17538 368.98157 370.05054 371.37936 372.96442 374.80368 376.8916 379.22318 381.7935 384.59525 387.62103 390.86362 394.3018 397.92346 401.71512 405.66885 409.77136 414.0132 418.37976 422.86188 427.44302 432.1121 436.85486 441.65833 446.5075 451.3889 456.29 461.19446 466.08783 470.95847 475.79126 480.57208 485.28754 489.9237 494.46948 498.91153 503.23816 507.43488 511.49387 515.4018 519.1495 522.72736 526.12384 529.3331 532.3458 535.15516 537.7546 540.13874 542.3009 544.2356 545.94074 547.41254 548.6485 549.6449 550.403 550.9203 551.1972 551.23475 551.03406 550.5968 549.92444 549.0207 547.88935 546.5335 544.9568 543.1643 541.16156 538.9547 536.5473 533.9461 531.15827 528.1906 525.04767 521.73664 518.26606 514.6422 510.87158 506.9607 502.91934 498.7515 494.4655 490.0699 485.5706 480.97342 476.28693 471.5169 466.67252 461.75702 456.8404)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (557.23414 558.7852 560.18506 561.4294 562.5143 563.4357 564.1903 564.77466 565.1856 565.42035 565.4763 565.351 565.04224 564.5481 563.86676 562.9969 561.93696 560.6859 559.2426 557.6065 555.7772 553.75397 551.5368 549.1258 546.52094 543.7228 540.7316 537.54834 534.1737 530.6089 526.85505 522.9135 518.78614 514.4744 509.98074 505.30695 500.45554 495.4293 490.23077 484.86337 479.3304 473.63516 467.7818 461.77426 455.6172 449.31503 442.87314 436.29688 429.59177 422.76407 415.82025 408.76724 401.61224 394.36295 387.02753 379.61456 372.13306 364.5926 357.0032 349.3749 341.71902 334.047 326.37094 318.7029 311.0562 303.44397 295.88043 288.3799 280.9572 273.62784 266.40768 259.31293 252.3601 245.56644 238.94924 232.52616 226.31545 220.33499 214.60358 209.13959 203.96178 199.08893 194.5397 190.33252 186.48636 183.01915 179.94895 177.29367 175.0706 173.2966 171.98796 171.16008 170.82799 171.00574 171.7065 172.9423 174.72466 177.06316 179.96662 183.44249 187.49697 192.13501 197.36148 203.17792 209.58406 216.57787 224.1555 232.31131 241.03733 250.32404 260.15942 270.5298 281.41913 292.80942 304.68008 317.00897 329.7715 342.94153 356.48987 370.38647 384.59772 399.0896 413.82565 428.7673 443.87558 459.10852 474.42365 489.77695 505.12296 520.41547 535.6074 550.6514 565.4989 580.1016 594.41077 608.3781 621.9553 635.095 647.75007 659.8748 671.42426 682.356 692.6279 702.2005 711.03644 719.1005 726.36017 732.7859 738.35065 743.03095 746.80665 749.6612 751.5813 752.55787 752.58454 751.65705 749.7757 746.94947 743.19056 738.5167 732.94947 726.5146 719.24256 711.16755 702.32825 692.76746 682.5313 671.6702 660.23755 648.2903 635.8883 623.09436 609.9736 596.59296 583.02204 569.331 555.59186 541.8765 528.25806 514.80896 501.60153 488.7066 476.19437 464.13245 452.58737 441.6222 431.29694 421.66855 412.79 404.7102 397.47327 391.11874 385.6809 381.18854 377.66446 375.12604 373.58438 373.04422 373.50412 374.9552 377.37817 380.73553 384.9768 390.0549 395.91876 402.51422 409.7837 417.66748 426.10376 435.02918 444.37906 454.08826 464.09213 474.32535 484.72366 495.22403 505.76416 516.28425 526.7259 537.03327 547.1528 557.0336 566.6278 575.89057 584.7807 593.2595 601.2916 608.84607 615.8939 622.41065 628.3739 633.7618 638.5531 642.7322 646.2905 649.22284 651.52655 653.202 654.2521 654.6824 654.50086 653.7176 652.3447 650.3966 647.889 644.83936 641.26667 637.19074 632.633 627.61615 622.16584 616.31067 610.0774 603.48786 596.5649 589.3305 581.80707 574.01636 565.9804 557.72095 549.2589 540.61475 531.8083 522.85956 513.7877 504.611 495.34766 486.015 476.62994 467.2085 457.7666 448.3196 438.8818 429.46777 420.0912 410.7655 401.50345 392.31793 383.22107 374.22498 365.34152 356.58228 347.9587 339.48227 331.16406 323.01526 315.04697 307.27036 299.6967 292.33685 285.20245 278.3047 271.65482 265.26425 259.14438 253.30687 247.76364 242.5258 237.6053 233.0163 228.77848 224.91707 221.45314 218.40076 215.77359 213.58466 211.84632 210.56966 209.7639 209.43743 209.59903 210.25742 211.4201 213.09368 215.28374 217.99449 221.22893 224.98905 229.27518 234.08647 239.42084 245.27458 251.6427 258.51843 265.89377 273.75913 282.10333 290.91373 300.17587 309.87424 319.9913 330.50797 341.40378 352.6569 364.24396 376.1403 388.31934 400.75333 413.41388 426.27066 439.2923 452.44675 465.70065 479.01944 492.3684 505.7121 519.0135 532.236 545.3425 558.2956 571.05756 583.5907 595.8576 607.8213 619.4445 630.6912 641.52594 651.9137 661.82074 671.2147 680.0639 688.3383 696.00965 703.0511 709.4374 715.1455 720.1546 724.44574 728.00214 730.80976 732.85675 734.1337 734.63416 734.3542 733.2928 731.4513 728.8342 725.4487 721.3052 716.41645 710.7982 704.4691 697.4506 689.7661 681.43775 672.48664 662.9391 652.82874 642.19227 631.0684 619.4979 607.5239 595.1913 582.5461 569.63605 556.5101 543.21796 529.81 516.33594 502.83948 489.35474 475.91605 462.56888 449.36542 436.35733 423.59586 411.1308 399.01062 387.2825 375.99225 365.18366 354.89807 345.17474 336.05026 327.5588 319.73132 312.5958 306.1769 300.49634 295.57208 291.4185 288.04633 285.46277 283.67108 282.6708 282.45773 283.02387 284.35767 286.44357 289.26248 292.79196 297.0061 301.8757 307.36844 313.44907 320.07962 327.2195 334.82584 342.8534 351.25565 359.98416 368.98883 378.21906 387.62308 397.1486 406.74356 416.3555 425.9327 435.4238 444.77872 453.94812 462.8847 471.54254 479.87766 487.84842 495.41608 502.5444 509.19998 515.3523 520.97376 526.0403 530.5295 534.42255 537.7053 540.3675 542.4031 543.8097 544.5887 544.74506 544.2875 543.22876 541.5843 539.3729 536.6169 533.3414 529.5745 525.34736 520.6928 515.6459 510.24368 504.52533 498.5313 492.30313 485.88348 479.3156 472.64307 465.90958 459.15912 452.43485 445.7796 439.23505 432.8423 426.64063 420.66834 414.9616 409.55493 404.4805 399.7682 395.44846 391.55615 388.12744 385.19046 382.76248 380.85388 379.4713 378.61768 378.29257 378.49146 379.20633 380.42572 382.1351 384.31717 386.95163 390.01547 393.48398 397.3297 401.52307 406.03336 410.8284 415.875 421.13925 426.58627 432.18082 437.88797 443.67264 449.49994 455.33606 461.14746 466.9019 472.56824 478.11652 483.51865 488.74783 493.7791 498.5894 503.15778 507.4648 511.49365 515.22956 518.6602 521.7753 524.56586 527.02564 529.15204 530.94355 532.3996 533.5226 534.317 534.7896 534.9486 534.8036 534.36597 533.6488 532.66657 531.4353 529.9713 528.2924 526.4178 524.3671 522.16077 519.8194 517.3646 514.8181 512.2016 509.53683 506.84576 504.15042 501.47208 498.83182 496.2506 493.74847 491.34488 489.05884 486.9085 484.91068 483.0817 481.43716 479.99097 478.75638 477.74518 476.96832 476.4353 476.15418 476.13214 476.3752 476.88763 477.6724 478.7314 480.06503 481.67203 483.5502 485.69653 488.10635 490.77295 493.68924 496.8467 500.23535 503.84482 507.66525 511.6891 515.9069 520.303 524.8568 529.54706 534.3514 539.2465 544.2088 549.21387 554.2372 559.2539 564.2396 569.1694 574.0191 578.76557 583.38794 587.8677 592.18506 596.31965 600.2523 603.9649 607.43964 610.6611 613.61475 616.28754 618.66816 620.74726 622.5167 623.96967 625.1007 625.9077 626.389 626.54377 626.3739 625.8821 625.074 623.9555 622.5334 620.8172 618.8168 616.54334 614.0089 611.22706 608.2117 604.9775 601.5403 597.9163 594.12226 590.1746 586.0906 581.8879 577.58387 573.19544 568.7397 564.2335 559.6934 555.1357 550.57544 546.0275 541.506 537.0245 532.5955 528.23066 523.9406 519.7355 515.62384 511.6134 507.71063 503.9218 500.25092 496.70087 493.27463 489.97382 486.7988 483.7484 480.82086 478.0133 475.32263 472.74393 470.2713 467.8989 465.62027 463.428 461.31357 459.26828 457.2837 455.35046 453.45825 451.59726 449.75784 447.9295 446.1036 444.27493 442.43945 440.59113 438.72174 436.82376 434.89017 432.91418 430.8863 428.7983 426.64804 424.43753 422.17087 419.8523 417.48685 415.08 412.6375 410.1661 407.67203 405.16153 402.64197 400.12027 397.60242 395.09564 392.60672 390.1419 387.70688 385.307 382.94745 380.63293 378.3674 376.15442 373.9968 371.8961 369.8539 367.8705 365.94626 364.08005 362.26984 360.51303 358.80655 357.14606 355.52597 353.94074 352.38522 350.85193 349.33304 347.82114 346.30783 344.7833 343.23962 341.66657 340.0545 338.39517 336.67847 334.89542 333.03702 331.09454 329.05682 326.9128 324.65515 322.2801 319.78482 317.16696 314.4271 311.56607 308.58566 305.48944 302.28268 298.97086 295.5623 292.0655 288.49133 284.8515 281.15924 277.42972 273.67844 269.92102 266.17465 262.4579 258.7922 255.20046 251.70639 248.33362 245.10791 242.05405 239.19835 236.56642 234.18396 232.07791 230.27248 228.79422 227.6668 226.91411 226.55893 226.62204 227.123 228.07973 229.5095 231.42639 233.84265 236.76839 240.21018 244.17351 248.66016 253.66867 259.19543 265.2332 271.77295 278.79456 286.26736 294.15595 302.42133 311.02353 319.92 329.06567 338.41657 347.92694 357.5497 367.2385 376.9467 386.62872 396.23898 405.73193 415.0666 424.20068 433.09323 441.70782 450.00797 457.9615 465.5356 472.70337 479.43747 485.71576 491.51816 496.82764 501.62943 505.91266 509.66843 512.8905 515.5776 517.729 519.34845 520.44147 521.01655 521.0832 520.6559 519.7497 518.3819 516.57227 514.3425 511.71658 508.71817 505.3732 501.70682 497.74255 493.5083 489.0338 484.35016 479.48947 474.48257 469.3608 464.15793 458.90384 453.631 448.36896 443.14935 438.00195 432.95584 428.03906 423.2779 418.69916 414.32694 410.1852 406.2954 402.6784 399.35214 396.33566 393.6437 391.29038 389.2868 387.64557 386.37448 385.48065 384.9684 384.84232 385.1046 385.7524 386.78473 388.19946 389.99066 392.1503 394.6709 397.54263 400.75308 404.28925 408.1371 412.2808 416.70282 421.3869 426.31277 431.46146 436.81076 442.33902 448.0237 453.84418 459.7747 465.7924 471.8372 477.87347 483.8784 489.8323 495.7145 501.50793 507.19174 512.7509 518.16315 523.415 528.4909 533.37354 538.04944 542.50415 546.72535 550.7009 554.42084 557.87494 561.05506 563.95337 566.564 568.88245 570.90424 572.62757 574.0522 575.17737 576.004 576.5342 576.77216 576.72236 576.39026 575.78345 574.9097 573.77906 572.40247 570.7905 568.9571 566.9162 564.6815 562.26807 559.6936 556.9752 554.12867 551.17634 548.1341 545.0214 541.8612 538.6706 535.47016 532.28284 529.12635 526.02497 522.9969 520.06385 517.2449 514.5616 512.0322 509.67645 507.51047 505.55707 503.82898 502.343 501.1173 500.16257 499.4947 499.12457 499.06397 499.3233 499.9093 500.834 502.09814 503.70923 505.671 507.9843 510.6485 513.6668 517.0318 520.7404 524.78687 529.16706 533.8701 538.88727 544.20435 549.8106 555.6932 561.8331 568.213 574.81824 581.62745 588.6212 595.7742 603.0688 610.47736 617.9758 625.5415 633.1461 640.76264 648.36536 655.92457 663.4844)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (434.75626 443.76202 452.57117 461.16138 469.51154 477.60257 485.41702 492.93903 500.1551 507.0534 513.62446 519.8606 525.7563 531.30854 536.516 541.37995 545.90345 550.0919 553.9524 557.4945 560.72944 563.67005 566.33136 568.72974 570.8831 572.81086 574.5337 576.073 577.45185 578.69336 579.8219 580.8618 581.83814 582.7755 583.69935 584.6341 585.6038 586.6325 587.74305 588.95765 590.2968 591.7806 593.4272 595.2535 597.2747 599.5041 601.953 604.63117 607.54584 610.70215 614.1032 617.74994 621.6406 625.7714 630.13617 634.72644 639.5313 644.5378 649.73066 655.0924 660.6041 666.24384 671.98865 677.8137 683.69275 689.5974 695.4989 701.3667 707.16987 712.8762 718.4533 723.8684 729.08844 734.08014 738.81116 743.2489 747.3617 751.1174 754.4771 757.3912 759.8316 761.7719 763.1875 764.0559 764.3566 764.0716 763.1852 761.68427 759.55854 756.80005 753.4043 749.3692 744.6953 739.38715 733.4512 726.8973 719.73847 711.99006 703.6707 694.80164 685.40705 675.513 665.14905 654.3462 643.1381 631.56037 619.6506 607.44764 594.9925 582.3271 569.49457 556.5392 543.5056 530.4393 517.38587 504.3907 491.49988 478.7581 466.20993 453.89923 441.8696 430.16208 418.81702 407.87338 397.36758 387.3352 377.8088 368.81967 360.39578 352.56357 345.34583 338.7639 332.83548 327.57544 322.99625 319.10712 315.91446 313.42166 311.62888 310.53336 310.12976 310.4094 311.3609 312.97015 315.21982 318.09042 321.5597 325.60242 330.19186 335.2982 340.88986 346.93298 353.392 360.22696 367.3825 374.7687 382.29056 389.89932 397.5478 405.19116 412.78638 420.29263 427.67163 434.8875 441.90662 448.69772 455.2326 461.48453 467.42996 473.0474 478.31763 483.22388 487.75147 491.8878 495.62256 498.9468 501.85425 504.34006 506.40106 508.03595 509.24487 510.0295 510.39307 510.34027 509.87674 509.00998 507.74844 506.1017 504.08075 501.69757 498.96527 495.89807 492.51138 488.82117 484.84525 480.60202 476.11035 471.39084 466.46497 461.3543 456.07892 450.65494 445.10086 439.4444 433.71466 427.94165 422.1555 416.38733 410.66846 405.03058 399.50467 394.12225 388.91415 383.91068 379.14175 374.63577 370.42044 366.52216 362.96613 359.776 356.97372 354.57925 352.6109 351.0852 350.01636 349.41595 349.29404 349.65826 350.5136 351.86267 353.70194 356.01386 358.76758 361.94107 365.52548 369.5101 373.88153 378.6249 383.72293 389.15625 394.90454 400.9455 407.2553 413.8091 420.58044 427.54202 434.66577 441.9232 449.28467 456.72113 464.2047 471.70905 479.20737 486.67014 494.06824 501.3737 508.5591 515.59784 522.4649 529.13666 535.59064 541.806 547.76374 553.4469 558.8402 563.93055 568.7068 573.16016 577.2841 581.07416 584.5283 587.64686 590.4324 592.8897 595.02564 596.8497 598.3735 599.61054 600.5761 601.28766 601.76416 602.0267 602.09784 602.00135 601.76197 601.4057 600.96 600.45215 599.91077 599.3645 598.84186 598.3721 597.98395 597.7054 597.56397 597.5865 597.7991 598.22596 598.8907 599.81476 601.0172 602.51435 604.3199 606.44556 608.90046 611.6915 614.8228 618.29566 622.10645 626.2414 630.6779 635.38935 640.3463 645.5165 650.86567 656.3574 661.95276 667.6111 673.2909 678.9485 684.5394 690.01856 695.34 700.45765 705.3253 709.8971 714.1278 717.9731 721.3897 724.33576 726.7711 728.65796 729.9605 730.64545 730.6823 730.0439 728.7061 726.64814 723.8532 720.3082 716.00415 710.9361 705.1033 698.50946 691.16254 683.07514 674.2642 664.7511 654.5614 643.7254 632.27735 620.25525 607.7016 594.66224 581.18634 567.3269 553.13916 538.6813 524.01435 509.20105 494.30524 479.3922 464.5288 449.78195 435.2182 420.9039 406.90463 393.2845 380.10587 367.42914 355.3119 343.80795 332.96872 322.84137 313.46838 304.88776 297.13272 290.23096 284.20468 279.06995 274.8373 271.51108 269.08926 267.55978 266.88956 267.02362 267.90802 269.5013 271.76364 274.65204 278.12097 282.12308 286.60886 291.52713 296.82547 302.45078 308.34876 314.4647 320.74304 327.12506 333.54697 339.94565 346.26566 352.4579 358.47553 364.2736 369.80972 375.04504 379.9439 384.4736 388.60468 392.31116 395.57056 398.36395 400.6761 402.49527 403.81323 404.62518 404.92996 404.72958 404.02954 402.8386 401.16806 399.03238 396.44885 393.4373 390.01968 386.22025 382.06525 377.58267 372.80234 367.75522 362.47333 356.9897 351.33835 345.55347 339.6696 333.7214 327.74365 321.77057 315.83597 309.9733 304.21475 298.59152 293.134 287.87103 282.83 278.03726 273.5176 269.2935 265.386 261.81412 258.59543 255.74533 253.2773 251.20276 249.53128 248.2707 247.42705 247.00432 247.00409 247.4258 248.26837 249.53227 251.21782 253.324 255.84871 258.78873 262.13956 265.89566 270.05032 274.5961 279.52512 284.8284 290.4962 296.51816 302.88318 309.5801 316.59695 323.92175 331.5424 339.44605 347.61975 356.05075 364.7259 373.63178 382.75543 392.08356 401.60208 411.29752 421.1568 431.1659 441.31146 451.5791 461.95462 472.42358 482.97195 493.58487 504.2452 514.9299 525.6097 536.2565 546.84644 557.35767 567.7679 578.05475 588.1964 598.17084 607.9565 617.53235 626.8776 635.9719 644.79566 653.3296 661.55536 669.45527 677.01246 684.2111 691.0363 697.4741 703.5114 709.13685 714.33954 719.1099 723.44 727.323 730.75324 733.72644 736.2398 738.292 739.883 741.014 741.6873 741.90705 741.67914 741.01044 739.9083 738.3825 736.44446 734.1059 731.37946 728.27955 724.82154 721.02155 716.8964 712.46405 707.7432 702.7534 697.51435 692.0468 686.3719 680.5105 674.48414 668.3148 662.0243 655.6344 649.16626 642.6414 636.0812 629.5061 622.9363 616.39136 609.8903 603.4513 597.09186 590.82825 584.67585 578.6492 572.76185 567.02607 561.4531 556.05286 550.8337 545.8028 540.9666 536.32996 531.8959 527.6663 523.6424 519.8236 516.20795 512.7925 509.5729 506.54364 503.69812 501.02853 498.5265 496.182 493.98462 491.92297 489.9851 488.15796 486.42838 484.7826 483.20605 481.68427 480.20236 478.74573 477.30048 475.85324 474.3907 472.89856 471.36316 469.7707 468.10724 466.36053 464.51874 462.5708 460.50662 458.31683 455.99332 453.52893 450.91766 448.15515 445.2413 442.17764 438.96225 435.5915 432.06152 428.36972 424.51447 420.49542 416.31308 411.96896 407.46548 402.8064 397.99686 393.0425 387.9501 382.728 377.38535 371.93222 366.3798 360.74036 355.0273 349.2549 343.43848 337.59393 331.73834 325.8894 320.0659 314.28726 308.57327 302.94443 297.42215 292.0281 286.78433 281.71298 276.83624 272.1774 267.75867 263.60223 259.73084 256.16657 252.93108 250.04517 247.52877 245.40167 243.68212 242.3872 241.53311 241.13439 241.20386 241.75272 242.79065 244.32497 246.36084 248.90129 251.94684 255.49488 259.5415 264.0792 269.09763 274.58322 280.52023 286.88968 293.66922 300.83365 308.3545 316.20084 324.33884 332.73123 341.3386 350.1186 359.02716 368.01743 377.04038 386.04562 394.98157 403.79547 412.42264 420.77936 428.78845 436.39694 443.5647 450.25754 456.44525 462.10205 467.21368 471.77588 475.78287 479.22693 482.10205 484.40546 486.1375 487.3023 487.90683 487.96112 487.47794 486.47305 484.9642 482.9713 480.516 477.62192 474.31354 470.61816 466.56284 462.17566 457.4849 452.52036 447.3119 441.88858 436.2804 430.517 424.627 418.6388 412.581 406.48126 400.36542 394.25964 388.18842 382.17532 376.24374 370.4153 364.71017 359.14795 353.74707 348.52484 343.4973 338.6794 334.08478 329.72668 325.61646 321.7646 318.1805 314.87268 311.84876 309.11588 306.67905 304.5429 302.71173 301.18985 299.98032 299.08533 298.50668 298.24542 298.30164 298.67474 299.3634 300.3661 301.6802 303.30212 305.22858 307.45505 309.97665 312.78705 315.88004 319.256 322.92273 326.8877 331.15286 335.7183 340.58267 345.7436 351.19815 356.94125 362.9679 369.2709 375.84238 382.67337 389.75372 397.07144 404.61502 412.36966 420.3218 428.4545 436.75195 445.19608 453.76816 462.44934 471.2185 480.0555 488.93857 497.84442 506.75134 515.63617 524.47535 533.2451 541.9323 550.5242 559.0048 567.35254 575.54725 583.5694 591.4 599.02015 606.4115 613.5572 620.4407 627.046 633.3574 639.3605 645.0418 650.38764 655.3848 660.02277 664.28956 668.1749 671.66895 674.7623 677.44696 679.71454 681.5578 682.9705 683.94684 684.4812 684.5699 684.20844 683.3933 682.123 680.39496 678.2088 675.565 672.4629 668.9053 664.89344 660.4311 655.5224 650.17225 644.3871 638.17347 631.5393 624.4946 617.0488 609.23645 601.09784 592.66504 583.9625 575.0161 565.8488 556.4861 546.95295 537.27234 527.4688 517.56525 507.58524 497.55072 487.48477 477.4076 467.34036 457.30298 447.31528 437.39557 427.56168 417.8304 408.21915 398.74213 389.41464 380.25043 371.26245 362.46213 353.8623 345.47275 337.3029 329.36188 321.65732 314.19766 306.98828 300.0354 293.34476 286.91983 280.76486 274.88504 269.2788 263.95084 258.90143 254.13249 249.64333 245.43392 241.50328 237.85189 234.47641 231.37577 228.54776 225.99044 223.69985 221.67311 219.90682 218.423 217.2282 216.32288 215.70453 215.37038 215.31719 215.5419 216.0408 216.80928 217.84435 219.14076 220.69516 222.50228 224.55792 226.85619 229.39307 232.16362 235.16144 238.38285 241.82134 245.4722 249.32926 253.3875 257.6747 262.2058 266.98026 272.00024 277.26425 282.77182 288.52084 294.51056 300.73837 307.20236 313.90094 320.83044 327.9858 335.36664 342.96808 350.78445 358.81097 367.044 375.4778 384.10693 392.92227 401.91968 411.09262 420.4333 429.9325 439.58307 449.3759 459.30197 469.3531 479.5175 489.78513 500.14523 510.5872 521.0991 531.67035 542.28547 552.9371 563.6061 574.2835 584.952 595.60126 606.21387 616.7762 627.2706 637.6869 648.00635 658.2127 668.2894 678.2226 687.9948 697.5876 706.98505 716.17255 725.13117 733.84455 742.2948 750.46766 758.34516 765.9115 773.14887 780.0421 786.5775 792.73804 798.50824 803.87427 808.82404 813.343 817.4183 821.0381 824.19165 826.86847 829.05896 830.75525 831.94965 832.636 832.8082 832.97706)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (749.1274 739.9888 729.97785 719.14246 707.5348 695.21015 682.22754 668.649 654.53894 639.96436 624.9945 609.6997 594.1521 578.4243 562.5897 546.7218 530.8936 515.17756 499.6452 484.3664 469.4096 454.8406 440.72314 427.11798 414.08255 401.671 389.93378 378.91727 368.66367 359.21072 350.59143 342.8343 335.9626 329.9948 324.944 320.81854 317.62116 315.34995 313.99738 313.55115 313.99384 315.3036 317.45343 320.41226 324.14444 328.6103 333.76666 339.56677 345.96036 352.8946 360.3139 368.16052 376.37488 384.89594 393.66144 402.60852 411.67368 420.79398 429.90622 438.9487 447.86032 456.5817 465.05545 473.22638 481.04178 488.4521 495.41022 501.87323 507.80154 513.15967 517.91584 522.043 525.5183 528.32337 530.4447 531.8733 532.6047 532.6395 531.98255 530.6433 528.63666 525.9817 522.70166 518.82416 514.3804 509.40515 503.9367 498.0163 491.6877 484.99735 477.99405 470.728 463.251 455.61572 447.87592 440.0853 432.298 424.56757 416.94635 409.48648 402.23834 395.25302 388.5824 382.26932 376.3545 370.87485 365.86462 361.3543 357.37067 353.93643 351.07068 348.788 347.0991 346.01007 345.52292 345.6353 346.3407 347.62827 349.48315 351.8867 354.8158 358.24448 362.14298 366.47824 371.2143 376.3126 381.7321 387.4297 393.36032 399.47803 405.735 412.08292 418.47342 424.85794 431.188 437.41608 443.4958 449.382 455.03122 460.40213 465.45596 470.15637 474.47025 478.3677 481.82178 484.80985 487.31268 489.31564 490.80792 491.78278 492.23813 492.1762 491.60364 490.53287 488.99 487.0273 484.70615 482.06216 479.1324 475.95493 472.56894 469.0132 465.327 461.54886 457.71664 453.8668 450.0349 446.25482 442.55804 438.97476 435.5325 432.25674 429.17044 426.29346 423.6438 421.23636 419.08368 417.1954 415.57864 414.23804 413.17578 412.39157 411.88242 411.64392 411.6692 411.94952 412.47433 413.2318 414.20816 415.38852 416.75732 418.2977 419.99185 421.82187 423.7692 425.8147 427.93958 430.12497 432.35214 434.60306 436.86154 439.11588 441.3565 443.57086 445.74728 447.8747 449.94324 451.94345 453.86725 455.70776 457.45847 459.11435 460.67133 462.12643 463.4773 464.72324 465.86414 466.9008 467.83493 468.66916 469.4072 470.05313 470.61218 471.0896 471.4916 471.82513 472.09717 472.31528 472.48718 472.62213 472.74017 472.89572 473.1759 473.63367 474.276 475.11032 476.14252 477.37775 478.8198 480.47174 482.33624 484.41397 486.7053 489.2097 491.92474 494.8478 497.97488 501.30096 504.82028 508.52585 512.4096 516.4627 520.6751 525.03614 529.53406 534.157 538.89106 543.7228 548.6373 553.61927 558.6533 563.7228 568.81067 573.9001 578.9733 584.0129 589.0004 593.91816 598.74787 603.4717 608.0715 612.5295 616.8281 620.95044 624.87946 628.5987 632.0925 635.3457 638.3437 641.07264 643.5196 645.67237 647.51954 649.051 650.2574 651.1301 651.66224 651.84766 651.68134 651.15937 650.2791 649.03907 647.4392 645.4802 643.1645 640.4955 637.47754 634.1165 630.4194 626.39557 622.0592 617.43006 612.52735 607.367 601.9659 596.34107 590.50916 584.48066 578.25415 571.825 565.1992 558.3894 551.4085 544.26984 536.9877 529.5764 522.05 514.4233 506.71167 498.93097 491.09637 483.22397 475.33035 467.43173 459.54526 451.68768 443.876 436.12778 428.46045 420.89148 413.43884 406.1203 398.95346 391.956 385.14587 378.5404 372.15714 366.01315 360.1252 354.50983 349.18298 344.16 339.45572 335.08423 331.05908 327.39224 324.09506 321.17795 318.65 316.51883 314.79062 313.47012 312.5604 312.06302 311.97745 312.30124 313.03015 314.1579 315.67593 317.5735 319.83795 322.45438 325.4051 328.67056 332.22952 336.0583 340.13098 344.42 348.8958 353.52658 358.2797 363.12164 368.01685 372.9291 377.8218 382.6577 387.39993 392.01175 396.4567 400.69962 404.70676 408.44608 411.8875 415.0024 417.761 420.1352 422.10907 423.67996 424.85178 425.63297 426.0365 426.07965 425.78348 425.1728 424.27542 423.12247 421.7476 420.1862 418.4767 416.66467 414.8038 412.9474 411.1397 409.419 407.823 406.38934 405.1539 404.15118 403.4148 402.97595 402.86407 403.1064 403.72757 404.75003 406.19345 408.0747 410.40784 413.2039 416.47144 420.216 424.44022 429.14352 434.32285 439.9726 446.08398 452.6458 459.64438 467.06397 474.88632 483.0912 491.65637 500.55798 509.77042 519.26667 529.0183 538.99604 549.16974 559.508 569.9793 580.5516 591.19257 601.86915 612.54895 623.2001 633.79035 644.2886 654.6637 664.886 674.92566 684.7545 694.3449 703.67127 712.7085 721.4323 729.8204 737.8524 745.50855 752.7702 759.6209 766.04584 772.0347 777.5875 782.7069 787.3847 791.6067 795.35926 798.6291 801.4041 803.67316 805.4261 806.6538 807.34815 807.5017 807.1083 806.1633 804.6625 802.6027 799.98304 796.8026 793.0618 788.76276 783.9085 778.50287 772.5515 766.0611 759.0391 751.49445 743.4373 734.879 725.83216 716.30994 706.32734 695.8997 685.0443 673.77924 662.12336 650.0964 637.71906 625.016 612.0184 598.7629 585.2827 571.6045 557.75397 543.757 529.64026 515.4305 501.15494 486.84088 472.51593 458.2078 443.94458 429.75427 415.6649 401.70438 387.9005 374.28018 360.87045 347.69864 334.79117 322.17352 309.87128 297.90927 286.31134 275.10065 264.29987 253.93059 244.01338 234.56816 225.61357 217.16715 209.24546 201.86362 195.03603 188.77562 183.09378 178.00081 173.50577 169.61626 166.33838 163.67671 161.63437 160.21276 159.41207 159.23111 159.667 160.71555 162.37113 164.62668 167.47359 170.90196 174.90087 179.45766 184.55846 190.18828 196.33046 202.96758 210.0814 217.65196 225.65869 234.07997 242.8933 252.07534 261.60175 271.44772 281.58798 291.99667 302.6469 313.5114 324.56326 335.775 347.11932 358.5681 370.0932 381.6671 393.26215 404.8509 416.4064 427.9018 439.311 450.60828 461.76843 472.76712 483.58023 494.18512 504.55972 514.6829 524.53467 534.0961 543.34906 552.27686 560.8638 569.09595 576.96027 584.4449 591.53937 598.235 604.5243 610.4051 615.8824 620.9623 625.6467 629.93415 633.82355 637.315 640.4095 643.1094 645.41767 647.3388 648.8782 650.0419 650.8374 651.273 651.3574 651.09705 650.4948 649.5538 648.27796 646.6726 644.7441 642.50086 639.9531 637.112 633.9897 630.6005 626.96045 623.0859 618.99506 614.708 610.2459 605.6305 600.8844 596.03217 591.0995 586.1119 581.09595 576.0792 571.089 566.15314 561.29987 556.557 551.9523 547.5132 543.266 539.2365 535.4497 531.9293 528.6974 525.77454 523.1796 520.92926 519.0382 517.5186 516.3801 515.62977 515.27155 515.30677 515.7333 516.54615 517.737 519.2937 521.2015 523.4419 525.9928 528.829 531.92255 535.242 538.7531 542.41877 546.1991 550.0522 553.93354 557.7981 561.59876 565.28705 568.81415 572.13056 575.18757 577.93696 580.3314 582.3256 583.8761 584.94196 585.48517 585.4721 584.8727 583.66144 581.8179 579.3269 576.17945 572.37726 567.942 562.90705 557.3071 551.1784 544.5611 537.49817 530.03687 522.2285 514.12684 505.78607 497.26126 488.60663 479.87714 471.12714 462.4099 453.77728 445.2803 436.96765 428.88626 421.07947 413.58908 406.4528 399.70657 393.38193 387.50793 382.11032 377.21027 372.82645 368.97363 365.66382 362.90533 360.70374 359.06043 357.9746 357.4427 357.45834 358.01245 359.0937 360.68893 362.78244 365.35715 368.39432 371.87366 375.77335 380.07083 384.7431 389.76605 395.115 400.76526 406.69107 412.86768 419.26984 425.87268 432.65152 439.58237 446.64136 453.80554 461.05283 468.36215 475.71225 483.08395 490.45816 497.8178 505.14563 512.4258 519.6441 526.7874 533.84327 540.7998 547.6469 554.37555 560.9776 567.445 573.77247 579.9543 585.98584 591.89167 597.7144 603.4729 609.1623 614.76966 620.28254 625.68775 630.9726 636.12354 641.1276 645.97175 650.6429 655.12775 659.4144 663.49 667.342 670.9588 674.32776 677.438 680.27796 682.8371 685.10474 687.07105 688.7267 690.0625 691.07007 691.74134 692.06946 692.0476 691.66974 690.9305 689.817 688.3166 686.4231 684.133 681.4453 678.35956 674.8757 670.9961 666.7229 662.06116 657.01416 651.58826 645.7899 639.6271 633.10877 626.2459 619.0489 611.53 603.7016 595.57935 587.17646 578.51014 569.59766 560.4565 551.10547 541.5636 531.85187 521.9909 512.00275 501.9104 491.7356 481.50226 471.2336 460.95526 450.69232 440.46896 430.30966 420.24054 410.28674 400.47382 390.82694 381.37082 372.13068 363.13116 354.39597 345.9486 337.84567 330.13818 322.85043 315.9927 309.57208 303.59476 298.06525 292.9863 288.35944 284.18454 280.46048 277.18466 274.3539 271.96268 270.00516 268.47412 267.362 266.6597 266.3577 266.4449 266.91043 267.7426 268.92896 270.45566 272.30957 274.4772 276.94434 279.69583 282.71686 285.99268 289.5083 293.2487 297.19763 301.3407 305.66266 310.14893 314.7828 319.55075 324.4374 329.42993 334.51282 339.67282 344.8964 350.1705 355.482 360.81882 366.16824 371.52017 376.86258 382.18515 387.47748 392.72955 397.93243 403.07678 408.15067 413.14484 418.04996 422.8602 427.56702 432.1664 436.6513 441.0168 445.2576 449.36996 453.34943 457.19354 460.8978 464.46036 467.8784 471.1505 474.2747 477.2501 480.07504 482.74933 485.273 487.64615 489.868 491.9613 493.934 495.78513 497.51312 499.11658 500.5938 501.94357 503.16434 504.25574 505.21576 506.04413 506.7405 507.30463 507.73502 508.0328 508.19696 508.2278 508.1263 507.89224 507.52652 507.03 506.40344 505.64722 504.76505 503.75516 502.62112 501.36346 499.9848 498.48685 496.8719 495.14203 493.29974 491.34744 489.28836 487.12494 484.86072 482.4965 480.0385 477.4877 474.84943 472.12607 469.32166 466.43994 463.4851 460.459 457.36774 454.216 451.0069 447.74432 444.4341 441.0794 437.6859 434.2574 430.79886 427.31482 423.81088 420.2911 416.7592 413.22308 409.68558 406.15286 402.62756 399.11722 395.627 392.15906 388.72153 385.3186 381.9543 378.63477 375.3653 372.1507 368.99594 365.9054 362.88467 359.93927 357.07242 354.20578)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (695.1736 702.33136 709.339 716.18305 722.85047 729.3281 735.60315 741.6628 747.49476 753.0867 758.42664 763.50306 768.30445 772.8202 777.0394 780.95246 784.54926 787.8207 790.7583 793.3536 795.5992 797.488 799.01355 800.17005 800.9521 801.3556 801.3766 801.012 800.2592 799.1168 797.5839 795.66034 793.3468 790.6449 787.5567 784.0854 780.23505 776.01014 771.4166 766.46076 761.14985 755.492 749.4964 743.1724 736.5311 729.5835 722.3422 714.81995 707.0306 698.9888 690.7097 682.2094 673.50434 664.6122 655.5506 646.3381 636.99396 627.5377 617.98945 608.36957 598.6988 588.9988 579.29096 569.59705 559.9388 550.3384 540.81806 531.39954 522.10547 512.95746 503.97717 495.18628 486.60596 478.25687 470.15958 462.33353 454.79803 447.56952 440.65152 434.02853 427.715 421.7243 416.06903 410.76093 405.81043 401.22696 397.0188 393.19315 389.75592 386.7119 384.06442 381.81577 379.9668 378.51703 377.4649 376.8072 376.5397 376.65692 377.15192 378.01666 379.24207 380.81775 382.73145 384.96808 387.5119 390.34637 393.45435 396.81833 400.42044 404.24228 408.26572 412.4722 416.84363 421.3617 426.00873 430.76736 435.6205 440.55203 445.54623 450.58853 455.66473 460.76196 465.86838 470.9729 476.06635 481.13977 486.18607 491.19925 496.1744 501.10806 505.99817 510.8434 515.6442 520.4018 525.11866 529.7982 534.4447 539.06366 543.6608 548.2431 552.81745 557.39136 561.97254 566.5687 571.1878 575.8368 580.52295 585.25275 590.03144 594.86365 599.75287 604.7014 609.7097 614.7754 619.8858 625.007 630.09937 635.1481 640.13715 645.0508 649.8719 654.5833 659.16694 663.60425 667.876 671.9626 675.84345 679.4982 682.9053 686.04316 688.88965 691.4222 693.6182 695.45484 696.90925 697.9587 698.5801 698.7508 698.44904 697.6531 696.3416 694.49494 692.09375 689.1199 685.55646 681.3883 676.60157 671.18476 665.12757 658.42267 651.0646 643.05036 634.37977 625.05536 615.0829 604.4704 593.23017 581.3767 568.9286 555.90986 542.3568 528.32996 513.89295 499.08112 483.93155 468.4828 452.77512 436.84982 420.74994 404.5194 388.2033 371.84756 355.4993 339.2061 323.0159 306.97717 291.1388 275.54962 260.25824 245.31313 230.76233 216.65317 203.03212 189.94483 177.43553 165.54714 154.32106 143.79698 134.0124 125.00234 116.79581 109.40439 102.82365 97.0591 92.13067 88.05532 84.84658 82.51487 81.067444 80.50795 80.83639 82.04953 84.14018 87.09754 90.90772 95.552666 101.010926 107.257996 114.265396 122.001465 130.43091 139.5153 149.2141 159.48445 170.28104 181.55629 193.26093 205.34348 217.7508 230.42862 243.32183 256.3743 269.52957 282.73102 295.9222 309.04733 322.05118 334.88016 347.48163 359.80487 371.80106 383.424 394.63013 405.37842 415.63144 425.3552 434.51886 443.09592 451.06348 458.4032 465.1008 471.14658 476.53522 481.26593 485.34262 488.7739 491.57275 493.75662 495.3475 496.3717 496.85956 496.84534 496.36737 495.46716 494.18958 492.58267 490.69708 488.58545 486.3035 483.91342 481.4937 479.13565 476.9178 474.89975 473.13824 471.68683 470.59555 469.90707 469.65237 469.85217 470.52625 471.693 473.3667 475.55838 478.27533 481.5211 485.29556 489.59503 494.41266 499.73843 505.55896 511.8579 518.6163 525.8128 533.42334 541.4217 549.77985 558.4676 567.4538 576.7054 586.1881 595.86707 605.7063 615.66925 625.7193 635.81946 645.9323 656.0213 666.0493 675.9803 685.7786 695.40925 704.83814 714.0323 722.95936 731.5885 739.8902 747.836 755.39887 762.55335 769.2756 775.54297 781.33497 786.63215 791.4171 795.6739 799.3885 802.5485 805.1432 807.1633 808.6018 809.45276 809.71235 809.37836 808.44977 806.9278 804.81476 802.115 798.8338 794.97846 790.5573 785.5806 780.0597 774.0073 767.4374 760.3651 752.8071 744.78125 736.30634 727.4021 718.0895 708.39057 698.3282 687.92615 677.209 666.2015 654.92774 643.41205 631.6782 619.7506 607.65314 595.40986 583.045 570.5822 558.0452 545.4578 532.8433 520.22455 507.62344 495.0584 482.54245 470.08694 457.7081 445.42545 433.258 421.22473 409.3442 397.6343 386.1124 374.7956 363.70062 352.84393 342.2413 331.90762 321.85757 312.10556 302.6653 293.54938 284.77005 276.33914 268.2679 260.56674 253.24515 246.31208 239.77606 233.64456 227.92427 222.62126 217.74077 213.28736 209.26456 205.67517 202.52156 199.80501 197.5258 195.68352 194.27713 193.30448 192.76284 192.64849 192.95714 193.68378 194.82242 196.36627 198.30814 200.64029 203.35367 206.43878 209.88574 213.68413 217.82321 222.29122 227.07575 232.16461 237.54512 243.204 249.12732 255.3017 261.71317 268.34735 275.18997 282.2266 289.4432 296.8266 304.36395 312.04315 319.8521 327.77918 335.8132 343.94357 352.15973 360.45187 368.8102 377.2256 385.6891 394.19232 402.72614 411.28296 419.85495 428.4345 437.01428 445.5866 454.1443 462.68002 471.18652 479.6564 488.08194 496.45566 504.76975 513.0159 521.1857 529.2703 537.2609 545.1481 552.92176 560.57166 568.0873 575.45777 582.67017 589.7081 596.5539 603.1935 609.61774 615.81946 621.7921 627.5303 633.029 638.284 643.292 648.0507 652.5584 656.8139 660.8165 664.5667 668.0658 671.3156 674.31904 677.079 679.5991 681.8837 683.93805 685.76716 687.3772 688.77454 689.966 690.95826 691.7587 692.3749 692.8143 693.08454 693.1936 693.1494 692.95954 692.63135 692.17237 691.58985 690.8903 690.08027 689.1661 688.1533 687.04725 685.85236 684.57264 683.2111 681.77076 680.2539 678.6613 676.9936 675.25116 673.4329 671.5373 669.56214 667.50434 665.3604 663.12604 660.796 658.36487 655.8267 653.17487 650.402 647.50074 644.4632 641.28156 637.94715 634.4514 630.7863 626.9435 622.9143 618.6909 614.26557 609.63105 604.78 599.7063 594.40436 588.8693 583.0971 577.08484 570.8304 564.33265 557.59186 550.6097 543.38874 535.93305 528.2479 520.34046 512.2194 503.8944 495.37665 486.6794 477.81726 468.80585 459.66275 450.4067 441.05844 431.63953 422.17267 412.6818 403.19214 393.7373 384.36166 375.1059 365.99652 357.05106 348.2855 339.71545 331.35632 323.22324 315.33075 307.6932 300.32486 293.23944 286.4502 279.96967 273.8107 267.9885 262.51947 257.41818 252.69744 248.3687 244.44292 240.93036 237.84066 235.18222 232.9631 231.19043 229.87042 229.00817 228.60776 228.67249 229.2044 230.20446 231.67217 233.60619 236.00392 238.86145 242.1734 245.93334 250.13372 254.76535 259.81766 265.2786 271.13504 277.37286 283.97604 290.92758 298.20895 305.80054 313.6819 321.8309 330.22437 338.83835 347.6478 356.62643 365.74753 374.9839 384.30667 393.6873 403.09622 412.5033 421.8786 431.1922 440.4133 449.51132 458.4562 467.2181 475.7671 484.07428 492.11115 499.84964 507.2629 514.3253 521.012 527.2993 533.16456 538.58735 543.5485 548.0299 552.01557 555.4918 558.4469 560.8705 562.75434 564.0931 564.8833 565.12366 564.8153 563.9613 562.5678 560.6428 558.19696 555.2501 551.8413 548.0149 543.8075 539.2503 534.37415 529.2106 523.79084 518.1403 512.2809 506.23712 500.0376 493.71252 487.29187 480.80533 474.28192 467.7498 461.23703 454.77087 448.3776 442.08258 435.91043 429.8851 424.03006 418.3666 412.91568 407.69745 402.731 398.03436 393.6245 389.51746 385.7278 382.26975 379.15616 376.39923 374.00937 371.99646 370.36966 369.13687 368.30472 367.8791 367.86487 368.26636 369.086 370.32544 371.9865 374.0686 376.5706 379.49097 382.82666 386.5738 390.7272 395.28125 400.22928 405.5633 411.27472 417.35373 423.7895 430.57123 437.6868 445.12262 452.8633 460.89267 469.1938 477.7489 486.53857 495.54306 504.74185 514.1136 523.6357 533.2853 543.0385 552.8712 562.75794 572.6728 582.58967 592.48157 602.3388 612.16596 621.9575 631.69617 641.3591 650.92286 660.363 669.6553 678.7751 687.6978 696.3993 704.8538 713.0367 720.9234 728.48957 735.7117 742.5654 749.02784 755.07654 760.6899 765.8469 770.5276 774.71125 778.38135 781.5207 784.1131 786.1443 787.60047 788.47065 788.74445 788.41254 787.4821 785.9684 783.8861 781.248 778.067 774.35834 770.13575 765.41517 760.21235 754.54395 748.4258 741.8742 734.9067 727.5396 719.7888 711.67005 703.2013 694.3969 685.2724 675.84394 666.12415 656.1288 645.87055 635.3632 624.6192 613.65027 602.4682 591.08405 579.50946 567.7543 555.8284 543.7415 531.5029 519.1213 506.6058 493.9644 481.2063 468.33975 455.37354 442.3156 429.17487 415.9603 402.68094 389.346 375.96527 362.54886 349.12894 335.74338 322.42123 309.1856 296.05927 283.06317 270.21783 257.5451 245.06449 232.79517 220.75556 208.96369 197.43723 186.19171 175.24279 164.6052 154.29248 144.31839 134.69483 125.43257 116.54196 108.03286 99.91326 92.190926 84.873 77.96523 71.47232 65.39797 59.745697 54.517945 49.716568 45.34231 41.394623 37.872574 34.775143 32.099793 29.843604 28.002602 26.57297 25.549675 24.926623 24.697913 24.857323 25.396935 26.309433 27.586806 29.219717 31.200409 33.51884 36.16591 39.129776 42.402172 45.971905 49.828007 53.99087 58.46647 63.248314 68.32845 73.69609 79.34355 85.25984 91.43498 97.85792 104.51867 111.40596 118.5096 125.8154 133.31381 140.99288 148.84047 156.84398 164.99088 173.26963 181.66777 190.17192 198.77108 207.45153 216.22505 225.09642 234.05805 243.10288 252.222 261.41058 270.65915 279.9619 289.3077 298.69226 308.10535 317.53995 326.98743 336.4415 345.89233 355.33246 364.75317 374.14835 383.50818 392.82684 402.09412 411.3031 420.4475 429.51846 438.50858 447.4099 456.21664 464.91934 473.51144 481.9865 490.33615 498.5538 506.63455 514.57026 522.3545 529.9811 537.44446 544.73847 551.8563 558.7909 565.53925 572.09467 578.45276 584.6069 590.5529 596.28675 601.80207 607.0967 612.16437 617.0019 621.60547 625.9701 630.0951 633.9752 637.60755 640.9899 644.12104 646.99646 649.6163 651.9778 654.0807 655.9228 657.505 658.82605 659.8858 660.68677 661.2282 661.5115 661.5399 661.314 660.8375 660.114 659.14795 657.9418 656.50257 654.8359 653.1673)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (428.2446 419.4261 410.84787 402.5604 394.613 387.053 379.92505 373.27155 367.13214 361.54343 356.53882 352.14816 348.39774 345.3105 342.905 341.1961 340.1947 339.90723 340.3364 341.48038 343.33344 345.88556 349.1228 353.02728 357.57706 362.74677 368.50726 374.82574 381.66715 388.99237 396.76025 404.92682 413.4461 422.2699 431.34885 440.63178 450.0668 459.60104 469.1817 478.75543 488.26956 497.67163 506.91052 515.93616 524.6998 533.1549 541.25696 548.9636 556.23566 563.0365 569.3324 575.0936 580.29346 584.909 588.9213 592.3153 595.07966 597.20734 598.6956 599.54584 599.76294 599.3565 598.3399 596.73035 594.5487 591.8197 588.5715 584.8351 580.64515 576.0383 571.0544 565.7352 560.12464 554.2677 548.2116 542.00354 535.6924 529.32685 522.95826 516.64075 510.42288 504.3516 498.4724 492.82898 487.4631 482.4137 477.71735 473.40753 469.51453 466.0656 463.08368 460.58832 458.59525 457.11606 456.15814 455.72476 455.81503 456.4239 457.5419 459.15564 461.24777 463.7967 466.77728 470.16083 473.9153 478.00528 482.39282 487.03717 491.89514 496.92184 502.0702 507.29263 512.54 517.7624 522.91 527.9335 532.7835 537.41175 541.77124 545.8171 549.5055 552.7958 555.6496 558.0321 559.91126 561.25904 562.0511 562.2672 561.8913 560.9122 559.3228 557.121 554.30994 550.8967 546.8939 542.31916 537.1943 531.54596 525.40564 518.8092 511.79614 504.41074 496.7003 488.71594 480.5117 472.14432 463.67303 455.15875 446.66434 438.2534 429.99045 421.94034 414.16782 406.73737 399.72034 393.20282 387.27032 381.97928 377.38046 373.51862 370.43225 368.15326 366.7069 366.1111 366.3782 367.51267 369.51306 372.37122 376.0723 380.5958 385.91492 391.9975 398.80646 406.29938 414.4296 423.14606 432.39462 442.11743 452.25446 462.74283 473.51852 484.51572 495.66837 506.9098 518.1734 529.3933 540.505 551.44526 562.153 572.56916 582.638 592.30634 601.52497 610.2479 618.43366 626.04474 633.0477 639.41486 645.1228 650.15284 654.4952 658.1519 661.1354 663.4561 665.12745 666.16645 666.59296 666.42865 665.6986 664.4287 662.64734 660.3838 657.6688 654.53345 651.0101 647.131 642.9281 638.43384 633.6808 628.69996 623.5224 618.1783 612.69684 607.1065 601.43415 595.70557 589.9457 584.1776 578.4233 572.7036 567.03864 561.44916 555.9543 550.56525 545.2874 540.1252 535.08124 530.15735 525.35456 520.673 516.11127 511.6679 507.34027 503.1255 499.02014 495.02057 491.12253 487.3218 483.6139 479.99426 476.4571 472.99634 469.60645 466.28317 463.02286 459.82233 456.67844 453.58893 450.55124 447.56345 444.62433 441.7333 438.8896 436.0931 433.3445 430.6445 427.99414 425.39514 422.84967 420.35992 417.92847 415.55838 413.25305 411.01538 408.84915 406.75815 404.746 402.8165 400.97382 399.22134 397.5633 396.00317 394.5444 393.19037 391.9443 390.809 389.7871 388.88135 388.09335 387.42456 386.8766 386.45017 386.14575 385.9636 385.90292 385.96314 386.1429 386.44058 386.85364 387.3782 388.0069 388.72815 389.53232 390.4132 391.3644 392.3793 393.4505 394.56564 395.70325 396.8421 397.97266 399.09168 400.19635 401.28442 402.3541 403.40433 404.43472 405.44525 406.43668 407.4097 408.36612 409.308 410.23776 411.15836 412.07312 412.9857 413.89975 414.81943 415.74915 416.69308 417.6557 418.641 419.65295 420.69556 421.7724 422.88663 424.04102 425.23758 426.47806 427.76297 429.09222 430.46524 431.88007 433.33386 434.82288 436.3419 437.885 439.44473 441.0125 442.57904 444.1329 445.6622 447.15366 448.59277 449.96408 451.2515 452.43747 453.5041 454.43243 455.20355 455.79785 456.19562 456.37772 456.32434 456.01672 455.43692 454.56772 453.3931 451.8987 450.07214 447.90274 445.38235 442.50537 439.26895 435.6738 431.7239 427.4268 422.79388 417.8409 412.58762 407.0581 401.28125 395.2906 389.1283 382.8588 376.57208 370.35675 364.28442 358.42172 352.83447 347.5873 342.74265 338.3609 334.49976 331.21356 328.55316 326.5656 325.29346 324.77554 325.04794 326.14368 328.08868 330.89798 334.5787 339.13297 344.55765 350.84457 357.98035 365.94675 374.72104 384.27573 394.57928 405.59564 417.28476 429.60327 442.5043 455.93756 469.8504 484.18735 498.8908 513.90107 529.1573 544.5971 560.15717 575.77375 591.3826 606.9194 622.32044 637.52265 652.4634 667.0815 681.3177 695.1139 708.41407 721.1643 733.31336 744.812 755.61445 765.6778 774.9622 783.43085 791.0501 797.7906 803.62647 808.5352 812.49775 815.4992 817.5288 818.5792 818.6471 817.7331 815.8411 812.9787 809.1581 804.39527 798.7086 792.1203 784.6556 776.344 767.2175 757.31196 746.66736 735.324 723.31934 710.6906 697.4765 683.71845 669.45936 654.7438 639.61786 624.1293 608.3266 592.25977 575.9792 559.53626 542.98194 526.3695 509.75003 493.1751 476.69595 460.3624 444.22394 428.32864 412.72357 397.45398 382.56268 368.09073 354.07748 340.55905 327.56958 315.14008 303.29822 292.06876 281.47397 271.53162 262.25684 253.6611 245.75164 238.53118 231.99265 226.12085 220.89992 216.31613 212.35552 209.00255 206.2397 204.04799 202.4074 201.29729 200.69574 200.5801 200.9274 201.71419 202.91736 204.51361 206.47968 208.79308 211.43206 214.37499 217.60123 221.09136 224.82683 228.79009 232.96498 237.33661 241.89144 246.61734 251.50347 256.54065 261.7209 267.0373 272.48462 278.05927 283.75842 289.58054 295.5255 301.59393 307.787 314.10687 320.5568 327.14005 333.86084 340.72363 347.73322 354.89426 362.21176 369.6901 377.33353 385.14597 393.13028 401.28912 409.62357 418.13434 426.82187 435.6841 444.71738 453.91776 463.2802 472.7973 482.45984 492.25763 502.17868 512.20936 522.33484 532.53797 542.80036 553.1023 563.422 573.73664 584.0217 594.2519 604.4005 614.4392 624.33924 634.07117 643.60456 652.9085 661.95185 670.7028 679.1299 687.20185 694.8875 702.15577 708.9765 715.3206 721.16004 726.46735 731.21674 735.384 738.94684 741.88434 744.1778 745.81 746.76685 747.0367 746.6093 745.47767 743.638 741.0887 737.83167 733.87275 729.22016 723.88617 717.8863 711.2386 703.96424 696.08686 687.6327 678.6305 669.11164 659.1096 648.6599 637.79975 626.5652 614.9838 603.08075 590.89155 578.4636 565.8487 553.09937 540.2694 527.41364 514.58747 501.8457 489.2436 476.83652 464.6795 452.82523 441.3264 430.2339 419.59637 409.46072 399.8716 390.87125 382.49933 374.79144 367.77985 361.49445 355.96082 351.2 347.22968 344.06308 341.70883 340.17114 339.44998 339.5403 340.43237 342.1122 344.56046 347.75388 351.66455 356.25958 361.50266 367.35242 373.7638 380.6887 388.07504 395.86713 404.00665 412.43292 421.08298 429.89218 438.7939 447.7215 456.6071 465.38242 473.9799 482.33368 490.37872 498.0509 505.28912 512.0358 518.23615 523.8388 528.79737 533.07 536.6199 539.41626 541.4338 542.6528 543.06165 542.65497 541.4333 539.4057 536.5882 533.0033 528.68097 523.65857 517.9808 511.69873 504.88327 497.6416 490.08524 482.30484 474.37683 466.3743 458.36954 450.42957 442.6198 435.00256 427.63245 420.55673 413.81796 407.45477 401.50037 395.9827 390.92502 386.34653 382.262 378.68173 375.6115 373.054 371.00778 369.46777 368.4255 367.87067 367.78973 368.1673 368.98557 370.22546 371.8667 373.88815 376.2667 378.97974 382.00522 385.3192 388.8986 392.72183 396.7667 401.0116 405.43738 410.02463 414.75552 419.61282 424.58176 429.648 434.79837 440.02103 445.3076 450.64822 456.03583 461.46356 466.92633 472.42136 477.9452 483.4955 489.07068 494.67007 500.2956 505.94882 511.631 517.34406 523.0881 528.864 534.6729 540.51416 546.3883 552.2947 558.2315 564.1966 570.18757 576.2001 582.22895 588.2683 594.3113 600.35 606.37525 612.3751 618.331 624.21845 630.0108 635.6799 641.19727 646.53345 651.659 656.5439 661.1592 665.47425 669.4599 673.0879 676.3281 679.1541 681.5381 683.4555 684.881 685.7911 686.1651 685.9832 685.22767 683.8835 681.9367 679.3774 676.19635 672.388 667.949 662.88056 657.18506 650.8687 643.9406 636.4163 628.32117 619.68494 610.53876 600.9169 590.85535 580.3919 569.56635 558.4185 546.9908 535.3254 523.4648 511.453 499.33337 487.1498 474.94605 462.76523 450.64902 438.6394 426.7767 415.10065 403.64984 392.46094 381.56958 371.0101 360.81363 351.01114 341.62988 332.69772 324.23898 316.2752 308.8272 301.9126 295.54733 289.74512 284.51743 279.8732 275.8197 272.36108 269.50067 267.23853 265.57245 264.499 264.01166 264.10324 264.75507 265.94138 267.6389 269.82294 272.4684 275.55118 279.0442 282.92075 287.1539 291.7159 296.5796 301.71634 307.09848 312.69815 318.4878 324.4402 330.52826 336.72513 343.00668 349.34753 355.72256 362.1075 368.47943 374.81683 381.09876 387.3041 393.41437 399.41116 405.27762 410.99597 416.55206 421.93127 427.12134 432.1096 436.88495 441.43854 445.75977 449.84137 453.67532 457.25842 460.58292 463.64655 466.44473 468.97635 471.2393 473.233 474.95816 476.41516 477.60562 478.53217 479.19772 479.60617 479.7614 479.66736 479.35312 478.83286 478.11044 477.19022 476.07517 474.76895 473.27582 471.60037 469.7459 467.71753 465.51956 463.1575 460.63492 457.95807 455.13086 452.15857 449.04697 445.7999 442.42416 438.924 435.30545 431.57242 427.73084 423.77924 419.71783 415.54923 411.27744 406.90625 402.43802 397.87674 393.22742 388.49365 383.68015 378.7904 373.83093 368.80496 363.71823 358.57532 353.3815 348.14282 342.86417 337.55136 332.2117 326.8501 321.47116 316.08353 310.6924 305.30493 299.92676 294.5658 289.2274 283.91986 278.65027 273.42334 268.2507 263.1351 258.08737 253.11157 248.21875 243.41384 238.70465 234.09876 229.60446 225.22837 220.97879 216.8623 212.88765 209.06128 205.39054 201.8828 198.54644 195.38637 192.41196 189.62824 187.04346 184.66378 182.49485 180.54477 178.81761 177.32045 176.0599 175.0403 174.26787 173.74575 173.48169 173.47849 173.7399 174.27066 175.07392 176.15407 177.51293 179.15433 181.07935 183.28943 185.78847 188.57587 191.6512 195.01586 198.6705 202.32769)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (446.8144 449.19214 451.60175 454.04254 456.5135 459.0136 461.5422 464.09802 466.68024 469.28784 471.9196 474.57465 477.25177 479.94992 482.66797 485.40466 488.15878 490.92914 493.71445 496.51337 499.32455 502.1467 504.97815 507.81754 510.6634 513.514 516.36774 519.22297 522.0778 524.93055 527.7793 530.622 533.4567 536.28125 539.0936 541.8914 544.6724 547.4342 550.1744 552.89026 555.5793 558.23884 560.866 563.4582 566.01227 568.5254 570.99445 573.4164 575.788 578.10614 580.36756 582.569 584.707 586.7784 588.7798 590.70777 592.5591 594.33045 596.01825 597.61957 599.13105 600.54957 601.8721 603.0956 604.2173 605.23444 606.1442 606.9445 607.633 608.2075 608.6662 609.00757 609.2299 609.3323 609.31385 609.17395 608.912 608.5248 607.99085 607.25885 606.3254 605.187 603.8412 602.28565 600.51886 598.5398 596.3481 593.944 591.3286 588.5036 585.4714 582.235 578.7986 575.1669 571.3454 567.34064 563.1598 558.81104 554.3032 549.64624 544.85096 539.93006 534.8989 529.7702 524.5575 519.2747 513.93677 508.55893 503.15698 497.74738 492.34686 486.97296 481.64316 476.37582 471.1892 466.10193 461.13306 456.30148 451.62625 447.12656 442.82163 438.73038 434.8716 431.26386 427.92514 424.8733 422.12543 419.69824 417.60745 415.86813 414.49448 413.49957 412.89557 412.6931 412.90186 413.52997 414.584 416.06906 417.9885 420.34378 423.1347 426.35904 430.01248 434.08862 438.57907 443.47293 448.7574 454.41702 460.43417 466.78918 473.4596 480.42084 487.64587 495.10278 502.73972 510.46112 518.1622 525.7942 533.3107 540.66797 547.8247 554.7427 561.38685 567.7249 573.7281 579.37055 584.6297 589.48645 593.9247 597.93146 601.49726 604.6151 607.2814 609.49506 611.25806 612.57465 613.45166 613.8982 613.92554 613.547 612.77765 611.6342 610.13477 608.29895 606.1474 603.70154 600.9837 598.01716 594.82496 591.4309 587.8588 584.13245 580.27527 576.3104 572.26075 568.14856 563.9951 559.8212 555.6464 551.4897 547.3694 543.30396 539.3102 535.401 531.58826 527.88215 524.2918 520.82477 517.4871 514.28394 511.21875 508.29398 505.5104 502.86826 500.3662 498.00192 495.77225 493.67303 491.69952 489.8459 488.106 486.47278 484.9393 483.49777 482.14032 480.85898 479.6456 478.49228 477.39108 476.3338 475.30707 474.2798 473.20367 472.0472 470.80154 469.4591 468.0127 466.45593 464.7835 462.9911 461.0747 459.0317 456.86047 454.56015 452.13086 449.57355 446.8902 444.08374 441.15775 438.11694 434.9668 431.7141 428.366 424.92996 421.41415 417.82724 414.17844 410.47702 406.7331 402.9569 399.1588 395.34952 391.53955 387.73975 383.96106 380.21423 376.50986 372.8586 369.2709 365.75687 362.3265 358.98962 355.75583 352.63434 349.63422 346.76444 344.03336 341.4492 339.02036 336.75485 334.6605 332.7449 331.0159 329.4812 328.14838 327.02533 326.11984 325.43994 324.9938 324.79007 324.83743 325.14478 325.72162 326.57748 327.7223 329.16638 330.92023 332.99478 335.401 338.14926 341.24838 344.7063 348.5331 352.74176 357.34537 362.35666 367.78732 373.64282 379.9137 386.57904 393.62064 401.02365 408.77222 416.84933 425.23697 433.9163 442.86743 452.06952 461.50095 471.13934 480.96152 490.94345 501.06052 511.28766 521.59925 531.96924 542.37104 552.7779 563.163 573.4994 583.7597 593.91694 603.94404 613.8146 623.50214 632.9804 642.2241 651.2084 659.9085 668.30134 676.3638 684.0741 691.4112 698.3553 704.8873 710.98987 716.64624 721.84107 726.5604 730.7917 734.5234 737.74567 740.4498 742.62897 744.2773 745.3903 745.96546 746.0012 745.4976 744.45594 742.87915 740.77124 738.13776 734.9854 731.32215 727.1573 722.50116 717.36524 711.76215 705.7054 699.2096 692.29017 684.9633 677.24616 669.15656 660.713 651.93445 642.8406 633.4513 623.78724 613.8693 603.7187 593.3565 582.8009 572.05536 561.1074 549.9541 538.61054 527.0975 515.43634 503.6493 491.75986 479.79208 467.7708 455.7215 443.67017 431.6434 419.66815 407.77222 395.98575 384.3419 372.87357 361.6102 350.57907 339.80743 329.3221 319.1494 309.31528 299.84467 290.76205 282.09103 273.85403 266.07294 258.76828 251.95952 245.6648 239.90077 234.68297 230.0253 225.94004 222.43795 219.5282 217.21814 215.51329 214.41753 213.93285 214.05934 214.79529 216.13713 218.07936 220.61449 223.73325 227.42462 231.6758 236.47196 241.79651 247.63144 253.95709 260.752 267.99353 275.6573 283.71738 292.14728 300.91913 310.00354 319.37064 328.98975 338.82956 348.8576 359.0414 369.34787 379.74414 390.19678 400.67212 411.1371 421.55945 431.90607 442.14508 452.245 462.1753 471.90335 481.39148 490.6029 499.5085 508.08615 516.31586 524.1788 531.6583 538.7396 545.4095 551.65625 557.4701 562.843 567.76905 572.24335 576.26294 579.82636 582.9341 585.58765 587.7904 589.5472 590.86384 591.74756 592.207 592.25196 591.8933 591.1429 590.0136 588.5193 586.6743 584.4943 581.9951 579.19324 576.1063 572.75196 569.1483 565.3137 561.267 557.02674 552.60987 548.0326 543.3116 538.465 533.51136 528.46955 523.35816 518.1956 513.00037 507.7908 502.5849 497.40036 492.25507 487.16632 482.15186 477.22876 472.41354 467.72284 463.17307 458.78015 454.5599 450.52737 446.6981 443.08658 439.7069 436.57303 433.69836 431.09592 428.77814 426.75674 425.043 423.64752 422.58026 421.85028 421.4661 421.43524 421.7644 422.45935 423.52472 424.96423 426.78058 428.9751 431.54785 434.4978 437.82272 441.51898 445.58142 450.00348 454.77722 459.8933 465.34082 471.10748 477.1792 483.54056 490.17453 497.06262 504.18512 511.5206 519.0459 526.7369 534.56806 542.5129 550.54346 558.6302 566.7431 574.85144 582.9233 590.9259 598.8263 606.5909 614.18567 621.5762 628.7285 635.60865 642.1825 648.4164 654.27735 659.7331 664.7526 669.30555 673.36225 676.89496 679.87757 682.2853 684.0951 685.2862 685.8396 685.7386 684.96857 683.51764 681.37647 678.5382 674.99884 670.75727 665.81476 660.1758 653.8478 646.8411 639.16895 630.84754 621.8958 612.337 602.1987 591.5119 580.3101 568.62897 556.507 543.9849 531.10486 517.9113 504.45013 490.76852 476.91476 462.93866 448.88992 434.81708 420.7678 406.79178 392.9404 379.2652 365.81693 352.64597 339.80173 327.33264 315.2856 303.70624 292.63803 282.12268 272.19998 262.90686 254.27788 246.34503 239.13745 232.68129 226.99933 222.11133 218.03385 214.77971 212.35848 210.77614 210.0353 210.13486 211.0704 212.83356 215.41272 218.79309 222.95623 227.88042 233.5409 239.91002 246.95703 254.64829 262.948 271.81784 281.21722 291.1034 301.43204 312.15692 323.23044 334.60434 346.22928 358.05484 370.03027 382.10486 394.22803 406.349 418.41782 430.3849 442.2019 453.82175 465.19833 476.28723 487.04584 497.4335 507.41168 516.9436 525.9954 534.5355 542.53486 549.96735 556.8097 563.0414 568.6445 573.6043 577.90937 581.5511 584.5235 586.8236 588.45185 589.41114 589.7071 589.3504 588.361 586.7675 584.60157 581.89496 578.68055 574.9917 570.8624 566.329 561.4295 556.20014 550.67457 544.8854 538.8645 532.64277 526.2499 519.71454 513.0645 506.32584 499.52405 492.68234 485.82297 478.96683 472.13318 465.34 458.60385 451.9403 445.36316 438.8848 432.51642 426.26843 420.14935 414.16647 408.32684 402.63617 397.0987 391.71857 386.49832 381.43988 376.54535 371.815 367.24863 362.84622 358.6071 354.52908 350.61096 346.85083 343.246 339.79398 336.49182 333.3369 330.32608 327.45587 324.72327 322.12482 319.65726 317.3175 315.1023 313.008 311.03137 309.1691 307.41782 305.77502 304.23807 302.80417 301.47113 300.23666 299.09863 298.0551 297.10425 296.24426 295.47376 294.79123 294.19547 293.68527 293.2592 292.9167 292.66187 292.50568 292.45908 292.52997 292.72537 293.0518 293.51678 294.127 294.88916 295.81018 296.8969 298.1555 299.592 301.21353 303.02524 305.03333 307.24258 309.65854 312.28647 315.1304 318.19443 321.48233 324.99765 328.74252 332.72018 336.9322 341.37906 346.06165 350.97952 356.13275 361.51938 367.13767 372.98624 379.0615 385.35858 391.8714 398.59296 405.5156 412.6311 419.9304 427.4024 435.0354 442.81778 450.73575 458.77506 466.9199 475.1544 483.46045 491.8211 500.21646 508.62653 517.0301 525.40577 533.73084 541.9821 550.1355 558.1667 566.0504 573.7612 581.27356 588.5613 595.5975 602.356 608.8108 614.93555 620.7045 626.09247 631.074 635.62525 639.72284 643.3447 646.46967 649.0779 651.1511 652.67255 653.6273 654.0028 653.8012 653.03754 651.72736 649.88654 647.5322 644.6833 641.3587 637.57984 633.36976 628.7509 623.7481 618.3866 612.69135 606.6886 600.4052 593.86835 587.10407 580.1403 573.0038 565.7205 558.3172 550.8207 543.25586 535.6483 528.02265 520.4027 512.81067 505.26852 497.7994 490.42246 483.1578 476.0232 469.03687 462.21472 455.57166 449.1236 442.88205 436.8596 431.0684 425.51605 420.21283 415.16675 410.3847 405.87106 401.63123 397.66834 393.98642 390.58615 387.4692 384.63474 382.0832 379.81223 377.8193 376.1018 374.6515 373.46118 372.52628 371.84137 371.4009 371.1987 371.2286 371.48386 371.95706 372.64145 373.52924 374.61276 375.8842 377.3356 378.9586 380.7454 382.6876 384.77692 387.0051 389.36398 391.84546 394.44135 397.14352 399.99445 403.01572 406.21085 409.58118 413.12592 416.84625 420.7405 424.80884 429.0476 433.45688 438.03323 442.77475 447.67532 452.73334 457.94293 463.29904 468.7954 474.4267 480.18454 486.063 492.05142 498.14423 504.33014 510.60004 516.943 523.34797 529.8024 536.29566 542.8146 549.34455 555.8731 562.385 568.8672 575.30274 581.67865 587.977 594.18207 600.27765 606.2475 612.07306 617.73945 623.2282 628.524 633.60596 638.46174 643.0711 647.41987 651.4896 655.2648 658.7299 661.8688 664.6674 667.11115 669.18604 670.88 672.17945 673.0742 673.5532 673.6067 673.2262 672.40455 671.1343 669.4105 667.2295 664.58735 661.48304 657.9157 653.88697 649.3987 644.4549 639.06134 633.2232 626.9491 620.2482 613.13337 605.61396 598.0908)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) nil "sine-waves"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 275 383) (om-make-point 292 30) (list 1 6 7 9 10 11 12 13 14 14 14 15 16 17 18 20) "(1 6 7 9 10 11 12 13 14 14 14 15 16 17 18   20)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "channels" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord-seqs" nil) (om-load-inputfun (quote input-funbox) "" "channels" nil))) (om-make-point 318 433) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 243 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 13 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 230 331) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNEL-CHORDSEQ" (quote r-apply-channel-chordseq) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "CHORD-SEQ" nil) (om-load-inputfun (quote input-funbox) "channel" "CHANNEL" nil))) (om-make-point 166 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "channels" 1 (om-make-point 250 59) "" "channels" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord-seqs" 0 (om-make-point 5 40) "" "chord-seqs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 415) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 415) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (5 0 1 0 nil 0) (3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0) (2 1 6 0 nil 0) (2 0 7 0 nil 0))) 1 "channels" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 93 408) (om-make-point 130 90) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9452) (9452) (9402) (9452) (9402) (9452) (9402) (9452) (9402) (9452) (9402) (9452) (9402) (9452) (9402) (9452) (9502) (9452) (9502) (9452) (9502) (9452) (9502) (9452) (9502) (9452) (9502) (9452) (9502) (9452) (9502) (9452) (9502) (9452) (9502) (9452) (9602) (9452) (9602) (9452) (9602) (9452) (9602) (9452) (9602) (9452) (9452) (9452) (9202) (9452) (9202) (9452) (9202) (9452) (9202) (9452) (9202) (9452) (9202) (9452) (9202))) :lonset (quote (1057 2338 2457 2590 2709 2816 2964 3093 3199 3334 3465 3625 3785 3945 4105 6144 6255 6375 6506 6650 6811 6989 7181 7383 7584 7767 7916 8028 8113 8181 8247 8324 8419 8514 8609 10310 10527 10708 10789 10896 11080 11242 11404 11566 11728 11890 14562 19579 19760 20014 20252 20417 20576 20782 20969 21119 21193 21262 21331 21400 21469 21538)) :ldur (quote ((1281) (119) (133) (119) (107) (148) (129) (106) (135) (131) (160) (160) (160) (160) (160) (111) (120) (131) (144) (161) (178) (192) (202) (201) (183) (149) (112) (85) (68) (66) (77) (95) (95) (95) (95) (217) (181) (81) (107) (184) (162) (162) (162) (162) (162) (929) (3887) (181) (254) (238) (165) (159) (206) (187) (150) (74) (69) (69) (69) (69) (69))) :lvel (quote ((53) (56) (58) (61) (66) (71) (72) (67) (66) (63) (58) (58) (58) (58) (58) (55) (57) (61) (66) (71) (74) (75) (74) (72) (69) (66) (63) (60) (58) (57) (56) (55) (55) (55) (55) (62) (69) (69) (64) (61) (58) (58) (58) (58) (58) (88) (79) (56) (65) (66) (67) (70) (72) (74) (74) (65) (62) (62) (62) (62) (62))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9316) (9466) (9316) (9466) (9316) (9466) (9316) (9466) (9316) (9466) (9316) (9466) (9316) (9466) (9316) (9466) (9316) (9466) (9316) (9466) (9316) (9466) (6212) (10200) (1575) (8538) (11862) (4862) (3438) (9762) (5525) (7650) (9275) (1525) (3225) (11050) (6550) (7062) (10688) (5838) (2762) (5850) (3962) (7912) (11925) (2000) (8288) (10925) (975) (5562) (8100) (938) (5738) (9316) (9116) (9316) (9116) (9316) (9116) (9316) (9116) (9316) (9116) (9316) (9116) (9316) (9116) (9316) (9116) (9316) (9116) (4600) (5012) (8800) (7462) (9675) (6712) (3350) (4900) (1462))) :lonset (quote (721 886 1006 1135 1296 1430 1520 1585 1653 1742 1858 1998 2155 2324 2504 2707 2917 3078 3217 3356 3495 3634 5081 5378 5618 5924 6235 6546 6823 7102 7423 7699 9307 9532 9711 9894 10109 10324 10590 10865 11126 12568 12713 12916 13183 13346 13501 13667 13858 14001 14181 14402 14599 14796 14946 15081 15234 15419 15617 15817 15988 16087 16185 16334 16449 16515 16582 16691 16828 16965 17102 17997 18268 18567 18823 19079 19299 19530 19702 19905 20108)) :ldur (quote ((165) (120) (129) (161) (134) (90) (65) (68) (89) (116) (140) (157) (169) (180) (203) (210) (161) (139) (139) (139) (139) (139) (297) (240) (306) (311) (311) (277) (279) (321) (276) (276) (225) (179) (183) (215) (215) (266) (275) (261) (261) (145) (203) (267) (163) (155) (166) (191) (143) (180) (221) (197) (197) (150) (135) (153) (185) (198) (200) (171) (99) (98) (149) (115) (66) (67) (109) (137) (137) (137) (137) (271) (299) (256) (256) (220) (231) (172) (203) (203))) :lvel (quote ((63) (66) (71) (73) (74) (74) (72) (69) (67) (67) (66) (66) (64) (60) (60) (58) (57) (56) (56) (56) (56) (56) (56) (67) (73) (70) (57) (58) (67) (75) (67) (56) (60) (64) (67) (72) (60) (55) (71) (70) (56) (56) (65) (71) (75) (74) (71) (69) (66) (63) (59) (58) (56) (55) (60) (66) (69) (70) (72) (74) (72) (70) (66) (65) (64) (62) (60) (58) (58) (58) (58) (55) (69) (62) (56) (55) (66) (74) (60) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9192) (10000) (9188) (8912) (6288) (4288) (9192) (9242) (9192) (9242) (9192) (9242) (9192) (9242) (9192) (9242) (10100) (1362) (4475) (1538) (2888) (9438) (6438) (9192) (7950) (11050) (9192) (9242) (9192) (9242) (9192) (9242) (9192) (9242) (2062) (7612) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (8362) (7888) (2012) (9412) (3638) (6638) (4000) (3788) (4462) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (10288) (3800) (5800))) :lonset (quote (660 1549 1785 1986 2196 2440 2684 2826 2953 3134 3310 3442 3576 3710 3844 3978 5543 5732 5949 6174 6399 6711 7029 7347 9658 10658 11179 11294 11497 11603 11702 11801 11900 11999 12098 13098 14690 14792 14928 15087 15188 15273 15419 15594 15777 15959 16071 16154 16313 16456 16542 16638 16752 16866 16980 17094 17208 17404 17673 17978 18226 18550 18820 19081 19268 20342 20465 20684 20865 21046 21227 21408 21930 22218 22453 22688)) :ldur (quote ((889) (236) (201) (210) (244) (244) (142) (127) (181) (176) (132) (134) (134) (134) (134) (134) (189) (217) (225) (225) (312) (318) (318) (629) (521) (521) (115) (203) (106) (99) (99) (99) (99) (99) (521) (521) (102) (136) (159) (101) (85) (146) (175) (183) (182) (112) (83) (159) (143) (86) (96) (114) (114) (114) (114) (114) (196) (269) (305) (248) (324) (270) (261) (187) (187) (123) (219) (181) (181) (181) (181) (522) (288) (235) (235))) :lvel (quote ((89) (55) (71) (69) (64) (55) (70) (73) (75) (74) (63) (59) (59) (59) (59) (59) (55) (68) (68) (59) (56) (69) (59) (48) (70) (70) (59) (72) (62) (55) (55) (55) (55) (55) (59) (59) (59) (64) (69) (73) (74) (74) (72) (71) (71) (69) (67) (66) (65) (63) (61) (61) (61) (61) (61) (61) (61) (64) (69) (72) (69) (68) (64) (60) (57) (61) (73) (57) (57) (57) (57) (80) (56) (72) (71))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9192) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (9192) (9192) (9192) (9192) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (9042) (9192) (9192) (9142) (9192) (9142) (9192) (9142) (9192) (9142) (9192) (9142) (9192) (9142) (9192) (9142))) :lonset (quote (780 2061 2147 2251 2372 2507 2655 2814 2983 3161 3346 3531 3716 5280 6446 8938 9958 12228 13556 13736 13910 14080 14249 14423 14595 14752 14885 15018 15151 15284 15417 17635 17779 18011 18199 18313 18501 18669 18821 18979 19090 19188 19286 19384 19482 19580)) :ldur (quote ((1281) (86) (104) (121) (135) (148) (159) (169) (178) (185) (185) (185) (185) (1166) (1166) (1020) (1020) (1328) (180) (174) (170) (169) (174) (172) (157) (133) (133) (133) (133) (133) (1328) (144) (232) (188) (114) (188) (168) (152) (158) (111) (98) (98) (98) (98) (98))) :lvel (quote ((66) (62) (67) (74) (74) (72) (70) (68) (65) (62) (62) (62) (62) (87) (83) (69) (47) (62) (61) (62) (63) (65) (70) (73) (70) (56) (56) (56) (56) (56) (54) (56) (60) (67) (72) (70) (67) (65) (62) (58) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9192) (9192) (9142) (9192) (9142) (9192) (9142) (9192) (9142) (9192) (9142) (9192) (9192) (9442) (9192) (9442) (9192) (9442) (9192) (9442) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9342) (9192) (9192) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (8992) (9192) (9192) (9142) (9192) (9142) (9192) (9142) (9192) (9142))) :lonset (quote (528 1483 1632 1741 1838 1986 2256 2441 2626 2811 2996 3181 5548 5715 5938 6192 6335 6530 6725 6920 7115 7257 7400 7575 7777 7959 8097 8235 8373 8511 9849 9946 10065 10232 10423 10604 10750 10926 11102 11278 11454 13845 15816 15886 16013 16186 16310 16416 16581 16747 16909 17026 17112 17278 17433 17574 17695 17794 17893 17992 18759 19509 19692 19888 20094 20261 20428 20595 20762 20929)) :ldur (quote ((955) (149) (109) (97) (148) (270) (185) (185) (185) (185) (185) (955) (167) (223) (254) (143) (195) (195) (195) (195) (142) (143) (175) (202) (182) (138) (138) (138) (138) (138) (97) (119) (167) (191) (181) (146) (176) (176) (176) (176) (1074) (1971) (70) (127) (173) (124) (106) (165) (166) (162) (117) (86) (166) (155) (141) (121) (99) (99) (99) (99) (750) (183) (196) (206) (167) (167) (167) (167) (167))) :lvel (quote ((82) (55) (60) (63) (65) (72) (55) (55) (55) (55) (55) (57) (61) (74) (68) (62) (57) (57) (57) (57) (56) (67) (72) (68) (64) (58) (58) (58) (58) (58) (55) (63) (66) (72) (73) (66) (63) (63) (63) (63) (64) (62) (55) (61) (66) (68) (70) (73) (73) (71) (70) (68) (64) (63) (62) (60) (55) (55) (55) (55) (90) (56) (68) (68) (56) (56) (56) (56) (56))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9144) (9144) (9294) (9144) (9294) (9144) (9294) (9144) (9294) (9144) (9294) (9144) (9294) (9144) (9144) (9144) (9294) (9144) (9294) (9144) (9294) (9144) (9294) (9144) (9144) (9394) (9144) (9394) (9144) (9394) (9144) (9394) (9144) (9394) (9144) (9394) (9144) (9394) (9144) (8994) (9144) (8994) (9144) (8994) (9144) (8994) (9144) (8994) (9144) (8994) (9144) (8994) (9144) (9344) (9144) (9344) (9144) (9344) (9144) (9344) (9144) (9344) (9144) (9344) (9144) (9144) (9144) (9144) (9144) (9144) (9144) (9144) (9144) (9144) (9144) (8994) (9144) (8994) (9144) (8994) (9144) (8994) (9144) (8994))) :lonset (quote (600 1984 2118 2335 2500 2600 2739 2965 3127 3372 3617 3862 4107 5992 6753 7514 7673 7887 8012 8167 8278 8389 8500 9510 12598 12691 12828 12997 13177 13349 13504 13643 13774 13895 13988 14081 14174 14267 14360 14527 14680 14817 14940 15057 15172 15286 15379 15461 15588 15751 15914 16077 16240 16416 16607 16772 16934 16999 17091 17281 17440 17633 17826 18019 19164 19385 19504 19617 19772 19886 20011 20136 20261 20386 20511 20596 20745 20836 21053 21251 21359 21467 21575 21683 21791)) :ldur (quote ((1384) (134) (217) (165) (100) (139) (226) (162) (245) (245) (245) (245) (245) (761) (761) (159) (214) (125) (155) (111) (111) (111) (111) (1981) (93) (137) (169) (180) (172) (155) (139) (131) (121) (93) (93) (93) (93) (93) (167) (153) (137) (123) (117) (115) (114) (93) (82) (127) (163) (163) (163) (163) (176) (191) (165) (162) (65) (92) (190) (159) (193) (193) (193) (193) (221) (119) (113) (155) (114) (125) (125) (125) (125) (125) (85) (149) (91) (217) (198) (108) (108) (108) (108) (108))) :lvel (quote ((70) (60) (61) (63) (68) (72) (62) (58) (55) (55) (55) (55) (55) (72) (87) (55) (73) (73) (67) (60) (60) (60) (60) (76) (58) (66) (70) (71) (73) (74) (73) (70) (66) (56) (56) (56) (56) (56) (56) (64) (68) (73) (73) (68) (66) (65) (63) (58) (55) (55) (55) (55) (56) (59) (61) (62) (64) (67) (72) (71) (63) (63) (63) (63) (55) (60) (66) (72) (71) (61) (61) (61) (61) (61) (56) (64) (67) (70) (71) (59) (59) (59) (59) (59))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9096) (4988) (9500) (38) (10200) (11625) (3800) (5488) (9096) (9346) (9096) (9346) (9096) (9346) (9096) (9346) (9096) (9346) (9096) (9346) (9096) (9096) (9246) (9096) (9246) (9096) (9246) (9096) (9246) (9096) (9071) (9096) (9071) (9096) (9071) (9096) (9071) (9096) (9071) (9096) (9071) (9096) (9071) (9096) (9071) (9096) (9096) (9321) (9096) (9321) (9096) (9321) (9096) (9321) (9238) (9750) (11600) (7100))) :lonset (quote (572 4537 4725 4907 5104 5303 5485 5643 5801 5929 6040 6148 6297 6432 6564 6672 6815 6908 7001 7094 8470 9348 9529 9802 10000 10227 10454 10681 10908 12267 12442 12573 12692 12818 13019 13150 13297 13531 13687 13783 13901 14119 14347 14575 14803 15031 17845 18077 18218 18420 18646 18872 19098 19324 19550 19803 20086 20351 20616)) :ldur (quote ((2612) (188) (182) (197) (199) (182) (158) (158) (128) (111) (108) (149) (135) (132) (108) (143) (93) (93) (93) (93) (878) (181) (273) (198) (227) (227) (227) (227) (227) (175) (131) (119) (126) (201) (131) (147) (234) (156) (96) (118) (218) (228) (228) (228) (228) (2075) (232) (141) (202) (226) (226) (226) (226) (226) (253) (283) (265) (265))) :lvel (quote ((61) (61) (65) (68) (72) (74) (70) (58) (61) (62) (74) (71) (67) (65) (62) (60) (57) (57) (57) (57) (62) (68) (72) (67) (63) (63) (63) (63) (63) (57) (59) (62) (65) (68) (70) (71) (72) (73) (74) (70) (63) (59) (59) (59) (59) (90) (62) (71) (65) (56) (56) (56) (56) (56) (58) (63) (74) (61))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8914) (8714) (8914) (8714) (8914) (8714) (8914) (8714) (8914) (8714) (3650) (5550) (7050) (6188) (1938) (2400) (8914) (8714) (8914) (8714) (8914) (8714) (8914) (8714) (8914) (8714) (11888) (10425) (7638) (11775) (3162) (4888) (10788) (0) (11762) (2300) (7475) (8212) (1650) (9500) (6800) (2175) (7862) (5188) (11112) (238) (7675) (6912) (5838) (7675) (5938) (11875) (1725) (10475) (9625) (5825) (5738) (7925) (10275) (6575) (2275) (8388) (6712))) :lonset (quote (4414 4488 4586 4755 4954 5162 5353 5476 5599 5722 5845 6081 6275 6491 6723 6906 8567 8762 8929 9095 9201 9317 9400 9483 9566 9649 9732 9996 10334 10564 11929 12146 12341 12523 12668 12905 13016 13130 13347 13530 13667 13800 13978 14156 14274 14478 14705 14855 14993 15270 15488 15709 15873 16076 16203 17262 17470 17724 17972 18157 18339 18553 18736 18919)) :ldur (quote ((74) (98) (169) (199) (208) (191) (123) (123) (123) (123) (236) (194) (216) (232) (183) (183) (195) (167) (166) (106) (116) (83) (83) (83) (83) (83) (264) (338) (230) (230) (217) (195) (182) (145) (237) (111) (114) (217) (183) (137) (133) (178) (178) (118) (204) (227) (150) (138) (277) (218) (221) (164) (203) (127) (127) (208) (254) (248) (185) (182) (214) (183) (183))) :lvel (quote ((62) (73) (73) (73) (69) (64) (62) (62) (62) (62) (62) (68) (71) (72) (69) (63) (58) (66) (74) (71) (61) (56) (56) (56) (56) (56) (55) (62) (72) (61) (55) (57) (59) (61) (64) (68) (70) (73) (75) (73) (65) (61) (58) (58) (70) (74) (74) (73) (72) (72) (71) (68) (66) (62) (58) (56) (59) (64) (69) (73) (72) (62) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (1062) (6912) (7588) (6250) (3388) (8914) (8864) (8914) (8864) (8914) (8864) (8914) (8864) (8914) (8864) (5225) (1512) (7612) (4138) (4900) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8889) (8914) (8764) (8914) (8764) (8914) (8764) (8914) (8764) (8914) (8764) (8914) (8764) (8914) (8764) (8914) (8764) (5150) (7775) (9938) (7812) (8914) (8939) (8914) (8939) (8914) (8939) (8914) (8939))) :lonset (quote (4822 5010 5172 5312 5437 5552 5663 5775 5893 6011 6129 6247 6365 6665 6870 7183 7432 9095 9274 9454 9562 9726 9911 10032 10153 10274 10395 10516 10692 10848 11091 11451 13066 13201 13300 13381 13517 13693 13838 13935 14046 14214 14364 14534 14701 14813 14925 15060 15195 15330 15465 15546 15639 15755 15887 16005 16088 16195 16319 16456 16656 16910 17186 17458 17730 18002 19181 19430 19685 19917 20149 20338 20509 20630 20735 20887 21039 21191 21343)) :ldur (quote ((188) (162) (140) (125) (115) (111) (112) (118) (118) (118) (118) (118) (300) (205) (313) (249) (249) (179) (180) (108) (164) (185) (121) (121) (121) (121) (121) (176) (156) (243) (360) (360) (135) (99) (81) (136) (176) (145) (97) (111) (168) (150) (170) (167) (112) (112) (135) (135) (135) (135) (81) (93) (116) (132) (118) (83) (107) (124) (137) (200) (254) (276) (272) (272) (272) (272) (249) (255) (232) (232) (189) (171) (121) (105) (152) (152) (152) (152))) :lvel (quote ((56) (61) (67) (71) (71) (68) (67) (63) (63) (63) (63) (63) (55) (72) (69) (64) (57) (55) (71) (71) (65) (62) (55) (55) (55) (55) (55) (56) (63) (65) (71) (65) (57) (58) (59) (60) (63) (65) (66) (66) (67) (71) (74) (74) (73) (71) (68) (68) (68) (68) (55) (58) (60) (65) (73) (75) (74) (71) (68) (65) (62) (61) (56) (56) (56) (56) (59) (67) (70) (61) (55) (58) (64) (72) (55) (55) (55) (55))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8696) (8696) (8646) (8696) (8646) (8696) (8646) (8696) (8646) (8696) (8646) (8696) (8696) (8446) (8696) (8446) (8696) (8446) (8696) (8446) (8696) (8646) (8696) (8646) (8696) (8646) (8696) (8946) (8696) (8946) (8696) (8946) (8696) (8946) (8696) (8696) (8696) (8696) (8746) (8696) (8746) (8696) (8746) (8696) (8746) (8696) (8746) (8696) (8746) (8696) (8746) (8696) (8746) (8696) (8746))) :lonset (quote (731 4834 4966 5107 5254 5401 5558 5731 5915 6099 6283 6467 8753 8875 8994 9149 9294 9429 9564 9699 9834 10128 10280 10508 10736 10964 11192 11401 11565 11711 11867 12023 12179 12335 13586 14885 16184 18339 18469 18606 18770 18936 19050 19141 19243 19390 19499 19591 19754 19888 19995 20139 20283 20427 20571 20715)) :ldur (quote ((2733) (132) (141) (147) (147) (157) (173) (184) (184) (184) (184) (1079) (122) (119) (155) (145) (135) (135) (135) (135) (294) (152) (228) (228) (228) (228) (209) (164) (146) (156) (156) (156) (156) (156) (1299) (1299) (1299) (130) (137) (164) (166) (114) (91) (102) (147) (109) (92) (163) (134) (107) (144) (144) (144) (144) (144))) :lvel (quote ((84) (58) (64) (68) (73) (67) (64) (57) (57) (57) (57) (45) (62) (74) (66) (64) (56) (56) (56) (56) (56) (68) (55) (55) (55) (55) (58) (66) (71) (69) (69) (69) (69) (69) (60) (57) (82) (55) (59) (62) (65) (69) (72) (69) (66) (66) (66) (65) (64) (63) (63) (63) (63) (63) (63))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8470) (7738) (4150) (1888) (200) (8470) (8695) (8470) (8695) (8470) (8695) (8470) (8695) (8470) (8695) (8025) (3738) (9038) (8725) (11488) (2650) (8470) (8470) (8470) (8520) (8470) (8520) (8470) (8520) (8470) (8520) (8788) (3788) (6875) (9112) (5525) (8088) (1062) (11338) (2012) (4162) (2788) (5938) (10850) (5488) (10875) (8738) (7900) (3625) (3325) (3188) (5500) (9075) (6250) (7388) (1262) (3600) (12000) (8470) (8670) (8470) (8670) (8470) (8670) (8470) (8470))) :lonset (quote (481 1406 1740 2010 2333 2656 2786 2964 3051 3142 3266 3438 3585 3732 3879 5668 5822 6049 6312 6510 6731 6952 9038 9727 9907 10128 10270 10417 10564 10711 10858 11005 11277 11492 11695 13028 13262 13457 13649 13829 14007 14186 14431 14676 14934 15139 15340 15576 15828 16078 16328 16582 16797 16994 17189 17357 17536 17731 18490 18682 18844 19018 19192 19366 19540 20066 20592)) :ldur (quote ((925) (334) (270) (323) (323) (130) (178) (87) (91) (124) (172) (147) (147) (147) (147) (154) (227) (263) (198) (221) (221) (1061) (689) (180) (221) (142) (147) (147) (147) (147) (147) (272) (215) (203) (203) (234) (195) (192) (180) (178) (179) (245) (245) (258) (205) (201) (236) (252) (250) (250) (254) (215) (197) (195) (168) (179) (195) (195) (192) (162) (174) (174) (174) (174) (526) (526))) :lvel (quote ((77) (59) (73) (62) (55) (57) (61) (62) (65) (69) (66) (61) (61) (61) (61) (57) (73) (73) (66) (56) (55) (45) (76) (55) (60) (74) (58) (58) (58) (58) (58) (55) (67) (72) (55) (55) (58) (64) (70) (70) (66) (63) (59) (55) (60) (66) (70) (71) (67) (57) (56) (69) (71) (68) (66) (65) (62) (55) (58) (63) (55) (55) (55) (55) (89) (88))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8468) (8468) (8218) (8468) (8218) (8468) (8218) (8468) (8218) (8468) (8218) (8468) (8468) (8468) (8468) (8468) (8468) (8468) (8468) (8468) (8468) (8468) (8468) (8468) (8218) (8468) (8218) (8468) (8218) (8468) (8218) (8468) (8468) (8493) (8468) (8493) (8468) (8493) (8468) (8493) (8468) (8493) (8468) (8493) (8468) (8493) (8468) (8468) (8268) (8468) (8268) (8468) (8268) (8468) (8268) (8468) (8268) (8468) (8268) (8468) (8268))) :lonset (quote (612 1930 2021 2150 2314 2509 2733 2982 3252 3522 3792 5326 6114 6262 6401 6558 6677 6811 6905 6999 7093 7187 7281 9241 9434 9616 9843 10070 10220 10370 10520 10670 12988 13137 13412 13610 13807 13911 14053 14332 14594 14717 14813 15006 15199 15392 15585 18420 18653 18867 19064 19243 19406 19554 19690 19813 19925 20025 20112 20199 20286 20373)) :ldur (quote ((1318) (91) (129) (164) (195) (224) (249) (270) (270) (270) (270) (788) (148) (139) (157) (119) (134) (94) (94) (94) (94) (94) (788) (193) (182) (227) (227) (150) (150) (150) (150) (977) (149) (275) (198) (197) (104) (142) (279) (262) (123) (96) (193) (193) (193) (193) (2011) (233) (214) (197) (179) (163) (148) (136) (123) (112) (100) (87) (87) (87) (87))) :lvel (quote ((51) (62) (67) (74) (71) (65) (59) (55) (55) (55) (55) (48) (64) (73) (74) (70) (68) (58) (58) (58) (58) (58) (62) (58) (66) (72) (65) (55) (55) (55) (55) (81) (55) (58) (58) (61) (63) (67) (70) (74) (71) (68) (62) (62) (62) (62) (45) (60) (61) (62) (63) (65) (66) (67) (68) (71) (72) (63) (63) (63) (63))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8288) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8513) (8288) (8513) (8288) (8513) (8288) (8513) (8288) (8513) (8288) (8288) (8288) (8288) (8238) (8288) (8238) (8288) (8238) (8288) (8238) (8288) (8238) (8288) (8238) (8288) (8238) (8288) (8238) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8063) (8288) (8488) (8288) (8488) (8288) (8488) (8288) (8488) (8288) (8288) (8138) (8288) (8138) (8288) (8138))) :lonset (quote (508 1776 1889 2001 2113 2226 2342 2462 2588 2714 2834 2946 3047 3148 3249 4838 5064 5201 5310 5479 5692 5881 6070 6259 6448 6637 9037 9832 11931 12069 12252 12398 12500 12578 12682 12826 12953 13127 13365 13587 13725 13857 13989 14121 14253 14301 14360 14432 14518 14621 14743 14881 15033 15193 15351 15495 15615 15716 15806 15892 15981 16078 16185 16292 16399 16506 17390 17592 17709 17819 17914 18009 18104 18199 18294 18816 19017 19158 19339 19520 19701 19882)) :ldur (quote ((1268) (113) (112) (112) (113) (116) (120) (126) (126) (120) (112) (101) (101) (101) (101) (226) (137) (109) (169) (213) (189) (189) (189) (189) (189) (1040) (795) (795) (138) (183) (146) (102) (78) (104) (144) (127) (174) (238) (222) (138) (132) (132) (132) (132) (48) (59) (72) (86) (103) (122) (138) (152) (160) (158) (144) (120) (101) (90) (86) (89) (97) (107) (107) (107) (107) (107) (202) (117) (110) (95) (95) (95) (95) (95) (522) (201) (141) (181) (181) (181) (181))) :lvel (quote ((55) (63) (67) (72) (74) (73) (70) (68) (67) (62) (59) (55) (55) (55) (55) (55) (59) (64) (71) (73) (58) (58) (58) (58) (58) (71) (80) (74) (55) (56) (57) (58) (58) (59) (62) (66) (69) (72) (68) (63) (60) (60) (60) (60) (55) (60) (63) (63) (65) (67) (68) (68) (68) (69) (73) (75) (73) (66) (64) (64) (61) (58) (58) (58) (58) (58) (57) (75) (68) (60) (60) (60) (60) (60) (68) (55) (72) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8286) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8286) (8286) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261) (8286) (8261))) :lonset (quote (979 4803 4898 5038 5149 5236 5378 5573 5781 5952 6090 6229 6403 6588 6744 6915 7086 7257 7428 9021 11971 13970 16966 17090 17204 17318 17450 17603 17769 17915 18021 18124 18262 18431 18600 18769 18938)) :ldur (quote ((2537) (95) (140) (111) (87) (142) (195) (208) (171) (138) (139) (174) (185) (156) (171) (171) (171) (171) (171) (1803) (1999) (1999) (124) (114) (114) (132) (153) (166) (146) (106) (103) (138) (169) (169) (169) (169))) :lvel (quote ((73) (57) (57) (57) (59) (62) (64) (65) (67) (71) (70) (64) (61) (60) (59) (58) (58) (58) (58) (73) (88) (66) (56) (58) (67) (72) (74) (66) (64) (63) (60) (59) (55) (55) (55) (55))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7794) (7569) (7794) (7569) (7794) (7569) (7794) (7569) (7794) (7569) (7794) (7569) (7794) (7569) (1900) (9162) (4225) (3450) (6562) (7112) (5912) (10975) (12000) (5862) (1388) (6475) (11088) (5075) (4862) (1462) (9825) (5262) (3938) (10512) (5888) (2362) (6250) (4350) (8950) (8850) (438) (7688) (7350) (2962) (3450) (8200) (10612) (388) (8162) (9088) (6038) (2862) (6375) (4738) (5288) (7925) (6688) (562) (8862) (7125) (7612) (9650) (8288) (3700) (10688) (6562) (2138) (7400) (6850) (1100) (9650) (7794) (8019) (7794) (8019) (7794) (8019) (5438) (4438) (7794) (7794) (7794) (7794) (7794) (7794))) :lonset (quote (518 668 833 1004 1168 1308 1426 1532 1639 1760 1904 2048 2192 2336 2480 2644 2782 3009 3165 3332 3574 3864 5626 5769 5947 6122 6263 6378 6562 6734 6887 7056 7208 7395 7562 7658 9019 9203 9396 9597 9758 9982 10148 10314 10524 10757 11001 11205 11442 13020 13199 13401 13539 13744 13969 14166 14381 14593 14800 14915 15065 15215 15387 15613 15879 16071 16285 16490 16798 16954 17259 18436 18724 18923 19122 19321 19520 19719 20719 21205 21404 21541 21692 21843 21994 22145)) :ldur (quote ((150) (165) (171) (164) (140) (118) (106) (107) (121) (144) (144) (144) (144) (144) (164) (138) (227) (156) (167) (242) (290) (290) (143) (178) (175) (141) (115) (184) (172) (153) (169) (152) (187) (167) (96) (96) (184) (193) (201) (161) (224) (166) (166) (210) (233) (244) (204) (237) (237) (179) (202) (138) (205) (225) (197) (215) (212) (207) (115) (150) (150) (172) (226) (266) (192) (214) (205) (308) (156) (305) (305) (288) (199) (199) (199) (199) (199) (486) (486) (199) (137) (151) (151) (151) (151))) :lvel (quote ((58) (63) (67) (70) (75) (67) (64) (56) (55) (55) (55) (55) (55) (55) (56) (61) (68) (68) (72) (69) (67) (55) (55) (55) (56) (58) (59) (63) (65) (66) (68) (71) (69) (66) (63) (58) (56) (62) (69) (74) (69) (63) (57) (56) (63) (68) (74) (68) (62) (62) (66) (71) (73) (70) (69) (68) (65) (63) (62) (60) (55) (55) (62) (69) (72) (73) (67) (62) (62) (59) (58) (62) (66) (66) (66) (66) (66) (59) (59) (55) (71) (58) (58) (58) (58))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6338) (6538) (9362) (4050) (4650) (10012) (3125) (10875) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (8012) (5250) (3225) (138) (6500) (538) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (6338) (6588) (6338) (6588) (6338) (6588) (6338) (6588) (6338) (6588) (6338) (6588) (6338) (6588) (6338) (6588) (3500) (5588) (6688) (4850) (8438) (4312) (3675) (3888) (11950) (5338) (6488) (11150) (6338) (6338))) :lonset (quote (594 2051 2332 2587 2778 3001 3236 3512 5192 5378 5544 5725 5899 6044 6204 6333 6462 6591 6720 6961 7174 7386 7615 7859 9016 9718 9840 9936 10081 10250 10421 10592 10763 10934 12786 12974 13167 13332 13435 13544 13727 13940 14128 14288 14427 14556 14686 14818 14950 15082 15214 15412 15642 15800 16061 16178 16379 16556 16645 16830 17066 17246 18333 19115 19897)) :ldur (quote ((1457) (281) (255) (191) (223) (235) (276) (276) (186) (166) (181) (174) (145) (160) (129) (129) (129) (129) (241) (213) (212) (229) (244) (244) (702) (122) (96) (145) (169) (171) (171) (171) (171) (702) (188) (193) (165) (103) (109) (183) (213) (188) (160) (139) (129) (130) (132) (132) (132) (132) (198) (230) (158) (261) (117) (201) (177) (89) (185) (236) (180) (180) (782) (782))) :lvel (quote ((78) (64) (75) (73) (67) (61) (59) (57) (61) (68) (72) (74) (67) (61) (55) (55) (55) (55) (61) (64) (68) (71) (74) (64) (46) (63) (73) (61) (56) (55) (55) (55) (55) (79) (57) (68) (74) (75) (74) (72) (69) (67) (65) (60) (57) (56) (55) (55) (55) (55) (55) (57) (59) (63) (67) (73) (75) (72) (69) (64) (60) (60) (48) (69))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6332) (6107) (6332) (6107) (6332) (6107) (6332) (6107) (6332) (6107) (6332) (6107) (5300) (7575) (8162) (2350) (8662) (6200) (9050) (6332) (6557) (6332) (6557) (6332) (6557) (6332) (6557) (3538) (5138) (8150) (200) (5188) (3462) (7450) (4000) (6332) (6482) (6332) (6482) (6332) (6482) (6332) (6482) (6332) (6482) (6332) (6482) (6332) (6482) (6332) (6482) (6332) (6582) (6332) (6582) (6332) (6582) (6332) (6582) (6332) (6582) (6332) (6582) (6332) (6582) (6332) (6582) (6332) (6582) (6332) (6582) (788) (11612) (4325) (5400) (3188) (3875) (2450) (5112) (4250) (6332) (6082) (6332) (6082) (6332) (6082) (6332) (6082) (6332) (6082) (2050) (5525) (3500) (1712))) :lonset (quote (451 573 717 863 1004 1106 1221 1478 1749 2020 2291 2562 2833 3081 3251 3480 3654 3938 4129 5823 5993 6164 6364 6501 6638 6775 6912 7049 7305 7519 7728 7937 8177 8408 8616 9937 10118 10241 10347 10492 10658 10813 10958 11100 11243 11390 11539 11683 11808 11933 12058 13266 13495 13723 13919 14059 14192 14340 14459 14550 14667 14808 14914 14989 15075 15171 15254 15329 15404 15479 15554 15629 15841 16114 16377 16612 16890 17149 17425 17685 18759 18939 19115 19274 19395 19484 19565 19670 19775 19880 19985 20273 20559 20894 21229)) :ldur (quote ((122) (144) (146) (141) (102) (115) (257) (271) (271) (271) (271) (271) (248) (170) (229) (174) (284) (191) (191) (170) (171) (200) (137) (137) (137) (137) (137) (256) (214) (209) (209) (240) (231) (208) (208) (181) (123) (106) (145) (166) (155) (145) (142) (143) (147) (149) (144) (125) (125) (125) (125) (229) (228) (196) (140) (133) (148) (119) (91) (117) (141) (106) (75) (86) (96) (83) (75) (75) (75) (75) (75) (212) (273) (263) (235) (278) (259) (276) (260) (260) (180) (176) (159) (121) (89) (81) (105) (105) (105) (105) (288) (286) (335) (335))) :lvel (quote ((58) (62) (64) (69) (74) (70) (66) (62) (62) (62) (62) (62) (57) (58) (68) (74) (69) (63) (59) (66) (65) (59) (57) (57) (57) (57) (57) (65) (71) (64) (55) (62) (65) (74) (60) (67) (68) (69) (71) (73) (74) (75) (75) (75) (75) (72) (67) (60) (60) (60) (60) (57) (59) (62) (65) (68) (70) (72) (72) (69) (63) (61) (60) (60) (59) (57) (57) (57) (57) (57) (57) (58) (63) (68) (69) (74) (69) (63) (60) (56) (56) (61) (64) (65) (73) (69) (57) (57) (57) (57) (56) (66) (73) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6332) (6282) (6332) (6282) (6332) (6282) (6332) (6282) (6332) (6282) (6332) (6282) (9788) (6112) (6300) (5550) (11075) (3538) (1825) (8088) (1712) (4200) (8288) (4762) (6175) (5538) (5512) (725) (9125) (5038) (4000) (4788) (7838) (5650) (6332) (6307) (6332) (6307) (6332) (6307) (6332) (6307) (3425) (9388) (8975) (4400) (8625) (6332) (6132) (6332) (6132) (6332) (6132) (6332) (6132) (6332) (6132) (6332) (6132) (7788) (4662) (3200) (11000) (3688) (8275) (2662) (6332) (6532) (6332) (6532) (6332) (6532) (6332) (6532) (6332) (6532) (6332) (6532) (6332) (6532) (6332) (6107) (6332) (6107) (6332) (6107) (6332) (6107) (6332) (6132) (6332) (6132) (6332) (6132) (6332) (6332) (6332) (6332) (6332) (6332))) :lonset (quote (660 822 1024 1243 1443 1588 1691 1772 1849 1931 2013 2095 2177 2393 2604 2869 3046 3226 3446 5188 5288 5425 5619 5743 5930 6069 6210 6340 6524 6682 6874 7052 7209 7352 8822 9006 9136 9286 9499 9674 9849 10024 10199 10417 10627 10829 11050 12360 12618 12802 12929 13029 13138 13261 13401 13567 13767 13967 14167 14367 14566 14755 14991 15241 15502 15774 16046 16152 16226 16323 16494 16736 16897 17033 17206 17308 17382 17455 17528 17601 18283 18395 18538 18696 18805 18914 19023 19132 19241 19417 19566 19762 19958 20154 20350 20613 20870 21127 21384 21641 21898)) :ldur (quote ((162) (202) (219) (200) (145) (103) (81) (77) (82) (82) (82) (82) (216) (211) (265) (177) (180) (220) (220) (100) (137) (194) (124) (187) (139) (141) (130) (184) (158) (192) (178) (157) (143) (143) (184) (130) (150) (213) (175) (175) (175) (175) (218) (210) (202) (221) (221) (258) (184) (127) (100) (109) (123) (140) (166) (200) (200) (200) (200) (199) (189) (236) (250) (261) (272) (272) (106) (74) (97) (171) (242) (161) (136) (173) (102) (74) (73) (73) (73) (73) (112) (143) (158) (109) (109) (109) (109) (109) (176) (149) (196) (196) (196) (196) (263) (257) (257) (257) (257) (257))) :lvel (quote ((55) (55) (58) (69) (72) (71) (67) (64) (62) (62) (62) (62) (56) (62) (69) (74) (69) (60) (55) (57) (64) (69) (73) (73) (70) (70) (68) (65) (63) (62) (62) (60) (58) (55) (61) (70) (66) (57) (55) (55) (55) (55) (56) (58) (72) (73) (68) (62) (67) (74) (73) (71) (68) (63) (60) (59) (59) (59) (59) (56) (63) (71) (73) (71) (63) (55) (55) (61) (66) (71) (73) (74) (71) (68) (66) (62) (58) (58) (58) (58) (62) (68) (71) (55) (55) (55) (55) (55) (55) (74) (55) (55) (55) (55) (56) (58) (58) (58) (58) (58))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6332) (6332) (6582) (6332) (6582) (6332) (6582) (6332) (6132) (6332) (6132) (6332) (6132) (6332) (6132) (6332) (6282) (6332) (6282) (6332) (6282) (6332) (6282) (6332) (6357) (6332) (6357) (6332) (6357) (6332) (6357) (6332) (6482) (6332) (6482) (6332) (6482) (6332) (6332) (6332) (6332) (6332) (6332) (6332) (6332) (6332) (6382) (6332) (6382) (6332) (6382) (6332) (6382) (6332) (6382) (6332) (6382) (6332) (6382) (6332) (6382) (6332) (6332))) :lonset (quote (736 4909 5119 5426 5555 5684 5813 5942 6097 6241 6392 6589 6786 6983 7180 7377 7587 7759 7873 8025 8177 8329 8481 10155 10313 10445 10557 10692 10827 10962 11097 11232 11452 11630 11768 11906 12044 12182 12320 12463 12597 12719 12841 12963 13085 14354 14450 14572 14708 14844 14958 15073 15234 15468 15728 15951 16113 16252 16392 16532 16672 16812 19694 21326)) :ldur (quote ((2610) (210) (307) (129) (129) (129) (129) (155) (144) (151) (197) (197) (197) (197) (197) (210) (172) (114) (152) (152) (152) (152) (152) (158) (132) (112) (135) (135) (135) (135) (135) (220) (178) (138) (138) (138) (138) (138) (143) (134) (122) (122) (122) (122) (122) (96) (122) (136) (136) (114) (115) (161) (234) (260) (223) (162) (139) (140) (140) (140) (140) (2032) (1632))) :lvel (quote ((81) (56) (72) (58) (58) (58) (58) (57) (68) (68) (56) (56) (56) (56) (56) (55) (75) (67) (55) (55) (55) (55) (55) (61) (75) (67) (58) (58) (58) (58) (58) (58) (72) (56) (56) (56) (56) (55) (66) (73) (64) (64) (64) (64) (64) (55) (63) (67) (71) (73) (66) (63) (62) (60) (59) (58) (57) (55) (55) (55) (55) (90) (53))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6326) (6326) (6276) (6326) (6276) (6326) (6276) (6326) (6276) (6326) (6276) (6326) (6326) (6326) (6326) (6526) (6326) (6526) (6326) (6526) (6326) (6526) (6326) (6526) (6326) (6526))) :lonset (quote (4904 8477 8557 8699 8840 9019 9194 9344 9488 9632 9776 9920 12007 13975 16739 16922 17173 17400 17540 17697 17876 18009 18198 18381 18564 18747 18930)) :ldur (quote ((2369) (80) (142) (141) (179) (175) (150) (144) (144) (144) (144) (1007) (1968) (1968) (183) (251) (227) (140) (157) (179) (133) (189) (183) (183) (183) (183))) :lvel (quote ((81) (62) (67) (72) (74) (65) (59) (56) (56) (56) (56) (56) (79) (70) (56) (60) (65) (71) (73) (65) (64) (61) (56) (56) (56) (56))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5818) (5818) (5568) (5818) (5568) (5818) (5568) (5818) (5568) (5818) (5568) (5818) (6018) (5818) (6018) (5818) (6018) (5818) (6018) (5818) (6018) (5818) (5818) (5818) (5818) (5818) (5818) (6018) (5818) (6018) (5818) (6018) (5818) (6018) (5818) (6018) (5818) (6018))) :lonset (quote (451 1379 1476 1576 1670 1808 1911 2094 2310 2526 2742 2958 3154 3315 3479 3643 3777 3888 3999 4110 4221 5488 8987 10028 12337 14304 17120 17272 17457 17547 17700 17851 18027 18214 18385 18580 18775 18970 19165)) :ldur (quote ((928) (97) (100) (94) (138) (103) (183) (216) (216) (216) (216) (196) (161) (164) (164) (134) (111) (111) (111) (111) (111) (2189) (1041) (1041) (1967) (1967) (152) (185) (90) (153) (151) (176) (187) (171) (195) (195) (195) (195))) :lvel (quote ((88) (55) (58) (64) (68) (69) (66) (57) (57) (57) (57) (55) (73) (71) (69) (67) (60) (60) (60) (60) (60) (46) (47) (79) (69) (60) (65) (69) (71) (73) (74) (74) (69) (63) (59) (59) (59) (59))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5816) (8838) (3338) (9025) (6388) (225) (3000) (9162) (5816) (5866) (5816) (5866) (5816) (5866) (5816) (5866) (5816) (5866) (0) (2375) (5025) (5500) (4625) (4762) (812) (10775) (7238) (2650) (8462) (4800) (5638) (8338) (8962) (0) (5625) (7525) (400) (7262) (10750) (10512) (4612) (7150) (5816) (5566) (5816) (5566) (5816) (5566) (5816) (5566) (5816) (5566) (5816) (5566) (5816) (5566) (5816) (5816) (5666) (5816) (5666) (5816) (5666) (8325) (4712) (5816))) :lonset (quote (777 1994 2226 2375 2563 2780 3006 3214 4919 5057 5232 5351 5533 5682 5877 6043 6209 6375 6541 6922 7109 7387 7662 9004 9350 9552 9637 9783 10056 10260 10504 10636 10700 10904 11134 12869 13083 13263 13445 13665 13924 14144 14364 14525 14676 14825 14976 15122 15239 15330 15407 15479 15558 15643 15728 15813 15898 18118 18299 18489 18643 18797 18951 19105 20105 20629 21153)) :ldur (quote ((1217) (232) (149) (188) (217) (226) (208) (208) (138) (175) (119) (182) (149) (195) (166) (166) (166) (166) (381) (187) (278) (275) (275) (346) (202) (85) (146) (273) (204) (244) (132) (64) (204) (230) (230) (214) (180) (182) (220) (259) (220) (220) (161) (151) (149) (151) (146) (117) (91) (77) (72) (79) (85) (85) (85) (85) (1273) (181) (190) (154) (154) (154) (154) (524) (524) (524))) :lvel (quote ((61) (57) (62) (68) (68) (66) (61) (56) (56) (59) (62) (68) (70) (73) (62) (62) (62) (62) (56) (61) (71) (68) (61) (56) (61) (66) (72) (73) (67) (66) (66) (65) (63) (61) (59) (57) (58) (64) (65) (74) (72) (68) (62) (63) (66) (71) (74) (74) (72) (69) (67) (63) (60) (60) (60) (60) (59) (60) (74) (58) (58) (58) (58) (57) (57) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5816) (5816) (5841) (5816) (5841) (5816) (5841) (5816) (5841) (5816) (5816) (5566) (5816) (5566) (5816) (5566) (5816) (5816) (5816) (6016) (5816) (6016) (5816) (6016) (5816) (6016) (5816) (6016) (5816) (6016) (5816) (6016) (5816) (6016) (5816) (6016) (5816) (5816) (5566) (5816) (5566) (5816) (5566) (5816) (5841) (5816) (5841) (5816) (5841) (5816) (5841) (5816))) :lonset (quote (645 4500 4711 4874 5049 5236 5423 5610 5797 5984 6719 6930 7185 7455 7725 7995 9300 10296 12624 12711 12832 12956 13070 13224 13420 13614 13772 13878 13956 14040 14164 14322 14472 14634 14796 14958 15120 17854 17990 18179 18393 18607 18821 19035 19158 19291 19427 19575 19723 19871 20019 20167 20704)) :ldur (quote ((2500) (211) (163) (175) (187) (187) (187) (187) (187) (735) (211) (255) (270) (270) (270) (270) (996) (996) (87) (121) (124) (114) (154) (196) (194) (158) (106) (78) (84) (124) (158) (150) (162) (162) (162) (162) (2004) (136) (189) (214) (214) (214) (214) (123) (133) (136) (148) (148) (148) (148) (148) (537))) :lvel (quote ((53) (58) (72) (69) (62) (62) (62) (62) (62) (88) (56) (66) (56) (56) (56) (56) (46) (78) (55) (56) (56) (58) (64) (67) (70) (72) (72) (73) (74) (73) (67) (62) (58) (58) (58) (58) (86) (55) (74) (59) (59) (59) (59) (55) (62) (73) (55) (55) (55) (55) (55) (48))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 849 692) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 705 173) (om-make-point 213 109) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (552.80616 541.6372 530.5013 519.46344 508.58798 497.9383 487.57614 477.5614 467.9519 458.80286 450.16678 442.09274 434.62662 427.81033 421.68204 416.2755 411.62006 407.7405 404.65674 402.38385 400.9319 400.30557 400.5049 401.52435 403.35342 405.97647 409.37274 413.5167 418.3779 423.9214 430.10776 436.89316 444.23007 452.06702 460.3494 469.01944 478.01627 487.27698 496.7365 506.32816 515.98377 525.63477 535.21155 544.6451 553.86634 562.8071 571.40046 579.5812 587.28595 594.4541 601.02747 606.95136 612.1742 616.6488 620.33185 623.1844 625.17237 626.2666 626.4428 625.68256 623.9724 621.3048 617.67756 613.0946 607.5651 601.1042 593.73255 585.47644 576.3678 566.44336 555.7452 544.32026 532.2201 519.5003 506.22092 492.44537 478.24063 463.6758 448.82172 433.75235 418.5531 403.3112 388.11435 373.0508 358.20874 343.67557 329.53726 315.87875 302.78223 290.32788 278.5919 267.6474 257.56332 248.40425 240.22978 233.09426 227.04657 222.12917 218.37894 215.82585 214.4932 214.39731 215.5477 217.94641 221.58818 226.46077 232.54433 239.81172 248.22896 257.75446 268.34024 279.93155 292.46692 305.87878 320.09418 335.03406 350.6146 366.74777 383.34082 400.2979 417.5183 434.90054 452.34076 469.73294 486.97134 503.9493 520.5606 536.7004 552.26526 567.1547 581.27094 594.51996 606.8123 618.06354 628.1948 637.1336 644.814 651.178 656.175 659.763 661.90876 662.58844 661.78754 659.50147 655.73597 650.5066 643.8398 635.7722 626.35065 615.6324 603.685 590.5857 576.4215 561.29194 545.3286 528.7258 511.69223 494.3628 476.8696 459.33987 441.89688 424.65744 407.73254 391.22586 375.23416 359.8466 345.1443 331.20065 318.08096 305.8422 294.53308 284.19476 274.86047 266.55524 259.29736 253.09783 247.96065 243.88388 240.85916 238.8727 237.90557 237.93378 238.92913 240.85959 243.68964 247.38047 251.89098 257.17746 263.19458 269.89563 277.23257 285.15677 293.6191 302.57034 311.96173 321.74445 331.8707 342.29364 352.96707 363.8465 374.88904 386.05325 397.29913 408.58865 419.88568 431.15634 442.36853 453.49167 464.49826 475.36224 486.05963 496.56906 506.87042 516.9457 526.77936 536.358 545.6687 554.70124 563.4475 571.90027 580.0541 587.9051 595.45075 602.69 609.62287 616.2501 622.5745 628.5993 634.32856 639.76807 644.9274 649.829 654.50025 658.9468 663.1555 667.11237 670.80414 674.2178 677.3403 680.1589 682.6609 684.83436 686.66736 688.149 689.2687 690.0159 690.38166 690.3572 689.93476 689.10755 687.8705 686.21985 684.15284 681.6669 678.7608 675.4347 671.68976 667.5288 662.95655 657.97895 652.60346 646.8396 640.6985 634.193 627.33765 620.1491 612.6458 604.84784 596.77717 588.4572 579.91376 571.17426 562.2672 553.2233 544.0741 534.85285 525.5942 516.3338 507.10803 497.9537 488.90887 480.0115 471.29977 462.81207 454.58585 446.65814 439.06528 431.84213 425.02216 418.63696 412.7161 407.28668 402.37308 397.99673 394.1756 390.92374 388.2521 386.16715 384.67075 383.75998 383.4278 383.6621 384.44525 385.75476 387.56317 389.83786 392.5381 395.59885 398.91525 402.37552 405.90826 409.46426 412.9955 416.45615 419.8025 422.99362 425.99176 428.7619 431.27313 433.49808 435.4131 436.99924 438.2416 439.1294 439.65646 439.82123 439.6261 439.07816 438.1883 436.9717 435.44736 433.63785 431.56915 429.27042 426.77353 424.11285 421.32498 418.44827 415.52237 412.58804 409.6865 406.85928 404.14777 401.5923 399.23245 397.10654 395.25067 393.69867 392.48193 391.62903 391.16522 391.11206 391.48712 392.30426 393.57297 395.29825 397.4806 400.11548 403.19406 406.703 410.62372 414.93323 419.60403 424.6047 429.8992 435.44785 441.2074 447.1314 453.1706 459.27335 465.386 471.45325 477.419 483.2268 488.82034 494.1436 499.1421 503.7632 507.9568 511.67578 514.87635 517.5192 519.5696 521.0011 521.80927 522.0212 521.6776 520.8153 519.47034 517.68067 515.4857 512.92597 510.04236 506.87604 503.4676 499.85703 496.08313 492.18347 488.19345 484.1465 480.0739 476.00443 471.9644 467.97684 464.06213 460.23816 456.51975 452.91852 449.4437 446.1017 442.89618 439.82846 436.8977 434.10114 431.43375 428.88925 426.4601 424.13748 421.9117 419.7726 417.7099 415.7131 413.77197 411.87692 410.01926 408.1909 406.38516 404.5969 402.82214 401.0591 399.30774 397.5697 395.84888 394.15137 392.48535 390.86057 389.28934 387.78564 386.3658 385.04724 383.84897 382.79208 381.8987 381.19153 380.69415 380.43045 380.42477 380.7013 381.2836 382.1948 383.45657 385.08926 387.11163 389.5405 392.39017 395.67246 399.3963 403.56735 408.18802 413.2572 418.7712 424.7242 431.10355 437.88443 445.03412 452.51566 460.2887 468.30966 476.5315 484.90454 493.37698 501.895 510.40256 518.84296 527.1586 535.29157 543.1831 550.77564 558.01294 564.83967 571.20215 577.049 582.33167 587.0043 591.0247 594.3543 596.9586 598.8077 599.87574 600.1422 599.5917 598.2141 596.005 592.96515 589.10096 584.4246 578.9538 572.71125 565.7262 558.0322 549.66816 540.678 531.11084 521.0211 510.46713 499.5109 488.218 476.6567 464.89816 453.01596 441.08517 429.18155 417.38217 405.76468 394.40543 383.3803 372.76453 362.63126 353.0511 344.0918 335.818 328.2911 321.56836 315.70184 310.739 306.7227 303.68982 301.6713 300.69214 300.77136 301.92145 304.14853 307.45206 311.8247 317.2527 323.71542 331.18622 339.63208 349.0132 359.28366 370.39246 382.28345 394.8954 408.16196 422.01297 436.37482 451.16965 466.31702 481.73444 497.33707 513.03937 528.7542 544.39405 559.87214 575.10175 589.998 604.4784 618.46186 631.8701 644.62836 656.6657 667.91547 678.31507 687.80707 696.3393 703.86567 710.3458 715.74494 720.0345 723.1932 725.20545 726.0625 725.7627 724.3104 721.7166 717.9992 713.18177 707.2942 700.3722 692.4575 683.5972 673.84284 663.2505 651.881 639.7988 627.072 613.7713 599.9698 585.7431 571.1684 556.3233 541.28614 526.13477 510.94717 495.80072 480.77048 465.93002 451.35025 437.09958 423.24326 409.84253 396.9552 384.63458 372.92902 361.88303 351.53574 341.9206 333.0662 324.99533 317.7257 311.26965 305.63333 300.81766 296.81384 293.5901 291.10065 289.31046 288.19672 287.73645 287.90356 288.6698 290.00415 291.87378 294.24362 297.07718 300.33618 303.98236 307.97696 312.28082 316.85495 321.66122 326.66153 331.81946 337.09995 342.4695 347.89664 353.3519 358.80795 364.24017 369.62628 374.94672 380.1847 385.32632 390.36044 395.27838 400.0745 404.7458 409.29132 413.71252 418.01395 422.20114 426.2818 430.26508 434.16135 437.98212 441.7393 445.44605 449.11517 452.75913 456.3904 460.02042 463.65997 467.31918 471.00635 474.72812 478.48886 482.29132 486.13718 490.0244 493.94962 497.90704 501.88886 505.88455 509.88202 513.86695 517.823 521.732 525.57496 529.3314 532.9798 536.49817 539.8642 543.0555 546.0501 548.82685 551.3653 553.647 555.65516 557.3745 558.7933 559.9053 560.7175 561.2473 561.5125 561.5302 561.3173 560.8913 560.26954 559.4684 558.5055 557.39795 556.16156 554.8116 553.36347 551.83045 550.22614 548.56305 546.8524 545.105 543.32966 541.5353 539.73 537.92066 536.1129 534.3125 532.52405 530.7511 528.99677 527.2638 525.5542 523.86957 522.21094 520.57905 518.9743 517.39667 515.846 514.3221 512.82477 511.35297 509.90662 508.4847 507.08615 505.7099 504.3563 503.02435 501.71362 500.42303 499.15283 497.90262 496.6716 495.46017 494.26752 493.09412 491.93994 490.8053 489.69028 488.5952 487.52087 486.4667 485.43164 484.41605 483.4203 482.44443 481.48874 480.5541 479.6404 478.7488 477.87918 477.03192 476.2078 475.40686 474.62906 473.87518 473.14496 472.4386 471.7563 471.09842 470.46466 469.85693 469.27744 468.72815 468.21072 467.72696 467.27756 466.86374 466.486 466.1441 465.83823 465.56747 465.33035 465.12555 464.95044 464.80243 464.67786 464.57248 464.4821 464.40115 464.32388 464.24365 464.1529 464.0439 463.90906 463.73773 463.52023 463.2471 462.90704 462.48843 461.9799 461.36835 460.64236 459.78873 458.7938 457.64465 456.32785 454.83075 453.1398 451.2424 449.126 446.77957 444.1908 441.3492 438.24573 434.8711 431.21906 427.2822 423.05624 418.53803 413.72687 408.62317 403.2285 397.54837 391.5891 385.35956 378.87238 372.14102 365.18283 358.01654 350.665 343.15323 335.5084 327.762 319.94672 312.09872 304.25674 296.4621 288.7587 281.19168 273.8093 266.66193 259.80026 253.27797 247.14846 241.46726 236.28995 231.69268 227.74347 224.48578 221.95305 220.17299 219.16985 218.96228 219.56594 220.99196 223.24692 226.33408 230.25104 234.99288 240.55002 246.90947 254.05426 261.96387 270.61478 279.9803 290.03064 300.7334 312.05423 323.95615 336.39948 349.34473 362.74878 376.56967 390.7616 405.28027 420.08038 435.1155 450.3385 465.70557 481.16968 496.68707 512.2132 527.7033 543.1167 558.4083 573.544 588.4817 603.1858 617.6177 631.7485 645.54474 658.97687 672.0137 684.6349 696.81324 708.5278 719.75574 730.48395 740.6942 750.3731 759.50684 768.08857 776.10877 783.56196 790.4424 796.749 802.48066 807.63794 812.2222 816.23816 819.6911 822.5872 824.934 826.74085 828.0174 828.77497 829.02527 828.78095 828.0562 826.8646 825.2214 823.142 820.64155 817.7051 814.3195 810.4824 806.1935 801.45356 796.2626 790.6242 784.54206 778.0217 771.0674 763.6877 755.89075 747.68714 739.085 730.10016 720.7459 711.0366 700.9879 690.6208 679.9516 669.0039 657.7964 646.35395 634.7014 622.86536 610.87134 598.7501 586.52717 574.23536 561.9063 549.5712 537.26465 525.0164 512.86426 500.84116 488.98254 477.32065 465.89044 454.72852 443.86908 433.34256 423.18317 413.42435 404.09668 395.2274 386.84637 378.97845 371.65103 364.8833 358.69678 353.1099 348.1381 343.7923 340.0836 337.01807 334.60068 332.8289 331.70197 331.212 331.34943 332.09982 333.44733 335.3701 337.8432 340.84058 344.32944 348.27524 352.6428 357.38748 362.46906 367.84006 373.45267 379.25717 385.20108 391.2292 397.29092 403.3536)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (389.15637 380.4959 371.99927 363.6801 355.55173 347.62714 339.91852 332.43777 325.1963 318.2046 311.47263 305.01013 298.8255 292.92697 287.3216 282.01617 277.01624 272.32697 267.95258 263.89645 260.16107 256.7483 253.65895 250.8931 248.45023 246.32862 244.52562 243.0381 241.86212 240.99257 240.42369 240.14928 240.16179 240.4534 241.01509 241.83769 242.91104 244.22423 245.7658 247.52399 249.48607 251.63913 253.96945 256.46344 259.10648 261.88388 264.78082 267.7819 270.87173 274.03488 277.25543 280.51767 283.80615 287.1049 290.39847 293.67148 296.9088 300.0955 303.2169 306.25903 309.20822 312.0511 314.77487 317.3678 319.81815 322.11542 324.24942 326.21118 327.99225 329.58508 330.9833 332.18115 333.1741 333.95853 334.5318 334.89273 335.0407 334.97894 334.72385 334.31665 333.77206 333.10596 332.33472 331.47598 330.5473 329.56665 328.5532 327.52557 326.503 325.5047 324.5497 323.65704 322.84525 322.13287 321.5375 321.07608 320.76523 320.61996 320.65503 320.88312 321.31653 321.9658 322.8395 323.9456 325.2898 326.8758 328.70615 330.78095 333.09876 335.65598 338.44714 341.4644 344.6985 348.13785 351.76935 355.57755 359.54565 363.6555 367.88678 372.21826 376.6273 381.0903 385.5829 390.08032 394.55753 398.98886 403.3493 407.6144 411.76004 415.76352 419.60355 423.26035 426.71622 429.9557 432.9661 435.73755 438.2637 440.54086 442.56973 444.35516 445.9049 447.23218 448.3541 449.29218 450.0723 450.72488 451.2848 451.79086 452.2859 452.8168 453.43362 454.1897 455.1408 456.3482 457.89475 459.90433 462.48526 465.6615 469.44998 473.85953 478.8919 484.54132 490.79553 497.63535 505.03577 512.96607 521.39 530.26697 539.5523 549.19776 559.1523 569.3623 579.77247 590.32636 600.9669 611.6369 622.2796 632.8396 643.2624 653.4956 663.48945 673.1964 682.57227 691.5762 700.17096 708.32325 716.00385 723.1872 729.8526 735.9838 741.56855 746.59906 751.0721 754.9884 758.3533 761.17536 763.46747 765.2463 766.53156 767.3466 767.7176 767.6751 767.2508 766.4755 765.381 764.00074 762.3685 760.51874 758.4864 756.3062 754.01264 751.63935 749.2191 746.78357 744.3632 741.9866 739.68036 737.4692 735.37555 733.4195 731.61847 729.98755 728.5383 727.2798 726.2185 725.3576 724.6971 724.23414 723.9631 723.87476 723.95105 724.1496 724.40064 724.6421 724.8325 724.9288 724.8871 724.66297 724.21094 723.485 722.4405 721.03217 719.2156 716.94776 714.18665 710.8921 707.02625 702.5528 697.43854 691.6534 685.1687 677.9578 670.0004 661.2823 651.79346 641.52906 630.4887 618.677 606.10346 592.7827 578.73517 563.98584 548.5651 532.5091 515.8588 498.66034 480.96494 462.8285 444.3117 425.47946 406.40088 387.14896 367.79993 348.43265 329.12936 309.9742 291.05264 272.45157 254.25818 236.56035 219.44454 202.99614 187.2992 172.43521 158.48177 145.51398 133.60149 122.80949 113.19743 104.81825 97.71852 91.93711 87.50542 84.446045 82.77309 82.49162 83.597206 86.07569 89.90341 95.04634 101.46139 109.095665 117.88629 127.76098 138.63805 150.42725 163.02767 176.31534 190.1318 204.31595 218.74527 233.31665 247.92827 262.48096 276.87845 291.02747 304.8389 318.22766 331.11365 343.42148 355.08145 366.02957 376.20798 385.56488 394.05457 401.63864 408.2853 413.96893 418.67102 422.37976 425.09006 426.80374 427.52927 427.2814 426.08105 423.95535 420.93753 417.06653 412.3863 406.9463 400.80038 394.00726 386.62976 378.7344 370.3911 361.6729 352.65567 343.41708 334.0369 324.59653 315.1778 305.86334 296.73624 287.87894 279.37317 271.29974 263.73737 256.76297 250.45149 244.87453 240.10089 236.19553 233.21903 231.22852 230.27626 230.40903 231.66843 234.09082 237.70684 242.54085 248.61139 255.92996 264.5016 274.32504 285.392 297.6875 311.18942 325.86902 341.6907 358.61227 376.58447 395.55173 415.4522 436.2194 457.78793 480.09393 503.06418 526.6124 550.64466 575.06104 599.7571 624.62354 649.5475 674.4123 699.0986 723.4853 747.44996 770.86896 793.61866 815.5736 836.60627 856.59205 875.414 892.96216 909.1327 923.82764 936.9564 948.4357 958.1913 966.1567 972.27564 976.50184 978.7985 979.14 977.5115 973.909 968.3395 960.8214 951.38465 940.07007 926.9296 912.0257 895.43146 877.23017 857.51496 836.3878 813.9597 790.3496 765.68366 740.09485 713.7218 686.7085 659.203 631.35675 603.3234 575.2578 547.3153 519.6512 492.4191 465.7698 439.8503 414.8047 390.76993 367.87698 346.25024 326.00522 307.24893 290.0783 274.58057 260.83118 248.8942 238.82123 230.65207 224.41349 220.11878 217.76749 217.34642 218.82875 222.17404 227.32892 234.22289 242.7612 252.83225 264.32227 277.1154 291.08786 306.1085 322.03976 338.73798 356.05524 373.84042 391.94 410.19846 428.46048 446.57184 464.38028 481.7348 498.49088 514.50824 529.6523 543.7959 556.81995 568.61414 579.0767 588.11695 595.6556 601.62366 605.96405 608.6329 609.59827 608.8408 606.35474 602.1464 596.23536 588.65394 579.44696 568.6717 556.39637 542.7017 527.68494 511.4573 494.13608 475.8417 456.69977 436.84164 416.4031 395.52298 374.3431 353.00745 331.6594 310.4413 289.49432 268.9571 248.96526 229.64839 211.13127 193.53206 176.96176 161.52332 147.31111 134.41034 122.89613 112.833596 104.27701 97.26966 91.84402 88.02084 85.80949 85.208306 86.203995 88.77201 92.87747 98.4752 105.509545 113.91549 123.61896 134.53699 146.57973 159.6496 173.6428 188.45128 203.96144 220.05638 236.61647 253.51984 270.64395 287.86584 305.06357 322.1176 338.91058 355.3286 371.2623 386.60718 401.2648 415.14304 428.15695 440.2297 451.29312 461.28714 470.16107 477.87384 484.3942 489.70084 493.78262 496.63873 498.27786 498.71915 497.9916 496.13364 493.19263 489.22525 484.29657 478.47943 471.8539 464.50684 456.53137 448.02612 439.09338 429.83936 420.3743 410.81076 401.2616 391.84018 382.66025 373.83423 365.47247 357.6826 350.56824 344.22873 338.75873 334.247 330.77524 328.4184 327.24402 327.31097 328.66995 331.36267 335.42096 340.86975 347.72833 356.00583 365.6978 376.78793 389.24918 403.04428 418.1273 434.44196 451.9231 470.49777 490.08435 510.59323 531.9287 553.98865 576.6655 599.8475 623.4193 647.2614 671.2495 695.2565 719.15436 742.8148 766.10987 788.91254 811.09797 832.544 853.1323 872.74897 891.2853 908.63874 924.7131 939.41974 952.678 964.415 974.56696 983.07996 989.9093 995.0204 998.38874 1000.0 999.8509 997.948 994.3087 988.96045 981.9411 973.29767 963.08716 951.37555 938.2373 923.7555 908.02 891.1275 873.1816 854.29084 834.5688 814.1324 793.10206 771.60077 749.75257 727.6825 705.51435 683.37085 661.3737 639.6414 618.2885 597.42487 577.1555 557.57984 538.7906 520.8725 503.90317 487.95255 473.08105 459.34042 446.77255 435.41003 425.2763 416.3848 408.73825 402.32993 397.14423 393.1557 390.32895 388.62036 387.97812 388.34256 389.6465 391.81583 394.77048 398.42413 402.68634 407.45166 412.58524 417.95447 423.45056 428.97943 434.45383 439.7911 444.91327 449.7488 454.23254 458.3061 461.91776 465.02222 467.58148 469.56375 470.94394 471.70465 471.83392 471.32578 470.18042 468.404 466.00714 463.00592 459.42105 455.27713 450.60236 445.42847 439.79038 433.72452 427.27045 420.4696 413.36362 405.99567 398.40973 390.6494 382.75836 374.78046 366.7583 358.73334 350.74634 342.83618 335.04016 327.39395 319.93146 312.68445 305.6824 298.95236 292.51913 286.4058 280.63293 275.21793 270.17627 265.52136 261.26453 257.41473 253.97858 250.96051 248.36315 246.1884 244.4368 243.10535 242.18868 241.6804 241.57236 241.85558 242.51959 243.55327 244.94489 246.68199 248.75217 251.14208 253.83797 256.8264 260.09326 263.62497 267.4085 271.4305 275.69302 280.21652 285.01782 290.10565 295.4864 301.1637 307.13965 313.41666 319.9954 326.87488 334.05365 341.52902 349.29532 357.34674 365.6767 374.27417 383.12888 392.2283 401.55896 411.10483 420.8473 430.7679 440.84573 451.05817 461.3822 471.7904 482.2565 492.75317 503.2503 513.7167 524.1213 534.4337 544.6227 554.6535 564.4899 574.0966 583.4374 592.47675 601.1791 609.5102 617.436 624.9241 631.9431 638.4637 644.4587 649.9021 654.771 659.045 662.70624 665.74 668.13526 669.88306 670.9797 671.42426 671.22 670.3736 668.8957 666.8021 664.1123 660.8488 657.04 652.717 647.9159 642.6762 637.03974 631.05335 624.76777 618.2357 611.5126 604.65497 597.7239 590.78 583.8872 577.10834 570.50605 564.1444 558.086 552.4253 547.2405 542.57666 538.45936 534.9078 531.93647 529.5512 527.7544 526.5444 525.91114 525.8425 526.32087 527.3252 528.8286 530.8035 533.2162 536.0315 539.2126 542.7199 546.5095 550.54114 554.7684 559.1486 563.63514 568.1835 572.7486 577.28656 581.7537 586.108 590.309 594.3168 598.09467 601.60706 604.8211 607.7064 610.2337 612.378 614.1169 615.4292 616.29706 616.7066 616.6456 616.10517 615.07935 613.5635 611.5571 609.06214 606.08167 602.6242 598.6974 594.3119 589.4821 584.2227 578.54944 572.4828 566.03815 559.23835 552.10694 544.6692 536.94764 528.9692 520.7603 512.34894 503.761 495.02414 486.1652 477.2141 468.1953 459.13702 450.06577 441.0071 431.98685 423.03018 414.16037 405.39893 396.76834 388.29095 379.9124 371.60846 363.38132 355.24027 347.1933 339.24725 331.41064 323.69464 316.10944 308.66464 301.3716 294.24133 287.29004 280.52716 273.96878 267.62857 261.52393 255.66873 250.08155 244.7761 239.77379 235.09122 230.74532 226.75873 223.14769 219.93425 217.13414 214.76799 212.85585 211.4158 210.46492 210.02332 210.10604 210.73075 211.91117 213.66053 215.9932 218.91849 222.44638 226.58238 231.33353 236.70027 242.6857 249.28455 256.49387 264.3045 272.7072 281.68393 291.22238 301.299 311.89124 322.9675 334.50198 346.4579 358.7969 371.47705 384.4571 397.68475 411.11325 424.68298 438.34378 452.0332 465.69125 479.2522 492.65378 505.8314 518.716 531.241 543.3366 554.94025 565.9827 576.4023 586.1355 595.12446 603.3112 610.6423 617.9683)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (565.2911 565.7721 566.0433 566.1097 565.9776 565.6536 565.145 564.45997 563.6073 562.59626 561.43696 560.14014 558.71705 557.17957 555.5401 553.8117 552.0076 550.1419 548.2288 546.2829 544.3194 542.35334 540.4005 538.4766 536.5975 534.77894 533.0373 531.38825 529.8479 528.4319 527.1558 526.0349 525.0841 524.3182 523.7509 523.39594 523.26655 523.3745 523.7317 524.34894 525.2362 526.40235 527.8555 529.6026 531.6495 534.00104 536.66047 539.6303 542.91126 546.5029 550.4035 554.60956 559.1164 563.91767 569.0054 574.37037 580.0014 585.88617 592.01026 598.35804 604.91254 611.6541 618.56287 625.61664 632.79206 640.06434 647.4072 654.79285 662.19257 669.57624 676.9127 684.16987 691.3142 698.31226 705.1289 711.7288 718.0763 724.1327 729.8486 735.1565 740.0204 744.40467 748.27436 751.596 754.3367 756.4652 757.95136 758.7672 758.8861 758.2835 756.9374 754.8277 751.9371 748.25055 743.7562 738.44495 732.3107 725.35065 717.5653 708.9584 699.53846 689.3226 678.3394 666.60834 654.152 640.9958 627.1695 612.7055 597.63947 582.0106 565.86066 549.23475 532.1809 514.7494 496.9932 478.96796 460.73093 442.34094 423.8592 405.3475 386.87073 368.49234 350.27716 332.29053 314.59668 297.26086 280.34686 263.9174 248.03394 232.75627 218.14197 204.24692 191.12345 178.82163 167.38797 156.8656 147.2937 138.708 131.13924 124.61461 119.156 114.78126 111.50296 109.32941 108.2634 108.30307 109.44194 111.668495 114.966606 119.31547 124.69 131.06092 138.39482 146.65448 155.79965 165.79088 176.59609 188.1863 200.52944 213.59033 227.33017 241.70679 256.67465 272.1841 288.18298 304.6148 321.4202 338.5365 355.89853 373.438 391.08444 408.76486 426.40503 443.92896 461.25983 478.32047 495.03357 511.32245 527.1113 542.32575 556.8934 570.74476 583.81324 596.0355 607.35285 617.71125 627.06134 635.35944 642.56806 648.6559 653.59815 657.37745 659.98304 661.4122 661.6694 660.7668 658.72455 655.5704 651.33924 646.0761 639.8441 632.73774 624.86304 616.2989 607.12555 597.424 587.27576 576.7622 565.9637 554.9592 543.8266 532.6406 521.4736 510.39532 499.47168 488.76514 478.33398 468.23254 458.5114 449.2162 440.38834 432.0648 424.2775 417.05454 410.41928 404.39075 398.98386 394.20923 390.07352 386.5802 383.73438 381.5562 380.07852 379.31357 379.2468 379.86105 381.13586 383.04797 385.5723 388.68018 392.3424 396.52734 401.20172 406.33197 411.8818 417.81516 424.0953 430.6852 437.5469 444.64282 451.93543 459.388 466.96417 474.62738 482.34128 490.07065 497.78046 505.4373 513.0083 520.4616 527.7668 534.8947 541.8173 548.5079 554.9409 561.09284 566.94165 572.4664 577.6481 582.46936 586.9144 590.9696 594.62256 597.8629 600.6823 603.07416 605.03376 606.55854 607.6475 608.30207 608.5254 608.3226 607.7012 606.67005 605.24036 603.42566 601.24054 598.702 595.82886 592.64167 589.1625 585.4146 581.42365 577.2158 572.81855 568.2607 563.5716 558.7814 553.91944 549.01087 544.0653 539.0826 534.0796 529.09314 524.1599 519.31635 514.59766 510.03726 505.66376 501.4971 497.54993 493.83127 490.34747 487.10208 484.09546 481.32565 478.7886 476.47745 474.38287 472.49338 470.79578 469.2745 467.9132 466.6931 465.5948 464.5976 463.67993 462.81985 461.99472 461.18146 460.35733 459.49985 458.5868 457.59616 456.507 455.29898 453.95367 452.45288 450.78037 448.92114 446.8618 444.5906 442.09784 439.37555 436.41745 433.2192 429.7789 426.0961 422.17246 418.01218 413.62082 409.00595 404.17728 399.14597 393.92538 388.53043 382.9773 377.2836 371.4692 365.5546 359.56128 353.51227 347.4315 341.34345 335.2733 329.24655 323.28937 317.4284 311.69006 306.10086 300.68735 295.4757 290.49158 285.7601 281.30597 277.15317 273.32413 269.84097 266.72467 263.99454 261.6691 259.7655 258.29923 257.28268 256.72235 256.6188 256.97488 257.79877 259.09894 260.88263 263.15546 265.92163 269.18344 272.9416 277.19528 281.94165 287.1757 292.8909 299.08105 305.74805 312.90714 320.56937 328.72293 337.34216 346.398 355.8593 365.69244 375.86124 386.3268 397.0485 407.98334 419.0867 430.31216 441.6116 452.9355 464.2335 475.45425 486.5456 497.45514 508.13007 518.5178 528.5661 538.2232 547.43854 556.1626 564.3473 571.9462 578.91517 585.2121 590.79767 595.63544 599.69227 602.93787 605.3461 606.89466 607.5649 607.34266 606.21845 604.18744 601.2494 597.40876 592.67566 587.06464 580.5956 573.2937 565.1887 556.31635 546.7167 536.4347 525.5203 514.02845 502.01746 489.55063 476.69482 463.52112 450.10245 436.51605 422.8409 409.15833 395.5516 382.10632 368.91098 356.05347 343.61816 331.6859 320.3353 309.64258 299.6812 290.5217 282.23062 274.87027 268.49817 263.16724 258.92477 255.81255 253.86608 253.11428 253.57921 255.27625 258.2135 262.39148 267.8031 274.43366 282.26074 291.25418 301.37585 312.5801 324.8136 338.01556 352.11786 367.04532 382.7163 399.04318 415.93112 433.2811 450.98862 468.9443 487.03656 505.14572 523.1408 540.884 558.2449 575.1048 591.35206 606.87836 621.5809 635.36255 648.1318 659.8042 670.30286 679.55835 687.50995 694.10505 699.30036 703.06165 705.36384 706.19184 705.5401 703.4126 699.82306 694.7948 688.36 680.5601 671.4457 661.07544 649.5159 636.84174 623.13446 608.4822 592.97846 576.72254 559.8187 542.375 524.50226 506.31445 487.92746 469.45755 451.02222 432.73807 414.72012 397.08182 379.9337 363.38333 347.53464 332.4862 318.3308 305.156 293.0433 282.06662 272.29254 263.7801 256.58017 250.73526 246.27878 243.23558 241.62137 241.44283 242.6976 245.37429 249.45217 254.90207 261.68604 269.7579 279.0634 289.5406 301.12045 313.7266 327.2765 341.68234 356.85117 372.68445 389.08014 405.93317 423.13528 440.5768 458.14612 475.73065 493.21906 510.50043 527.4644 544.00324 560.012 575.3888 590.03614 603.861 616.7754 628.6972 639.54987 649.26325 657.77527 665.03034 670.9804 675.5859 678.8147 680.6433 681.05665 680.04755 677.6177 673.7841 668.5858 662.0753 654.30665 645.33564 635.2234 624.03675 611.849 598.7375 584.78394 570.07465 554.69977 538.75104 522.3222 505.5091 488.4083 471.11737 453.73434 436.35562 419.07526 401.98566 385.177 368.73578 352.7447 337.2833 322.42584 308.24176 294.79572 282.14655 270.3478 259.44666 249.48436 240.49555 232.50876 225.54689 219.6254 214.75351 210.93474 208.16629 206.4395 205.7401 206.04782 207.33728 209.57862 212.7369 216.77303 221.64453 227.30525 233.70581 240.79418 248.51598 256.8155 265.63553 274.91794 284.604 294.6353 304.95383 315.5013 326.22174 337.06055 347.96478 358.8834 369.76834 380.57443 391.2584 401.78095 412.10587 422.201 432.03784 441.5907 450.83768 459.7609 468.3459 476.58267 484.46475 491.9879 499.15186 505.95953 512.4171 518.53296 524.3175 529.7846 534.9494 539.8288 544.44086 548.8043 552.9393 556.8661 560.6055 564.17756 567.60236 570.8989 574.0866 577.18427 580.20405 583.1509 586.0248 588.82386 591.5447 594.1815 596.73175 599.19196 601.55085 603.78986 605.8886 607.8262 609.5813 611.1341 612.4643 613.55317 614.383 614.93836 615.2043 615.1689 614.8223 614.15625 613.16547 611.84754 610.20215 608.2322 605.943 603.3435 600.4445 597.2599 593.8072 590.1055 586.17695 582.0454 577.73786 573.2833 568.71235 564.0579 559.3538 554.63514 549.9386 545.3019 540.76185 536.357 532.1249 528.10315 524.3295 520.8404 517.671 514.85486 512.42457 510.4104 508.8408 507.74164 507.13596 507.04453 507.48474 508.4715 510.01578 512.1246 514.802 518.04816 521.8591 526.2269 531.1412 536.58594 542.54194 548.9871 555.8945 563.2329 570.9691 579.06537 587.48096 596.172 605.0927 614.1756 623.3373 632.5072 641.6261 650.63776 659.48737 668.1193 676.47754 684.50794 692.15644 699.3703 706.09864 712.29236 717.90424 722.8895 727.20594 730.8157 733.68244 735.77424 737.0635 737.52674 737.1446 735.9013 733.7874 730.7978 726.93146 722.1931 716.5925 710.14484 702.87037 694.7938 685.96827 676.46314 666.3453 655.67945 644.5301 632.96344 621.0441 608.83777 596.4094 583.82245 571.13807 558.4162 545.7137 533.08436 520.5804 508.2488 496.1343 484.277 472.71323 461.4759 450.59283 440.0874 429.98026 420.2872 411.01968 402.18506 393.78778 385.82562 378.29642 371.19397 364.50717 358.22394 352.32748 346.80093 341.62427 336.7757 332.23282 327.9721 323.96762 320.19562 316.63138 313.24924 310.0258 306.93753 303.96234 301.08054 298.28226 295.5659 292.9312 290.3763 287.9001 285.50363 283.1882 280.95636 278.81158 276.75922 274.80444 272.9512 271.20694 269.57806 268.0714 266.69327 265.45166 264.35184 263.4014 262.60852 261.97693 261.5133 261.22424 261.1134 261.1847 261.44406 261.89395 262.53668 263.37357 264.40637 265.63644 267.06186 268.6832 270.49915 272.50656 274.70428 277.08646 279.64954 282.39014 285.30212 288.3807 291.61832 295.0095 298.54675 302.2226 306.03003 309.9597 314.00473 318.157 322.40762 326.7471 331.16873 335.66275 340.2212 344.85168 349.5491 354.29898 359.08505 363.89148 368.70386 373.50525 378.2825 383.02045 387.7051 392.32318 396.8619 401.30914 405.65216 409.87967 413.9825 417.94843 421.7707 425.43863 428.94522 432.2832 435.44653 438.42874 441.26437 443.96347 446.5216 448.929 451.17966 453.26318 455.17432 456.9026 458.44278 459.78677 460.9269 461.85815 462.57245 463.06638 463.33203 463.36594 463.16556 462.72415 462.0406 461.11212 459.93805 458.51755 456.85016 454.93787 452.7836 450.38986 447.76083 444.90204 441.81928 438.52252 435.0189 431.3208 427.4368 423.38095 419.1683 414.815 410.33487 405.7475 401.0717 396.33078 391.5431 386.73282 381.92563 377.1448 372.41754 367.77032 363.23184 358.83014 354.59543 350.5579 346.7453 343.19095 339.92355 336.97607 334.3775 332.15802 330.3465 328.97217 328.06314 327.64563 327.74344 328.38217 329.58276 331.3658 333.7475 336.74457 340.37012 344.63284 349.54193 355.10004 361.30704 368.1633 375.66144 383.7915 392.53848 401.89 411.2469)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (749.43946 757.33716 765.00806 772.4409 779.6246 786.54804 793.20044 799.5709 805.6492 811.4249 816.88794 822.0284 826.8369 831.304 835.4207 839.1784 842.5686 845.58344 848.2152 850.45667 852.30097 853.7417 854.773 855.38935 855.5859 855.358 854.7017 853.61384 852.0917 850.13294 847.7361 844.90064 841.6259 837.9126 833.7621 829.1762 824.1577 818.7103 812.83814 806.5462 799.8409 792.7288 785.21766 777.3162 769.0337 760.3806 751.3683 742.009 732.3157 722.3027 711.9846 701.3776 690.49836 679.3647 667.995 656.4088 644.62635 632.6688 620.5581 608.3167 595.96796 583.5361 571.0457 558.52204 545.991 533.47876 521.01185 508.61728 496.32254 484.155 472.142 460.3114 448.69043 437.3067 426.18713 415.35834 404.8467 394.67392 384.8429 375.3281 366.15735 357.3581 348.95743 340.98172 333.45627 326.40588 319.854 313.82318 308.33432 303.407 299.05936 295.30765 292.16632 289.64767 287.7621 286.51758 285.91977 285.9717 286.6742 288.02496 290.0189 292.64838 295.9017 299.76193 304.20932 309.22153 314.77316 320.8362 327.37997 334.37143 341.77444 349.55078 357.65985 366.05875 374.70248 383.54385 392.53418 401.62296 410.75824 419.88693 428.95377 437.90393 446.68094 455.2285 463.49005 471.40857 478.92822 485.99295 492.54807 498.5398 503.91617 508.62698 512.62427 515.86255 518.2989 519.8941 520.6123 520.4213 519.2935 517.2057 514.1399 510.083 505.02744 498.97192 491.92114 483.88632 474.8852 464.94226 454.0896 442.3662 429.8181 416.49936 402.47107 387.80368 372.58673 356.9475 341.031 324.9527 308.82962 292.77896 276.91733 261.3603 246.22156 231.61125 217.63538 204.39627 191.99048 180.50885 170.03582 160.64833 152.41666 145.40274 139.6603 135.23459 132.16223 130.47135 130.18027 131.29874 133.82764 137.759 143.07564 149.75189 157.75392 167.03997 177.56018 189.25757 202.06806 215.92177 230.74219 246.44774 262.9522 280.1649 297.99197 316.3359 335.09805 354.17737 373.47195 392.87994 412.29984 431.6307 450.77045 469.6156 488.07043 506.0561 523.4976 540.3258 556.47657 571.89136 586.51746 600.30787 613.22187 625.2254 636.2897 646.3928 655.51935 663.6598 670.8105 676.9744 682.1606 686.38294 689.66144 692.0214 693.49384 694.11335 693.9196 692.9566 691.27204 688.91736 685.9466 682.4178 678.4005 673.9965 669.3333 664.5059 659.5686 654.5749 649.5775 644.6274 639.7738 635.06434 630.544 626.2544 622.2346 618.5204 615.1435 612.1321 609.51044 607.29804 605.5107 604.159 603.2471 602.7736 602.7336 603.11957 603.91987 605.1182 606.69404 608.6226 610.87507 613.41864 616.21735 619.2321 622.4204 625.7371 629.13544 632.5662 635.9792 639.3229 642.5457 645.5955 648.4206 650.9704 653.19556 655.0484 656.4834 657.4577 657.9319 657.87 657.2398 656.01325 654.1676 651.6844 648.5503 644.7578 640.3049 635.19507 629.4377 623.0479 616.04664 608.46045 600.32166 591.668 582.5421 572.9914 563.0679 552.82764 542.3303 531.63837 520.8176 509.9404 499.09345 488.3759 477.87683 467.66788 457.81708 448.38794 439.4387 431.01816 423.1591 415.87955 409.19217 403.10635 397.62613 392.7507 388.474 384.78497 381.668 379.1031 377.06665 375.531 374.46548 373.83688 373.60867 373.74274 374.1992 374.9369 375.91364 377.08688 378.41394 379.85233 381.3601 382.8962 384.4211 385.89667 387.2863 388.55585 389.67352 390.6096 391.33707 391.83215 392.07336 392.0429 391.72562 391.1093 390.18518 388.9474 387.393 385.52246 383.33905 380.84833 378.05887 374.98224 371.6315 368.0227 364.17392 360.10483 355.83694 351.39334 346.79822 342.07684 337.2557 332.36185 327.42294 322.46674 317.5211 312.61365 307.77225 303.0243 298.39587 293.91306 289.60104 285.4834 281.58298 277.92145 274.51883 271.3939 268.56406 266.04468 263.84973 261.9917 260.48117 259.32712 258.53687 258.11588 258.06918 258.40378 259.12933 260.25632 261.79337 263.74713 266.12235 268.92166 272.14545 275.79202 279.8575 284.33585 289.2186 294.49536 300.154 306.18433 312.57996 319.33167 326.42126 333.82437 341.515 349.46548 357.6465 366.02713 374.57562 383.2588 392.04266 400.8929 409.77423 418.6509 427.48764 436.24924 444.90006 453.4053 461.7312 469.84473 477.71417 485.30908 492.60083 499.5626 506.16928 512.3984 518.22944 523.6446 528.6291 533.1709 537.2606 540.8919 544.0621 546.7714 549.0233 550.8247 552.1856 553.11957 553.6434 553.77674 553.54206 552.96534 552.07514 550.90235 549.4808 547.84626 546.03614 544.08967 542.0479 539.9522 537.8454 535.7713 533.7727 531.89264 530.1735 528.6569 527.38324 526.3912 525.7171 525.39527 525.4578 525.9354 526.8538 528.2308 530.0781 532.4039 535.21137 538.4992 542.2613 546.48804 551.1651 556.274 561.7923 567.6935 573.9473 580.5204 587.3751 594.4722 601.7691 609.221 616.7808 624.40027 632.02955 639.6175 647.1131 654.46424 661.6197 668.5284 675.14 681.4056 687.2777 692.711 697.6623 702.0906 705.9576 709.22834 711.871 713.8571 715.16376 715.77576 715.6854 714.886 713.37 711.1324 708.1726 704.49427 700.1052 695.0181 689.2498 682.82105 675.75654 668.08594 659.8425 651.06336 641.7888 632.0627 621.9315 611.4453 600.65644 589.61884 578.38886 567.0242 555.5834 544.1261 532.7123 521.4023 510.255 499.3289 488.68192 478.36975 468.4464 458.96344 449.96997 441.51227 433.6327 426.3698 419.75955 413.83282 408.6165 404.133 400.39954 397.42844 395.2275 393.79996 393.14328 393.24982 394.10745 395.69934 398.0033 400.99234 404.63507 408.896 413.7357 419.11053 424.97314 431.27322 437.95798 444.9713 452.25497 459.74982 467.39456 475.1265 482.88263 490.6002 498.2166 505.6696 512.89844 519.8433 526.447 532.6548 538.4137 543.67457 548.39167 552.52247 556.02894 558.8773 561.03815 562.4872 563.2049 563.177 562.3942 560.85285 558.55445 555.50574 551.7193 547.2129 542.00934 536.13654 529.627 522.51856 514.85346 506.6777 498.04184 488.99976 479.6082 469.92703 460.0189 449.94843 439.79312 429.64954 419.61282 409.75922 400.1517 390.8487 381.90582 373.3762 365.31012 357.75403 350.75064 344.339 338.5535 333.42407 328.9764 325.23135 322.2047 319.90778 318.34753 317.52615 317.43988 318.0804 319.4346 321.4836 324.20438 327.56897 331.5449 336.09543 341.18018 346.75473 352.77097 359.17825 365.9233 372.95074 380.20255 387.61914 395.14063 402.706 410.25397 417.7247 425.0583 432.19565 439.08 445.656 451.87097 457.67578 463.02457 467.87457 472.18646 475.92685 479.0661 481.57877 483.44556 484.65173 485.1881 485.05145 484.24332 482.7709 480.6473 477.89136 474.52625 470.58084 466.08908 461.0896 455.6256 449.74454 443.497 436.93808 430.12582 423.12015 415.9833 408.77918 401.57333 394.4319 387.42096 380.60687 374.05444 367.82666 361.98535 356.59048 351.6983 347.36157 343.62958 340.54718 338.1551 336.4887 335.57773 335.44653 336.11414 337.59305 339.88928 343.00314 346.9288 351.65262 357.14862 363.3782 370.2957 377.85126 385.9901 394.65463 403.78653 413.32556 423.20725 433.36215 443.71866 454.20532 464.7507 475.28436 485.7369 496.0411 506.1313 515.9438 525.4186 534.49866 543.1305 551.2647 558.8553 565.8603 572.2425 577.9687 583.01014 587.3425 590.9466 593.80677 595.91346 597.26056 597.8462 597.67255 596.7463 595.07917 592.68537 589.5827 585.7935 581.3424 576.25794 570.5711 564.3158 557.52796 550.246 542.5099 534.36207 525.8463 517.00666 507.88928 498.5408 489.0085 479.34006 469.58252 459.7834 449.98993 440.24826 430.60236 421.09625 411.77267 402.67297 393.83792 385.30582 377.11365 369.29688 361.8879 354.918 348.41687 342.40982 336.9215 331.97363 327.58484 323.77148 320.54724 317.92322 315.8931 314.44144 313.56445 313.27084 313.5701 314.47037 315.9777 318.09677 320.82904 324.1747 328.1304 332.6923 337.8524 343.60168 349.9279 356.81754 364.25327 372.21668 380.68658 389.63965 399.0504 408.8918 419.13382 429.74478 440.69153 451.93805 463.44748 475.18262 487.102 499.16507 511.32928 523.53266 535.71564 547.8344 559.8521 571.73475 583.4466 594.95447 606.2257 617.2265 627.9255 638.2908 648.29145 657.8965 667.077 675.80335 684.0473 691.77997 698.9746 705.60517 711.64624 717.07227 721.8611 725.9899 729.4376 732.18525 734.21454 735.50855 736.0532 735.8364 734.8473 733.078 730.523 727.17926 723.04676 718.12885 712.4308 705.96204 698.73536 690.7668 682.0764 672.6876 662.62726 651.9266 640.6203 628.7473 616.34937 603.50324 590.2931 576.7949 563.07575 549.2015 535.2393 521.25354 507.30667 493.46198 479.7784 466.3133 453.12305 440.25925 427.77222 415.7084 404.11185 393.0211 382.47394 372.5038 363.13953 354.40735 346.33066 338.92886 332.216 326.20508 320.90485 316.32123 312.4544 309.30554 306.87054 305.14066 304.1088 303.76196 304.08716 305.06567 306.6803 308.9104 311.73416 315.1267 319.06253 323.5168 328.46158 333.86624 339.70425 345.94348 352.55637 359.5089 366.77252 374.31656 382.1086 390.11603 398.3118 406.66556 415.14667 423.74603 432.44992 441.23407 450.07507 458.94797 467.83115 476.7006 485.53613 494.31342 503.014 511.61786 520.10596 528.45795 536.6571 544.68555 552.5271 560.1639 567.58204 574.76624 581.701 588.37555 594.7749 600.8858 606.70844 612.22754 617.4217 622.2677 626.74244 630.82404 634.49115 637.72205 640.495 642.7915 644.5906 645.875 646.62665 646.82984 646.46845 645.529 643.9997 641.86927 639.1284 635.7694 631.7871 627.1776 621.938 616.06977 609.57496 602.4594 594.7285 586.39277 577.4631 567.95575 557.8865 547.2751 536.1422 524.5133 512.41517 499.87857 486.93143 473.61206 459.9552 446.00137 431.78793 417.36047 402.7629 388.0448 373.2489 358.4268 343.62802 328.9105 314.3173 299.90717 285.72998 271.8428 258.29388 245.13916 232.42633 220.21114 208.53614 197.45304 187.00487 177.23694 168.18727 159.89374 152.39081 145.71094 139.87886 134.92 130.85175 127.692856 125.45011 124.13022 123.7368 124.26349 125.703804 128.04471 131.26689 135.3485 139.43665)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (448.86655 446.4457 444.1426 441.96497 439.92026 438.01608 436.2597 434.6585 433.21954 431.94955 430.85544 429.94382 429.2209 428.69296 428.36572 428.24515 428.33637 428.64465 429.17468 429.93115 430.91803 432.13907 433.59802 435.29742 437.24027 439.42868 441.8642 444.54837 447.48154 450.6645 454.09653 457.77704 461.70447 465.87692 470.29175 474.94583 479.83536 484.95566 490.30176 495.8676 501.64694 507.63232 513.8158 520.18897 526.7422 533.4655 540.3481 547.37824 554.544 561.832 569.22895 576.7203 584.29096 591.9252 599.6067 607.31855 615.04297 622.76197 630.4566 638.10816 645.69684 653.2021 660.60395 667.8815 675.01374 681.9793 688.7569 695.325 701.66205 707.74646 713.5568 719.07196 724.27094 729.1329 733.63776 737.7656 741.4976 744.815 747.7005 750.1381 752.11115 753.6036 754.60077 755.0888 755.0555 754.4898 753.3819 751.72364 749.50824 746.73084 743.38794 739.47797 735.00104 729.9592 724.3563 718.19825 711.49305 704.2501 696.48145 688.2009 679.4242 670.17017 660.46 650.31574 639.76087 628.82056 617.52204 605.89386 593.9663 581.77167 569.34314 556.715 543.92304 531.00434 517.9969 504.93964 491.87173 478.83316 465.8646 453.0065 440.30035 427.78677 415.5061 403.49896 391.80432 380.46103 369.5076 358.98016 348.91467 339.34482 330.3032 321.8203 313.92462 306.6426 299.99872 294.014 288.70828 284.09753 280.19528 277.01257 274.5563 272.83127 271.83896 271.57712 272.04056 273.22076 275.10574 277.68042 280.92618 284.82166 289.34168 294.45844 300.14114 306.35675 313.07376 320.26828 327.913 335.96268 344.3702 353.086 362.0584 371.23453 380.5595 389.97797 399.43362 408.86957 418.22907 427.4556 436.493 445.28613 453.78098 461.9254 469.66876 476.96304 483.7627 490.02506 495.71057 500.78326 505.21094 508.9652 512.0222 514.3623 515.97046 516.83637 516.95496 516.32587 514.95386 512.8487 510.02548 506.5041 502.30954 497.47183 492.0255 486.00995 479.46857 472.44897 465.00293 457.18555 449.05518 440.6742 432.11545 423.469 414.82468 406.24564 397.79367 389.5269 381.501 373.7686 366.37817 359.37445 352.7988 346.68768 341.074 335.9855 331.44614 327.47504 324.0871 321.29263 319.098 317.50516 316.51215 316.11316 316.29892 317.05643 318.36932 320.21826 322.5817 325.4348 328.75092 332.50186 336.65915 341.1986 346.1016 351.34262 356.8888 362.7061 368.76126 375.02103 381.45194 388.0211 394.69672 401.44794 408.24554 415.06046 421.86612 428.63724 435.34967 441.98175 448.51324 454.92508 461.1979 467.311 473.2483 479.00153 484.56442 489.9332 495.1056 500.08157 504.8626 509.45203 513.855 518.078 522.1288 526.0167 529.752 533.3459 536.8103 540.1579 543.40204 546.5563 549.63446 552.6504 555.6176 558.5501 561.46076 564.36237 567.2671 570.1861 573.1299 576.10804 579.12897 582.20026 585.328 588.517 591.77094 595.0919 598.4809 601.9375 605.4596 609.04395 612.6855 616.3785 620.1151 623.88654 627.6829 631.49335 635.30524 639.10535 642.87885 646.608 650.26606 653.81977 657.2417 660.5145 663.6215 666.5457 669.27106 671.7826 674.0664 676.11036 677.9027 679.43305 680.69135 681.6687 682.3573 682.7501 682.84144 682.62635 682.10096 681.26264 680.10987 678.6419 676.8592 674.76337 672.35694 669.64356 666.6276 663.3151 659.7126 655.8274 651.668 647.24415 642.5659 637.6443 632.49115 627.11927 621.5421 615.77356 609.8285 603.7222 597.4705 591.08985 584.5969 578.009 571.3435 564.61817 557.851 551.06037 544.26435 537.4811 530.729 524.02625 517.3907 510.84006 504.39185 498.0629 491.8699 485.82907 479.95587 474.265 468.7705 463.48596 458.4237 453.59552 449.01166 444.68195 440.61508 436.81842 433.2981 430.05902 427.10516 424.4392 422.06223 419.97394 418.17294 416.65628 415.4197 414.45795 413.7641 413.3297 413.145 413.19916 413.48004 413.9748 414.66992 415.55182 416.60486 417.80994 419.14615 420.5918 422.12445 423.72037 425.35535 427.0047 428.6431 430.24512 431.78503 433.23706 434.57568 435.77548 436.81067 437.65485 438.28073 438.6613 438.77066 438.5843 438.07858 437.23123 436.02145 434.4302 432.44046 430.0373 427.20764 423.94058 420.22812 416.06473 411.44717 406.3751 400.85086 394.87967 388.46985 381.6326 374.38174 366.73438 358.7104 350.33282 341.62744 332.62268 323.34988 313.8428 304.13782 294.27377 284.29166 274.23462 264.14758 254.07733 244.07202 234.1811 224.455 214.94528 205.70395 196.78339 188.23581 180.11333 172.4677 165.34969 158.80902 152.89424 147.65254 143.12876 139.36577 136.40409 134.28147 133.03273 132.68956 133.2802 134.82938 137.35782 140.88231 145.41556 150.96596 157.53688 165.12743 173.73172 183.33904 193.934 205.49645 218.0017 231.42012 245.71759 260.8553 276.79 293.47418 310.85608 328.88 347.48666 366.61124 386.18826 406.14838 426.41885 446.92505 467.5901 488.33548 509.0808 529.74524 550.24714 570.50397 590.43384 609.95594 628.9895 647.4555 665.2769 682.3795 698.6907 714.1411 728.6656 742.20246 754.69416 766.0828 776.30347 785.29157 793.0031 799.4182 804.52894 808.3342 810.83985 812.05884 812.0105 810.7202 808.22016 804.5484 799.7481 793.8679 786.9614 779.0861 770.304 760.68067 750.2847 739.1877 727.46326 715.1869 702.4352 689.2857 675.8168 662.10627 648.23194 634.2706 620.2973 606.38544 592.6066 579.0296 565.7205 552.74244 540.1548 528.01337 516.3699 505.27176 494.76205 484.8795 475.65808 467.127 459.31064 452.22833 445.89404 440.31763 435.5039 431.45245 428.15848 425.6126 423.80087 422.70496 422.3025 422.5674 423.4697 424.97607 427.05017 429.65228 432.74002 436.26926 440.19366 444.4649 449.03305 453.84714 458.8555 464.00595 469.24603 474.5239 479.78796 484.98633 490.06882 494.9867 499.6926 504.14087 508.288 512.0924 515.51545 518.5206 521.0744 523.1467 524.7103 525.74097 526.2181 526.1242 525.4459 524.17304 522.299 519.8209 516.73957 513.0592 508.7874 503.93552 498.5182 492.55362 486.0628 479.06946 471.60135 463.68832 455.36252 446.65955 437.61932 428.28577 418.70496 408.92377 398.99002 388.9524 378.86008 368.76242 358.70847 348.74765 338.92816 329.29678 319.89978 310.78125 301.9843 293.5529 285.52948 277.9524 270.85574 264.27084 258.22617 252.74713 247.85659 243.57367 239.91408 236.89073 234.51293 232.78684 231.71575 231.29941 231.53415 232.41378 233.92864 236.0665 238.8122 242.1477 246.05266 250.5043 255.47794 260.9462 266.88034 273.24994 280.023 287.1659 294.64398 302.4223 310.46457 318.7341 327.19348 335.8061 344.53455 353.3418 362.1918 371.04877 379.8772 388.6429 397.31265 405.85446 414.23773 422.4336 430.41428 438.15378 445.62833 452.81543 459.69458 466.24716 472.45737 478.31113 483.7963 488.90237 493.62186 497.94904 501.88046 505.414 508.55066 511.29306 513.64557 515.6151 517.2098 518.4394 519.3162 519.8532 520.06556 519.96936 519.58265 518.9242 518.0135 516.8717 515.5207 513.983 512.2812 510.4425 508.5002 506.48654 504.42844 502.34958 500.2724 498.21848 496.20917 494.26267 492.39273 490.61145 488.93076 487.36298 485.91977 484.61197 483.45053 482.44525 481.6053 480.9395 480.45685 480.1655 480.07285 480.18616 480.5119 481.0557 481.8236 482.8205 484.05136 485.52014 487.23038 489.18533 491.38794 493.8401 496.54382 499.49982 502.70816 506.16867 509.88074 513.8428 518.05256 522.50715 527.2026 532.13446 537.2973 542.68464 548.2896 554.1042 560.11915 566.3242 572.70856 579.2599 585.9653 592.81037 599.7801 606.85724 614.0248 621.2639 628.5549 635.8788 643.2155 650.541 657.829 665.0519 672.18085 679.18616 686.0376 692.7038 699.15345 705.3543 711.2733 716.8778 722.1348 727.0115 731.4744 735.49115 739.03016 742.0596 744.5507 746.4786 747.8164 748.53827 748.61915 748.0358 746.7661 744.7902 742.09034 738.65125 734.46027 729.50745 723.7843 717.28626 710.012 701.9619 693.14106 683.5562 673.2194 662.1451 650.3506 637.85755 624.6904 610.87726 596.4495 581.4427 565.89515 549.84827 533.34607 516.437 499.1713 481.64 463.94147 446.15714 428.3573 410.60898 392.97723 375.52695 358.32095 341.42014 324.88232 308.7629 293.11536 277.98932 263.4322 249.48693 236.19348 223.5888 211.70606 200.57424 190.21923 180.66231 171.92279 164.01468 156.94875 150.7325 145.36977 140.8603 137.20143 134.38729 132.40859 131.25275 130.9045 131.34645 132.55825 134.51714 137.19768 140.57353 144.61573 149.29405 154.5761 160.42853 166.8169 173.70592 181.05841 188.83748 197.0055 205.52106 214.34365 223.43379 232.7549 242.26976 251.94298 261.73724 271.61728 281.54932 291.49954 301.43475 311.32397 321.1367 330.84338 340.41556 349.82617 359.05026 368.06384 376.84476 385.37225 393.62665 401.58987 409.24567 416.57953 423.57877 430.23163 436.52902 442.462 448.02374 453.21027 458.01694 462.44263 466.4866 470.14987 473.43417 476.34457 478.88513 481.0624 482.88303 484.35672 485.49368 486.3036 486.79858 486.99103 486.895 486.52463 485.8951 485.02118 483.9202 482.60788 481.10144 479.41843 477.57755 475.5957 473.50092 471.31406 469.0499 466.7227 464.3469 461.93552 459.5033 457.06363 454.62967 452.21475 449.83057 447.49112 445.20685 442.99008 440.8507 438.80017 436.84805 435.0037 433.2757 431.67212 430.19977 428.86505 427.6744 426.62317 425.7103 424.93802 424.31058 423.8277 423.4906 423.30045 423.2571 423.3596 423.60498 423.9912 424.51462 425.17255 425.96057 426.87302 427.90448 429.04923 430.30023 431.65082 433.09216 434.6181 436.21933 437.8881 439.61502 441.3905 443.2059 445.05246 446.91907 448.7964 450.67587 452.5461 454.399 456.22513 458.0156 459.76135 461.45276 463.08383 464.6429 466.12512 467.52264 468.82935 470.0372 471.1434 472.14038 473.02536 473.79483 474.44424 474.9711 475.3749 475.6545 475.80844 475.83908 475.74503 475.53125 475.19824 474.75027 474.19046 473.52713 472.76212 471.9047 470.96063 469.93784 468.84482 467.69122 466.48584 465.23953 463.96414 462.6688 461.36694 460.06992 458.78995 457.53912 456.3324 455.182 454.1015 453.1041 452.10712)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (365.66745 353.98367 342.36295 330.81363 319.3435 307.9608 296.67325 285.4888 274.41516 263.46033 252.63166 241.937 231.38368 220.97934 210.7313 200.64693 190.73354 180.99819 171.44812 162.09012 152.93138 143.97863 135.23854 126.718026 118.423485 110.3613 102.53801 94.959854 87.63279 80.56307 73.75616 67.21835 60.9547 54.97081 49.272007 43.863167 38.74932 33.935116 29.424954 25.222964 21.333289 17.759449 14.5050745 11.573147 8.966614 6.6880098 4.7394514 3.122927 1.8396869 0.89127064 0.2778707 0.0 0.057498236 0.45004472 1.1763889 2.234863 3.6240242 5.34105 7.38328 9.747057 12.428758 15.423637 18.726916 22.333142 26.236351 30.43026 34.90784 39.66166 44.683983 49.96625 55.4999 61.2758 67.28422 73.51529 79.95878 86.60417 93.44072 100.45785 107.64775 115.00768 122.52593 130.19156 137.99326 145.91948 153.9585 162.09909 170.32984 178.63938 187.01668 195.45076 203.93122 212.44748 220.99015 229.54936 238.11667 246.68364 255.24265 263.78656 272.3092 280.80508 289.26923 297.6973 306.08582 314.4351 322.74582 331.0197 339.25916 347.46707 355.64716 363.80356 371.94113 380.06503 388.18106 396.2952 404.414 412.54388 420.6919 428.86536 437.0713 445.31696 453.6089 461.95447 470.36032 478.83316 487.37912 496.00397 504.713 513.51105 522.40217 531.39 540.4774 549.6661 558.9576 568.3518 577.84827 587.44507 597.1396 606.92786 616.8051 626.76484 636.79987 646.90155 657.06006 667.2642 677.50165 687.7586 698.02 708.2695 718.4893 728.66077 738.76337 748.77564 758.6751 768.43714 778.0341 787.4304 796.5874 805.47205 814.0508 822.2903 830.1565 837.6158 844.635 851.1814 857.22327 862.73005 867.6721 872.02186 875.7529 878.8412 881.26447 883.0034 884.04004 884.36017 883.95166 882.8055 880.9155 878.2786 874.89496 870.7677 865.90357 860.312 854.0058 847.00135 839.3173 830.9761 822.0029 812.4253 802.2741 791.5827 780.3864 768.72284 756.6317 744.1546 731.3346 718.2157 704.84394 691.26496 677.5256 663.67395 649.76215 635.8505 621.9969 608.24274 594.6279 581.1915 567.9707 555.0002 542.31354 529.94147 517.9126 506.25327 494.98706 484.13477 473.71454 463.7415 454.22812 445.18375 436.61478 428.52475 420.91415 413.78052 407.11838 400.91962 395.17346 389.86646 384.98273 380.5042 376.41046 372.6786 369.281 366.17847 363.32037 360.66495 358.1816 355.83978 353.6085 351.45624 349.3522 347.26614 345.16815 343.02893 340.82092 338.5176 336.094 333.5269 330.7952 327.8799 324.76413 321.4337 317.87662 314.08408 310.05002 305.7709 301.24622 296.47873 291.47382 286.24023 280.78912 275.13498 269.29477 263.2882 257.1376 250.86783 244.50588 238.08118 231.62467 225.1689 218.7482 212.39797 206.15442 200.05477 194.13648 188.43685 182.99344 177.84313 173.02225 168.56606 164.50812 160.88101 157.71506 155.0382 152.87657 151.25357 150.18955 149.7018 149.80448 150.50864 151.82122 153.74611 156.28318 159.4288 163.17511 167.51073 172.42057 177.88552 183.88317 190.38742 197.36835 204.78961 212.60205 220.74533 229.16419 237.81389 246.64899 255.62369 264.6926 273.8101 282.9307 292.01212 301.01785 309.91452 318.67105 327.2588 335.65146 343.82578 351.76056 359.4376 366.84158 373.95996 380.7825 387.30203 393.51373 399.41553 405.0077 410.2928 415.27548 419.9627 424.36337 428.48785 432.34814 435.95795 439.33228 442.48685 445.43845 448.20483 450.80426 453.25537 455.57697 457.7881 459.90762 461.95425 463.94638 465.90204 467.8386 469.77252 471.71973 473.69525 475.71298 477.7857 479.92505 482.14175 484.44482 486.84256 489.34152 491.94672 494.66263 497.4919 500.43543 503.49344 506.6645 509.94574 513.33356 516.8227 520.40686 524.0786 527.8292 531.64936 535.5286 539.45545 543.4178 547.4025 551.3963 555.3848 559.35364 563.2876 567.1711 570.9885 574.7244 578.3627 581.8875 585.283 588.53394 591.6246 594.53956 597.26447 599.78766 602.10065 604.19587 606.06574 607.7038 609.1047 610.2632 611.1755 611.8384 612.2495 612.40705 612.3104 611.96045 611.3622 610.52765 609.47107 608.20276 606.7307 605.0632 603.2094 601.17914 598.98267 596.6307 594.13446 591.5057 588.75654 585.89936 582.947 579.9125 576.8089 573.65 570.44904 567.2198 563.9757 560.7302 557.4968 554.2888 551.1192 548.0004 544.9448 541.96436 539.07026 536.2733 533.5838 531.0112 528.56397 526.24994 524.07666 522.05024 520.17566 518.45716 516.89814 515.50055 514.2651 513.1918 512.2794 511.52515 510.92548 510.47537 510.16876 509.99863 509.9562 510.0317 510.2144 510.49216 510.85223 511.2808 511.76282 512.2828 512.82404 513.369 513.8998 514.39795 514.8444 515.21924 515.50165 515.6709 515.70807 515.59546 515.3157 514.85206 514.18824 513.3083 512.197 510.84027 509.22485 507.3383 505.16904 502.70694 499.94275 496.86862 493.47778 489.76483 485.7259 481.35815 476.66022 471.6324 466.27612 460.5944 454.59155 448.27344 441.64716 434.72153 427.50638 420.0129 412.25366 404.24213 395.99353 387.52405 378.8509 369.99228 360.96725 351.7993 342.5222 333.17767 323.80225 314.42337 305.0649 295.7507 286.5045 277.34937 268.3083 259.40387 250.65749 242.09006 233.72199 225.57238 217.65982 210.00179 202.61449 195.51323 188.71283 182.2268 176.06697 170.24402 164.76816 159.64852 154.89273 150.50763 146.49909 142.8714 139.62851 136.77349 134.30821 132.23387 130.5509 129.25905 128.3577 127.84541 127.720604 127.98102 128.62374 129.64604 131.04505 132.81743 134.96009 137.46991 140.3435 143.57793 147.1704 151.11812 155.41849 160.0695 165.06925 170.41585 176.10776 182.14408 188.52404 195.2472 202.31336 209.72246 217.47481 225.57088 234.01116 242.79622 251.92652 261.40265 271.22513 281.39417 291.90982 302.7714 313.97788 325.52792 337.41953 349.64996 362.21545 375.11127 388.33206 401.87155 415.72165 429.87283 444.3151 459.03726 474.02567 489.26514 504.73956 520.43116 536.32044 552.38605 568.60505 584.95295 601.4039 617.9297 634.5007 651.0859 667.65314 684.16877 700.5972 716.9018 733.04505 748.98865 764.693 780.1073 795.16394 809.79755 823.9617 837.6218 850.74665 863.3066 875.2737 886.6215 897.3255 907.36304 916.71314 925.3572 933.27875 940.46277 946.8958 952.56354 957.4522 961.5531 964.8624 967.3795 969.1058 970.0453 970.2044 969.5915 968.2174 966.09504 963.23945 959.66785 955.39966 950.4556 944.8588 938.6341 931.8079 924.40827 916.46467 908.00745 899.069 889.6817 879.8798 869.69794 859.17115 848.33594 837.22815 825.8837 814.3394 802.63135 790.7954 778.8675 766.88196 754.8734 742.87537 730.91987 719.0382 707.2605 695.6154 684.12977 672.82874 661.73627 650.8741 640.26246 629.91944 619.8606 610.0997 600.6487 591.5173 582.7126 574.2399 566.10224 558.30036 550.83307 543.6968 536.88636 530.3943 524.21106 518.32575 512.7256 507.3958 502.3206 497.48288 492.86374 488.44363 484.20172 480.1163 476.1658 472.3277 468.5786 464.89557 461.25543 457.63525 454.01245 450.36496 446.6677 442.89056 439.0093 435.00992 430.8844 426.6271 422.23456 417.70435 413.0328 408.21735 403.26056 398.16943 392.9528 387.62192 382.18744 376.6614 371.05676 365.38748 359.66693 353.90887 348.12756 342.33762 336.55313 330.78815 325.05713 319.37347 313.75006 308.19983 302.73477 297.3663 292.1058 286.96332 281.94824 277.06928 272.33353 267.7483 263.31976 259.05295 254.9521 251.02086 247.26157 243.67525 240.26367 237.02649 233.96256 231.07027 228.3479 225.79236 223.39995 221.16562 219.08539 217.15367 215.36473 213.71248 212.18993 210.79033 209.50659 208.33104 207.25641 206.27497 205.37908 204.56064 203.81224 203.1263 202.49521 201.91146 201.36824 200.85865 200.37627 199.91472 199.46833 199.03202 198.60047 198.16947 197.73494 197.29328 196.84198 196.38024 195.90982 195.43315 194.95146 194.46659 193.98079 193.49611 193.01538 192.54203 192.07921 191.63022 191.1999 190.79273 190.41365 190.06783 189.7608 189.49875 189.28768 189.13426 189.04566 189.02915 189.09194 189.2424 189.48827 189.83774 190.29956 190.88227 191.59549 192.44765 193.44863 194.60695 195.93038 197.42366 199.09181 200.93795 202.96672 205.18154 207.58608 210.18297 212.97464 215.96309 219.15062 222.53948 226.13019 229.92482 233.92386 238.12851 242.53993 247.15831 251.9844 257.0184 262.26028 267.71048 273.36926 279.23624 285.31125 291.59433 298.08508 304.78265 311.68637 318.79565 326.1094 333.62604 341.34445 349.26285 357.37875 365.68976 374.19342 382.88632 391.76453 400.82425 410.0604 419.468 429.0401 438.7715 448.654 458.68002 468.83273 479.094 489.4474 499.8774 510.36984 520.9091 531.47944 542.06434 552.649 563.21534 573.7481 584.2301 594.6456 604.97815 615.2119 625.33094 635.3198 645.1643 654.8495 664.3605 673.685 682.80896 691.7206 700.4081 708.86054 717.0668 725.01825 732.70496 740.1193 747.2541 754.10206 760.65754 766.9151 772.8714 778.5219 783.864 788.8954 793.6145 798.0203 802.11365 805.8947 809.36567 812.52717 815.38166 817.933 820.1847 822.1401 823.80506 825.1844 826.2831 827.10706 827.6632 827.95765 827.9983 827.79474 827.3527 826.6768 825.76905 824.6351 823.2782 821.70337 819.91504 817.9187 815.7195 813.32294 810.73444 807.9603 805.00666 801.88044 798.5869 795.13367 791.5278 787.77564 783.88465 779.862 775.71534 771.45185 767.0649 762.5551 757.93055 753.1992 748.3702 743.4529 738.45636 733.3911 728.26624 723.09217 717.8795 712.63727 707.37757 702.10956 696.84394 691.5915 686.36255 681.1669 676.01465 670.9159 665.8811 660.91895 656.0379 651.2472 646.5558 641.9704 637.4995 633.1498 628.92707 624.83796 620.88715 617.079 613.41706 609.90485 606.54395 603.336 600.28077 597.3786 594.62806 592.0271 589.57154 587.2585 585.0829 583.0385 581.11744 579.31305 577.61646 576.0184 574.5076 573.0729 571.70264 570.3842 569.1025 567.8441 566.5949 565.3382 564.05854 562.73884 561.36365 559.9154 558.37696 556.7311 554.9606 553.04877 550.97846 548.7325 546.29627 543.65357 540.79047 537.6921 534.34467 530.7366 526.85645 522.6951 518.243 513.4927 508.73978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (723.48377 730.47626 736.98737 742.98127 748.42365 753.28254 757.52814 761.1333 764.0731 766.32544 767.87067 768.6921 768.77607 768.11145 766.6906 764.5084 761.5629 757.85517 753.38947 748.1727 742.2149 735.5289 728.13044 720.0381 711.273 701.85877 691.82166 681.1901 669.9948 658.2686 646.046 633.36396 620.2601 606.77405 592.9469 578.82044 564.43744 549.8417 535.07734 520.189 505.2216 490.21976 475.2284 460.2919 445.4543 430.7587 416.24783 401.96304 387.94482 374.23245 360.8636 347.8745 335.30005 323.1728 311.52432 300.3834 289.77713 279.73053 270.26694 261.4065 253.16756 245.56636 238.61716 232.3307 226.7162 221.78096 217.52858 213.96149 211.07942 208.88002 207.3583 206.50724 206.31801 206.77964 207.87871 209.60012 211.9269 214.83992 218.31511 222.32147 226.83441 231.82817 237.27556 243.14824 249.41681 256.05084 263.01913 270.28967 277.83 285.60678 293.58664 301.73566 310.02002 318.40585 326.85907 335.34604 343.83368 352.28915 360.68024 368.97553 377.14325 385.14658 392.94183 400.50626 407.81863 414.8597 421.6126 428.06238 434.19663 440.00497 445.47934 450.61368 455.40454 459.8505 463.9521 467.71228 471.13577 474.22955 477.00262 479.4652 481.62946 483.5102 485.1221 486.4824 487.60934 488.52206 489.2411 489.78717 490.1827 490.4502 490.61215 490.69226 490.7136 490.69928 490.67264 490.6564 490.67297 490.74384 490.88974 491.13086 491.48615 491.97293 492.6077 493.40533 494.37946 495.54166 496.90183 498.4683 500.24765 502.2439 504.45963 506.89505 509.54865 512.4164 515.4925 518.7705 522.247 525.91987 529.7856 533.83905 538.0729 542.4784 547.04444 551.7575 556.6024 561.5609 566.6132 571.73694 576.90705 582.0969 587.2774 592.4169 597.4823 602.4386 607.2494 611.8761 616.27997 620.42035 624.25666 627.747 630.85065 633.52607 635.7324 637.4305 638.5812 639.14814 639.09577 638.3915 637.00507 634.9094 632.08045 628.49787 624.1449 619.0089 613.08185 606.36005 598.8444 590.54084 581.46 571.61835 561.03614 549.739 537.7577 525.1274 511.88812 498.08466 483.76703 468.98853 453.8061 438.28122 422.4783 406.4643 390.30866 374.0832 357.86093 341.7162 325.72376 309.95908 294.49698 279.4113 264.77432 250.65749 237.1289 224.25447 212.09654 200.71431 190.16269 180.49208 171.74784 163.97089 157.19915 151.47396 146.84084 143.33386 140.97078 139.76233 139.71273 140.81943 143.07302 146.45749 150.94992 156.52167 163.13782 170.75687 179.33208 188.81143 199.13726 210.24861 222.07917 234.55854 247.61074 261.15414 275.10687 289.3896 303.92188 318.6228 333.41135 348.2072 362.93088 377.50464 391.8529 405.9025 419.58344 432.8297 445.57904 457.77353 469.3603 480.29175 490.52548 500.02493 508.75964 516.70514 523.84314 530.1619 535.65625 540.327 544.1816 547.2334 549.5023 551.0138 551.7989 551.8944 551.34205 550.1882 548.48304 546.2813 543.6411 540.62336 537.29114 533.71 529.94635 526.06757 522.14155 518.2355 514.4161 510.74878 507.29718 504.1213 501.27966 498.8283 496.82224 495.31018 494.3248 493.88516 494.0038 494.6873 495.93665 497.7543 500.14926 503.12683 506.67334 510.7631 515.3656 520.4472 525.97034 531.89417 538.17615 544.77137 551.632 558.71 565.95636 573.32184 580.75684 588.2121 595.6393 602.99054 610.22 617.2833 624.1378 630.74335 637.0617 643.0576 648.69855 653.9545 658.7988 663.2076 667.1602 670.63916 673.62995 676.1217 678.106 679.5782 680.5363 680.98114 680.91645 680.3487 679.2866 677.7416 675.7272 673.2591 670.3545 667.03266 663.31397 659.22016 654.77387 649.99915 644.92017 639.5615 633.9479 628.104 622.05445 615.8232 609.4337 602.90845 596.26886 589.5352 582.7264 575.85956 568.9507 562.0132 555.059 548.0981 541.1383 534.18506 527.24195 520.31006 513.3885 506.47427 499.56226 492.64508 485.71335 478.75632 471.76132 464.7161 457.61444 450.45822 443.24664 435.9711 428.62094 421.1866 413.65842 406.0272 398.2848 390.42468 382.44077 374.32813 366.08365 357.7051 349.18988 340.52683 331.692 322.66495 313.44623 304.04938 294.4901 284.78577 274.9561 265.02307 255.00954 244.94025 234.84181 224.74167 214.66889 204.65341 194.72595 184.91855 175.26346 165.79319 156.54079 147.5396 138.82251 130.42221 122.371506 114.70218 107.445626 100.63265 94.29284 88.454796 83.145874 78.39215 74.21822 70.64731 67.70085 65.39861 63.758645 62.79689 62.52774 62.96348 64.11415 65.98748 68.58936 71.92384 75.99233 80.79393 86.32595 92.58354 99.558846 107.24286 115.62426 124.68913 134.42134 144.80367 155.81668 167.43848 179.64495 192.4115 205.71109 219.51543 233.79384 248.5143 263.64914 279.18308 295.1053 311.39246 328.01166 344.92828 362.10635 379.50906 397.09747 414.8321 432.67328 450.5806 468.51184 486.42532 504.27966 522.0322 539.6388 557.0581 574.24817 591.16675 607.772 624.0235 639.88196 655.3081 670.2633 684.7109 698.61597 711.9448 724.6649 736.7456 748.15815 758.87604 768.87525 778.13306 786.6296 794.3472 801.271 807.3883 812.69416 817.1996 820.92884 823.9018 826.12806 827.61445 828.3701 828.4061 827.7348 826.37 824.32734 821.6238 818.2779 814.3098 809.7402 804.5911 798.8854 792.6467 785.89997 778.67 770.9831 762.8656 754.34424 745.4461 736.198 726.6278 716.76294 706.6305 696.25745 685.67096 674.89777 663.96405 652.89545 641.7178 630.4559 619.13385 607.7752 596.4032 585.0401 573.70765 562.42695 551.2185 540.1017 529.09504 518.2165 507.48257 496.90942 486.51236 476.3061 466.30454 456.52036 446.9657 437.6523 428.5915 419.79373 411.26898 403.02634 395.07437 387.4218 380.07666 373.04645 366.33847 359.9598 353.9172 348.21683 342.86493 337.86777 333.2315 328.96237 325.06595 321.54776 318.41318 315.66794 313.31738 311.3671 309.8221 308.68753 307.9683 307.6691 307.79425 308.34793 309.33398 310.7559 312.61615 314.91727 317.66104 320.84808 324.47876 328.55277 333.06766 338.02042 343.4072 349.2227 355.46017 362.11136 369.16626 376.613 384.43835 392.6269 401.16162 410.01547 419.14233 428.4879 438.0041 447.6486 457.3801 467.157 476.93756 486.68045 496.34534 505.89188 515.2807 524.4733 533.4329 542.12336 550.5107 558.5667 566.267 573.586 580.49714 586.9758 592.99866 598.5445 603.5941 608.1305 612.1387 615.606 618.5226 620.8798 622.67206 623.89606 624.5512 624.6387 624.1617 623.12604 621.5406 619.41626 616.76514 613.60236 609.94446 605.8103 601.22077 596.1987 590.7683 584.9551 578.7863 572.29047 565.4972 558.4377 551.1439 543.64826 535.9832 528.18195 520.2786 512.3075 504.3023 496.2958 488.32043 480.40866 472.59168 464.9002 457.36322 450.00797 442.86078 435.94543 429.28427 422.89822 416.80478 411.01874 405.55386 400.42038 395.6261 391.17563 387.0709 383.31064 379.89075 376.8043 374.0413 371.58847 369.43024 367.5478 365.91965 364.52206 363.32852 362.31058 361.43787 360.67795 359.99673 359.35983 358.73172 358.07565 357.35547 356.53442 355.58267 354.48016 353.2125 351.77014 350.14526 348.3331 346.33087 344.1326 341.73114 339.12814 336.33487 333.36572 330.23694 326.9668 323.57574 320.08487 316.517 312.89517 309.2443 305.58878 301.9537 298.36566 294.84933 291.4293 288.13074 284.97745 281.99323 279.201 276.6221 274.2765 272.18335 270.3609 268.825 267.59036 266.6703 266.07632 265.8187 265.90466 266.34076 267.13135 268.2786 269.7849 271.64868 273.867 276.43622 279.35053 282.60275 286.18347 290.08304 294.2891 298.7884 303.5675 308.6108 313.90146 319.42154 325.15292 331.07593 337.172 343.42026 349.79895 356.28473 362.85437 369.4846 376.15106 382.82938 389.4954 396.12488 402.6941 409.17987 415.5581 421.80493 427.89856 433.81607 439.5361 445.03772 450.30048 455.32703 460.14114 464.75552 469.16846 473.37082 477.35577 481.11484 484.6408 487.9268 490.96713 493.75552 496.28662 498.55454 500.55548 502.2854 503.74036 504.91827 505.81686 506.4337 506.76807 506.81842 506.58637 506.0722 505.2769 504.20367 502.85486 501.23285 499.3428 497.18933 494.77762 492.11432 489.22476 486.13672 482.86517 479.42047 475.8109 472.04538 468.13242 464.08148 459.8998 455.59772 451.18274 446.664 442.05054 437.35178 432.57452 427.7275 422.82098 417.8625 412.86017 407.82425 402.76242 397.68387 392.5956 387.5067 382.42642 377.36325 372.32446 367.3199 362.35724 357.4442 352.58975 347.80267 343.09055 338.46143 333.92407 329.48572 325.15564 320.9409 316.84955 312.88974 309.06842 305.39374 301.8738 298.51492 295.32547 292.31177 289.48935 286.87756 284.4924 282.34885 280.46072 278.84033 277.50003 276.45123 275.70386 275.26727 275.15002 275.35996 275.90323 276.78616 278.01227 279.58566 281.5085 283.78357 286.4106 289.38852 292.71686 296.39294 300.4126 304.77252 309.46634 314.48853 319.83145 325.48816 331.44962 337.70435 344.24353 351.05554 358.1295 365.45142 373.00986 380.79056 388.77658 396.95697 405.31363 413.83295 422.49896 431.29495 440.2018 449.20557 458.28836 467.43414 476.62268 485.83804 495.06293 504.28195 513.4731 522.62256 531.7128 540.72687 549.6798 558.5743 567.3904 576.1109 584.7148 593.1848 601.50147 609.6475 617.6017 625.34736 632.8676 640.14386 647.1592 653.897 660.3412 666.4765 672.288 677.7609 682.8817 687.6373 692.0163 696.007 699.5984 702.7573 705.46515 707.7135 709.4963 710.8078 711.6452 712.0051 711.8855 711.2854 710.2063 708.6491 706.61615 704.11115 701.1386 697.7058 693.8185 689.4862 684.71784 679.5241 673.9161 667.9074 661.51307 654.74555 647.62366 640.16297 632.3814 624.2984 615.93427 607.31025 598.4462 589.3675 580.0971 570.6563 561.07044 551.3654 541.568 531.7007 521.7939 511.86908 501.9581 492.08514 482.27686 472.5604 462.9643 453.51205 444.23102 435.1471 426.28687 417.67166 409.32712 401.27765 393.5446 386.1479 379.11063 372.45 366.1856 360.3321 354.90756 349.92432 345.39633 341.33453 337.74838 334.64432 332.03116 329.91095 328.28848 327.16324 326.53537 326.40198 326.7581 327.5976 328.9121 330.6911 332.92447 335.59583 338.69263 341.79285)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (499.39752 500.9985 502.52948 503.9889 505.37537 506.6877 507.9246 509.08542 510.16888 511.17447 512.10144 512.9492 513.71717 514.40534 515.01337 515.54114 515.9888 516.3561 516.64344 516.8511 516.9795 517.02924 517.0006 516.8945 516.71155 516.4527 516.1188 515.7107 515.22974 514.6768 514.0532 513.36017 512.59906 511.77124 510.87817 509.9213 508.90213 507.82242 506.68372 505.48767 504.23602 502.9307 501.57333 500.16586 498.7102 497.2081 495.66165 494.07288 492.44363 490.77603 489.07214 487.33398 485.56366 483.7633 481.93524 480.0813 478.20383 476.3051 474.3872 472.45242 470.50293 468.54108 466.56897 464.58896 462.60342 460.61453 458.62466 456.636 454.65082 452.67163 450.70056 448.74005 446.7921 444.85938 442.94397 441.04822 439.17438 437.3247 435.50198 433.7099 431.95105 430.22855 428.54492 426.90292 425.3054 423.75497 422.2542 420.80573 419.4121 418.0757 416.79898 415.5842 414.43366 413.3493 412.3334 411.38776 410.5144 409.71487 408.99084 408.3439 407.775 407.28387 406.86874 406.53046 406.27008 406.08896 405.98752 405.96606 406.0258 406.1664 406.38837 406.69128 407.07523 407.53986 408.08444 408.7082 409.4102 410.18924 411.04416 411.97336 412.97498 414.04703 415.18744 416.394 417.66434 418.99558 420.38467 421.82874 423.32474 424.86877 426.4578 428.0881 429.75537 431.45605 433.1861 434.9411 436.71664 438.50864 440.31247 442.1237 443.93784 445.75024 447.55624 449.35147 451.13126 452.8912 454.62695 456.33414 458.0085 459.64584 461.24243 462.79422 464.29767 465.74857 467.13855 468.44897 469.6605 470.7692 471.7716 472.66467 473.44638 474.11533 474.6706 475.11203 475.44046 475.6572 475.7644 475.76498 475.66245 475.46137 475.16672 474.78436 474.32083 473.7833 473.17963 472.5184 471.8088 471.0603 470.28323 469.48846 468.68698 467.8905 467.11063 466.36014 465.6512 464.99664 464.40912 463.90155 463.48712 463.17834 462.9881 462.92883 463.01288 463.25223 463.65833 464.2425 465.0149 465.98572 467.16394 468.5591 470.18207 472.0467 474.16107 476.5201 479.11725 481.9444 484.99246 488.2513 491.71 495.3559 499.17627 503.15747 507.28488 511.54367 515.91816 520.39246 524.9507 529.5763 534.2527 538.96357 543.69214 548.4222 553.1377 557.8227 562.4616 567.03974 571.5422 575.955 580.265 584.45936 588.52607 592.4538 596.23114 599.8468 603.2899 606.55054 609.61994 612.4903 615.1546 617.60694 619.8428 621.85804 623.65027 625.2177 626.5595 627.67597 628.5685 629.23926 629.69135 629.92896 629.95704 629.78156 629.4088 628.8463 628.10236 627.1856 626.1055 624.8721 623.49634 621.989 620.3618 618.62647 616.79566 614.8817 612.89765 610.85645 608.77124 606.6553 604.52186 602.38416 600.2551 598.1481 596.0757 594.0506 592.085 590.19104 588.38007 586.6634 585.05164 583.55506 582.1833 580.94526 579.8495 578.90375 578.1151 577.49006 577.0341 576.75214 576.6483 576.726 576.9877 577.43494 578.0688 578.889 579.8949 581.08484 582.4562 584.0056 585.72876 587.6188 589.66376 591.84736 594.156 596.58094 599.113 601.7424 604.4584 607.24775 610.09217 612.97144 615.86866 618.7687 621.65577 624.5142 627.3284 630.08167 632.75776 635.3405 637.813 640.15876 642.3616 644.40497 646.2725 647.94825 649.4166 650.6626 651.67115 652.42756 652.91785 653.1286 653.04706 652.6608 651.95826 650.9291 649.56324 647.8516 645.7859 643.359 640.56476 637.3979 633.8542 629.9304 625.6248 620.9363 615.8653 610.4135 604.5835 598.37897 591.80506 584.8684 577.57636 569.93775 561.9624 553.66156 545.048 536.13495 526.93714 517.4702 507.7516 497.79886 487.63095 477.268 466.731 456.04123 445.22165 434.29538 423.28635 412.21927 401.11914 390.01187 378.9236 367.88058 356.90958 346.03748 335.291 324.69705 314.28244 304.074 294.09818 284.38086 274.9477 265.8236 257.03305 248.59981 240.54633 232.89192 225.6527 218.84243 212.47394 206.55898 201.10823 196.13132 191.63674 187.63193 184.123 181.11504 178.61186 176.61623 175.1282 174.14112 173.63828 173.60089 174.01758 174.88156 176.18485 177.91838 180.07231 182.63565 185.5966 188.9426 192.66039 196.73583 201.15438 205.90093 210.95975 216.31459 221.94947 227.84746 233.99141 240.36437 246.9489 253.72792 260.68433 267.80093 275.06058 282.44626 289.94125 297.5292 305.19406 312.92032 320.69272 328.49597 336.3156 344.13806 351.94986 359.73807 367.4901 375.19458 382.84048 390.41733 397.915 405.324 412.636 419.84293 426.93723 433.9125 440.76227 447.48074 454.06302 460.5049 466.80212 472.95114 478.9491 484.7935 490.48212 496.01367 501.3864 506.5993 511.6517 516.54316 521.27466 525.8497 530.2723 534.5435 538.6629 542.62946 546.44214 550.1001 553.60224 556.9474 560.13404 563.16065 566.0258 568.7274 571.2633 573.63105 575.82795 577.851 579.6967 581.3616 582.8418 584.13324 585.23114 586.13086 586.82746 587.3154 587.58936 587.64356 587.47187 587.0682 586.42646 585.5402 584.4032 583.00916 581.35206 579.42585 577.22455 574.7425 571.9739 568.9127 565.5552 561.9023 557.95856 553.7302 549.224 544.4476 539.4095 534.11884 528.5857 522.8205 516.8345 510.63925 504.2477 497.6733 490.9295 484.03055 476.99136 469.827 462.55347 455.18668 447.7434 440.24045 432.69473 425.12378 417.54523 409.97678 402.43607 394.94107 387.50992 380.16034 372.91 365.77676 358.77838 351.93222 345.25488 338.76324 332.474 326.403 320.56577 314.97748 309.65283 304.60593 299.85 295.3979 291.26187 287.45313 283.9823 280.85928 278.0932 275.6924 273.66434 272.01538 270.75107 269.8763 269.39508 269.31006 269.62323 270.3358 271.4477 272.9579 274.86456 277.16483 279.85486 282.93015 286.3849 290.2124 294.40527 298.9553 303.85303 309.08807 314.6498 320.5266 326.70572 333.17404 339.91748 346.92123 354.17007 361.64822 369.33933 377.22653 385.29196 393.51767 401.88574 410.37744 418.9737 427.65527 436.403 445.197 454.01743 462.8449 471.65967 480.4416 489.17102 497.8285 506.39493 514.85096 523.17737 531.3558 539.36585 547.1846 554.7898 562.16425 569.29407 576.16694 582.771 589.0952 595.1294 600.86396 606.2906 611.40235 616.19275 620.656 624.7871 628.582 632.03626 635.14624 637.9106 640.32917 642.4027 644.1329 645.5227 646.5756 647.29615 647.6891 647.76026 647.5159 646.9628 646.1089 644.9625 643.53266 641.8285 639.86 637.6374 635.1716 632.47376 629.55555 626.429 623.1062 619.59986 615.92267 612.08777 608.1081 603.9973 599.76844 595.4351 591.0112 586.5101 581.9454 577.3305 572.67896 568.0042 563.31977 558.6386 553.9734 549.3368 544.7419 540.20057 535.72486 531.32654 527.0168 522.80665 518.70704 514.7278 510.87912 507.17035 503.61044 500.20782 496.97076 493.90683 491.02255 488.32495 485.82 483.51303 481.40878 479.5115 477.8248 476.35193 475.09506 474.05624 473.2366 472.63678 472.25626 472.0945 472.15048 472.42203 472.9062 473.59964 474.4981 475.5971 476.89136 478.3685 480.00333 481.77103 483.65677 485.65192 487.74786 489.93604 492.2084 494.55383 496.9598 499.41782 501.92365 504.47342 507.0646 509.6939 512.358 515.0546 517.7815 520.53547 523.3145 526.1165 528.9394 531.781 534.63886 537.51136 540.3969 543.2932 546.19837 549.11127 552.02955 554.95124 557.87525 560.7988 563.7197 566.6365 569.54664 572.4479 575.3381 578.21454 581.0746 583.9152 586.73334 589.5262 592.2906 595.02265 597.7185 600.37446 602.9867 605.55054 608.0615 610.51465 612.90546 615.2295 617.481 619.654 621.7433 623.74347 625.6485 627.4521 629.14814 630.7307 632.1936 633.5298 634.7325 635.7953 636.7124 637.4773 638.0833 638.5233 638.7911 638.88086 638.78614 638.5011 638.02015 637.3371 636.44654 635.34424 634.016 632.4428 630.60956 628.5076 626.1322 623.47797 620.5399 617.3149 613.8004 609.9929 605.8903 601.4924 596.79865 591.8092 586.5251 580.9485 575.0817 568.9286 562.4931 555.78046 548.79755 541.55 534.04615 526.29444 518.30457 510.08688 501.65244 493.01227 484.18033 475.1694 465.99414 456.68988 447.29572 437.83762 428.33725 418.8125 409.282 399.76205 390.2711 380.8252 371.43997 362.13013 352.91083 343.7958 334.79788 325.92905 317.2007 308.62518 300.21246 291.971 283.91034 276.0386 268.363 260.8918 253.62993 246.58319 239.75754 233.15677 226.78508 220.646 214.74338 209.07863 203.65451 198.47171 193.53215 188.83683 184.38639 180.18045 176.21939 172.50316 169.03047 165.80008 162.811 160.06244 157.55272 155.27996 153.24242 151.44602 149.89568 148.58957 147.52266 146.68967 146.0848 145.70287 145.53775 145.58293 145.83261 146.28134 146.92223 147.74922 148.75637 149.93669 151.28408 152.79294 154.45616 156.26699 158.22026 160.30988 162.52913 164.87216 167.33255 169.90363 172.58119 175.35855 178.23055 181.19034 184.23374 187.35425 190.54721 193.80677 197.1288 200.50746 203.9382 207.41562 210.93492 214.49167 218.08196 221.70174 225.34609 229.00955 232.68964 236.3828 240.08437 243.78946 247.4963 251.20064 254.90018 258.58966 262.2669 265.92886 269.5723 273.2362 276.93765 280.67746 284.4533 288.2624 292.10324 295.9736 299.87097 303.7934 307.7382 311.7041 315.68845 319.68954 323.70477 327.7324 331.77042 335.8182 339.8711 343.9292 347.99027 352.05228 356.11398 360.17252 364.24576 368.34375 372.46475 376.60757 380.7721 384.95648 389.16028 393.3799 397.61527 401.86588 406.12943 410.40543 414.68976 418.98343 423.28427 427.59116 431.90006 436.21143 440.52408 444.8355 449.1418 453.4428 457.73813 462.02423 466.29886 470.5613 474.80728 479.03848 483.24936 487.4398 491.60547 495.74628 499.8599 503.94318 507.99344 512.0095 515.9892 519.92884 523.8271 527.68055 531.48835 535.2468 538.95405 542.60706 546.20417 549.74225 553.2184 556.63086 559.9773 563.255 566.4605 569.59205 572.6478 575.62446 578.51996 581.3312 584.0565 586.69214 589.23737 591.68934 594.0444 596.3034 598.4604 600.5154 602.46607 604.3094 606.0443 607.66877 609.1798 610.5771 611.85785 613.021 614.0647 614.98645 615.7862 616.4629 617.13874)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (319.04022 315.14478 311.42166 307.8835 304.5424 301.40945 298.49527 295.80942 293.36066 291.15674 289.20456 287.50995 286.07797 284.91232 284.016 283.39084 283.0376 282.95612 283.14523 283.60272 284.32565 285.30985 286.5505 288.0418 289.77713 291.74936 293.95047 296.37186 299.0042 301.838 304.863 308.0686 311.44418 314.97855 318.66052 322.47888 326.42224 330.47928 334.63892 338.8902 343.2225 347.62543 352.08896 356.60355 361.16022 365.75052 370.36652 375.0009 379.64716 384.29926 388.95206 393.60126 398.24286 402.8741 407.4929 412.0975 416.6874 421.2625 425.82355 430.37183 434.90945 439.43866 443.96274 448.48523 453.01004 457.54147 462.08423 466.6429 471.22293 475.8289 480.46606 485.13947 489.8539 494.61392 499.42386 504.28748 509.20822 514.18897 519.23206 524.3392 529.511 534.74744 540.0477 545.4099 550.83094 556.30726 561.8336 567.4041 573.01166 578.6482 584.30426 589.9697 595.6329 601.28144 606.9019 612.47974 617.9997 623.4455 628.8 634.0454 639.1632 644.13257 648.93116 653.5392 657.93726 662.1055 666.0242 669.67347 673.0341 676.08674 678.8124 681.1932 683.21137 684.8503 686.09394 686.9277 687.33765 687.3115 686.83814 685.90784 684.5126 682.6457 680.30256 677.48017 674.17707 670.3941 666.134 661.4012 656.2023 650.54584 644.4424 637.9046 630.9471 623.586 615.8401 607.72925 599.2758 590.50324 581.437 572.1039 562.53235 552.75184 542.79297 532.6877 522.46875 512.1696 501.82416 491.4672 481.13342 470.85767 460.67484 450.61957 440.7263 431.02924 421.5667 412.38544 403.52972 395.0257 386.8977 379.16733 371.854 364.97504 358.54538 352.57706 347.08026 342.0625 337.52866 333.48148 329.92126 326.8462 324.25174 322.13147 320.47662 319.27655 318.51865 318.1883 318.26904 318.743 319.59048 320.79068 322.32126 324.15863 326.27823 328.65475 331.26212 334.0731 337.06055 340.19675 343.4537 346.80365 350.21857 353.67062 357.13254 360.57773 363.97974 367.31332 370.55408 373.6783 376.66373 379.48932 382.13522 384.58292 386.81616 388.8213 390.58637 392.10144 393.35834 394.3509 395.07495 395.52814 395.71045 395.62347 395.27087 394.65842 393.7935 392.68555 391.34567 389.7867 388.0233 386.07135 383.94858 381.67395 379.2675 376.75058 374.14557 371.47583 368.76532 366.0388 363.32138 360.63886 358.0181 355.49078 353.0917 350.85034 348.79044 346.9351 345.30655 343.92667 342.81595 341.99387 341.4791 341.28854 341.43777 341.94095 342.8106 344.05756 345.6907 347.71716 350.14215 352.96875 356.1984 359.8301 363.86078 368.28546 373.0972 378.2867 383.84265 389.75195 395.99933 402.56784 409.43854 416.5907 424.00214 431.64896 439.50595 447.5465 455.7428 464.06598 472.4866 480.974 489.4972 498.02454 506.52423 514.9643 523.313 531.5387 539.61017 547.4967 555.16834 562.5962 569.75196 576.6091 583.142 589.32685 595.1414 600.56507 605.5792 610.16736 614.3146 618.0089 621.23987 623.99976 626.2831 628.0869 629.41047 630.2557 630.62665 630.53 629.9749 628.9722 627.53455 625.6769 623.41785 620.7795 617.7857 614.4624 610.8371 606.9393 602.8015 598.4581 593.94294 589.29017 584.5347 579.71174 574.85675 570.00507 565.1919 560.4521 555.81995 551.3285 547.0102 542.896 539.0155 535.39655 532.06525 529.0457 526.3597 524.0269 522.0644 520.48664 519.30555 518.5302 518.1666 518.218 518.68464 519.56354 520.84894 522.53174 524.60016 527.0391 529.8308 532.9544 536.38654 540.101 544.0693 548.2604 552.64106 557.176 561.8284 566.5597 571.3295 576.09675 580.8194 585.4547 589.9597 594.2908 598.4048 602.259 605.8115 609.02137 611.84845 614.2549 616.20417 617.66187 618.59595 618.97706 618.7786 617.9772 616.5524 614.4874 611.76917 608.38807 604.33887 599.62006 594.23426 588.18824 581.49335 574.1646 566.2217 557.68824 548.5921 538.96515 528.843 518.2675 507.29404 495.9917 484.4269 472.65607 460.73364 448.71478 436.65533 424.61087 412.6369 400.7883 389.11893 377.68137 366.52667 355.704 345.26074 335.24142 325.6875 316.63632 308.12155 300.17285 292.81607 286.07336 279.9624 274.49725 269.68793 265.5405 262.05728 259.23673 257.0733 255.55815 254.67888 254.4197 254.7618 255.68349 257.16016 259.16483 261.66806 264.63843 268.04257 271.8455 276.0109 280.50125 285.27835 290.30353 295.5375 300.94046 306.47293 312.0959 317.77094 323.46017 329.12653 334.73428 340.24887 345.63715 350.86758 355.91055 360.73816 365.3244 369.64536 373.67926 377.40662 380.81052 383.87564 386.58957 388.942 390.9251 392.53314 393.76297 394.61353 395.08597 395.18372 394.91217 394.27884 393.29306 391.96606 390.3107 388.34177 386.0757 383.52997 380.72275 377.67297 374.40088 370.92737 367.27432 363.4643 359.52042 355.46652 351.32663 347.1252 342.8866 338.63513 334.3953 330.19165 326.04794 321.98755 318.03345 314.20825 310.53363 307.03043 303.71887 300.61838 297.747 295.12186 292.75894 290.67355 288.87933 287.3887 286.2132 285.36273 284.84607 284.67072 284.84265 285.36673 286.2464 287.48456 289.08463 291.0498 293.38132 296.07755 299.13467 302.548 306.31198 310.41965 314.86264 319.63205 324.71835 330.11044 335.79672 341.7649 348.00143 354.4927 361.22437 368.18115 375.34756 382.70758 390.24493 397.94305 405.78494 413.7532 421.8308 430.00012 438.2436 446.5441 454.88416 463.24637 471.61362 479.96915 488.296 496.57785 504.7987 512.9427 520.9946 528.93976 536.7634 544.4515 551.9905 559.3676 566.5707 573.5876 580.40754 587.02015 593.4157 599.58484 605.51905 611.2106 616.6522 621.8374 626.7605 631.4162 635.8001 639.9083 643.73774 647.28577 650.5508 653.5314 656.22706 658.6376 660.76374 662.6067 664.1682 665.4504 666.4563 667.189 667.65235 667.85065 667.78876 667.4717 666.90485 666.09436 665.04645 663.7676 662.2646 660.545 658.6162 656.48566 654.1615 651.6518 648.9646 646.10877 643.0924 639.9244 636.6135 633.16834 629.59784 625.9107 622.11597 618.2222 614.23804 610.17255 606.0341 601.8313 597.5722 593.2651 588.9182 584.5378 580.128 575.69385 571.24335 566.7861 562.332 557.8905 553.47107 549.0828 544.7347 540.4352 536.1926 532.0151 527.91047 523.88575 519.9468 516.09467 512.32764 508.64798 505.06146 501.57465 498.19397 494.9255 491.77502 488.74768 485.84863 483.08264 480.45392 477.96628 475.62323 473.42734 471.38116 469.48657 467.74484 466.15662 464.72217 463.44083 462.31143 461.33212 460.50046 459.81342 459.26727 458.85727 458.5786 458.4252 458.3908 458.46832 458.6496 458.92664 459.2905 459.7314 460.23962 460.80447 461.415 462.05994 462.72766 463.40622 464.08316 464.74683 465.38486 465.9844 466.5334 467.0196 467.43137 467.7574 467.98654 468.10825 468.11237 467.98984 467.73248 467.33264 466.78363 466.08017 465.21805 464.19394 463.00577 461.65326 460.13727 458.46033 456.626 454.6397 452.5082 450.23987 447.84436 445.33328 442.71948 440.01724 437.2421 434.4107 431.5411 428.65234 425.76474 422.90204 420.09354 417.3663 414.74023 412.2311 409.85297 407.61844 405.53888 403.62103 401.86768 400.28232 398.86972 397.63443 396.5793 395.70633 395.01584 394.5067 394.177 394.0232 394.04074 394.2245 394.568 395.0643 395.70526 396.48248 397.38666 398.40796 399.53668 400.76273 402.0755 403.4642 404.91818 406.4269 407.97992 409.5667 411.17676 412.80063 414.42856 416.05164 417.66074 419.24762 420.80472 422.3245 423.80005 425.2253 426.5945 427.90292 429.1455 430.31833 431.41812 432.4424 433.38855 434.255 435.04028 435.7438 436.3658 436.90616 437.36584 437.74588 438.04803 438.27414 438.4267 438.50815 438.52145 438.4702 438.3575 438.18726 437.96344 437.69003 437.37155 437.0121 436.61624 436.1883 435.73312 435.2557 434.7604 434.25198 433.7373 433.22336 432.71423 432.21106 431.71478 431.2262 430.74606 430.2756 429.81564 429.36737 428.9317 428.5099 428.10297 427.71225 427.339 426.98474 426.65106 426.339 426.05038 425.78668 425.5497 425.34103 425.1623 425.01566 424.90274 424.82535 424.7853 424.7848 424.82553 424.90985 425.03964 425.2145 425.4347 425.70166 426.01758 426.38458 426.80527 427.28235 427.81772 428.4135 429.07217 429.7961 430.58743 431.44788 432.37958 433.38474 434.46472 435.62094 436.8556 438.16995 439.5651 441.04218 442.60208 444.2458 445.97354 447.7861 449.68335 451.66568 453.73267 455.88403 458.1185 460.4356 462.83417 465.31253 467.86917 470.50238 473.2096 475.98837 478.83585 481.7495 484.72595 487.76184 490.85275 493.9949 497.18427 500.41632 503.68573 506.98816 510.31888 513.6718 517.0402 520.4187 523.8015 527.18305 530.5558 533.9151 537.2547 540.56934 543.85297 547.1002 550.30555 553.4639 556.56995 559.6187 562.6062 565.52704 568.37714 571.1518 573.8475 576.4603 578.9862 581.4218 583.76435 586.0101 588.15644 590.20075 592.1405 593.97364 595.6973 597.3106 598.8111 600.19776 601.4689 602.62336 603.66016 604.57874 605.37824 606.05787 606.61786 607.05744 607.377 607.57654 607.6561 607.6161 607.45704 607.17957 606.7846 606.2724 605.64417 604.90094 604.04377 603.07465 601.9943 600.8043 599.50495 598.0978 596.58356 594.96326 593.238 591.4094 589.47846 587.4461 585.3143 583.08417 580.7569 578.3342 575.8177 573.2085 570.50837 567.7189 564.8421 561.8789 558.8316 555.70136 552.48066 549.166 545.75916 542.2622 538.6781 535.0075 531.25354 527.41925 523.5072 519.5192 515.4586 511.32806 507.13113 502.86972 498.54788 494.16812 489.73468 485.2492 480.7166 476.13937 471.52234 466.86746 462.17947 457.46088 452.71722 447.95062 443.1657 438.36627 433.5559 428.73895 423.91977 419.10187 414.28925 409.48587 404.69635 399.9254 395.17496 390.451 385.7561 381.09656 376.47476 371.89548 367.36163 362.8797 358.4518 354.08258 349.77527 345.5363 341.36615 337.2714 333.25412 329.31998 325.47092 321.71194 318.0459 314.47723 311.00836 307.64325 304.38507 301.23837 298.20428 295.28714 292.48993 289.81558 287.2666 284.8459 282.55627 280.40042 278.38025 276.4989 274.75818 273.15994 271.70593 270.39902 269.24033 268.2312 267.223)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (493.52756 493.05597 492.12717 490.77002 489.01553 486.8973 484.45044 481.71234 478.72165 475.51816 472.14285 468.6373 465.04382 461.40475 457.76242 454.15897 450.63577 447.2334 443.99124 440.9477 438.13898 435.59973 433.36252 431.45773 429.9129 428.75327 428.0009 427.67505 427.79184 428.36423 429.40164 430.9101 432.89243 435.34766 438.2718 441.65674 445.49176 449.76215 454.45007 459.5349 464.99255 470.79642 476.9169 483.32224 489.97806 496.8483 503.89478 511.07767 518.35627 525.6886 533.0319 540.3431 547.5787 554.69587 561.652 568.4052 574.91456 581.14075 587.04584 592.5943 597.7523 602.48865 606.77485 610.5853 613.8975 616.6923 618.9539 620.67035 621.8331 622.43757 622.48304 621.97284 620.91394 619.3174 617.198 614.57477 611.4697 607.91004 603.93177 599.5831 594.89966 589.91974 584.6841 579.23505 573.6176 567.87775 562.0623 556.21955 550.39777 544.64515 539.0099 533.53937 528.27967 523.2759 518.5708 514.2049 510.21658 506.6412 503.51083 500.85385 498.694 497.0471 495.91748 495.3148 495.24503 495.7098 496.70593 498.22647 500.2594 502.78885 505.79395 509.25027 513.1285 517.3956 522.01496 526.9458 532.1442 537.56305 543.15217 548.8592 554.6287 560.4044 566.12787 571.73945 577.17957 582.3874 587.3028 591.8661 596.01844 599.7027 602.8634 605.4473 607.40455 608.6874 609.25245 609.0601 608.0748 606.26587 603.6075 600.079 595.6656 590.3576 584.152 577.0514 569.06464 560.207 550.4998 539.9711 528.65485 516.5915 503.82745 490.41473 476.4115 461.88232 446.9046 431.58038 416.02307 400.32706 384.588 368.90216 353.3656 338.07346 323.11957 308.5951 294.58856 281.1854 268.46655 256.50888 245.38372 235.15721 225.89002 217.63591 210.44248 204.35051 199.39374 195.59818 192.98337 191.56087 191.33513 192.30301 194.45377 197.77039 202.22776 207.7941 214.43135 222.09508 230.73444 240.29334 250.7103 261.9186 273.8476 286.42246 299.56464 313.19287 327.22394 341.57202 356.15015 370.8708 385.64594 400.38745 415.00613 429.41126 443.5184 457.25583 470.55515 483.35153 495.58438 507.1975 518.13916 528.3628 537.8264 546.49384 554.3342 561.3221 567.438 572.66797 577.00385 580.4433 582.98926 584.6506 585.44147 585.3815 584.49506 582.81177 580.36554 577.1948 573.3417 568.85267 563.7772 558.1681 552.08796 545.6248 538.8897 531.9732 524.9371 517.8435 510.75357 503.72733 496.82437 490.103 483.61804 477.42285 471.56732 466.09854 461.06085 456.49396 452.43366 448.9118 445.95566 443.58792 441.82657 440.6845 440.16965 440.28506 441.02838 442.3925 444.36527 446.9295 450.06335 453.7404 457.92938 462.5951 467.69824 473.19592 479.04163 485.1857 491.5762 498.15823 504.87518 511.66864 518.4791 525.2467 531.9103 538.40955 544.6844 550.6759 556.32654 561.58014 566.38294 570.68384 574.43494 577.59144 580.1125 581.9604 583.10267 583.51117 583.1625 582.03815 580.12464 577.41394 573.9037 569.5965 564.5007 558.6301 552.0041 544.6469 536.58875 527.8645 518.5141 508.58646 498.14722 487.27536 476.0439 464.51404 452.74844 440.8104 428.76297 416.66852 404.58664 392.57504 380.69333 369.0016 357.55756 346.41785 335.6369 325.26727 315.35898 305.95956 297.11417 288.8652 281.25287 274.3139 268.08218 262.58936 257.86325 253.92903 250.8095 248.5239 247.08834 246.51624 246.81797 248.00104 250.07004 253.02637 256.86868 261.5928 267.1919 273.65598 280.97247 289.126 298.09836 307.86893 318.41437 329.7084 341.7223 354.42468 367.78192 381.75793 396.31393 411.4086 426.9988 443.0386 459.48007 476.273 493.36545 510.70355 528.2309 545.88965 563.6203 581.3619 599.0522 616.62775 634.02375 651.1746 668.01447 684.47687 700.49476 716.0016 730.93085 745.21686 758.7947 771.601 783.5737 794.6525 804.77967 813.9001 821.96155 828.9152 834.71644 839.3245 842.70337 844.8219 845.65455 845.18067 843.38477 840.2619 835.82587 830.10675 823.14374 814.98304 805.6773 795.28595 783.87415 771.51264 758.2768 744.2466 729.50574 714.141 698.2422 681.9012 665.2109 648.2616 631.14045 613.9319 596.7192 579.58374 562.6048 545.85846 529.4179 513.35297 497.72934 482.60858 468.04782 454.09995 440.8128 428.22943 416.38757 405.32007 395.05472 385.61414 377.01553 369.27115 362.3883 356.36963 351.21317 346.912 343.45486 340.82654 339.00772 337.9755 337.70358 338.1626 339.32025 341.14142 343.58856 346.62262 350.20255 354.28592 358.829 363.78748 369.11627 374.76984 380.70288 386.87048 393.2279 399.7315 406.33777 413.00497 419.69296 426.3629 432.9769 439.49948 445.89755 452.13974 458.1964 464.04095 469.6486 474.99707 480.06686 484.84042 489.30652 493.467 497.3279 500.88593 504.13202 507.0587 509.66006 511.9313 513.8694 515.47327 516.74317 517.68036 518.28785 518.5702 518.53296 518.1834 517.53 516.5818 515.349 513.84357 512.0777 510.06464 507.81848 505.3542 502.68707 499.833 496.80866 493.6309 490.3168 486.88416 483.35034 479.73312 476.05005 472.3189 468.55722 464.78235 461.01126 457.26035 453.54593 449.8843 446.29092 442.77927 439.3608 436.04633 432.84625 429.77026 426.8272 424.02557 421.37317 418.87695 416.54303 414.3772 412.38483 410.57047 408.93777 407.4897 406.2287 405.15683 404.27518 403.58463 403.08533 402.77658 402.65747 402.72586 402.97934 403.41525 404.0302 404.82004 405.78043 406.90637 408.19205 409.6313 411.2179 412.94473 414.80426 416.78867 418.88965 421.09848 423.40576 425.80203 428.2773 430.82117 433.4227 436.07092 438.75446 441.46176 444.18124 446.9008 449.60806 452.29047 454.93585 457.53192 460.06607 462.52557 464.89822 467.1718 469.334 471.37262 473.27615 475.03317 476.63257 478.06348 479.3158 480.37967 481.24594 481.90628 482.35245 482.57706 482.57397 482.33774 481.8635 481.14734 480.18616 478.97867 477.52414 475.82266 473.8757 471.6859 469.257 466.59393 463.70334 460.59283 457.27084 453.7472 450.03345 446.1424 442.08734 437.8828 433.5447 429.09042 424.53815 419.90692 415.2164 410.48734 405.7411 400.99985 396.28653 391.62396 387.0407 382.57312 378.25348 374.10236 370.13245 366.35477 362.77948 359.41498 356.2685 353.3465 350.65466 348.1976 345.97836 343.99973 342.2636 340.76904 339.50616 338.45856 337.6136 336.96426 336.50555 336.23227 336.13992 336.22504 336.48496 336.91708 337.52023 338.29407 339.23868 340.35562 341.64838 343.12116 344.77792 346.62485 348.66907 350.91885 353.38376 356.07333 358.9983 362.17017 365.6017 369.30545 373.29404 377.58084 382.17908 387.1022 392.3628 397.97308 403.94507 410.28925 417.01535 424.13196 431.64554 439.561 447.88193 456.6094 465.742 475.27673 485.20657 495.52283 506.2138 517.2638 528.6549 540.36554 552.37195 564.6453 577.15467 589.8654 602.73975 615.73737 628.8143 641.924 655.0173 668.0417 680.9437 693.6679 706.15705 718.3525 730.19446 741.6231 752.5788 763.0022 772.8346 782.01844 790.4984 798.2213 805.13764 811.20044 816.3669 820.5983 823.86127 826.1273 827.37256 827.5841 826.76777 824.9453 822.1474 818.4105 813.776 808.2892 801.98664 794.897 787.0576 778.5181 769.33344 759.56006 749.25605 738.4806 727.2916 715.7475 703.9049 691.82074 679.55054 667.1483 654.6653 642.1517 629.6545 617.2192 604.8885 592.7017 580.6967 568.9077 557.36676 546.1031 535.14234 524.50837 514.2228 504.30325 494.76575 485.62442 476.89047 468.57285 460.67892 453.2139 446.18103 439.58246 433.41858 427.6881 422.38892 417.51767 413.07016 409.04114 405.42484 402.2146 399.40295 396.9826 394.9455 393.2836 391.9886 391.0517 390.4642 390.2183 390.30454 390.7148 391.44064 392.47376 393.80576 395.42883 397.33453 399.51605 401.96567 404.67526 407.63803 410.8468 414.29422 417.974 421.8783 426.00067 430.33347 434.8825 439.66098 444.6713 449.9047 455.34848 460.98904 466.8119 472.80188 478.94254 485.2187 491.61255 498.10672 504.68277 511.32117 518.0035 524.7098 531.42084 538.11554 544.7733 551.3735 557.8948 564.31635 570.6166 576.7747 582.7689 588.579 594.18476 599.56434 604.6976 609.56556 614.1486 618.4003 622.2766 625.7519 628.8129 631.449 633.6512 635.41236 636.72706 637.5918 638.0049 637.96607 637.4764 636.5399 635.1604 633.3452 631.10206 628.4409 625.3723 621.9089 618.065 613.85547 609.29706 604.40717 599.20514 593.71106 587.94495 581.9292 575.6859 569.2398 562.6137 555.8316 548.9187 541.90094 534.8036 527.6523 520.47327 513.292 506.13406 499.0253 491.9903 485.05396 478.24088 471.57404 465.07663 458.7713 452.67838 446.81775 441.20276 435.8455 430.7561 425.94223 421.41248 417.17325 413.23105 409.5908 406.2556 403.22995 400.51453 398.11197 396.022 394.24457 392.77936 391.62354 390.77576 390.2318 389.9881 390.04114 390.38535 391.0148 391.9238 393.10635 394.5551 396.2624 398.22177 400.42282 402.85886 405.52063 408.39917 411.48465 414.76913 418.2416 421.89233 425.71155 429.68863 433.81348 438.07678 442.46637 446.97433 451.58765 456.29755 461.09247 465.963 470.89734 475.88705 480.92126 485.98914 491.082 496.18857 501.29974 506.40552 511.47907 516.50354 521.4697 526.3715 531.1989 535.94605 540.60645 545.1719 549.6343 553.9878 558.22455 562.3366 566.3167 570.159 573.85395 577.3971 580.7791 583.9924 587.0319 589.88764 592.5549 595.0255 597.29267 599.3348 601.13697 602.6861 603.9735 604.9886 605.7207 606.1619 606.3023 606.1334 605.64655 604.8345 603.6887 602.2044 600.3738 598.1916 595.6526 592.7533 589.4885 585.8561 581.8529 577.4802 572.73377 567.61567 562.12586 556.2674 550.0421 543.4534 536.50654 529.2063 521.5604 513.5757 505.26126 496.62393 487.67725 478.43063 468.89835 459.09042 449.0244 438.71375 428.17682 417.4275 406.48517 395.36884 384.10083 372.6962 361.179 349.5714 337.89676 326.17563 314.43393 302.6945 290.985 279.32666 267.74606 256.27 244.92455 233.73268 222.72316 211.91945 201.35169 191.0403 181.01233 171.29282 161.90647 152.87532 144.224 135.97345 128.14531 120.76077 113.83877 107.39903 101.45635 96.027565 91.12729 86.76968 82.96453 79.16272)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (136.72769 141.45835 146.60497 152.16944 158.15343 164.55779 171.38152 178.62363 186.28145 194.3513 202.82822 211.70688 220.98036 230.64061 240.67842 251.08402 261.8462 272.9522 284.38904 296.14233 308.1965 320.53506 333.1408 345.99512 359.07892 372.37177 385.85284 399.50024 413.29163 427.2034 441.21194 455.2924 469.4199 483.56885 497.7132 511.827 525.8833 539.8552 553.7161 567.4387 580.99604 594.3612 607.5072 620.4078 633.0366 645.3675 657.3753 669.0353 680.3228 691.21454 701.6878 711.72046 721.29157 730.38105 738.97004 747.04065 754.576 761.56116 767.9816 773.82477 779.0796 783.7356 787.7849 791.2206 794.0374 796.23175 797.8018 798.747 799.0689 798.7703 797.856 796.33246 794.20765 791.4911 788.1947 784.3308 779.9147 774.96186 769.4903 763.5191 757.0696 750.1636 742.8244 735.0771 726.9471 718.46106 709.6468 700.53345 691.1494 681.5252 671.6913 661.6785 651.51807 641.2416 630.88086 620.468 610.03394 599.61017 589.2281 578.9177 568.70954 558.6329 548.7164 538.9878 529.474 520.20087 511.19305 502.47385 494.06567 485.98843 478.2618 470.9031 463.92865 457.35214 451.18643 445.44254 440.12918 435.2532 430.82034 426.83398 423.2959 420.20554 417.5609 415.35852 413.59216 412.25528 411.33838 410.83118 410.7217 410.99622 411.63983 412.6365 413.96887 415.61844 417.56607 419.79135 422.2734 424.9907 427.92102 431.04218 434.3315 437.7662 441.3236 444.9814 448.71722 452.50925 456.33646 460.17792 464.014 467.82602 471.59573 475.3064 478.9423 482.48746 485.9183 489.19196 492.2637 495.11945 497.74823 500.14117 502.29318 504.20126 505.86566 507.2886 508.47525 509.43344 510.17285 510.70563 511.04584 511.20947 511.21445 511.07962 510.82517 510.4727 510.0442 509.5626 509.051 508.53278 508.0311 507.56845 507.16733 506.84882 506.63345 506.54007 506.58637 506.78848 507.16046 507.71433 508.4601 509.40524 510.55542 511.91327 513.479 515.25007 517.2217 519.3861 521.7331 524.24946 526.92 529.72644 532.64466 535.6411 538.6797 541.7335 544.7754 547.77857 550.7165 553.5631 556.2936 558.88337 561.3098 563.5516 565.5882 567.40186 568.97596 570.296 571.349 572.1245 572.61475 572.8128 572.7145 572.3176 571.62256 570.6311 569.3476 567.77826 565.9309 563.8152 561.4429 558.82715 555.98114 552.9169 549.64307 546.17145 542.51844 538.70136 534.7383 530.64814 526.45 522.16437 517.81134 513.41114 508.98404 504.5505 500.1307 495.74466 491.41183 487.15094 482.98087 478.9191 474.98248 471.18622 467.54532 464.074 460.78598 457.6935 454.80832 452.14084 449.69995 447.4943 445.5306 443.8151 442.3526 441.1466 440.19995 439.51413 439.08963 438.92584 439.02112 439.37293 439.97794 440.83185 441.92932 443.26444 444.8302 446.6192 448.62323 450.83337 453.24033 455.8343 458.60498 461.54138 464.63232 467.86633 471.23178 474.71668 478.30856 481.99542 485.7649 489.60446 493.50165 497.4443 501.41986 505.41614 509.42123 513.42316 517.41034 521.37146 525.2955 529.1738 533.00397 536.7886 540.52564 544.20716 547.8247 551.3699 554.83387 558.20264 561.4527 564.5594 567.51056 570.29926 572.92 575.3672 577.63605 579.7217 581.61994 583.32715 584.84064 586.15754 587.2757 588.1939 588.91095 589.4264 589.7404 589.8537 589.7677 589.48426 589.0057 588.3351 587.4759 586.4324 585.2092 583.8117 582.24567 580.51716 578.63306 576.60065 574.42786 572.1227 569.6937 567.1498 564.5003 561.75507 558.92365 556.01655 553.04395 550.01636 546.9447 543.8395 540.71137 537.5713 534.43 531.298 528.18555 525.10297 522.06025 519.0667 516.1316 513.2637 510.47122 507.76157 505.14206 502.6194 500.19885 497.88513 495.68268 493.5945 491.62308 489.77 488.03543 486.41882 484.91858 483.5321 482.25552 481.0841 480.01187 479.0319 478.1362 477.31583 476.56043 475.85895 475.19934 474.56604 473.9326 473.26236 472.5275 471.7147 470.81418 469.81757 468.71765 467.50793 466.18283 464.73785 463.1694 461.47467 459.6518 457.6998 455.618 453.40283 451.04544 448.53793 445.87985 443.07504 440.12875 437.04678 433.83563 430.50275 427.0561 423.5043 419.85666 416.1229 412.31348 408.4392 404.51126 400.54102 396.5405 392.5217 388.4968 384.4782 380.4785 376.51025 372.58597 368.71802 364.9189 361.20096 357.57596 354.05554 350.65125 347.37415 344.23502 341.24414 338.41116 335.74524 333.255 330.9489 328.8343 326.91763 325.20526 323.70236 322.41327 321.3418 320.49097 319.86322 319.4596 319.27994 319.3241 319.5911 320.07834 320.78293 321.70078 322.82636 324.15387 325.6771 327.38858 329.28027 331.343 333.56686 335.94162 338.4561 341.09818 343.85327 346.70645 349.6457 352.66064 355.74097 358.87592 362.05478 365.26715 368.5027 371.75095 375.00208 378.24652 381.4754 384.68045 387.85394 390.98846 394.07797 397.11758 400.10324 403.03186 405.90167 408.71213 411.46414 414.1601 416.80353 419.39966 421.95532 424.47894 426.98022 429.47052 431.96262 434.47107 437.01184 439.6021 442.26053 445.00662 447.86102 450.8466 453.98953 457.31708 460.8531 464.61752 468.62927 472.906 477.46375 482.3173 487.48026 492.96494 498.7816 504.9385 511.44232 518.2973 525.5055 533.0672 540.9801 549.2397 557.83875 566.7679 576.0155 585.5677 595.4079 605.5171 615.874 626.4557 637.2368 648.19 659.28547 670.49256 681.7789 693.1102 704.4509 715.76404 727.0124 738.1578 749.161 759.98237 770.5825 780.9219 790.9603 800.6589 809.9796 818.88495 827.338 835.3033 842.74744 849.6381 855.94434 861.63764 866.69147 871.08155 874.78577 877.7844 880.0608 881.60047 882.3919 882.42695 881.6995 880.2069 877.94904 874.9292 871.1534 866.6304 861.37214 855.3935 848.71186 841.3474 833.3225 824.6623 815.3946 805.5491 795.1575 784.2532 772.87146 761.0496 748.8257 736.2393 723.331 710.1418 696.7133 683.08765 669.3074 655.4151 641.45246 627.4609 613.4811 599.5534 585.71705 572.0093 558.46686 545.1246 532.01514 519.1699 506.61798 494.3865 482.5002 470.98154 459.8506 449.12476 438.818 428.94016 419.49753 410.49377 401.9302 393.80545 386.11575 378.85486 372.0143 365.58368 359.55075 353.9012 348.61908 343.68658 339.08133 334.76633 330.69626 326.8353 323.15732 319.63876 316.25656 312.98758 309.8083 306.69595 303.62866 300.585 297.54428 294.48764 291.39667 288.25412 285.0445 281.75314 278.368 274.87836 271.27466 267.54923 263.69666 259.7133 255.59755 251.34946 246.9711 242.46623 237.84069 233.10251 228.2612 223.32802 218.31623 213.24039 208.11676 202.96326 197.79915 192.64496 187.5222 182.45337 177.46213 172.57282 167.81066 163.20134 158.77059 154.54445 150.5489 146.8104 143.3547 140.20725 137.3926 134.9353 132.85848 131.18419 129.93354 129.12667 128.7818 128.9154 129.54247 130.67607 132.32764 134.5064 137.21945 140.47136 144.26454 148.59926 153.47277 158.88007 164.81392 171.26447 178.21897 185.66234 193.5775 201.94403 210.73926 219.9388 229.51506 239.41869 249.5587 259.84857 270.23822 280.6975 291.2003 301.7214 312.23773 322.72543 333.16245 343.5313 353.8165 364.00446 374.08292 384.04074 393.8679 403.5552 413.09412 422.47714 431.69647 440.74612 449.62036 458.3138 466.8212 475.138 483.25946 491.18137 498.8998 506.41074 513.71015 520.7945 527.6592 534.30024 540.7141 546.89716 552.84485 558.553 564.0179 569.2351 574.2 578.90925 583.35834 587.54346 591.4604 595.1057 598.47577 601.5676 604.37757 606.9036 609.14344 611.0954 612.7581 614.13105 615.2147 616.0098 616.5173 616.7398 616.6805 616.34595 615.74335 614.88 613.76404 612.403 610.8064 608.98444 606.94855 604.7105 602.28425 599.6834 596.92395 594.021 590.99305 587.858 584.63404 581.34125 578.00104 574.63367 571.2356 567.78656 564.2835 560.7422 557.18604 553.6372 550.1201 546.65796 543.2741 539.9927 536.836 533.8254 530.9828 528.329 525.88434 523.6673 521.6951 519.98377 518.54834 517.40107 516.55365 516.016 515.79474 515.8959 516.32264 517.0755 518.1542 519.55555 521.2731 523.29914 525.62397 528.2191 531.05164 534.0924 537.31556 540.6964 544.20844 547.8256 551.5212 555.26935 559.04377 562.8189 566.56977 570.2719 573.9018 577.43647 580.85517 584.13666 587.2615 590.21277 592.9736 595.5287 597.86426 599.96814 601.8295 603.4392 604.78956 605.87397 606.68824 607.22944 607.49457 607.48346 607.19654 606.63605 605.8057 604.7093 603.3524 601.74134 599.88367 597.78797 595.4627 592.91816 590.16456 587.21314 584.0746 580.76215 577.2878 573.65546 569.8686 565.93274 561.8577 557.65284 553.3277 548.8926 544.3571 539.73096 535.02515 530.2484 525.412 520.5248 515.59656 510.6374 505.65707 500.66348 495.6671 490.67538 485.6981 480.74194 475.81564 470.9267 466.08292 461.2905 456.55606 451.88586 447.28665 442.76453 438.32233 433.96814 429.70474 425.53708 421.46896 417.5049 413.64697 409.9 406.2651 402.7472 399.3469 396.06616 392.90692 389.87146 386.96146 384.17715 381.51962 378.9905 376.58942 374.3166 372.17224 370.1578 368.2717 366.51355 364.88345 363.35867 361.92938 360.59744 359.3664 358.2393 357.2189 356.3088 355.5118 354.83014 354.26755 353.8262 353.50848 353.31738 353.25504 353.3233 353.52448 353.86105 354.3342 354.94608 355.69748 356.59048 357.62598 358.8049 360.14298 361.6477 363.3199 365.15817 367.1629 369.33325 371.66776 374.16522 376.82437 379.64362 382.62152 385.75497 389.04205 392.48013 396.0668 399.7995 403.67392 407.6874 411.83643 416.1167 420.52322 425.055 429.70435 434.46744 439.3406 444.3174 449.39298 454.56253 459.8193 465.1586 470.5732 476.05722 481.60635 487.21115 492.8665 498.5649 504.30145 510.0669 515.85535 521.6583 527.4698 533.2817 539.08704 544.87635 550.64515 556.3831 562.0846 567.7399 573.3429 578.884 584.3592 589.7563 595.07135 600.29444 605.4181 610.4362 615.34144 620.12696 624.7843 629.30787 633.6903 637.9253 642.00727 645.92847 649.6844 653.2689 656.6757 659.90284 662.9421 665.7894 668.44086 670.89435 673.1434 675.18586 677.0199 678.642 680.2628)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (457.2231 459.1043 461.4548 464.29285 467.63406 471.491 475.87314 480.78662 486.23444 492.21603 498.7277 505.76196 513.3081 521.35187 529.87574 538.8587 548.2765 558.1016 568.3039 578.84955 589.7026 600.824 612.17255 623.7048 635.375 647.1361 658.93897 670.73346 682.4681 694.0912 705.55 716.79175 727.7636 738.41346 748.6895 758.54065 767.9177 776.7724 785.05835 792.73127 799.749 806.07215 811.6639 816.4904 820.52137 823.72907 826.0902 827.5847 828.1965 827.9131 826.7265 824.6328 821.63196 817.7282 812.93 807.2502 800.7053 793.3163 785.10785 776.10877 766.351 755.87134 744.70856 732.9055 720.5076 707.5632 694.1234 680.24146 665.97254 651.37354 636.5029 621.42035 606.186 590.86097 575.5065 560.18354 544.95264 529.876 515.0258 500.49103 486.32755 472.58954 459.32855 446.59375 434.4308 422.88254 411.98825 401.78366 392.30066 383.56717 375.60693 368.43976 362.08084 356.541 351.82697 347.9408 344.8801 342.63824 341.204 340.562 340.69305 341.57498 343.18317 345.48544 348.44653 352.02722 356.18494 360.87466 366.048 371.65466 377.64172 383.95474 390.53754 397.3328 404.28217 411.32697 418.40796 425.46634 432.44397 439.283 445.9267 452.3204 458.41064 464.1465 469.47934 474.3632 478.75494 482.61517 485.9076 488.5997 490.6629 492.0727 492.8091 492.85626 492.20294 490.84247 488.7729 485.99695 482.52213 478.3604 473.52853 468.04782 461.94406 455.24713 447.99103 440.21396 431.95782 423.26764 414.192 404.78253 395.09283 385.17972 375.1013 364.9201 354.7146 344.59424 334.66132 324.95963 315.52933 306.40686 297.62598 289.2166 281.20554 273.61655 266.47067 259.78665 253.58036 247.86579 242.65485 237.95778 233.78343 230.13936 227.03176 224.46631 222.44754 220.9798 220.0667 219.71164 219.91782 220.68824 222.0258 223.93315 226.41301 229.46825 233.10141 237.315 242.11119 247.49185 253.4583 260.01157 267.15253 274.88028 283.19357 292.09006 301.56625 311.6174 322.23663 333.41602 345.14545 357.4124 370.1985 383.4737 397.20465 411.3666 425.93256 440.87363 456.1586 471.75394 487.62442 503.7329 520.04 536.50415 553.0827 569.73114 586.4035 603.0527 619.62995 636.08606 652.3708 668.4332 684.22297 699.68854 714.7791 729.44416 743.6338 757.299 770.392 782.86615 794.67664 805.7808 816.139 825.7172 834.4854 842.40857 849.449 855.57264 860.74884 864.9516 868.15815 870.35035 871.5144 871.64124 870.7259 868.7682 865.77265 861.7485 856.709 850.67225 843.66144 835.7036 826.83057 817.0784 806.4875 795.1006 782.9646 770.12977 756.6493 742.5789 727.9774 712.90516 697.4254 681.60206 665.50037 649.1873 632.7295 616.194 599.648 583.1577 566.7885 550.605 534.6694 519.0422 503.78195 488.94403 474.58124 460.7432 447.4753 434.81955 422.81433 411.49316 400.88525 391.01514 381.90256 373.56247 366.00494 359.23468 353.25153 348.05048 343.62097 339.94812 337.012 334.7878 333.24634 332.35428 332.07382 332.36386 333.17972 334.4732 336.19345 338.2858 340.68988 343.34067 346.17484 349.13336 352.1577 355.1894 358.17133 361.04852 363.77155 366.29907 368.5951 370.62656 372.3636 373.7797 374.85153 375.55966 375.88834 375.82553 375.3631 374.49667 373.22617 371.55536 369.49152 367.04578 364.23328 361.07254 357.58563 353.7979 349.7376 345.4362 340.92786 336.249 331.43842 326.5368 321.58643 316.63092 311.7151 306.8844 302.18448 297.66135 293.36072 289.32776 285.60657 282.2401 279.26978 276.73505 274.67316 273.11884 272.10434 271.6589 271.8087 272.57587 273.9796 276.035 278.75342 282.14203 286.20398 290.93863 296.34058 302.40048 309.10544 316.4382 324.37756 332.8986 341.97293 351.56894 361.6517 372.1834 383.12408 394.43137 406.0607 417.96628 430.1011 442.41724 454.86652 467.40033 479.9706 492.5302 505.03284 517.4338 529.6901 541.761 553.60767 565.1995 576.5301 587.6161 598.4629 609.0497 619.34864 629.3315 638.9698 648.235 657.0982 665.5306 673.5037 680.9897 687.96155 694.3934 700.2597 705.53455 710.1919 714.2105 717.5782 720.28797 722.3356 723.7192 724.43964 724.5006 723.9085 722.6722 720.80274 718.31434 715.2237 711.54957 707.3132 702.53797 697.2489 691.4736 685.24115 678.58216 671.5286 664.11426 656.3736 648.34156 640.05426 631.54847 622.8606 614.028 605.08735 596.0749 587.0268 577.9784 568.9643 560.0177 551.1709 542.4545 533.8981 525.52894 517.3729 509.45374 501.7932 494.41113 487.3253 480.55096 474.10104 467.98572 462.21356 456.79047 451.72015 447.00366 442.64026 438.62668 434.95743 431.625 428.62006 425.93137 423.546 421.4492 419.6248 418.0557 416.72205 415.5982 414.65387 413.8596 413.18777 412.61093 412.1021 411.6354 411.18585 410.72925 410.2427 409.70526 409.09763 408.4017 407.60144 406.68326 405.6359 404.44928 403.11612 401.6319 399.9936 398.2006 396.25473 394.16016 391.92307 389.551 387.05466 384.44663 381.74023 378.9512 376.0967 373.19495 370.2658 367.33032 364.40964 361.52564 358.70117 355.9594 353.3202 350.79285 348.38025 346.09088 343.94165 341.95282 340.1443 338.53497 337.14285 335.98523 335.0784 334.43756 334.07642 334.00687 334.23935 334.78317 335.6459 336.83325 338.34906 340.19492 342.371 344.87582 347.70563 350.8548 354.31564 358.07883 362.13376 366.46783 371.06653 375.914 380.99326 386.2855 391.77078 397.42828 403.23618 409.17145 415.21054 421.3297 427.5043 433.70932 439.9196 446.11002 452.25613 458.33347 464.31757 470.18543 475.91467 481.4836 486.87146 492.05875 497.02676 501.7585 506.2382 510.4512 514.385 518.0286 521.3724 524.4083 527.1302 529.5336 531.6159 533.3756 534.8134 535.9317 536.7339 537.22516 537.41224 537.30347 536.90815 536.237 535.3017 534.1153 532.6914 531.04474 529.1902 527.14344 524.92115 522.54 520.0166 517.3679 514.6111 511.76288 508.83945 505.8569 502.83115 499.777 496.70963 493.64294 490.58945 487.561 484.569 481.62384 478.73523 475.9109 473.15793 470.48248 467.8895 465.383 462.96545 460.63898 458.40714 456.27438 454.2438 452.31516 450.4856 448.751 447.10635 445.54617 444.06445 442.65442 441.30884 440.01993 438.78018 437.58157 436.41595 435.274 434.14212 433.00684 431.8604 430.70035 429.52628 428.33868 427.13824 425.92657 424.70645 423.48114 422.25467 421.03168 419.8177 418.619 417.4422 416.29425 415.18314 414.11685 413.10327 412.15118 411.26904 410.46542 409.74893 409.1278 408.60986 408.20206 407.9115 407.7447 407.70657 407.80106 408.03207 408.40247 408.91354 409.5647 410.354 411.28012 412.339 413.52466 414.8304 416.24857 417.76984 419.38315 421.0766 422.8375 424.65115 426.50275 428.377 430.25745 432.12704 433.96912 435.76654 437.5018 439.1586 440.7211 442.17432 443.50366 444.69647 445.7417 446.62967 447.35294 447.906 448.28607 448.4932 448.52963 448.4006 448.1145 447.68277 447.12036 446.44498 445.67758 444.84244 443.96634 443.08035 442.217 441.4115 440.70227 440.13788 439.78476 439.7048 439.94174 440.5287 441.49402 442.86325 444.65857 446.90533 449.63138 452.8558 456.58746 460.82993 465.58405 470.84686 476.6119 482.8693 489.60696 496.81003 504.46054 512.5383 521.0216 529.8866 539.1073 548.6559 558.504 568.6227 578.9806 589.54627 600.28797 611.1741 622.1722 633.2498 644.3757 655.5182 666.64576 677.7281 688.7361 699.64057 710.41364 721.0282 731.45936 741.6818 751.6728 761.41065 770.87446 780.0438 788.90204 797.4323 805.6187 813.4481 820.9074 827.98517 834.6717 840.95795 846.83704 852.30237 857.3487 861.974 866.17835 869.9613 873.3231 876.26386 878.7844 880.8873 882.57465 883.8504 884.7181 885.1825 885.24915 884.9234 884.2114 883.11976 881.656 879.8269 877.63996 875.10297 872.2139 868.95917 865.3289 861.32227 856.9393 852.18177 847.052 841.5521 835.68476 829.4543 822.8639 815.9184 808.62256 800.982 793.0028 784.6912 776.05396 767.09925 757.8346 748.269 738.4111 728.2705 717.8579 707.1836 696.25965 685.09705 673.7088 662.10706 650.30555 638.31885 626.16144 613.85614 601.4274 588.89307 576.2687 563.5699 550.8111 538.00824 525.17774 512.3365 499.5012 486.6878 473.91473 461.19907 448.55862 436.0118 423.576 411.2701 399.1123 387.1207 375.3141 363.71143 352.3311 341.19037 330.30756 319.70102 309.38712 299.38312 289.7054 280.3699 271.39197 262.78723 254.56807 246.74735 239.33713 232.34882 225.79056 219.67133 213.99878 208.77674 204.01004 199.70038 195.84876 192.45429 189.51354 187.02068 184.9695 183.3219 182.03284 181.07105 180.41043 180.02713 179.89626 179.99269 180.2907 180.76575 181.39272 182.14488 182.99872 183.93033 184.9156 185.93152 186.95616 187.96762 188.94551 189.87055 190.72388 191.48973 192.15105 192.69281 193.10199 193.36617 193.475 193.41861 193.18903 192.77933 192.18456 191.40013 190.42305 189.25247 187.88826 186.33129 184.58367 182.64943 180.53275 178.23946 175.77547 173.14943 170.36948 167.4452 164.38652 161.2043 157.90987 154.51622 151.03562 147.48097 143.86603 140.20497 136.51126 132.80065 129.08614 125.39726 121.753136 118.17285 114.67066 111.263954 107.966545 104.79549 101.765236 98.89003 96.18412 93.66199 91.33785 89.224144 87.33382 85.679 84.27237 83.1241 82.2439 81.642746 81.32925 81.31296 81.60112 82.19958 83.05955 84.159905 85.50058 87.0858 88.92152 91.009796 93.35513 95.963394 98.83571 101.97765 105.393524 109.08691 113.057976 117.314514 121.85735 126.69112 131.81606 137.23668 142.95507 148.97344 155.29192 161.91374 168.83844 176.06844 183.60231 191.44077 199.58429 208.03022 216.77936 225.82573 235.16973 244.80774 254.73697 264.95105 275.4463 286.2154 297.2559 308.5587 320.11603 331.9182 343.95932 356.22845 368.71503 381.40506 394.29126 407.358 420.5929 433.9795 447.5063 461.15543 474.91235 488.7572 502.67606 516.64985 530.6586 544.68274 558.7064 572.7068 586.6653 600.5575 614.36786 628.0751 641.6568 655.0909 668.35926 681.43976 694.31537 706.9627 719.36286 731.4979 743.3473 754.89734 766.12836 777.0269 787.5738 797.75965 807.9443)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (394.11328 391.65265 389.3258 387.13727 385.0913 383.1923 381.44406 379.85037 378.4147 377.1405 376.03067 375.088 374.31497 373.71387 373.28662 373.03473 372.95972 373.0625 373.344 373.8044 374.44397 375.26227 376.25882 377.43268 378.78265 380.30692 382.00366 383.87045 385.90472 388.10318 390.4627 392.97925 395.6489 398.46704 401.4289 404.52927 407.76254 411.12305 414.60437 418.2001 421.90344 425.7071 429.60388 433.58588 437.64517 441.7735 445.9624 450.203 454.4867 458.8041 463.1462 467.50336 471.86603 476.22473 480.5696 484.8907 489.17868 493.42328 497.61475 501.74347 505.79977 509.77383 513.6564 517.4381 521.1101 524.6633 528.0892 531.37934 534.5258 537.52106 540.3577 543.029 545.5285 547.8503 549.9886 551.93885 553.6968 555.2606 556.642 557.8705 558.9406 559.8465 560.58344 561.1467 561.53205 561.7358 561.75495 561.58674 561.22895 560.6801 559.9394 559.0064 557.8818 556.5666 555.06275 553.37275 551.5003 549.4493 547.2248 544.833 542.28046 539.57465 536.7239 533.73774 530.6265 527.40125 524.07447 520.65925 517.16956 513.6202 510.02725 506.40717 502.77753 499.15677 495.564 492.01865 488.54163 485.1537 481.8765 478.73224 475.74353 472.9329 470.3231 467.9376 465.79886 463.93008 462.35364 461.09152 460.16553 459.59622 459.40338 459.60602 460.22144 461.26553 462.7532 464.6967 467.10675 469.99188 473.35794 477.2083 481.54395 486.3625 491.6582 497.42276 503.64404 510.30634 517.3901 524.87244 532.72657 540.92115 549.4217 558.1895 567.1818 576.35047 585.6329 594.93775 604.17 613.2698 622.1778 630.83674 639.19025 647.1841 654.7666 661.8886 668.504 674.56995 680.04694 684.8992 689.0949 692.6063 695.40955 697.4849 698.81727 699.3956 699.2129 698.267 696.55927 694.09577 690.88617 686.94416 682.2874 676.93677 670.91706 664.25574 656.98395 649.13495 640.7452 631.85285 622.4985 612.72437 602.5746 592.0943 581.3294 570.32685 559.1336 547.7973 536.3648 524.88294 513.3977 501.95422 490.59705 479.36862 468.3083 457.45007 446.82465 436.46027 426.38266 416.61462 407.1759 398.08395 389.35315 380.9954 373.02 365.43433 358.2427 351.44727 345.04825 339.0441 333.43106 328.20404 323.35596 318.87888 314.7635 310.9988 307.5734 304.4751 301.6906 299.2067 297.00894 295.0828 293.40613 291.93408 290.60364 289.3785 288.2536 287.2247 286.28818 285.44122 284.6822 284.01022 283.42465 282.92627 282.51663 282.1978 281.97275 281.84515 281.8192 281.89966 282.09186 282.40164 282.83603 283.40274 284.11008 284.9662 285.97934 287.15726 288.50772 290.03833 291.75623 293.66803 295.77954 298.09616 300.62238 303.36185 306.31726 309.48993 312.8806 316.48837 320.3109 324.34494 328.5855 333.0265 337.66022 342.47733 347.46707 352.6172 357.914 363.34222 368.88544 374.52545 380.24274 386.01694 391.8266 397.64902 403.4605 409.23685 414.95294 420.58337 426.10272 431.4854 436.70554 441.7378 446.55786 451.14124 455.4651 459.50797 463.24933 466.67062 469.7552 472.48645 474.84726 476.8203 478.39536 479.57028 480.34622 480.728 480.7236 480.3449 479.61032 478.5444 477.17447 475.5297 473.64032 471.5376 469.25317 466.81958 464.2694 461.63486 458.9481 456.24088 453.54398 450.88715 448.299 445.80676 443.4362 441.2113 439.15442 437.2857 435.62332 434.1833 432.97958 432.02408 431.32596 430.89218 430.72775 430.83514 431.21475 431.86478 432.78107 433.95786 435.38712 437.059 438.96213 441.0834 443.408 445.91995 448.602 451.43573 454.40204 457.48087 460.65134 463.89227 467.18228 470.49942 473.82193 477.1282 480.39655 483.60577 486.7353 489.7652 492.6759 495.4488 498.06653 500.51205 502.76987 504.82587 506.6669 508.2808 509.65707 510.7866 511.66153 512.2755 512.6235 512.7019 512.50885 512.04346 511.30643 510.29977 509.02707 507.4928 505.70288 503.66434 501.3856 498.87393 496.12943 493.14282 489.90796 486.42844 482.71106 478.7646 474.59912 470.2259 465.65744 460.9078 455.9924 450.9281 445.73257 440.42477 435.02496 429.55225 424.02475 418.46115 412.8824 407.3113 401.77176 396.28842 390.88647 385.59122 380.42822 375.42337 370.6027 365.9913 361.61438 357.49677 353.66248 350.13464 346.93533 344.0857 341.60562 339.51343 337.8259 336.55826 335.72388 335.33414 335.39847 335.92398 336.9156 338.3761 340.30588 342.70285 345.56253 348.8782 352.64063 356.83795 361.45575 366.47748 371.88455 377.65622 383.76883 390.19733 396.91516 403.89337 411.1017 418.50836 426.08014 433.78345 441.58368 449.4453 457.33255 465.20972 473.04083 480.7906 488.42392 495.90698 503.20642 510.29065 517.12915 523.6933 529.9566 535.8945 541.4843 546.7051 551.5394 555.97394 559.999 563.6084 566.79834 569.56794 571.919 573.85596 575.3859 576.5184 577.2652 577.6403 577.6596 577.3411 576.70405 575.7692 574.559 573.09656 571.4057 569.51117 567.43824 565.21186 562.8574 560.39985 557.8637 555.27326 552.6517 550.0216 547.4043 544.8198 542.28724 539.82404 537.4464 535.1685 533.00336 530.96247 529.05634 527.29676 525.69776 524.2725 523.0315 521.9824 521.13135 520.48194 520.03644 519.7952 519.7561 519.91565 520.26905 520.809 521.52717 522.4135 523.45667 524.6441 525.96216 527.3965 528.93134 530.55054 532.23755 533.97504 535.746 537.53296 539.3184 541.0851 542.8164 544.496 546.10804 547.63727 549.06977 550.39246 551.5927 552.6594 553.5831 554.3549 554.9672 555.4141 555.69104 555.7947 555.72284 555.4747 555.05097 554.4539 553.68665 552.7529 551.6582 550.4089 549.01197 547.4752 545.80707 544.0168 542.11384 540.10834 538.00995 535.8286 533.5743 531.2564 528.88465 526.4678 524.0141 521.53107 519.02546 516.503 513.96845 511.42554 508.87686 506.3238 503.76636 501.2034 498.63217 496.049 493.44864 490.82437 488.16855 485.4723 482.72522 479.9163 477.03336 474.0631 470.99152 467.804 464.48572 461.02118 457.3944 453.5895 449.59085 445.38312 440.95126 436.28064 431.3575 426.1693 420.70456 414.95267 408.9046 402.55347 395.89352 388.9211 381.63516 374.037 366.1311 357.92285 349.41913 340.6292 331.5645 322.239 312.6684 302.871 292.8677 282.68164 272.3378 261.86337 251.28812 240.64382 229.96636 219.29494 208.66788 198.12384 187.70217 177.44365 167.39019 157.58422 148.0692 138.88892 130.08736 121.708664 113.79663 106.39488 99.54573 93.2909 87.67079 82.72469 78.49012 75.00223 72.29401 70.39618 69.33713 69.14183 69.83239 71.42746 73.942536 77.38964 81.776436 87.10713 93.38226 100.59763 108.745285 117.81373 127.78599 138.64151 150.35634 162.90224 176.24626 190.35214 205.18048 220.6876 236.82666 253.54837 270.79956 288.52472 306.66696 325.1662 343.96133 362.98914 382.18564 401.48657 420.82642 440.14026 459.3636 478.43173 497.28162 515.8516 534.0817 551.9136 569.292 586.1638 602.4792 618.1914 633.25715 647.63715 661.29596 674.2022 686.3289 697.65345 708.1578 717.8286 726.65735 734.6392 741.77546 748.07105 753.53614 758.19025 762.06134 765.1834 767.5921 769.32544 770.42414 770.9296 770.8806 770.3126 769.2645 767.77796 765.8966 763.6638 761.1214 758.3111 755.2743 752.05 748.6765 745.1903 741.6264 738.0173 734.39374 730.784 727.2147 723.70984 720.2911 716.9779 713.787 710.7332 707.8292 705.0849 702.50776 700.10334 697.8752 695.82496 693.9519 692.25336 690.7254 689.3619 688.1547 687.0955 686.17347 685.37684 684.69245 684.1069 683.6045 683.16944 682.78547 682.43494 682.1002 681.7629 681.4043 681.00495 680.5467 680.0101 679.3758 678.625 677.7353 676.68287 675.4463 674.0072 672.34675 670.4478 668.29474 665.87085 663.1613 660.1527 656.83204 653.18714 649.20795 644.88465 640.20887 635.17395 629.774 624.00434 617.8624 611.3436 604.4398 597.1424 589.44446 581.34174 572.83185 563.9139 554.58814 544.85596 534.7216 524.1903 513.2698 501.9697 490.30023 478.27502 465.90894 453.21936 440.22534 426.94708 413.40808 399.63275 385.64816 371.48245 357.16617 342.73044 328.20956 313.63803 299.05243 284.49057 269.9911 255.59403 241.35643 227.3337 213.5707 200.10315 186.96706 174.1964 161.8253 149.88639 138.41028 127.4284 116.96994 107.06287 97.73378 89.008644 80.91076 73.46366 66.68858 60.604992 55.230793 50.582508 46.674714 43.520485 41.131024 39.5153 38.68079 38.632496 39.373814 40.906063 43.228024 46.336426 50.22575 54.888524 60.314106 66.49034 73.402504 81.032715 89.36239 98.36822 108.02609 118.309235 129.18856 140.63217 152.60672 165.07695 178.00388 191.34825 205.04114 219.00934 233.19384 247.54399 262.01022 276.54623 291.10614 305.6474 320.1272 334.50534 348.7455 362.8112 376.66922 390.28888 403.64276 416.70325 429.4478 441.8553 453.90704 465.58768 476.88184 487.77963 498.27167 508.34958 518.00977 527.24854 536.06495 544.46045 552.43665 559.9973 567.149 573.8979 580.252 586.22016 591.81324 597.0424 601.9187 606.4556 610.6649 614.5619 618.1584 621.47107 624.5114 627.29615 629.83936 632.1544 634.2554 636.15754 637.8738 639.41944 640.805 642.0438 643.15 644.13245 645.0024 645.7668 646.43354 647.01197 647.5074 647.92804 648.2811 648.57117 648.8047 648.9867 649.1225 649.2153 649.2714 649.29224 649.2822 649.2445 649.18165 649.09675 648.99054 648.8661 648.72565 648.5698 648.4006 648.23914 648.1012 647.9942 647.9275 647.90625 647.9394 648.0322 648.1915 648.4224 648.731 649.12165 649.6 650.1691 650.8317 651.59205 652.4505 653.40845 654.46686 655.6268 656.8854 658.24134 659.6927 661.2335 662.86194 664.57117 666.35535 668.20765 670.11927 672.0827 674.08497 676.1174 678.1686 680.22577 682.2774 684.3071 686.3009 688.2447 690.1229 691.91907 693.6156 695.197 696.6464 697.94654 699.0795 700.02894 700.7776 701.3093 701.6076 701.6573 701.44416 700.9528 700.17084 699.0868 697.68915 695.9687 693.91755 691.52875 688.799 685.7227 682.30176 678.53406 674.42444 669.976 665.198 660.0988 654.68946 648.9842 642.9969 636.74964 630.25934 623.5507 616.64515 609.57117 602.3565 595.031 587.62574 580.219)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (623.7827 624.38294 624.4489 623.9903 623.02045 621.5553 619.61384 617.2178 614.39167 611.16224 607.55866 603.6121 599.3559 594.82465 590.05475 585.0837 579.9501 574.69294 569.3522 563.96766 558.57966 553.2275 547.9505 542.7872 537.7747 532.94947 528.34607 523.9974 519.9346 516.1866 512.77985 509.7388 507.0849 504.83698 503.01083 501.61942 500.67264 500.17722 500.13647 500.55075 501.41724 502.7297 504.47876 506.65195 509.23386 512.20594 515.54676 519.2324 523.2363 527.5295 532.08045 536.856 541.8211 546.93897 552.1714 557.4792 562.82215 568.1595 573.4497 578.6518 583.72474 588.6271 593.3189 597.76075 601.915 605.7443 609.21405 612.2908 614.9431 617.1426 618.8626 620.07917 620.7716 620.9221 620.51514 619.53937 617.9861 615.85035 613.1308 609.83014 605.95246 601.505 596.49854 590.947 584.8673 578.2799 571.2076 563.6764 555.71485 547.3542 538.62726 529.57026 520.2202 510.61624 500.79932 490.81107 480.69446 470.49338 460.2521 450.0152 439.82782 429.73407 419.77936 410.00964 400.4701 391.20425 382.2551 373.66333 365.46805 357.70587 350.41165 343.6174 337.35263 331.6437 326.5145 321.98523 318.07352 314.79285 312.15414 310.16458 308.82806 308.14475 308.11173 308.72244 309.96722 311.8331 314.30392 317.36066 320.98117 325.1408 329.81235 334.96585 340.5696 346.58975 352.99054 359.7349 366.78452 374.0996 381.6399 389.3645 397.2319 405.201 413.2306 421.2799 429.30844 437.27747 445.14813 452.8839 460.4495 467.81097 474.93634 481.7958 488.3617 494.6096 500.52417 506.10953 511.3775 516.32264 520.9402 525.2272 529.18097 532.80024 536.0836 539.03077 541.64087 543.91364 545.8492 547.44684 548.7062 549.62684 550.20826 550.44904 550.3482 549.9045 549.11664 547.98304 546.5021 544.67225 542.4928 539.96247 537.0809 533.84766 530.2634 526.32947 522.0478 517.42164 512.4548 507.15253 501.5217 495.56964 489.30566 482.74078 475.8871 468.7581 461.36942 453.7379 445.8825 437.82303 429.58102 421.18005 412.64566 404.0063 395.29227 386.53244 377.75595 368.99344 360.2752 351.6318 343.09396 334.69275 326.45816 318.4202 310.60834 303.0511 295.77597 288.80936 282.1766 275.90128 270.00558 264.50986 259.43262 254.79071 250.59864 246.86894 243.61183 240.83518 238.54494 236.7444 235.43465 234.61553 234.2901 234.48036 235.22638 236.54755 238.43418 240.87467 243.85488 247.35852 251.36679 255.85875 260.81293 266.2048 272.00937 278.2003 284.74966 291.62946 298.81058 306.26373 313.9592 321.8676 329.95935 338.2062 346.5812 355.05728 363.6092 372.21283 380.84436 389.482 398.10486 406.69382 415.23114 423.70044 432.08685 440.3777 448.56174 456.62894 464.5715 472.3827 480.0576 487.59287 494.98627 502.23676 509.34512 516.31305 523.14264 529.83704 536.4006 542.8377 549.15345 555.3528 561.4412 567.4244 573.30695 579.09345 584.7884 590.3955 595.91785 601.3569 606.71375 611.98816 617.179 622.2833 627.29694 632.2148 637.0298 641.73377 646.31665 650.7674 655.0731 659.2188 663.1861 666.95124 670.4874 673.7689 676.7698 679.46375 681.8256 683.8329 685.46595 686.7042 687.5201 687.8841 687.76935 687.15027 686.004 684.31037 682.05115 679.212 675.7809 671.7497 667.1132 661.8701 656.0228 649.5771 642.5429 634.93317 626.76496 618.05945 608.841 599.1373 588.9807 578.4057 567.45026 556.1552 544.5649 532.7258 520.6872 508.5 496.21732 483.8937 471.58548 459.34988 447.2445 435.3277 423.6584 412.2944 401.29294 390.71082 380.6037 371.0251 362.02664 353.65775 345.96518 338.9928 332.78098 327.36633 322.78186 319.05618 316.21338 314.27283 313.24924 313.15195 313.9848 315.74637 318.42966 322.02216 326.50558 331.85593 338.0432 345.03214 352.78204 361.2465 370.37415 380.10895 390.38965 401.1507 412.32306 423.83377 435.6064 447.5625 459.6209 471.69888 483.7127 495.578 507.20984 518.5282 529.4629 539.95185 549.93726 559.3646 568.183 576.3456 583.80994 590.53705 596.4921 601.64484 605.9692 609.44257 612.047 613.76514 614.57917 614.4768 613.45655 611.52454 608.69104 604.97065 600.3816 594.9459 588.6897 581.6427 573.83747 565.31 556.09955 546.2482 535.80054 524.8039 513.3073 501.36224 489.02225 476.3426 463.37967 450.19122 436.83606 423.3738 409.86462 396.36905 382.94754 369.6605 356.5679 343.72916 331.20288 319.0465 307.31616 296.0665 285.35022 275.21777 265.7177 256.89597 248.79563 241.45703 234.91739 229.21067 224.3669 220.41269 217.37113 215.26107 214.09725 213.89009 214.64617 216.36754 219.05156 222.6912 227.27532 232.788 239.20905 246.5143 254.67452 263.65674 273.42407 283.9357 295.15064 307.0351 319.5553 332.66278 346.29874 360.4011 374.9045 389.7414 404.842 420.13553 435.54968 451.01132 466.44656 481.7823 496.94574 511.86527 526.46875 540.68805 554.45667 567.7105 580.38886 592.43415 603.7929 614.41535 624.2567 633.2763 641.4385 648.71326 655.0763 660.50824 664.9954 668.52985 671.11 672.7397 673.4286 673.19227 672.0515 670.03266 667.16785 663.4968 659.0652 653.9216 648.1167 641.70276 634.7349 627.2699 619.3663 611.0833 602.48114 593.6201 584.55964 575.35877 566.076 556.7682 547.4902 538.2945 529.23127 520.348 511.68958 503.2973 495.20874 487.45813 480.07636 473.09027 466.52243 460.39188 454.714 449.4997 444.75592 440.48624 436.6907 433.36563 430.5034 428.09375 426.12396 424.57785 423.436 422.67786 422.2809 422.22043 422.46994 423.0018 423.78763 424.79803 426.00333 427.37393 428.88037 430.49326 432.18433 433.92636 435.69293 437.45923 439.20203 440.89984 442.5332 444.0849 445.53967 446.88486 448.10974 449.2061 450.1686 450.995 451.68445 452.2385 452.6623 452.9625 453.1481 453.23056 453.2234 453.14145 453.00235 452.82468 452.62796 452.4337 452.26447 452.14236 452.09143 452.13574 452.29874 452.6042 453.07602 453.73712 454.60956 455.71396 457.0701 458.69626 460.60898 462.82288 465.3508 468.20328 471.3888 474.9131 478.7789 482.98663 487.53442 492.4177 497.62833 503.15564 508.98068 515.07227 521.39686 527.9258 534.63355 541.4947 548.48267 555.57007 562.72834 569.9276 577.13697 584.32557 591.46216 598.51557 605.45374 612.24494 618.8569 625.25495 631.4036 637.26777 642.8123 648.00385 652.8114 657.2055 661.1581 664.6435 667.6388 670.1232 672.0785 673.4893 674.34314 674.63086 674.3456 673.48304 672.0433 670.0294 667.44654 664.3035 660.6121 656.3866 651.6448 646.4066 640.69495 634.5351 627.9547 620.98334 613.6521 605.99427 598.04456 589.8384 581.412 572.80304 564.049 555.1873 546.25556 537.29047 528.3282 519.4035 510.55002 501.79993 493.18292 484.72668 476.45685 468.39566 460.5629 452.97534 445.64636 438.58652 431.80212 425.29657 419.06924 413.11594 407.4292 401.9983 396.80804 391.84094 387.07623 382.4897 378.0547 373.74304 369.52393 365.36392 361.22958 357.08637 352.89853 348.63104 344.2487 339.71744 335.00555 330.0822 324.91885 319.49072 313.78085 307.79007 301.5342 295.0345 288.31503 281.40234 274.32587 267.1188 259.81882 252.46764 245.10823 237.78366 230.53707 223.41184 216.4514 209.69799 203.1927 196.97638 191.08702 185.56159 180.4343 175.73696 171.49886 167.74614 164.50247 161.78832 159.62084 158.01332 156.977 156.51946 156.6443 157.35247 158.64173 160.50733 162.94043 165.93 169.4634 173.5234 178.09185 183.14817 188.66967 194.6321 201.00872 207.77219 214.89374 222.34349 230.09098 238.10498 246.35388 254.80559 263.42807 272.18887 281.0567 289.99985 298.98724 307.98923 316.97546 325.91818 334.79132 343.57034 352.22873 360.7416 369.0853 377.23633 385.17355 392.87717 400.32938 407.51334 414.4144 421.0198 427.31726 433.29846 438.95465 444.2788 449.268 453.91785 458.22794 462.22897 465.97595 469.50516 472.83002 475.95645 478.89148 481.64096 484.2128 486.61356 488.85107 490.934 492.86993 494.66635 496.33225 497.87625 499.30695 500.63245 501.86154 503.0031 504.06528 505.05676 505.9849 506.85858 507.68527 508.47247 509.2278 509.9586 510.67062 511.3709 512.06574 512.76117 513.46955 514.2045 514.9733 515.78186 516.63196 517.52686 518.4697 519.46076 520.501 521.5907 522.7292 523.9152 525.1481 526.4241 527.7411 529.0949 530.48206 531.8978 533.33747 534.795 536.2645 537.7399 539.2143 540.6807 542.13215 543.5601 544.9573 546.3155 547.6262 548.8822 550.0746 551.1948 552.2351 553.1869 554.0424 554.79267 555.4306 555.9494 556.34046 556.5973 556.7136 556.6832 556.49976 556.15766 555.65217 554.9781 554.14795 553.17444 552.0614 550.8082 549.4146 547.8807 546.20466 544.3868 542.4274 540.3272 538.0853 535.7033 533.18177 530.52247 527.7275 524.7985 521.73847 518.54975 515.2367 511.80234 508.25177 504.58957 500.82028 496.9509 492.98663 488.93442 484.8022 480.5961 476.3253 471.9971 467.62228 463.20892 458.76694 454.30673 449.83875 445.37363 440.9216 436.49524 432.10544 427.76358 423.48178 419.271 415.14554 411.11578 407.19272 403.38928 399.71796 396.1894 392.8148 389.606 386.57407 383.7288 381.07996 378.6377 376.41486 374.42148 372.6621 371.144 369.87293 368.85336 368.08737 367.58044 367.33487 367.35187 367.63156 368.17538 368.98157 370.05054 371.37936 372.96442 374.80368 376.8916 379.22318 381.7935 384.59525 387.62103 390.86362 394.3018 397.92346 401.71512 405.66885 409.77136 414.0132 418.37976 422.86188 427.44302 432.1121 436.85486 441.65833 446.5075 451.3889 456.29 461.19446 466.08783 470.95847 475.79126 480.57208 485.28754 489.9237 494.46948 498.91153 503.23816 507.43488 511.49387 515.4018 519.1495 522.72736 526.12384 529.3331 532.3458 535.15516 537.7546 540.13874 542.3009 544.2356 545.94074 547.41254 548.6485 549.6449 550.403 550.9203 551.1972 551.23475 551.03406 550.5968 549.92444 549.0207 547.88935 546.5335 544.9568 543.1643 541.16156 538.9547 536.5473 533.9461 531.15827 528.1906 525.04767 521.73664 518.26606 514.6422 510.87158 506.9607 502.91934 498.7515 494.4655 490.0699 485.5706 480.97342 476.28693 471.5169 466.67252 461.75702 456.8404)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (557.23414 558.7852 560.18506 561.4294 562.5143 563.4357 564.1903 564.77466 565.1856 565.42035 565.4763 565.351 565.04224 564.5481 563.86676 562.9969 561.93696 560.6859 559.2426 557.6065 555.7772 553.75397 551.5368 549.1258 546.52094 543.7228 540.7316 537.54834 534.1737 530.6089 526.85505 522.9135 518.78614 514.4744 509.98074 505.30695 500.45554 495.4293 490.23077 484.86337 479.3304 473.63516 467.7818 461.77426 455.6172 449.31503 442.87314 436.29688 429.59177 422.76407 415.82025 408.76724 401.61224 394.36295 387.02753 379.61456 372.13306 364.5926 357.0032 349.3749 341.71902 334.047 326.37094 318.7029 311.0562 303.44397 295.88043 288.3799 280.9572 273.62784 266.40768 259.31293 252.3601 245.56644 238.94924 232.52616 226.31545 220.33499 214.60358 209.13959 203.96178 199.08893 194.5397 190.33252 186.48636 183.01915 179.94895 177.29367 175.0706 173.2966 171.98796 171.16008 170.82799 171.00574 171.7065 172.9423 174.72466 177.06316 179.96662 183.44249 187.49697 192.13501 197.36148 203.17792 209.58406 216.57787 224.1555 232.31131 241.03733 250.32404 260.15942 270.5298 281.41913 292.80942 304.68008 317.00897 329.7715 342.94153 356.48987 370.38647 384.59772 399.0896 413.82565 428.7673 443.87558 459.10852 474.42365 489.77695 505.12296 520.41547 535.6074 550.6514 565.4989 580.1016 594.41077 608.3781 621.9553 635.095 647.75007 659.8748 671.42426 682.356 692.6279 702.2005 711.03644 719.1005 726.36017 732.7859 738.35065 743.03095 746.80665 749.6612 751.5813 752.55787 752.58454 751.65705 749.7757 746.94947 743.19056 738.5167 732.94947 726.5146 719.24256 711.16755 702.32825 692.76746 682.5313 671.6702 660.23755 648.2903 635.8883 623.09436 609.9736 596.59296 583.02204 569.331 555.59186 541.8765 528.25806 514.80896 501.60153 488.7066 476.19437 464.13245 452.58737 441.6222 431.29694 421.66855 412.79 404.7102 397.47327 391.11874 385.6809 381.18854 377.66446 375.12604 373.58438 373.04422 373.50412 374.9552 377.37817 380.73553 384.9768 390.0549 395.91876 402.51422 409.7837 417.66748 426.10376 435.02918 444.37906 454.08826 464.09213 474.32535 484.72366 495.22403 505.76416 516.28425 526.7259 537.03327 547.1528 557.0336 566.6278 575.89057 584.7807 593.2595 601.2916 608.84607 615.8939 622.41065 628.3739 633.7618 638.5531 642.7322 646.2905 649.22284 651.52655 653.202 654.2521 654.6824 654.50086 653.7176 652.3447 650.3966 647.889 644.83936 641.26667 637.19074 632.633 627.61615 622.16584 616.31067 610.0774 603.48786 596.5649 589.3305 581.80707 574.01636 565.9804 557.72095 549.2589 540.61475 531.8083 522.85956 513.7877 504.611 495.34766 486.015 476.62994 467.2085 457.7666 448.3196 438.8818 429.46777 420.0912 410.7655 401.50345 392.31793 383.22107 374.22498 365.34152 356.58228 347.9587 339.48227 331.16406 323.01526 315.04697 307.27036 299.6967 292.33685 285.20245 278.3047 271.65482 265.26425 259.14438 253.30687 247.76364 242.5258 237.6053 233.0163 228.77848 224.91707 221.45314 218.40076 215.77359 213.58466 211.84632 210.56966 209.7639 209.43743 209.59903 210.25742 211.4201 213.09368 215.28374 217.99449 221.22893 224.98905 229.27518 234.08647 239.42084 245.27458 251.6427 258.51843 265.89377 273.75913 282.10333 290.91373 300.17587 309.87424 319.9913 330.50797 341.40378 352.6569 364.24396 376.1403 388.31934 400.75333 413.41388 426.27066 439.2923 452.44675 465.70065 479.01944 492.3684 505.7121 519.0135 532.236 545.3425 558.2956 571.05756 583.5907 595.8576 607.8213 619.4445 630.6912 641.52594 651.9137 661.82074 671.2147 680.0639 688.3383 696.00965 703.0511 709.4374 715.1455 720.1546 724.44574 728.00214 730.80976 732.85675 734.1337 734.63416 734.3542 733.2928 731.4513 728.8342 725.4487 721.3052 716.41645 710.7982 704.4691 697.4506 689.7661 681.43775 672.48664 662.9391 652.82874 642.19227 631.0684 619.4979 607.5239 595.1913 582.5461 569.63605 556.5101 543.21796 529.81 516.33594 502.83948 489.35474 475.91605 462.56888 449.36542 436.35733 423.59586 411.1308 399.01062 387.2825 375.99225 365.18366 354.89807 345.17474 336.05026 327.5588 319.73132 312.5958 306.1769 300.49634 295.57208 291.4185 288.04633 285.46277 283.67108 282.6708 282.45773 283.02387 284.35767 286.44357 289.26248 292.79196 297.0061 301.8757 307.36844 313.44907 320.07962 327.2195 334.82584 342.8534 351.25565 359.98416 368.98883 378.21906 387.62308 397.1486 406.74356 416.3555 425.9327 435.4238 444.77872 453.94812 462.8847 471.54254 479.87766 487.84842 495.41608 502.5444 509.19998 515.3523 520.97376 526.0403 530.5295 534.42255 537.7053 540.3675 542.4031 543.8097 544.5887 544.74506 544.2875 543.22876 541.5843 539.3729 536.6169 533.3414 529.5745 525.34736 520.6928 515.6459 510.24368 504.52533 498.5313 492.30313 485.88348 479.3156 472.64307 465.90958 459.15912 452.43485 445.7796 439.23505 432.8423 426.64063 420.66834 414.9616 409.55493 404.4805 399.7682 395.44846 391.55615 388.12744 385.19046 382.76248 380.85388 379.4713 378.61768 378.29257 378.49146 379.20633 380.42572 382.1351 384.31717 386.95163 390.01547 393.48398 397.3297 401.52307 406.03336 410.8284 415.875 421.13925 426.58627 432.18082 437.88797 443.67264 449.49994 455.33606 461.14746 466.9019 472.56824 478.11652 483.51865 488.74783 493.7791 498.5894 503.15778 507.4648 511.49365 515.22956 518.6602 521.7753 524.56586 527.02564 529.15204 530.94355 532.3996 533.5226 534.317 534.7896 534.9486 534.8036 534.36597 533.6488 532.66657 531.4353 529.9713 528.2924 526.4178 524.3671 522.16077 519.8194 517.3646 514.8181 512.2016 509.53683 506.84576 504.15042 501.47208 498.83182 496.2506 493.74847 491.34488 489.05884 486.9085 484.91068 483.0817 481.43716 479.99097 478.75638 477.74518 476.96832 476.4353 476.15418 476.13214 476.3752 476.88763 477.6724 478.7314 480.06503 481.67203 483.5502 485.69653 488.10635 490.77295 493.68924 496.8467 500.23535 503.84482 507.66525 511.6891 515.9069 520.303 524.8568 529.54706 534.3514 539.2465 544.2088 549.21387 554.2372 559.2539 564.2396 569.1694 574.0191 578.76557 583.38794 587.8677 592.18506 596.31965 600.2523 603.9649 607.43964 610.6611 613.61475 616.28754 618.66816 620.74726 622.5167 623.96967 625.1007 625.9077 626.389 626.54377 626.3739 625.8821 625.074 623.9555 622.5334 620.8172 618.8168 616.54334 614.0089 611.22706 608.2117 604.9775 601.5403 597.9163 594.12226 590.1746 586.0906 581.8879 577.58387 573.19544 568.7397 564.2335 559.6934 555.1357 550.57544 546.0275 541.506 537.0245 532.5955 528.23066 523.9406 519.7355 515.62384 511.6134 507.71063 503.9218 500.25092 496.70087 493.27463 489.97382 486.7988 483.7484 480.82086 478.0133 475.32263 472.74393 470.2713 467.8989 465.62027 463.428 461.31357 459.26828 457.2837 455.35046 453.45825 451.59726 449.75784 447.9295 446.1036 444.27493 442.43945 440.59113 438.72174 436.82376 434.89017 432.91418 430.8863 428.7983 426.64804 424.43753 422.17087 419.8523 417.48685 415.08 412.6375 410.1661 407.67203 405.16153 402.64197 400.12027 397.60242 395.09564 392.60672 390.1419 387.70688 385.307 382.94745 380.63293 378.3674 376.15442 373.9968 371.8961 369.8539 367.8705 365.94626 364.08005 362.26984 360.51303 358.80655 357.14606 355.52597 353.94074 352.38522 350.85193 349.33304 347.82114 346.30783 344.7833 343.23962 341.66657 340.0545 338.39517 336.67847 334.89542 333.03702 331.09454 329.05682 326.9128 324.65515 322.2801 319.78482 317.16696 314.4271 311.56607 308.58566 305.48944 302.28268 298.97086 295.5623 292.0655 288.49133 284.8515 281.15924 277.42972 273.67844 269.92102 266.17465 262.4579 258.7922 255.20046 251.70639 248.33362 245.10791 242.05405 239.19835 236.56642 234.18396 232.07791 230.27248 228.79422 227.6668 226.91411 226.55893 226.62204 227.123 228.07973 229.5095 231.42639 233.84265 236.76839 240.21018 244.17351 248.66016 253.66867 259.19543 265.2332 271.77295 278.79456 286.26736 294.15595 302.42133 311.02353 319.92 329.06567 338.41657 347.92694 357.5497 367.2385 376.9467 386.62872 396.23898 405.73193 415.0666 424.20068 433.09323 441.70782 450.00797 457.9615 465.5356 472.70337 479.43747 485.71576 491.51816 496.82764 501.62943 505.91266 509.66843 512.8905 515.5776 517.729 519.34845 520.44147 521.01655 521.0832 520.6559 519.7497 518.3819 516.57227 514.3425 511.71658 508.71817 505.3732 501.70682 497.74255 493.5083 489.0338 484.35016 479.48947 474.48257 469.3608 464.15793 458.90384 453.631 448.36896 443.14935 438.00195 432.95584 428.03906 423.2779 418.69916 414.32694 410.1852 406.2954 402.6784 399.35214 396.33566 393.6437 391.29038 389.2868 387.64557 386.37448 385.48065 384.9684 384.84232 385.1046 385.7524 386.78473 388.19946 389.99066 392.1503 394.6709 397.54263 400.75308 404.28925 408.1371 412.2808 416.70282 421.3869 426.31277 431.46146 436.81076 442.33902 448.0237 453.84418 459.7747 465.7924 471.8372 477.87347 483.8784 489.8323 495.7145 501.50793 507.19174 512.7509 518.16315 523.415 528.4909 533.37354 538.04944 542.50415 546.72535 550.7009 554.42084 557.87494 561.05506 563.95337 566.564 568.88245 570.90424 572.62757 574.0522 575.17737 576.004 576.5342 576.77216 576.72236 576.39026 575.78345 574.9097 573.77906 572.40247 570.7905 568.9571 566.9162 564.6815 562.26807 559.6936 556.9752 554.12867 551.17634 548.1341 545.0214 541.8612 538.6706 535.47016 532.28284 529.12635 526.02497 522.9969 520.06385 517.2449 514.5616 512.0322 509.67645 507.51047 505.55707 503.82898 502.343 501.1173 500.16257 499.4947 499.12457 499.06397 499.3233 499.9093 500.834 502.09814 503.70923 505.671 507.9843 510.6485 513.6668 517.0318 520.7404 524.78687 529.16706 533.8701 538.88727 544.20435 549.8106 555.6932 561.8331 568.213 574.81824 581.62745 588.6212 595.7742 603.0688 610.47736 617.9758 625.5415 633.1461 640.76264 648.36536 655.92457 663.4844)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (434.75626 443.76202 452.57117 461.16138 469.51154 477.60257 485.41702 492.93903 500.1551 507.0534 513.62446 519.8606 525.7563 531.30854 536.516 541.37995 545.90345 550.0919 553.9524 557.4945 560.72944 563.67005 566.33136 568.72974 570.8831 572.81086 574.5337 576.073 577.45185 578.69336 579.8219 580.8618 581.83814 582.7755 583.69935 584.6341 585.6038 586.6325 587.74305 588.95765 590.2968 591.7806 593.4272 595.2535 597.2747 599.5041 601.953 604.63117 607.54584 610.70215 614.1032 617.74994 621.6406 625.7714 630.13617 634.72644 639.5313 644.5378 649.73066 655.0924 660.6041 666.24384 671.98865 677.8137 683.69275 689.5974 695.4989 701.3667 707.16987 712.8762 718.4533 723.8684 729.08844 734.08014 738.81116 743.2489 747.3617 751.1174 754.4771 757.3912 759.8316 761.7719 763.1875 764.0559 764.3566 764.0716 763.1852 761.68427 759.55854 756.80005 753.4043 749.3692 744.6953 739.38715 733.4512 726.8973 719.73847 711.99006 703.6707 694.80164 685.40705 675.513 665.14905 654.3462 643.1381 631.56037 619.6506 607.44764 594.9925 582.3271 569.49457 556.5392 543.5056 530.4393 517.38587 504.3907 491.49988 478.7581 466.20993 453.89923 441.8696 430.16208 418.81702 407.87338 397.36758 387.3352 377.8088 368.81967 360.39578 352.56357 345.34583 338.7639 332.83548 327.57544 322.99625 319.10712 315.91446 313.42166 311.62888 310.53336 310.12976 310.4094 311.3609 312.97015 315.21982 318.09042 321.5597 325.60242 330.19186 335.2982 340.88986 346.93298 353.392 360.22696 367.3825 374.7687 382.29056 389.89932 397.5478 405.19116 412.78638 420.29263 427.67163 434.8875 441.90662 448.69772 455.2326 461.48453 467.42996 473.0474 478.31763 483.22388 487.75147 491.8878 495.62256 498.9468 501.85425 504.34006 506.40106 508.03595 509.24487 510.0295 510.39307 510.34027 509.87674 509.00998 507.74844 506.1017 504.08075 501.69757 498.96527 495.89807 492.51138 488.82117 484.84525 480.60202 476.11035 471.39084 466.46497 461.3543 456.07892 450.65494 445.10086 439.4444 433.71466 427.94165 422.1555 416.38733 410.66846 405.03058 399.50467 394.12225 388.91415 383.91068 379.14175 374.63577 370.42044 366.52216 362.96613 359.776 356.97372 354.57925 352.6109 351.0852 350.01636 349.41595 349.29404 349.65826 350.5136 351.86267 353.70194 356.01386 358.76758 361.94107 365.52548 369.5101 373.88153 378.6249 383.72293 389.15625 394.90454 400.9455 407.2553 413.8091 420.58044 427.54202 434.66577 441.9232 449.28467 456.72113 464.2047 471.70905 479.20737 486.67014 494.06824 501.3737 508.5591 515.59784 522.4649 529.13666 535.59064 541.806 547.76374 553.4469 558.8402 563.93055 568.7068 573.16016 577.2841 581.07416 584.5283 587.64686 590.4324 592.8897 595.02564 596.8497 598.3735 599.61054 600.5761 601.28766 601.76416 602.0267 602.09784 602.00135 601.76197 601.4057 600.96 600.45215 599.91077 599.3645 598.84186 598.3721 597.98395 597.7054 597.56397 597.5865 597.7991 598.22596 598.8907 599.81476 601.0172 602.51435 604.3199 606.44556 608.90046 611.6915 614.8228 618.29566 622.10645 626.2414 630.6779 635.38935 640.3463 645.5165 650.86567 656.3574 661.95276 667.6111 673.2909 678.9485 684.5394 690.01856 695.34 700.45765 705.3253 709.8971 714.1278 717.9731 721.3897 724.33576 726.7711 728.65796 729.9605 730.64545 730.6823 730.0439 728.7061 726.64814 723.8532 720.3082 716.00415 710.9361 705.1033 698.50946 691.16254 683.07514 674.2642 664.7511 654.5614 643.7254 632.27735 620.25525 607.7016 594.66224 581.18634 567.3269 553.13916 538.6813 524.01435 509.20105 494.30524 479.3922 464.5288 449.78195 435.2182 420.9039 406.90463 393.2845 380.10587 367.42914 355.3119 343.80795 332.96872 322.84137 313.46838 304.88776 297.13272 290.23096 284.20468 279.06995 274.8373 271.51108 269.08926 267.55978 266.88956 267.02362 267.90802 269.5013 271.76364 274.65204 278.12097 282.12308 286.60886 291.52713 296.82547 302.45078 308.34876 314.4647 320.74304 327.12506 333.54697 339.94565 346.26566 352.4579 358.47553 364.2736 369.80972 375.04504 379.9439 384.4736 388.60468 392.31116 395.57056 398.36395 400.6761 402.49527 403.81323 404.62518 404.92996 404.72958 404.02954 402.8386 401.16806 399.03238 396.44885 393.4373 390.01968 386.22025 382.06525 377.58267 372.80234 367.75522 362.47333 356.9897 351.33835 345.55347 339.6696 333.7214 327.74365 321.77057 315.83597 309.9733 304.21475 298.59152 293.134 287.87103 282.83 278.03726 273.5176 269.2935 265.386 261.81412 258.59543 255.74533 253.2773 251.20276 249.53128 248.2707 247.42705 247.00432 247.00409 247.4258 248.26837 249.53227 251.21782 253.324 255.84871 258.78873 262.13956 265.89566 270.05032 274.5961 279.52512 284.8284 290.4962 296.51816 302.88318 309.5801 316.59695 323.92175 331.5424 339.44605 347.61975 356.05075 364.7259 373.63178 382.75543 392.08356 401.60208 411.29752 421.1568 431.1659 441.31146 451.5791 461.95462 472.42358 482.97195 493.58487 504.2452 514.9299 525.6097 536.2565 546.84644 557.35767 567.7679 578.05475 588.1964 598.17084 607.9565 617.53235 626.8776 635.9719 644.79566 653.3296 661.55536 669.45527 677.01246 684.2111 691.0363 697.4741 703.5114 709.13685 714.33954 719.1099 723.44 727.323 730.75324 733.72644 736.2398 738.292 739.883 741.014 741.6873 741.90705 741.67914 741.01044 739.9083 738.3825 736.44446 734.1059 731.37946 728.27955 724.82154 721.02155 716.8964 712.46405 707.7432 702.7534 697.51435 692.0468 686.3719 680.5105 674.48414 668.3148 662.0243 655.6344 649.16626 642.6414 636.0812 629.5061 622.9363 616.39136 609.8903 603.4513 597.09186 590.82825 584.67585 578.6492 572.76185 567.02607 561.4531 556.05286 550.8337 545.8028 540.9666 536.32996 531.8959 527.6663 523.6424 519.8236 516.20795 512.7925 509.5729 506.54364 503.69812 501.02853 498.5265 496.182 493.98462 491.92297 489.9851 488.15796 486.42838 484.7826 483.20605 481.68427 480.20236 478.74573 477.30048 475.85324 474.3907 472.89856 471.36316 469.7707 468.10724 466.36053 464.51874 462.5708 460.50662 458.31683 455.99332 453.52893 450.91766 448.15515 445.2413 442.17764 438.96225 435.5915 432.06152 428.36972 424.51447 420.49542 416.31308 411.96896 407.46548 402.8064 397.99686 393.0425 387.9501 382.728 377.38535 371.93222 366.3798 360.74036 355.0273 349.2549 343.43848 337.59393 331.73834 325.8894 320.0659 314.28726 308.57327 302.94443 297.42215 292.0281 286.78433 281.71298 276.83624 272.1774 267.75867 263.60223 259.73084 256.16657 252.93108 250.04517 247.52877 245.40167 243.68212 242.3872 241.53311 241.13439 241.20386 241.75272 242.79065 244.32497 246.36084 248.90129 251.94684 255.49488 259.5415 264.0792 269.09763 274.58322 280.52023 286.88968 293.66922 300.83365 308.3545 316.20084 324.33884 332.73123 341.3386 350.1186 359.02716 368.01743 377.04038 386.04562 394.98157 403.79547 412.42264 420.77936 428.78845 436.39694 443.5647 450.25754 456.44525 462.10205 467.21368 471.77588 475.78287 479.22693 482.10205 484.40546 486.1375 487.3023 487.90683 487.96112 487.47794 486.47305 484.9642 482.9713 480.516 477.62192 474.31354 470.61816 466.56284 462.17566 457.4849 452.52036 447.3119 441.88858 436.2804 430.517 424.627 418.6388 412.581 406.48126 400.36542 394.25964 388.18842 382.17532 376.24374 370.4153 364.71017 359.14795 353.74707 348.52484 343.4973 338.6794 334.08478 329.72668 325.61646 321.7646 318.1805 314.87268 311.84876 309.11588 306.67905 304.5429 302.71173 301.18985 299.98032 299.08533 298.50668 298.24542 298.30164 298.67474 299.3634 300.3661 301.6802 303.30212 305.22858 307.45505 309.97665 312.78705 315.88004 319.256 322.92273 326.8877 331.15286 335.7183 340.58267 345.7436 351.19815 356.94125 362.9679 369.2709 375.84238 382.67337 389.75372 397.07144 404.61502 412.36966 420.3218 428.4545 436.75195 445.19608 453.76816 462.44934 471.2185 480.0555 488.93857 497.84442 506.75134 515.63617 524.47535 533.2451 541.9323 550.5242 559.0048 567.35254 575.54725 583.5694 591.4 599.02015 606.4115 613.5572 620.4407 627.046 633.3574 639.3605 645.0418 650.38764 655.3848 660.02277 664.28956 668.1749 671.66895 674.7623 677.44696 679.71454 681.5578 682.9705 683.94684 684.4812 684.5699 684.20844 683.3933 682.123 680.39496 678.2088 675.565 672.4629 668.9053 664.89344 660.4311 655.5224 650.17225 644.3871 638.17347 631.5393 624.4946 617.0488 609.23645 601.09784 592.66504 583.9625 575.0161 565.8488 556.4861 546.95295 537.27234 527.4688 517.56525 507.58524 497.55072 487.48477 477.4076 467.34036 457.30298 447.31528 437.39557 427.56168 417.8304 408.21915 398.74213 389.41464 380.25043 371.26245 362.46213 353.8623 345.47275 337.3029 329.36188 321.65732 314.19766 306.98828 300.0354 293.34476 286.91983 280.76486 274.88504 269.2788 263.95084 258.90143 254.13249 249.64333 245.43392 241.50328 237.85189 234.47641 231.37577 228.54776 225.99044 223.69985 221.67311 219.90682 218.423 217.2282 216.32288 215.70453 215.37038 215.31719 215.5419 216.0408 216.80928 217.84435 219.14076 220.69516 222.50228 224.55792 226.85619 229.39307 232.16362 235.16144 238.38285 241.82134 245.4722 249.32926 253.3875 257.6747 262.2058 266.98026 272.00024 277.26425 282.77182 288.52084 294.51056 300.73837 307.20236 313.90094 320.83044 327.9858 335.36664 342.96808 350.78445 358.81097 367.044 375.4778 384.10693 392.92227 401.91968 411.09262 420.4333 429.9325 439.58307 449.3759 459.30197 469.3531 479.5175 489.78513 500.14523 510.5872 521.0991 531.67035 542.28547 552.9371 563.6061 574.2835 584.952 595.60126 606.21387 616.7762 627.2706 637.6869 648.00635 658.2127 668.2894 678.2226 687.9948 697.5876 706.98505 716.17255 725.13117 733.84455 742.2948 750.46766 758.34516 765.9115 773.14887 780.0421 786.5775 792.73804 798.50824 803.87427 808.82404 813.343 817.4183 821.0381 824.19165 826.86847 829.05896 830.75525 831.94965 832.636 832.8082 832.97706)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (749.1274 739.9888 729.97785 719.14246 707.5348 695.21015 682.22754 668.649 654.53894 639.96436 624.9945 609.6997 594.1521 578.4243 562.5897 546.7218 530.8936 515.17756 499.6452 484.3664 469.4096 454.8406 440.72314 427.11798 414.08255 401.671 389.93378 378.91727 368.66367 359.21072 350.59143 342.8343 335.9626 329.9948 324.944 320.81854 317.62116 315.34995 313.99738 313.55115 313.99384 315.3036 317.45343 320.41226 324.14444 328.6103 333.76666 339.56677 345.96036 352.8946 360.3139 368.16052 376.37488 384.89594 393.66144 402.60852 411.67368 420.79398 429.90622 438.9487 447.86032 456.5817 465.05545 473.22638 481.04178 488.4521 495.41022 501.87323 507.80154 513.15967 517.91584 522.043 525.5183 528.32337 530.4447 531.8733 532.6047 532.6395 531.98255 530.6433 528.63666 525.9817 522.70166 518.82416 514.3804 509.40515 503.9367 498.0163 491.6877 484.99735 477.99405 470.728 463.251 455.61572 447.87592 440.0853 432.298 424.56757 416.94635 409.48648 402.23834 395.25302 388.5824 382.26932 376.3545 370.87485 365.86462 361.3543 357.37067 353.93643 351.07068 348.788 347.0991 346.01007 345.52292 345.6353 346.3407 347.62827 349.48315 351.8867 354.8158 358.24448 362.14298 366.47824 371.2143 376.3126 381.7321 387.4297 393.36032 399.47803 405.735 412.08292 418.47342 424.85794 431.188 437.41608 443.4958 449.382 455.03122 460.40213 465.45596 470.15637 474.47025 478.3677 481.82178 484.80985 487.31268 489.31564 490.80792 491.78278 492.23813 492.1762 491.60364 490.53287 488.99 487.0273 484.70615 482.06216 479.1324 475.95493 472.56894 469.0132 465.327 461.54886 457.71664 453.8668 450.0349 446.25482 442.55804 438.97476 435.5325 432.25674 429.17044 426.29346 423.6438 421.23636 419.08368 417.1954 415.57864 414.23804 413.17578 412.39157 411.88242 411.64392 411.6692 411.94952 412.47433 413.2318 414.20816 415.38852 416.75732 418.2977 419.99185 421.82187 423.7692 425.8147 427.93958 430.12497 432.35214 434.60306 436.86154 439.11588 441.3565 443.57086 445.74728 447.8747 449.94324 451.94345 453.86725 455.70776 457.45847 459.11435 460.67133 462.12643 463.4773 464.72324 465.86414 466.9008 467.83493 468.66916 469.4072 470.05313 470.61218 471.0896 471.4916 471.82513 472.09717 472.31528 472.48718 472.62213 472.74017 472.89572 473.1759 473.63367 474.276 475.11032 476.14252 477.37775 478.8198 480.47174 482.33624 484.41397 486.7053 489.2097 491.92474 494.8478 497.97488 501.30096 504.82028 508.52585 512.4096 516.4627 520.6751 525.03614 529.53406 534.157 538.89106 543.7228 548.6373 553.61927 558.6533 563.7228 568.81067 573.9001 578.9733 584.0129 589.0004 593.91816 598.74787 603.4717 608.0715 612.5295 616.8281 620.95044 624.87946 628.5987 632.0925 635.3457 638.3437 641.07264 643.5196 645.67237 647.51954 649.051 650.2574 651.1301 651.66224 651.84766 651.68134 651.15937 650.2791 649.03907 647.4392 645.4802 643.1645 640.4955 637.47754 634.1165 630.4194 626.39557 622.0592 617.43006 612.52735 607.367 601.9659 596.34107 590.50916 584.48066 578.25415 571.825 565.1992 558.3894 551.4085 544.26984 536.9877 529.5764 522.05 514.4233 506.71167 498.93097 491.09637 483.22397 475.33035 467.43173 459.54526 451.68768 443.876 436.12778 428.46045 420.89148 413.43884 406.1203 398.95346 391.956 385.14587 378.5404 372.15714 366.01315 360.1252 354.50983 349.18298 344.16 339.45572 335.08423 331.05908 327.39224 324.09506 321.17795 318.65 316.51883 314.79062 313.47012 312.5604 312.06302 311.97745 312.30124 313.03015 314.1579 315.67593 317.5735 319.83795 322.45438 325.4051 328.67056 332.22952 336.0583 340.13098 344.42 348.8958 353.52658 358.2797 363.12164 368.01685 372.9291 377.8218 382.6577 387.39993 392.01175 396.4567 400.69962 404.70676 408.44608 411.8875 415.0024 417.761 420.1352 422.10907 423.67996 424.85178 425.63297 426.0365 426.07965 425.78348 425.1728 424.27542 423.12247 421.7476 420.1862 418.4767 416.66467 414.8038 412.9474 411.1397 409.419 407.823 406.38934 405.1539 404.15118 403.4148 402.97595 402.86407 403.1064 403.72757 404.75003 406.19345 408.0747 410.40784 413.2039 416.47144 420.216 424.44022 429.14352 434.32285 439.9726 446.08398 452.6458 459.64438 467.06397 474.88632 483.0912 491.65637 500.55798 509.77042 519.26667 529.0183 538.99604 549.16974 559.508 569.9793 580.5516 591.19257 601.86915 612.54895 623.2001 633.79035 644.2886 654.6637 664.886 674.92566 684.7545 694.3449 703.67127 712.7085 721.4323 729.8204 737.8524 745.50855 752.7702 759.6209 766.04584 772.0347 777.5875 782.7069 787.3847 791.6067 795.35926 798.6291 801.4041 803.67316 805.4261 806.6538 807.34815 807.5017 807.1083 806.1633 804.6625 802.6027 799.98304 796.8026 793.0618 788.76276 783.9085 778.50287 772.5515 766.0611 759.0391 751.49445 743.4373 734.879 725.83216 716.30994 706.32734 695.8997 685.0443 673.77924 662.12336 650.0964 637.71906 625.016 612.0184 598.7629 585.2827 571.6045 557.75397 543.757 529.64026 515.4305 501.15494 486.84088 472.51593 458.2078 443.94458 429.75427 415.6649 401.70438 387.9005 374.28018 360.87045 347.69864 334.79117 322.17352 309.87128 297.90927 286.31134 275.10065 264.29987 253.93059 244.01338 234.56816 225.61357 217.16715 209.24546 201.86362 195.03603 188.77562 183.09378 178.00081 173.50577 169.61626 166.33838 163.67671 161.63437 160.21276 159.41207 159.23111 159.667 160.71555 162.37113 164.62668 167.47359 170.90196 174.90087 179.45766 184.55846 190.18828 196.33046 202.96758 210.0814 217.65196 225.65869 234.07997 242.8933 252.07534 261.60175 271.44772 281.58798 291.99667 302.6469 313.5114 324.56326 335.775 347.11932 358.5681 370.0932 381.6671 393.26215 404.8509 416.4064 427.9018 439.311 450.60828 461.76843 472.76712 483.58023 494.18512 504.55972 514.6829 524.53467 534.0961 543.34906 552.27686 560.8638 569.09595 576.96027 584.4449 591.53937 598.235 604.5243 610.4051 615.8824 620.9623 625.6467 629.93415 633.82355 637.315 640.4095 643.1094 645.41767 647.3388 648.8782 650.0419 650.8374 651.273 651.3574 651.09705 650.4948 649.5538 648.27796 646.6726 644.7441 642.50086 639.9531 637.112 633.9897 630.6005 626.96045 623.0859 618.99506 614.708 610.2459 605.6305 600.8844 596.03217 591.0995 586.1119 581.09595 576.0792 571.089 566.15314 561.29987 556.557 551.9523 547.5132 543.266 539.2365 535.4497 531.9293 528.6974 525.77454 523.1796 520.92926 519.0382 517.5186 516.3801 515.62977 515.27155 515.30677 515.7333 516.54615 517.737 519.2937 521.2015 523.4419 525.9928 528.829 531.92255 535.242 538.7531 542.41877 546.1991 550.0522 553.93354 557.7981 561.59876 565.28705 568.81415 572.13056 575.18757 577.93696 580.3314 582.3256 583.8761 584.94196 585.48517 585.4721 584.8727 583.66144 581.8179 579.3269 576.17945 572.37726 567.942 562.90705 557.3071 551.1784 544.5611 537.49817 530.03687 522.2285 514.12684 505.78607 497.26126 488.60663 479.87714 471.12714 462.4099 453.77728 445.2803 436.96765 428.88626 421.07947 413.58908 406.4528 399.70657 393.38193 387.50793 382.11032 377.21027 372.82645 368.97363 365.66382 362.90533 360.70374 359.06043 357.9746 357.4427 357.45834 358.01245 359.0937 360.68893 362.78244 365.35715 368.39432 371.87366 375.77335 380.07083 384.7431 389.76605 395.115 400.76526 406.69107 412.86768 419.26984 425.87268 432.65152 439.58237 446.64136 453.80554 461.05283 468.36215 475.71225 483.08395 490.45816 497.8178 505.14563 512.4258 519.6441 526.7874 533.84327 540.7998 547.6469 554.37555 560.9776 567.445 573.77247 579.9543 585.98584 591.89167 597.7144 603.4729 609.1623 614.76966 620.28254 625.68775 630.9726 636.12354 641.1276 645.97175 650.6429 655.12775 659.4144 663.49 667.342 670.9588 674.32776 677.438 680.27796 682.8371 685.10474 687.07105 688.7267 690.0625 691.07007 691.74134 692.06946 692.0476 691.66974 690.9305 689.817 688.3166 686.4231 684.133 681.4453 678.35956 674.8757 670.9961 666.7229 662.06116 657.01416 651.58826 645.7899 639.6271 633.10877 626.2459 619.0489 611.53 603.7016 595.57935 587.17646 578.51014 569.59766 560.4565 551.10547 541.5636 531.85187 521.9909 512.00275 501.9104 491.7356 481.50226 471.2336 460.95526 450.69232 440.46896 430.30966 420.24054 410.28674 400.47382 390.82694 381.37082 372.13068 363.13116 354.39597 345.9486 337.84567 330.13818 322.85043 315.9927 309.57208 303.59476 298.06525 292.9863 288.35944 284.18454 280.46048 277.18466 274.3539 271.96268 270.00516 268.47412 267.362 266.6597 266.3577 266.4449 266.91043 267.7426 268.92896 270.45566 272.30957 274.4772 276.94434 279.69583 282.71686 285.99268 289.5083 293.2487 297.19763 301.3407 305.66266 310.14893 314.7828 319.55075 324.4374 329.42993 334.51282 339.67282 344.8964 350.1705 355.482 360.81882 366.16824 371.52017 376.86258 382.18515 387.47748 392.72955 397.93243 403.07678 408.15067 413.14484 418.04996 422.8602 427.56702 432.1664 436.6513 441.0168 445.2576 449.36996 453.34943 457.19354 460.8978 464.46036 467.8784 471.1505 474.2747 477.2501 480.07504 482.74933 485.273 487.64615 489.868 491.9613 493.934 495.78513 497.51312 499.11658 500.5938 501.94357 503.16434 504.25574 505.21576 506.04413 506.7405 507.30463 507.73502 508.0328 508.19696 508.2278 508.1263 507.89224 507.52652 507.03 506.40344 505.64722 504.76505 503.75516 502.62112 501.36346 499.9848 498.48685 496.8719 495.14203 493.29974 491.34744 489.28836 487.12494 484.86072 482.4965 480.0385 477.4877 474.84943 472.12607 469.32166 466.43994 463.4851 460.459 457.36774 454.216 451.0069 447.74432 444.4341 441.0794 437.6859 434.2574 430.79886 427.31482 423.81088 420.2911 416.7592 413.22308 409.68558 406.15286 402.62756 399.11722 395.627 392.15906 388.72153 385.3186 381.9543 378.63477 375.3653 372.1507 368.99594 365.9054 362.88467 359.93927 357.07242 354.20578)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (695.1736 702.33136 709.339 716.18305 722.85047 729.3281 735.60315 741.6628 747.49476 753.0867 758.42664 763.50306 768.30445 772.8202 777.0394 780.95246 784.54926 787.8207 790.7583 793.3536 795.5992 797.488 799.01355 800.17005 800.9521 801.3556 801.3766 801.012 800.2592 799.1168 797.5839 795.66034 793.3468 790.6449 787.5567 784.0854 780.23505 776.01014 771.4166 766.46076 761.14985 755.492 749.4964 743.1724 736.5311 729.5835 722.3422 714.81995 707.0306 698.9888 690.7097 682.2094 673.50434 664.6122 655.5506 646.3381 636.99396 627.5377 617.98945 608.36957 598.6988 588.9988 579.29096 569.59705 559.9388 550.3384 540.81806 531.39954 522.10547 512.95746 503.97717 495.18628 486.60596 478.25687 470.15958 462.33353 454.79803 447.56952 440.65152 434.02853 427.715 421.7243 416.06903 410.76093 405.81043 401.22696 397.0188 393.19315 389.75592 386.7119 384.06442 381.81577 379.9668 378.51703 377.4649 376.8072 376.5397 376.65692 377.15192 378.01666 379.24207 380.81775 382.73145 384.96808 387.5119 390.34637 393.45435 396.81833 400.42044 404.24228 408.26572 412.4722 416.84363 421.3617 426.00873 430.76736 435.6205 440.55203 445.54623 450.58853 455.66473 460.76196 465.86838 470.9729 476.06635 481.13977 486.18607 491.19925 496.1744 501.10806 505.99817 510.8434 515.6442 520.4018 525.11866 529.7982 534.4447 539.06366 543.6608 548.2431 552.81745 557.39136 561.97254 566.5687 571.1878 575.8368 580.52295 585.25275 590.03144 594.86365 599.75287 604.7014 609.7097 614.7754 619.8858 625.007 630.09937 635.1481 640.13715 645.0508 649.8719 654.5833 659.16694 663.60425 667.876 671.9626 675.84345 679.4982 682.9053 686.04316 688.88965 691.4222 693.6182 695.45484 696.90925 697.9587 698.5801 698.7508 698.44904 697.6531 696.3416 694.49494 692.09375 689.1199 685.55646 681.3883 676.60157 671.18476 665.12757 658.42267 651.0646 643.05036 634.37977 625.05536 615.0829 604.4704 593.23017 581.3767 568.9286 555.90986 542.3568 528.32996 513.89295 499.08112 483.93155 468.4828 452.77512 436.84982 420.74994 404.5194 388.2033 371.84756 355.4993 339.2061 323.0159 306.97717 291.1388 275.54962 260.25824 245.31313 230.76233 216.65317 203.03212 189.94483 177.43553 165.54714 154.32106 143.79698 134.0124 125.00234 116.79581 109.40439 102.82365 97.0591 92.13067 88.05532 84.84658 82.51487 81.067444 80.50795 80.83639 82.04953 84.14018 87.09754 90.90772 95.552666 101.010926 107.257996 114.265396 122.001465 130.43091 139.5153 149.2141 159.48445 170.28104 181.55629 193.26093 205.34348 217.7508 230.42862 243.32183 256.3743 269.52957 282.73102 295.9222 309.04733 322.05118 334.88016 347.48163 359.80487 371.80106 383.424 394.63013 405.37842 415.63144 425.3552 434.51886 443.09592 451.06348 458.4032 465.1008 471.14658 476.53522 481.26593 485.34262 488.7739 491.57275 493.75662 495.3475 496.3717 496.85956 496.84534 496.36737 495.46716 494.18958 492.58267 490.69708 488.58545 486.3035 483.91342 481.4937 479.13565 476.9178 474.89975 473.13824 471.68683 470.59555 469.90707 469.65237 469.85217 470.52625 471.693 473.3667 475.55838 478.27533 481.5211 485.29556 489.59503 494.41266 499.73843 505.55896 511.8579 518.6163 525.8128 533.42334 541.4217 549.77985 558.4676 567.4538 576.7054 586.1881 595.86707 605.7063 615.66925 625.7193 635.81946 645.9323 656.0213 666.0493 675.9803 685.7786 695.40925 704.83814 714.0323 722.95936 731.5885 739.8902 747.836 755.39887 762.55335 769.2756 775.54297 781.33497 786.63215 791.4171 795.6739 799.3885 802.5485 805.1432 807.1633 808.6018 809.45276 809.71235 809.37836 808.44977 806.9278 804.81476 802.115 798.8338 794.97846 790.5573 785.5806 780.0597 774.0073 767.4374 760.3651 752.8071 744.78125 736.30634 727.4021 718.0895 708.39057 698.3282 687.92615 677.209 666.2015 654.92774 643.41205 631.6782 619.7506 607.65314 595.40986 583.045 570.5822 558.0452 545.4578 532.8433 520.22455 507.62344 495.0584 482.54245 470.08694 457.7081 445.42545 433.258 421.22473 409.3442 397.6343 386.1124 374.7956 363.70062 352.84393 342.2413 331.90762 321.85757 312.10556 302.6653 293.54938 284.77005 276.33914 268.2679 260.56674 253.24515 246.31208 239.77606 233.64456 227.92427 222.62126 217.74077 213.28736 209.26456 205.67517 202.52156 199.80501 197.5258 195.68352 194.27713 193.30448 192.76284 192.64849 192.95714 193.68378 194.82242 196.36627 198.30814 200.64029 203.35367 206.43878 209.88574 213.68413 217.82321 222.29122 227.07575 232.16461 237.54512 243.204 249.12732 255.3017 261.71317 268.34735 275.18997 282.2266 289.4432 296.8266 304.36395 312.04315 319.8521 327.77918 335.8132 343.94357 352.15973 360.45187 368.8102 377.2256 385.6891 394.19232 402.72614 411.28296 419.85495 428.4345 437.01428 445.5866 454.1443 462.68002 471.18652 479.6564 488.08194 496.45566 504.76975 513.0159 521.1857 529.2703 537.2609 545.1481 552.92176 560.57166 568.0873 575.45777 582.67017 589.7081 596.5539 603.1935 609.61774 615.81946 621.7921 627.5303 633.029 638.284 643.292 648.0507 652.5584 656.8139 660.8165 664.5667 668.0658 671.3156 674.31904 677.079 679.5991 681.8837 683.93805 685.76716 687.3772 688.77454 689.966 690.95826 691.7587 692.3749 692.8143 693.08454 693.1936 693.1494 692.95954 692.63135 692.17237 691.58985 690.8903 690.08027 689.1661 688.1533 687.04725 685.85236 684.57264 683.2111 681.77076 680.2539 678.6613 676.9936 675.25116 673.4329 671.5373 669.56214 667.50434 665.3604 663.12604 660.796 658.36487 655.8267 653.17487 650.402 647.50074 644.4632 641.28156 637.94715 634.4514 630.7863 626.9435 622.9143 618.6909 614.26557 609.63105 604.78 599.7063 594.40436 588.8693 583.0971 577.08484 570.8304 564.33265 557.59186 550.6097 543.38874 535.93305 528.2479 520.34046 512.2194 503.8944 495.37665 486.6794 477.81726 468.80585 459.66275 450.4067 441.05844 431.63953 422.17267 412.6818 403.19214 393.7373 384.36166 375.1059 365.99652 357.05106 348.2855 339.71545 331.35632 323.22324 315.33075 307.6932 300.32486 293.23944 286.4502 279.96967 273.8107 267.9885 262.51947 257.41818 252.69744 248.3687 244.44292 240.93036 237.84066 235.18222 232.9631 231.19043 229.87042 229.00817 228.60776 228.67249 229.2044 230.20446 231.67217 233.60619 236.00392 238.86145 242.1734 245.93334 250.13372 254.76535 259.81766 265.2786 271.13504 277.37286 283.97604 290.92758 298.20895 305.80054 313.6819 321.8309 330.22437 338.83835 347.6478 356.62643 365.74753 374.9839 384.30667 393.6873 403.09622 412.5033 421.8786 431.1922 440.4133 449.51132 458.4562 467.2181 475.7671 484.07428 492.11115 499.84964 507.2629 514.3253 521.012 527.2993 533.16456 538.58735 543.5485 548.0299 552.01557 555.4918 558.4469 560.8705 562.75434 564.0931 564.8833 565.12366 564.8153 563.9613 562.5678 560.6428 558.19696 555.2501 551.8413 548.0149 543.8075 539.2503 534.37415 529.2106 523.79084 518.1403 512.2809 506.23712 500.0376 493.71252 487.29187 480.80533 474.28192 467.7498 461.23703 454.77087 448.3776 442.08258 435.91043 429.8851 424.03006 418.3666 412.91568 407.69745 402.731 398.03436 393.6245 389.51746 385.7278 382.26975 379.15616 376.39923 374.00937 371.99646 370.36966 369.13687 368.30472 367.8791 367.86487 368.26636 369.086 370.32544 371.9865 374.0686 376.5706 379.49097 382.82666 386.5738 390.7272 395.28125 400.22928 405.5633 411.27472 417.35373 423.7895 430.57123 437.6868 445.12262 452.8633 460.89267 469.1938 477.7489 486.53857 495.54306 504.74185 514.1136 523.6357 533.2853 543.0385 552.8712 562.75794 572.6728 582.58967 592.48157 602.3388 612.16596 621.9575 631.69617 641.3591 650.92286 660.363 669.6553 678.7751 687.6978 696.3993 704.8538 713.0367 720.9234 728.48957 735.7117 742.5654 749.02784 755.07654 760.6899 765.8469 770.5276 774.71125 778.38135 781.5207 784.1131 786.1443 787.60047 788.47065 788.74445 788.41254 787.4821 785.9684 783.8861 781.248 778.067 774.35834 770.13575 765.41517 760.21235 754.54395 748.4258 741.8742 734.9067 727.5396 719.7888 711.67005 703.2013 694.3969 685.2724 675.84394 666.12415 656.1288 645.87055 635.3632 624.6192 613.65027 602.4682 591.08405 579.50946 567.7543 555.8284 543.7415 531.5029 519.1213 506.6058 493.9644 481.2063 468.33975 455.37354 442.3156 429.17487 415.9603 402.68094 389.346 375.96527 362.54886 349.12894 335.74338 322.42123 309.1856 296.05927 283.06317 270.21783 257.5451 245.06449 232.79517 220.75556 208.96369 197.43723 186.19171 175.24279 164.6052 154.29248 144.31839 134.69483 125.43257 116.54196 108.03286 99.91326 92.190926 84.873 77.96523 71.47232 65.39797 59.745697 54.517945 49.716568 45.34231 41.394623 37.872574 34.775143 32.099793 29.843604 28.002602 26.57297 25.549675 24.926623 24.697913 24.857323 25.396935 26.309433 27.586806 29.219717 31.200409 33.51884 36.16591 39.129776 42.402172 45.971905 49.828007 53.99087 58.46647 63.248314 68.32845 73.69609 79.34355 85.25984 91.43498 97.85792 104.51867 111.40596 118.5096 125.8154 133.31381 140.99288 148.84047 156.84398 164.99088 173.26963 181.66777 190.17192 198.77108 207.45153 216.22505 225.09642 234.05805 243.10288 252.222 261.41058 270.65915 279.9619 289.3077 298.69226 308.10535 317.53995 326.98743 336.4415 345.89233 355.33246 364.75317 374.14835 383.50818 392.82684 402.09412 411.3031 420.4475 429.51846 438.50858 447.4099 456.21664 464.91934 473.51144 481.9865 490.33615 498.5538 506.63455 514.57026 522.3545 529.9811 537.44446 544.73847 551.8563 558.7909 565.53925 572.09467 578.45276 584.6069 590.5529 596.28675 601.80207 607.0967 612.16437 617.0019 621.60547 625.9701 630.0951 633.9752 637.60755 640.9899 644.12104 646.99646 649.6163 651.9778 654.0807 655.9228 657.505 658.82605 659.8858 660.68677 661.2282 661.5115 661.5399 661.314 660.8375 660.114 659.14795 657.9418 656.50257 654.8359 653.1673)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (428.2446 419.4261 410.84787 402.5604 394.613 387.053 379.92505 373.27155 367.13214 361.54343 356.53882 352.14816 348.39774 345.3105 342.905 341.1961 340.1947 339.90723 340.3364 341.48038 343.33344 345.88556 349.1228 353.02728 357.57706 362.74677 368.50726 374.82574 381.66715 388.99237 396.76025 404.92682 413.4461 422.2699 431.34885 440.63178 450.0668 459.60104 469.1817 478.75543 488.26956 497.67163 506.91052 515.93616 524.6998 533.1549 541.25696 548.9636 556.23566 563.0365 569.3324 575.0936 580.29346 584.909 588.9213 592.3153 595.07966 597.20734 598.6956 599.54584 599.76294 599.3565 598.3399 596.73035 594.5487 591.8197 588.5715 584.8351 580.64515 576.0383 571.0544 565.7352 560.12464 554.2677 548.2116 542.00354 535.6924 529.32685 522.95826 516.64075 510.42288 504.3516 498.4724 492.82898 487.4631 482.4137 477.71735 473.40753 469.51453 466.0656 463.08368 460.58832 458.59525 457.11606 456.15814 455.72476 455.81503 456.4239 457.5419 459.15564 461.24777 463.7967 466.77728 470.16083 473.9153 478.00528 482.39282 487.03717 491.89514 496.92184 502.0702 507.29263 512.54 517.7624 522.91 527.9335 532.7835 537.41175 541.77124 545.8171 549.5055 552.7958 555.6496 558.0321 559.91126 561.25904 562.0511 562.2672 561.8913 560.9122 559.3228 557.121 554.30994 550.8967 546.8939 542.31916 537.1943 531.54596 525.40564 518.8092 511.79614 504.41074 496.7003 488.71594 480.5117 472.14432 463.67303 455.15875 446.66434 438.2534 429.99045 421.94034 414.16782 406.73737 399.72034 393.20282 387.27032 381.97928 377.38046 373.51862 370.43225 368.15326 366.7069 366.1111 366.3782 367.51267 369.51306 372.37122 376.0723 380.5958 385.91492 391.9975 398.80646 406.29938 414.4296 423.14606 432.39462 442.11743 452.25446 462.74283 473.51852 484.51572 495.66837 506.9098 518.1734 529.3933 540.505 551.44526 562.153 572.56916 582.638 592.30634 601.52497 610.2479 618.43366 626.04474 633.0477 639.41486 645.1228 650.15284 654.4952 658.1519 661.1354 663.4561 665.12745 666.16645 666.59296 666.42865 665.6986 664.4287 662.64734 660.3838 657.6688 654.53345 651.0101 647.131 642.9281 638.43384 633.6808 628.69996 623.5224 618.1783 612.69684 607.1065 601.43415 595.70557 589.9457 584.1776 578.4233 572.7036 567.03864 561.44916 555.9543 550.56525 545.2874 540.1252 535.08124 530.15735 525.35456 520.673 516.11127 511.6679 507.34027 503.1255 499.02014 495.02057 491.12253 487.3218 483.6139 479.99426 476.4571 472.99634 469.60645 466.28317 463.02286 459.82233 456.67844 453.58893 450.55124 447.56345 444.62433 441.7333 438.8896 436.0931 433.3445 430.6445 427.99414 425.39514 422.84967 420.35992 417.92847 415.55838 413.25305 411.01538 408.84915 406.75815 404.746 402.8165 400.97382 399.22134 397.5633 396.00317 394.5444 393.19037 391.9443 390.809 389.7871 388.88135 388.09335 387.42456 386.8766 386.45017 386.14575 385.9636 385.90292 385.96314 386.1429 386.44058 386.85364 387.3782 388.0069 388.72815 389.53232 390.4132 391.3644 392.3793 393.4505 394.56564 395.70325 396.8421 397.97266 399.09168 400.19635 401.28442 402.3541 403.40433 404.43472 405.44525 406.43668 407.4097 408.36612 409.308 410.23776 411.15836 412.07312 412.9857 413.89975 414.81943 415.74915 416.69308 417.6557 418.641 419.65295 420.69556 421.7724 422.88663 424.04102 425.23758 426.47806 427.76297 429.09222 430.46524 431.88007 433.33386 434.82288 436.3419 437.885 439.44473 441.0125 442.57904 444.1329 445.6622 447.15366 448.59277 449.96408 451.2515 452.43747 453.5041 454.43243 455.20355 455.79785 456.19562 456.37772 456.32434 456.01672 455.43692 454.56772 453.3931 451.8987 450.07214 447.90274 445.38235 442.50537 439.26895 435.6738 431.7239 427.4268 422.79388 417.8409 412.58762 407.0581 401.28125 395.2906 389.1283 382.8588 376.57208 370.35675 364.28442 358.42172 352.83447 347.5873 342.74265 338.3609 334.49976 331.21356 328.55316 326.5656 325.29346 324.77554 325.04794 326.14368 328.08868 330.89798 334.5787 339.13297 344.55765 350.84457 357.98035 365.94675 374.72104 384.27573 394.57928 405.59564 417.28476 429.60327 442.5043 455.93756 469.8504 484.18735 498.8908 513.90107 529.1573 544.5971 560.15717 575.77375 591.3826 606.9194 622.32044 637.52265 652.4634 667.0815 681.3177 695.1139 708.41407 721.1643 733.31336 744.812 755.61445 765.6778 774.9622 783.43085 791.0501 797.7906 803.62647 808.5352 812.49775 815.4992 817.5288 818.5792 818.6471 817.7331 815.8411 812.9787 809.1581 804.39527 798.7086 792.1203 784.6556 776.344 767.2175 757.31196 746.66736 735.324 723.31934 710.6906 697.4765 683.71845 669.45936 654.7438 639.61786 624.1293 608.3266 592.25977 575.9792 559.53626 542.98194 526.3695 509.75003 493.1751 476.69595 460.3624 444.22394 428.32864 412.72357 397.45398 382.56268 368.09073 354.07748 340.55905 327.56958 315.14008 303.29822 292.06876 281.47397 271.53162 262.25684 253.6611 245.75164 238.53118 231.99265 226.12085 220.89992 216.31613 212.35552 209.00255 206.2397 204.04799 202.4074 201.29729 200.69574 200.5801 200.9274 201.71419 202.91736 204.51361 206.47968 208.79308 211.43206 214.37499 217.60123 221.09136 224.82683 228.79009 232.96498 237.33661 241.89144 246.61734 251.50347 256.54065 261.7209 267.0373 272.48462 278.05927 283.75842 289.58054 295.5255 301.59393 307.787 314.10687 320.5568 327.14005 333.86084 340.72363 347.73322 354.89426 362.21176 369.6901 377.33353 385.14597 393.13028 401.28912 409.62357 418.13434 426.82187 435.6841 444.71738 453.91776 463.2802 472.7973 482.45984 492.25763 502.17868 512.20936 522.33484 532.53797 542.80036 553.1023 563.422 573.73664 584.0217 594.2519 604.4005 614.4392 624.33924 634.07117 643.60456 652.9085 661.95185 670.7028 679.1299 687.20185 694.8875 702.15577 708.9765 715.3206 721.16004 726.46735 731.21674 735.384 738.94684 741.88434 744.1778 745.81 746.76685 747.0367 746.6093 745.47767 743.638 741.0887 737.83167 733.87275 729.22016 723.88617 717.8863 711.2386 703.96424 696.08686 687.6327 678.6305 669.11164 659.1096 648.6599 637.79975 626.5652 614.9838 603.08075 590.89155 578.4636 565.8487 553.09937 540.2694 527.41364 514.58747 501.8457 489.2436 476.83652 464.6795 452.82523 441.3264 430.2339 419.59637 409.46072 399.8716 390.87125 382.49933 374.79144 367.77985 361.49445 355.96082 351.2 347.22968 344.06308 341.70883 340.17114 339.44998 339.5403 340.43237 342.1122 344.56046 347.75388 351.66455 356.25958 361.50266 367.35242 373.7638 380.6887 388.07504 395.86713 404.00665 412.43292 421.08298 429.89218 438.7939 447.7215 456.6071 465.38242 473.9799 482.33368 490.37872 498.0509 505.28912 512.0358 518.23615 523.8388 528.79737 533.07 536.6199 539.41626 541.4338 542.6528 543.06165 542.65497 541.4333 539.4057 536.5882 533.0033 528.68097 523.65857 517.9808 511.69873 504.88327 497.6416 490.08524 482.30484 474.37683 466.3743 458.36954 450.42957 442.6198 435.00256 427.63245 420.55673 413.81796 407.45477 401.50037 395.9827 390.92502 386.34653 382.262 378.68173 375.6115 373.054 371.00778 369.46777 368.4255 367.87067 367.78973 368.1673 368.98557 370.22546 371.8667 373.88815 376.2667 378.97974 382.00522 385.3192 388.8986 392.72183 396.7667 401.0116 405.43738 410.02463 414.75552 419.61282 424.58176 429.648 434.79837 440.02103 445.3076 450.64822 456.03583 461.46356 466.92633 472.42136 477.9452 483.4955 489.07068 494.67007 500.2956 505.94882 511.631 517.34406 523.0881 528.864 534.6729 540.51416 546.3883 552.2947 558.2315 564.1966 570.18757 576.2001 582.22895 588.2683 594.3113 600.35 606.37525 612.3751 618.331 624.21845 630.0108 635.6799 641.19727 646.53345 651.659 656.5439 661.1592 665.47425 669.4599 673.0879 676.3281 679.1541 681.5381 683.4555 684.881 685.7911 686.1651 685.9832 685.22767 683.8835 681.9367 679.3774 676.19635 672.388 667.949 662.88056 657.18506 650.8687 643.9406 636.4163 628.32117 619.68494 610.53876 600.9169 590.85535 580.3919 569.56635 558.4185 546.9908 535.3254 523.4648 511.453 499.33337 487.1498 474.94605 462.76523 450.64902 438.6394 426.7767 415.10065 403.64984 392.46094 381.56958 371.0101 360.81363 351.01114 341.62988 332.69772 324.23898 316.2752 308.8272 301.9126 295.54733 289.74512 284.51743 279.8732 275.8197 272.36108 269.50067 267.23853 265.57245 264.499 264.01166 264.10324 264.75507 265.94138 267.6389 269.82294 272.4684 275.55118 279.0442 282.92075 287.1539 291.7159 296.5796 301.71634 307.09848 312.69815 318.4878 324.4402 330.52826 336.72513 343.00668 349.34753 355.72256 362.1075 368.47943 374.81683 381.09876 387.3041 393.41437 399.41116 405.27762 410.99597 416.55206 421.93127 427.12134 432.1096 436.88495 441.43854 445.75977 449.84137 453.67532 457.25842 460.58292 463.64655 466.44473 468.97635 471.2393 473.233 474.95816 476.41516 477.60562 478.53217 479.19772 479.60617 479.7614 479.66736 479.35312 478.83286 478.11044 477.19022 476.07517 474.76895 473.27582 471.60037 469.7459 467.71753 465.51956 463.1575 460.63492 457.95807 455.13086 452.15857 449.04697 445.7999 442.42416 438.924 435.30545 431.57242 427.73084 423.77924 419.71783 415.54923 411.27744 406.90625 402.43802 397.87674 393.22742 388.49365 383.68015 378.7904 373.83093 368.80496 363.71823 358.57532 353.3815 348.14282 342.86417 337.55136 332.2117 326.8501 321.47116 316.08353 310.6924 305.30493 299.92676 294.5658 289.2274 283.91986 278.65027 273.42334 268.2507 263.1351 258.08737 253.11157 248.21875 243.41384 238.70465 234.09876 229.60446 225.22837 220.97879 216.8623 212.88765 209.06128 205.39054 201.8828 198.54644 195.38637 192.41196 189.62824 187.04346 184.66378 182.49485 180.54477 178.81761 177.32045 176.0599 175.0403 174.26787 173.74575 173.48169 173.47849 173.7399 174.27066 175.07392 176.15407 177.51293 179.15433 181.07935 183.28943 185.78847 188.57587 191.6512 195.01586 198.6705 202.32769)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 14.999999 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.000002 29.999999 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.000004 59.000004 59.999997 60.999997 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.00001 117.00001 118.00001 118.99999 119.99999 120.99999 121.99999 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.00002 232.00002 233.00002 234.00002 235.00002 236.00002 237.00002 237.99999 238.99999 239.99999 240.99999 241.99999 242.99999 243.99999 244.99999 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 440.99997 442.0 442.99997 444.0 444.99997 446.0 446.99997 448.0 448.99997 450.0 450.99997 452.0 452.99997 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.00003 463.0 464.00003 465.0 466.00003 467.0 468.00003 469.0 470.00003 471.0 472.00003 473.0 474.00003 475.0 475.99997 477.0 477.99997 479.0 479.99997 481.0 481.99997 483.0 483.99997 485.0 485.99997 487.0 487.99997 489.0 489.99997 491.0 492.0 493.0 494.0 495.0 496.0 497.00003 498.0 499.00003 500.0 501.00003 502.0 503.00003 504.0 505.00003 506.0 507.00003 508.0 509.00003 510.0 511.00003 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0 720.0 721.0 722.0 723.0 724.0 725.0 726.0 727.0 728.0 729.0 730.0 731.0 732.0 733.0 734.0 735.0 736.0 737.0 738.0 739.0 740.0 741.0 742.0 743.0 744.0 745.0 746.0 747.0 748.0 749.0 750.0 751.0 752.0 753.0 754.0 755.0 756.0 757.0 758.0 759.0 760.0 761.0 762.0 763.0 764.0 765.0 766.0 767.0 768.0 769.0 770.0 771.0 772.0 773.0 774.0 775.0 776.0 777.0 778.0 779.0 780.0 781.0 782.0 783.0 784.0 785.0 786.0 787.0 788.0 789.0 790.0 791.0 792.0 793.0 794.0 795.0 796.0 797.0 798.0 799.0 800.0 801.0 802.0 803.0 804.0 805.0 806.0 807.0 808.0 809.0 810.0 811.0 812.0 813.0 814.0 815.0 816.0 817.0 818.0 819.0 820.0 821.0 822.0 823.0 824.0 825.0 826.0 827.0 828.0 829.0 830.0 831.0 832.0 833.0 834.0 835.0 836.0 837.0 838.0 839.0 840.0 841.0 842.0 843.0 844.0 845.0 846.0 847.0 848.0 849.0 850.0 851.0 852.0 853.0 854.0 855.0 856.0 857.0 858.0 859.0 860.0 861.0 862.0 863.0 864.0 865.0 866.0 867.0 868.0 869.0 870.0 871.0 872.0 873.0 874.0 875.0 876.0 877.0 878.0 879.0 880.0 881.0 881.99994 883.0 884.0 885.00007 885.99994 887.0 888.0 889.00007 889.99994 891.0 892.0 893.00007 893.99994 895.0 896.0 897.00007 897.99994 899.0 900.0 901.00007 901.99994 903.0 904.0 905.00007 905.99994 907.0 908.0 909.00007 910.0 911.0 912.0 913.00007 914.0 915.0 916.0 916.99994 918.0 919.0 920.0 920.99994 922.0 923.0 924.00007 924.99994 926.0 927.0 928.00007 928.99994 930.0 931.0 932.00007 932.99994 934.0 935.0 936.00007 936.99994 938.0 939.0 940.00007 940.99994 942.0 943.0 944.00007 945.0 946.0 947.0 948.00007 949.0 950.0 951.0 951.99994 953.0 954.0 955.0 955.99994 957.0 958.0 959.00007 959.99994 961.0 962.0 963.00007 963.99994 965.0 966.0 967.00007 967.99994 969.0 970.0 971.00007 971.99994 973.0 974.0 975.00007 975.99994 977.0 978.0 979.00007 979.99994 981.0 982.0 983.00007 984.0 985.0 986.0 987.00007 988.0 989.0 990.0 990.99994 992.0 993.0 994.00007 994.99994 996.0 997.0)) (quote (446.8144 449.19214 451.60175 454.04254 456.5135 459.0136 461.5422 464.09802 466.68024 469.28784 471.9196 474.57465 477.25177 479.94992 482.66797 485.40466 488.15878 490.92914 493.71445 496.51337 499.32455 502.1467 504.97815 507.81754 510.6634 513.514 516.36774 519.22297 522.0778 524.93055 527.7793 530.622 533.4567 536.28125 539.0936 541.8914 544.6724 547.4342 550.1744 552.89026 555.5793 558.23884 560.866 563.4582 566.01227 568.5254 570.99445 573.4164 575.788 578.10614 580.36756 582.569 584.707 586.7784 588.7798 590.70777 592.5591 594.33045 596.01825 597.61957 599.13105 600.54957 601.8721 603.0956 604.2173 605.23444 606.1442 606.9445 607.633 608.2075 608.6662 609.00757 609.2299 609.3323 609.31385 609.17395 608.912 608.5248 607.99085 607.25885 606.3254 605.187 603.8412 602.28565 600.51886 598.5398 596.3481 593.944 591.3286 588.5036 585.4714 582.235 578.7986 575.1669 571.3454 567.34064 563.1598 558.81104 554.3032 549.64624 544.85096 539.93006 534.8989 529.7702 524.5575 519.2747 513.93677 508.55893 503.15698 497.74738 492.34686 486.97296 481.64316 476.37582 471.1892 466.10193 461.13306 456.30148 451.62625 447.12656 442.82163 438.73038 434.8716 431.26386 427.92514 424.8733 422.12543 419.69824 417.60745 415.86813 414.49448 413.49957 412.89557 412.6931 412.90186 413.52997 414.584 416.06906 417.9885 420.34378 423.1347 426.35904 430.01248 434.08862 438.57907 443.47293 448.7574 454.41702 460.43417 466.78918 473.4596 480.42084 487.64587 495.10278 502.73972 510.46112 518.1622 525.7942 533.3107 540.66797 547.8247 554.7427 561.38685 567.7249 573.7281 579.37055 584.6297 589.48645 593.9247 597.93146 601.49726 604.6151 607.2814 609.49506 611.25806 612.57465 613.45166 613.8982 613.92554 613.547 612.77765 611.6342 610.13477 608.29895 606.1474 603.70154 600.9837 598.01716 594.82496 591.4309 587.8588 584.13245 580.27527 576.3104 572.26075 568.14856 563.9951 559.8212 555.6464 551.4897 547.3694 543.30396 539.3102 535.401 531.58826 527.88215 524.2918 520.82477 517.4871 514.28394 511.21875 508.29398 505.5104 502.86826 500.3662 498.00192 495.77225 493.67303 491.69952 489.8459 488.106 486.47278 484.9393 483.49777 482.14032 480.85898 479.6456 478.49228 477.39108 476.3338 475.30707 474.2798 473.20367 472.0472 470.80154 469.4591 468.0127 466.45593 464.7835 462.9911 461.0747 459.0317 456.86047 454.56015 452.13086 449.57355 446.8902 444.08374 441.15775 438.11694 434.9668 431.7141 428.366 424.92996 421.41415 417.82724 414.17844 410.47702 406.7331 402.9569 399.1588 395.34952 391.53955 387.73975 383.96106 380.21423 376.50986 372.8586 369.2709 365.75687 362.3265 358.98962 355.75583 352.63434 349.63422 346.76444 344.03336 341.4492 339.02036 336.75485 334.6605 332.7449 331.0159 329.4812 328.14838 327.02533 326.11984 325.43994 324.9938 324.79007 324.83743 325.14478 325.72162 326.57748 327.7223 329.16638 330.92023 332.99478 335.401 338.14926 341.24838 344.7063 348.5331 352.74176 357.34537 362.35666 367.78732 373.64282 379.9137 386.57904 393.62064 401.02365 408.77222 416.84933 425.23697 433.9163 442.86743 452.06952 461.50095 471.13934 480.96152 490.94345 501.06052 511.28766 521.59925 531.96924 542.37104 552.7779 563.163 573.4994 583.7597 593.91694 603.94404 613.8146 623.50214 632.9804 642.2241 651.2084 659.9085 668.30134 676.3638 684.0741 691.4112 698.3553 704.8873 710.98987 716.64624 721.84107 726.5604 730.7917 734.5234 737.74567 740.4498 742.62897 744.2773 745.3903 745.96546 746.0012 745.4976 744.45594 742.87915 740.77124 738.13776 734.9854 731.32215 727.1573 722.50116 717.36524 711.76215 705.7054 699.2096 692.29017 684.9633 677.24616 669.15656 660.713 651.93445 642.8406 633.4513 623.78724 613.8693 603.7187 593.3565 582.8009 572.05536 561.1074 549.9541 538.61054 527.0975 515.43634 503.6493 491.75986 479.79208 467.7708 455.7215 443.67017 431.6434 419.66815 407.77222 395.98575 384.3419 372.87357 361.6102 350.57907 339.80743 329.3221 319.1494 309.31528 299.84467 290.76205 282.09103 273.85403 266.07294 258.76828 251.95952 245.6648 239.90077 234.68297 230.0253 225.94004 222.43795 219.5282 217.21814 215.51329 214.41753 213.93285 214.05934 214.79529 216.13713 218.07936 220.61449 223.73325 227.42462 231.6758 236.47196 241.79651 247.63144 253.95709 260.752 267.99353 275.6573 283.71738 292.14728 300.91913 310.00354 319.37064 328.98975 338.82956 348.8576 359.0414 369.34787 379.74414 390.19678 400.67212 411.1371 421.55945 431.90607 442.14508 452.245 462.1753 471.90335 481.39148 490.6029 499.5085 508.08615 516.31586 524.1788 531.6583 538.7396 545.4095 551.65625 557.4701 562.843 567.76905 572.24335 576.26294 579.82636 582.9341 585.58765 587.7904 589.5472 590.86384 591.74756 592.207 592.25196 591.8933 591.1429 590.0136 588.5193 586.6743 584.4943 581.9951 579.19324 576.1063 572.75196 569.1483 565.3137 561.267 557.02674 552.60987 548.0326 543.3116 538.465 533.51136 528.46955 523.35816 518.1956 513.00037 507.7908 502.5849 497.40036 492.25507 487.16632 482.15186 477.22876 472.41354 467.72284 463.17307 458.78015 454.5599 450.52737 446.6981 443.08658 439.7069 436.57303 433.69836 431.09592 428.77814 426.75674 425.043 423.64752 422.58026 421.85028 421.4661 421.43524 421.7644 422.45935 423.52472 424.96423 426.78058 428.9751 431.54785 434.4978 437.82272 441.51898 445.58142 450.00348 454.77722 459.8933 465.34082 471.10748 477.1792 483.54056 490.17453 497.06262 504.18512 511.5206 519.0459 526.7369 534.56806 542.5129 550.54346 558.6302 566.7431 574.85144 582.9233 590.9259 598.8263 606.5909 614.18567 621.5762 628.7285 635.60865 642.1825 648.4164 654.27735 659.7331 664.7526 669.30555 673.36225 676.89496 679.87757 682.2853 684.0951 685.2862 685.8396 685.7386 684.96857 683.51764 681.37647 678.5382 674.99884 670.75727 665.81476 660.1758 653.8478 646.8411 639.16895 630.84754 621.8958 612.337 602.1987 591.5119 580.3101 568.62897 556.507 543.9849 531.10486 517.9113 504.45013 490.76852 476.91476 462.93866 448.88992 434.81708 420.7678 406.79178 392.9404 379.2652 365.81693 352.64597 339.80173 327.33264 315.2856 303.70624 292.63803 282.12268 272.19998 262.90686 254.27788 246.34503 239.13745 232.68129 226.99933 222.11133 218.03385 214.77971 212.35848 210.77614 210.0353 210.13486 211.0704 212.83356 215.41272 218.79309 222.95623 227.88042 233.5409 239.91002 246.95703 254.64829 262.948 271.81784 281.21722 291.1034 301.43204 312.15692 323.23044 334.60434 346.22928 358.05484 370.03027 382.10486 394.22803 406.349 418.41782 430.3849 442.2019 453.82175 465.19833 476.28723 487.04584 497.4335 507.41168 516.9436 525.9954 534.5355 542.53486 549.96735 556.8097 563.0414 568.6445 573.6043 577.90937 581.5511 584.5235 586.8236 588.45185 589.41114 589.7071 589.3504 588.361 586.7675 584.60157 581.89496 578.68055 574.9917 570.8624 566.329 561.4295 556.20014 550.67457 544.8854 538.8645 532.64277 526.2499 519.71454 513.0645 506.32584 499.52405 492.68234 485.82297 478.96683 472.13318 465.34 458.60385 451.9403 445.36316 438.8848 432.51642 426.26843 420.14935 414.16647 408.32684 402.63617 397.0987 391.71857 386.49832 381.43988 376.54535 371.815 367.24863 362.84622 358.6071 354.52908 350.61096 346.85083 343.246 339.79398 336.49182 333.3369 330.32608 327.45587 324.72327 322.12482 319.65726 317.3175 315.1023 313.008 311.03137 309.1691 307.41782 305.77502 304.23807 302.80417 301.47113 300.23666 299.09863 298.0551 297.10425 296.24426 295.47376 294.79123 294.19547 293.68527 293.2592 292.9167 292.66187 292.50568 292.45908 292.52997 292.72537 293.0518 293.51678 294.127 294.88916 295.81018 296.8969 298.1555 299.592 301.21353 303.02524 305.03333 307.24258 309.65854 312.28647 315.1304 318.19443 321.48233 324.99765 328.74252 332.72018 336.9322 341.37906 346.06165 350.97952 356.13275 361.51938 367.13767 372.98624 379.0615 385.35858 391.8714 398.59296 405.5156 412.6311 419.9304 427.4024 435.0354 442.81778 450.73575 458.77506 466.9199 475.1544 483.46045 491.8211 500.21646 508.62653 517.0301 525.40577 533.73084 541.9821 550.1355 558.1667 566.0504 573.7612 581.27356 588.5613 595.5975 602.356 608.8108 614.93555 620.7045 626.09247 631.074 635.62525 639.72284 643.3447 646.46967 649.0779 651.1511 652.67255 653.6273 654.0028 653.8012 653.03754 651.72736 649.88654 647.5322 644.6833 641.3587 637.57984 633.36976 628.7509 623.7481 618.3866 612.69135 606.6886 600.4052 593.86835 587.10407 580.1403 573.0038 565.7205 558.3172 550.8207 543.25586 535.6483 528.02265 520.4027 512.81067 505.26852 497.7994 490.42246 483.1578 476.0232 469.03687 462.21472 455.57166 449.1236 442.88205 436.8596 431.0684 425.51605 420.21283 415.16675 410.3847 405.87106 401.63123 397.66834 393.98642 390.58615 387.4692 384.63474 382.0832 379.81223 377.8193 376.1018 374.6515 373.46118 372.52628 371.84137 371.4009 371.1987 371.2286 371.48386 371.95706 372.64145 373.52924 374.61276 375.8842 377.3356 378.9586 380.7454 382.6876 384.77692 387.0051 389.36398 391.84546 394.44135 397.14352 399.99445 403.01572 406.21085 409.58118 413.12592 416.84625 420.7405 424.80884 429.0476 433.45688 438.03323 442.77475 447.67532 452.73334 457.94293 463.29904 468.7954 474.4267 480.18454 486.063 492.05142 498.14423 504.33014 510.60004 516.943 523.34797 529.8024 536.29566 542.8146 549.34455 555.8731 562.385 568.8672 575.30274 581.67865 587.977 594.18207 600.27765 606.2475 612.07306 617.73945 623.2282 628.524 633.60596 638.46174 643.0711 647.41987 651.4896 655.2648 658.7299 661.8688 664.6674 667.11115 669.18604 670.88 672.17945 673.0742 673.5532 673.6067 673.2262 672.40455 671.1343 669.4105 667.2295 664.58735 661.48304 657.9157 653.88697 649.3987 644.4549 639.06134 633.2232 626.9491 620.2482 613.13337 605.61396 598.0908)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 668 112) (om-make-point 83 30) (list (list (list 0.9 1.3))) "(((.9 1.3)))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 587 73) (om-make-point 124 30) (list (list 0 1) (list 1 2) (list 0 2 1)) "((0 1)(1 2)(0 2 1))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 522 28) (om-make-point 275 30) (list (list 300 1788) (list 500 4500) (list 100 700) (list 100 700)) "((300 1788) (500 4500) (100 700)(100 700))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 393 93) (om-make-point 86 30) (list (list 1 3) (list 2 3)) "((1 3)(2 3))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 88 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sine-melody" (om-load-patch-abs1 "sine-melody" (quote ((let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 421 57) (om-make-point 45 30) (list 4 15) "(4 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 427 100) (om-make-point 70 30) (list 0.0 1.0) "(0.0 1.0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 438 138) (om-make-point 52 30) (list 0 360) "(0 360)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 543 195) (om-make-point 22 26) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 614 56) (om-make-point 23 29) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 564 17) (om-make-point 55 30) (list 3 15) "(3 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 486 30) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 222 23) (om-make-point 45 30) 12.5 "12.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-FULL-RANGE" (quote r-full-range) (quote ((om-load-inputfun (quote input-funbox) "CENTS-STEP" "CENTS-STEP" nil))) (om-make-point 200 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 170 20) (om-make-point 45 30) 12.5 "12.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-BPFS" (quote r-random-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 509 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 279 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 338 16) (om-make-point 125 30) (list (list 1 10) (list 2 6) (list 4 14)) "((1 10) (2 6) (4 14))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 332 69) (om-make-point 59 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GLISS-ADDITIVE-SINE-BPFS" (quote r-gliss-additive-sine-bpfs) (quote ((om-load-inputfun (quote input-funbox) "" "Y-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-FREQS-LISTS" nil) (om-load-inputfun (quote input-funbox) "" "FREQ-BPFS-1000X1000" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-FREQS-PR-BPF" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-AMP" nil) (om-load-inputfun (quote input-funbox) "" "MIN-MAX-PHASE" nil) (om-load-inputfun (quote input-funbox) "" "NUMBER-OF-BPFS" nil))) (om-make-point 354 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 119 247) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "speed" 2 (om-make-point 125 20) "" "speed" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dur" 1 (om-make-point 90 32) "" "dur" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-INPUT-BPF-RAW-MELODY" (quote r-input-bpf-raw-melody) (quote ((om-load-inputfun (quote input-funbox) "midicents-range-minmax" "MIDICENTS-RANGE-MINMAX" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil) (om-load-inputfun (quote input-funbox) "cents-interval-size" "CENTS-INTERVAL-SIZE" nil) (om-load-inputfun (quote input-funbox) "instrumental-range-midicents" "INSTRUMENTAL-RANGE-MIDICENTS" nil) (om-load-inputfun (quote input-funbox) "bpf-self-melody-shape" "BPF-SELF-MELODY-SHAPE" nil))) (om-make-point 68 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 8 0 nil 0) (6 0 10 0 nil 0) (5 0 10 1 nil 0) (4 0 10 2 nil 0) (14 0 11 0 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (10 0 14 2 nil 0) (0 0 14 3 nil 0) (1 0 14 4 nil 0) (2 0 14 5 nil 0) (3 0 14 6 nil 0) (19 0 15 0 nil 0) (18 0 19 0 nil 0) (17 0 19 1 nil 0) (16 0 19 2 nil 0) (9 0 19 3 nil 0) (8 0 19 4 nil 0) (11 0 19 5 nil 0))) 6.13 nil "" (om-make-point 200 200) (om-make-point 688 361)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "dur" nil) (om-load-inputfun (quote input-funbox) "" "speed" nil))) (om-make-point 195 186) nil (list nil) "l" "sine-melody"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GEST-IRREGULAR-MICRO-TRILL" (quote r-gest-irregular-micro-trill) (quote ((om-load-inputfun (quote input-funbox) "macromel-chord" "MACROMEL-CHORD" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil))) (om-make-point 78 99) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GEST-SINGLE-CHORD" (quote r-gest-single-chord) (quote ((om-load-inputfun (quote input-funbox) "macromelody-chord" "MACROMELODY-CHORD" nil) (om-load-inputfun (quote input-funbox) "ms-duration" "MS-DURATION" nil) (om-load-inputfun (quote input-funbox) "speed-ratio" "SPEED-RATIO" nil))) (om-make-point 26 169) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 385 23) (om-make-point 130 65) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9452))) :lonset (quote (0 377)) :ldur (quote ((377))) :lvel (quote ((15))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9316))) :lonset (quote (0 284)) :ldur (quote ((284))) :lvel (quote ((23))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9192))) :lonset (quote (0 319)) :ldur (quote ((319))) :lvel (quote ((22))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9192))) :lonset (quote (0 319)) :ldur (quote ((319))) :lvel (quote ((22))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9192))) :lonset (quote (0 319)) :ldur (quote ((319))) :lvel (quote ((22))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9144))) :lonset (quote (0 337)) :ldur (quote ((337))) :lvel (quote ((40))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9096))) :lonset (quote (0 389)) :ldur (quote ((389))) :lvel (quote ((15))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8914))) :lonset (quote (0 685)) :ldur (quote ((685))) :lvel (quote ((29))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8914))) :lonset (quote (0 685)) :ldur (quote ((685))) :lvel (quote ((29))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8696))) :lonset (quote (0 273)) :ldur (quote ((273))) :lvel (quote ((11))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8470))) :lonset (quote (0 621)) :ldur (quote ((621))) :lvel (quote ((24))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8468))) :lonset (quote (0 1265)) :ldur (quote ((1265))) :lvel (quote ((58))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8288))) :lonset (quote (0 697)) :ldur (quote ((697))) :lvel (quote ((23))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8286))) :lonset (quote (0 1004)) :ldur (quote ((1004))) :lvel (quote ((20))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7794))) :lonset (quote (0 1376)) :ldur (quote ((1376))) :lvel (quote ((25))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6338))) :lonset (quote (0 302)) :ldur (quote ((302))) :lvel (quote ((24))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6332))) :lonset (quote (0 795)) :ldur (quote ((795))) :lvel (quote ((40))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6332))) :lonset (quote (0 795)) :ldur (quote ((795))) :lvel (quote ((40))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6332))) :lonset (quote (0 795)) :ldur (quote ((795))) :lvel (quote ((40))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6326))) :lonset (quote (0 261)) :ldur (quote ((261))) :lvel (quote ((61))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5818))) :lonset (quote (0 639)) :ldur (quote ((639))) :lvel (quote ((26))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5816))) :lonset (quote (0 395)) :ldur (quote ((395))) :lvel (quote ((14))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5816))) :lonset (quote (0 395)) :ldur (quote ((395))) :lvel (quote ((14))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5814))) :lonset (quote (0 493)) :ldur (quote ((493))) :lvel (quote ((25))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 789 725) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf) (quote ggf)) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GESTURES-MULTISEQ-FROM-CLASSES" (quote r-gestures-multiseq-from-classes) (quote ((om-load-inputfun (quote input-funbox) "" "LIST-OF-GESTURE-PATCHES" nil) (om-load-inputfun (quote input-funbox) "" "LIST-OF-R-PASS-5-LISTS" nil))) (om-make-point 258 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 307 63) (om-make-point 69 30) (list (list 5 12) 80) "((5 12)80)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-GESTURE-SCRIPTS-TO-CLASSES" (quote r-gesture-scripts-to-classes) (quote ((om-load-inputfun (quote input-funbox) "horizontal-events-prob" "HORIZONTAL-EVENTS-PROB" nil) (om-load-inputfun (quote input-funbox) "gestures-minmax-each-event" "GESTURES-MINMAX-EACH-EVENT" nil) (om-load-inputfun (quote input-funbox) "list-of-chordseqs" "LIST-OF-CHORDSEQS" nil) (om-load-inputfun (quote input-funbox) "event-interval-gest-dur-attack-decay" "EVENT-INTERVAL-GEST-DUR-ATTACK-DECAY" nil) (om-load-inputfun (quote input-funbox) "gest-lists-pr-parts" "GEST-LISTS-PR-PARTS" nil) (om-load-inputfun (quote input-funbox) "speed-ratio-lists-pr-parts" "SPEED-RATIO-LISTS-PR-PARTS" nil) (om-load-inputfun (quote input-funbox) "bpfs-list-attack-decay" "BPFS-LIST-ATTACK-DECAY" nil))) (om-make-point 393 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 1 nil 0) (11 1 6 0 nil 0) (4 0 6 1 nil 0) (5 0 6 2 nil 0) (3 0 6 3 nil 0) (2 0 6 4 nil 0) (1 0 6 5 nil 0) (22 0 10 0 nil 0) (9 0 10 1 nil 0) (10 0 11 1 nil 0) (8 0 12 1 nil 0) (20 0 17 0 nil 0) (19 0 17 1 nil 0) (18 0 17 2 nil 0) (17 0 22 0 nil 0) (24 0 22 1 nil 0) (23 0 24 0 nil 0) (16 0 24 1 nil 0) (21 1 24 2 nil 0) (15 0 24 3 nil 0) (14 0 24 4 nil 0) (13 0 24 5 nil 0) (12 1 24 6 nil 0))) nil 6.13))
