; OM File Header - Saved 2020/09/23 20:55:23
; (6.13 :patc (om-make-point 172 110) (om-make-point 0 23) (om-make-point 1092 720) "" 183 0 nil "2020/09/23 20:55:23")
; End File Header
(in-package :om)(load-lib-for (quote ("OMRuben")))(setf *om-current-persistent* (om-load-patch1 "pitchshift-demo" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 558 321) (om-make-point 21 28) 9 "9$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-APPLY-CHANNEL-MULTISEQ" (quote r-apply-channel-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "channel" "CHANNEL" nil))) (om-make-point 465 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 64 456) (om-make-point 648 254) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8355) (7464) (7204) (6782) (6974) (7250) (7845) (8360) (8741) (7993) (8639) (8409) (7802) (7858) (7474) (7555) (7412) (7576) (7949) (8545) (8362) (9771) (9651) (9459) (9555) (9945) (9476) (9110) (8457) (7926) (8369) (9103) (9220) (9411) (9728) (10164) (9524) (9205) (9864) (9239) (6531) (9418) (6769) (6703) (9086) (6457) (7694) (10014) (7617) (10049) (9749) (6482) (9352) (6357) (6913) (9489) (6887) (10746) (10317) (9449) (7442) (6822) (6038) (10886) (10538) (9757) (7754) (7175) (6317))) :lonset (quote (500 1000 2000 2500 2750 3000 3500 3750 4000 4500 5000 5500 6000 7000 7500 7750 8000 8500 8750 9000 9500 10000 11000 11250 11500 11750 12000 12500 12750 13000 13500 14000 15000 15250 15500 15750 16000 16250 16500 16750 17125 17250 17375 17625 17750 17875 18125 18250 18375 18500 18750 19125 19250 19375 19625 19750 19875 20000 20500 20750 21000 21500 21750 22250 22500 22750 23250 23500 23750 24000)) :ldur (quote ((500) (1000) (500) (250) (250) (500) (250) (250) (500) (500) (250) (500) (1000) (500) (250) (250) (500) (250) (250) (500) (500) (1000) (250) (250) (250) (250) (500) (250) (250) (500) (500) (1000) (250) (250) (250) (250) (250) (250) (250) (250) (125) (125) (125) (125) (125) (125) (125) (125) (125) (250) (250) (125) (125) (125) (125) (125) (125) (500) (250) (250) (500) (250) (250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7337) (7595) (6964) (6224) (6551) (5951) (5852) (6312) (5755) (5779) (6472) (5870) (7115) (5577) (7518) (5641) (6361) (6915) (6533) (8086) (6979) (8519) (7098) (7254) (7821) (7143) (7024) (7458) (6696) (6572) (7111) (6459) (7135) (6523) (5670) (6439) (5678) (5663) (6414) (5593) (5543) (6251) (5477) (6758) (5080) (7157) (5078) (5836) (6395) (5780) (7646) (6050) (7858) (5950) (6117) (6868) (6147) (6195) (7032) (6288) (7118) (8546) (7145) (7138) (8532) (7191) (7278) (8830) (7572) (9067) (8646) (9489) (8934) (8318) (9431) (8269) (8828) (7683) (9455) (7508) (6404) (7710) (6217) (6765) (8202) (6786) (7740) (9494) (8044) (8143) (9900) (8185) (8127) (9637) (7893) (9123) (8406) (9047) (8419) (8947) (7856) (8592) (7343) (9031) (7665) (9343) (6138) (7365) (7342) (8692) (8233) (7517) (8461) (9106) (8579) (5720) (5158) (9185) (8599) (5755) (5755))) :lonset (quoteldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7622) (7532) (6608) (4731) (4145) (8363) (7754) (4317) (3702))) :lonset (quote (19000 20000 20500 21000 21500 22250 22500 23250 23500 24000)) :ldur (quote ((500) (500) (500) (500) (500) (250) (500) (250) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7814) (6724) (6386) (6355) (6247) (6851) (7258) (7735) (7882) (7685) (7231) (6305) (6434) (6461) (5933) (6400) (6809) (7161) (6968) (7420) (6401) (7729) (6547) (7457) (7918) (7332) (8121) (8742) (7221) (8195) (7063) (8375) (8436) (6984) (7524) (8106) (8050) (6433) (7090) (7859) (4563) (8056) (4649))) :lonset (quote (500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 21000 22000 23000 24000)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7001) (5807) (5387) (4997) (5383) (5770) (6388) (6795) (6761) (5701) (6347) (6036) (4949) (4497) (4850) (4936) (5168) (5573) (6090) (5719) (6732) (6877) (6089) (6657) (7204) (6542) (5573) (6476) (6822) (5553) (6199) (6456) (2945) (6308) (6234) (3130) (2948))) :lonset (quote (500 1000 2000 2500 2750 3000 3500 3750 4000 4500 5000 5500 6000 7500 7750 8000 8500 8750 9000 9500 10000 12000 13000 13500 14000 16000 17000 17500 18000 19000 19500 20000 21000 22000 22500 23000 23500 24000)) :ldur (quote ((500) (1000) (500) (250) (250) (500) (250) (250) (500) (500) (250) (500) (1500) (250) (250) (500) (250) (250) (500) (500) (500) (1000) (500) (500) (500) (1000) (500) (500) (1000) (500) (500) (1000) (1000) (500) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7123) (5717) (5378) (6045) (6058) (5380) (4199) (4798) (5784) (5202) (5277) (5841) (2445) (4978) (1776))) :lonset (quote (10000 12000 13000 13500 14000 16000 17000 17500 18000 19000 19500 20000 21000 22000 23000 24000)) :ldur (quote ((2000) (1000) (500) (500) (2000) (1000) (500) (500) (1000) (500) (500) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 880 720) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB111 2" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "BPF-LIST" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 194 9) (om-make-point 118 144) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8154471 3.6217852 5.4190145 7.207134 8.986145 10.756046 12.51684 14.268524 16.011097 17.744565 19.46892 21.184166 22.890305 24.587334 26.275252 27.95406 29.62376 31.28435 32.935833 34.578206 36.21147 37.835625 39.450673 41.056607 42.653435 44.241154 45.819764 47.38926 48.949654 50.500935 52.043106 53.57617 55.100125 56.614964 58.120705 59.61734 61.104855 62.583264 64.05257 65.51275 66.96384 68.40581 69.83867 71.26242 72.67707 74.0826 75.479035 76.866356 78.24456 79.61366 80.973656 82.32454 83.66631 84.99897 86.322525 87.63698 88.94231 90.23853 91.52566 92.803665 94.07256 95.33236 96.58304 97.82461 99.05707 100.280426 101.49467 102.6998 103.89583 105.08275 106.26056 107.42926 108.58885 109.739334 110.8807 112.01296 113.13612 114.25017 115.3551 116.45093 117.53765 118.61524 119.68375 120.74313 121.79343 122.834595 123.86666 124.88961 125.903466 126.90818 127.90381 128.89034 129.86774 130.83605 131.79523 132.74532 133.68628 134.61815 135.5409 136.45459 137.36458 138.2746 139.18459 140.09459 141.0046 141.9146 142.82459 143.7346 144.64459 145.55458 146.4646 147.3746 148.28459 149.19461 150.1046 151.01459 151.92459 152.8346 153.7446 154.6546 155.5646 156.4746 157.3846 158.2946 159.2046 160.1146 161.0246 161.9346 162.84459 163.7546 164.66461 165.57459 166.4846 167.3946 168.30461 169.2146 170.1246 171.03459 171.9446 172.8546 173.76459 174.67462 175.58461 176.4946 177.40462 178.3146 179.22461 180.1346 181.0446 181.95459 182.86461 183.77463 184.6846 185.59462 186.50463 187.41461 188.32462 189.23462 190.14459 191.05463 191.9646 192.87462 193.78462 194.69461 195.6046 196.51462 197.42462 198.33461 199.24463 200.15464 201.0646 201.97461 202.88462 203.79462 204.70462 205.61463 206.52462 207.43462 208.3446 209.25461 210.16461 211.07462 211.98462 212.89463 213.80463 214.71463 215.62462 216.53462 217.44461 218.35463 219.26462 220.17462 221.08463 221.99463 222.9046 223.81462 224.72466 225.6346 226.5446 227.45464 228.36466 229.27463 230.18463 231.09462 232.00463 232.91463 233.82463 234.73465 235.64466 236.55463 237.46463 238.37465 239.28466 240.19466 241.10463 242.01465 242.92465 243.83463 244.74465 245.65465 246.56462 247.47466 248.38465 249.29465 250.20465 251.11464 252.02465 252.93462 253.84465 254.75464 255.66464 256.57465 257.48465 258.39462 259.30466 260.21466 261.12463 262.03467 262.94464 263.85465 264.76465 265.67465 266.58466 267.49466 268.40466 269.31464 270.22467 271.13464 272.04465 272.95465 273.86465 274.77463 275.68463 276.59467 277.50464 278.41464 279.32465 280.23468 281.14465 282.05466 282.96466 283.87463 284.78467 285.69464 286.60465 287.51465 288.42465 289.33466 290.24466 291.15466 292.06464 292.97467 293.88464 294.79465 295.70465 296.61465 297.52466 298.43466 299.34467 300.25464 301.16467 302.07465 302.98465 303.89465 304.80466 305.71466 306.62463 307.53467 308.44467 309.35468 310.26468 311.17468 312.08466 312.9947 313.90466 314.81464 315.72467 316.63467 317.54468 318.45468 319.36465 320.2747 321.1847 322.0947 323.00467 323.91467 324.82468 325.73468 326.64465 327.5547 328.46466 329.37466 330.28467 331.19467 332.1047 333.01468 333.92468 334.8347 335.7447 336.65466 337.5647 338.47467 339.38467 340.29468 341.20468 342.1147 343.0247 343.9347 344.84467 345.75467 346.6647 347.57465 348.48468 349.39465 350.3047 351.21466 352.1247 353.03467 353.94467 354.8547 355.76468 356.6747 357.58466 358.4947 359.4047 360.3147 361.22467 362.1347 363.04468 363.95468 364.86472 365.77472 366.68466 367.59467 368.5047 369.4147 370.32468 371.2347 372.14468 373.0547 373.96466 374.87466 375.78467 376.6947 377.60468 378.5147 379.42468 380.3347 381.2447 382.15472 383.0647 383.9747 384.8847 385.79468 386.7047 387.6147 388.5247 389.4347 390.3447 391.2547 392.1647 393.0747 393.98468 394.8947 395.8047 396.71472 397.6247 398.53473 399.4447 400.35468 401.2647 402.17468 403.0847 403.9947 404.90472 405.8147 406.72467 407.6347 408.5447 409.4547 410.36478 411.27475 412.18478 413.09482 414.00485 414.91486 415.82486 416.73492 417.64493 418.55493 419.46497 420.37497 421.285 422.19504 423.10504 424.01508 424.9251 425.8351 426.74515 427.65515 428.56516 429.47522 430.38522 431.29526 432.20526 433.1153 434.02533 434.93536 435.84537 436.75534 437.66538 438.5754 439.48544 440.39548 441.30548 442.21555 443.12555 444.03555 444.94562 445.85562 446.7657 447.6757 448.58563 449.49576 450.4057 451.3157 452.2257 453.13577 454.04578 454.95578 455.86584 456.77585 457.68585 458.59586 459.50592 460.41592 461.32593 462.236 463.146 464.056 464.96606 465.87607 466.78613 467.69614 468.60614 469.5162 470.42618 471.33618 472.24628 473.15625 474.06628 474.9763 475.88632 476.79636 477.70636 478.6164 479.52643 480.43643 481.3465 482.25647 483.16653 484.07654 484.98654 485.8966 486.8066 487.71664 488.62668 489.53668 490.4467 491.3567 492.26675 493.17676 494.08682 494.99683 495.90683 496.81683 497.7269 498.6369 499.5469 500.45685 501.36697 502.27704 503.18704 504.097 505.00705 505.9171 506.82712 507.73706 508.64713 509.55713 510.46713 511.3772 512.28724 513.1972 514.1073 515.0173 515.9273 516.83735 517.7474 518.6574 519.5674 520.47736 521.38746 522.2974 523.20746 524.1175 525.0275 525.93757 526.84754 527.75757 528.6676 529.57764 530.4876 531.3977 532.3077 533.2177 534.12775 535.0377 535.94776 536.8578 537.7678 538.67786 539.5879 540.4979 541.4079 542.31794 543.22797 544.138 545.04804 545.958 546.86805 547.7781 548.6881 549.59815 550.5081 551.41816 552.3282 553.2382 554.14826 555.0582 555.96827 556.8783 557.7883 558.69837 559.6084 560.5184 561.4284 562.33844 563.2484 564.15845 565.0685 565.9785 566.88855 567.7986 568.7086 569.61866 570.5286 571.43866 572.3487 573.25867 574.1687 575.07874 575.9888 576.89875 577.80884 578.7189 579.62885 580.53894 581.4489 582.3589 583.2689 584.17896 585.089 585.999 586.90906 587.8191 588.7291 589.63904 590.54914 591.4591 592.3692 593.27924 594.1892 595.09925 596.0093 596.91925 597.8293 598.7393 599.64936 600.5594 601.46936 602.3794 603.2894 604.19947 605.10944 606.0195 606.9295 607.8396 608.7496 609.65955 610.5696 611.4796 612.38965 613.2997 614.2097 615.1197 616.0297 616.93976 617.8498 618.7598 619.66987 620.5799 621.48987 622.3999 623.3099 624.22 625.13 626.04 626.95 627.86005 628.77 629.6801 630.5901 631.5002 632.41016 633.3202 634.2302 635.14014 636.0503 636.9602 637.87024 638.78034 639.6903 640.60035 641.5104 642.4204 643.3304 644.2404 645.15046 646.0605 646.97046 647.8805 648.7905 649.70057 650.6106 651.5206 652.4306 653.34064 654.2507 655.1607 656.0707 656.9807 657.89075 658.8008 659.7108 660.62085 661.5308 662.44086 663.3509 664.2609 665.1709 666.08094 666.99097 667.901 668.81104 669.72107 670.6311 671.5411 672.45105 673.3611 674.2711 675.18116 676.0912 677.0012 677.91126 678.8213 679.73127 680.6413 681.5513 682.4613 683.37134 684.28144 685.1914 686.1014 687.0114 687.92145 688.8315 689.7415 690.65155 691.5616 692.47156 693.3816 694.2916 695.20166 696.1117 697.0217 697.9317 698.84174 699.7518 700.66175 701.5718 702.4818 703.39185 704.3019 705.21186 706.12195 707.0319 707.94196 708.8519 709.7621 710.672 711.58204 712.49207 713.4021 714.31214 715.22217 716.13215 717.0422 717.9522 718.86225 719.7722 720.68226 721.5923 722.5024 723.4123 724.3223 725.23237 726.1424 727.05237 727.9624 728.87244 729.7825 730.69245 731.6025 732.5125 733.42255 734.3326 735.2426 736.15265 737.0627 737.97266 738.8827 739.7927 740.70276 741.61274 742.5228 743.43287 744.34284 745.2528 746.1629 747.07294 747.9829 748.89295 749.803 750.713 751.623 752.5331 753.44306 754.3531 755.26307 756.1731 757.0831 757.99317 758.9032 759.81324 760.7232 761.63324 762.54334 763.45325 764.36335 765.2733 766.18335 767.0934 768.0034 768.91346 769.8235 770.73346 771.64356 772.5535 773.4635 774.37354 775.28345 776.19336 777.10346 778.01337 778.9234 779.8333 780.7434 781.6533 782.5633 783.47327 784.3833 785.2932 786.20325 787.11316 788.0232 788.9331 789.8431 790.75306 791.6631 792.57306 793.48304 794.39307 795.303 796.2129 797.1229 798.0329 798.943 799.8529 800.76294 801.67286 802.5828 803.4928 804.4028 805.31275 806.22266 807.1327 808.04267 808.9527 809.8627 810.77265 811.6826 812.5926 813.5026 814.4125 815.3225 816.23255 817.14246 818.0525 818.96247 819.87244 820.7824 821.69245 822.60236 823.51227 824.4223 825.3323 826.24225 827.1523 828.0622 828.97217 829.8822 830.7922 831.70215 832.6121 833.5221 834.432 835.34205 836.2521 837.162 838.072 838.982 839.89197 840.8019 841.7119 842.6219 843.53186 844.4418 845.3518 846.26185 847.17176 848.0818 848.99176 849.90174 850.81177 851.7217 852.63166 853.5416 854.4516 855.3616 856.2716 857.1815 858.0915 859.00147 859.9115 860.8215 861.73145 862.64136 863.5514 864.465 865.38794 866.31977 867.26087 868.21094 869.1701 870.1385 871.1159 872.1024 873.0981 874.1029 875.1168 876.1398 877.1719 878.21314 879.2634 880.3229 881.39124 882.469 883.5557 884.6516 885.7566 886.8706 887.99384 889.1261 890.26746 891.418 892.5777 893.74634 894.9242 896.1111 897.3072 898.51227 899.7266 900.94996 902.18244 903.424 904.6748 905.9345 907.20356 908.4815 909.7687 911.0649 912.3703 913.6847 915.0083 916.341 917.6828 919.03376 920.3937 921.7628 923.14106 924.5284 925.9248 927.3303 928.74494 930.1688 931.6017 933.0437 934.4947 935.95496 937.4243 938.9026 940.3902 941.8867 943.3926 944.9074 946.4314 947.9645 949.50666 951.0579 952.6184 954.1877 955.7664 957.3542 958.951 960.55695 962.172 963.79615 965.4295 967.0718 968.72327 970.3839 972.0535 973.7324 975.4204 977.11744 978.82355 980.53876 982.2631 983.99665 985.73914 987.4909 989.2515 991.02155 992.80054 994.5886 996.38587 998.19227 1000.0)) (quote (861.0 845.0505 829.3539 813.91034 798.7198 783.7823 769.09766 754.6661 740.4876 726.5621 712.8895 699.47 686.3035 673.38996 660.72944 648.32196 636.1675 624.26606 612.61756 601.22205 590.0796 579.1901 568.5537 558.1702 548.03986 538.1624 528.53797 519.16657 510.0482 501.1828 492.57037 484.21097 476.10458 468.25122 460.65082 453.30338 446.20905 439.36768 432.77933 426.44397 420.36163 414.5323 408.95596 403.6326 398.56232 393.74493 389.18066 384.86935 380.81104 377.0057 373.45346 370.15418 367.10788 364.3146 361.77435 359.48706 357.45282 355.67157 354.1433 352.86804 351.84583 351.0766 350.56036 350.29712 350.28693 350.52972 351.0255 351.7743 352.77612 354.0309 355.53873 357.29956 359.3134 361.58023 364.10004 366.8729 369.89877 373.1776 376.70947 380.49432 384.53223 388.8231 393.36694 398.16385 403.2137 408.5166 414.07254 419.88147 425.94336 432.2583 438.82617 445.64716 452.72107 460.04797 467.62793 475.4609 483.54688 491.8858 500.47778 509.32278 518.4187 527.52527 536.4774 545.2751 553.9185 562.40735 570.7419 578.92206 586.9477 594.819 602.53595 610.0984 617.5064 624.76 631.8593 638.80414 645.5946 652.2306 658.71216 665.03937 671.2122 677.2306 683.0946 688.80414 694.3593 699.7601 705.0065 710.0983 715.0359 719.819 724.4477 728.92206 733.2419 737.40735 741.41846 745.2751 748.97736 752.52527 755.91864 759.15766 762.2423 765.17255 767.9484 770.5698 773.0368 775.34937 777.5075 779.5113 781.3606 783.05555 784.5961 785.98224 787.21405 788.2913 789.21424 789.98267 790.5968 791.05646 791.36176 791.51264 791.5091 791.3511 791.03876 790.57196 789.95087 789.1752 788.24524 787.1608 785.922 784.5288 782.9812 781.2792 779.42267 777.4118 775.24665 772.9269 770.4528 767.8243 765.04145 762.1041 759.0124 755.7663 752.3658 748.8108 745.10144 741.2377 737.21955 733.0469 728.72 724.2386 719.6028 714.81257 709.868 704.76886 699.5155 694.10767 688.5454 682.82874 676.95777 670.93226 664.7567 658.5784 652.46857 646.427 640.45405 634.54944 628.7134 622.9456 617.24634 611.6155 606.05317 600.55915 595.13367 589.7766 584.4879 579.2677 574.1159 569.0326 564.0177 559.0712 554.19324 549.38367 544.64246 539.9698 535.36554 530.82966 526.36225 521.96326 517.63276 513.37067 509.17703 505.05176 500.995 497.00668 493.08667 489.23526 485.4522 481.7376 478.09146 474.51373 471.0044 467.5636 464.19113 460.88718 457.6516 454.4845 451.38586 448.35562 445.39383 442.50043 439.67554 436.91904 434.23102 431.6114 429.0602 426.57748 424.16318 421.8173 419.53986 417.33084 415.1903 413.1182 411.11453 409.1793 407.31244 405.5141 403.78418 402.12268 400.52957 399.00497 397.54877 396.161 394.8417 393.59082 392.4084 391.29437 390.2488 389.27167 388.36298 387.5227 386.75092 386.04752 385.41254 384.84607 384.34796 383.91834 383.55713 383.26437 383.04004 382.88416 382.7967 382.77768 382.8271 382.94495 383.13123 383.386 383.70914 384.10074 384.56076 385.08926 385.68265 386.28568 386.87912 387.4631 388.03757 388.60245 389.15784 389.70374 390.24008 390.76694 391.28427 391.79208 392.29038 392.77914 393.25836 393.7281 394.18832 394.63904 395.08017 395.51187 395.934 396.34662 396.7497 397.14328 397.52734 397.90186 398.2669 398.6224 398.96838 399.30484 399.63178 399.94922 400.25714 400.55548 400.8444 401.1237 401.39355 401.6539 401.90466 402.14594 402.37772 402.5999 402.81262 403.01584 403.2095 403.39368 403.56836 403.73346 403.88904 404.0351 404.1717 404.29874 404.41626 404.52426 404.62274 404.71173 404.79117 404.86108 404.9215 404.9724 405.0138 405.04565 405.06796 405.0808 405.08414 405.07788 405.06213 405.0369 405.0021 404.95782 404.904 404.84064 404.76782 404.68543 404.59357 404.49213 404.3812 404.26074 404.1308 403.9913 403.8423 403.68375 403.51572 403.33814 403.15106 402.95447 402.74835 402.5327 402.30756 402.07288 401.82867 401.57495 401.3117 401.03897 400.7567 400.4649 400.1636 399.85278 399.5324 399.20258 398.865 398.53662 398.22162 397.91992 397.63153 397.3565 397.0948 396.8464 396.61133 396.3896 396.18115 395.98608 395.80432 395.6359 395.4808 395.33902 395.21057 395.09546 394.99365 394.90518 394.83005 394.76825 394.71976 394.6846 394.66278 394.6543 394.6591 394.67725 394.70874 394.7535 394.81165 394.88312 394.96793 395.066 395.17743 395.30225 395.44034 395.5918 395.7565 395.93463 396.12604 396.33075 396.54883 396.78018 397.0249 397.28293 397.55432 397.83902 398.13705 398.44843 398.77307 399.1111 399.4624 399.82706 400.20508 400.59637 401.00104 401.41898 401.8503 402.2949 402.75287 403.22415 403.70874 404.20667 404.71796 405.24255 405.78046 406.33167 406.89624 407.47415 408.06537 408.66995 409.28778 409.919 410.56354 411.2214 411.8926 412.5771 413.27496 413.9861 414.71063 415.44846 416.1996 416.96408 417.74188 418.53302 419.33746 420.15527 420.9864 421.8308 422.6886 423.5597 424.44412 425.34186 426.25293 427.17737 428.1151 429.06616 430.03052 431.00824 432.00278 433.03488 434.10794 435.222 436.37698 437.57303 438.81006 440.08804 441.40704 442.76694 444.16788 445.60977 447.0927 448.6166 450.18146 451.7873 453.4342 455.12198 456.85083 458.6206 460.4314 462.28314 464.1759 466.1096 468.08432 470.10007 472.15674 474.25436 476.39304 478.57266 480.79327 483.05484 485.35745 487.701 490.0856 492.5111 494.97763 497.48508 500.0336 502.6231 505.2535 507.92496 510.63742 513.3908 516.1852 519.02057 521.8969 524.8143 527.7726 530.7719 533.81214 536.8935 540.01575 543.17896 546.3832 549.6284 552.9146 556.24176 559.61 563.01917 566.46924 569.9604 573.49244 577.06556 580.6796 584.33466 588.03064 591.7677 595.5457 599.3647 603.2246 607.1256 611.0675 615.0505 619.07435 623.1393 627.2451 631.39197 635.57984 639.8086 644.0784 648.3892 652.74097 657.1338 661.5675 666.04224 670.558 675.1146 679.7123 684.35096 689.03064 693.7512 698.5129 703.3154 708.15906 713.0436 717.9691 722.93567 727.94324 732.9917 738.0585 743.05146 747.96106 752.78705 757.52967 762.1888 766.76447 771.2567 775.6654 779.99067 784.2324 788.39075 792.4655 796.457 800.36475 804.1892 807.93024 811.58765 815.1616 818.6523 822.0593 825.3829 828.62305 831.7797 834.8529 837.84266 840.74884 843.5716 846.311 848.96674 851.5391 854.0281 856.4335 858.75544 860.9939 863.1488 865.22046 867.2085 869.1131 870.93427 872.6719 874.32605 875.8967 877.38404 878.78785 880.1081 881.34504 882.49836 883.5682 884.5546 885.4575 886.277 887.013 887.6655 888.23456 888.7203 889.1224 889.441 889.67615 889.8279 889.8961 889.8809 889.7823 889.60016 889.33436 888.98536 888.55274 888.0366 887.437 886.7542 885.9877 885.1377 884.20435 883.18744 882.0872 880.9033 879.6359 878.2852 876.851 875.3333 873.7321 872.0475 870.27936 868.42786 866.49274 864.4742 862.3722 860.18677 857.9178 855.5654 853.1295 850.6101 848.0073 845.3211 842.5513 839.6981 836.76136 833.74115 830.6376 827.45044 824.21625 821.0385 817.92347 814.8709 811.8811 808.9538 806.08924 803.28724 800.5479 797.8712 795.2571 792.70557 790.21674 787.7906 785.42695 783.126 780.8877 778.7119 776.5989 774.54847 772.5606 770.63544 768.7729 766.9729 765.23566 763.561 761.9489 760.39954 758.91266 757.4885 756.127 754.82807 753.5918 752.41816 751.3072 750.2587 749.27295 748.3498 747.4893 746.6914 745.9561 745.2835 744.6736 744.12616 743.6414 743.2193 742.8598 742.5629 742.32874 742.1571 742.0481 742.00184 742.01807 742.097 742.2385 742.4427 742.7095 743.0389 743.4309 743.8856 744.40296 744.9829 745.6254 746.33057 747.0984 747.9289 748.8219 749.7777 750.79596 751.87696 753.02057 754.22675 755.4956 756.827 758.2212 759.6779 761.19727 762.77924 764.4238 766.1311 767.90094 769.7334 771.62854 773.5863 775.6067 777.6897 779.8353 782.0436 784.3145 786.648 789.0442 791.5029 794.02436 796.6084 799.255 801.9643 804.7362 807.5708 810.468 813.42774 816.3965 819.2672 822.0369 824.7056 827.2734 829.7401 832.10584 834.3706 836.5343 838.59705 840.55884 842.4196 844.1794 845.838 847.39576 848.85254 850.2084 851.4631 852.6168 853.6697 854.62146 855.47217 856.222 856.8707 857.4185 857.8653 858.2111 858.4559 858.59974 858.6425 858.5843 858.4252 858.165 857.8038 857.34156 856.7784 856.1142 855.34906 854.4829 853.5157 852.4475 851.2784 850.0083 848.6371 847.165 845.59174 843.91767 842.14246 840.26636 838.2892 836.2111 834.0319 831.75184 829.37067 826.8886 824.3054 821.62134 818.8362 815.9501 812.96296 809.8749 806.6858 803.3957 800.0046 796.5125 792.91944 789.22535 785.43024 781.5341 777.5371 773.439 769.24 764.9399 760.5388 756.03675 751.4337 746.7297 741.92457 737.0185 732.01154 726.90345 721.6944 716.3844 710.9734 705.4613 699.8483 694.1343 688.3193 682.40326 676.3862 670.2682 664.0492 657.72925 651.3082 644.7862 638.1632 631.4392 624.61426 617.6882 610.6612 603.6292 596.72864 589.96045 583.32477 576.8216 570.4508 564.2125 558.1067 552.13324 546.29236 540.58387 535.0079 529.56434 524.25324 519.0746 514.0284 509.1147 504.33344 499.68463 495.16824 490.78436 486.53296 482.414 478.4275 474.57343 470.85184 467.26273 463.80603 460.48184 457.29007 454.23074 451.30392 448.50952 445.84766 443.3181 440.9211 438.65656 436.52448 434.52484 432.65765 430.92294 429.32068 427.8509 426.51355 425.30866 424.2362 423.29626 422.48877 421.8137 421.27112 420.86096 420.58328 420.43805 420.4253 420.545 420.79718 421.18176 421.69885 422.3484 423.13037 424.0448 425.09174 426.2711 427.58292 429.02716 430.60394 432.31314 434.1548 436.1289 438.23547 440.4745 442.84595 445.34995 447.9864 450.7552 453.65656 456.69034 459.85657 463.15524 466.58643 470.15002 473.8461 477.6746 481.6356 485.7291 489.955 494.31335 498.80414 503.42743 508.1832 513.07135 518.092 523.2451 528.5307 533.9487 539.49927 545.1822 550.9976 556.9455 563.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.8928589 3.7676316 5.6243177 7.4629188 9.283433 11.085862 12.870204 14.636459 16.38463 18.114714 19.826712 21.520623 23.196448 24.854186 26.49384 28.115403 29.718882 31.304274 32.871582 34.420803 35.95194 37.46499 38.959954 40.436825 41.89562 43.33632 44.758938 46.16347 47.549916 48.918274 50.268547 51.600735 52.91484 54.210854 55.48879 56.748627 57.990384 59.21405 60.419636 61.60713 62.776547 63.92787 65.06112 66.17627 67.27334 68.35232 69.413216 70.45602 71.48074 72.48738 73.47594 74.446396 75.400376 76.35133 77.30228 78.253235 79.20419 80.155136 81.106095 82.05703 83.00799 83.95893 84.90989 85.86084 86.81178 87.76274 88.71369 89.664635 90.615586 91.566536 92.51749 93.46844 94.41939 95.370346 96.32129 97.27225 98.22319 99.17413 100.12509 101.07605 102.02699 102.977936 103.928894 104.87985 105.830796 106.78174 107.7327 108.68364 109.63459 110.58555 111.53651 112.48746 113.4384 114.38935 115.340294 116.291245 117.2422 118.19314 119.144104 120.09505 121.046 121.99694 122.94791 123.898865 124.8498 125.80076 126.751725 127.70266 128.65361 129.60459 130.55553 131.50649 132.45746 133.4084 134.35936 135.31032 136.26128 137.21224 138.16318 139.11414 140.0651 141.01605 141.96701 142.91797 143.86893 144.81987 145.77085 146.72179 147.67276 148.6237 149.57466 150.52562 151.47657 152.42754 153.3785 154.32946 155.2804 156.23136 157.18231 158.13327 159.08423 160.03519 160.98613 161.93709 162.88805 163.83902 164.78998 165.74092 166.69188 167.64282 168.5938 169.54474 170.4957 171.44666 172.39762 173.34857 174.29953 175.25049 176.20145 177.1524 178.10335 179.0543 180.00527 180.95624 181.90718 182.85814 183.80908 184.76006 185.71102 186.66196 187.61292 188.56386 189.51483 190.46579 191.41675 192.36769 193.31865 194.2696 195.22057 196.17153 197.12247 198.07346 199.02439 199.97536 200.92632 201.87726 202.82822 203.77918 204.73014 205.68109 206.63205 207.58301 208.53397 209.48491 210.43587 211.38681 212.33777 213.28873 214.23969 215.19065 216.1416 217.09258 218.04352 218.99448 219.94542 220.89641 221.84735 222.79828 223.74927 224.70021 225.65117 226.60213 227.55307 228.50403 229.45499 230.40596 231.35689 232.30785 233.2588 234.20978 235.16074 236.11168 237.06264 238.0136 238.96454 239.91553 240.86649 241.81742 242.76839 243.71935 244.67029 245.62125 246.57222 247.52318 248.4741 249.4251 250.37602 251.327 252.27796 253.2289 254.17989 255.13083 256.0818 257.0327 257.98367 258.93466 259.8856 260.83655 261.7875 262.73846 263.68945 264.64038 265.59134 266.5423 267.49326 268.44418 269.39514 270.34613 271.29706 272.24805 273.19897 274.14996 275.1009 276.05185 277.00284 277.95374 278.90475 279.85568 280.80664 281.7576 282.70853 283.6595 284.61047 285.5614 286.51236 287.46332 288.41428 289.36527 290.31622 291.26718 292.21814 293.16907 294.12003 295.07098 296.02194 296.9729 297.92386 298.87482 299.82578 300.7767 301.72766 302.67862 303.62958 304.58054 305.53152 306.48245 307.4334 308.38437 309.33533 310.2863 311.23724 312.1882 313.13916 314.09012 315.04108 315.992 316.94296 317.89392 318.8449 319.79584 320.7468 321.69775 322.64874 323.59967 324.55063 325.5016 326.45255 327.4035 328.35446 329.3054 330.25638 331.2073 332.1583 333.10922 334.06018 335.01114 335.96213 336.91306 337.864 338.81497 339.76593 340.71686 341.66788 342.6188 343.56973 344.52072 345.47165 346.4226 347.3736 348.32455 349.2755 350.22647 351.17743 352.1284 353.07928 354.03027 354.98123 355.9322 356.88315 357.8341 358.78503 359.73602 360.68695 361.63794 362.5889 363.53986 364.49078 365.44177 366.3927 367.34366 368.29462 369.24558 370.19653 371.14746 372.09845 373.04938 374.00037 374.9513 375.90228 376.85324 377.80417 378.75513 379.7061 380.65704 381.60803 382.559 383.50992 384.46088 385.41183 386.3628 387.31372 388.26474 389.21567 390.16663 391.11758 392.06854 393.0195 393.97043 394.9214 395.87238 396.8233 397.77426 398.72522 399.67618 400.62714 401.5781 402.52905 403.48 404.43094 405.3819 406.3329 407.28384 408.2348 409.18573 410.1367 411.08768 412.03864 412.98956 413.94052 414.89148 415.84244 416.7934 417.74432 418.6953 419.64627 420.59723 421.54816 422.49915 423.45007 424.40103 425.352 426.30295 427.25394 428.20486 429.1558 430.10675 431.05774 432.00867 432.95966 433.9106 434.86157 435.81253 436.7635 437.71442 438.66538 439.61636 440.56732 441.51822 442.46918 443.42014 444.37116 445.3221 446.273 447.224 448.17496 449.12598 450.07687 451.02783 451.9788 452.92972 453.88068 454.8317 455.78265 456.73355 457.6845 458.6355 459.5864 460.53735 461.48837 462.43933 463.39026 464.3412 465.29218 466.2432 467.1941 468.14505 469.09598 470.04694 470.9979 471.94885 472.8998 473.85077 474.80173 475.75266 476.70367 477.65463 478.60553 479.55655 480.50745 481.45837 482.40933 483.36035 484.3113 485.26227 486.2132 487.16415 488.11517 489.06613 490.01703 490.968 491.91895 492.86987 493.82083 494.7718 495.72275 496.6737 497.62466 498.57565 499.52655 500.47763 501.42853 502.3795 503.3304 504.28137 505.23233 506.18335 507.13425 508.0852 509.0362 509.9871 510.93805 511.88907 512.83997 513.7909 514.7419 515.6929 516.6438 517.5947 518.5458 519.4967 520.44764 521.39856 522.34955 523.30054 524.25147 525.20246 526.1534 527.1043 528.05524 529.0062 529.9572 530.9082 531.85914 532.81006 533.76105 534.712 535.66297 536.6139 537.5648 538.51587 539.46674 540.4177 541.3687 542.31965 543.2706 544.22156 545.1725 546.1235 547.0744 548.0254 548.9763 549.92725 550.87824 551.8292 552.78016 553.7311 554.68207 555.633 556.5839 557.535 558.4859 559.4368 560.3878 561.33875 562.2897 563.24067 564.19165 565.1426 566.0935 567.0445 567.9955 568.9464 569.89734 570.8483 571.7993 572.75025 573.7012 574.65217 575.6031 576.5541 577.50495 578.45594 579.4069 580.35785 581.30884 582.2598 583.2108 584.16175 585.1126 586.0636 587.0146 587.9655 588.9165 589.8675 590.8184 591.7694 592.72034 593.67127 594.6222 595.5732 596.5242 597.4751 598.4261 599.377 600.328 601.27894 602.2299 603.18085 604.13184 605.08277 606.03376 606.9847 607.9356 608.8866 609.8375 610.78846 611.73945 612.6904 613.64136 614.5923 615.5433 616.49427 617.4452 618.3961 619.34705 620.2981 621.249 622.19996 623.15094 624.10187 625.0528 626.0038 626.9548 627.90564 628.8566 629.8076 630.7586 631.70954 632.66047 633.61145 634.5624 635.51337 636.46436 637.4153 638.3662 639.3172 640.2681 641.21906 642.17005 643.12104 644.07196 645.02295 645.97394 646.9248 647.8758 648.8267 649.7777 650.7287 651.67957 652.63056 653.58155 654.53254 655.48346 656.4343 657.3854 658.3363 659.2873 660.2382 661.18915 662.14014 663.09107 664.04206 664.99305 665.944 666.8949 667.8458 668.7968 669.7478 670.6987 671.6497 672.60065 673.55164 674.50257 675.4535 676.4045 677.3554 678.3064 679.2573 680.2083 681.1593 682.11017 683.06116 684.0121 684.9631 685.91407 686.865 687.8159 688.7669 689.71784 690.6688 691.6198 692.57074 693.5217 694.47254 695.42365 696.3745 697.3255 698.2765 699.2274 700.17835 701.12934 702.0803 703.03125 703.9822 704.9332 705.8841 706.8351 707.786 708.73694 709.6879 710.6389 711.58985 712.5408 713.49176 714.44275 715.3937 716.34467 717.29566 718.2466 719.1975 720.14844 721.0994 722.0504 723.00135 723.9523 724.9032 725.8542 726.8052 727.75617 728.7071 729.658 730.609 731.55994 732.5109 733.46186 734.4128 735.3638 736.31476 737.26575 738.2167 739.1676 740.1185 741.0695 742.02045 742.97144 743.92237 744.8733 745.8243 746.77527 747.7262 748.6772 749.6281 750.5791 751.53 752.481 753.43195 754.3829 755.3338 756.2848 757.2357 758.1867 759.1377 760.0886 761.0396 761.99054 762.9415 763.89246 764.8434 765.7944 766.74537 767.6963 768.6472 769.59815 770.5492 771.5001 772.45105 773.40204 774.353 775.3039 776.2549 777.2059 778.15674 779.1078 780.0587 781.0097 781.96064 782.9116 783.86255 784.81354 785.76447 786.7154 787.6664 788.6174 789.5683 790.5193 791.4702 792.4212 793.3722 794.32306 795.27405 796.225 797.17597 798.1269 799.07776 800.02875 800.9798 801.93067 802.88166 803.8327 804.78357 805.7345 806.68555 807.6365 808.5874 809.5383 810.4894 811.44025 812.3913 813.3422 814.29316 815.244 816.19507 817.146 818.0969 819.048 819.9989 820.9498 821.90076 822.85175 823.80274 824.75367 825.7046 826.65546 827.6063 828.5573 829.5082 830.4591 831.41004 832.3609 833.3118 834.2627 835.2137 836.16456 837.1155 838.0664 839.01734 839.9682 840.9191 841.8701 842.8209 843.77186 844.7227 845.6737 846.6246 847.57544 848.52637 849.4773 850.4282 851.3791 852.3301 853.28095 854.2318 855.18274 856.13367 857.08454 858.03547 858.9863 859.93726 860.88825 861.8391 862.79004 863.7409 864.6918 865.6427 866.5936 867.54456 868.49537 869.4464 870.3972 871.3482 872.2991 873.25 874.2009 875.15186 876.1027 877.05365 878.0046 878.95545 879.9065 880.85724 881.8083 882.7591 883.70997 884.66095 885.6119 886.56275 887.5137 888.46454 889.41547 890.36634 891.31727 892.26825 893.21906 894.1699 895.1209 896.07184 897.02277 897.97364 898.9246 899.8754 900.8264 901.7772 902.7282 903.6791 904.63 905.58094 906.5318 907.48267 908.4336 909.38446 910.3354 911.2864 912.2372 913.1882 914.13904 915.0901 916.0409 916.99176 917.94275 918.8937 919.8446 920.79535 921.74634 922.69727 923.64826 924.59906 925.553 926.5233 927.5119 928.51856 929.5431 930.5858 931.64686 932.72577 933.8227 934.93775 936.0708 937.22217 938.39155 939.5789 940.78437 942.00806 943.2498 944.50946 945.78736 947.08326 948.3973 949.7295 951.0795 952.4478 953.8342 955.2387 956.6612 958.10175 959.56037 961.03724 962.53205 964.04505 965.57605 967.12525 968.6923 970.27765 971.88105 973.50245 975.14216 976.79975 978.47547 980.1691 981.8811 983.6111 985.35914 987.1251 988.9094 990.7117 992.5321 994.3705 996.2271 998.10187 1000.0)) (quote (657.0 636.6881 617.06165 598.1206 579.86506 562.29505 545.4104 529.21125 513.69764 498.86948 484.72668 471.26944 458.49756 446.41132 435.01044 424.295 414.2651 404.92062 396.2616 388.28803 380.99994 374.39737 368.4802 363.24854 358.7023 354.84155 351.66623 349.1764 347.37207 346.25314 345.8197 346.07175 347.00922 348.6322 350.9406 353.9345 357.61383 361.9787 367.02896 372.7647 379.1859 386.2926 394.08472 402.56232 411.72537 421.5739 432.1079 443.3274 455.2323 467.8227 481.0985 495.05985 509.70667 524.94007 539.931 554.4926 568.62476 582.3276 595.6011 608.4452 620.8599 632.8452 644.40125 655.52784 666.2252 676.49305 686.33167 695.7408 704.7205 713.27106 721.39216 729.0838 736.3462 743.17914 749.58277 755.55707 761.102 766.21747 770.9036 775.1604 778.98786 782.3859 785.3546 787.8939 790.0039 791.6846 792.9358 793.7577 794.1502 794.11335 793.64716 792.7516 791.4266 789.67225 787.48865 784.8756 781.8332 778.36145 774.46027 770.12977 765.36994 760.18067 754.5621 748.51416 742.03687 735.1301 728.0208 721.11365 714.41657 707.92975 701.653 695.58655 689.7302 684.0839 678.64795 673.4221 668.40644 663.6009 659.00544 654.6202 650.4451 646.48035 642.7256 639.181 635.8466 632.72236 629.8083 627.1044 624.6106 622.327 620.25367 618.3904 616.7373 615.2943 614.0616 613.03894 612.22657 611.62427 611.2322 611.05024 611.0784 611.31684 611.7653 612.4241 613.2929 614.37195 615.66114 617.16047 618.87 620.78974 622.91956 625.2595 627.80976 630.57007 633.5406 636.72126 640.1121 643.71314 647.50715 651.1518 654.51325 657.59144 660.3864 662.89814 665.12665 667.0719 668.73395 670.11274 671.2083 672.0207 672.54975 672.7956 672.75824 672.4377 671.8339 670.9468 669.7765 668.323 666.58625 664.5662 662.26307 659.6766 656.8069 653.654 650.21784 646.4985 642.49585 638.20997 633.6409 628.7886 623.6531 618.2343 612.53235 606.54706 600.27857 593.72687 586.89197 579.7738 572.37244 564.68775 556.7199 548.46875 539.9345 531.1169 522.0161 512.6321 502.96478 493.0143 482.78058 472.26364 461.46347 450.54504 440.01236 429.9004 420.20908 410.93848 402.08853 393.65927 385.65076 378.0629 370.89572 364.14923 357.82346 351.91837 346.43393 341.3702 336.72714 332.50482 328.70316 325.32217 322.36188 319.82227 317.70337 316.00516 314.72763 313.8708 313.43463 313.41916 313.8244 314.6503 315.8969 317.5642 319.6522 322.16086 325.0902 328.44025 332.211 336.4024 341.01453 346.0473 351.5008 357.375 363.66986 370.3854 377.52167 385.0786 393.0562 401.45453 410.2735 419.5132 429.17358 439.25467 449.7564 460.67447 471.5416 482.04413 492.182 501.95532 511.36392 520.4081 529.08747 537.4022 545.3524 552.938 560.15894 567.0153 573.507 579.63404 585.39655 590.7944 595.8276 600.4962 604.8002 608.7395 612.3142 615.5243 618.3698 620.8507 622.967 624.71857 626.1056 627.128 627.7857 628.07886 628.00745 627.57135 626.7706 625.60535 624.07526 622.18067 619.9215 617.2977 614.30927 610.9562 607.23847 603.1562 598.7093 593.8977 588.72156 583.1808 577.2754 571.00525 564.3706 557.37134 550.00745 542.27894 534.2641 526.38465 518.70337 511.2204 503.93567 496.84906 489.96075 483.27063 476.77875 470.48514 464.38968 458.4925 452.79352 447.2928 441.99027 436.886 431.9799 427.27206 422.7625 418.45108 414.33792 410.423 406.7063 403.1878 399.86755 396.7455 393.82175 391.09616 388.56882 386.23972 384.10883 382.17615 380.44168 378.9055 377.5675 376.42773 375.4862 374.7429 374.1978 373.85098 373.70233 373.75195 373.99976 374.4458 375.0901 375.93262 376.97333 378.21228 379.64948 381.2849 383.11853 385.1504 387.38046 389.63687 391.71 393.59933 395.30493 396.8268 398.16495 399.31924 400.28983 401.07663 401.6797 402.09903 402.33456 402.38635 402.2544 401.9387 401.4392 400.75595 399.88898 398.8382 397.6037 396.1854 394.5834 392.79764 390.8281 388.67477 386.33774 383.81693 381.11237 378.22406 375.15198 371.89612 368.4565 364.83313 361.02603 357.03516 352.86057 348.50217 343.96002 339.23407 334.32446 329.23102 323.95383 318.49295 312.84827 307.0198 301.0076 294.81165 288.43192 281.86847 275.12122 268.19025 261.0755 253.80588 246.69065 239.8134 233.17418 226.773 220.6098 214.68462 208.99745 203.54833 198.3372 193.36412 188.62902 184.13195 179.8729 175.85186 172.06884 168.52384 165.21685 162.14786 159.31691 156.72397 154.36905 152.25214 150.37326 148.73239 147.32953 146.16468 145.23786 144.54906 144.09827 143.8855 143.91074 144.174 144.67527 145.41455 146.39186 147.6072 149.06053 150.75189 152.68126 154.84865 157.25406 159.89749 162.77893 165.89838 169.25586 172.85134 176.68485 180.75638 185.06592 189.61347 194.39904 199.42263 204.55925 209.54358 214.36693 219.02933 223.53075 227.87119 232.05068 236.06922 239.92678 243.62334 247.15895 250.53362 253.7473 256.8 259.6917 262.4225 264.9923 267.40112 269.649 271.7359 273.6618 275.42676 277.03076 278.47376 279.75583 280.87692 281.83707 282.63617 283.27435 283.7516 284.06778 284.22308 284.21738 284.05072 283.72308 283.2345 282.5849 281.77435 280.80286 279.67038 278.37695 276.92252 275.30716 273.5308 271.59348 269.49518 267.2359 264.8157 262.2345 259.49234 256.5892 253.5251 250.3114 247.28275 244.59452 242.24662 240.23914 238.572 237.2453 236.25899 235.61304 235.30748 235.34229 235.7175 236.4331 237.48908 238.88544 240.6222 242.69934 245.11685 247.87477 250.97306 254.41173 258.1908 262.31024 266.77008 271.57028 276.71088 282.1919 288.01324 294.17502 300.67712 307.51968 314.70258 322.2259 330.08957 338.29364 346.8381 355.72296 364.94818 374.5138 384.41977 394.66614 405.25293 416.1801 427.44763 439.05554 451.00388 463.29254 475.92163 488.89105 502.20096 515.8512 529.8418 544.1728 558.6874 572.81464 586.50226 599.75055 612.55927 624.9285 636.8583 648.34845 659.39924 670.01044 680.1821 689.91437 699.20716 708.06037 716.4741 724.44837 731.9831 739.0784 745.73414 751.9504 757.7271 763.06446 767.96216 772.4204 776.43915 780.0184 783.15815 785.8584 788.11927 789.9405 791.32227 792.2646 792.76734 792.83057 792.45435 791.6386 790.38337 788.68866 786.55445 783.9808 780.9675 777.51484 773.6226 769.2909 764.51966 759.30896 753.6587 747.56904 741.03986 734.0711 726.66297 718.81525 710.52875 702.0609 693.61945 685.2044 676.81574 668.4535 660.1177 651.8082 643.52527 635.2686 627.0384 618.83454 610.6572 602.5062 594.38166 586.2835 578.21174 570.1663 562.1474 554.15485 546.18866 538.2489 530.33564 522.44867 514.5882 506.75403 498.94632 491.16507 483.41016 475.68164 467.97958 460.30396 452.6547 445.03174 437.4353 429.86527 422.3216 414.80435 407.31354 399.8491 392.41107 384.99945 377.61426 370.25543 362.92303 355.61707 348.33746 341.0843 333.8575 326.65714 319.48315 312.33563 305.21448 298.16306 291.46683 285.17786 279.29626 273.82193 268.7549 264.0952 259.8428 255.99773 252.5599 249.52942 246.90625 244.69037 242.88176 241.48053 240.48656 239.89987 239.72055 239.94846 240.58373 241.62628 243.07614 244.9333 247.19779 249.86956 252.94864 256.43503 260.3287 264.62973 269.338 274.4536 279.9765 285.90674 292.24426 298.98907 306.14124 313.70062 321.6674 330.04144 338.82278 348.01144 357.60736 367.61066 378.0212 388.83908 400.06427 411.69675 423.73654 436.18362 449.03806 462.29974 475.96872 490.045 504.14584 517.71015 530.7329 543.21405 555.1538 566.552 577.4086 587.72394 597.49756 606.7298 615.42054 623.5697 631.17737 638.2435 644.7682 650.75135 656.193 661.09314 665.45185 669.2689 672.54456 675.2787 677.4713 679.12244 680.23206 680.8001 680.8268 680.31177 679.25544 677.65754 675.518 672.8371 669.6147 665.85077 661.5453 656.6983 651.3099 645.37995 638.9084 631.8955 624.341 616.245 607.6075 598.42847 588.708 578.446 567.6425 556.2975 544.41095 531.9829 519.0134 505.50235 491.49857 477.68686 464.28833 451.30283 438.7305 426.5712 414.82498 403.49188 392.57187 382.06494 371.97113 362.2904 353.02277 344.16824 335.72678 327.69843 320.08316 312.88098 306.0919 299.7159 293.753 288.2032 283.06647 278.34287 274.03232 270.13486 266.65054 263.57928 260.92114 258.67606 256.8441 255.4252 254.4194 253.82672 253.64713 253.88059 254.52719 255.58687 257.05963 258.94547 261.24445 263.95648 267.0816 270.6198 274.57114 278.93555 283.71307 288.9037 294.50735 300.52414 306.954 313.797 321.05304 328.53085 335.74957 342.68576 349.3395 355.71072 361.7995 367.6058 373.1296 378.37094 383.32977 388.00613 392.40002 396.51144 400.34033 403.88678 407.15073 410.13217 412.83124 415.24774 417.38178 419.23337 420.80243 422.08902 423.09314 423.81476 424.2539 424.41058 424.2848 423.8765 423.18573 422.2125 420.95673 419.41855 417.59784 415.4947 413.109 410.44092 407.4903 404.2572 400.74164 396.94357 392.863 388.5 383.8545 378.92654 373.71606 368.22314 362.44775 356.38983 350.04944 343.42657 336.52124 329.341 322.2637 315.49957 309.04865 302.911 297.08655 291.57535 286.37735 281.49258 276.92105 272.66275 268.71765 265.08575 261.76712 258.7617 256.0695 253.6905 251.62477 249.87226 248.43292 247.30689 246.49404 245.99442 245.808 245.93483 246.37487 247.12816 248.19464 249.57436 251.2673 253.27347 255.59287 258.22546 261.17133 264.4304 268.0027 271.88818 276.0869 280.59888 285.42407 290.56247 296.0141 301.77896 307.85706 314.24835 320.95288 327.97064 335.30164 342.94586 350.90326 359.17392 367.7578 376.6549 385.75375 394.55844 403.0098 411.1078 418.85236 426.2436 433.28143 439.96588 446.29697 452.27475 457.89908 463.17007 468.08762 472.65192 476.86285 480.7203 484.2245 487.37518 490.17258 492.6166 494.70725 496.44452 497.8284 498.85892 499.5361 499.85986 499.8303 499.44733 498.71097 497.6213 496.17813 494.38178 492.23193 489.72876 486.8722 483.66223 480.09885 476.18222 471.91214 467.28873 462.31198 456.98175 451.2982 445.2613 438.87103 432.12732 425.03033 417.5799 409.77615 401.619 393.1085 384.2446 375.0)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict picture)) (list (quote t) (om-make-point 10 40) (om-make-point 335 275) 0 1000 nil (list 1 15 2 2 1) 0 0 1 0 0 (om-make-point 0 0) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-POLY-TO-MULTISEQ" (quote r-poly-to-multiseq) (quote ((om-load-inputfun (quote input-funbox) "voices-list" "VOICES-LIST" (list 0)))) (om-make-point 9 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-PITCHSHIFT-MULTISEQ" (quote r-pitchshift-multiseq) (quote ((om-load-inputfun (quote input-funbox) "chordseqs-list" "CHORDSEQS-LIST" nil) (om-load-inputfun (quote input-funbox) "2bpfs-list" "2BPFS-LIST" nil) (om-load-inputfun (quote input-funbox) "4midicents-range" "4MIDICENTS-RANGE" nil) (om-load-inputfun (quote input-funbox) "bpf-scaling-factor" "BPF-SCALING-FACTOR" nil) (om-load-inputfun (quote input-funbox) "cent-interval-size" "CENT-INTERVAL-SIZE" nil))) (om-make-point 168 341) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RANDOM-SPLINE-BPFS" (quote r-random-spline-bpfs) (quote ((om-load-inputfun (quote input-funbox) "y-minmax-list" "Y-MINMAX-LIST" (list 0 1000)) (om-load-inputfun (quote input-funbox) "points-minmax-list" "POINTS-MINMAX-LIST" (list 7 9)) (om-load-inputfun (quote input-funbox) "number-of-bpfs" "NUMBER-OF-BPFS" 3))) (om-make-point 361 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 324 30) (om-make-point 69 30) (list 0 1000) "(0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 479 32) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 405 31) (om-make-point 55 30) (list 7 23) "(7 23)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 118 84) (quote "Scaling factor to control the effect of bpf-lib. 0 will switch them off.") "" (om-make-point 112 245) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 141 105) (quote "Approximation in cents. This will only play as 25 cents, but export for synthesis is possible.") "" (om-make-point 326 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 189 90) (quote "Initial max. min. pitch$Final max. min. pitch. $Reverse the order of max. min. to create inversion or transition to inversion.") "" (om-make-point 633 221) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 323 169) (quote "Pitchshifted music. This process reacts to number of notes, not absolute time position. The distortion could therefore get out of sync between the voices. A new process with recursion and absolute time intervals can be created if this is a problem. $") "" (om-make-point 720 492) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 124 96) (quote "Bpf-lib is used to dynamically$modify the upper and lower limits of the range.") "" (om-make-point 192 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list11" (quote list) (quote nil) (om-make-point 300 309) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 238 278) (om-make-point 25 30) 0.5 ".5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ2211111" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 565 19) (om-make-point 280 200) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4100) (8250) (1300) (11350))) :lonset (quote (0 1250 2681 3847 4847)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx cursor-mode score-mode)) (list nil (quote :osc-scoreplayer) (quote t) 0 0 (om-make-point 10 40) (om-make-point 764 379) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 8 (quote :normal) 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "VOICES" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 39 43) (om-make-point 130 108) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-1 1)) 1)) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (1 1)) (1 (1 -1 2)))) ((2 4) (1 (1 (2 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) (1 (1 (1 1 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) (1 (1 (1 1 1 1)))) ((2 4) ((1 (1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 2 2)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (-1 1 1 1)) (1 (-1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil (7300) nil nil nil nil nil nil nil nil nil nil (7300) nil nil nil nil nil nil nil nil (8500) nil nil nil nil nil nil nil nil nil (8500) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-4 -1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 -1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 1 1 1 1)) (1 (-1 1 1 1 -1 1 1 1)))) ((2 4) ((1 (-1 1 1 1 -1 1 1 1)) (1 (-1 1 1 1 1 1 1 1)))) ((2 4) ((8 (1 1 1 1 1 1 1 1)) (3 (-2 1)) (5 (-1 -2 1 -1)))) ((2 4) ((1 (-2 1 -1 2 -2)) (1 (-2 1 -1 -2 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (-1 1 2)) (1 (-1 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) ((2 (-2 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (-1 1 2)) (1 (-1 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-2 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) (1 1)) ((2 4) (1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) ((1 (-1 1)) 1)) ((2 4) ((1 (2 1 1)) (1 (2 1 1)))) ((2 4) ((1 (1 1)) (1 (1 -1 2)))) ((2 4) ((2 (6 1 1)))) ((2 4) ((1 (2 1 1)) (1 (1 1)))) ((2 4) ((2 (1 -3)))) ((2 4) (1 (1 (1 1)))) ((2 4) ((2 (1 -3)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 1)) ((2 4) ((1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil (6100) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (2)) ((2 4) (1 (1 (1 1)))) ((2 4) (2)) ((2 4) (1 (1 (1 1)))) ((2 4) (1 (1 (1 1)))) ((2 4) (1 1)) ((2 4) (1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.13 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode player scale cursor-mode)) (list (quote t) 1 0 (om-make-point 253 26) (om-make-point 804 433) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff) (quote ggff)) 24 8 0 (quote :osc-scoreplayer) nil (quote :normal))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 30) (quote "Voices") "" (om-make-point 80 16) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 1 nil 0) (6 0 3 1 nil 0) (18 1 4 0 nil 0) (4 0 5 0 nil 0) (3 1 5 1 nil 0) (17 1 5 2 nil 0) (16 0 5 3 nil 0) (15 0 5 4 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (8 0 6 2 nil 0))) nil 6.13))
