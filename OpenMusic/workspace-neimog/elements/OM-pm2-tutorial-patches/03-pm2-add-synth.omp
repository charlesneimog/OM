; OM File Header - Saved 2020/11/03 17:05:18
; (6.030002 :patc (om-make-point 224 39) (om-make-point 360 84) (om-make-point 844 509) "" 183 0 nil "2020/11/03 17:05:14")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/pm2-out.aiff" "../../out-files/cseq.aif"))
(in-package :om)(load-lib-for (quote ("OM-pm2")))(setf *om-current-persistent* (om-load-patch1 "03-pm2-add-synth" (quote ((om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 693 205) (om-make-point 32 30) 0.1 "0.1" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 427 120) (om-make-point 199 93) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900 6600 7400 7800) (6400 7400 7900) (6900 7300 7800) (7600) (7800 6200 7400) (7600) (7400) (7300) (7100 6700) (7600) (7400 6400) (7300) (7400 6500) (7100) (7000 6600) (6700) (6600) (6400) (6200 6600 7100))) :lonset (quote (0 1071 2142 2679 3217 4821 5358 5892 6429 6967 7500 8033 8571 9108 9642 11250 11783 12321 12858 13395)) :ldur (quote ((1071 1071 1071 1071) (1071 1071 1071) (1075 1075 537) (538) (1604 1604 1604) (537) (534) (537) (538 1071) (533) (533 1071) (538) (537 1071) (534) (1608 1608) (533) (538) (537) (925 925 925))) :lvel (quote ((100 100 100 100) (100 100 100) (100 100 100) (100) (100 100 100) (100) (100) (100) (100 100) (100) (100 100) (100) (100 100) (100) (100 100) (100) (100) (100) (100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0))) :lchan (quote ((4 3 2 1) (3 2 1) (3 2 1) (1) (1 3 2) (1) (1) (1) (1 3) (1) (1 3) (1) (1 3) (1) (1 3) (1) (1) (1) (1 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.030002 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems player)) (list nil nil 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 657 133) (om-make-point 68 30) "cseq.aif" "\"cseq.aif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 639 163) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 238 128) (om-make-point 86 30) (list 0.5 1.5 2.0) "(0.5 1.5 2.0)" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 179 127) (om-make-point 53 30) (list 1 2 3) "(1 2 3)" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 121 102) (om-make-point 86 30) (list 0.5 0.2 0.6) "(0.5 0.2 0.6)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 56 128) (om-make-point 95 30) (list 400 500 700) "(400 500 700)" nil) (om-load-editor-box1 "SDIF-BUFFER" (quote sdif-buffer) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "list of SDIFType" "TYPES" nil) (om-load-inputfun (quote input-funbox) "list of SDIFNVT" "NVTS" nil) (om-load-inputfun (quote input-funbox) "list of SDIFStream or SDIFFrame" "LFRAMES" nil))) (om-make-point 125 242) (om-make-point 70 50) (make-instance (quote sdif-buffer)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) nil nil nil nil) (om-load-boxcall (quote abstraction) "gen-partials-SDIF" (om-load-patch-abs1 "gen-partials-SDIF" (quote ((om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 106 225) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 225 196) (om-make-point 43 30) (quote ftime) "ftime" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 195 196) (om-make-point 23 30) (quote <) "<" nil) (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 179 229) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "generate-sdif-frames" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "freqs" nil) (om-load-inputfun (quote input-funbox) "" "amps" nil) (om-load-inputfun (quote input-funbox) "" "times" nil) (om-load-inputfun (quote input-funbox) "" "durs" nil))) (om-make-point 57 161) nil nil nil (list (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 367 547) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 337 605) (om-make-point 82 59) nil nil nil 3) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 428 108) nil nil nil nil 1) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 416 165) nil nil nil nil 1) (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "SDIF type signature" "SIGNATURE" nil) (om-load-inputfun (quote input-funbox) "time (s)" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "integer" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "list of SDIFMAtrix or raw-SDIFMatrix instances" "LMATRIX" nil))) (om-make-point 540 476) (om-make-point 135 67) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature nil :ftime 0.0 :streamid 0 :lmatrix nil :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 558 423) (om-make-point 56 30) "1MRK" "\"1MRK\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 639 423) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 449 433) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 229 358) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 254 378) (om-make-point 56 30) "1MRK" "\"1MRK\"" nil) (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "SDIF type signature" "signature" "1TRC") (om-load-inputkeyword (quote control-keyword) "" "K0" (quote :k0) nil nil))) (om-make-point 563 282) (om-make-point 150 65) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote signature)) nil) (setf (lcontrols array) (list (list (quote :k0) nil))) (setf (data array) nil) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t))) (list "All close" (list 0 nil))) 0 (quote t) nil (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 628 250) (om-make-point 54 30) "1END" "\"1END\"" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 312 249) (om-make-point 55 30) "1BEG" "\"1BEG\"" nil) (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "SDIF type signature" "signature" "1TRC") (om-load-inputkeyword (quote control-keyword) "" "K0" (quote :k0) nil nil))) (om-make-point 248 281) (om-make-point 150 65) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote signature)) nil) (setf (lcontrols array) (list (list (quote :k0) nil))) (setf (data array) nil) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t))) (list "All close" (list 0 nil))) 0 (quote t) nil (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 116 26) (quote "counter for indices") "" (om-make-point 472 113) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 165 46) (quote "\"1TRC\" matrix fields = $index, freq, amp, phase") "" (om-make-point 10 334) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 115 190) (om-make-point 54 30) "1TRC" "\"1TRC\"" nil) (om-load-boxcomment "comment" (om-make-point 146 68) (quote "Simplified SDIF structure: $each matrix contains only 1 partial") "" (om-make-point 447 3) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 88 203) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 225 205) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "inlist 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 199 138) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 466 366) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 411 363) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 156 138) nil nil nil nil 1) (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "SDIF type signature" "signature" "1TRC") (om-load-inputkeyword (quote control-keyword) "" "K0" (quote :k0) nil nil) (om-load-inputkeyword (quote control-keyword) "" "K1" (quote :k1) nil nil) (om-load-inputkeyword (quote control-keyword) "" "K2" (quote :k2) nil nil) (om-load-inputkeyword (quote control-keyword) "" "K3" (quote :k3) nil nil))) (om-make-point 83 241) (om-make-point 150 65) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote signature)) nil) (setf (lcontrols array) (list (list (quote :k0) nil) (list (quote :k1) nil) (list (quote :k2) nil) (list (quote :k3) nil))) (setf (data array) nil) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil))) 0 (quote t) nil (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "SDIF type signature" "SIGNATURE" nil) (om-load-inputfun (quote input-funbox) "time (s)" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "integer" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "list of SDIFMAtrix or raw-SDIFMatrix instances" "LMATRIX" nil))) (om-make-point 236 431) (om-make-point 135 67) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature nil :ftime 0.0 :streamid 0 :lmatrix nil :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxin "durs" 3 (om-make-point 476 303) "" "durs" nil nil) (om-load-boxin "times" 2 (om-make-point 417 300) "" "times" nil nil) (om-load-boxin "amps" 1 (om-make-point 205 47) "" "amps" nil nil) (om-load-boxin "freqs" 0 (om-make-point 164 47) "" "freqs" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 481 672) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 283 675) nil nil nil 0)) (quote ((25 0 0 0 nil 0) (4 0 0 1 nil 0) (0 0 1 0 nil 0) (29 0 2 0 nil 0) (2 0 3 1 nil 0) (5 0 4 1 nil 0) (7 0 4 2 nil 0) (6 0 4 4 nil 0) (10 0 6 0 nil 0) (22 0 7 0 nil 0) (21 0 7 1 nil 0) (24 0 8 0 nil 0) (13 0 8 1 nil 0) (11 0 10 2 nil 0) (3 0 10 3 nil 0) (12 0 13 2 nil 0) (3 0 13 3 nil 0) (28 0 20 0 nil 0) (26 0 21 0 nil 0) (27 0 22 0 nil 0) (29 0 23 0 nil 0) (18 0 24 1 nil 0) (16 0 24 2 nil 0) (3 0 24 3 nil 0) (23 0 24 4 nil 0) (20 0 24 5 nil 0) (19 0 24 6 nil 0) (9 0 25 1 nil 0) (22 0 25 2 nil 0) (8 0 25 4 nil 0) (1 1 30 0 nil 0) (1 0 31 0 nil 0))) 1 "generate-sdif-frames" nil) (om-load-boxin "durations" 3 (om-make-point 161 99) "" "durations" nil nil) (om-load-boxin "onsets" 2 (om-make-point 115 98) "" "onsets" nil nil) (om-load-boxin "amplitudes" 1 (om-make-point 76 46) "" "amplitudes" nil nil) (om-load-boxin "frequencies" 0 (om-make-point 31 95) "" "frequencies" nil nil) (om-load-boxout "output" 0 (om-make-point 181 296) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((4 0 0 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (8 0 4 0 nil 0) (7 0 4 1 nil 0) (6 0 4 2 nil 0) (5 0 4 3 nil 0) (3 0 9 0 nil 0))) 6.030002 nil "" (om-make-point 184 200) (om-make-point 397 428)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 129 159) nil nil nil "gen-partials-SDIF") (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 253 271) (om-make-point 39 30) 0.01 "0.01" nil) (om-load-boxcomment "comment" (om-make-point 159 24) (quote "... or connect a CHORD-SEQ") "" (om-make-point 496 74) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 239 34) (quote "OM-pm2 - Additive Synthesis") "" (om-make-point 268 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 317 42) (quote "Generate the control data as an SDIF file or SDIF-Buffer") "" (om-make-point 11 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "PM2-ADD-SYNTH" (quote pm2-add-synth) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SEQ" nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "attack" (quote :attack) 0.01 nil) (om-load-inputkeyword (quote input-keyword) "" "release" (quote :release) 0.01 nil))) (om-make-point 210 311) nil nil nil nil 1) (om-load-editor-box1 "pm2-out.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 136 391) (om-make-point 231 82) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "pm2-out" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "pm2-out.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "PM2-ADD-SYNTH" (quote pm2-add-synth) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SEQ" nil) (om-load-inputkeyword (quote input-keyword) "" "outfile" (quote :outfile) "pm2-out.aiff" nil) (om-load-inputkeyword (quote input-keyword) "partials attack time (s)" "attack" (quote :attack) 0.01 nil) (om-load-inputkeyword (quote input-keyword) "partials release time (s)" "release" (quote :release) 0.01 nil))) (om-make-point 621 235) nil nil nil nil 1) (om-load-editor-box1 "cseq.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 549 325) (om-make-point 231 82) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "cseq" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cseq.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (quote ((2 0 3 0 nil 0) (9 0 8 3 nil 0) (7 0 9 0 nil 0) (6 0 9 1 nil 0) (5 0 9 2 nil 0) (4 0 9 3 nil 0) (8 0 14 0 nil 0) (10 0 14 1 nil 0) (10 0 14 2 nil 0) (14 0 15 0 nil 0) (1 0 16 0 nil 0) (3 0 16 1 nil 0) (0 0 16 2 nil 0) (0 0 16 3 nil 0) (16 0 17 0 nil 0))) nil 6.030002))
