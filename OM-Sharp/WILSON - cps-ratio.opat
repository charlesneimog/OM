
(:patch
 (:name "WILSON - cps-ratio")
 (:doc "")
 (:info
  (:created "2020/09/11 16:03:01")
  (:modified "2021/01/20 14:12:34")
  (:by "om-sharp")
  (:version 1.02))
 (:window (:size (1942 1102)) (:position (-9 -9)))
 (:grid nil)
 (:lock t)
 (:boxes
  (:comment
   (:x 862)
   (:y 423)
   (:w 543)
   (:h 62)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Georgia") (:size 18) (:style :plain)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "Este objeto faz a decomposição em números primos, ele será muito usado na decomposição dos crivos.")
   (:id 0))
  (:box
   (:library "OM-JI")
   (:type :function)
   (:reference prime-decomposition)
   (:group-id nil)
   (:name "prime-decomposition")
   (:x 601)
   (:y 420)
   (:w 249)
   (:h 38)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "HARMONIC")
     (:value (:list 9 18 172))
     (:reactive nil)))
   (:outputs
    (:output (:name "out0") (:reactive nil))
    (:output (:name "out1") (:reactive nil)))
   (:id 1))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "TEXT-BOX 2")
   (:x 661)
   (:y 355)
   (:w 249)
   (:h 41)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value "untitled")
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 35 65 91 85 119 221))
   (:id 2))
  (:comment
   (:x 936)
   (:y 255)
   (:w 447)
   (:h 62)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Georgia") (:size 18) (:style :plain)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "Transforma os vértices de qualquer CPS em identities segundo a teoria de Partch.")
   (:id 3))
  (:box
   (:library "OM-JI")
   (:type :function)
   (:reference cps->identity)
   (:group-id nil)
   (:name "cps->identity")
   (:x 699)
   (:y 258)
   (:w 196)
   (:h 38)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CPS")
     (:value 1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:comment
   (:x 212)
   (:y 241)
   (:w 278)
   (:h 62)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Georgia") (:size 18) (:style :plain)))
     (:t-or-nil t)))
   (:align nil)
   (:text "Transforma os vértices de qualquer CPS em razões.")
   (:id 5))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "TEXT-BOX")
   (:x 302)
   (:y 371)
   (:w 257)
   (:h 83)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value "untitled")
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 35/32 65/64 91/64 85/64 119/64 221/128))
   (:id 6))
  (:box
   (:library "OM-JI")
   (:type :function)
   (:reference cps->ratio)
   (:group-id nil)
   (:name "cps->ratio")
   (:x 497)
   (:y 254)
   (:w 173)
   (:h 38)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "HEXANY")
     (:value 1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux")
   (:x 682)
   (:y 138)
   (:w 134)
   (:h 41)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 5 7 13 17))
   (:id 8))
  (:box
   (:library "OM-JI")
   (:type :function)
   (:reference hexany)
   (:group-id nil)
   (:name "hexany")
   (:x 668)
   (:y 188)
   (:w 162)
   (:h 38)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "HEXANY")
     (:value (:list 5 7 13 17))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 9))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "TEXT-BOX 3")
   (:x 459)
   (:y 518)
   (:w 470)
   (:h 41)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value "untitled")
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value
    (:list
     (:list 5 7)
     (:list 5 13)
     (:list 7 13)
     (:list 5 17)
     (:list 7 17)
     (:list 13 17)))
   (:id 10)))
 (:connections
  (:connection (:from (:box 1 :out 1)) (:to (:box 10 :in 0)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 1 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 9 :in 0)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 4 :in 0)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 7 :in 0)))))