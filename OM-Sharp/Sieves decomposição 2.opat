
(:patch
 (:name "Sieves decomposição 2")
 (:doc "")
 (:info
  (:created "2020/10/06 16:42:10")
  (:modified "2020/10/06 17:18:17")
  (:by "om-sharp")
  (:version 1.0))
 (:window (:size (1255 500)) (:position (26 22)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:library "OM-Symmetry")
   (:type :function)
   (:reference c-decompose)
   (:group-id nil)
   (:name "c-decompose")
   (:x 297)
   (:y 152)
   (:w 111)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SIEVE")
     (:value
      (:list
       23
       33
       47
       63
       70
       71
       93
       95
       119
       123
       143
       153
       167
       174
       183
       191
       213
       215
       239
       243
       263
       273
       278
       287
       303
       311
       333
       335
       359
       363
       382
       383
       393
       407
       423
       431
       453
       455
       479
       483
       486))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 210)
   (:y 50)
   (:w 500)
   (:h 63)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value
    (:list
     3
     23
     33
     47
     63
     70
     71
     93
     95
     119
     123
     143
     153
     167
     174
     183
     191
     213
     215
     239
     243
     263
     273
     278
     287
     303
     311
     333
     335
     359
     363
     382
     383
     393
     407
     423
     431
     453
     455
     479
     483
     486))
   (:id 1))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "my-function")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (923 594)) (:position (89 51)))
     (:text
      (:list
       "(lambda  (sieve)"
       ""
       "(defun c-decompose-fun (sieve &optional acc)"
       ""
       "(let* ("
       ""
       "(action1"
       "        (loop :for crible-element :in sieve :collect "
       ""
       "            (remove nil (let* ( "
       "                    (last-elem-sieve (last-elem sieve))"
       "                    (flat-sieve (flat sieve)))"
       ""
       "                    (loop :for cknloop :in flat-sieve :collect "
       "                        (let* ((box-abs (abs (- crible-element cknloop)))"
       "                                (box-if (if (= box-abs 0) crible-element box-abs)))"
       "                                (if     (= (length flat-sieve) (length (remove-duplicates "
       "                                    (x-append"
       "                                         (arithm-ser crible-element last-elem-sieve box-if)"
       "                                                flat-sieve)"
       "                                        :test"
       "                                        'equal)))"
       "                                (x-append box-if crible-element last-elem-sieve) nil)))))))"
       ""
       "(action2 (first (sort-list (flat action1 1) :test '< :key 'second)))"
       ""
       "(action3 (let* ("
       "(one-crible (arithm-ser (second action2) (third action2) (first action2))))"
       ""
       "(loop :for cknloop :in one-crible :collect"
       "        (let* ((accum-fun #'(lambda (sieve cknloop) (remove cknloop sieve))))"
       "                  (setf sieve (funcall accum-fun sieve cknloop))))))"
       ""
       "(action4 (last-elem action3)))"
       ""
       ""
       "(if (null sieve) (x-append acc (list action2)) (setf action4 (c-decompose-fun sieve (push action2 acc))))))"
       ""
       "(c-decompose-fun sieve))"
       ""))))
   (:group-id nil)
   (:name "my-function")
   (:x 529)
   (:y 145)
   (:w 104)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "SIEVE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 2))
  (:box
   (:library "OM-Symmetry")
   (:type :function)
   (:reference c-union-l)
   (:group-id nil)
   (:name "c-union-l")
   (:x 173)
   (:y 211)
   (:w 88)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CRIBLE")
     (:value (:list (:list 19 16 64) (:list 11 16 64)))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 3))
  (:box
   (:library "OM-Symmetry")
   (:type :function)
   (:reference c-union-l)
   (:group-id nil)
   (:name "c-union-l")
   (:x 647)
   (:y 324)
   (:w 88)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CRIBLE")
     (:value (:list (:list 19 16 64) (:list 11 16 64)))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 615)
   (:y 289)
   (:w 152)
   (:h 29)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 104 70 486)))
   (:id 5))
  (:box
   (:library "Mathtools")
   (:type :function)
   (:reference revel-crible)
   (:group-id nil)
   (:name "revel-crible")
   (:x 615)
   (:y 385)
   (:w 100)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:library "Mathtools")
   (:type :function)
   (:reference revel-crible)
   (:group-id nil)
   (:name "revel-crible")
   (:x 300)
   (:y 242)
   (:w 100)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 3 :in 0)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 0 :in 0)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 7 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 4 :in 0)))))