; OM File Header - Saved 2020/02/12 17:45:40
; (6.16 :patc (om-make-point 226 160) (om-make-point 506 0) (om-make-point 681 698) "" 183 0 "2020/01/24 20:02:03" "2020/02/12 17:45:40")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Partch" "Repmus")))(setf *om-current-persistent* (om-load-patch1 "1.3.2 - moments of symmetry" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 253 67) (om-make-point 32 28) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 32))) (om-make-point 235 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 16) (om-load-inputfun (quote input-funbox) "max" "HIGH" 32))) (om-make-point 166 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 237 178) (om-make-point 50 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 339 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 331 413) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 321 443) (om-make-point 31 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 347 74) (om-make-point 187 66) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 258 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 119 198) (om-make-point 44 28) 8400 "8400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 50 211) (om-make-point 49 28) 27/16 "27/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 206 505) (om-make-point 42 28) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 195 533) (om-make-point 27 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 29 487) (om-make-point 32 28) 72 "72" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 33 521) (om-make-point 88 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 193 204) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 324 265) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 365 265) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 410 265) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 459 265) (om-make-point 38 28) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 506 265) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-CHECK 2" (quote mos-check) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "INTERVAL" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11) (om-load-inputfun (quote input-funbox) "interval number of the MOS" "NUMBER_OF_INTERVAL" 2))) (om-make-point 297 295) (om-make-point 266 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS 2" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 61 244) (om-make-point 141 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "MOS" (om-load-patch-abs1 "MOS" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 239 78) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS 2" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 88 123) (om-make-point 285 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 450)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 89 244) (om-make-point 305 99) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6498) (6996) (6294) (6792) (6090) (6588) (7086) (6384) (6882) (6180) (6678))) :lonset (quote (0 450 900 1350 1800 2250 2700 3150 3600 4050 4500 5500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 660 260) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 28 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 129 78) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 182 78) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 302 78) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 1 1 nil 0) (0 0 1 2 nil 0) (5 0 1 3 nil 0) (1 0 2 1 nil 0))) 6.16 nil "" (om-make-point 795 123) (om-make-point 480 368)) (quote nil) (om-make-point 145 11) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "MOS-CHECK" (om-load-patch-abs1 "MOS-CHECK" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 76 182) (om-make-point 299 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 271 16) "(5 8 9 13 17 21 25 29 33 37 41 78 115)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 166 59) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 210 18) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 298 54) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 242 48) (om-make-point 38 28) 150 "150" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 124 57) (om-make-point 37 28) 5/4 "5/4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-CHECK" (quote mos-check) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "INTERVAL" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11) (om-load-inputfun (quote input-funbox) "number of sobreposition" "NUMBER_OF_INTERVAL" 11))) (om-make-point 125 97) (om-make-point 206 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (5 0 6 0 nil 0) (1 0 6 1 nil 0) (2 0 6 2 nil 0) (4 0 6 3 nil 0) (3 0 6 4 nil 0))) 6.16 nil "" (om-make-point 646 49) (om-make-point 516 283)) (quote nil) (om-make-point 881/4 21) nil nil nil "MOS-CHECK"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "MOS-verify" (om-load-patch-abs1 "MOS-verify" (quote ((let ((box (om-load-boxcall (quote genfun) "MOS-VERIFY 2" (quote mos-verify) (quote ((om-load-inputfun (quote input-funbox) "list of notes - object-MOS" "NOTELIST" (list 6754 6308 7062 6616 6178)))) (om-make-point 173 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-VERIFY" (quote mos-verify) (quote ((om-load-inputfun (quote input-funbox) "list of notes - object-MOS" "NOTELIST" (list 6754 6308 7062 6616 6178)))) (om-make-point 443 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 367 340) (om-make-point 227 42) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 199 18) "This is not a MOS" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ratio->mc" (om-load-patch-abs1 "ratio->mc" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 316) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 156 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RATIO->MC" (quote ratio->mc) (quote ((om-load-inputfun (quote input-funbox) "convert list of ratios for midicent in Just Intonation" "RATIO" (list 1 11/8 7/4)) (om-load-inputfun (quote input-funbox) "this is the fundamental of the Just Intonation" "FUNDAMENTAL" 6000))) (om-make-point 200 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 177 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 3 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 325 441)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 847/2 343/2) nil (list (list (list 6000 6498 6814) (list 6702 6000 6316) (list 6386 6884 6000))) nil "ratio->mc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 391 60) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TONALITY-DIAMOND" (quote tonality-diamond) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "LIMITE" 5) (om-load-inputfunmenu1 (quote input-funmenu) "U-tonality or O-tonality" "TONALITY" 1 (list (list "u-tonality" 1) (list "o-tonality" 2))))) (om-make-point 409 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 87 273) (om-make-point 227 42) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 199 18) "(s L s L s s L s L s)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 116 68) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 155 68) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 200 68) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 245 68) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS 2" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 150 98) (om-make-point 92 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (3 0 1 0 nil 0) (1 0 2 0 nil 0) (5 0 3 0 nil 0) (4 0 5 0 nil 0) (0 0 6 0 nil 0) (7 0 11 0 nil 0) (8 0 11 1 nil 0) (9 0 11 2 nil 0) (10 0 11 3 nil 0))) 6.16 nil "" (om-make-point 162 82) (om-make-point 667 430)) (quote nil) (om-make-point 141/2 9/2) nil nil nil "MOS-verify"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (6 0 4 0 nil 0) (8 0 6 0 nil 0) (5 0 6 1 nil 0) (22 0 8 0 nil 0) (4 0 12 0 nil 0) (11 0 12 1 nil 0) (12 0 14 0 nil 0) (13 0 14 1 nil 0) (16 0 21 0 nil 0) (17 0 21 1 nil 0) (18 0 21 2 nil 0) (19 0 21 3 nil 0) (20 0 21 4 nil 0) (3 0 22 0 nil 0) (9 0 22 2 nil 0) (15 0 22 3 nil 0))) nil 6.16))
