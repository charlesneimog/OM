
(:patch
 (:name "hEXANY")
 (:doc "")
 (:info
  (:created "2020/12/08 15:35:09")
  (:modified "2020/12/08 15:41:14")
  (:by "om-sharp")
  (:version 1.01))
 (:window (:size (1920 1026)) (:position (-9 -9)))
 (:grid nil)
 (:lock t)
 (:boxes
  (:box
   (:library "OM-JI")
   (:type :function)
   (:reference hexany)
   (:group-id nil)
   (:name "hexany")
   (:x 160)
   (:y 103)
   (:w 166)
   (:h 41)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "HEXANY")
     (:value (:list 5 7 13 17))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 176)
   (:y 55)
   (:w 134)
   (:h 41)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 5 7 13 17))
   (:id 1))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 63)
   (:y 176)
   (:w 360)
   (:h 41)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value
    (:list
     (:list 5 7)
     (:list 5 13)
     (:list 7 13)
     (:list 5 17)
     (:list 7 17)
     (:list 13 17)))
   (:id 2))
  (:comment
   (:x 334)
   (:y 84)
   (:w 215)
   (:h 89)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Este objeto constrói todos os vértices de um CPS-Hexany.")
   (:id 3))
  (:box
   (:library "OM-JI")
   (:type :function)
   (:reference hexany)
   (:group-id nil)
   (:name "hexany")
   (:x 689)
   (:y 104)
   (:w 166)
   (:h 41)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "HEXANY")
     (:value (:list 5 7 13 17))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 689)
   (:y 56)
   (:w 166)
   (:h 41)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 5 7 13 17 19))
   (:id 5))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 521)
   (:y 221)
   (:w 646)
   (:h 79)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value
    "This is not a Hexany, The CPS Hexany needs 4 numbers: for example 3 7 13 17")
   (:id 6))
  (:comment
   (:x 879)
   (:y 80)
   (:w 376)
   (:h 89)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Caso o usuário não conheça a teoria de Wilson e coloque mais de 4 harmônicos para o Hexany.")
   (:id 7)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 0 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 4 :in 0)))))